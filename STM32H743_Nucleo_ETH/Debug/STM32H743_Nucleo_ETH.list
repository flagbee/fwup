
STM32H743_Nucleo_ETH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ec68  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002a18  0800ef08  0800ef08  0001ef08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08011920  08011920  00021920  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08011924  08011924  00021924  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000008c  24000000  08011928  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00010774  2400008c  080119b4  0003008c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  24010800  080119b4  00030800  2**0
                  ALLOC
  8 .lwip_sec     00024b83  30020000  30020000  00040000  2**2
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0003008c  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  000300ba  2**0
                  CONTENTS, READONLY
 11 .debug_info   00046d62  00000000  00000000  000300fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00009cec  00000000  00000000  00076e5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001ec0  00000000  00000000  00080b50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00003187  00000000  00000000  00082a10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000473f0  00000000  00000000  00085b97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0004864a  00000000  00000000  000ccf87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00182a24  00000000  00000000  001155d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  000070b4  00000000  00000000  00297ff8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_loclists 0001bb6f  00000000  00000000  0029f0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000079  00000000  00000000  002bac1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400008c 	.word	0x2400008c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800eef0 	.word	0x0800eef0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000090 	.word	0x24000090
 80002dc:	0800eef0 	.word	0x0800eef0

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <vApplicationStackOverflowHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
   /* ETH_CODE: add breakpoint when stack oveflow is detected by FreeRTOS.
    * Useful for debugging issues.
    */
   __BKPT(0);
 8000380:	be00      	bkpt	0x0000
}
 8000382:	4770      	bx	lr

08000384 <lwiperf_tcp_close>:
static void
lwiperf_list_remove(lwiperf_state_base_t *item)
{
  lwiperf_state_base_t *prev = NULL;
  lwiperf_state_base_t *iter;
  for (iter = lwiperf_all_connections; iter != NULL; prev = iter, iter = iter->next) {
 8000384:	4a3b      	ldr	r2, [pc, #236]	; (8000474 <lwiperf_tcp_close+0xf0>)
 8000386:	6813      	ldr	r3, [r2, #0]
}

/** Close an iperf tcp session */
static void
lwiperf_tcp_close(lwiperf_state_tcp_t *conn, enum lwiperf_report_type report_type)
{
 8000388:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800038c:	4604      	mov	r4, r0
 800038e:	b087      	sub	sp, #28
 8000390:	460e      	mov	r6, r1
  for (iter = lwiperf_all_connections; iter != NULL; prev = iter, iter = iter->next) {
 8000392:	b91b      	cbnz	r3, 800039c <lwiperf_tcp_close+0x18>
 8000394:	e01b      	b.n	80003ce <lwiperf_tcp_close+0x4a>
 8000396:	461a      	mov	r2, r3
 8000398:	681b      	ldr	r3, [r3, #0]
 800039a:	b1c3      	cbz	r3, 80003ce <lwiperf_tcp_close+0x4a>
    if (iter == item) {
 800039c:	429c      	cmp	r4, r3
 800039e:	d1fa      	bne.n	8000396 <lwiperf_tcp_close+0x12>
        prev->next = iter->next;
 80003a0:	6825      	ldr	r5, [r4, #0]
 80003a2:	6015      	str	r5, [r2, #0]
      for (iter = iter->next; iter != NULL; iter = iter->next) {
 80003a4:	b19d      	cbz	r5, 80003ce <lwiperf_tcp_close+0x4a>
        LWIP_ASSERT("duplicate entry", iter != item);
 80003a6:	42ac      	cmp	r4, r5
 80003a8:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 800047c <lwiperf_tcp_close+0xf8>
 80003ac:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 8000484 <lwiperf_tcp_close+0x100>
 80003b0:	4f31      	ldr	r7, [pc, #196]	; (8000478 <lwiperf_tcp_close+0xf4>)
 80003b2:	d003      	beq.n	80003bc <lwiperf_tcp_close+0x38>
      for (iter = iter->next; iter != NULL; iter = iter->next) {
 80003b4:	682d      	ldr	r5, [r5, #0]
 80003b6:	b155      	cbz	r5, 80003ce <lwiperf_tcp_close+0x4a>
        LWIP_ASSERT("duplicate entry", iter != item);
 80003b8:	42ac      	cmp	r4, r5
 80003ba:	d1fb      	bne.n	80003b4 <lwiperf_tcp_close+0x30>
 80003bc:	464b      	mov	r3, r9
 80003be:	22d0      	movs	r2, #208	; 0xd0
 80003c0:	4641      	mov	r1, r8
 80003c2:	4638      	mov	r0, r7
 80003c4:	f00d fe2e 	bl	800e024 <iprintf>
      for (iter = iter->next; iter != NULL; iter = iter->next) {
 80003c8:	682d      	ldr	r5, [r5, #0]
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	d1f4      	bne.n	80003b8 <lwiperf_tcp_close+0x34>
  if ((conn != NULL) && (conn->report_fn != NULL)) {
 80003ce:	b1cc      	cbz	r4, 8000404 <lwiperf_tcp_close+0x80>
 80003d0:	69a3      	ldr	r3, [r4, #24]
 80003d2:	b1bb      	cbz	r3, 8000404 <lwiperf_tcp_close+0x80>
    now = sys_now();
 80003d4:	f003 fc2c 	bl	8003c30 <sys_now>
    duration_ms = now - conn->time_started;
 80003d8:	6963      	ldr	r3, [r4, #20]
      bandwidth_kbitpsec = (conn->bytes_transferred / duration_ms) * 8U;
 80003da:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
    if (duration_ms == 0) {
 80003de:	1ac5      	subs	r5, r0, r3
 80003e0:	d046      	beq.n	8000470 <lwiperf_tcp_close+0xec>
      bandwidth_kbitpsec = (conn->bytes_transferred / duration_ms) * 8U;
 80003e2:	fbbc f7f5 	udiv	r7, ip, r5
 80003e6:	00ff      	lsls	r7, r7, #3
                    &conn->conn_pcb->local_ip, conn->conn_pcb->local_port,
 80003e8:	6922      	ldr	r2, [r4, #16]
    conn->report_fn(conn->report_arg, report_type,
 80003ea:	4631      	mov	r1, r6
 80003ec:	8ad3      	ldrh	r3, [r2, #22]
 80003ee:	e9d4 6006 	ldrd	r6, r0, [r4, #24]
 80003f2:	e9cd 5703 	strd	r5, r7, [sp, #12]
 80003f6:	f8cd c008 	str.w	ip, [sp, #8]
 80003fa:	8b15      	ldrh	r5, [r2, #24]
 80003fc:	9501      	str	r5, [sp, #4]
                    &conn->conn_pcb->remote_ip, conn->conn_pcb->remote_port,
 80003fe:	1d15      	adds	r5, r2, #4
    conn->report_fn(conn->report_arg, report_type,
 8000400:	9500      	str	r5, [sp, #0]
 8000402:	47b0      	blx	r6
  err_t err;

  lwiperf_list_remove(&conn->base);
  lwip_tcp_conn_report(conn, report_type);
  if (conn->conn_pcb != NULL) {
 8000404:	6920      	ldr	r0, [r4, #16]
 8000406:	b330      	cbz	r0, 8000456 <lwiperf_tcp_close+0xd2>
    tcp_arg(conn->conn_pcb, NULL);
 8000408:	2100      	movs	r1, #0
 800040a:	f008 f813 	bl	8008434 <tcp_arg>
    tcp_poll(conn->conn_pcb, NULL, 0);
 800040e:	2200      	movs	r2, #0
 8000410:	6920      	ldr	r0, [r4, #16]
 8000412:	4611      	mov	r1, r2
 8000414:	f008 f870 	bl	80084f8 <tcp_poll>
    tcp_sent(conn->conn_pcb, NULL);
 8000418:	2100      	movs	r1, #0
 800041a:	6920      	ldr	r0, [r4, #16]
 800041c:	f008 f82c 	bl	8008478 <tcp_sent>
    tcp_recv(conn->conn_pcb, NULL);
 8000420:	2100      	movs	r1, #0
 8000422:	6920      	ldr	r0, [r4, #16]
 8000424:	f008 f80e 	bl	8008444 <tcp_recv>
    tcp_err(conn->conn_pcb, NULL);
 8000428:	6920      	ldr	r0, [r4, #16]
 800042a:	2100      	movs	r1, #0
 800042c:	f008 f83e 	bl	80084ac <tcp_err>
    err = tcp_close(conn->conn_pcb);
 8000430:	6920      	ldr	r0, [r4, #16]
 8000432:	f008 feb3 	bl	800919c <tcp_close>
    if (err != ERR_OK) {
 8000436:	b928      	cbnz	r0, 8000444 <lwiperf_tcp_close+0xc0>
  } else {
    /* no conn pcb, this is the listener pcb */
    err = tcp_close(conn->server_pcb);
    LWIP_ASSERT("error", err == ERR_OK);
  }
  LWIPERF_FREE(lwiperf_state_tcp_t, conn);
 8000438:	4620      	mov	r0, r4
}
 800043a:	b007      	add	sp, #28
 800043c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  LWIPERF_FREE(lwiperf_state_tcp_t, conn);
 8000440:	f006 bb6c 	b.w	8006b1c <mem_free>
      tcp_abort(conn->conn_pcb);
 8000444:	6920      	ldr	r0, [r4, #16]
 8000446:	f008 fcc3 	bl	8008dd0 <tcp_abort>
  LWIPERF_FREE(lwiperf_state_tcp_t, conn);
 800044a:	4620      	mov	r0, r4
}
 800044c:	b007      	add	sp, #28
 800044e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  LWIPERF_FREE(lwiperf_state_tcp_t, conn);
 8000452:	f006 bb63 	b.w	8006b1c <mem_free>
    err = tcp_close(conn->server_pcb);
 8000456:	68e0      	ldr	r0, [r4, #12]
 8000458:	f008 fea0 	bl	800919c <tcp_close>
    LWIP_ASSERT("error", err == ERR_OK);
 800045c:	2800      	cmp	r0, #0
 800045e:	d0eb      	beq.n	8000438 <lwiperf_tcp_close+0xb4>
 8000460:	4b06      	ldr	r3, [pc, #24]	; (800047c <lwiperf_tcp_close+0xf8>)
 8000462:	f240 120d 	movw	r2, #269	; 0x10d
 8000466:	4906      	ldr	r1, [pc, #24]	; (8000480 <lwiperf_tcp_close+0xfc>)
 8000468:	4803      	ldr	r0, [pc, #12]	; (8000478 <lwiperf_tcp_close+0xf4>)
 800046a:	f00d fddb 	bl	800e024 <iprintf>
 800046e:	e7e3      	b.n	8000438 <lwiperf_tcp_close+0xb4>
      bandwidth_kbitpsec = 0;
 8000470:	462f      	mov	r7, r5
 8000472:	e7b9      	b.n	80003e8 <lwiperf_tcp_close+0x64>
 8000474:	240000a8 	.word	0x240000a8
 8000478:	0800ef30 	.word	0x0800ef30
 800047c:	0800ef08 	.word	0x0800ef08
 8000480:	0800ef58 	.word	0x0800ef58
 8000484:	0800ef20 	.word	0x0800ef20

08000488 <lwiperf_tcp_accept>:
/** This is called when a new client connects for an iperf tcp session */
static err_t
lwiperf_tcp_accept(void *arg, struct tcp_pcb *newpcb, err_t err)
{
  lwiperf_state_tcp_t *s, *conn;
  if ((err != ERR_OK) || (newpcb == NULL) || (arg == NULL)) {
 8000488:	2800      	cmp	r0, #0
 800048a:	bf18      	it	ne
 800048c:	2900      	cmpne	r1, #0
 800048e:	f000 8092 	beq.w	80005b6 <lwiperf_tcp_accept+0x12e>
 8000492:	2a00      	cmp	r2, #0
 8000494:	f040 808f 	bne.w	80005b6 <lwiperf_tcp_accept+0x12e>
{
 8000498:	b570      	push	{r4, r5, r6, lr}
    return ERR_VAL;
  }

  s = (lwiperf_state_tcp_t *)arg;
  LWIP_ASSERT("invalid session", s->base.server);
 800049a:	7943      	ldrb	r3, [r0, #5]
 800049c:	460e      	mov	r6, r1
 800049e:	4604      	mov	r4, r0
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d06b      	beq.n	800057c <lwiperf_tcp_accept+0xf4>
  LWIP_ASSERT("invalid listen pcb", s->server_pcb != NULL);
 80004a4:	68e3      	ldr	r3, [r4, #12]
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d072      	beq.n	8000590 <lwiperf_tcp_accept+0x108>
  LWIP_ASSERT("invalid conn pcb", s->conn_pcb == NULL);
 80004aa:	6923      	ldr	r3, [r4, #16]
 80004ac:	b133      	cbz	r3, 80004bc <lwiperf_tcp_accept+0x34>
 80004ae:	4b43      	ldr	r3, [pc, #268]	; (80005bc <lwiperf_tcp_accept+0x134>)
 80004b0:	f240 225a 	movw	r2, #602	; 0x25a
 80004b4:	4942      	ldr	r1, [pc, #264]	; (80005c0 <lwiperf_tcp_accept+0x138>)
 80004b6:	4843      	ldr	r0, [pc, #268]	; (80005c4 <lwiperf_tcp_accept+0x13c>)
 80004b8:	f00d fdb4 	bl	800e024 <iprintf>
  if (s->specific_remote) {
 80004bc:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d138      	bne.n	8000536 <lwiperf_tcp_accept+0xae>
    if (!ip_addr_cmp(&newpcb->remote_ip, &s->remote_addr)) {
      /* this listener belongs to a client session, and this is not the correct remote */
      return ERR_VAL;
    }
  } else {
    LWIP_ASSERT("s->base.related_master_state == NULL", s->base.related_master_state == NULL);
 80004c4:	68a3      	ldr	r3, [r4, #8]
 80004c6:	b133      	cbz	r3, 80004d6 <lwiperf_tcp_accept+0x4e>
 80004c8:	4b3c      	ldr	r3, [pc, #240]	; (80005bc <lwiperf_tcp_accept+0x134>)
 80004ca:	f240 2262 	movw	r2, #610	; 0x262
 80004ce:	493e      	ldr	r1, [pc, #248]	; (80005c8 <lwiperf_tcp_accept+0x140>)
 80004d0:	483c      	ldr	r0, [pc, #240]	; (80005c4 <lwiperf_tcp_accept+0x13c>)
 80004d2:	f00d fda7 	bl	800e024 <iprintf>
  }

  conn = (lwiperf_state_tcp_t *)LWIPERF_ALLOC(lwiperf_state_tcp_t);
 80004d6:	2048      	movs	r0, #72	; 0x48
 80004d8:	f006 fcc4 	bl	8006e64 <mem_malloc>
  if (conn == NULL) {
 80004dc:	4605      	mov	r5, r0
 80004de:	2800      	cmp	r0, #0
 80004e0:	d066      	beq.n	80005b0 <lwiperf_tcp_accept+0x128>
    return ERR_MEM;
  }
  memset(conn, 0, sizeof(lwiperf_state_tcp_t));
 80004e2:	2248      	movs	r2, #72	; 0x48
 80004e4:	2100      	movs	r1, #0
 80004e6:	f00d fe02 	bl	800e0ee <memset>
  conn->base.tcp = 1;
 80004ea:	f240 1301 	movw	r3, #257	; 0x101
  conn->base.server = 1;
  conn->base.related_master_state = &s->base;
 80004ee:	60ac      	str	r4, [r5, #8]
  conn->base.tcp = 1;
 80004f0:	80ab      	strh	r3, [r5, #4]
  conn->conn_pcb = newpcb;
 80004f2:	612e      	str	r6, [r5, #16]
  conn->time_started = sys_now();
 80004f4:	f003 fb9c 	bl	8003c30 <sys_now>
  conn->report_fn = s->report_fn;
 80004f8:	69a3      	ldr	r3, [r4, #24]
  conn->report_arg = s->report_arg;

  /* setup the tcp rx connection */
  tcp_arg(newpcb, conn);
 80004fa:	4629      	mov	r1, r5
  conn->report_fn = s->report_fn;
 80004fc:	e9c5 0305 	strd	r0, r3, [r5, #20]
  conn->report_arg = s->report_arg;
 8000500:	69e3      	ldr	r3, [r4, #28]
  tcp_arg(newpcb, conn);
 8000502:	4630      	mov	r0, r6
  conn->report_arg = s->report_arg;
 8000504:	61eb      	str	r3, [r5, #28]
  tcp_arg(newpcb, conn);
 8000506:	f007 ff95 	bl	8008434 <tcp_arg>
  tcp_recv(newpcb, lwiperf_tcp_recv);
 800050a:	4930      	ldr	r1, [pc, #192]	; (80005cc <lwiperf_tcp_accept+0x144>)
 800050c:	4630      	mov	r0, r6
 800050e:	f007 ff99 	bl	8008444 <tcp_recv>
  tcp_poll(newpcb, lwiperf_tcp_poll, 2U);
 8000512:	2202      	movs	r2, #2
 8000514:	492e      	ldr	r1, [pc, #184]	; (80005d0 <lwiperf_tcp_accept+0x148>)
 8000516:	4630      	mov	r0, r6
 8000518:	f007 ffee 	bl	80084f8 <tcp_poll>
  tcp_err(conn->conn_pcb, lwiperf_tcp_err);
 800051c:	492d      	ldr	r1, [pc, #180]	; (80005d4 <lwiperf_tcp_accept+0x14c>)
 800051e:	6928      	ldr	r0, [r5, #16]
 8000520:	f007 ffc4 	bl	80084ac <tcp_err>

  if (s->specific_remote) {
 8000524:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8000528:	b97b      	cbnz	r3, 800054a <lwiperf_tcp_accept+0xc2>
  for (iter = lwiperf_all_connections; iter != NULL; iter = iter->next) {
 800052a:	4e2b      	ldr	r6, [pc, #172]	; (80005d8 <lwiperf_tcp_accept+0x150>)
 800052c:	6831      	ldr	r1, [r6, #0]
      s->report_fn = NULL;
      lwiperf_tcp_close(s, LWIPERF_TCP_ABORTED_LOCAL);
    }
  }
  lwiperf_list_add(&conn->base);
  return ERR_OK;
 800052e:	2000      	movs	r0, #0
  item->next = lwiperf_all_connections;
 8000530:	6029      	str	r1, [r5, #0]
  lwiperf_all_connections = item;
 8000532:	6035      	str	r5, [r6, #0]
}
 8000534:	bd70      	pop	{r4, r5, r6, pc}
    LWIP_ASSERT("s->base.related_master_state != NULL", s->base.related_master_state != NULL);
 8000536:	68a3      	ldr	r3, [r4, #8]
 8000538:	2b00      	cmp	r3, #0
 800053a:	d031      	beq.n	80005a0 <lwiperf_tcp_accept+0x118>
    if (!ip_addr_cmp(&newpcb->remote_ip, &s->remote_addr)) {
 800053c:	6872      	ldr	r2, [r6, #4]
 800053e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000540:	429a      	cmp	r2, r3
 8000542:	d0c8      	beq.n	80004d6 <lwiperf_tcp_accept+0x4e>
    return ERR_VAL;
 8000544:	f06f 0005 	mvn.w	r0, #5
}
 8000548:	bd70      	pop	{r4, r5, r6, pc}
    conn->base.related_master_state = s->base.related_master_state;
 800054a:	68a2      	ldr	r2, [r4, #8]
 800054c:	4e22      	ldr	r6, [pc, #136]	; (80005d8 <lwiperf_tcp_accept+0x150>)
 800054e:	60aa      	str	r2, [r5, #8]
    if (!s->client_tradeoff_mode || !lwiperf_list_find(s->base.related_master_state)) {
 8000550:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8000554:	b153      	cbz	r3, 800056c <lwiperf_tcp_accept+0xe4>
  for (iter = lwiperf_all_connections; iter != NULL; iter = iter->next) {
 8000556:	6831      	ldr	r1, [r6, #0]
 8000558:	b141      	cbz	r1, 800056c <lwiperf_tcp_accept+0xe4>
    if (iter == item) {
 800055a:	428a      	cmp	r2, r1
 800055c:	d0e7      	beq.n	800052e <lwiperf_tcp_accept+0xa6>
 800055e:	460b      	mov	r3, r1
 8000560:	e001      	b.n	8000566 <lwiperf_tcp_accept+0xde>
 8000562:	429a      	cmp	r2, r3
 8000564:	d0e3      	beq.n	800052e <lwiperf_tcp_accept+0xa6>
  for (iter = lwiperf_all_connections; iter != NULL; iter = iter->next) {
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	2b00      	cmp	r3, #0
 800056a:	d1fa      	bne.n	8000562 <lwiperf_tcp_accept+0xda>
      s->report_fn = NULL;
 800056c:	2300      	movs	r3, #0
      lwiperf_tcp_close(s, LWIPERF_TCP_ABORTED_LOCAL);
 800056e:	2102      	movs	r1, #2
 8000570:	4620      	mov	r0, r4
      s->report_fn = NULL;
 8000572:	61a3      	str	r3, [r4, #24]
      lwiperf_tcp_close(s, LWIPERF_TCP_ABORTED_LOCAL);
 8000574:	f7ff ff06 	bl	8000384 <lwiperf_tcp_close>
  item->next = lwiperf_all_connections;
 8000578:	6831      	ldr	r1, [r6, #0]
 800057a:	e7d8      	b.n	800052e <lwiperf_tcp_accept+0xa6>
  LWIP_ASSERT("invalid session", s->base.server);
 800057c:	4b0f      	ldr	r3, [pc, #60]	; (80005bc <lwiperf_tcp_accept+0x134>)
 800057e:	f44f 7216 	mov.w	r2, #600	; 0x258
 8000582:	4916      	ldr	r1, [pc, #88]	; (80005dc <lwiperf_tcp_accept+0x154>)
 8000584:	480f      	ldr	r0, [pc, #60]	; (80005c4 <lwiperf_tcp_accept+0x13c>)
 8000586:	f00d fd4d 	bl	800e024 <iprintf>
  LWIP_ASSERT("invalid listen pcb", s->server_pcb != NULL);
 800058a:	68e3      	ldr	r3, [r4, #12]
 800058c:	2b00      	cmp	r3, #0
 800058e:	d18c      	bne.n	80004aa <lwiperf_tcp_accept+0x22>
 8000590:	4b0a      	ldr	r3, [pc, #40]	; (80005bc <lwiperf_tcp_accept+0x134>)
 8000592:	f240 2259 	movw	r2, #601	; 0x259
 8000596:	4912      	ldr	r1, [pc, #72]	; (80005e0 <lwiperf_tcp_accept+0x158>)
 8000598:	480a      	ldr	r0, [pc, #40]	; (80005c4 <lwiperf_tcp_accept+0x13c>)
 800059a:	f00d fd43 	bl	800e024 <iprintf>
 800059e:	e784      	b.n	80004aa <lwiperf_tcp_accept+0x22>
    LWIP_ASSERT("s->base.related_master_state != NULL", s->base.related_master_state != NULL);
 80005a0:	4b06      	ldr	r3, [pc, #24]	; (80005bc <lwiperf_tcp_accept+0x134>)
 80005a2:	f44f 7217 	mov.w	r2, #604	; 0x25c
 80005a6:	490f      	ldr	r1, [pc, #60]	; (80005e4 <lwiperf_tcp_accept+0x15c>)
 80005a8:	4806      	ldr	r0, [pc, #24]	; (80005c4 <lwiperf_tcp_accept+0x13c>)
 80005aa:	f00d fd3b 	bl	800e024 <iprintf>
 80005ae:	e7c5      	b.n	800053c <lwiperf_tcp_accept+0xb4>
    return ERR_MEM;
 80005b0:	f04f 30ff 	mov.w	r0, #4294967295
}
 80005b4:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_VAL;
 80005b6:	f06f 0005 	mvn.w	r0, #5
}
 80005ba:	4770      	bx	lr
 80005bc:	0800ef08 	.word	0x0800ef08
 80005c0:	0800ef84 	.word	0x0800ef84
 80005c4:	0800ef30 	.word	0x0800ef30
 80005c8:	0800efc0 	.word	0x0800efc0
 80005cc:	080009ed 	.word	0x080009ed
 80005d0:	08000731 	.word	0x08000731
 80005d4:	080005e9 	.word	0x080005e9
 80005d8:	240000a8 	.word	0x240000a8
 80005dc:	0800ef60 	.word	0x0800ef60
 80005e0:	0800ef70 	.word	0x0800ef70
 80005e4:	0800ef98 	.word	0x0800ef98

080005e8 <lwiperf_tcp_err>:
  lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_REMOTE);
 80005e8:	2105      	movs	r1, #5
 80005ea:	f7ff becb 	b.w	8000384 <lwiperf_tcp_close>
 80005ee:	bf00      	nop

080005f0 <lwiperf_tcp_client_send_more>:
{
 80005f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("conn invalid", (conn != NULL) && conn->base.tcp && (conn->base.server == 0));
 80005f4:	4605      	mov	r5, r0
 80005f6:	b110      	cbz	r0, 80005fe <lwiperf_tcp_client_send_more+0xe>
 80005f8:	7903      	ldrb	r3, [r0, #4]
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d16f      	bne.n	80006de <lwiperf_tcp_client_send_more+0xee>
 80005fe:	4b3a      	ldr	r3, [pc, #232]	; (80006e8 <lwiperf_tcp_client_send_more+0xf8>)
 8000600:	f240 121d 	movw	r2, #285	; 0x11d
 8000604:	4939      	ldr	r1, [pc, #228]	; (80006ec <lwiperf_tcp_client_send_more+0xfc>)
 8000606:	483a      	ldr	r0, [pc, #232]	; (80006f0 <lwiperf_tcp_client_send_more+0x100>)
 8000608:	f00d fd0c 	bl	800e024 <iprintf>
      u32_t time_ms = time * 10;
 800060c:	f06f 0909 	mvn.w	r9, #9
      txptr = LWIP_CONST_CAST(void *, &lwiperf_txbuf_const[conn->bytes_transferred % 10]);
 8000610:	f8df b0e4 	ldr.w	fp, [pc, #228]	; 80006f8 <lwiperf_tcp_client_send_more+0x108>
 8000614:	e006      	b.n	8000624 <lwiperf_tcp_client_send_more+0x34>
    if (err == ERR_OK) {
 8000616:	bb78      	cbnz	r0, 8000678 <lwiperf_tcp_client_send_more+0x88>
      conn->bytes_transferred += txlen;
 8000618:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800061a:	4423      	add	r3, r4
 800061c:	626b      	str	r3, [r5, #36]	; 0x24
  } while (send_more);
 800061e:	f1b8 0f00 	cmp.w	r8, #0
 8000622:	d029      	beq.n	8000678 <lwiperf_tcp_client_send_more+0x88>
    if (conn->settings.amount & PP_HTONL(0x80000000)) {
 8000624:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 8000626:	0602      	lsls	r2, r0, #24
 8000628:	d52c      	bpl.n	8000684 <lwiperf_tcp_client_send_more+0x94>
      u32_t now = sys_now();
 800062a:	f003 fb01 	bl	8003c30 <sys_now>
      u32_t diff_ms = now - conn->time_started;
 800062e:	696b      	ldr	r3, [r5, #20]
      u32_t now = sys_now();
 8000630:	4604      	mov	r4, r0
      u32_t time = (u32_t) - (s32_t)lwip_htonl(conn->settings.amount);
 8000632:	6be8      	ldr	r0, [r5, #60]	; 0x3c
      u32_t diff_ms = now - conn->time_started;
 8000634:	1ae4      	subs	r4, r4, r3
      u32_t time = (u32_t) - (s32_t)lwip_htonl(conn->settings.amount);
 8000636:	f006 f9b7 	bl	80069a8 <lwip_htonl>
      u32_t time_ms = time * 10;
 800063a:	fb09 f000 	mul.w	r0, r9, r0
      if (diff_ms >= time_ms) {
 800063e:	4284      	cmp	r4, r0
 8000640:	d225      	bcs.n	800068e <lwiperf_tcp_client_send_more+0x9e>
    if (conn->bytes_transferred < 24) {
 8000642:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000644:	2b17      	cmp	r3, #23
 8000646:	d93f      	bls.n	80006c8 <lwiperf_tcp_client_send_more+0xd8>
    } else if (conn->bytes_transferred < 48) {
 8000648:	2b2f      	cmp	r3, #47	; 0x2f
 800064a:	d827      	bhi.n	800069c <lwiperf_tcp_client_send_more+0xac>
      txptr = &((u8_t *)&conn->settings)[conn->bytes_transferred - 24];
 800064c:	18ee      	adds	r6, r5, r3
      txlen_max = (u16_t)(48 - conn->bytes_transferred);
 800064e:	f1c3 0330 	rsb	r3, r3, #48	; 0x30
      apiflags = TCP_WRITE_FLAG_COPY | TCP_WRITE_FLAG_MORE;
 8000652:	f04f 0a03 	mov.w	sl, #3
      send_more = 1;
 8000656:	f04f 0801 	mov.w	r8, #1
      txptr = &((u8_t *)&conn->settings)[conn->bytes_transferred - 24];
 800065a:	3610      	adds	r6, #16
      txlen_max = (u16_t)(48 - conn->bytes_transferred);
 800065c:	b29c      	uxth	r4, r3
    } while ((err == ERR_MEM) && (txlen >= (TCP_MSS / 2)));
 800065e:	f240 27da 	movw	r7, #730	; 0x2da
      err = tcp_write(conn->conn_pcb, txptr, txlen, apiflags);
 8000662:	4653      	mov	r3, sl
 8000664:	4622      	mov	r2, r4
 8000666:	4631      	mov	r1, r6
 8000668:	6928      	ldr	r0, [r5, #16]
 800066a:	f00a fc81 	bl	800af70 <tcp_write>
      if (err ==  ERR_MEM) {
 800066e:	1c43      	adds	r3, r0, #1
 8000670:	d1d1      	bne.n	8000616 <lwiperf_tcp_client_send_more+0x26>
        txlen /= 2;
 8000672:	0864      	lsrs	r4, r4, #1
    } while ((err == ERR_MEM) && (txlen >= (TCP_MSS / 2)));
 8000674:	42bc      	cmp	r4, r7
 8000676:	d0f4      	beq.n	8000662 <lwiperf_tcp_client_send_more+0x72>
  tcp_output(conn->conn_pcb);
 8000678:	6928      	ldr	r0, [r5, #16]
 800067a:	f00b fa97 	bl	800bbac <tcp_output>
}
 800067e:	2000      	movs	r0, #0
 8000680:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      u32_t amount_bytes = lwip_htonl(conn->settings.amount);
 8000684:	f006 f990 	bl	80069a8 <lwip_htonl>
      if (amount_bytes >= conn->bytes_transferred) {
 8000688:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800068a:	4283      	cmp	r3, r0
 800068c:	d8da      	bhi.n	8000644 <lwiperf_tcp_client_send_more+0x54>
        lwiperf_tcp_close(conn, LWIPERF_TCP_DONE_CLIENT);
 800068e:	4628      	mov	r0, r5
 8000690:	2101      	movs	r1, #1
 8000692:	f7ff fe77 	bl	8000384 <lwiperf_tcp_close>
}
 8000696:	2000      	movs	r0, #0
 8000698:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      txptr = LWIP_CONST_CAST(void *, &lwiperf_txbuf_const[conn->bytes_transferred % 10]);
 800069c:	4a15      	ldr	r2, [pc, #84]	; (80006f4 <lwiperf_tcp_client_send_more+0x104>)
      apiflags = 0; /* no copying needed */
 800069e:	f240 54b4 	movw	r4, #1460	; 0x5b4
 80006a2:	f04f 0a00 	mov.w	sl, #0
 80006a6:	f04f 0801 	mov.w	r8, #1
      txptr = LWIP_CONST_CAST(void *, &lwiperf_txbuf_const[conn->bytes_transferred % 10]);
 80006aa:	fba2 1203 	umull	r1, r2, r2, r3
      apiflags = 0; /* no copying needed */
 80006ae:	f240 519c 	movw	r1, #1436	; 0x59c
      txptr = LWIP_CONST_CAST(void *, &lwiperf_txbuf_const[conn->bytes_transferred % 10]);
 80006b2:	08d2      	lsrs	r2, r2, #3
      apiflags = 0; /* no copying needed */
 80006b4:	2b30      	cmp	r3, #48	; 0x30
 80006b6:	bf08      	it	eq
 80006b8:	460c      	moveq	r4, r1
      txptr = LWIP_CONST_CAST(void *, &lwiperf_txbuf_const[conn->bytes_transferred % 10]);
 80006ba:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80006be:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 80006c2:	eb0b 0603 	add.w	r6, fp, r3
      if (conn->bytes_transferred == 48) { /* @todo: fix this for intermediate settings, too */
 80006c6:	e7ca      	b.n	800065e <lwiperf_tcp_client_send_more+0x6e>
      txptr = &((u8_t *)&conn->settings)[conn->bytes_transferred];
 80006c8:	f105 0628 	add.w	r6, r5, #40	; 0x28
      txlen_max = (u16_t)(24 - conn->bytes_transferred);
 80006cc:	f1c3 0418 	rsb	r4, r3, #24
      apiflags = TCP_WRITE_FLAG_COPY;
 80006d0:	f04f 0a01 	mov.w	sl, #1
    send_more = 0;
 80006d4:	f04f 0800 	mov.w	r8, #0
      txptr = &((u8_t *)&conn->settings)[conn->bytes_transferred];
 80006d8:	441e      	add	r6, r3
      txlen_max = (u16_t)(24 - conn->bytes_transferred);
 80006da:	b2a4      	uxth	r4, r4
      apiflags = TCP_WRITE_FLAG_COPY;
 80006dc:	e7bf      	b.n	800065e <lwiperf_tcp_client_send_more+0x6e>
  LWIP_ASSERT("conn invalid", (conn != NULL) && conn->base.tcp && (conn->base.server == 0));
 80006de:	7943      	ldrb	r3, [r0, #5]
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d093      	beq.n	800060c <lwiperf_tcp_client_send_more+0x1c>
 80006e4:	e78b      	b.n	80005fe <lwiperf_tcp_client_send_more+0xe>
 80006e6:	bf00      	nop
 80006e8:	0800ef08 	.word	0x0800ef08
 80006ec:	0800efe8 	.word	0x0800efe8
 80006f0:	0800ef30 	.word	0x0800ef30
 80006f4:	cccccccd 	.word	0xcccccccd
 80006f8:	0800f07c 	.word	0x0800f07c

080006fc <lwiperf_tcp_client_sent>:
  LWIP_ASSERT("invalid conn", conn->conn_pcb == tpcb);
 80006fc:	6903      	ldr	r3, [r0, #16]
 80006fe:	428b      	cmp	r3, r1
{
 8000700:	b510      	push	{r4, lr}
 8000702:	4604      	mov	r4, r0
  LWIP_ASSERT("invalid conn", conn->conn_pcb == tpcb);
 8000704:	d006      	beq.n	8000714 <lwiperf_tcp_client_sent+0x18>
 8000706:	4b07      	ldr	r3, [pc, #28]	; (8000724 <lwiperf_tcp_client_sent+0x28>)
 8000708:	f44f 72b3 	mov.w	r2, #358	; 0x166
 800070c:	4906      	ldr	r1, [pc, #24]	; (8000728 <lwiperf_tcp_client_sent+0x2c>)
 800070e:	4807      	ldr	r0, [pc, #28]	; (800072c <lwiperf_tcp_client_sent+0x30>)
 8000710:	f00d fc88 	bl	800e024 <iprintf>
  conn->poll_count = 0;
 8000714:	2300      	movs	r3, #0
  return lwiperf_tcp_client_send_more(conn);
 8000716:	4620      	mov	r0, r4
  conn->poll_count = 0;
 8000718:	f884 3020 	strb.w	r3, [r4, #32]
}
 800071c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return lwiperf_tcp_client_send_more(conn);
 8000720:	f7ff bf66 	b.w	80005f0 <lwiperf_tcp_client_send_more>
 8000724:	0800ef08 	.word	0x0800ef08
 8000728:	0800eff8 	.word	0x0800eff8
 800072c:	0800ef30 	.word	0x0800ef30

08000730 <lwiperf_tcp_poll>:
  LWIP_ASSERT("pcb mismatch", conn->conn_pcb == tpcb);
 8000730:	6903      	ldr	r3, [r0, #16]
 8000732:	428b      	cmp	r3, r1
{
 8000734:	b510      	push	{r4, lr}
 8000736:	4604      	mov	r4, r0
  LWIP_ASSERT("pcb mismatch", conn->conn_pcb == tpcb);
 8000738:	d006      	beq.n	8000748 <lwiperf_tcp_poll+0x18>
 800073a:	4b0f      	ldr	r3, [pc, #60]	; (8000778 <lwiperf_tcp_poll+0x48>)
 800073c:	f44f 7210 	mov.w	r2, #576	; 0x240
 8000740:	490e      	ldr	r1, [pc, #56]	; (800077c <lwiperf_tcp_poll+0x4c>)
 8000742:	480f      	ldr	r0, [pc, #60]	; (8000780 <lwiperf_tcp_poll+0x50>)
 8000744:	f00d fc6e 	bl	800e024 <iprintf>
  if (++conn->poll_count >= LWIPERF_TCP_MAX_IDLE_SEC) {
 8000748:	f894 3020 	ldrb.w	r3, [r4, #32]
 800074c:	3301      	adds	r3, #1
 800074e:	b2db      	uxtb	r3, r3
 8000750:	2b09      	cmp	r3, #9
 8000752:	f884 3020 	strb.w	r3, [r4, #32]
 8000756:	d808      	bhi.n	800076a <lwiperf_tcp_poll+0x3a>
  if (!conn->base.server) {
 8000758:	7963      	ldrb	r3, [r4, #5]
 800075a:	b10b      	cbz	r3, 8000760 <lwiperf_tcp_poll+0x30>
}
 800075c:	2000      	movs	r0, #0
 800075e:	bd10      	pop	{r4, pc}
    lwiperf_tcp_client_send_more(conn);
 8000760:	4620      	mov	r0, r4
 8000762:	f7ff ff45 	bl	80005f0 <lwiperf_tcp_client_send_more>
}
 8000766:	2000      	movs	r0, #0
 8000768:	bd10      	pop	{r4, pc}
    lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_LOCAL);
 800076a:	4620      	mov	r0, r4
 800076c:	2102      	movs	r1, #2
 800076e:	f7ff fe09 	bl	8000384 <lwiperf_tcp_close>
}
 8000772:	2000      	movs	r0, #0
 8000774:	bd10      	pop	{r4, pc}
 8000776:	bf00      	nop
 8000778:	0800ef08 	.word	0x0800ef08
 800077c:	0800f008 	.word	0x0800f008
 8000780:	0800ef30 	.word	0x0800ef30

08000784 <lwiperf_tcp_client_connected>:
{
 8000784:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("invalid conn", conn->conn_pcb == tpcb);
 8000786:	6903      	ldr	r3, [r0, #16]
{
 8000788:	4604      	mov	r4, r0
 800078a:	4615      	mov	r5, r2
  LWIP_ASSERT("invalid conn", conn->conn_pcb == tpcb);
 800078c:	428b      	cmp	r3, r1
 800078e:	d006      	beq.n	800079e <lwiperf_tcp_client_connected+0x1a>
 8000790:	4b0c      	ldr	r3, [pc, #48]	; (80007c4 <lwiperf_tcp_client_connected+0x40>)
 8000792:	f44f 72ba 	mov.w	r2, #372	; 0x174
 8000796:	490c      	ldr	r1, [pc, #48]	; (80007c8 <lwiperf_tcp_client_connected+0x44>)
 8000798:	480c      	ldr	r0, [pc, #48]	; (80007cc <lwiperf_tcp_client_connected+0x48>)
 800079a:	f00d fc43 	bl	800e024 <iprintf>
  if (err != ERR_OK) {
 800079e:	b955      	cbnz	r5, 80007b6 <lwiperf_tcp_client_connected+0x32>
  conn->poll_count = 0;
 80007a0:	f884 5020 	strb.w	r5, [r4, #32]
  conn->time_started = sys_now();
 80007a4:	f003 fa44 	bl	8003c30 <sys_now>
 80007a8:	4603      	mov	r3, r0
  return lwiperf_tcp_client_send_more(conn);
 80007aa:	4620      	mov	r0, r4
  conn->time_started = sys_now();
 80007ac:	6163      	str	r3, [r4, #20]
}
 80007ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return lwiperf_tcp_client_send_more(conn);
 80007b2:	f7ff bf1d 	b.w	80005f0 <lwiperf_tcp_client_send_more>
    lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_REMOTE);
 80007b6:	4620      	mov	r0, r4
 80007b8:	2105      	movs	r1, #5
 80007ba:	f7ff fde3 	bl	8000384 <lwiperf_tcp_close>
}
 80007be:	2000      	movs	r0, #0
 80007c0:	bd38      	pop	{r3, r4, r5, pc}
 80007c2:	bf00      	nop
 80007c4:	0800ef08 	.word	0x0800ef08
 80007c8:	0800eff8 	.word	0x0800eff8
 80007cc:	0800ef30 	.word	0x0800ef30

080007d0 <lwiperf_start_tcp_server_impl.constprop.0>:
    return state;
  }
  return NULL;
}

static err_t lwiperf_start_tcp_server_impl(const ip_addr_t *local_addr, u16_t local_port,
 80007d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80007d4:	4605      	mov	r5, r0
 80007d6:	460f      	mov	r7, r1
 80007d8:	4690      	mov	r8, r2
 80007da:	461e      	mov	r6, r3
{
  err_t err;
  struct tcp_pcb *pcb;
  lwiperf_state_tcp_t *s;

  LWIP_ASSERT_CORE_LOCKED();
 80007dc:	f003 fbac 	bl	8003f38 <sys_check_core_locking>

  LWIP_ASSERT("state != NULL", state != NULL);

  if (local_addr == NULL) {
 80007e0:	2d00      	cmp	r5, #0
 80007e2:	d037      	beq.n	8000854 <lwiperf_start_tcp_server_impl.constprop.0+0x84>
    return ERR_ARG;
  }

  s = (lwiperf_state_tcp_t *)LWIPERF_ALLOC(lwiperf_state_tcp_t);
 80007e4:	2048      	movs	r0, #72	; 0x48
 80007e6:	f006 fb3d 	bl	8006e64 <mem_malloc>
  if (s == NULL) {
 80007ea:	4604      	mov	r4, r0
 80007ec:	b378      	cbz	r0, 800084e <lwiperf_start_tcp_server_impl.constprop.0+0x7e>
    return ERR_MEM;
  }
  memset(s, 0, sizeof(lwiperf_state_tcp_t));
 80007ee:	2248      	movs	r2, #72	; 0x48
 80007f0:	2100      	movs	r1, #0
 80007f2:	f00d fc7c 	bl	800e0ee <memset>
  s->base.tcp = 1;
  s->base.server = 1;
  s->base.related_master_state = related_master_state;
 80007f6:	9b06      	ldr	r3, [sp, #24]
  s->report_fn = report_fn;
  s->report_arg = report_arg;
 80007f8:	61e6      	str	r6, [r4, #28]

  pcb = tcp_new_ip_type(LWIPERF_SERVER_IP_TYPE);
 80007fa:	202e      	movs	r0, #46	; 0x2e
  s->base.related_master_state = related_master_state;
 80007fc:	60a3      	str	r3, [r4, #8]
  s->base.tcp = 1;
 80007fe:	f240 1301 	movw	r3, #257	; 0x101
  s->report_fn = report_fn;
 8000802:	f8c4 8018 	str.w	r8, [r4, #24]
  s->base.tcp = 1;
 8000806:	80a3      	strh	r3, [r4, #4]
  pcb = tcp_new_ip_type(LWIPERF_SERVER_IP_TYPE);
 8000808:	f008 fbf4 	bl	8008ff4 <tcp_new_ip_type>
  if (pcb == NULL) {
 800080c:	4606      	mov	r6, r0
 800080e:	b1f0      	cbz	r0, 800084e <lwiperf_start_tcp_server_impl.constprop.0+0x7e>
    return ERR_MEM;
  }
  err = tcp_bind(pcb, local_addr, local_port);
 8000810:	4629      	mov	r1, r5
 8000812:	463a      	mov	r2, r7
 8000814:	f007 fba0 	bl	8007f58 <tcp_bind>
  if (err != ERR_OK) {
 8000818:	4605      	mov	r5, r0
 800081a:	b110      	cbz	r0, 8000822 <lwiperf_start_tcp_server_impl.constprop.0+0x52>
  tcp_accept(s->server_pcb, lwiperf_tcp_accept);

  lwiperf_list_add(&s->base);
  *state = s;
  return ERR_OK;
}
 800081c:	4628      	mov	r0, r5
 800081e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  s->server_pcb = tcp_listen_with_backlog(pcb, 1);
 8000822:	2101      	movs	r1, #1
 8000824:	4630      	mov	r0, r6
 8000826:	f007 fc81 	bl	800812c <tcp_listen_with_backlog>
 800082a:	60e0      	str	r0, [r4, #12]
  if (s->server_pcb == NULL) {
 800082c:	b1a8      	cbz	r0, 800085a <lwiperf_start_tcp_server_impl.constprop.0+0x8a>
  tcp_arg(s->server_pcb, s);
 800082e:	4621      	mov	r1, r4
 8000830:	f007 fe00 	bl	8008434 <tcp_arg>
  tcp_accept(s->server_pcb, lwiperf_tcp_accept);
 8000834:	68e0      	ldr	r0, [r4, #12]
 8000836:	490d      	ldr	r1, [pc, #52]	; (800086c <lwiperf_start_tcp_server_impl.constprop.0+0x9c>)
 8000838:	f007 fe52 	bl	80084e0 <tcp_accept>
  item->next = lwiperf_all_connections;
 800083c:	4b0c      	ldr	r3, [pc, #48]	; (8000870 <lwiperf_start_tcp_server_impl.constprop.0+0xa0>)
}
 800083e:	4628      	mov	r0, r5
  item->next = lwiperf_all_connections;
 8000840:	681a      	ldr	r2, [r3, #0]
  lwiperf_all_connections = item;
 8000842:	601c      	str	r4, [r3, #0]
  *state = s;
 8000844:	9b07      	ldr	r3, [sp, #28]
  item->next = lwiperf_all_connections;
 8000846:	6022      	str	r2, [r4, #0]
  *state = s;
 8000848:	601c      	str	r4, [r3, #0]
}
 800084a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return ERR_MEM;
 800084e:	f04f 35ff 	mov.w	r5, #4294967295
 8000852:	e7e3      	b.n	800081c <lwiperf_start_tcp_server_impl.constprop.0+0x4c>
    return ERR_ARG;
 8000854:	f06f 050f 	mvn.w	r5, #15
 8000858:	e7e0      	b.n	800081c <lwiperf_start_tcp_server_impl.constprop.0+0x4c>
      tcp_close(pcb);
 800085a:	4630      	mov	r0, r6
    return ERR_MEM;
 800085c:	f04f 35ff 	mov.w	r5, #4294967295
      tcp_close(pcb);
 8000860:	f008 fc9c 	bl	800919c <tcp_close>
    LWIPERF_FREE(lwiperf_state_tcp_t, s);
 8000864:	4620      	mov	r0, r4
 8000866:	f006 f959 	bl	8006b1c <mem_free>
    return ERR_MEM;
 800086a:	e7d7      	b.n	800081c <lwiperf_start_tcp_server_impl.constprop.0+0x4c>
 800086c:	08000489 	.word	0x08000489
 8000870:	240000a8 	.word	0x240000a8

08000874 <lwiperf_tx_start_impl.constprop.0>:
lwiperf_tx_start_impl(const ip_addr_t *remote_ip, u16_t remote_port, lwiperf_settings_t *settings, lwiperf_report_fn report_fn,
 8000874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000878:	4688      	mov	r8, r1
 800087a:	b083      	sub	sp, #12
 800087c:	4616      	mov	r6, r2
 800087e:	4699      	mov	r9, r3
  LWIP_ASSERT("remote_ip != NULL", remote_ip != NULL);
 8000880:	4607      	mov	r7, r0
 8000882:	2800      	cmp	r0, #0
 8000884:	d063      	beq.n	800094e <lwiperf_tx_start_impl.constprop.0+0xda>
  *new_conn = NULL;
 8000886:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8000888:	f04f 0b00 	mov.w	fp, #0
  client_conn = (lwiperf_state_tcp_t *)LWIPERF_ALLOC(lwiperf_state_tcp_t);
 800088c:	2048      	movs	r0, #72	; 0x48
  *new_conn = NULL;
 800088e:	f8c3 b000 	str.w	fp, [r3]
  client_conn = (lwiperf_state_tcp_t *)LWIPERF_ALLOC(lwiperf_state_tcp_t);
 8000892:	f006 fae7 	bl	8006e64 <mem_malloc>
  if (client_conn == NULL) {
 8000896:	4604      	mov	r4, r0
 8000898:	2800      	cmp	r0, #0
 800089a:	d060      	beq.n	800095e <lwiperf_tx_start_impl.constprop.0+0xea>
  newpcb = tcp_new_ip_type(IP_GET_TYPE(remote_ip));
 800089c:	4658      	mov	r0, fp
 800089e:	f008 fba9 	bl	8008ff4 <tcp_new_ip_type>
  if (newpcb == NULL) {
 80008a2:	4605      	mov	r5, r0
 80008a4:	2800      	cmp	r0, #0
 80008a6:	d05d      	beq.n	8000964 <lwiperf_tx_start_impl.constprop.0+0xf0>
  memset(client_conn, 0, sizeof(lwiperf_state_tcp_t));
 80008a8:	2248      	movs	r2, #72	; 0x48
 80008aa:	4659      	mov	r1, fp
 80008ac:	4620      	mov	r0, r4
  client_conn->base.tcp = 1;
 80008ae:	f04f 0a01 	mov.w	sl, #1
  memset(client_conn, 0, sizeof(lwiperf_state_tcp_t));
 80008b2:	f00d fc1c 	bl	800e0ee <memset>
  client_conn->base.related_master_state = related_master_state;
 80008b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  client_conn->conn_pcb = newpcb;
 80008b8:	6125      	str	r5, [r4, #16]
  client_conn->base.related_master_state = related_master_state;
 80008ba:	60a3      	str	r3, [r4, #8]
  client_conn->base.tcp = 1;
 80008bc:	f884 a004 	strb.w	sl, [r4, #4]
  client_conn->time_started = sys_now(); /* @todo: set this again on 'connected' */
 80008c0:	f003 f9b6 	bl	8003c30 <sys_now>
  client_conn->report_arg = report_arg;
 80008c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  client_conn->report_fn = report_fn;
 80008c6:	f8c4 9018 	str.w	r9, [r4, #24]
  client_conn->report_arg = report_arg;
 80008ca:	61e3      	str	r3, [r4, #28]
  client_conn->next_num = 4; /* initial nr is '4' since the header has 24 byte */
 80008cc:	2304      	movs	r3, #4
  client_conn->bytes_transferred = 0;
 80008ce:	f8c4 b024 	str.w	fp, [r4, #36]	; 0x24
  client_conn->time_started = sys_now(); /* @todo: set this again on 'connected' */
 80008d2:	6160      	str	r0, [r4, #20]
  client_conn->next_num = 4; /* initial nr is '4' since the header has 24 byte */
 80008d4:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  memcpy(&client_conn->settings, settings, sizeof(*settings));
 80008d8:	6832      	ldr	r2, [r6, #0]
 80008da:	6873      	ldr	r3, [r6, #4]
 80008dc:	68b0      	ldr	r0, [r6, #8]
 80008de:	68f1      	ldr	r1, [r6, #12]
 80008e0:	6320      	str	r0, [r4, #48]	; 0x30
  tcp_arg(newpcb, client_conn);
 80008e2:	4628      	mov	r0, r5
  memcpy(&client_conn->settings, settings, sizeof(*settings));
 80008e4:	6361      	str	r1, [r4, #52]	; 0x34
  tcp_arg(newpcb, client_conn);
 80008e6:	4621      	mov	r1, r4
  memcpy(&client_conn->settings, settings, sizeof(*settings));
 80008e8:	62a2      	str	r2, [r4, #40]	; 0x28
 80008ea:	62e3      	str	r3, [r4, #44]	; 0x2c
 80008ec:	6973      	ldr	r3, [r6, #20]
 80008ee:	6932      	ldr	r2, [r6, #16]
 80008f0:	63e3      	str	r3, [r4, #60]	; 0x3c
 80008f2:	63a2      	str	r2, [r4, #56]	; 0x38
  client_conn->have_settings_buf = 1;
 80008f4:	f884 a040 	strb.w	sl, [r4, #64]	; 0x40
  tcp_arg(newpcb, client_conn);
 80008f8:	f007 fd9c 	bl	8008434 <tcp_arg>
  tcp_sent(newpcb, lwiperf_tcp_client_sent);
 80008fc:	4628      	mov	r0, r5
 80008fe:	491c      	ldr	r1, [pc, #112]	; (8000970 <lwiperf_tx_start_impl.constprop.0+0xfc>)
 8000900:	f007 fdba 	bl	8008478 <tcp_sent>
  tcp_poll(newpcb, lwiperf_tcp_poll, 2U);
 8000904:	2202      	movs	r2, #2
 8000906:	4628      	mov	r0, r5
 8000908:	491a      	ldr	r1, [pc, #104]	; (8000974 <lwiperf_tx_start_impl.constprop.0+0x100>)
 800090a:	f007 fdf5 	bl	80084f8 <tcp_poll>
  tcp_err(newpcb, lwiperf_tcp_err);
 800090e:	4628      	mov	r0, r5
 8000910:	4919      	ldr	r1, [pc, #100]	; (8000978 <lwiperf_tx_start_impl.constprop.0+0x104>)
 8000912:	f007 fdcb 	bl	80084ac <tcp_err>
  ip_addr_copy(remote_addr, *remote_ip);
 8000916:	683b      	ldr	r3, [r7, #0]
  err = tcp_connect(newpcb, &remote_addr, remote_port, lwiperf_tcp_client_connected);
 8000918:	4628      	mov	r0, r5
 800091a:	4642      	mov	r2, r8
  ip_addr_copy(remote_addr, *remote_ip);
 800091c:	9301      	str	r3, [sp, #4]
  err = tcp_connect(newpcb, &remote_addr, remote_port, lwiperf_tcp_client_connected);
 800091e:	a901      	add	r1, sp, #4
 8000920:	4b16      	ldr	r3, [pc, #88]	; (800097c <lwiperf_tx_start_impl.constprop.0+0x108>)
 8000922:	f007 fc8f 	bl	8008244 <tcp_connect>
  if (err != ERR_OK) {
 8000926:	4605      	mov	r5, r0
 8000928:	b948      	cbnz	r0, 800093e <lwiperf_tx_start_impl.constprop.0+0xca>
  item->next = lwiperf_all_connections;
 800092a:	4b15      	ldr	r3, [pc, #84]	; (8000980 <lwiperf_tx_start_impl.constprop.0+0x10c>)
 800092c:	681a      	ldr	r2, [r3, #0]
  lwiperf_all_connections = item;
 800092e:	601c      	str	r4, [r3, #0]
  *new_conn = client_conn;
 8000930:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  item->next = lwiperf_all_connections;
 8000932:	6022      	str	r2, [r4, #0]
  *new_conn = client_conn;
 8000934:	601c      	str	r4, [r3, #0]
}
 8000936:	4628      	mov	r0, r5
 8000938:	b003      	add	sp, #12
 800093a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lwiperf_tcp_close(client_conn, LWIPERF_TCP_ABORTED_LOCAL);
 800093e:	4620      	mov	r0, r4
 8000940:	2102      	movs	r1, #2
 8000942:	f7ff fd1f 	bl	8000384 <lwiperf_tcp_close>
}
 8000946:	4628      	mov	r0, r5
 8000948:	b003      	add	sp, #12
 800094a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("remote_ip != NULL", remote_ip != NULL);
 800094e:	4b0d      	ldr	r3, [pc, #52]	; (8000984 <lwiperf_tx_start_impl.constprop.0+0x110>)
 8000950:	f240 128b 	movw	r2, #395	; 0x18b
 8000954:	490c      	ldr	r1, [pc, #48]	; (8000988 <lwiperf_tx_start_impl.constprop.0+0x114>)
 8000956:	480d      	ldr	r0, [pc, #52]	; (800098c <lwiperf_tx_start_impl.constprop.0+0x118>)
 8000958:	f00d fb64 	bl	800e024 <iprintf>
 800095c:	e793      	b.n	8000886 <lwiperf_tx_start_impl.constprop.0+0x12>
    return ERR_MEM;
 800095e:	f04f 35ff 	mov.w	r5, #4294967295
 8000962:	e7e8      	b.n	8000936 <lwiperf_tx_start_impl.constprop.0+0xc2>
    LWIPERF_FREE(lwiperf_state_tcp_t, client_conn);
 8000964:	4620      	mov	r0, r4
    return ERR_MEM;
 8000966:	f04f 35ff 	mov.w	r5, #4294967295
    LWIPERF_FREE(lwiperf_state_tcp_t, client_conn);
 800096a:	f006 f8d7 	bl	8006b1c <mem_free>
    return ERR_MEM;
 800096e:	e7e2      	b.n	8000936 <lwiperf_tx_start_impl.constprop.0+0xc2>
 8000970:	080006fd 	.word	0x080006fd
 8000974:	08000731 	.word	0x08000731
 8000978:	080005e9 	.word	0x080005e9
 800097c:	08000785 	.word	0x08000785
 8000980:	240000a8 	.word	0x240000a8
 8000984:	0800ef08 	.word	0x0800ef08
 8000988:	0800f018 	.word	0x0800f018
 800098c:	0800ef30 	.word	0x0800ef30

08000990 <lwiperf_tx_start_passive>:
{
 8000990:	b530      	push	{r4, r5, lr}
  lwiperf_state_tcp_t *new_conn = NULL;
 8000992:	2300      	movs	r3, #0
{
 8000994:	4604      	mov	r4, r0
 8000996:	b087      	sub	sp, #28
  u16_t remote_port = (u16_t)lwip_htonl(conn->settings.remote_port);
 8000998:	6b00      	ldr	r0, [r0, #48]	; 0x30
  lwiperf_state_tcp_t *new_conn = NULL;
 800099a:	9305      	str	r3, [sp, #20]
  u16_t remote_port = (u16_t)lwip_htonl(conn->settings.remote_port);
 800099c:	f006 f804 	bl	80069a8 <lwip_htonl>
  ret = lwiperf_tx_start_impl(&conn->conn_pcb->remote_ip, remote_port, &conn->settings, conn->report_fn, conn->report_arg,
 80009a0:	6922      	ldr	r2, [r4, #16]
 80009a2:	a905      	add	r1, sp, #20
 80009a4:	69e3      	ldr	r3, [r4, #28]
 80009a6:	68a5      	ldr	r5, [r4, #8]
 80009a8:	9300      	str	r3, [sp, #0]
 80009aa:	e9cd 5101 	strd	r5, r1, [sp, #4]
 80009ae:	b281      	uxth	r1, r0
 80009b0:	69a3      	ldr	r3, [r4, #24]
 80009b2:	1d10      	adds	r0, r2, #4
 80009b4:	f104 0228 	add.w	r2, r4, #40	; 0x28
 80009b8:	f7ff ff5c 	bl	8000874 <lwiperf_tx_start_impl.constprop.0>
  if (ret == ERR_OK) {
 80009bc:	4604      	mov	r4, r0
 80009be:	b918      	cbnz	r0, 80009c8 <lwiperf_tx_start_passive+0x38>
    LWIP_ASSERT("new_conn != NULL", new_conn != NULL);
 80009c0:	9d05      	ldr	r5, [sp, #20]
 80009c2:	b125      	cbz	r5, 80009ce <lwiperf_tx_start_passive+0x3e>
    new_conn->settings.flags = 0; /* prevent the remote side starting back as client again */
 80009c4:	2300      	movs	r3, #0
 80009c6:	62ab      	str	r3, [r5, #40]	; 0x28
}
 80009c8:	4620      	mov	r0, r4
 80009ca:	b007      	add	sp, #28
 80009cc:	bd30      	pop	{r4, r5, pc}
    LWIP_ASSERT("new_conn != NULL", new_conn != NULL);
 80009ce:	4b04      	ldr	r3, [pc, #16]	; (80009e0 <lwiperf_tx_start_passive+0x50>)
 80009d0:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 80009d4:	4903      	ldr	r1, [pc, #12]	; (80009e4 <lwiperf_tx_start_passive+0x54>)
 80009d6:	4804      	ldr	r0, [pc, #16]	; (80009e8 <lwiperf_tx_start_passive+0x58>)
 80009d8:	f00d fb24 	bl	800e024 <iprintf>
 80009dc:	e7f2      	b.n	80009c4 <lwiperf_tx_start_passive+0x34>
 80009de:	bf00      	nop
 80009e0:	0800ef08 	.word	0x0800ef08
 80009e4:	0800f02c 	.word	0x0800f02c
 80009e8:	0800ef30 	.word	0x0800ef30

080009ec <lwiperf_tcp_recv>:
{
 80009ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80009f0:	4698      	mov	r8, r3
  LWIP_ASSERT("pcb mismatch", conn->conn_pcb == tpcb);
 80009f2:	6903      	ldr	r3, [r0, #16]
{
 80009f4:	4604      	mov	r4, r0
 80009f6:	460e      	mov	r6, r1
  LWIP_ASSERT("pcb mismatch", conn->conn_pcb == tpcb);
 80009f8:	428b      	cmp	r3, r1
{
 80009fa:	4615      	mov	r5, r2
  LWIP_ASSERT("pcb mismatch", conn->conn_pcb == tpcb);
 80009fc:	d006      	beq.n	8000a0c <lwiperf_tcp_recv+0x20>
 80009fe:	4b6a      	ldr	r3, [pc, #424]	; (8000ba8 <lwiperf_tcp_recv+0x1bc>)
 8000a00:	f44f 72e8 	mov.w	r2, #464	; 0x1d0
 8000a04:	4969      	ldr	r1, [pc, #420]	; (8000bac <lwiperf_tcp_recv+0x1c0>)
 8000a06:	486a      	ldr	r0, [pc, #424]	; (8000bb0 <lwiperf_tcp_recv+0x1c4>)
 8000a08:	f00d fb0c 	bl	800e024 <iprintf>
  if (err != ERR_OK) {
 8000a0c:	f1b8 0f00 	cmp.w	r8, #0
 8000a10:	d170      	bne.n	8000af4 <lwiperf_tcp_recv+0x108>
  if (p == NULL) {
 8000a12:	2d00      	cmp	r5, #0
 8000a14:	f000 8098 	beq.w	8000b48 <lwiperf_tcp_recv+0x15c>
  if ((!conn->have_settings_buf) || ((conn->bytes_transferred - 24) % (1024 * 128) == 0)) {
 8000a18:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
  tot_len = p->tot_len;
 8000a1c:	892f      	ldrh	r7, [r5, #8]
  conn->poll_count = 0;
 8000a1e:	f884 8020 	strb.w	r8, [r4, #32]
  if ((!conn->have_settings_buf) || ((conn->bytes_transferred - 24) % (1024 * 128) == 0)) {
 8000a22:	b95b      	cbnz	r3, 8000a3c <lwiperf_tcp_recv+0x50>
    if (p->tot_len < sizeof(lwiperf_settings_t)) {
 8000a24:	2f17      	cmp	r7, #23
 8000a26:	d86c      	bhi.n	8000b02 <lwiperf_tcp_recv+0x116>
      lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_LOCAL_DATAERROR);
 8000a28:	4620      	mov	r0, r4
 8000a2a:	2103      	movs	r1, #3
 8000a2c:	f7ff fcaa 	bl	8000384 <lwiperf_tcp_close>
      pbuf_free(p);
 8000a30:	4628      	mov	r0, r5
 8000a32:	f006 ff57 	bl	80078e4 <pbuf_free>
}
 8000a36:	2000      	movs	r0, #0
 8000a38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if ((!conn->have_settings_buf) || ((conn->bytes_transferred - 24) % (1024 * 128) == 0)) {
 8000a3c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000a3e:	03da      	lsls	r2, r3, #15
 8000a40:	f5b2 2f40 	cmp.w	r2, #786432	; 0xc0000
 8000a44:	d118      	bne.n	8000a78 <lwiperf_tcp_recv+0x8c>
    if (p->tot_len < sizeof(lwiperf_settings_t)) {
 8000a46:	2f17      	cmp	r7, #23
 8000a48:	d9ee      	bls.n	8000a28 <lwiperf_tcp_recv+0x3c>
      if (conn->settings.flags & PP_HTONL(LWIPERF_FLAGS_ANSWER_TEST)) {
 8000a4a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000a4c:	0612      	lsls	r2, r2, #24
 8000a4e:	f100 8087 	bmi.w	8000b60 <lwiperf_tcp_recv+0x174>
    conn->bytes_transferred += sizeof(lwiperf_settings_t);
 8000a52:	3318      	adds	r3, #24
    if (conn->bytes_transferred <= 24) {
 8000a54:	2b18      	cmp	r3, #24
    conn->bytes_transferred += sizeof(lwiperf_settings_t);
 8000a56:	6263      	str	r3, [r4, #36]	; 0x24
    if (conn->bytes_transferred <= 24) {
 8000a58:	d968      	bls.n	8000b2c <lwiperf_tcp_recv+0x140>
    conn->next_num = 4; /* 24 bytes received... */
 8000a5a:	2304      	movs	r3, #4
    tmp = pbuf_remove_header(p, 24);
 8000a5c:	2118      	movs	r1, #24
 8000a5e:	4628      	mov	r0, r5
    conn->next_num = 4; /* 24 bytes received... */
 8000a60:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    tmp = pbuf_remove_header(p, 24);
 8000a64:	f006 fed2 	bl	800780c <pbuf_remove_header>
    LWIP_ASSERT("pbuf_remove_header failed", tmp == 0);
 8000a68:	b130      	cbz	r0, 8000a78 <lwiperf_tcp_recv+0x8c>
 8000a6a:	4b4f      	ldr	r3, [pc, #316]	; (8000ba8 <lwiperf_tcp_recv+0x1bc>)
 8000a6c:	f240 2211 	movw	r2, #529	; 0x211
 8000a70:	4950      	ldr	r1, [pc, #320]	; (8000bb4 <lwiperf_tcp_recv+0x1c8>)
 8000a72:	484f      	ldr	r0, [pc, #316]	; (8000bb0 <lwiperf_tcp_recv+0x1c4>)
 8000a74:	f00d fad6 	bl	800e024 <iprintf>
{
 8000a78:	46ae      	mov	lr, r5
 8000a7a:	f04f 0800 	mov.w	r8, #0
    for (i = 0; i < q->len; i++) {
 8000a7e:	f8be 300a 	ldrh.w	r3, [lr, #10]
    const u8_t *payload = (const u8_t *)q->payload;
 8000a82:	f8de 9004 	ldr.w	r9, [lr, #4]
    for (i = 0; i < q->len; i++) {
 8000a86:	b1db      	cbz	r3, 8000ac0 <lwiperf_tcp_recv+0xd4>
      if (num == conn->next_num) {
 8000a88:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	e008      	b.n	8000aa2 <lwiperf_tcp_recv+0xb6>
          conn->next_num = 0;
 8000a90:	2b0a      	cmp	r3, #10
 8000a92:	bf08      	it	eq
 8000a94:	2300      	moveq	r3, #0
 8000a96:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    for (i = 0; i < q->len; i++) {
 8000a9a:	f8be 100a 	ldrh.w	r1, [lr, #10]
 8000a9e:	4281      	cmp	r1, r0
 8000aa0:	d90d      	bls.n	8000abe <lwiperf_tcp_recv+0xd2>
      u8_t val = payload[i];
 8000aa2:	b290      	uxth	r0, r2
        conn->next_num++;
 8000aa4:	1c59      	adds	r1, r3, #1
    for (i = 0; i < q->len; i++) {
 8000aa6:	3201      	adds	r2, #1
      u8_t num = val - '0';
 8000aa8:	f819 c000 	ldrb.w	ip, [r9, r0]
    for (i = 0; i < q->len; i++) {
 8000aac:	b290      	uxth	r0, r2
      u8_t num = val - '0';
 8000aae:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
      if (num == conn->next_num) {
 8000ab2:	fa5f fc8c 	uxtb.w	ip, ip
 8000ab6:	459c      	cmp	ip, r3
        conn->next_num++;
 8000ab8:	b2cb      	uxtb	r3, r1
      if (num == conn->next_num) {
 8000aba:	d0e9      	beq.n	8000a90 <lwiperf_tcp_recv+0xa4>
 8000abc:	e7b4      	b.n	8000a28 <lwiperf_tcp_recv+0x3c>
    packet_idx += q->len;
 8000abe:	4488      	add	r8, r1
  for (q = p; q != NULL; q = q->next) {
 8000ac0:	f8de e000 	ldr.w	lr, [lr]
 8000ac4:	f1be 0f00 	cmp.w	lr, #0
 8000ac8:	d1d9      	bne.n	8000a7e <lwiperf_tcp_recv+0x92>
  LWIP_ASSERT("count mismatch", packet_idx == p->tot_len);
 8000aca:	892b      	ldrh	r3, [r5, #8]
 8000acc:	4543      	cmp	r3, r8
 8000ace:	d006      	beq.n	8000ade <lwiperf_tcp_recv+0xf2>
 8000ad0:	4b35      	ldr	r3, [pc, #212]	; (8000ba8 <lwiperf_tcp_recv+0x1bc>)
 8000ad2:	f240 222b 	movw	r2, #555	; 0x22b
 8000ad6:	4938      	ldr	r1, [pc, #224]	; (8000bb8 <lwiperf_tcp_recv+0x1cc>)
 8000ad8:	4835      	ldr	r0, [pc, #212]	; (8000bb0 <lwiperf_tcp_recv+0x1c4>)
 8000ada:	f00d faa3 	bl	800e024 <iprintf>
  conn->bytes_transferred += packet_idx;
 8000ade:	6a63      	ldr	r3, [r4, #36]	; 0x24
  tcp_recved(tpcb, tot_len);
 8000ae0:	4630      	mov	r0, r6
 8000ae2:	4639      	mov	r1, r7
  conn->bytes_transferred += packet_idx;
 8000ae4:	4443      	add	r3, r8
 8000ae6:	6263      	str	r3, [r4, #36]	; 0x24
  tcp_recved(tpcb, tot_len);
 8000ae8:	f007 fb6c 	bl	80081c4 <tcp_recved>
  pbuf_free(p);
 8000aec:	4628      	mov	r0, r5
 8000aee:	f006 fef9 	bl	80078e4 <pbuf_free>
  return ERR_OK;
 8000af2:	e7a0      	b.n	8000a36 <lwiperf_tcp_recv+0x4a>
    lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_REMOTE);
 8000af4:	4620      	mov	r0, r4
 8000af6:	2105      	movs	r1, #5
 8000af8:	f7ff fc44 	bl	8000384 <lwiperf_tcp_close>
}
 8000afc:	2000      	movs	r0, #0
 8000afe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (pbuf_copy_partial(p, &conn->settings, sizeof(lwiperf_settings_t), 0) != sizeof(lwiperf_settings_t)) {
 8000b02:	4643      	mov	r3, r8
 8000b04:	2218      	movs	r2, #24
 8000b06:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8000b0a:	4628      	mov	r0, r5
 8000b0c:	f007 f8e2 	bl	8007cd4 <pbuf_copy_partial>
 8000b10:	2818      	cmp	r0, #24
 8000b12:	d133      	bne.n	8000b7c <lwiperf_tcp_recv+0x190>
      conn->have_settings_buf = 1;
 8000b14:	2301      	movs	r3, #1
        if (conn->settings.flags & PP_HTONL(LWIPERF_FLAGS_ANSWER_NOW)) {
 8000b16:	6aa2      	ldr	r2, [r4, #40]	; 0x28
      conn->have_settings_buf = 1;
 8000b18:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        if (conn->settings.flags & PP_HTONL(LWIPERF_FLAGS_ANSWER_NOW)) {
 8000b1c:	4b27      	ldr	r3, [pc, #156]	; (8000bbc <lwiperf_tcp_recv+0x1d0>)
 8000b1e:	4393      	bics	r3, r2
 8000b20:	d034      	beq.n	8000b8c <lwiperf_tcp_recv+0x1a0>
    conn->bytes_transferred += sizeof(lwiperf_settings_t);
 8000b22:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000b24:	3318      	adds	r3, #24
    if (conn->bytes_transferred <= 24) {
 8000b26:	2b18      	cmp	r3, #24
    conn->bytes_transferred += sizeof(lwiperf_settings_t);
 8000b28:	6263      	str	r3, [r4, #36]	; 0x24
    if (conn->bytes_transferred <= 24) {
 8000b2a:	d896      	bhi.n	8000a5a <lwiperf_tcp_recv+0x6e>
      conn->time_started = sys_now();
 8000b2c:	f003 f880 	bl	8003c30 <sys_now>
 8000b30:	4603      	mov	r3, r0
      tcp_recved(tpcb, p->tot_len);
 8000b32:	8929      	ldrh	r1, [r5, #8]
 8000b34:	4630      	mov	r0, r6
      conn->time_started = sys_now();
 8000b36:	6163      	str	r3, [r4, #20]
      tcp_recved(tpcb, p->tot_len);
 8000b38:	f007 fb44 	bl	80081c4 <tcp_recved>
      pbuf_free(p);
 8000b3c:	4628      	mov	r0, r5
 8000b3e:	f006 fed1 	bl	80078e4 <pbuf_free>
}
 8000b42:	2000      	movs	r0, #0
 8000b44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (conn->settings.flags & PP_HTONL(LWIPERF_FLAGS_ANSWER_TEST)) {
 8000b48:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000b4a:	0618      	lsls	r0, r3, #24
 8000b4c:	d501      	bpl.n	8000b52 <lwiperf_tcp_recv+0x166>
      if ((conn->settings.flags & PP_HTONL(LWIPERF_FLAGS_ANSWER_NOW)) == 0) {
 8000b4e:	01d9      	lsls	r1, r3, #7
 8000b50:	d510      	bpl.n	8000b74 <lwiperf_tcp_recv+0x188>
    lwiperf_tcp_close(conn, LWIPERF_TCP_DONE_SERVER);
 8000b52:	4620      	mov	r0, r4
 8000b54:	2100      	movs	r1, #0
 8000b56:	f7ff fc15 	bl	8000384 <lwiperf_tcp_close>
}
 8000b5a:	2000      	movs	r0, #0
 8000b5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if (pbuf_memcmp(p, 0, &conn->settings, sizeof(lwiperf_settings_t)) != 0) {
 8000b60:	4641      	mov	r1, r8
 8000b62:	2318      	movs	r3, #24
 8000b64:	f104 0228 	add.w	r2, r4, #40	; 0x28
 8000b68:	4628      	mov	r0, r5
 8000b6a:	f007 f92d 	bl	8007dc8 <pbuf_memcmp>
 8000b6e:	2800      	cmp	r0, #0
 8000b70:	d0d7      	beq.n	8000b22 <lwiperf_tcp_recv+0x136>
 8000b72:	e759      	b.n	8000a28 <lwiperf_tcp_recv+0x3c>
        lwiperf_tx_start_passive(conn);
 8000b74:	4620      	mov	r0, r4
 8000b76:	f7ff ff0b 	bl	8000990 <lwiperf_tx_start_passive>
 8000b7a:	e7ea      	b.n	8000b52 <lwiperf_tcp_recv+0x166>
        lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_LOCAL);
 8000b7c:	4620      	mov	r0, r4
 8000b7e:	2102      	movs	r1, #2
 8000b80:	f7ff fc00 	bl	8000384 <lwiperf_tcp_close>
        pbuf_free(p);
 8000b84:	4628      	mov	r0, r5
 8000b86:	f006 fead 	bl	80078e4 <pbuf_free>
        return ERR_OK;
 8000b8a:	e754      	b.n	8000a36 <lwiperf_tcp_recv+0x4a>
          err_t err2 = lwiperf_tx_start_passive(conn);
 8000b8c:	4620      	mov	r0, r4
 8000b8e:	f7ff feff 	bl	8000990 <lwiperf_tx_start_passive>
          if (err2 != ERR_OK) {
 8000b92:	2800      	cmp	r0, #0
 8000b94:	d0c5      	beq.n	8000b22 <lwiperf_tcp_recv+0x136>
            lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_LOCAL_TXERROR);
 8000b96:	4620      	mov	r0, r4
 8000b98:	2104      	movs	r1, #4
 8000b9a:	f7ff fbf3 	bl	8000384 <lwiperf_tcp_close>
            pbuf_free(p);
 8000b9e:	4628      	mov	r0, r5
 8000ba0:	f006 fea0 	bl	80078e4 <pbuf_free>
            return ERR_OK;
 8000ba4:	e747      	b.n	8000a36 <lwiperf_tcp_recv+0x4a>
 8000ba6:	bf00      	nop
 8000ba8:	0800ef08 	.word	0x0800ef08
 8000bac:	0800f008 	.word	0x0800f008
 8000bb0:	0800ef30 	.word	0x0800ef30
 8000bb4:	0800f040 	.word	0x0800f040
 8000bb8:	0800f05c 	.word	0x0800f05c
 8000bbc:	01000080 	.word	0x01000080

08000bc0 <lwiperf_start_tcp_server_default>:
{
 8000bc0:	b530      	push	{r4, r5, lr}
 8000bc2:	b085      	sub	sp, #20
  lwiperf_state_tcp_t *state = NULL;
 8000bc4:	2400      	movs	r4, #0
{
 8000bc6:	4602      	mov	r2, r0
 8000bc8:	460b      	mov	r3, r1
  err = lwiperf_start_tcp_server_impl(local_addr, local_port, report_fn, report_arg,
 8000bca:	ad03      	add	r5, sp, #12
 8000bcc:	f241 3189 	movw	r1, #5001	; 0x1389
 8000bd0:	4806      	ldr	r0, [pc, #24]	; (8000bec <lwiperf_start_tcp_server_default+0x2c>)
  lwiperf_state_tcp_t *state = NULL;
 8000bd2:	9403      	str	r4, [sp, #12]
  err = lwiperf_start_tcp_server_impl(local_addr, local_port, report_fn, report_arg,
 8000bd4:	e9cd 4500 	strd	r4, r5, [sp]
 8000bd8:	f7ff fdfa 	bl	80007d0 <lwiperf_start_tcp_server_impl.constprop.0>
  if (err == ERR_OK) {
 8000bdc:	b910      	cbnz	r0, 8000be4 <lwiperf_start_tcp_server_default+0x24>
    return state;
 8000bde:	9803      	ldr	r0, [sp, #12]
}
 8000be0:	b005      	add	sp, #20
 8000be2:	bd30      	pop	{r4, r5, pc}
  return NULL;
 8000be4:	4620      	mov	r0, r4
}
 8000be6:	b005      	add	sp, #20
 8000be8:	bd30      	pop	{r4, r5, pc}
 8000bea:	bf00      	nop
 8000bec:	08011640 	.word	0x08011640

08000bf0 <lwiperf_start_tcp_client>:
 * @returns a connection handle that can be used to abort the client
 *          by calling @ref lwiperf_abort()
 */
void* lwiperf_start_tcp_client(const ip_addr_t* remote_addr, u16_t remote_port,
  enum lwiperf_client_type type, lwiperf_report_fn report_fn, void* report_arg)
{
 8000bf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  err_t ret;
  lwiperf_settings_t settings;
  lwiperf_state_tcp_t *state = NULL;

  memset(&settings, 0, sizeof(settings));
  switch (type) {
 8000bf4:	2a01      	cmp	r2, #1
{
 8000bf6:	b08c      	sub	sp, #48	; 0x30
  lwiperf_state_tcp_t *state = NULL;
 8000bf8:	f04f 0400 	mov.w	r4, #0
{
 8000bfc:	4616      	mov	r6, r2
 8000bfe:	4680      	mov	r8, r0
 8000c00:	460d      	mov	r5, r1
 8000c02:	461f      	mov	r7, r3
  lwiperf_state_tcp_t *state = NULL;
 8000c04:	9404      	str	r4, [sp, #16]
  memset(&settings, 0, sizeof(settings));
 8000c06:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8000c0a:	e9cd 4408 	strd	r4, r4, [sp, #32]
 8000c0e:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
  switch (type) {
 8000c12:	d046      	beq.n	8000ca2 <lwiperf_start_tcp_client+0xb2>
 8000c14:	2a02      	cmp	r2, #2
 8000c16:	d004      	beq.n	8000c22 <lwiperf_start_tcp_client+0x32>
 8000c18:	b142      	cbz	r2, 8000c2c <lwiperf_start_tcp_client+0x3c>
      }
    }
    return state;
  }
  return NULL;
}
 8000c1a:	4620      	mov	r0, r4
 8000c1c:	b00c      	add	sp, #48	; 0x30
 8000c1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    settings.flags = htonl(LWIPERF_FLAGS_ANSWER_TEST);
 8000c22:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8000c26:	f005 febf 	bl	80069a8 <lwip_htonl>
 8000c2a:	9006      	str	r0, [sp, #24]
  settings.num_threads = htonl(1);
 8000c2c:	2001      	movs	r0, #1
  ret = lwiperf_tx_start_impl(remote_addr, remote_port, &settings, report_fn, report_arg, NULL, &state);
 8000c2e:	2400      	movs	r4, #0
  settings.num_threads = htonl(1);
 8000c30:	f005 feba 	bl	80069a8 <lwip_htonl>
 8000c34:	9007      	str	r0, [sp, #28]
  settings.remote_port = htonl(LWIPERF_TCP_PORT_DEFAULT);
 8000c36:	f241 3089 	movw	r0, #5001	; 0x1389
 8000c3a:	f005 feb5 	bl	80069a8 <lwip_htonl>
 8000c3e:	9008      	str	r0, [sp, #32]
  settings.amount = htonl((u32_t)-1000);
 8000c40:	482c      	ldr	r0, [pc, #176]	; (8000cf4 <lwiperf_start_tcp_client+0x104>)
 8000c42:	f005 feb1 	bl	80069a8 <lwip_htonl>
  ret = lwiperf_tx_start_impl(remote_addr, remote_port, &settings, report_fn, report_arg, NULL, &state);
 8000c46:	9b12      	ldr	r3, [sp, #72]	; 0x48
  settings.amount = htonl((u32_t)-1000);
 8000c48:	900b      	str	r0, [sp, #44]	; 0x2c
  ret = lwiperf_tx_start_impl(remote_addr, remote_port, &settings, report_fn, report_arg, NULL, &state);
 8000c4a:	aa06      	add	r2, sp, #24
 8000c4c:	9300      	str	r3, [sp, #0]
 8000c4e:	ab04      	add	r3, sp, #16
 8000c50:	4629      	mov	r1, r5
 8000c52:	4640      	mov	r0, r8
 8000c54:	9302      	str	r3, [sp, #8]
 8000c56:	463b      	mov	r3, r7
 8000c58:	9401      	str	r4, [sp, #4]
 8000c5a:	f7ff fe0b 	bl	8000874 <lwiperf_tx_start_impl.constprop.0>
  if (ret == ERR_OK) {
 8000c5e:	2800      	cmp	r0, #0
 8000c60:	d1db      	bne.n	8000c1a <lwiperf_start_tcp_client+0x2a>
    LWIP_ASSERT("state != NULL", state != NULL);
 8000c62:	9c04      	ldr	r4, [sp, #16]
 8000c64:	b314      	cbz	r4, 8000cac <lwiperf_start_tcp_client+0xbc>
    if (type != LWIPERF_CLIENT) {
 8000c66:	2e00      	cmp	r6, #0
 8000c68:	d0d7      	beq.n	8000c1a <lwiperf_start_tcp_client+0x2a>
      ret = lwiperf_start_tcp_server_impl(&state->conn_pcb->local_ip, LWIPERF_TCP_PORT_DEFAULT,
 8000c6a:	ab05      	add	r3, sp, #20
      lwiperf_state_tcp_t *server = NULL;
 8000c6c:	2500      	movs	r5, #0
      ret = lwiperf_start_tcp_server_impl(&state->conn_pcb->local_ip, LWIPERF_TCP_PORT_DEFAULT,
 8000c6e:	6920      	ldr	r0, [r4, #16]
 8000c70:	463a      	mov	r2, r7
 8000c72:	9301      	str	r3, [sp, #4]
 8000c74:	f241 3189 	movw	r1, #5001	; 0x1389
 8000c78:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8000c7a:	9400      	str	r4, [sp, #0]
      lwiperf_state_tcp_t *server = NULL;
 8000c7c:	9505      	str	r5, [sp, #20]
      ret = lwiperf_start_tcp_server_impl(&state->conn_pcb->local_ip, LWIPERF_TCP_PORT_DEFAULT,
 8000c7e:	f7ff fda7 	bl	80007d0 <lwiperf_start_tcp_server_impl.constprop.0>
      if (ret != ERR_OK) {
 8000c82:	b9e8      	cbnz	r0, 8000cc0 <lwiperf_start_tcp_client+0xd0>
      server->specific_remote = 1;
 8000c84:	9b05      	ldr	r3, [sp, #20]
 8000c86:	2201      	movs	r2, #1
      if (type == LWIPERF_TRADEOFF) {
 8000c88:	2e02      	cmp	r6, #2
}
 8000c8a:	4620      	mov	r0, r4
      server->specific_remote = 1;
 8000c8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      server->remote_addr = state->conn_pcb->remote_ip;
 8000c90:	6921      	ldr	r1, [r4, #16]
 8000c92:	6849      	ldr	r1, [r1, #4]
        server->client_tradeoff_mode = 1;
 8000c94:	bf08      	it	eq
 8000c96:	f883 2022 	strbeq.w	r2, [r3, #34]	; 0x22
      server->remote_addr = state->conn_pcb->remote_ip;
 8000c9a:	6459      	str	r1, [r3, #68]	; 0x44
}
 8000c9c:	b00c      	add	sp, #48	; 0x30
 8000c9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    settings.flags = htonl(LWIPERF_FLAGS_ANSWER_TEST | LWIPERF_FLAGS_ANSWER_NOW);
 8000ca2:	4815      	ldr	r0, [pc, #84]	; (8000cf8 <lwiperf_start_tcp_client+0x108>)
 8000ca4:	f005 fe80 	bl	80069a8 <lwip_htonl>
 8000ca8:	9006      	str	r0, [sp, #24]
    break;
 8000caa:	e7bf      	b.n	8000c2c <lwiperf_start_tcp_client+0x3c>
    LWIP_ASSERT("state != NULL", state != NULL);
 8000cac:	4b13      	ldr	r3, [pc, #76]	; (8000cfc <lwiperf_start_tcp_client+0x10c>)
 8000cae:	f240 3216 	movw	r2, #790	; 0x316
 8000cb2:	4913      	ldr	r1, [pc, #76]	; (8000d00 <lwiperf_start_tcp_client+0x110>)
 8000cb4:	4813      	ldr	r0, [pc, #76]	; (8000d04 <lwiperf_start_tcp_client+0x114>)
 8000cb6:	f00d f9b5 	bl	800e024 <iprintf>
    if (type != LWIPERF_CLIENT) {
 8000cba:	2e00      	cmp	r6, #0
 8000cbc:	d0ad      	beq.n	8000c1a <lwiperf_start_tcp_client+0x2a>
 8000cbe:	e7d4      	b.n	8000c6a <lwiperf_start_tcp_client+0x7a>
void
lwiperf_abort(void *lwiperf_session)
{
  lwiperf_state_base_t *i, *dealloc, *last = NULL;

  LWIP_ASSERT_CORE_LOCKED();
 8000cc0:	f003 f93a 	bl	8003f38 <sys_check_core_locking>

  for (i = lwiperf_all_connections; i != NULL; ) {
 8000cc4:	4b10      	ldr	r3, [pc, #64]	; (8000d08 <lwiperf_start_tcp_client+0x118>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	b153      	cbz	r3, 8000ce0 <lwiperf_start_tcp_client+0xf0>
  lwiperf_state_base_t *i, *dealloc, *last = NULL;
 8000cca:	462e      	mov	r6, r5
    if ((i == lwiperf_session) || (i->related_master_state == lwiperf_session)) {
 8000ccc:	429c      	cmp	r4, r3
      dealloc = i;
      i = i->next;
      if (last != NULL) {
        last->next = i;
      }
      LWIPERF_FREE(lwiperf_state_tcp_t, dealloc); /* @todo: type? */
 8000cce:	4618      	mov	r0, r3
    if ((i == lwiperf_session) || (i->related_master_state == lwiperf_session)) {
 8000cd0:	d008      	beq.n	8000ce4 <lwiperf_start_tcp_client+0xf4>
 8000cd2:	689a      	ldr	r2, [r3, #8]
 8000cd4:	4294      	cmp	r4, r2
 8000cd6:	d005      	beq.n	8000ce4 <lwiperf_start_tcp_client+0xf4>
    } else {
      last = i;
      i = i->next;
 8000cd8:	461e      	mov	r6, r3
 8000cda:	681b      	ldr	r3, [r3, #0]
  for (i = lwiperf_all_connections; i != NULL; ) {
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d1f5      	bne.n	8000ccc <lwiperf_start_tcp_client+0xdc>
        return NULL;
 8000ce0:	2400      	movs	r4, #0
 8000ce2:	e79a      	b.n	8000c1a <lwiperf_start_tcp_client+0x2a>
      i = i->next;
 8000ce4:	681d      	ldr	r5, [r3, #0]
      if (last != NULL) {
 8000ce6:	b106      	cbz	r6, 8000cea <lwiperf_start_tcp_client+0xfa>
        last->next = i;
 8000ce8:	6035      	str	r5, [r6, #0]
      LWIPERF_FREE(lwiperf_state_tcp_t, dealloc); /* @todo: type? */
 8000cea:	f005 ff17 	bl	8006b1c <mem_free>
      i = i->next;
 8000cee:	462b      	mov	r3, r5
      LWIPERF_FREE(lwiperf_state_tcp_t, dealloc); /* @todo: type? */
 8000cf0:	e7f4      	b.n	8000cdc <lwiperf_start_tcp_client+0xec>
 8000cf2:	bf00      	nop
 8000cf4:	fffffc18 	.word	0xfffffc18
 8000cf8:	80000001 	.word	0x80000001
 8000cfc:	0800ef08 	.word	0x0800ef08
 8000d00:	0800f06c 	.word	0x0800f06c
 8000d04:	0800ef30 	.word	0x0800ef30
 8000d08:	240000a8 	.word	0x240000a8

08000d0c <lwiperf_start_tcp_client_default>:
{
 8000d0c:	b510      	push	{r4, lr}
 8000d0e:	4614      	mov	r4, r2
 8000d10:	b082      	sub	sp, #8
 8000d12:	460b      	mov	r3, r1
  return lwiperf_start_tcp_client(remote_addr, LWIPERF_TCP_PORT_DEFAULT, LWIPERF_CLIENT,
 8000d14:	2200      	movs	r2, #0
 8000d16:	f241 3189 	movw	r1, #5001	; 0x1389
 8000d1a:	9400      	str	r4, [sp, #0]
 8000d1c:	f7ff ff68 	bl	8000bf0 <lwiperf_start_tcp_client>
}
 8000d20:	b002      	add	sp, #8
 8000d22:	bd10      	pop	{r4, pc}

08000d24 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000d24:	b500      	push	{lr}
 8000d26:	b083      	sub	sp, #12
  /* init code for LWIP */
  MX_LWIP_Init();
 8000d28:	f002 fd4c 	bl	80037c4 <MX_LWIP_Init>
   * iperf3 is not compatible at all.
   * Adding lwiperf.c file to the project is necessary.
   * The default include path should already contain
   * 'lwip/apps/lwiperf.h'
   */
  LOCK_TCPIP_CORE();
 8000d2c:	f003 f87c 	bl	8003e28 <sys_lock_tcpip_core>
  lwiperf_start_tcp_server_default(NULL, NULL);
 8000d30:	2100      	movs	r1, #0
 8000d32:	4608      	mov	r0, r1
 8000d34:	f7ff ff44 	bl	8000bc0 <lwiperf_start_tcp_server_default>

  ip4_addr_t remote_addr;
  IP4_ADDR(&remote_addr, 192, 168, 1, 1);
  lwiperf_start_tcp_client_default(&remote_addr, NULL, NULL);
 8000d38:	2200      	movs	r2, #0
  IP4_ADDR(&remote_addr, 192, 168, 1, 1);
 8000d3a:	4b06      	ldr	r3, [pc, #24]	; (8000d54 <StartDefaultTask+0x30>)
  lwiperf_start_tcp_client_default(&remote_addr, NULL, NULL);
 8000d3c:	a801      	add	r0, sp, #4
 8000d3e:	4611      	mov	r1, r2
  IP4_ADDR(&remote_addr, 192, 168, 1, 1);
 8000d40:	9301      	str	r3, [sp, #4]
  lwiperf_start_tcp_client_default(&remote_addr, NULL, NULL);
 8000d42:	f7ff ffe3 	bl	8000d0c <lwiperf_start_tcp_client_default>
  UNLOCK_TCPIP_CORE();
 8000d46:	f003 f8ed 	bl	8003f24 <sys_unlock_tcpip_core>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1000);
 8000d4a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d4e:	f003 f9bd 	bl	80040cc <osDelay>
  for(;;)
 8000d52:	e7fa      	b.n	8000d4a <StartDefaultTask+0x26>
 8000d54:	0101a8c0 	.word	0x0101a8c0

08000d58 <SystemClock_Config>:
{
 8000d58:	b530      	push	{r4, r5, lr}
 8000d5a:	b09d      	sub	sp, #116	; 0x74
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d5c:	224c      	movs	r2, #76	; 0x4c
 8000d5e:	2100      	movs	r1, #0
 8000d60:	a809      	add	r0, sp, #36	; 0x24
 8000d62:	f00d f9c4 	bl	800e0ee <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d66:	2220      	movs	r2, #32
 8000d68:	2100      	movs	r1, #0
 8000d6a:	a801      	add	r0, sp, #4
 8000d6c:	f00d f9bf 	bl	800e0ee <memset>
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000d70:	2002      	movs	r0, #2
 8000d72:	f001 fdff 	bl	8002974 <HAL_PWREx_ConfigSupply>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d76:	4b25      	ldr	r3, [pc, #148]	; (8000e0c <SystemClock_Config+0xb4>)
 8000d78:	2100      	movs	r1, #0
 8000d7a:	4a25      	ldr	r2, [pc, #148]	; (8000e10 <SystemClock_Config+0xb8>)
 8000d7c:	9100      	str	r1, [sp, #0]
 8000d7e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000d80:	f021 0101 	bic.w	r1, r1, #1
 8000d84:	62d9      	str	r1, [r3, #44]	; 0x2c
 8000d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d88:	f003 0301 	and.w	r3, r3, #1
 8000d8c:	9300      	str	r3, [sp, #0]
 8000d8e:	6993      	ldr	r3, [r2, #24]
 8000d90:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000d94:	6193      	str	r3, [r2, #24]
 8000d96:	6993      	ldr	r3, [r2, #24]
 8000d98:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d9c:	9300      	str	r3, [sp, #0]
 8000d9e:	9b00      	ldr	r3, [sp, #0]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000da0:	6993      	ldr	r3, [r2, #24]
 8000da2:	0499      	lsls	r1, r3, #18
 8000da4:	d5fc      	bpl.n	8000da0 <SystemClock_Config+0x48>
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000da6:	2300      	movs	r3, #0
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000da8:	2201      	movs	r2, #1
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000daa:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000dac:	2540      	movs	r5, #64	; 0x40
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000dae:	920c      	str	r2, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLN = 400;
 8000db0:	2220      	movs	r2, #32
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000db2:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000db4:	a809      	add	r0, sp, #36	; 0x24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000db6:	9409      	str	r4, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000db8:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000dba:	9416      	str	r4, [sp, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000dbc:	950d      	str	r5, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000dbe:	e9cd 331a 	strd	r3, r3, [sp, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLN = 400;
 8000dc2:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000dc6:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8000dca:	2304      	movs	r3, #4
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000dcc:	e9cd 4417 	strd	r4, r4, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8000dd0:	9319      	str	r3, [sp, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dd2:	f001 fe77 	bl	8002ac4 <HAL_RCC_OscConfig>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	b108      	cbz	r0, 8000dde <SystemClock_Config+0x86>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dda:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ddc:	e7fe      	b.n	8000ddc <SystemClock_Config+0x84>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dde:	223f      	movs	r2, #63	; 0x3f
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000de0:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000de2:	2308      	movs	r3, #8
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000de4:	4621      	mov	r1, r4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000de6:	9201      	str	r2, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000de8:	2203      	movs	r2, #3
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000dea:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000dec:	9508      	str	r5, [sp, #32]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dee:	9202      	str	r2, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000df0:	e9cd 3504 	strd	r3, r5, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000df4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000df8:	e9cd 5306 	strd	r5, r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000dfc:	f002 f958 	bl	80030b0 <HAL_RCC_ClockConfig>
 8000e00:	b108      	cbz	r0, 8000e06 <SystemClock_Config+0xae>
 8000e02:	b672      	cpsid	i
  while (1)
 8000e04:	e7fe      	b.n	8000e04 <SystemClock_Config+0xac>
}
 8000e06:	b01d      	add	sp, #116	; 0x74
 8000e08:	bd30      	pop	{r4, r5, pc}
 8000e0a:	bf00      	nop
 8000e0c:	58000400 	.word	0x58000400
 8000e10:	58024800 	.word	0x58024800

08000e14 <main>:
{
 8000e14:	b500      	push	{lr}
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000e16:	2400      	movs	r4, #0
{
 8000e18:	b08d      	sub	sp, #52	; 0x34
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000e1a:	2501      	movs	r5, #1
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000e1c:	e9cd 4407 	strd	r4, r4, [sp, #28]
 8000e20:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  HAL_MPU_Disable();
 8000e24:	f000 fc5a 	bl	80016dc <HAL_MPU_Disable>
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000e28:	f248 721f 	movw	r2, #34591	; 0x871f
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000e2c:	f240 1301 	movw	r3, #257	; 0x101
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000e30:	a807      	add	r0, sp, #28
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000e32:	f8ad 501c 	strh.w	r5, [sp, #28]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000e36:	930a      	str	r3, [sp, #40]	; 0x28
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000e38:	e9cd 4208 	strd	r4, r2, [sp, #32]
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000e3c:	f000 fc6c 	bl	8001718 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.BaseAddress = 0x30020000;
 8000e40:	4a93      	ldr	r2, [pc, #588]	; (8001090 <main+0x27c>)
  MPU_InitStruct.Size = MPU_REGION_SIZE_128KB;
 8000e42:	4b94      	ldr	r3, [pc, #592]	; (8001094 <main+0x280>)
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000e44:	a807      	add	r0, sp, #28
  MPU_InitStruct.BaseAddress = 0x30020000;
 8000e46:	9208      	str	r2, [sp, #32]
  MPU_InitStruct.Size = MPU_REGION_SIZE_128KB;
 8000e48:	9309      	str	r3, [sp, #36]	; 0x24
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000e4a:	f88d 501d 	strb.w	r5, [sp, #29]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000e4e:	f88d 4029 	strb.w	r4, [sp, #41]	; 0x29
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000e52:	f000 fc61 	bl	8001718 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.BaseAddress = 0x30040000;
 8000e56:	4b90      	ldr	r3, [pc, #576]	; (8001098 <main+0x284>)
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8000e58:	2202      	movs	r2, #2
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000e5a:	a807      	add	r0, sp, #28
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000e5c:	f88d 4026 	strb.w	r4, [sp, #38]	; 0x26
  MPU_InitStruct.BaseAddress = 0x30040000;
 8000e60:	9308      	str	r3, [sp, #32]
  MPU_InitStruct.Size = MPU_REGION_SIZE_512B;
 8000e62:	2308      	movs	r3, #8
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8000e64:	f88d 201d 	strb.w	r2, [sp, #29]
  MPU_InitStruct.Size = MPU_REGION_SIZE_512B;
 8000e68:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000e6c:	f88d 5029 	strb.w	r5, [sp, #41]	; 0x29
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8000e70:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000e74:	f000 fc50 	bl	8001718 <HAL_MPU_ConfigRegion>
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000e78:	2004      	movs	r0, #4
 8000e7a:	f000 fc3d 	bl	80016f8 <HAL_MPU_Enable>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000e7e:	4a87      	ldr	r2, [pc, #540]	; (800109c <main+0x288>)
 8000e80:	6953      	ldr	r3, [r2, #20]
 8000e82:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
 8000e86:	d111      	bne.n	8000eac <main+0x98>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000e88:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000e8c:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000e90:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000e94:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000e98:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000e9c:	6953      	ldr	r3, [r2, #20]
 8000e9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ea2:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000ea4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000ea8:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000eac:	487b      	ldr	r0, [pc, #492]	; (800109c <main+0x288>)
 8000eae:	6943      	ldr	r3, [r0, #20]
 8000eb0:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 8000eb4:	d126      	bne.n	8000f04 <main+0xf0>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000eb6:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000eba:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000ebe:	f8d0 4080 	ldr.w	r4, [r0, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000ec2:	f643 7ee0 	movw	lr, #16352	; 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000ec6:	f3c4 3c4e 	ubfx	ip, r4, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000eca:	f3c4 04c9 	ubfx	r4, r4, #3, #10
 8000ece:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000ed2:	ea0c 010e 	and.w	r1, ip, lr
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000ed6:	4623      	mov	r3, r4
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000ed8:	ea41 7283 	orr.w	r2, r1, r3, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000edc:	3b01      	subs	r3, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000ede:	f8c0 2260 	str.w	r2, [r0, #608]	; 0x260
      } while (ways-- != 0U);
 8000ee2:	1c5a      	adds	r2, r3, #1
 8000ee4:	d1f8      	bne.n	8000ed8 <main+0xc4>
    } while(sets-- != 0U);
 8000ee6:	f1ac 0c20 	sub.w	ip, ip, #32
 8000eea:	f11c 0f20 	cmn.w	ip, #32
 8000eee:	d1f0      	bne.n	8000ed2 <main+0xbe>
 8000ef0:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000ef4:	6943      	ldr	r3, [r0, #20]
 8000ef6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000efa:	6143      	str	r3, [r0, #20]
 8000efc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000f00:	f3bf 8f6f 	isb	sy
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f04:	2400      	movs	r4, #0
  HAL_Init();
 8000f06:	f000 fb39 	bl	800157c <HAL_Init>
  SystemClock_Config();
 8000f0a:	f7ff ff25 	bl	8000d58 <SystemClock_Config>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f0e:	4b64      	ldr	r3, [pc, #400]	; (80010a0 <main+0x28c>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f10:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000f12:	f244 0101 	movw	r1, #16385	; 0x4001
 8000f16:	4622      	mov	r2, r4
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f18:	2501      	movs	r5, #1
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f1a:	2602      	movs	r6, #2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f1c:	e9cd 4407 	strd	r4, r4, [sp, #28]
 8000f20:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f24:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 8000f28:	f040 0004 	orr.w	r0, r0, #4
 8000f2c:	f8c3 00e0 	str.w	r0, [r3, #224]	; 0xe0
 8000f30:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 8000f34:	f000 0004 	and.w	r0, r0, #4
 8000f38:	9000      	str	r0, [sp, #0]
 8000f3a:	9800      	ldr	r0, [sp, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f3c:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 8000f40:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 8000f44:	f8c3 00e0 	str.w	r0, [r3, #224]	; 0xe0
 8000f48:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 8000f4c:	f000 0080 	and.w	r0, r0, #128	; 0x80
 8000f50:	9001      	str	r0, [sp, #4]
 8000f52:	9801      	ldr	r0, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f54:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 8000f58:	f040 0001 	orr.w	r0, r0, #1
 8000f5c:	f8c3 00e0 	str.w	r0, [r3, #224]	; 0xe0
 8000f60:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 8000f64:	f000 0001 	and.w	r0, r0, #1
 8000f68:	9002      	str	r0, [sp, #8]
 8000f6a:	9802      	ldr	r0, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f6c:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 8000f70:	f040 0002 	orr.w	r0, r0, #2
 8000f74:	f8c3 00e0 	str.w	r0, [r3, #224]	; 0xe0
 8000f78:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 8000f7c:	f000 0002 	and.w	r0, r0, #2
 8000f80:	9003      	str	r0, [sp, #12]
 8000f82:	9803      	ldr	r0, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f84:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 8000f88:	f040 0008 	orr.w	r0, r0, #8
 8000f8c:	f8c3 00e0 	str.w	r0, [r3, #224]	; 0xe0
 8000f90:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 8000f94:	f000 0008 	and.w	r0, r0, #8
 8000f98:	9004      	str	r0, [sp, #16]
 8000f9a:	9804      	ldr	r0, [sp, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f9c:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 8000fa0:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 8000fa4:	f8c3 00e0 	str.w	r0, [r3, #224]	; 0xe0
 8000fa8:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 8000fac:	f000 0040 	and.w	r0, r0, #64	; 0x40
 8000fb0:	9005      	str	r0, [sp, #20]
 8000fb2:	9805      	ldr	r0, [sp, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fb4:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 8000fb8:	f040 0010 	orr.w	r0, r0, #16
 8000fbc:	f8c3 00e0 	str.w	r0, [r3, #224]	; 0xe0
 8000fc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000fc4:	4837      	ldr	r0, [pc, #220]	; (80010a4 <main+0x290>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fc6:	f003 0310 	and.w	r3, r3, #16
 8000fca:	9306      	str	r3, [sp, #24]
 8000fcc:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000fce:	f001 fccd 	bl	800296c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000fd2:	4622      	mov	r2, r4
 8000fd4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fd8:	4833      	ldr	r0, [pc, #204]	; (80010a8 <main+0x294>)
 8000fda:	f001 fcc7 	bl	800296c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000fde:	4622      	mov	r2, r4
 8000fe0:	2102      	movs	r1, #2
 8000fe2:	4832      	ldr	r0, [pc, #200]	; (80010ac <main+0x298>)
 8000fe4:	f001 fcc2 	bl	800296c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = B1_Pin;
 8000fe8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000fec:	a907      	add	r1, sp, #28
 8000fee:	4830      	ldr	r0, [pc, #192]	; (80010b0 <main+0x29c>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff0:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ff2:	e9cd 3407 	strd	r3, r4, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ff6:	f001 fb87 	bl	8002708 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000ffa:	f244 0301 	movw	r3, #16385	; 0x4001
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ffe:	a907      	add	r1, sp, #28
 8001000:	4828      	ldr	r0, [pc, #160]	; (80010a4 <main+0x290>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001002:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001004:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001006:	e9cd 3507 	strd	r3, r5, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800100a:	f001 fb7d 	bl	8002708 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800100e:	f44f 7340 	mov.w	r3, #768	; 0x300
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001012:	a907      	add	r1, sp, #28
 8001014:	4824      	ldr	r0, [pc, #144]	; (80010a8 <main+0x294>)
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001016:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001018:	2307      	movs	r3, #7
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800101a:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800101c:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800101e:	e9cd 6408 	strd	r6, r4, [sp, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001022:	f001 fb71 	bl	8002708 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8001026:	f44f 6380 	mov.w	r3, #1024	; 0x400
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 800102a:	a907      	add	r1, sp, #28
 800102c:	481e      	ldr	r0, [pc, #120]	; (80010a8 <main+0x294>)
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 800102e:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001030:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001032:	e9cd 5408 	strd	r5, r4, [sp, #32]
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001036:	f001 fb67 	bl	8002708 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 800103a:	2380      	movs	r3, #128	; 0x80
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 800103c:	a907      	add	r1, sp, #28
 800103e:	481d      	ldr	r0, [pc, #116]	; (80010b4 <main+0x2a0>)
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8001040:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001042:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001046:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001048:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 800104a:	f001 fb5d 	bl	8002708 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 800104e:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001052:	a907      	add	r1, sp, #28
 8001054:	4818      	ldr	r0, [pc, #96]	; (80010b8 <main+0x2a4>)
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001056:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001058:	230a      	movs	r3, #10
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105a:	e9cd 6408 	strd	r6, r4, [sp, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800105e:	e9cd 430a 	strd	r4, r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001062:	f001 fb51 	bl	8002708 <HAL_GPIO_Init>
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001066:	a907      	add	r1, sp, #28
 8001068:	4810      	ldr	r0, [pc, #64]	; (80010ac <main+0x298>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800106a:	e9cd 6507 	strd	r6, r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106e:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001072:	f001 fb49 	bl	8002708 <HAL_GPIO_Init>
  osKernelInitialize();
 8001076:	f002 ffa7 	bl	8003fc8 <osKernelInitialize>
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800107a:	4a10      	ldr	r2, [pc, #64]	; (80010bc <main+0x2a8>)
 800107c:	4621      	mov	r1, r4
 800107e:	4810      	ldr	r0, [pc, #64]	; (80010c0 <main+0x2ac>)
 8001080:	f002 ffd6 	bl	8004030 <osThreadNew>
 8001084:	4b0f      	ldr	r3, [pc, #60]	; (80010c4 <main+0x2b0>)
 8001086:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8001088:	f002 ffb0 	bl	8003fec <osKernelStart>
  while (1)
 800108c:	e7fe      	b.n	800108c <main+0x278>
 800108e:	bf00      	nop
 8001090:	30020000 	.word	0x30020000
 8001094:	03010010 	.word	0x03010010
 8001098:	30040000 	.word	0x30040000
 800109c:	e000ed00 	.word	0xe000ed00
 80010a0:	58024400 	.word	0x58024400
 80010a4:	58020400 	.word	0x58020400
 80010a8:	58020c00 	.word	0x58020c00
 80010ac:	58021000 	.word	0x58021000
 80010b0:	58020800 	.word	0x58020800
 80010b4:	58021800 	.word	0x58021800
 80010b8:	58020000 	.word	0x58020000
 80010bc:	0800f6c8 	.word	0x0800f6c8
 80010c0:	08000d25 	.word	0x08000d25
 80010c4:	240000ac 	.word	0x240000ac

080010c8 <HAL_TIM_PeriodElapsedCallback>:
  if (htim->Instance == TIM6) {
 80010c8:	4b03      	ldr	r3, [pc, #12]	; (80010d8 <HAL_TIM_PeriodElapsedCallback+0x10>)
 80010ca:	6802      	ldr	r2, [r0, #0]
 80010cc:	429a      	cmp	r2, r3
 80010ce:	d000      	beq.n	80010d2 <HAL_TIM_PeriodElapsedCallback+0xa>
}
 80010d0:	4770      	bx	lr
    HAL_IncTick();
 80010d2:	f000 ba83 	b.w	80015dc <HAL_IncTick>
 80010d6:	bf00      	nop
 80010d8:	40001000 	.word	0x40001000

080010dc <Error_Handler>:
  __ASM volatile ("cpsid i" : : : "memory");
 80010dc:	b672      	cpsid	i
  while (1)
 80010de:	e7fe      	b.n	80010de <Error_Handler+0x2>

080010e0 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010e0:	4b0f      	ldr	r3, [pc, #60]	; (8001120 <HAL_MspInit+0x40>)

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80010e2:	2200      	movs	r2, #0
 80010e4:	210f      	movs	r1, #15
 80010e6:	f06f 0001 	mvn.w	r0, #1
{
 80010ea:	b510      	push	{r4, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ec:	f8d3 40f4 	ldr.w	r4, [r3, #244]	; 0xf4
{
 80010f0:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010f2:	f044 0402 	orr.w	r4, r4, #2
 80010f6:	f8c3 40f4 	str.w	r4, [r3, #244]	; 0xf4
 80010fa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80010fe:	f003 0302 	and.w	r3, r3, #2
 8001102:	9301      	str	r3, [sp, #4]
 8001104:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001106:	f000 fa9d 	bl	8001644 <HAL_NVIC_SetPriority>
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800110a:	4906      	ldr	r1, [pc, #24]	; (8001124 <HAL_MspInit+0x44>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800110c:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
  reg_value  =  (reg_value                                   |
 8001110:	4b05      	ldr	r3, [pc, #20]	; (8001128 <HAL_MspInit+0x48>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001112:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001114:	4002      	ands	r2, r0
  reg_value  =  (reg_value                                   |
 8001116:	4313      	orrs	r3, r2
  SCB->AIRCR =  reg_value;
 8001118:	60cb      	str	r3, [r1, #12]

  /* USER CODE BEGIN MspInit 1 */
  NVIC_SetPriorityGrouping(0);
  /* USER CODE END MspInit 1 */
}
 800111a:	b002      	add	sp, #8
 800111c:	bd10      	pop	{r4, pc}
 800111e:	bf00      	nop
 8001120:	58024400 	.word	0x58024400
 8001124:	e000ed00 	.word	0xe000ed00
 8001128:	05fa0000 	.word	0x05fa0000

0800112c <HAL_InitTick>:
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800112c:	280f      	cmp	r0, #15
 800112e:	d901      	bls.n	8001134 <HAL_InitTick+0x8>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
    uwTickPrio = TickPriority;
    }
  else
  {
    return HAL_ERROR;
 8001130:	2001      	movs	r0, #1
    return HAL_TIM_Base_Start_IT(&htim6);
  }

  /* Return function status */
  return HAL_ERROR;
}
 8001132:	4770      	bx	lr
{
 8001134:	b530      	push	{r4, r5, lr}
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8001136:	4601      	mov	r1, r0
{
 8001138:	b08b      	sub	sp, #44	; 0x2c
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 800113a:	2200      	movs	r2, #0
 800113c:	4604      	mov	r4, r0
 800113e:	2036      	movs	r0, #54	; 0x36
 8001140:	f000 fa80 	bl	8001644 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001144:	2036      	movs	r0, #54	; 0x36
 8001146:	f000 fabb 	bl	80016c0 <HAL_NVIC_EnableIRQ>
  __HAL_RCC_TIM6_CLK_ENABLE();
 800114a:	4b1a      	ldr	r3, [pc, #104]	; (80011b4 <HAL_InitTick+0x88>)
    uwTickPrio = TickPriority;
 800114c:	4a1a      	ldr	r2, [pc, #104]	; (80011b8 <HAL_InitTick+0x8c>)
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800114e:	4669      	mov	r1, sp
 8001150:	a802      	add	r0, sp, #8
    uwTickPrio = TickPriority;
 8001152:	6014      	str	r4, [r2, #0]
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001154:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8001158:	f042 0210 	orr.w	r2, r2, #16
 800115c:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8001160:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001164:	f003 0310 	and.w	r3, r3, #16
 8001168:	9301      	str	r3, [sp, #4]
 800116a:	9b01      	ldr	r3, [sp, #4]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800116c:	f002 f91a 	bl	80033a4 <HAL_RCC_GetClockConfig>
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001170:	9b07      	ldr	r3, [sp, #28]
 8001172:	b9bb      	cbnz	r3, 80011a4 <HAL_InitTick+0x78>
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001174:	f002 f904 	bl	8003380 <HAL_RCC_GetPCLK1Freq>
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001178:	4b10      	ldr	r3, [pc, #64]	; (80011bc <HAL_InitTick+0x90>)
  htim6.Init.ClockDivision = 0;
 800117a:	2200      	movs	r2, #0
  htim6.Instance = TIM6;
 800117c:	4c10      	ldr	r4, [pc, #64]	; (80011c0 <HAL_InitTick+0x94>)
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800117e:	fba3 1300 	umull	r1, r3, r3, r0
  htim6.Instance = TIM6;
 8001182:	4d10      	ldr	r5, [pc, #64]	; (80011c4 <HAL_InitTick+0x98>)
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001184:	f240 31e7 	movw	r1, #999	; 0x3e7
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001188:	4620      	mov	r0, r4
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800118a:	0c9b      	lsrs	r3, r3, #18
  htim6.Instance = TIM6;
 800118c:	6025      	str	r5, [r4, #0]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800118e:	60a2      	str	r2, [r4, #8]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001190:	3b01      	subs	r3, #1
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001192:	e9c4 1203 	strd	r1, r2, [r4, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001196:	6063      	str	r3, [r4, #4]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001198:	f002 fada 	bl	8003750 <HAL_TIM_Base_Init>
 800119c:	b130      	cbz	r0, 80011ac <HAL_InitTick+0x80>
    return HAL_ERROR;
 800119e:	2001      	movs	r0, #1
}
 80011a0:	b00b      	add	sp, #44	; 0x2c
 80011a2:	bd30      	pop	{r4, r5, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80011a4:	f002 f8ec 	bl	8003380 <HAL_RCC_GetPCLK1Freq>
 80011a8:	0040      	lsls	r0, r0, #1
 80011aa:	e7e5      	b.n	8001178 <HAL_InitTick+0x4c>
    return HAL_TIM_Base_Start_IT(&htim6);
 80011ac:	4620      	mov	r0, r4
 80011ae:	f002 f927 	bl	8003400 <HAL_TIM_Base_Start_IT>
 80011b2:	e7f5      	b.n	80011a0 <HAL_InitTick+0x74>
 80011b4:	58024400 	.word	0x58024400
 80011b8:	2400000c 	.word	0x2400000c
 80011bc:	431bde83 	.word	0x431bde83
 80011c0:	240000b0 	.word	0x240000b0
 80011c4:	40001000 	.word	0x40001000

080011c8 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011c8:	e7fe      	b.n	80011c8 <NMI_Handler>
 80011ca:	bf00      	nop

080011cc <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011cc:	e7fe      	b.n	80011cc <HardFault_Handler>
 80011ce:	bf00      	nop

080011d0 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011d0:	e7fe      	b.n	80011d0 <MemManage_Handler>
 80011d2:	bf00      	nop

080011d4 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011d4:	e7fe      	b.n	80011d4 <BusFault_Handler>
 80011d6:	bf00      	nop

080011d8 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011d8:	e7fe      	b.n	80011d8 <UsageFault_Handler>
 80011da:	bf00      	nop

080011dc <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop

080011e0 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80011e0:	4801      	ldr	r0, [pc, #4]	; (80011e8 <TIM6_DAC_IRQHandler+0x8>)
 80011e2:	f002 b971 	b.w	80034c8 <HAL_TIM_IRQHandler>
 80011e6:	bf00      	nop
 80011e8:	240000b0 	.word	0x240000b0

080011ec <ETH_IRQHandler>:
void ETH_IRQHandler(void)
{
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80011ec:	4801      	ldr	r0, [pc, #4]	; (80011f4 <ETH_IRQHandler+0x8>)
 80011ee:	f000 bf3d 	b.w	800206c <HAL_ETH_IRQHandler>
 80011f2:	bf00      	nop
 80011f4:	240001d8 	.word	0x240001d8

080011f8 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 80011f8:	2001      	movs	r0, #1
 80011fa:	4770      	bx	lr

080011fc <_kill>:

int _kill(int pid, int sig)
{
	errno = EINVAL;
 80011fc:	4b02      	ldr	r3, [pc, #8]	; (8001208 <_kill+0xc>)
 80011fe:	2216      	movs	r2, #22
	return -1;
}
 8001200:	f04f 30ff 	mov.w	r0, #4294967295
	errno = EINVAL;
 8001204:	601a      	str	r2, [r3, #0]
}
 8001206:	4770      	bx	lr
 8001208:	240107f0 	.word	0x240107f0

0800120c <_exit>:
	errno = EINVAL;
 800120c:	4b01      	ldr	r3, [pc, #4]	; (8001214 <_exit+0x8>)
 800120e:	2216      	movs	r2, #22
 8001210:	601a      	str	r2, [r3, #0]

void _exit (int status)
{
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8001212:	e7fe      	b.n	8001212 <_exit+0x6>
 8001214:	240107f0 	.word	0x240107f0

08001218 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001218:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800121a:	1e16      	subs	r6, r2, #0
 800121c:	dd07      	ble.n	800122e <_read+0x16>
 800121e:	460c      	mov	r4, r1
 8001220:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 8001222:	f3af 8000 	nop.w
 8001226:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800122a:	42a5      	cmp	r5, r4
 800122c:	d1f9      	bne.n	8001222 <_read+0xa>
	}

return len;
}
 800122e:	4630      	mov	r0, r6
 8001230:	bd70      	pop	{r4, r5, r6, pc}
 8001232:	bf00      	nop

08001234 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001234:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001236:	1e16      	subs	r6, r2, #0
 8001238:	dd07      	ble.n	800124a <_write+0x16>
 800123a:	460c      	mov	r4, r1
 800123c:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 800123e:	f814 0b01 	ldrb.w	r0, [r4], #1
 8001242:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001246:	42a5      	cmp	r5, r4
 8001248:	d1f9      	bne.n	800123e <_write+0xa>
	}
	return len;
}
 800124a:	4630      	mov	r0, r6
 800124c:	bd70      	pop	{r4, r5, r6, pc}
 800124e:	bf00      	nop

08001250 <_close>:

int _close(int file)
{
	return -1;
}
 8001250:	f04f 30ff 	mov.w	r0, #4294967295
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop

08001258 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8001258:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 800125c:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 800125e:	604b      	str	r3, [r1, #4]
}
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop

08001264 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8001264:	2001      	movs	r0, #1
 8001266:	4770      	bx	lr

08001268 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8001268:	2000      	movs	r0, #0
 800126a:	4770      	bx	lr

0800126c <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800126c:	490d      	ldr	r1, [pc, #52]	; (80012a4 <_sbrk+0x38>)
{
 800126e:	4603      	mov	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001270:	4a0d      	ldr	r2, [pc, #52]	; (80012a8 <_sbrk+0x3c>)
  if (NULL == __sbrk_heap_end)
 8001272:	6808      	ldr	r0, [r1, #0]
{
 8001274:	b410      	push	{r4}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001276:	4c0d      	ldr	r4, [pc, #52]	; (80012ac <_sbrk+0x40>)
 8001278:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 800127a:	b170      	cbz	r0, 800129a <_sbrk+0x2e>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800127c:	4403      	add	r3, r0
 800127e:	4293      	cmp	r3, r2
 8001280:	d803      	bhi.n	800128a <_sbrk+0x1e>

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8001282:	f85d 4b04 	ldr.w	r4, [sp], #4
  __sbrk_heap_end += incr;
 8001286:	600b      	str	r3, [r1, #0]
}
 8001288:	4770      	bx	lr
    errno = ENOMEM;
 800128a:	4b09      	ldr	r3, [pc, #36]	; (80012b0 <_sbrk+0x44>)
 800128c:	220c      	movs	r2, #12
    return (void *)-1;
 800128e:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001292:	f85d 4b04 	ldr.w	r4, [sp], #4
    errno = ENOMEM;
 8001296:	601a      	str	r2, [r3, #0]
}
 8001298:	4770      	bx	lr
    __sbrk_heap_end = &_end;
 800129a:	4c06      	ldr	r4, [pc, #24]	; (80012b4 <_sbrk+0x48>)
 800129c:	4620      	mov	r0, r4
 800129e:	600c      	str	r4, [r1, #0]
 80012a0:	e7ec      	b.n	800127c <_sbrk+0x10>
 80012a2:	bf00      	nop
 80012a4:	240000fc 	.word	0x240000fc
 80012a8:	24080000 	.word	0x24080000
 80012ac:	00000400 	.word	0x00000400
 80012b0:	240107f0 	.word	0x240107f0
 80012b4:	24010800 	.word	0x24010800

080012b8 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80012b8:	4927      	ldr	r1, [pc, #156]	; (8001358 <SystemInit+0xa0>)
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80012ba:	4a28      	ldr	r2, [pc, #160]	; (800135c <SystemInit+0xa4>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80012bc:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80012c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
{
 80012c4:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80012c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80012ca:	6813      	ldr	r3, [r2, #0]
 80012cc:	f003 030f 	and.w	r3, r3, #15
 80012d0:	2b06      	cmp	r3, #6
 80012d2:	d805      	bhi.n	80012e0 <SystemInit+0x28>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80012d4:	6813      	ldr	r3, [r2, #0]
 80012d6:	f023 030f 	bic.w	r3, r3, #15
 80012da:	f043 0307 	orr.w	r3, r3, #7
 80012de:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80012e0:	4b1f      	ldr	r3, [pc, #124]	; (8001360 <SystemInit+0xa8>)

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80012e2:	2400      	movs	r4, #0

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80012e4:	4a1f      	ldr	r2, [pc, #124]	; (8001364 <SystemInit+0xac>)
  RCC->CR |= RCC_CR_HSION;
 80012e6:	6819      	ldr	r1, [r3, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80012e8:	481c      	ldr	r0, [pc, #112]	; (800135c <SystemInit+0xa4>)
  RCC->CR |= RCC_CR_HSION;
 80012ea:	f041 0101 	orr.w	r1, r1, #1
 80012ee:	6019      	str	r1, [r3, #0]
  RCC->CFGR = 0x00000000;
 80012f0:	611c      	str	r4, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
 80012f2:	6819      	ldr	r1, [r3, #0]
 80012f4:	400a      	ands	r2, r1
 80012f6:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80012f8:	6803      	ldr	r3, [r0, #0]
 80012fa:	071b      	lsls	r3, r3, #28
 80012fc:	d505      	bpl.n	800130a <SystemInit+0x52>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80012fe:	6803      	ldr	r3, [r0, #0]
 8001300:	f023 030f 	bic.w	r3, r3, #15
 8001304:	f043 0307 	orr.w	r3, r3, #7
 8001308:	6003      	str	r3, [r0, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800130a:	4b15      	ldr	r3, [pc, #84]	; (8001360 <SystemInit+0xa8>)
 800130c:	2200      	movs	r2, #0
  RCC->PLLCKSELR = 0x02020200;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800130e:	4916      	ldr	r1, [pc, #88]	; (8001368 <SystemInit+0xb0>)
  RCC->PLLCKSELR = 0x02020200;
 8001310:	4c16      	ldr	r4, [pc, #88]	; (800136c <SystemInit+0xb4>)
  RCC->PLLCFGR = 0x01FF0000;
 8001312:	4817      	ldr	r0, [pc, #92]	; (8001370 <SystemInit+0xb8>)
  RCC->D1CFGR = 0x00000000;
 8001314:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 8001316:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 8001318:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 800131a:	629c      	str	r4, [r3, #40]	; 0x28
  RCC->PLLCFGR = 0x01FF0000;
 800131c:	62d8      	str	r0, [r3, #44]	; 0x2c
  RCC->PLL1DIVR = 0x01010280;
 800131e:	6319      	str	r1, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001320:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001322:	6399      	str	r1, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001324:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001326:	6419      	str	r1, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001328:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800132a:	6818      	ldr	r0, [r3, #0]
  /* Disable all interrupts */
  RCC->CIER = 0x00000000;

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800132c:	4c11      	ldr	r4, [pc, #68]	; (8001374 <SystemInit+0xbc>)
  RCC->CR &= 0xFFFBFFFFU;
 800132e:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001332:	4911      	ldr	r1, [pc, #68]	; (8001378 <SystemInit+0xc0>)
  RCC->CR &= 0xFFFBFFFFU;
 8001334:	6018      	str	r0, [r3, #0]
  RCC->CIER = 0x00000000;
 8001336:	661a      	str	r2, [r3, #96]	; 0x60
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001338:	6823      	ldr	r3, [r4, #0]
 800133a:	4019      	ands	r1, r3
 800133c:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8001340:	d203      	bcs.n	800134a <SystemInit+0x92>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001342:	4b0e      	ldr	r3, [pc, #56]	; (800137c <SystemInit+0xc4>)
 8001344:	2201      	movs	r2, #1
 8001346:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800134a:	4b0d      	ldr	r3, [pc, #52]	; (8001380 <SystemInit+0xc8>)
 800134c:	f243 02d2 	movw	r2, #12498	; 0x30d2
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001350:	f85d 4b04 	ldr.w	r4, [sp], #4
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001354:	601a      	str	r2, [r3, #0]
}
 8001356:	4770      	bx	lr
 8001358:	e000ed00 	.word	0xe000ed00
 800135c:	52002000 	.word	0x52002000
 8001360:	58024400 	.word	0x58024400
 8001364:	eaf6ed7f 	.word	0xeaf6ed7f
 8001368:	01010280 	.word	0x01010280
 800136c:	02020200 	.word	0x02020200
 8001370:	01ff0000 	.word	0x01ff0000
 8001374:	5c001000 	.word	0x5c001000
 8001378:	ffff0000 	.word	0xffff0000
 800137c:	51008000 	.word	0x51008000
 8001380:	52004000 	.word	0x52004000

08001384 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001384:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013bc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001388:	f7ff ff96 	bl	80012b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800138c:	480c      	ldr	r0, [pc, #48]	; (80013c0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800138e:	490d      	ldr	r1, [pc, #52]	; (80013c4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001390:	4a0d      	ldr	r2, [pc, #52]	; (80013c8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001392:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001394:	e002      	b.n	800139c <LoopCopyDataInit>

08001396 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001396:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001398:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800139a:	3304      	adds	r3, #4

0800139c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800139c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800139e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013a0:	d3f9      	bcc.n	8001396 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013a2:	4a0a      	ldr	r2, [pc, #40]	; (80013cc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80013a4:	4c0a      	ldr	r4, [pc, #40]	; (80013d0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80013a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013a8:	e001      	b.n	80013ae <LoopFillZerobss>

080013aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013ac:	3204      	adds	r2, #4

080013ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013b0:	d3fb      	bcc.n	80013aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013b2:	f00c ff41 	bl	800e238 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013b6:	f7ff fd2d 	bl	8000e14 <main>
  bx  lr
 80013ba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80013bc:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80013c0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80013c4:	2400008c 	.word	0x2400008c
  ldr r2, =_sidata
 80013c8:	08011928 	.word	0x08011928
  ldr r2, =_sbss
 80013cc:	2400008c 	.word	0x2400008c
  ldr r4, =_ebss
 80013d0:	24010800 	.word	0x24010800

080013d4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013d4:	e7fe      	b.n	80013d4 <ADC3_IRQHandler>
	...

080013d8 <LAN8742_RegisterBusIO>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 80013d8:	b188      	cbz	r0, 80013fe <LAN8742_RegisterBusIO+0x26>
 80013da:	68ca      	ldr	r2, [r1, #12]
 80013dc:	b17a      	cbz	r2, 80013fe <LAN8742_RegisterBusIO+0x26>
{
 80013de:	b430      	push	{r4, r5}
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 80013e0:	688c      	ldr	r4, [r1, #8]
 80013e2:	b17c      	cbz	r4, 8001404 <LAN8742_RegisterBusIO+0x2c>
 80013e4:	690d      	ldr	r5, [r1, #16]
 80013e6:	b16d      	cbz	r5, 8001404 <LAN8742_RegisterBusIO+0x2c>
 80013e8:	4603      	mov	r3, r0
  {
    return LAN8742_STATUS_ERROR;
  }
  
  pObj->IO.Init = ioctx->Init;
 80013ea:	6808      	ldr	r0, [r1, #0]
  pObj->IO.DeInit = ioctx->DeInit;
 80013ec:	6849      	ldr	r1, [r1, #4]
  pObj->IO.Init = ioctx->Init;
 80013ee:	6098      	str	r0, [r3, #8]
  pObj->IO.ReadReg = ioctx->ReadReg;
  pObj->IO.WriteReg = ioctx->WriteReg;
  pObj->IO.GetTick = ioctx->GetTick;
  
  return LAN8742_STATUS_OK;
 80013f0:	2000      	movs	r0, #0
  pObj->IO.ReadReg = ioctx->ReadReg;
 80013f2:	615a      	str	r2, [r3, #20]
  pObj->IO.GetTick = ioctx->GetTick;
 80013f4:	619d      	str	r5, [r3, #24]
  pObj->IO.WriteReg = ioctx->WriteReg;
 80013f6:	e9c3 1403 	strd	r1, r4, [r3, #12]
}
 80013fa:	bc30      	pop	{r4, r5}
 80013fc:	4770      	bx	lr
    return LAN8742_STATUS_ERROR;
 80013fe:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001402:	4770      	bx	lr
    return LAN8742_STATUS_ERROR;
 8001404:	f04f 30ff 	mov.w	r0, #4294967295
 8001408:	e7f7      	b.n	80013fa <LAN8742_RegisterBusIO+0x22>
 800140a:	bf00      	nop

0800140c <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 800140c:	b570      	push	{r4, r5, r6, lr}
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 800140e:	2300      	movs	r3, #0
 {
 8001410:	b082      	sub	sp, #8
   int32_t status = LAN8742_STATUS_OK;
   
   if(pObj->Is_Initialized == 0)
 8001412:	6844      	ldr	r4, [r0, #4]
 {
 8001414:	4605      	mov	r5, r0
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8001416:	9301      	str	r3, [sp, #4]
   if(pObj->Is_Initialized == 0)
 8001418:	2c00      	cmp	r4, #0
 800141a:	d146      	bne.n	80014aa <LAN8742_Init+0x9e>
   {
     if(pObj->IO.Init != 0)
 800141c:	6883      	ldr	r3, [r0, #8]
 800141e:	b103      	cbz	r3, 8001422 <LAN8742_Init+0x16>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8001420:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8001422:	2320      	movs	r3, #32
   int32_t status = LAN8742_STATUS_OK;
 8001424:	2600      	movs	r6, #0
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8001426:	602b      	str	r3, [r5, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001428:	e007      	b.n	800143a <LAN8742_Init+0x2e>
         /* Can't read from this device address 
            continue with next address */
         continue;
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 800142a:	9b01      	ldr	r3, [sp, #4]
 800142c:	f003 031f 	and.w	r3, r3, #31
 8001430:	42a3      	cmp	r3, r4
 8001432:	d016      	beq.n	8001462 <LAN8742_Init+0x56>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001434:	3401      	adds	r4, #1
 8001436:	2c20      	cmp	r4, #32
 8001438:	d00b      	beq.n	8001452 <LAN8742_Init+0x46>
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 800143a:	4620      	mov	r0, r4
 800143c:	696b      	ldr	r3, [r5, #20]
 800143e:	aa01      	add	r2, sp, #4
 8001440:	2112      	movs	r1, #18
 8001442:	4798      	blx	r3
 8001444:	2800      	cmp	r0, #0
 8001446:	daf0      	bge.n	800142a <LAN8742_Init+0x1e>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001448:	3401      	adds	r4, #1
         status = LAN8742_STATUS_READ_ERROR;
 800144a:	f06f 0604 	mvn.w	r6, #4
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 800144e:	2c20      	cmp	r4, #32
 8001450:	d1f3      	bne.n	800143a <LAN8742_Init+0x2e>
         status = LAN8742_STATUS_OK;
         break;
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8001452:	682c      	ldr	r4, [r5, #0]
 8001454:	2c1f      	cmp	r4, #31
 8001456:	d937      	bls.n	80014c8 <LAN8742_Init+0xbc>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8001458:	f06f 0602 	mvn.w	r6, #2
     }
     pObj->Is_Initialized = 1;
   }
   
   return status;
 }
 800145c:	4630      	mov	r0, r6
 800145e:	b002      	add	sp, #8
 8001460:	bd70      	pop	{r4, r5, r6, pc}
         pObj->DevAddr = addr;
 8001462:	602c      	str	r4, [r5, #0]
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8001464:	692b      	ldr	r3, [r5, #16]
 8001466:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800146a:	4620      	mov	r0, r4
 800146c:	2100      	movs	r1, #0
 800146e:	4798      	blx	r3
 8001470:	2800      	cmp	r0, #0
 8001472:	db2c      	blt.n	80014ce <LAN8742_Init+0xc2>
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8001474:	696b      	ldr	r3, [r5, #20]
 8001476:	aa01      	add	r2, sp, #4
 8001478:	2100      	movs	r1, #0
 800147a:	6828      	ldr	r0, [r5, #0]
 800147c:	4798      	blx	r3
 800147e:	2800      	cmp	r0, #0
 8001480:	db2b      	blt.n	80014da <LAN8742_Init+0xce>
           tickstart = pObj->IO.GetTick();
 8001482:	69ab      	ldr	r3, [r5, #24]
 8001484:	4798      	blx	r3
 8001486:	4604      	mov	r4, r0
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001488:	e00c      	b.n	80014a4 <LAN8742_Init+0x98>
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 800148a:	69ab      	ldr	r3, [r5, #24]
 800148c:	4798      	blx	r3
 800148e:	1b00      	subs	r0, r0, r4
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8001490:	aa01      	add	r2, sp, #4
 8001492:	2100      	movs	r1, #0
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8001494:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8001498:	d81c      	bhi.n	80014d4 <LAN8742_Init+0xc8>
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 800149a:	696b      	ldr	r3, [r5, #20]
 800149c:	6828      	ldr	r0, [r5, #0]
 800149e:	4798      	blx	r3
 80014a0:	2800      	cmp	r0, #0
 80014a2:	db1a      	blt.n	80014da <LAN8742_Init+0xce>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 80014a4:	9b01      	ldr	r3, [sp, #4]
 80014a6:	041b      	lsls	r3, r3, #16
 80014a8:	d4ef      	bmi.n	800148a <LAN8742_Init+0x7e>
     tickstart =  pObj->IO.GetTick();
 80014aa:	69ab      	ldr	r3, [r5, #24]
 80014ac:	4798      	blx	r3
 80014ae:	4604      	mov	r4, r0
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 80014b0:	69ab      	ldr	r3, [r5, #24]
 80014b2:	4798      	blx	r3
 80014b4:	1b03      	subs	r3, r0, r4
 80014b6:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80014ba:	d9f9      	bls.n	80014b0 <LAN8742_Init+0xa4>
     pObj->Is_Initialized = 1;
 80014bc:	2301      	movs	r3, #1
 80014be:	2600      	movs	r6, #0
 80014c0:	606b      	str	r3, [r5, #4]
 }
 80014c2:	4630      	mov	r0, r6
 80014c4:	b002      	add	sp, #8
 80014c6:	bd70      	pop	{r4, r5, r6, pc}
     if(status == LAN8742_STATUS_OK)
 80014c8:	2e00      	cmp	r6, #0
 80014ca:	d1fa      	bne.n	80014c2 <LAN8742_Init+0xb6>
 80014cc:	e7ca      	b.n	8001464 <LAN8742_Init+0x58>
         status = LAN8742_STATUS_WRITE_ERROR;
 80014ce:	f06f 0603 	mvn.w	r6, #3
 80014d2:	e7f6      	b.n	80014c2 <LAN8742_Init+0xb6>
               status = LAN8742_STATUS_RESET_TIMEOUT;
 80014d4:	f06f 0601 	mvn.w	r6, #1
   return status;
 80014d8:	e7f3      	b.n	80014c2 <LAN8742_Init+0xb6>
           status = LAN8742_STATUS_READ_ERROR;
 80014da:	f06f 0604 	mvn.w	r6, #4
 80014de:	e7f0      	b.n	80014c2 <LAN8742_Init+0xb6>

080014e0 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 80014e0:	b530      	push	{r4, r5, lr}
  uint32_t readval = 0;
 80014e2:	2500      	movs	r5, #0
{
 80014e4:	b083      	sub	sp, #12
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80014e6:	6943      	ldr	r3, [r0, #20]
{
 80014e8:	4604      	mov	r4, r0
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80014ea:	aa01      	add	r2, sp, #4
 80014ec:	2101      	movs	r1, #1
 80014ee:	6800      	ldr	r0, [r0, #0]
  uint32_t readval = 0;
 80014f0:	9501      	str	r5, [sp, #4]
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80014f2:	4798      	blx	r3
 80014f4:	42a8      	cmp	r0, r5
 80014f6:	db3d      	blt.n	8001574 <LAN8742_GetLinkState+0x94>
  {
    return LAN8742_STATUS_READ_ERROR;
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80014f8:	6963      	ldr	r3, [r4, #20]
 80014fa:	aa01      	add	r2, sp, #4
 80014fc:	2101      	movs	r1, #1
 80014fe:	6820      	ldr	r0, [r4, #0]
 8001500:	4798      	blx	r3
 8001502:	2800      	cmp	r0, #0
 8001504:	db36      	blt.n	8001574 <LAN8742_GetLinkState+0x94>
  {
    return LAN8742_STATUS_READ_ERROR;
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8001506:	9b01      	ldr	r3, [sp, #4]
 8001508:	075b      	lsls	r3, r3, #29
 800150a:	d52a      	bpl.n	8001562 <LAN8742_GetLinkState+0x82>
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 800150c:	6963      	ldr	r3, [r4, #20]
 800150e:	aa01      	add	r2, sp, #4
 8001510:	4629      	mov	r1, r5
 8001512:	6820      	ldr	r0, [r4, #0]
 8001514:	4798      	blx	r3
 8001516:	2800      	cmp	r0, #0
 8001518:	db2c      	blt.n	8001574 <LAN8742_GetLinkState+0x94>
  {
    return LAN8742_STATUS_READ_ERROR;
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 800151a:	9b01      	ldr	r3, [sp, #4]
 800151c:	04dd      	lsls	r5, r3, #19
 800151e:	d514      	bpl.n	800154a <LAN8742_GetLinkState+0x6a>
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8001520:	6963      	ldr	r3, [r4, #20]
 8001522:	aa01      	add	r2, sp, #4
 8001524:	211f      	movs	r1, #31
 8001526:	6820      	ldr	r0, [r4, #0]
 8001528:	4798      	blx	r3
 800152a:	2800      	cmp	r0, #0
 800152c:	db22      	blt.n	8001574 <LAN8742_GetLinkState+0x94>
    {
      return LAN8742_STATUS_READ_ERROR;
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 800152e:	9b01      	ldr	r3, [sp, #4]
 8001530:	04da      	lsls	r2, r3, #19
 8001532:	d51d      	bpl.n	8001570 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8001534:	f003 031c 	and.w	r3, r3, #28
 8001538:	2b18      	cmp	r3, #24
 800153a:	d017      	beq.n	800156c <LAN8742_GetLinkState+0x8c>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 800153c:	2b08      	cmp	r3, #8
 800153e:	d013      	beq.n	8001568 <LAN8742_GetLinkState+0x88>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8001540:	2b14      	cmp	r3, #20
 8001542:	d10b      	bne.n	800155c <LAN8742_GetLinkState+0x7c>
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001544:	2004      	movs	r0, #4
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
    }				
  }
}
 8001546:	b003      	add	sp, #12
 8001548:	bd30      	pop	{r4, r5, pc}
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 800154a:	f403 5204 	and.w	r2, r3, #8448	; 0x2100
 800154e:	f5b2 5f04 	cmp.w	r2, #8448	; 0x2100
 8001552:	d00b      	beq.n	800156c <LAN8742_GetLinkState+0x8c>
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8001554:	0498      	lsls	r0, r3, #18
 8001556:	d407      	bmi.n	8001568 <LAN8742_GetLinkState+0x88>
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8001558:	05d9      	lsls	r1, r3, #23
 800155a:	d4f3      	bmi.n	8001544 <LAN8742_GetLinkState+0x64>
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800155c:	2005      	movs	r0, #5
}
 800155e:	b003      	add	sp, #12
 8001560:	bd30      	pop	{r4, r5, pc}
    return LAN8742_STATUS_LINK_DOWN;    
 8001562:	2001      	movs	r0, #1
}
 8001564:	b003      	add	sp, #12
 8001566:	bd30      	pop	{r4, r5, pc}
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001568:	2003      	movs	r0, #3
 800156a:	e7f8      	b.n	800155e <LAN8742_GetLinkState+0x7e>
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800156c:	2002      	movs	r0, #2
 800156e:	e7f6      	b.n	800155e <LAN8742_GetLinkState+0x7e>
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8001570:	2006      	movs	r0, #6
 8001572:	e7f4      	b.n	800155e <LAN8742_GetLinkState+0x7e>
    return LAN8742_STATUS_READ_ERROR;
 8001574:	f06f 0004 	mvn.w	r0, #4
 8001578:	e7f1      	b.n	800155e <LAN8742_GetLinkState+0x7e>
 800157a:	bf00      	nop

0800157c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800157c:	b510      	push	{r4, lr}
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800157e:	2003      	movs	r0, #3
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001580:	4c12      	ldr	r4, [pc, #72]	; (80015cc <HAL_Init+0x50>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001582:	f000 f84d 	bl	8001620 <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001586:	f001 fd71 	bl	800306c <HAL_RCC_GetSysClockFreq>
 800158a:	4b11      	ldr	r3, [pc, #68]	; (80015d0 <HAL_Init+0x54>)
 800158c:	4911      	ldr	r1, [pc, #68]	; (80015d4 <HAL_Init+0x58>)
 800158e:	699a      	ldr	r2, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001590:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001592:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001596:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800159a:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800159c:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800159e:	f002 021f 	and.w	r2, r2, #31
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80015a2:	490d      	ldr	r1, [pc, #52]	; (80015d8 <HAL_Init+0x5c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80015a4:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80015a8:	40d0      	lsrs	r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80015aa:	fa20 f303 	lsr.w	r3, r0, r3
  SystemCoreClock = common_system_clock;
 80015ae:	6008      	str	r0, [r1, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80015b0:	200f      	movs	r0, #15
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80015b2:	6023      	str	r3, [r4, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80015b4:	f7ff fdba 	bl	800112c <HAL_InitTick>
 80015b8:	b110      	cbz	r0, 80015c0 <HAL_Init+0x44>
  {
    return HAL_ERROR;
 80015ba:	2401      	movs	r4, #1
  /* Init the low level hardware */
  HAL_MspInit();

  /* Return function status */
  return HAL_OK;
}
 80015bc:	4620      	mov	r0, r4
 80015be:	bd10      	pop	{r4, pc}
 80015c0:	4604      	mov	r4, r0
  HAL_MspInit();
 80015c2:	f7ff fd8d 	bl	80010e0 <HAL_MspInit>
}
 80015c6:	4620      	mov	r0, r4
 80015c8:	bd10      	pop	{r4, pc}
 80015ca:	bf00      	nop
 80015cc:	24000004 	.word	0x24000004
 80015d0:	58024400 	.word	0x58024400
 80015d4:	0800f6ec 	.word	0x0800f6ec
 80015d8:	24000000 	.word	0x24000000

080015dc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 80015dc:	4a03      	ldr	r2, [pc, #12]	; (80015ec <HAL_IncTick+0x10>)
 80015de:	4b04      	ldr	r3, [pc, #16]	; (80015f0 <HAL_IncTick+0x14>)
 80015e0:	6811      	ldr	r1, [r2, #0]
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	440b      	add	r3, r1
 80015e6:	6013      	str	r3, [r2, #0]
}
 80015e8:	4770      	bx	lr
 80015ea:	bf00      	nop
 80015ec:	24000100 	.word	0x24000100
 80015f0:	24000008 	.word	0x24000008

080015f4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80015f4:	4b01      	ldr	r3, [pc, #4]	; (80015fc <HAL_GetTick+0x8>)
 80015f6:	6818      	ldr	r0, [r3, #0]
}
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop
 80015fc:	24000100 	.word	0x24000100

08001600 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 8001600:	4b01      	ldr	r3, [pc, #4]	; (8001608 <HAL_GetREVID+0x8>)
 8001602:	6818      	ldr	r0, [r3, #0]
}
 8001604:	0c00      	lsrs	r0, r0, #16
 8001606:	4770      	bx	lr
 8001608:	5c001000 	.word	0x5c001000

0800160c <HAL_SYSCFG_ETHInterfaceSelect>:
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 800160c:	4a03      	ldr	r2, [pc, #12]	; (800161c <HAL_SYSCFG_ETHInterfaceSelect+0x10>)
 800160e:	6853      	ldr	r3, [r2, #4]
 8001610:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 8001614:	4318      	orrs	r0, r3
 8001616:	6050      	str	r0, [r2, #4]
}
 8001618:	4770      	bx	lr
 800161a:	bf00      	nop
 800161c:	58000400 	.word	0x58000400

08001620 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001620:	4906      	ldr	r1, [pc, #24]	; (800163c <HAL_NVIC_SetPriorityGrouping+0x1c>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001622:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001626:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
 8001628:	4b05      	ldr	r3, [pc, #20]	; (8001640 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800162a:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800162c:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001630:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001634:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
 8001636:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001638:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800163a:	4770      	bx	lr
 800163c:	e000ed00 	.word	0xe000ed00
 8001640:	05fa0000 	.word	0x05fa0000

08001644 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001644:	4b1b      	ldr	r3, [pc, #108]	; (80016b4 <HAL_NVIC_SetPriority+0x70>)
 8001646:	68db      	ldr	r3, [r3, #12]
 8001648:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800164c:	b500      	push	{lr}
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800164e:	f1c3 0e07 	rsb	lr, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001652:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001656:	f1be 0f04 	cmp.w	lr, #4
 800165a:	bf28      	it	cs
 800165c:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001660:	f1bc 0f06 	cmp.w	ip, #6
 8001664:	d91a      	bls.n	800169c <HAL_NVIC_SetPriority+0x58>
 8001666:	3b03      	subs	r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001668:	f04f 3cff 	mov.w	ip, #4294967295
 800166c:	fa0c fc03 	lsl.w	ip, ip, r3
 8001670:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001674:	f04f 3cff 	mov.w	ip, #4294967295
  if ((int32_t)(IRQn) >= 0)
 8001678:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800167a:	fa0c fc0e 	lsl.w	ip, ip, lr
 800167e:	ea21 010c 	bic.w	r1, r1, ip
 8001682:	fa01 f103 	lsl.w	r1, r1, r3
 8001686:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 800168a:	db0a      	blt.n	80016a2 <HAL_NVIC_SetPriority+0x5e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800168c:	0109      	lsls	r1, r1, #4
 800168e:	4b0a      	ldr	r3, [pc, #40]	; (80016b8 <HAL_NVIC_SetPriority+0x74>)
 8001690:	b2c9      	uxtb	r1, r1
 8001692:	4403      	add	r3, r0
 8001694:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001698:	f85d fb04 	ldr.w	pc, [sp], #4
 800169c:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800169e:	4613      	mov	r3, r2
 80016a0:	e7e8      	b.n	8001674 <HAL_NVIC_SetPriority+0x30>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016a2:	f000 000f 	and.w	r0, r0, #15
 80016a6:	0109      	lsls	r1, r1, #4
 80016a8:	4b04      	ldr	r3, [pc, #16]	; (80016bc <HAL_NVIC_SetPriority+0x78>)
 80016aa:	b2c9      	uxtb	r1, r1
 80016ac:	4403      	add	r3, r0
 80016ae:	7619      	strb	r1, [r3, #24]
 80016b0:	f85d fb04 	ldr.w	pc, [sp], #4
 80016b4:	e000ed00 	.word	0xe000ed00
 80016b8:	e000e100 	.word	0xe000e100
 80016bc:	e000ecfc 	.word	0xe000ecfc

080016c0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80016c0:	2800      	cmp	r0, #0
 80016c2:	db07      	blt.n	80016d4 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016c4:	2301      	movs	r3, #1
 80016c6:	f000 011f 	and.w	r1, r0, #31
 80016ca:	4a03      	ldr	r2, [pc, #12]	; (80016d8 <HAL_NVIC_EnableIRQ+0x18>)
 80016cc:	0940      	lsrs	r0, r0, #5
 80016ce:	408b      	lsls	r3, r1
 80016d0:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80016d4:	4770      	bx	lr
 80016d6:	bf00      	nop
 80016d8:	e000e100 	.word	0xe000e100

080016dc <HAL_MPU_Disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80016dc:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80016e0:	4b04      	ldr	r3, [pc, #16]	; (80016f4 <HAL_MPU_Disable+0x18>)

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80016e2:	2100      	movs	r1, #0
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80016e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016e6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80016ea:	625a      	str	r2, [r3, #36]	; 0x24
  MPU->CTRL = 0;
 80016ec:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
}
 80016f0:	4770      	bx	lr
 80016f2:	bf00      	nop
 80016f4:	e000ed00 	.word	0xe000ed00

080016f8 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80016f8:	4b06      	ldr	r3, [pc, #24]	; (8001714 <HAL_MPU_Enable+0x1c>)
 80016fa:	f040 0001 	orr.w	r0, r0, #1
 80016fe:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001702:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001704:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001708:	625a      	str	r2, [r3, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800170a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800170e:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001712:	4770      	bx	lr
 8001714:	e000ed00 	.word	0xe000ed00

08001718 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001718:	4a17      	ldr	r2, [pc, #92]	; (8001778 <HAL_MPU_ConfigRegion+0x60>)
 800171a:	7843      	ldrb	r3, [r0, #1]
 800171c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  if ((MPU_Init->Enable) != 0UL)
 8001720:	7801      	ldrb	r1, [r0, #0]
 8001722:	b321      	cbz	r1, 800176e <HAL_MPU_ConfigRegion+0x56>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8001724:	6843      	ldr	r3, [r0, #4]
{
 8001726:	b500      	push	{lr}
    MPU->RBAR = MPU_Init->BaseAddress;
 8001728:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800172c:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800172e:	f890 c00c 	ldrb.w	ip, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001732:	061b      	lsls	r3, r3, #24
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001734:	f890 e00f 	ldrb.w	lr, [r0, #15]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001738:	ea43 730c 	orr.w	r3, r3, ip, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800173c:	f890 c00a 	ldrb.w	ip, [r0, #10]
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001740:	430b      	orrs	r3, r1
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001742:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001744:	ea43 43cc 	orr.w	r3, r3, ip, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001748:	f890 c00d 	ldrb.w	ip, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800174c:	ea43 438c 	orr.w	r3, r3, ip, lsl #18
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001750:	f890 c009 	ldrb.w	ip, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001754:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 8001758:	7a01      	ldrb	r1, [r0, #8]
 800175a:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 800175e:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 8001762:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001766:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 800176a:	f85d fb04 	ldr.w	pc, [sp], #4
    MPU->RBAR = 0x00;
 800176e:	f8c2 109c 	str.w	r1, [r2, #156]	; 0x9c
    MPU->RASR = 0x00;
 8001772:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
 8001776:	4770      	bx	lr
 8001778:	e000ed00 	.word	0xe000ed00

0800177c <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800177c:	b430      	push	{r4, r5}
               macconf->BackOffLimit |
               ((uint32_t)macconf->DeferralCheck << 4) |
               macconf->PreambleLength);

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800177e:	688b      	ldr	r3, [r1, #8]
 8001780:	680d      	ldr	r5, [r1, #0]
 8001782:	694c      	ldr	r4, [r1, #20]
 8001784:	432b      	orrs	r3, r5
 8001786:	6802      	ldr	r2, [r0, #0]
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001788:	f891 c011 	ldrb.w	ip, [r1, #17]
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800178c:	4323      	orrs	r3, r4
 800178e:	698c      	ldr	r4, [r1, #24]
 8001790:	6810      	ldr	r0, [r2, #0]
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001792:	fabc fc8c 	clz	ip, ip
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001796:	4323      	orrs	r3, r4
 8001798:	6a4c      	ldr	r4, [r1, #36]	; 0x24
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800179a:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
               macconf->GiantPacketSizeLimit);

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800179e:	4d52      	ldr	r5, [pc, #328]	; (80018e8 <ETH_SetMACConfig+0x16c>)
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80017a0:	4323      	orrs	r3, r4
 80017a2:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 80017a4:	4323      	orrs	r3, r4
 80017a6:	4c51      	ldr	r4, [pc, #324]	; (80018ec <ETH_SetMACConfig+0x170>)
 80017a8:	4020      	ands	r0, r4
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80017aa:	790c      	ldrb	r4, [r1, #4]
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80017ac:	4303      	orrs	r3, r0
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80017ae:	7b48      	ldrb	r0, [r1, #13]
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80017b0:	ea43 63c4 	orr.w	r3, r3, r4, lsl #27
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80017b4:	7b0c      	ldrb	r4, [r1, #12]
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80017b6:	ea43 53c4 	orr.w	r3, r3, r4, lsl #23
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80017ba:	7b8c      	ldrb	r4, [r1, #14]
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80017bc:	ea43 5380 	orr.w	r3, r3, r0, lsl #22
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80017c0:	7bc8      	ldrb	r0, [r1, #15]
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80017c2:	ea43 5344 	orr.w	r3, r3, r4, lsl #21
               ((uint32_t)macconf->JumboPacket << 16) |
 80017c6:	7c8c      	ldrb	r4, [r1, #18]
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80017c8:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
               ((uint32_t)macconf->LoopbackMode << 12) |
 80017cc:	7f08      	ldrb	r0, [r1, #28]
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80017ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80017d2:	7f4c      	ldrb	r4, [r1, #29]
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80017d4:	ea43 3300 	orr.w	r3, r3, r0, lsl #12
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80017d8:	7fc8      	ldrb	r0, [r1, #31]
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80017da:	ea43 23c4 	orr.w	r3, r3, r4, lsl #11
               ((uint32_t)macconf->DeferralCheck << 4) |
 80017de:	f891 4028 	ldrb.w	r4, [r1, #40]	; 0x28
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80017e2:	ea43 2340 	orr.w	r3, r3, r0, lsl #9
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80017e6:	7c08      	ldrb	r0, [r1, #16]
 80017e8:	fab0 f080 	clz	r0, r0
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80017ec:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80017f0:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80017f2:	0940      	lsrs	r0, r0, #5
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80017f4:	ea43 43c0 	orr.w	r3, r3, r0, lsl #19
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80017f8:	7f88      	ldrb	r0, [r1, #30]
 80017fa:	fab0 f080 	clz	r0, r0
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80017fe:	ea43 434c 	orr.w	r3, r3, ip, lsl #17
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001802:	0940      	lsrs	r0, r0, #5
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001804:	ea43 2380 	orr.w	r3, r3, r0, lsl #10
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001808:	f891 0020 	ldrb.w	r0, [r1, #32]
 800180c:	fab0 f080 	clz	r0, r0
 8001810:	0940      	lsrs	r0, r0, #5
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001812:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001816:	6b48      	ldr	r0, [r1, #52]	; 0x34
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001818:	6013      	str	r3, [r2, #0]
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800181a:	6853      	ldr	r3, [r2, #4]
 800181c:	402b      	ands	r3, r5
               macconf->PauseLowThreshold |
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
               (macconf->PauseTime << 16));

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 800181e:	f64f 750d 	movw	r5, #65293	; 0xff0d
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001822:	ea43 6344 	orr.w	r3, r3, r4, lsl #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001826:	f891 4038 	ldrb.w	r4, [r1, #56]	; 0x38
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800182a:	4303      	orrs	r3, r0
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800182c:	f891 0030 	ldrb.w	r0, [r1, #48]	; 0x30
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001830:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001834:	f891 4031 	ldrb.w	r4, [r1, #49]	; 0x31
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001838:	ea43 4380 	orr.w	r3, r3, r0, lsl #18
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 800183c:	f891 0032 	ldrb.w	r0, [r1, #50]	; 0x32
 8001840:	fab0 f080 	clz	r0, r0
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001844:	ea43 4344 	orr.w	r3, r3, r4, lsl #17
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8001848:	0940      	lsrs	r0, r0, #5
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800184a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800184e:	4828      	ldr	r0, [pc, #160]	; (80018f0 <ETH_SetMACConfig+0x174>)
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001850:	6053      	str	r3, [r2, #4]
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8001852:	68d3      	ldr	r3, [r2, #12]
               (macconf->PauseTime << 16));
 8001854:	6c8c      	ldr	r4, [r1, #72]	; 0x48
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8001856:	4018      	ands	r0, r3
 8001858:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 800185a:	4318      	orrs	r0, r3
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800185c:	f891 3040 	ldrb.w	r3, [r1, #64]	; 0x40
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8001860:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8001864:	60d0      	str	r0, [r2, #12]
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001866:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8001868:	6d08      	ldr	r0, [r1, #80]	; 0x50
 800186a:	402b      	ands	r3, r5
 800186c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001870:	f891 4054 	ldrb.w	r4, [r1, #84]	; 0x54
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001874:	4303      	orrs	r3, r0
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8001876:	f891 004c 	ldrb.w	r0, [r1, #76]	; 0x4c
 800187a:	fab0 f080 	clz	r0, r0
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 800187e:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8001882:	0940      	lsrs	r0, r0, #5
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001884:	ea43 13c0 	orr.w	r3, r3, r0, lsl #7
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001888:	e9d1 5416 	ldrd	r5, r4, [r1, #88]	; 0x58
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 800188c:	6713      	str	r3, [r2, #112]	; 0x70
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800188e:	f8d2 0090 	ldr.w	r0, [r2, #144]	; 0x90
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001892:	f891 3056 	ldrb.w	r3, [r1, #86]	; 0x56
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8001896:	f020 0003 	bic.w	r0, r0, #3
 800189a:	4303      	orrs	r3, r0
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 800189c:	f891 0055 	ldrb.w	r0, [r1, #85]	; 0x55
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80018a0:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
 80018a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80018a8:	f8d2 3d00 	ldr.w	r3, [r2, #3328]	; 0xd00
 80018ac:	f023 0372 	bic.w	r3, r3, #114	; 0x72
 80018b0:	432b      	orrs	r3, r5
 80018b2:	f8c2 3d00 	str.w	r3, [r2, #3328]	; 0xd00
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80018b6:	f8d2 3d30 	ldr.w	r3, [r2, #3376]	; 0xd30
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80018ba:	f891 0061 	ldrb.w	r0, [r1, #97]	; 0x61
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80018be:	f023 037b 	bic.w	r3, r3, #123	; 0x7b
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80018c2:	f891 c062 	ldrb.w	ip, [r1, #98]	; 0x62
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80018c6:	4323      	orrs	r3, r4
 80018c8:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80018cc:	f891 0060 	ldrb.w	r0, [r1, #96]	; 0x60
 80018d0:	fab0 f180 	clz	r1, r0
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80018d4:	ea43 03cc 	orr.w	r3, r3, ip, lsl #3
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80018d8:	0949      	lsrs	r1, r1, #5
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80018da:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
}
 80018de:	bc30      	pop	{r4, r5}
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80018e0:	f8c2 3d30 	str.w	r3, [r2, #3376]	; 0xd30
}
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop
 80018e8:	c0f88000 	.word	0xc0f88000
 80018ec:	00048083 	.word	0x00048083
 80018f0:	fffffef0 	.word	0xfffffef0

080018f4 <ETH_SetDMAConfig>:
static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80018f4:	6803      	ldr	r3, [r0, #0]
 80018f6:	4a1e      	ldr	r2, [pc, #120]	; (8001970 <ETH_SetDMAConfig+0x7c>)
 80018f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018fc:	6808      	ldr	r0, [r1, #0]
{
 80018fe:	b410      	push	{r4}
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8001900:	681c      	ldr	r4, [r3, #0]
 8001902:	4022      	ands	r2, r4
 8001904:	4302      	orrs	r2, r0
 8001906:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
               dmaconf->BurstMode |
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001908:	7b0a      	ldrb	r2, [r1, #12]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800190a:	790c      	ldrb	r4, [r1, #4]
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 800190c:	03d2      	lsls	r2, r2, #15

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800190e:	6858      	ldr	r0, [r3, #4]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001910:	ea42 3204 	orr.w	r2, r2, r4, lsl #12
 8001914:	688c      	ldr	r4, [r1, #8]
 8001916:	4322      	orrs	r2, r4
  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8001918:	4c16      	ldr	r4, [pc, #88]	; (8001974 <ETH_SetDMAConfig+0x80>)
 800191a:	4004      	ands	r4, r0

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800191c:	6a08      	ldr	r0, [r1, #32]
  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800191e:	4322      	orrs	r2, r4
 8001920:	605a      	str	r2, [r3, #4]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001922:	7b4a      	ldrb	r2, [r1, #13]
               dmaconf->MaximumSegmentSize);

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001924:	f8d3 4100 	ldr.w	r4, [r3, #256]	; 0x100
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001928:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 800192c:	4812      	ldr	r0, [pc, #72]	; (8001978 <ETH_SetDMAConfig+0x84>)
 800192e:	4020      	ands	r0, r4
 8001930:	4302      	orrs	r2, r0
 8001932:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8001936:	7f4a      	ldrb	r2, [r1, #29]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8001938:	7d0c      	ldrb	r4, [r1, #20]
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 800193a:	0312      	lsls	r2, r2, #12

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800193c:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
  dmaregval = (dmaconf->TxDMABurstLength |
 8001940:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
 8001944:	690c      	ldr	r4, [r1, #16]
 8001946:	4322      	orrs	r2, r4
  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8001948:	4c0c      	ldr	r4, [pc, #48]	; (800197c <ETH_SetDMAConfig+0x88>)
 800194a:	4004      	ands	r4, r0

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800194c:	6988      	ldr	r0, [r1, #24]
  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800194e:	4322      	orrs	r2, r4
 8001950:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
               dmaconf->RxDMABurstLength);

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001954:	f8d3 4108 	ldr.w	r4, [r3, #264]	; 0x108
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001958:	7f0a      	ldrb	r2, [r1, #28]
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 800195a:	4909      	ldr	r1, [pc, #36]	; (8001980 <ETH_SetDMAConfig+0x8c>)
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800195c:	ea40 72c2 	orr.w	r2, r0, r2, lsl #31
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001960:	4021      	ands	r1, r4
}
 8001962:	f85d 4b04 	ldr.w	r4, [sp], #4
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001966:	430a      	orrs	r2, r1
 8001968:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}
 800196c:	4770      	bx	lr
 800196e:	bf00      	nop
 8001970:	ffff87fd 	.word	0xffff87fd
 8001974:	ffff2ffe 	.word	0xffff2ffe
 8001978:	fffec000 	.word	0xfffec000
 800197c:	ffc0efef 	.word	0xffc0efef
 8001980:	7fc0ffff 	.word	0x7fc0ffff

08001984 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8001984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8001988:	6a84      	ldr	r4, [r0, #40]	; 0x28
{
 800198a:	b083      	sub	sp, #12
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
  uint32_t idx;
  uint32_t descnbr = 0;
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 800198c:	688e      	ldr	r6, [r1, #8]
 800198e:	eb00 0984 	add.w	r9, r0, r4, lsl #2
{
 8001992:	9201      	str	r2, [sp, #4]
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8001994:	f8d9 3018 	ldr.w	r3, [r9, #24]
  uint32_t           bd_count = 0;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8001998:	68da      	ldr	r2, [r3, #12]
 800199a:	2a00      	cmp	r2, #0
 800199c:	f2c0 8124 	blt.w	8001be8 <ETH_Prepare_Tx_Descriptors+0x264>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80019a0:	f8d9 202c 	ldr.w	r2, [r9, #44]	; 0x2c
 80019a4:	2a00      	cmp	r2, #0
 80019a6:	f040 811f 	bne.w	8001be8 <ETH_Prepare_Tx_Descriptors+0x264>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 80019aa:	f8d1 c000 	ldr.w	ip, [r1]
 80019ae:	f01c 0704 	ands.w	r7, ip, #4
 80019b2:	d02d      	beq.n	8001a10 <ETH_Prepare_Tx_Descriptors+0x8c>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 80019b4:	68da      	ldr	r2, [r3, #12]
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);

    /* if inner VLAN is enabled */
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != (uint32_t)RESET)
 80019b6:	f01c 0f08 	tst.w	ip, #8
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 80019ba:	4dae      	ldr	r5, [pc, #696]	; (8001c74 <ETH_Prepare_Tx_Descriptors+0x2f0>)
 80019bc:	ea05 0502 	and.w	r5, r5, r2
 80019c0:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 80019c2:	ea45 0502 	orr.w	r5, r5, r2
 80019c6:	60dd      	str	r5, [r3, #12]
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 80019c8:	68da      	ldr	r2, [r3, #12]
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 80019ca:	6805      	ldr	r5, [r0, #0]
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 80019cc:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80019d0:	60da      	str	r2, [r3, #12]
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 80019d2:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 80019d4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80019d8:	662a      	str	r2, [r5, #96]	; 0x60
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != (uint32_t)RESET)
 80019da:	d019      	beq.n	8001a10 <ETH_Prepare_Tx_Descriptors+0x8c>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 80019dc:	689a      	ldr	r2, [r3, #8]
 80019de:	fa1f fe82 	uxth.w	lr, r2
 80019e2:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80019e4:	ea4e 4202 	orr.w	r2, lr, r2, lsl #16
 80019e8:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 80019ea:	68da      	ldr	r2, [r3, #12]
 80019ec:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80019f0:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 80019f2:	68da      	ldr	r2, [r3, #12]
 80019f4:	f422 2e40 	bic.w	lr, r2, #786432	; 0xc0000
 80019f8:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 80019fa:	ea4e 0202 	orr.w	r2, lr, r2
 80019fe:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 8001a00:	6e6a      	ldr	r2, [r5, #100]	; 0x64
 8001a02:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001a06:	666a      	str	r2, [r5, #100]	; 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 8001a08:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 8001a0a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001a0e:	652a      	str	r2, [r5, #80]	; 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8001a10:	f01c 0810 	ands.w	r8, ip, #16
 8001a14:	d009      	beq.n	8001a2a <ETH_Prepare_Tx_Descriptors+0xa6>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 8001a16:	689a      	ldr	r2, [r3, #8]
 8001a18:	4d97      	ldr	r5, [pc, #604]	; (8001c78 <ETH_Prepare_Tx_Descriptors+0x2f4>)
 8001a1a:	4015      	ands	r5, r2
 8001a1c:	698a      	ldr	r2, [r1, #24]
 8001a1e:	4315      	orrs	r5, r2
 8001a20:	609d      	str	r5, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 8001a22:	68da      	ldr	r2, [r3, #12]
 8001a24:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001a28:	60da      	str	r2, [r3, #12]
  }

  if ((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8001a2a:	f01c 0f14 	tst.w	ip, #20
 8001a2e:	f040 80df 	bne.w	8001bf0 <ETH_Prepare_Tx_Descriptors+0x26c>
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8001a32:	4622      	mov	r2, r4
 8001a34:	f04f 0e01 	mov.w	lr, #1
  /***************************************************************************/

  descnbr += 1U;

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8001a38:	6835      	ldr	r5, [r6, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8001a3a:	f8df a23c 	ldr.w	sl, [pc, #572]	; 8001c78 <ETH_Prepare_Tx_Descriptors+0x2f4>
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8001a3e:	601d      	str	r5, [r3, #0]
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8001a40:	689d      	ldr	r5, [r3, #8]
 8001a42:	ea05 0a0a 	and.w	sl, r5, sl
 8001a46:	6875      	ldr	r5, [r6, #4]
 8001a48:	ea4a 0505 	orr.w	r5, sl, r5
 8001a4c:	609d      	str	r5, [r3, #8]

  if (txbuffer->next != NULL)
 8001a4e:	68b5      	ldr	r5, [r6, #8]
 8001a50:	2d00      	cmp	r5, #0
 8001a52:	f000 8133 	beq.w	8001cbc <ETH_Prepare_Tx_Descriptors+0x338>
  {
    txbuffer = txbuffer->next;
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8001a56:	682e      	ldr	r6, [r5, #0]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8001a58:	f8df a220 	ldr.w	sl, [pc, #544]	; 8001c7c <ETH_Prepare_Tx_Descriptors+0x2f8>
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8001a5c:	605e      	str	r6, [r3, #4]
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8001a5e:	689e      	ldr	r6, [r3, #8]
 8001a60:	ea06 0a0a 	and.w	sl, r6, sl
 8001a64:	686e      	ldr	r6, [r5, #4]
 8001a66:	ea4a 4606 	orr.w	r6, sl, r6, lsl #16
 8001a6a:	609e      	str	r6, [r3, #8]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 8001a6c:	68de      	ldr	r6, [r3, #12]
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8001a6e:	f1b8 0f00 	cmp.w	r8, #0
 8001a72:	f000 80e0 	beq.w	8001c36 <ETH_Prepare_Tx_Descriptors+0x2b2>
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 8001a76:	f426 0cf0 	bic.w	ip, r6, #7864320	; 0x780000
 8001a7a:	6a0e      	ldr	r6, [r1, #32]
 8001a7c:	ea4c 46c6 	orr.w	r6, ip, r6, lsl #19
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8001a80:	f8df c1fc 	ldr.w	ip, [pc, #508]	; 8001c80 <ETH_Prepare_Tx_Descriptors+0x2fc>
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 8001a84:	60de      	str	r6, [r3, #12]
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8001a86:	68de      	ldr	r6, [r3, #12]
 8001a88:	ea06 0c0c 	and.w	ip, r6, ip
 8001a8c:	69ce      	ldr	r6, [r1, #28]
 8001a8e:	ea4c 0606 	orr.w	r6, ip, r6
 8001a92:	60de      	str	r6, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8001a94:	68de      	ldr	r6, [r3, #12]
 8001a96:	f446 2680 	orr.w	r6, r6, #262144	; 0x40000
 8001a9a:	60de      	str	r6, [r3, #12]
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
    }
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8001a9c:	b12f      	cbz	r7, 8001aaa <ETH_Prepare_Tx_Descriptors+0x126>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 8001a9e:	689f      	ldr	r7, [r3, #8]
 8001aa0:	6a8e      	ldr	r6, [r1, #40]	; 0x28
 8001aa2:	f427 4740 	bic.w	r7, r7, #49152	; 0xc000
 8001aa6:	433e      	orrs	r6, r7
 8001aa8:	609e      	str	r6, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8001aaa:	68de      	ldr	r6, [r3, #12]
 8001aac:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
 8001ab0:	60de      	str	r6, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8001ab2:	68de      	ldr	r6, [r3, #12]
 8001ab4:	f026 4680 	bic.w	r6, r6, #1073741824	; 0x40000000
 8001ab8:	60de      	str	r6, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8001aba:	f3bf 8f5f 	dmb	sy
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8001abe:	68de      	ldr	r6, [r3, #12]
 8001ac0:	f046 4600 	orr.w	r6, r6, #2147483648	; 0x80000000
 8001ac4:	60de      	str	r6, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != (uint32_t)RESET)
 8001ac6:	680e      	ldr	r6, [r1, #0]
 8001ac8:	07b6      	lsls	r6, r6, #30
 8001aca:	d505      	bpl.n	8001ad8 <ETH_Prepare_Tx_Descriptors+0x154>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 8001acc:	68df      	ldr	r7, [r3, #12]
 8001ace:	68ce      	ldr	r6, [r1, #12]
 8001ad0:	f027 7760 	bic.w	r7, r7, #58720256	; 0x3800000
 8001ad4:	433e      	orrs	r6, r7
 8001ad6:	60de      	str	r6, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8001ad8:	f8d5 8008 	ldr.w	r8, [r5, #8]
 8001adc:	f1b8 0f00 	cmp.w	r8, #0
 8001ae0:	f000 80d2 	beq.w	8001c88 <ETH_Prepare_Tx_Descriptors+0x304>
 8001ae4:	f04f 0c00 	mov.w	ip, #0
    txbuffer = txbuffer->next;

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8001ae8:	4d63      	ldr	r5, [pc, #396]	; (8001c78 <ETH_Prepare_Tx_Descriptors+0x2f4>)
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0);
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8001aea:	4e64      	ldr	r6, [pc, #400]	; (8001c7c <ETH_Prepare_Tx_Descriptors+0x2f8>)
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8001aec:	46a2      	mov	sl, r4
 8001aee:	e01d      	b.n	8001b2c <ETH_Prepare_Tx_Descriptors+0x1a8>
 8001af0:	f8df 818c 	ldr.w	r8, [pc, #396]	; 8001c80 <ETH_Prepare_Tx_Descriptors+0x2fc>
 8001af4:	ea04 0808 	and.w	r8, r4, r8
 8001af8:	69cc      	ldr	r4, [r1, #28]
 8001afa:	ea48 0404 	orr.w	r4, r8, r4
 8001afe:	60dc      	str	r4, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8001b00:	68dc      	ldr	r4, [r3, #12]
 8001b02:	f444 2480 	orr.w	r4, r4, #262144	; 0x40000
 8001b06:	60dc      	str	r4, [r3, #12]
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
      }
    }

    bd_count += 1U;
 8001b08:	f10c 0c01 	add.w	ip, ip, #1
 8001b0c:	f3bf 8f5f 	dmb	sy

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8001b10:	68dc      	ldr	r4, [r3, #12]
  while (txbuffer->next != NULL)
 8001b12:	f8d7 8008 	ldr.w	r8, [r7, #8]
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8001b16:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
 8001b1a:	60dc      	str	r4, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8001b1c:	68dc      	ldr	r4, [r3, #12]
 8001b1e:	f024 4480 	bic.w	r4, r4, #1073741824	; 0x40000000
 8001b22:	60dc      	str	r4, [r3, #12]
  while (txbuffer->next != NULL)
 8001b24:	f1b8 0f00 	cmp.w	r8, #0
 8001b28:	f000 80af 	beq.w	8001c8a <ETH_Prepare_Tx_Descriptors+0x306>
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8001b2c:	68dc      	ldr	r4, [r3, #12]
 8001b2e:	eb0e 0b0c 	add.w	fp, lr, ip
 8001b32:	f024 5480 	bic.w	r4, r4, #268435456	; 0x10000000
 8001b36:	60dc      	str	r4, [r3, #12]
    INCR_TX_DESC_INDEX(descidx, 1U);
 8001b38:	1c53      	adds	r3, r2, #1
 8001b3a:	2b03      	cmp	r3, #3
 8001b3c:	bf94      	ite	ls
 8001b3e:	461a      	movls	r2, r3
 8001b40:	3a03      	subhi	r2, #3
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8001b42:	eb00 0782 	add.w	r7, r0, r2, lsl #2
 8001b46:	69bb      	ldr	r3, [r7, #24]
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8001b48:	68dc      	ldr	r4, [r3, #12]
 8001b4a:	f024 5400 	bic.w	r4, r4, #536870912	; 0x20000000
 8001b4e:	60dc      	str	r4, [r3, #12]
    if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 8001b50:	68dc      	ldr	r4, [r3, #12]
 8001b52:	2c00      	cmp	r4, #0
 8001b54:	db30      	blt.n	8001bb8 <ETH_Prepare_Tx_Descriptors+0x234>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8001b56:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 8001b58:	bb74      	cbnz	r4, 8001bb8 <ETH_Prepare_Tx_Descriptors+0x234>
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8001b5a:	f8d8 4000 	ldr.w	r4, [r8]
 8001b5e:	601c      	str	r4, [r3, #0]
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8001b60:	689f      	ldr	r7, [r3, #8]
 8001b62:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8001b66:	402f      	ands	r7, r5
 8001b68:	433c      	orrs	r4, r7
    if (txbuffer->next != NULL)
 8001b6a:	f8d8 7008 	ldr.w	r7, [r8, #8]
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8001b6e:	609c      	str	r4, [r3, #8]
    if (txbuffer->next != NULL)
 8001b70:	2f00      	cmp	r7, #0
 8001b72:	d05a      	beq.n	8001c2a <ETH_Prepare_Tx_Descriptors+0x2a6>
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8001b74:	683c      	ldr	r4, [r7, #0]
 8001b76:	605c      	str	r4, [r3, #4]
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8001b78:	689c      	ldr	r4, [r3, #8]
 8001b7a:	ea04 0806 	and.w	r8, r4, r6
 8001b7e:	687c      	ldr	r4, [r7, #4]
 8001b80:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 8001b84:	609c      	str	r4, [r3, #8]
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8001b86:	f8d1 8000 	ldr.w	r8, [r1]
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8001b8a:	68dc      	ldr	r4, [r3, #12]
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8001b8c:	f018 0f10 	tst.w	r8, #16
 8001b90:	d1ae      	bne.n	8001af0 <ETH_Prepare_Tx_Descriptors+0x16c>
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8001b92:	f8df b0f0 	ldr.w	fp, [pc, #240]	; 8001c84 <ETH_Prepare_Tx_Descriptors+0x300>
      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8001b96:	f018 0f01 	tst.w	r8, #1
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8001b9a:	ea04 0b0b 	and.w	fp, r4, fp
 8001b9e:	684c      	ldr	r4, [r1, #4]
 8001ba0:	ea4b 0404 	orr.w	r4, fp, r4
 8001ba4:	60dc      	str	r4, [r3, #12]
      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8001ba6:	d0af      	beq.n	8001b08 <ETH_Prepare_Tx_Descriptors+0x184>
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8001ba8:	68dc      	ldr	r4, [r3, #12]
 8001baa:	f424 3840 	bic.w	r8, r4, #196608	; 0x30000
 8001bae:	694c      	ldr	r4, [r1, #20]
 8001bb0:	ea48 0404 	orr.w	r4, r8, r4
 8001bb4:	60dc      	str	r4, [r3, #12]
 8001bb6:	e7a7      	b.n	8001b08 <ETH_Prepare_Tx_Descriptors+0x184>
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8001bb8:	4654      	mov	r4, sl
 8001bba:	f8d9 2018 	ldr.w	r2, [r9, #24]
      for (idx = 0; idx < descnbr; idx ++)
 8001bbe:	f1bb 0f00 	cmp.w	fp, #0
 8001bc2:	d011      	beq.n	8001be8 <ETH_Prepare_Tx_Descriptors+0x264>
 8001bc4:	2100      	movs	r1, #0
 8001bc6:	f3bf 8f5f 	dmb	sy
        INCR_TX_DESC_INDEX(descidx, 1U);
 8001bca:	1c65      	adds	r5, r4, #1
        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8001bcc:	68d3      	ldr	r3, [r2, #12]
        INCR_TX_DESC_INDEX(descidx, 1U);
 8001bce:	3c03      	subs	r4, #3
      for (idx = 0; idx < descnbr; idx ++)
 8001bd0:	3101      	adds	r1, #1
        INCR_TX_DESC_INDEX(descidx, 1U);
 8001bd2:	2d03      	cmp	r5, #3
        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8001bd4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001bd8:	bf98      	it	ls
 8001bda:	462c      	movls	r4, r5
 8001bdc:	60d3      	str	r3, [r2, #12]
      for (idx = 0; idx < descnbr; idx ++)
 8001bde:	4559      	cmp	r1, fp
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8001be0:	eb00 0384 	add.w	r3, r0, r4, lsl #2
 8001be4:	699a      	ldr	r2, [r3, #24]
      for (idx = 0; idx < descnbr; idx ++)
 8001be6:	d1ee      	bne.n	8001bc6 <ETH_Prepare_Tx_Descriptors+0x242>
    return HAL_ETH_ERROR_BUSY;
 8001be8:	2002      	movs	r0, #2
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
}
 8001bea:	b003      	add	sp, #12
 8001bec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 8001bf0:	68da      	ldr	r2, [r3, #12]
 8001bf2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001bf6:	60da      	str	r2, [r3, #12]
 8001bf8:	f3bf 8f5f 	dmb	sy
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8001bfc:	68da      	ldr	r2, [r3, #12]
 8001bfe:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001c02:	60da      	str	r2, [r3, #12]
    INCR_TX_DESC_INDEX(descidx, 1U);
 8001c04:	1c62      	adds	r2, r4, #1
 8001c06:	2a03      	cmp	r2, #3
 8001c08:	bf88      	it	hi
 8001c0a:	1ee2      	subhi	r2, r4, #3
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8001c0c:	eb00 0382 	add.w	r3, r0, r2, lsl #2
 8001c10:	699b      	ldr	r3, [r3, #24]
    if (READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8001c12:	68dd      	ldr	r5, [r3, #12]
 8001c14:	2d00      	cmp	r5, #0
 8001c16:	db5f      	blt.n	8001cd8 <ETH_Prepare_Tx_Descriptors+0x354>
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8001c18:	f8d1 c000 	ldr.w	ip, [r1]
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8001c1c:	f04f 0e02 	mov.w	lr, #2
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8001c20:	f00c 0810 	and.w	r8, ip, #16
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8001c24:	f00c 0704 	and.w	r7, ip, #4
 8001c28:	e706      	b.n	8001a38 <ETH_Prepare_Tx_Descriptors+0xb4>
      WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001c2a:	605f      	str	r7, [r3, #4]
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8001c2c:	4647      	mov	r7, r8
 8001c2e:	689c      	ldr	r4, [r3, #8]
 8001c30:	4034      	ands	r4, r6
 8001c32:	609c      	str	r4, [r3, #8]
 8001c34:	e7a7      	b.n	8001b86 <ETH_Prepare_Tx_Descriptors+0x202>
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8001c36:	f8df 804c 	ldr.w	r8, [pc, #76]	; 8001c84 <ETH_Prepare_Tx_Descriptors+0x300>
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8001c3a:	f01c 0f01 	tst.w	ip, #1
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8001c3e:	ea06 0808 	and.w	r8, r6, r8
 8001c42:	684e      	ldr	r6, [r1, #4]
 8001c44:	ea48 0606 	orr.w	r6, r8, r6
 8001c48:	60de      	str	r6, [r3, #12]
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8001c4a:	d006      	beq.n	8001c5a <ETH_Prepare_Tx_Descriptors+0x2d6>
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8001c4c:	68de      	ldr	r6, [r3, #12]
 8001c4e:	f426 3840 	bic.w	r8, r6, #196608	; 0x30000
 8001c52:	694e      	ldr	r6, [r1, #20]
 8001c54:	ea48 0606 	orr.w	r6, r8, r6
 8001c58:	60de      	str	r6, [r3, #12]
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != (uint32_t)RESET)
 8001c5a:	f01c 0f20 	tst.w	ip, #32
 8001c5e:	f43f af1d 	beq.w	8001a9c <ETH_Prepare_Tx_Descriptors+0x118>
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 8001c62:	68de      	ldr	r6, [r3, #12]
 8001c64:	f026 6c40 	bic.w	ip, r6, #201326592	; 0xc000000
 8001c68:	690e      	ldr	r6, [r1, #16]
 8001c6a:	ea4c 0606 	orr.w	r6, ip, r6
 8001c6e:	60de      	str	r6, [r3, #12]
 8001c70:	e714      	b.n	8001a9c <ETH_Prepare_Tx_Descriptors+0x118>
 8001c72:	bf00      	nop
 8001c74:	ffff0000 	.word	0xffff0000
 8001c78:	ffffc000 	.word	0xffffc000
 8001c7c:	c000ffff 	.word	0xc000ffff
 8001c80:	fffc0000 	.word	0xfffc0000
 8001c84:	ffff8000 	.word	0xffff8000
  while (txbuffer->next != NULL)
 8001c88:	46c4      	mov	ip, r8
  if (ItMode != ((uint32_t)RESET))
 8001c8a:	9901      	ldr	r1, [sp, #4]
 8001c8c:	b1f9      	cbz	r1, 8001cce <ETH_Prepare_Tx_Descriptors+0x34a>
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8001c8e:	6899      	ldr	r1, [r3, #8]
 8001c90:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8001c94:	6099      	str	r1, [r3, #8]
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8001c96:	68d9      	ldr	r1, [r3, #12]
 8001c98:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8001c9c:	60d9      	str	r1, [r3, #12]
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8001c9e:	eb00 0382 	add.w	r3, r0, r2, lsl #2
 8001ca2:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8001ca4:	62d9      	str	r1, [r3, #44]	; 0x2c
  dmatxdesclist->CurTxDesc = descidx;
 8001ca6:	6282      	str	r2, [r0, #40]	; 0x28
  __ASM volatile ("cpsid i" : : : "memory");
 8001ca8:	b672      	cpsid	i
  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8001caa:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001cac:	3301      	adds	r3, #1
 8001cae:	4463      	add	r3, ip
 8001cb0:	6403      	str	r3, [r0, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8001cb2:	b662      	cpsie	i
  return HAL_ETH_ERROR_NONE;
 8001cb4:	2000      	movs	r0, #0
}
 8001cb6:	b003      	add	sp, #12
 8001cb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001cbc:	605d      	str	r5, [r3, #4]
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8001cbe:	4635      	mov	r5, r6
 8001cc0:	f8d3 a008 	ldr.w	sl, [r3, #8]
 8001cc4:	4e09      	ldr	r6, [pc, #36]	; (8001cec <ETH_Prepare_Tx_Descriptors+0x368>)
 8001cc6:	ea0a 0606 	and.w	r6, sl, r6
 8001cca:	609e      	str	r6, [r3, #8]
 8001ccc:	e6ce      	b.n	8001a6c <ETH_Prepare_Tx_Descriptors+0xe8>
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8001cce:	6899      	ldr	r1, [r3, #8]
 8001cd0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8001cd4:	6099      	str	r1, [r3, #8]
 8001cd6:	e7de      	b.n	8001c96 <ETH_Prepare_Tx_Descriptors+0x312>
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8001cd8:	f8d9 2018 	ldr.w	r2, [r9, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8001cdc:	f3bf 8f5f 	dmb	sy
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8001ce0:	68d3      	ldr	r3, [r2, #12]
      return HAL_ETH_ERROR_BUSY;
 8001ce2:	2002      	movs	r0, #2
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8001ce4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001ce8:	60d3      	str	r3, [r2, #12]
      return HAL_ETH_ERROR_BUSY;
 8001cea:	e77e      	b.n	8001bea <ETH_Prepare_Tx_Descriptors+0x266>
 8001cec:	c000ffff 	.word	0xc000ffff

08001cf0 <ETH_UpdateDescriptor>:
{
 8001cf0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  uint8_t *buff = NULL;
 8001cf4:	2300      	movs	r3, #0
{
 8001cf6:	b083      	sub	sp, #12
  desccount = heth->RxDescList.RxBuildDescCnt;
 8001cf8:	e9d0 461a 	ldrd	r4, r6, [r0, #104]	; 0x68
  uint8_t *buff = NULL;
 8001cfc:	9301      	str	r3, [sp, #4]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001cfe:	f104 0312 	add.w	r3, r4, #18
 8001d02:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
  while ((desccount > 0U) && (allocStatus != 0U))
 8001d06:	b37e      	cbz	r6, 8001d68 <ETH_UpdateDescriptor+0x78>
 8001d08:	4607      	mov	r7, r0
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 8001d0a:	f04f 4901 	mov.w	r9, #2164260864	; 0x81000000
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 8001d0e:	f04f 4841 	mov.w	r8, #3238002688	; 0xc1000000
 8001d12:	e00c      	b.n	8001d2e <ETH_UpdateDescriptor+0x3e>
 8001d14:	f8c5 800c 	str.w	r8, [r5, #12]
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001d18:	1c63      	adds	r3, r4, #1
 8001d1a:	3c03      	subs	r4, #3
 8001d1c:	2b03      	cmp	r3, #3
 8001d1e:	bf98      	it	ls
 8001d20:	461c      	movls	r4, r3
  while ((desccount > 0U) && (allocStatus != 0U))
 8001d22:	3e01      	subs	r6, #1
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001d24:	f104 0312 	add.w	r3, r4, #18
 8001d28:	f857 5023 	ldr.w	r5, [r7, r3, lsl #2]
  while ((desccount > 0U) && (allocStatus != 0U))
 8001d2c:	d011      	beq.n	8001d52 <ETH_UpdateDescriptor+0x62>
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8001d2e:	692b      	ldr	r3, [r5, #16]
 8001d30:	b13b      	cbz	r3, 8001d42 <ETH_UpdateDescriptor+0x52>
 8001d32:	f3bf 8f5f 	dmb	sy
      if (heth->RxDescList.ItMode != 0U)
 8001d36:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d1eb      	bne.n	8001d14 <ETH_UpdateDescriptor+0x24>
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 8001d3c:	f8c5 900c 	str.w	r9, [r5, #12]
 8001d40:	e7ea      	b.n	8001d18 <ETH_UpdateDescriptor+0x28>
      HAL_ETH_RxAllocateCallback(&buff);
 8001d42:	a801      	add	r0, sp, #4
 8001d44:	f002 f81a 	bl	8003d7c <HAL_ETH_RxAllocateCallback>
      if (buff == NULL)
 8001d48:	9b01      	ldr	r3, [sp, #4]
 8001d4a:	b113      	cbz	r3, 8001d52 <ETH_UpdateDescriptor+0x62>
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8001d4c:	612b      	str	r3, [r5, #16]
        WRITE_REG(dmarxdesc->DESC0, (uint32_t)buff);
 8001d4e:	602b      	str	r3, [r5, #0]
 8001d50:	e7ef      	b.n	8001d32 <ETH_UpdateDescriptor+0x42>
  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8001d52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d54:	42b3      	cmp	r3, r6
 8001d56:	d007      	beq.n	8001d68 <ETH_UpdateDescriptor+0x78>
    WRITE_REG(heth->Instance->DMACRDTPR, 0);
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d60:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
    heth->RxDescList.RxBuildDescCnt = desccount;
 8001d64:	e9c7 461a 	strd	r4, r6, [r7, #104]	; 0x68
}
 8001d68:	b003      	add	sp, #12
 8001d6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001d6e:	bf00      	nop

08001d70 <HAL_ETH_Start_IT>:
{
 8001d70:	b538      	push	{r3, r4, r5, lr}
  if (heth->gState == HAL_ETH_STATE_READY)
 8001d72:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8001d76:	2b10      	cmp	r3, #16
 8001d78:	d001      	beq.n	8001d7e <HAL_ETH_Start_IT+0xe>
    return HAL_ERROR;
 8001d7a:	2001      	movs	r0, #1
}
 8001d7c:	bd38      	pop	{r3, r4, r5, pc}
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8001d7e:	6803      	ldr	r3, [r0, #0]
    heth->gState = HAL_ETH_STATE_BUSY;
 8001d80:	2523      	movs	r5, #35	; 0x23
    heth->RxDescList.ItMode = 1U;
 8001d82:	2201      	movs	r2, #1
 8001d84:	4604      	mov	r4, r0
    heth->gState = HAL_ETH_STATE_BUSY;
 8001d86:	f8c0 5084 	str.w	r5, [r0, #132]	; 0x84
    heth->RxDescList.ItMode = 1U;
 8001d8a:	6582      	str	r2, [r0, #88]	; 0x58
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8001d8c:	f8d3 170c 	ldr.w	r1, [r3, #1804]	; 0x70c
 8001d90:	4a1d      	ldr	r2, [pc, #116]	; (8001e08 <HAL_ETH_Start_IT+0x98>)
 8001d92:	430a      	orrs	r2, r1
 8001d94:	f8c3 270c 	str.w	r2, [r3, #1804]	; 0x70c
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 8001d98:	4a1c      	ldr	r2, [pc, #112]	; (8001e0c <HAL_ETH_Start_IT+0x9c>)
 8001d9a:	f8d3 1710 	ldr.w	r1, [r3, #1808]	; 0x710
 8001d9e:	430a      	orrs	r2, r1
 8001da0:	f8c3 2710 	str.w	r2, [r3, #1808]	; 0x710
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8001da4:	2304      	movs	r3, #4
 8001da6:	66c3      	str	r3, [r0, #108]	; 0x6c
    ETH_UpdateDescriptor(heth);
 8001da8:	f7ff ffa2 	bl	8001cf0 <ETH_UpdateDescriptor>
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001dac:	6822      	ldr	r2, [r4, #0]
    return HAL_OK;
 8001dae:	2000      	movs	r0, #0
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001db0:	6811      	ldr	r1, [r2, #0]
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8001db2:	f502 5380 	add.w	r3, r2, #4096	; 0x1000
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001db6:	f041 0102 	orr.w	r1, r1, #2
 8001dba:	6011      	str	r1, [r2, #0]
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001dbc:	6811      	ldr	r1, [r2, #0]
 8001dbe:	f041 0101 	orr.w	r1, r1, #1
 8001dc2:	6011      	str	r1, [r2, #0]
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8001dc4:	f8d2 1d00 	ldr.w	r1, [r2, #3328]	; 0xd00
 8001dc8:	f041 0101 	orr.w	r1, r1, #1
 8001dcc:	f8c2 1d00 	str.w	r1, [r2, #3328]	; 0xd00
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8001dd0:	f24d 02c1 	movw	r2, #53441	; 0xd0c1
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8001dd4:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
 8001dd8:	f041 0101 	orr.w	r1, r1, #1
 8001ddc:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8001de0:	f8d3 1108 	ldr.w	r1, [r3, #264]	; 0x108
 8001de4:	f041 0101 	orr.w	r1, r1, #1
 8001de8:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 8001dec:	f8d3 1160 	ldr.w	r1, [r3, #352]	; 0x160
 8001df0:	f441 7181 	orr.w	r1, r1, #258	; 0x102
 8001df4:	f8c3 1160 	str.w	r1, [r3, #352]	; 0x160
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8001df8:	f8d3 1134 	ldr.w	r1, [r3, #308]	; 0x134
 8001dfc:	430a      	orrs	r2, r1
 8001dfe:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
    heth->gState = HAL_ETH_STATE_STARTED;
 8001e02:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
}
 8001e06:	bd38      	pop	{r3, r4, r5, pc}
 8001e08:	0c020060 	.word	0x0c020060
 8001e0c:	0c20c000 	.word	0x0c20c000

08001e10 <HAL_ETH_Stop_IT>:
  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001e10:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 8001e14:	2a23      	cmp	r2, #35	; 0x23
 8001e16:	d001      	beq.n	8001e1c <HAL_ETH_Stop_IT+0xc>
    return HAL_ERROR;
 8001e18:	2001      	movs	r0, #1
}
 8001e1a:	4770      	bx	lr
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8001e1c:	4601      	mov	r1, r0
 8001e1e:	4603      	mov	r3, r0
{
 8001e20:	b430      	push	{r4, r5}
    heth->gState = HAL_ETH_STATE_BUSY;
 8001e22:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8001e26:	f103 0c54 	add.w	ip, r3, #84	; 0x54
 8001e2a:	f851 2b44 	ldr.w	r2, [r1], #68
 8001e2e:	4c19      	ldr	r4, [pc, #100]	; (8001e94 <HAL_ETH_Stop_IT+0x84>)
 8001e30:	f502 5080 	add.w	r0, r2, #4096	; 0x1000
 8001e34:	f8d0 5134 	ldr.w	r5, [r0, #308]	; 0x134
 8001e38:	402c      	ands	r4, r5
 8001e3a:	f8c0 4134 	str.w	r4, [r0, #308]	; 0x134
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8001e3e:	f8d0 4104 	ldr.w	r4, [r0, #260]	; 0x104
 8001e42:	f024 0401 	bic.w	r4, r4, #1
 8001e46:	f8c0 4104 	str.w	r4, [r0, #260]	; 0x104
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8001e4a:	f8d0 4108 	ldr.w	r4, [r0, #264]	; 0x108
 8001e4e:	f024 0401 	bic.w	r4, r4, #1
 8001e52:	f8c0 4108 	str.w	r4, [r0, #264]	; 0x108
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001e56:	6810      	ldr	r0, [r2, #0]
 8001e58:	f020 0001 	bic.w	r0, r0, #1
 8001e5c:	6010      	str	r0, [r2, #0]
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8001e5e:	f8d2 0d00 	ldr.w	r0, [r2, #3328]	; 0xd00
 8001e62:	f040 0001 	orr.w	r0, r0, #1
 8001e66:	f8c2 0d00 	str.w	r0, [r2, #3328]	; 0xd00
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001e6a:	6810      	ldr	r0, [r2, #0]
 8001e6c:	f020 0002 	bic.w	r0, r0, #2
 8001e70:	6010      	str	r0, [r2, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8001e72:	f851 0f04 	ldr.w	r0, [r1, #4]!
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8001e76:	68c2      	ldr	r2, [r0, #12]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001e78:	4561      	cmp	r1, ip
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8001e7a:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8001e7e:	60c2      	str	r2, [r0, #12]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001e80:	d1f7      	bne.n	8001e72 <HAL_ETH_Stop_IT+0x62>
    heth->RxDescList.ItMode = 0U;
 8001e82:	2200      	movs	r2, #0
    heth->gState = HAL_ETH_STATE_READY;
 8001e84:	2110      	movs	r1, #16
    return HAL_OK;
 8001e86:	4610      	mov	r0, r2
    heth->RxDescList.ItMode = 0U;
 8001e88:	659a      	str	r2, [r3, #88]	; 0x58
    heth->gState = HAL_ETH_STATE_READY;
 8001e8a:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
}
 8001e8e:	bc30      	pop	{r4, r5}
 8001e90:	4770      	bx	lr
 8001e92:	bf00      	nop
 8001e94:	ffff2f3e 	.word	0xffff2f3e

08001e98 <HAL_ETH_Transmit_IT>:
{
 8001e98:	b510      	push	{r4, lr}
 8001e9a:	4604      	mov	r4, r0
  if (pTxConfig == NULL)
 8001e9c:	b329      	cbz	r1, 8001eea <HAL_ETH_Transmit_IT+0x52>
  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001e9e:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 8001ea2:	2a23      	cmp	r2, #35	; 0x23
 8001ea4:	d001      	beq.n	8001eaa <HAL_ETH_Transmit_IT+0x12>
    return HAL_ERROR;
 8001ea6:	2001      	movs	r0, #1
}
 8001ea8:	bd10      	pop	{r4, pc}
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8001eaa:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8001eac:	2201      	movs	r2, #1
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8001eae:	63c3      	str	r3, [r0, #60]	; 0x3c
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8001eb0:	f7ff fd68 	bl	8001984 <ETH_Prepare_Tx_Descriptors>
 8001eb4:	b138      	cbz	r0, 8001ec6 <HAL_ETH_Transmit_IT+0x2e>
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001eb6:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
      return HAL_ERROR;
 8001eba:	2001      	movs	r0, #1
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001ebc:	f043 0302 	orr.w	r3, r3, #2
 8001ec0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
}
 8001ec4:	bd10      	pop	{r4, pc}
  __ASM volatile ("dsb 0xF":::"memory");
 8001ec6:	f3bf 8f4f 	dsb	sy
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001eca:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    return HAL_OK;
 8001ecc:	2000      	movs	r0, #0
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001ece:	1c53      	adds	r3, r2, #1
 8001ed0:	2b03      	cmp	r3, #3
 8001ed2:	bf88      	it	hi
 8001ed4:	1ed3      	subhi	r3, r2, #3
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8001ed6:	6822      	ldr	r2, [r4, #0]
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001ed8:	62a3      	str	r3, [r4, #40]	; 0x28
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8001eda:	3306      	adds	r3, #6
 8001edc:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 8001ee0:	f502 5380 	add.w	r3, r2, #4096	; 0x1000
 8001ee4:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
}
 8001ee8:	bd10      	pop	{r4, pc}
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001eea:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
    return HAL_ERROR;
 8001eee:	2001      	movs	r0, #1
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001ef0:	4303      	orrs	r3, r0
 8001ef2:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
}
 8001ef6:	bd10      	pop	{r4, pc}

08001ef8 <HAL_ETH_ReadData>:
{
 8001ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001efc:	b085      	sub	sp, #20
 8001efe:	4604      	mov	r4, r0
  if (pAppBuff == NULL)
 8001f00:	9103      	str	r1, [sp, #12]
 8001f02:	2900      	cmp	r1, #0
 8001f04:	d06d      	beq.n	8001fe2 <HAL_ETH_ReadData+0xea>
  if (heth->gState != HAL_ETH_STATE_STARTED)
 8001f06:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8001f0a:	2b23      	cmp	r3, #35	; 0x23
 8001f0c:	d15e      	bne.n	8001fcc <HAL_ETH_ReadData+0xd4>
  descidx = heth->RxDescList.RxDescIdx;
 8001f0e:	f8d0 805c 	ldr.w	r8, [r0, #92]	; 0x5c
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001f12:	f108 0312 	add.w	r3, r8, #18
 8001f16:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8001f1a:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001f1c:	68ea      	ldr	r2, [r5, #12]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8001f1e:	f1c3 0b04 	rsb	fp, r3, #4
         && (rxdataready == 0U))
 8001f22:	2a00      	cmp	r2, #0
 8001f24:	db6a      	blt.n	8001ffc <HAL_ETH_ReadData+0x104>
 8001f26:	f1bb 0f00 	cmp.w	fp, #0
 8001f2a:	d069      	beq.n	8002000 <HAL_ETH_ReadData+0x108>
  uint32_t desccnt = 0U;
 8001f2c:	f04f 0900 	mov.w	r9, #0
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001f30:	f100 0180 	add.w	r1, r0, #128	; 0x80
 8001f34:	307c      	adds	r0, #124	; 0x7c
      dmarxdesc->BackupAddr0 = 0;
 8001f36:	46ca      	mov	sl, r9
 8001f38:	e003      	b.n	8001f42 <HAL_ETH_ReadData+0x4a>
         && (rxdataready == 0U))
 8001f3a:	45cb      	cmp	fp, r9
 8001f3c:	d93f      	bls.n	8001fbe <HAL_ETH_ReadData+0xc6>
 8001f3e:	2e00      	cmp	r6, #0
 8001f40:	d13d      	bne.n	8001fbe <HAL_ETH_ReadData+0xc6>
    if (READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 8001f42:	68eb      	ldr	r3, [r5, #12]
 8001f44:	005e      	lsls	r6, r3, #1
 8001f46:	d503      	bpl.n	8001f50 <HAL_ETH_ReadData+0x58>
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC1;
 8001f48:	686b      	ldr	r3, [r5, #4]
 8001f4a:	67a3      	str	r3, [r4, #120]	; 0x78
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC0;
 8001f4c:	682b      	ldr	r3, [r5, #0]
 8001f4e:	6763      	str	r3, [r4, #116]	; 0x74
    if ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8001f50:	68eb      	ldr	r3, [r5, #12]
 8001f52:	009a      	lsls	r2, r3, #2
 8001f54:	d401      	bmi.n	8001f5a <HAL_ETH_ReadData+0x62>
 8001f56:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
 8001f58:	b30e      	cbz	r6, 8001f9e <HAL_ETH_ReadData+0xa6>
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 8001f5a:	68eb      	ldr	r3, [r5, #12]
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 8001f5c:	68ee      	ldr	r6, [r5, #12]
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 8001f5e:	009b      	lsls	r3, r3, #2
      bufflength = heth->Init.RxBuffLen;
 8001f60:	6967      	ldr	r7, [r4, #20]
        heth->RxDescList.RxDataLength = 0;
 8001f62:	bf48      	it	mi
 8001f64:	e9c4 aa18 	strdmi	sl, sl, [r4, #96]	; 0x60
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 8001f68:	f016 5680 	ands.w	r6, r6, #268435456	; 0x10000000
 8001f6c:	d007      	beq.n	8001f7e <HAL_ETH_ReadData+0x86>
        bufflength = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - heth->RxDescList.RxDataLength;
 8001f6e:	68ef      	ldr	r7, [r5, #12]
        rxdataready = 1;
 8001f70:	2601      	movs	r6, #1
        bufflength = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - heth->RxDescList.RxDataLength;
 8001f72:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001f74:	f3c7 070e 	ubfx	r7, r7, #0, #15
 8001f78:	1aff      	subs	r7, r7, r3
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC3;
 8001f7a:	68eb      	ldr	r3, [r5, #12]
 8001f7c:	6723      	str	r3, [r4, #112]	; 0x70
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001f7e:	b2bb      	uxth	r3, r7
 8001f80:	692a      	ldr	r2, [r5, #16]
 8001f82:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8001f86:	f001 ff1d 	bl	8003dc4 <HAL_ETH_RxLinkCallback>
      heth->RxDescList.RxDescCnt++;
 8001f8a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001f8c:	3301      	adds	r3, #1
 8001f8e:	6623      	str	r3, [r4, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8001f90:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001f92:	e9dd 0101 	ldrd	r0, r1, [sp, #4]
 8001f96:	443b      	add	r3, r7
 8001f98:	6663      	str	r3, [r4, #100]	; 0x64
      dmarxdesc->BackupAddr0 = 0;
 8001f9a:	f8c5 a010 	str.w	sl, [r5, #16]
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001f9e:	f108 0301 	add.w	r3, r8, #1
    desccnt++;
 8001fa2:	f109 0901 	add.w	r9, r9, #1
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001fa6:	2b03      	cmp	r3, #3
 8001fa8:	bf8c      	ite	hi
 8001faa:	f1a8 0803 	subhi.w	r8, r8, #3
 8001fae:	4698      	movls	r8, r3
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001fb0:	f108 0312 	add.w	r3, r8, #18
 8001fb4:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001fb8:	68eb      	ldr	r3, [r5, #12]
         && (rxdataready == 0U))
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	dabd      	bge.n	8001f3a <HAL_ETH_ReadData+0x42>
  heth->RxDescList.RxBuildDescCnt += desccnt;
 8001fbe:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8001fc0:	444b      	add	r3, r9
 8001fc2:	66e3      	str	r3, [r4, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8001fc4:	b9b3      	cbnz	r3, 8001ff4 <HAL_ETH_ReadData+0xfc>
  heth->RxDescList.RxDescIdx = descidx;
 8001fc6:	f8c4 805c 	str.w	r8, [r4, #92]	; 0x5c
  if (rxdataready == 1U)
 8001fca:	b91e      	cbnz	r6, 8001fd4 <HAL_ETH_ReadData+0xdc>
    return HAL_ERROR;
 8001fcc:	2001      	movs	r0, #1
}
 8001fce:	b005      	add	sp, #20
 8001fd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    *pAppBuff = heth->RxDescList.pRxStart;
 8001fd4:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
    heth->RxDescList.pRxStart = NULL;
 8001fd6:	2300      	movs	r3, #0
    *pAppBuff = heth->RxDescList.pRxStart;
 8001fd8:	9903      	ldr	r1, [sp, #12]
    return HAL_OK;
 8001fda:	4618      	mov	r0, r3
    *pAppBuff = heth->RxDescList.pRxStart;
 8001fdc:	600a      	str	r2, [r1, #0]
    heth->RxDescList.pRxStart = NULL;
 8001fde:	67e3      	str	r3, [r4, #124]	; 0x7c
    return HAL_OK;
 8001fe0:	e7f5      	b.n	8001fce <HAL_ETH_ReadData+0xd6>
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001fe2:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
    return HAL_ERROR;
 8001fe6:	2001      	movs	r0, #1
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001fe8:	4303      	orrs	r3, r0
 8001fea:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
}
 8001fee:	b005      	add	sp, #20
 8001ff0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ETH_UpdateDescriptor(heth);
 8001ff4:	4620      	mov	r0, r4
 8001ff6:	f7ff fe7b 	bl	8001cf0 <ETH_UpdateDescriptor>
 8001ffa:	e7e4      	b.n	8001fc6 <HAL_ETH_ReadData+0xce>
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d0e5      	beq.n	8001fcc <HAL_ETH_ReadData+0xd4>
    ETH_UpdateDescriptor(heth);
 8002000:	f7ff fe76 	bl	8001cf0 <ETH_UpdateDescriptor>
  heth->RxDescList.RxDescIdx = descidx;
 8002004:	f8c4 805c 	str.w	r8, [r4, #92]	; 0x5c
  if (rxdataready == 1U)
 8002008:	e7e0      	b.n	8001fcc <HAL_ETH_ReadData+0xd4>
 800200a:	bf00      	nop

0800200c <HAL_ETH_ReleaseTxPacket>:
{
 800200c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8002010:	e9d0 5410 	ldrd	r5, r4, [r0, #64]	; 0x40
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8002014:	b17d      	cbz	r5, 8002036 <HAL_ETH_ReleaseTxPacket+0x2a>
 8002016:	4606      	mov	r6, r0
        dmatxdesclist->PacketAddress[idx] = NULL;
 8002018:	2700      	movs	r7, #0
      if ((heth->Init.TxDesc[idx].DESC3 & ETH_DMATXNDESCRF_OWN) == 0U)
 800201a:	eb06 0884 	add.w	r8, r6, r4, lsl #2
    numOfBuf--;
 800201e:	3d01      	subs	r5, #1
      if ((heth->Init.TxDesc[idx].DESC3 & ETH_DMATXNDESCRF_OWN) == 0U)
 8002020:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8002024:	f8d8 002c 	ldr.w	r0, [r8, #44]	; 0x2c
 8002028:	b140      	cbz	r0, 800203c <HAL_ETH_ReleaseTxPacket+0x30>
      if ((heth->Init.TxDesc[idx].DESC3 & ETH_DMATXNDESCRF_OWN) == 0U)
 800202a:	68f3      	ldr	r3, [r6, #12]
 800202c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002030:	68db      	ldr	r3, [r3, #12]
 8002032:	2b00      	cmp	r3, #0
 8002034:	da08      	bge.n	8002048 <HAL_ETH_ReleaseTxPacket+0x3c>
}
 8002036:	2000      	movs	r0, #0
 8002038:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 800203c:	3401      	adds	r4, #1
 800203e:	f004 0403 	and.w	r4, r4, #3
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8002042:	2d00      	cmp	r5, #0
 8002044:	d1e9      	bne.n	800201a <HAL_ETH_ReleaseTxPacket+0xe>
 8002046:	e7f6      	b.n	8002036 <HAL_ETH_ReleaseTxPacket+0x2a>
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8002048:	3401      	adds	r4, #1
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 800204a:	f001 feeb 	bl	8003e24 <HAL_ETH_TxFreeCallback>
        dmatxdesclist->PacketAddress[idx] = NULL;
 800204e:	f8c8 702c 	str.w	r7, [r8, #44]	; 0x2c
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8002052:	f004 0403 	and.w	r4, r4, #3
        dmatxdesclist->BuffersInUse = numOfBuf;
 8002056:	6435      	str	r5, [r6, #64]	; 0x40
        dmatxdesclist->releaseIndex = idx;
 8002058:	6474      	str	r4, [r6, #68]	; 0x44
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 800205a:	2d00      	cmp	r5, #0
 800205c:	d1dd      	bne.n	800201a <HAL_ETH_ReleaseTxPacket+0xe>
 800205e:	e7ea      	b.n	8002036 <HAL_ETH_ReleaseTxPacket+0x2a>

08002060 <HAL_ETH_PMTCallback>:
 8002060:	4770      	bx	lr
 8002062:	bf00      	nop

08002064 <HAL_ETH_EEECallback>:
 8002064:	4770      	bx	lr
 8002066:	bf00      	nop

08002068 <HAL_ETH_WakeUpCallback>:
 8002068:	4770      	bx	lr
 800206a:	bf00      	nop

0800206c <HAL_ETH_IRQHandler>:
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_RI))
 800206c:	6803      	ldr	r3, [r0, #0]
 800206e:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8002072:	f8d2 1160 	ldr.w	r1, [r2, #352]	; 0x160
 8002076:	0649      	lsls	r1, r1, #25
{
 8002078:	b510      	push	{r4, lr}
 800207a:	4604      	mov	r4, r0
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_RI))
 800207c:	d504      	bpl.n	8002088 <HAL_ETH_IRQHandler+0x1c>
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_RIE))
 800207e:	f8d2 1134 	ldr.w	r1, [r2, #308]	; 0x134
 8002082:	0649      	lsls	r1, r1, #25
 8002084:	f100 808a 	bmi.w	800219c <HAL_ETH_IRQHandler+0x130>
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_TI))
 8002088:	f8d2 1160 	ldr.w	r1, [r2, #352]	; 0x160
 800208c:	07c8      	lsls	r0, r1, #31
 800208e:	d503      	bpl.n	8002098 <HAL_ETH_IRQHandler+0x2c>
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_TIE))
 8002090:	f8d2 1134 	ldr.w	r1, [r2, #308]	; 0x134
 8002094:	07c9      	lsls	r1, r1, #31
 8002096:	d476      	bmi.n	8002186 <HAL_ETH_IRQHandler+0x11a>
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_AIS))
 8002098:	f8d2 1160 	ldr.w	r1, [r2, #352]	; 0x160
 800209c:	0448      	lsls	r0, r1, #17
 800209e:	d503      	bpl.n	80020a8 <HAL_ETH_IRQHandler+0x3c>
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_AIE))
 80020a0:	f8d2 1134 	ldr.w	r1, [r2, #308]	; 0x134
 80020a4:	0449      	lsls	r1, r1, #17
 80020a6:	d41b      	bmi.n	80020e0 <HAL_ETH_IRQHandler+0x74>
  macirqenable = heth->Instance->MACIER;
 80020a8:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
  if (((macirqenable & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 80020ac:	f412 4fc0 	tst.w	r2, #24576	; 0x6000
 80020b0:	d133      	bne.n	800211a <HAL_ETH_IRQHandler+0xae>
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 80020b2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80020b6:	06d0      	lsls	r0, r2, #27
 80020b8:	d447      	bmi.n	800214a <HAL_ETH_IRQHandler+0xde>
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_LPI_IT))
 80020ba:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80020be:	0691      	lsls	r1, r2, #26
 80020c0:	d454      	bmi.n	800216c <HAL_ETH_IRQHandler+0x100>
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 80020c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020c6:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 80020ca:	0252      	lsls	r2, r2, #9
 80020cc:	d400      	bmi.n	80020d0 <HAL_ETH_IRQHandler+0x64>
}
 80020ce:	bd10      	pop	{r4, pc}
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 80020d0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    HAL_ETH_WakeUpCallback(heth);
 80020d4:	4620      	mov	r0, r4
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 80020d6:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    HAL_ETH_WakeUpCallback(heth);
 80020da:	f7ff ffc5 	bl	8002068 <HAL_ETH_WakeUpCallback>
}
 80020de:	bd10      	pop	{r4, pc}
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80020e0:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 80020e4:	f043 0308 	orr.w	r3, r3, #8
 80020e8:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_FBE))
 80020ec:	f8d2 3160 	ldr.w	r3, [r2, #352]	; 0x160
 80020f0:	f413 5f80 	tst.w	r3, #4096	; 0x1000
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 80020f4:	f8d2 3160 	ldr.w	r3, [r2, #352]	; 0x160
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_FBE))
 80020f8:	d15a      	bne.n	80021b0 <HAL_ETH_IRQHandler+0x144>
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 80020fa:	f44f 41cd 	mov.w	r1, #26240	; 0x6680
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 80020fe:	400b      	ands	r3, r1
 8002100:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8002104:	f8c2 1160 	str.w	r1, [r2, #352]	; 0x160
      HAL_ETH_ErrorCallback(heth);
 8002108:	4620      	mov	r0, r4
 800210a:	f001 fc95 	bl	8003a38 <HAL_ETH_ErrorCallback>
  macirqenable = heth->Instance->MACIER;
 800210e:	6823      	ldr	r3, [r4, #0]
 8002110:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
  if (((macirqenable & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 8002114:	f412 4fc0 	tst.w	r2, #24576	; 0x6000
 8002118:	d0cb      	beq.n	80020b2 <HAL_ETH_IRQHandler+0x46>
    heth->ErrorCode |= HAL_ETH_ERROR_MAC;
 800211a:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
    heth->gState = HAL_ETH_STATE_ERROR;
 800211e:	21e0      	movs	r1, #224	; 0xe0
    HAL_ETH_ErrorCallback(heth);
 8002120:	4620      	mov	r0, r4
    heth->ErrorCode |= HAL_ETH_ERROR_MAC;
 8002122:	f042 0210 	orr.w	r2, r2, #16
 8002126:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 800212a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800212e:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
    heth->gState = HAL_ETH_STATE_ERROR;
 8002132:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
    HAL_ETH_ErrorCallback(heth);
 8002136:	f001 fc7f 	bl	8003a38 <HAL_ETH_ErrorCallback>
    heth->MACErrorCode = (uint32_t)(0x0U);
 800213a:	2200      	movs	r2, #0
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 800213c:	6823      	ldr	r3, [r4, #0]
    heth->MACErrorCode = (uint32_t)(0x0U);
 800213e:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8002142:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002146:	06d0      	lsls	r0, r2, #27
 8002148:	d5b7      	bpl.n	80020ba <HAL_ETH_IRQHandler+0x4e>
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 800214a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
    HAL_ETH_PMTCallback(heth);
 800214e:	4620      	mov	r0, r4
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 8002150:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8002154:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
    HAL_ETH_PMTCallback(heth);
 8002158:	f7ff ff82 	bl	8002060 <HAL_ETH_PMTCallback>
    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 800215c:	2200      	movs	r2, #0
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_LPI_IT))
 800215e:	6823      	ldr	r3, [r4, #0]
    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8002160:	f8c4 2094 	str.w	r2, [r4, #148]	; 0x94
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_LPI_IT))
 8002164:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002168:	0691      	lsls	r1, r2, #26
 800216a:	d5aa      	bpl.n	80020c2 <HAL_ETH_IRQHandler+0x56>
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACPCSR, 0x0000000FU);
 800216c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
    HAL_ETH_EEECallback(heth);
 8002170:	4620      	mov	r0, r4
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACPCSR, 0x0000000FU);
 8002172:	f003 030f 	and.w	r3, r3, #15
 8002176:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
    HAL_ETH_EEECallback(heth);
 800217a:	f7ff ff73 	bl	8002064 <HAL_ETH_EEECallback>
    heth->MACLPIEvent = (uint32_t)(0x0U);
 800217e:	2300      	movs	r3, #0
 8002180:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
 8002184:	e79d      	b.n	80020c2 <HAL_ETH_IRQHandler+0x56>
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 8002186:	f248 0301 	movw	r3, #32769	; 0x8001
      HAL_ETH_TxCpltCallback(heth);
 800218a:	4620      	mov	r0, r4
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 800218c:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
      HAL_ETH_TxCpltCallback(heth);
 8002190:	f001 fc4c 	bl	8003a2c <HAL_ETH_TxCpltCallback>
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_AIS))
 8002194:	6823      	ldr	r3, [r4, #0]
 8002196:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 800219a:	e77d      	b.n	8002098 <HAL_ETH_IRQHandler+0x2c>
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 800219c:	f248 0340 	movw	r3, #32832	; 0x8040
 80021a0:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
      HAL_ETH_RxCpltCallback(heth);
 80021a4:	f001 fc3c 	bl	8003a20 <HAL_ETH_RxCpltCallback>
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_TI))
 80021a8:	6823      	ldr	r3, [r4, #0]
 80021aa:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 80021ae:	e76b      	b.n	8002088 <HAL_ETH_IRQHandler+0x1c>
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 80021b0:	f241 1002 	movw	r0, #4354	; 0x1102
        heth->gState = HAL_ETH_STATE_ERROR;
 80021b4:	21e0      	movs	r1, #224	; 0xe0
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 80021b6:	4003      	ands	r3, r0
 80021b8:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 80021bc:	f8d2 3134 	ldr.w	r3, [r2, #308]	; 0x134
 80021c0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80021c4:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
        heth->gState = HAL_ETH_STATE_ERROR;
 80021c8:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
 80021cc:	e79c      	b.n	8002108 <HAL_ETH_IRQHandler+0x9c>
 80021ce:	bf00      	nop

080021d0 <HAL_ETH_ReadPHYRegister>:
{
 80021d0:	b570      	push	{r4, r5, r6, lr}
 80021d2:	4604      	mov	r4, r0
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 80021d4:	6800      	ldr	r0, [r0, #0]
{
 80021d6:	461d      	mov	r5, r3
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 80021d8:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
 80021dc:	07db      	lsls	r3, r3, #31
 80021de:	d501      	bpl.n	80021e4 <HAL_ETH_ReadPHYRegister+0x14>
    return HAL_ERROR;
 80021e0:	2001      	movs	r0, #1
}
 80021e2:	bd70      	pop	{r4, r5, r6, pc}
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 80021e4:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 80021e8:	f023 7378 	bic.w	r3, r3, #65011712	; 0x3e00000
 80021ec:	ea43 5141 	orr.w	r1, r3, r1, lsl #21
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 80021f0:	f421 13f8 	bic.w	r3, r1, #2031616	; 0x1f0000
 80021f4:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 80021f8:	f042 020d 	orr.w	r2, r2, #13
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 80021fc:	f8c0 2200 	str.w	r2, [r0, #512]	; 0x200
  tickstart = HAL_GetTick();
 8002200:	f7ff f9f8 	bl	80015f4 <HAL_GetTick>
 8002204:	4606      	mov	r6, r0
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8002206:	e005      	b.n	8002214 <HAL_ETH_ReadPHYRegister+0x44>
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8002208:	f7ff f9f4 	bl	80015f4 <HAL_GetTick>
 800220c:	1b82      	subs	r2, r0, r6
 800220e:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 8002212:	d8e5      	bhi.n	80021e0 <HAL_ETH_ReadPHYRegister+0x10>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8002214:	6821      	ldr	r1, [r4, #0]
 8002216:	f8d1 2200 	ldr.w	r2, [r1, #512]	; 0x200
 800221a:	f012 0201 	ands.w	r2, r2, #1
 800221e:	d1f3      	bne.n	8002208 <HAL_ETH_ReadPHYRegister+0x38>
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 8002220:	f8d1 3204 	ldr.w	r3, [r1, #516]	; 0x204
  return HAL_OK;
 8002224:	4610      	mov	r0, r2
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 8002226:	b29b      	uxth	r3, r3
 8002228:	602b      	str	r3, [r5, #0]
}
 800222a:	bd70      	pop	{r4, r5, r6, pc}

0800222c <HAL_ETH_WritePHYRegister>:
{
 800222c:	b538      	push	{r3, r4, r5, lr}
 800222e:	4604      	mov	r4, r0
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8002230:	6800      	ldr	r0, [r0, #0]
 8002232:	f8d0 5200 	ldr.w	r5, [r0, #512]	; 0x200
 8002236:	07ed      	lsls	r5, r5, #31
 8002238:	d501      	bpl.n	800223e <HAL_ETH_WritePHYRegister+0x12>
    return HAL_ERROR;
 800223a:	2001      	movs	r0, #1
}
 800223c:	bd38      	pop	{r3, r4, r5, pc}
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 800223e:	f8d0 0200 	ldr.w	r0, [r0, #512]	; 0x200
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8002242:	b29b      	uxth	r3, r3
 8002244:	f020 7078 	bic.w	r0, r0, #65011712	; 0x3e00000
 8002248:	ea40 5141 	orr.w	r1, r0, r1, lsl #21
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 800224c:	480f      	ldr	r0, [pc, #60]	; (800228c <HAL_ETH_WritePHYRegister+0x60>)
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 800224e:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 8002252:	f8c0 3204 	str.w	r3, [r0, #516]	; 0x204
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8002256:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 800225a:	f022 030c 	bic.w	r3, r2, #12
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 800225e:	f043 0305 	orr.w	r3, r3, #5
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 8002262:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
  tickstart = HAL_GetTick();
 8002266:	f7ff f9c5 	bl	80015f4 <HAL_GetTick>
 800226a:	4605      	mov	r5, r0
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 800226c:	e005      	b.n	800227a <HAL_ETH_WritePHYRegister+0x4e>
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 800226e:	f7ff f9c1 	bl	80015f4 <HAL_GetTick>
 8002272:	1b43      	subs	r3, r0, r5
 8002274:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002278:	d8df      	bhi.n	800223a <HAL_ETH_WritePHYRegister+0xe>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 800227a:	6823      	ldr	r3, [r4, #0]
 800227c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002280:	f013 0301 	ands.w	r3, r3, #1
 8002284:	d1f3      	bne.n	800226e <HAL_ETH_WritePHYRegister+0x42>
  return HAL_OK;
 8002286:	4618      	mov	r0, r3
}
 8002288:	bd38      	pop	{r3, r4, r5, pc}
 800228a:	bf00      	nop
 800228c:	40028000 	.word	0x40028000

08002290 <HAL_ETH_GetMACConfig>:
  if (macconf == NULL)
 8002290:	2900      	cmp	r1, #0
 8002292:	f000 80c4 	beq.w	800241e <HAL_ETH_GetMACConfig+0x18e>
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8002296:	6803      	ldr	r3, [r0, #0]
  return HAL_OK;
 8002298:	2000      	movs	r0, #0
{
 800229a:	b410      	push	{r4}
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 800229c:	681c      	ldr	r4, [r3, #0]
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 800229e:	681a      	ldr	r2, [r3, #0]
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 80022a0:	f004 040c 	and.w	r4, r4, #12
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 80022a4:	f3c2 1200 	ubfx	r2, r2, #4, #1
 80022a8:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 80022ac:	681a      	ldr	r2, [r3, #0]
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 80022ae:	62cc      	str	r4, [r1, #44]	; 0x2c
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 80022b0:	f002 0260 	and.w	r2, r2, #96	; 0x60
 80022b4:	624a      	str	r2, [r1, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	f482 7280 	eor.w	r2, r2, #256	; 0x100
 80022bc:	f3c2 2200 	ubfx	r2, r2, #8, #1
 80022c0:	f881 2020 	strb.w	r2, [r1, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 80022c4:	681a      	ldr	r2, [r3, #0]
                                        ? ENABLE : DISABLE;
 80022c6:	f3c2 2240 	ubfx	r2, r2, #9, #1
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 80022ca:	77ca      	strb	r2, [r1, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	f482 6280 	eor.w	r2, r2, #1024	; 0x400
 80022d2:	f3c2 2280 	ubfx	r2, r2, #10, #1
 80022d6:	778a      	strb	r2, [r1, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 80022d8:	681a      	ldr	r2, [r3, #0]
                                                   ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 80022da:	f3c2 22c0 	ubfx	r2, r2, #11, #1
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 80022de:	774a      	strb	r2, [r1, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	f3c2 3200 	ubfx	r2, r2, #12, #1
 80022e6:	770a      	strb	r2, [r1, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 80022e8:	681c      	ldr	r4, [r3, #0]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 80022ea:	681a      	ldr	r2, [r3, #0]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 80022ec:	f404 5400 	and.w	r4, r4, #8192	; 0x2000
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 80022f0:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80022f4:	e9c1 2405 	strd	r2, r4, [r1, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	f3c2 4200 	ubfx	r2, r2, #16, #1
 80022fe:	748a      	strb	r2, [r1, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 17) == 0U) ? ENABLE : DISABLE;
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	f482 3200 	eor.w	r2, r2, #131072	; 0x20000
 8002306:	f3c2 4240 	ubfx	r2, r2, #17, #1
 800230a:	744a      	strb	r2, [r1, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 19) == 0U) ? ENABLE : DISABLE;
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8002312:	f3c2 42c0 	ubfx	r2, r2, #19, #1
 8002316:	740a      	strb	r2, [r1, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	f3c2 5200 	ubfx	r2, r2, #20, #1
 800231e:	73ca      	strb	r2, [r1, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	f3c2 5240 	ubfx	r2, r2, #21, #1
 8002326:	738a      	strb	r2, [r1, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	f3c2 5280 	ubfx	r2, r2, #22, #1
 800232e:	734a      	strb	r2, [r1, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8002330:	681a      	ldr	r2, [r3, #0]
                                                    ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 8002332:	f3c2 52c0 	ubfx	r2, r2, #23, #1
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8002336:	730a      	strb	r2, [r1, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 8002338:	681c      	ldr	r4, [r3, #0]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 800233a:	681a      	ldr	r2, [r3, #0]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 800233c:	f004 64e0 	and.w	r4, r4, #117440512	; 0x7000000
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 8002340:	f3c2 62c0 	ubfx	r2, r2, #27, #1
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 8002344:	608c      	str	r4, [r1, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 8002346:	710a      	strb	r2, [r1, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 8002348:	681c      	ldr	r4, [r3, #0]
  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 800234a:	685a      	ldr	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 800234c:	f004 44e0 	and.w	r4, r4, #1879048192	; 0x70000000
  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8002350:	f3c2 020d 	ubfx	r2, r2, #0, #14
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 8002354:	600c      	str	r4, [r1, #0]
  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8002356:	634a      	str	r2, [r1, #52]	; 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 8002358:	685a      	ldr	r2, [r3, #4]
 800235a:	f482 3280 	eor.w	r2, r2, #65536	; 0x10000
 800235e:	f3c2 4200 	ubfx	r2, r2, #16, #1
 8002362:	f881 2032 	strb.w	r2, [r1, #50]	; 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 8002366:	685a      	ldr	r2, [r3, #4]
 8002368:	f3c2 4240 	ubfx	r2, r2, #17, #1
 800236c:	f881 2031 	strb.w	r2, [r1, #49]	; 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8002370:	685a      	ldr	r2, [r3, #4]
                                                        ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 8002372:	f3c2 4280 	ubfx	r2, r2, #18, #1
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8002376:	f881 2030 	strb.w	r2, [r1, #48]	; 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 800237a:	685a      	ldr	r2, [r3, #4]
                                    ? ENABLE : DISABLE;
 800237c:	f3c2 6200 	ubfx	r2, r2, #24, #1
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8002380:	f881 2038 	strb.w	r2, [r1, #56]	; 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 8002384:	685c      	ldr	r4, [r3, #4]
  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 8002386:	68da      	ldr	r2, [r3, #12]
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 8002388:	f3c4 6444 	ubfx	r4, r4, #25, #5
  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 800238c:	f3c2 2200 	ubfx	r2, r2, #8, #1
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 8002390:	63cc      	str	r4, [r1, #60]	; 0x3c
  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 8002392:	f881 2040 	strb.w	r2, [r1, #64]	; 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 8002396:	68dc      	ldr	r4, [r3, #12]
  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 8002398:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 800239a:	f004 040f 	and.w	r4, r4, #15
  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 800239e:	f3c2 0240 	ubfx	r2, r2, #1, #1
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 80023a2:	644c      	str	r4, [r1, #68]	; 0x44
  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 80023a4:	f881 2054 	strb.w	r2, [r1, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 80023a8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80023aa:	f082 0280 	eor.w	r2, r2, #128	; 0x80
 80023ae:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 80023b2:	f881 204c 	strb.w	r2, [r1, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 80023b6:	6f1c      	ldr	r4, [r3, #112]	; 0x70
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 80023b8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 80023ba:	f004 0470 	and.w	r4, r4, #112	; 0x70
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 80023be:	0c12      	lsrs	r2, r2, #16
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 80023c0:	650c      	str	r4, [r1, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 80023c2:	648a      	str	r2, [r1, #72]	; 0x48
  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 80023c4:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80023c8:	f002 0201 	and.w	r2, r2, #1
 80023cc:	f881 2056 	strb.w	r2, [r1, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 80023d0:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
                                      ? ENABLE : DISABLE;
 80023d4:	f3c2 0240 	ubfx	r2, r2, #1, #1
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 80023d8:	f881 2055 	strb.w	r2, [r1, #85]	; 0x55
  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 80023dc:	f8d3 4d00 	ldr.w	r4, [r3, #3328]	; 0xd00
  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 80023e0:	f8d3 2d30 	ldr.w	r2, [r3, #3376]	; 0xd30
  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 80023e4:	f004 0472 	and.w	r4, r4, #114	; 0x72
  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 80023e8:	f002 0223 	and.w	r2, r2, #35	; 0x23
 80023ec:	e9c1 4216 	strd	r4, r2, [r1, #88]	; 0x58
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 80023f0:	f8d3 2d30 	ldr.w	r2, [r3, #3376]	; 0xd30
}
 80023f4:	f85d 4b04 	ldr.w	r4, [sp], #4
                                                      ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 80023f8:	f3c2 02c0 	ubfx	r2, r2, #3, #1
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 80023fc:	f881 2062 	strb.w	r2, [r1, #98]	; 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 8002400:	f8d3 2d30 	ldr.w	r2, [r3, #3376]	; 0xd30
 8002404:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8002408:	f881 2061 	strb.w	r2, [r1, #97]	; 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 800240c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
                                                     ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 8002410:	f083 0340 	eor.w	r3, r3, #64	; 0x40
 8002414:	f3c3 1380 	ubfx	r3, r3, #6, #1
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8002418:	f881 3060 	strb.w	r3, [r1, #96]	; 0x60
}
 800241c:	4770      	bx	lr
    return HAL_ERROR;
 800241e:	2001      	movs	r0, #1
}
 8002420:	4770      	bx	lr
 8002422:	bf00      	nop

08002424 <HAL_ETH_SetMACConfig>:
  if (macconf == NULL)
 8002424:	b131      	cbz	r1, 8002434 <HAL_ETH_SetMACConfig+0x10>
{
 8002426:	b508      	push	{r3, lr}
  if (heth->gState == HAL_ETH_STATE_READY)
 8002428:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 800242c:	2b10      	cmp	r3, #16
 800242e:	d003      	beq.n	8002438 <HAL_ETH_SetMACConfig+0x14>
    return HAL_ERROR;
 8002430:	2001      	movs	r0, #1
}
 8002432:	bd08      	pop	{r3, pc}
    return HAL_ERROR;
 8002434:	2001      	movs	r0, #1
}
 8002436:	4770      	bx	lr
    ETH_SetMACConfig(heth, macconf);
 8002438:	f7ff f9a0 	bl	800177c <ETH_SetMACConfig>
    return HAL_OK;
 800243c:	2000      	movs	r0, #0
}
 800243e:	bd08      	pop	{r3, pc}

08002440 <HAL_ETH_SetMDIOClockRange>:
{
 8002440:	b538      	push	{r3, r4, r5, lr}
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002442:	6803      	ldr	r3, [r0, #0]
{
 8002444:	4605      	mov	r5, r0
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002446:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
  hclk = HAL_RCC_GetHCLKFreq();
 800244a:	f000 ff59 	bl	8003300 <HAL_RCC_GetHCLKFreq>
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 800244e:	4b15      	ldr	r3, [pc, #84]	; (80024a4 <HAL_ETH_SetMDIOClockRange+0x64>)
 8002450:	4a15      	ldr	r2, [pc, #84]	; (80024a8 <HAL_ETH_SetMDIOClockRange+0x68>)
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8002452:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8002456:	4403      	add	r3, r0
 8002458:	4293      	cmp	r3, r2
 800245a:	d205      	bcs.n	8002468 <HAL_ETH_SetMDIOClockRange+0x28>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 800245c:	f444 7400 	orr.w	r4, r4, #512	; 0x200
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8002460:	682b      	ldr	r3, [r5, #0]
 8002462:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
}
 8002466:	bd38      	pop	{r3, r4, r5, pc}
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8002468:	4b10      	ldr	r3, [pc, #64]	; (80024ac <HAL_ETH_SetMDIOClockRange+0x6c>)
 800246a:	4a11      	ldr	r2, [pc, #68]	; (80024b0 <HAL_ETH_SetMDIOClockRange+0x70>)
 800246c:	4403      	add	r3, r0
 800246e:	4293      	cmp	r3, r2
 8002470:	d805      	bhi.n	800247e <HAL_ETH_SetMDIOClockRange+0x3e>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8002472:	f444 7440 	orr.w	r4, r4, #768	; 0x300
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8002476:	682b      	ldr	r3, [r5, #0]
 8002478:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
}
 800247c:	bd38      	pop	{r3, r4, r5, pc}
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 800247e:	4b0d      	ldr	r3, [pc, #52]	; (80024b4 <HAL_ETH_SetMDIOClockRange+0x74>)
 8002480:	4a0d      	ldr	r2, [pc, #52]	; (80024b8 <HAL_ETH_SetMDIOClockRange+0x78>)
 8002482:	4403      	add	r3, r0
 8002484:	4293      	cmp	r3, r2
 8002486:	d3eb      	bcc.n	8002460 <HAL_ETH_SetMDIOClockRange+0x20>
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8002488:	4b0c      	ldr	r3, [pc, #48]	; (80024bc <HAL_ETH_SetMDIOClockRange+0x7c>)
 800248a:	4a0d      	ldr	r2, [pc, #52]	; (80024c0 <HAL_ETH_SetMDIOClockRange+0x80>)
 800248c:	4403      	add	r3, r0
 800248e:	4293      	cmp	r3, r2
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8002490:	682b      	ldr	r3, [r5, #0]
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8002492:	bf94      	ite	ls
 8002494:	f444 7480 	orrls.w	r4, r4, #256	; 0x100
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8002498:	f444 6480 	orrhi.w	r4, r4, #1024	; 0x400
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 800249c:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
}
 80024a0:	bd38      	pop	{r3, r4, r5, pc}
 80024a2:	bf00      	nop
 80024a4:	feced300 	.word	0xfeced300
 80024a8:	00e4e1c0 	.word	0x00e4e1c0
 80024ac:	fde9f140 	.word	0xfde9f140
 80024b0:	017d783f 	.word	0x017d783f
 80024b4:	fc6c7900 	.word	0xfc6c7900
 80024b8:	02625a00 	.word	0x02625a00
 80024bc:	fa0a1f00 	.word	0xfa0a1f00
 80024c0:	02faf07f 	.word	0x02faf07f

080024c4 <HAL_ETH_Init>:
  if (heth == NULL)
 80024c4:	2800      	cmp	r0, #0
 80024c6:	f000 810e 	beq.w	80026e6 <HAL_ETH_Init+0x222>
  if (heth->gState == HAL_ETH_STATE_RESET)
 80024ca:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
{
 80024ce:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024d0:	4605      	mov	r5, r0
 80024d2:	b0a5      	sub	sp, #148	; 0x94
  if (heth->gState == HAL_ETH_STATE_RESET)
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	f000 80b2 	beq.w	800263e <HAL_ETH_Init+0x17a>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024da:	4b84      	ldr	r3, [pc, #528]	; (80026ec <HAL_ETH_Init+0x228>)
 80024dc:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 80024e0:	f042 0202 	orr.w	r2, r2, #2
 80024e4:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 80024e8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80024ec:	7a28      	ldrb	r0, [r5, #8]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024ee:	f003 0302 	and.w	r3, r3, #2
 80024f2:	9301      	str	r3, [sp, #4]
 80024f4:	9b01      	ldr	r3, [sp, #4]
  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80024f6:	2800      	cmp	r0, #0
 80024f8:	f040 8095 	bne.w	8002626 <HAL_ETH_Init+0x162>
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80024fc:	f7ff f886 	bl	800160c <HAL_SYSCFG_ETHInterfaceSelect>
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8002500:	682b      	ldr	r3, [r5, #0]
  (void)SYSCFG->PMCR;
 8002502:	4a7b      	ldr	r2, [pc, #492]	; (80026f0 <HAL_ETH_Init+0x22c>)
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8002504:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  (void)SYSCFG->PMCR;
 8002508:	6852      	ldr	r2, [r2, #4]
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	f042 0201 	orr.w	r2, r2, #1
 8002510:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8002512:	f7ff f86f 	bl	80015f4 <HAL_GetTick>
 8002516:	4606      	mov	r6, r0
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002518:	e006      	b.n	8002528 <HAL_ETH_Init+0x64>
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800251a:	f7ff f86b 	bl	80015f4 <HAL_GetTick>
 800251e:	1b83      	subs	r3, r0, r6
 8002520:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002524:	f200 8082 	bhi.w	800262c <HAL_ETH_Init+0x168>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002528:	682b      	ldr	r3, [r5, #0]
 800252a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800252e:	681c      	ldr	r4, [r3, #0]
 8002530:	f014 0401 	ands.w	r4, r4, #1
 8002534:	d1f1      	bne.n	800251a <HAL_ETH_Init+0x56>
  HAL_ETH_SetMDIOClockRange(heth);
 8002536:	4628      	mov	r0, r5
  macDefaultConf.ChecksumOffload = ENABLE;
 8002538:	2601      	movs	r6, #1
  HAL_ETH_SetMDIOClockRange(heth);
 800253a:	f7ff ff81 	bl	8002440 <HAL_ETH_SetMDIOClockRange>
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 800253e:	f000 fedf 	bl	8003300 <HAL_RCC_GetHCLKFreq>
 8002542:	4b6c      	ldr	r3, [pc, #432]	; (80026f4 <HAL_ETH_Init+0x230>)
 8002544:	682f      	ldr	r7, [r5, #0]
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8002546:	f04f 0e02 	mov.w	lr, #2
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 800254a:	fba3 2300 	umull	r2, r3, r3, r0
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800254e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002552:	a90b      	add	r1, sp, #44	; 0x2c
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002554:	9414      	str	r4, [sp, #80]	; 0x50
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8002556:	0c9b      	lsrs	r3, r3, #18
  macDefaultConf.DeferralCheck = DISABLE;
 8002558:	f88d 4054 	strb.w	r4, [sp, #84]	; 0x54
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800255c:	f88d 4064 	strb.w	r4, [sp, #100]	; 0x64
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8002560:	3b01      	subs	r3, #1
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8002562:	941a      	str	r4, [sp, #104]	; 0x68
  macDefaultConf.PauseTime = 0x0;
 8002564:	941d      	str	r4, [sp, #116]	; 0x74
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8002566:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 800256a:	f44f 63c3 	mov.w	r3, #1560	; 0x618
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 800256e:	f88d 406c 	strb.w	r4, [sp, #108]	; 0x6c
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8002572:	9318      	str	r3, [sp, #96]	; 0x60
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8002574:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
  macDefaultConf.ChecksumOffload = ENABLE;
 8002578:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 800257c:	930b      	str	r3, [sp, #44]	; 0x2c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800257e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  macDefaultConf.RetryTransmission = ENABLE;
 8002582:	f88d 604c 	strb.w	r6, [sp, #76]	; 0x4c
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8002586:	f8ad 608c 	strh.w	r6, [sp, #140]	; 0x8c
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800258a:	f88d 408e 	strb.w	r4, [sp, #142]	; 0x8e
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 800258e:	941f      	str	r4, [sp, #124]	; 0x7c
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002590:	f8ad 4080 	strh.w	r4, [sp, #128]	; 0x80
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002594:	f88d 4082 	strb.w	r4, [sp, #130]	; 0x82
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8002598:	9416      	str	r4, [sp, #88]	; 0x58
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800259a:	f8ad 405c 	strh.w	r4, [sp, #92]	; 0x5c
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 800259e:	f88d 605e 	strb.w	r6, [sp, #94]	; 0x5e
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80025a2:	940d      	str	r4, [sp, #52]	; 0x34
  macDefaultConf.JumboPacket = DISABLE;
 80025a4:	f88d 403e 	strb.w	r4, [sp, #62]	; 0x3e
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80025a8:	941c      	str	r4, [sp, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80025aa:	f88d 6078 	strb.w	r6, [sp, #120]	; 0x78
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80025ae:	e9cd 0310 	strd	r0, r3, [sp, #64]	; 0x40
  macDefaultConf.LoopbackMode = DISABLE;
 80025b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  ETH_SetMACConfig(heth, &macDefaultConf);
 80025b6:	4628      	mov	r0, r5
  macDefaultConf.LoopbackMode = DISABLE;
 80025b8:	9312      	str	r3, [sp, #72]	; 0x48
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80025ba:	2320      	movs	r3, #32
 80025bc:	e9cd e321 	strd	lr, r3, [sp, #132]	; 0x84
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80025c0:	4b4d      	ldr	r3, [pc, #308]	; (80026f8 <HAL_ETH_Init+0x234>)
 80025c2:	930e      	str	r3, [sp, #56]	; 0x38
  macDefaultConf.Watchdog = ENABLE;
 80025c4:	f240 1301 	movw	r3, #257	; 0x101
 80025c8:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
  ETH_SetMACConfig(heth, &macDefaultConf);
 80025cc:	f7ff f8d6 	bl	800177c <ETH_SetMACConfig>
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80025d0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80025d4:	a902      	add	r1, sp, #8
 80025d6:	4628      	mov	r0, r5
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80025d8:	f88d 600c 	strb.w	r6, [sp, #12]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80025dc:	9306      	str	r3, [sp, #24]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80025de:	9308      	str	r3, [sp, #32]
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 80025e0:	f44f 7306 	mov.w	r3, #536	; 0x218
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80025e4:	9402      	str	r4, [sp, #8]
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 80025e6:	930a      	str	r3, [sp, #40]	; 0x28
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80025e8:	9604      	str	r6, [sp, #16]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80025ea:	f8ad 4014 	strh.w	r4, [sp, #20]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80025ee:	f88d 401c 	strb.w	r4, [sp, #28]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80025f2:	f8ad 4024 	strh.w	r4, [sp, #36]	; 0x24
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80025f6:	f7ff f97d 	bl	80018f4 <ETH_SetDMAConfig>
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80025fa:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 80025fe:	f8d1 3100 	ldr.w	r3, [r1, #256]	; 0x100
 8002602:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8002606:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800260a:	f8c1 3100 	str.w	r3, [r1, #256]	; 0x100
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800260e:	696b      	ldr	r3, [r5, #20]
 8002610:	f013 0203 	ands.w	r2, r3, #3
 8002614:	d019      	beq.n	800264a <HAL_ETH_Init+0x186>
    heth->gState = HAL_ETH_STATE_ERROR;
 8002616:	23e0      	movs	r3, #224	; 0xe0
    return HAL_ERROR;
 8002618:	4630      	mov	r0, r6
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800261a:	f8c5 6088 	str.w	r6, [r5, #136]	; 0x88
    heth->gState = HAL_ETH_STATE_ERROR;
 800261e:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
}
 8002622:	b025      	add	sp, #148	; 0x94
 8002624:	bdf0      	pop	{r4, r5, r6, r7, pc}
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8002626:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800262a:	e767      	b.n	80024fc <HAL_ETH_Init+0x38>
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800262c:	2204      	movs	r2, #4
      heth->gState = HAL_ETH_STATE_ERROR;
 800262e:	23e0      	movs	r3, #224	; 0xe0
      return HAL_ERROR;
 8002630:	2001      	movs	r0, #1
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002632:	f8c5 2088 	str.w	r2, [r5, #136]	; 0x88
      heth->gState = HAL_ETH_STATE_ERROR;
 8002636:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
}
 800263a:	b025      	add	sp, #148	; 0x94
 800263c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    heth->gState = HAL_ETH_STATE_BUSY;
 800263e:	2323      	movs	r3, #35	; 0x23
 8002640:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    HAL_ETH_MspInit(heth);
 8002644:	f001 faf6 	bl	8003c34 <HAL_ETH_MspInit>
 8002648:	e747      	b.n	80024da <HAL_ETH_Init+0x16>
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800264a:	f8d1 4108 	ldr.w	r4, [r1, #264]	; 0x108
 800264e:	482b      	ldr	r0, [pc, #172]	; (80026fc <HAL_ETH_Init+0x238>)
 8002650:	68ee      	ldr	r6, [r5, #12]
 8002652:	4020      	ands	r0, r4
 8002654:	f106 0460 	add.w	r4, r6, #96	; 0x60
 8002658:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
    dmatxdesc = heth->Init.TxDesc + i;
 800265c:	4633      	mov	r3, r6
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800265e:	f8c1 0108 	str.w	r0, [r1, #264]	; 0x108
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002662:	f105 0014 	add.w	r0, r5, #20
    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002666:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002668:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800266a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800266c:	60da      	str	r2, [r3, #12]
    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800266e:	f840 3f04 	str.w	r3, [r0, #4]!
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002672:	3318      	adds	r3, #24
 8002674:	42a3      	cmp	r3, r4
 8002676:	d1f6      	bne.n	8002666 <HAL_ETH_Init+0x1a2>
    dmarxdesc =  heth->Init.RxDesc + i;
 8002678:	692c      	ldr	r4, [r5, #16]
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 800267a:	2303      	movs	r3, #3
  heth->TxDescList.CurTxDesc = 0;
 800267c:	62aa      	str	r2, [r5, #40]	; 0x28
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 800267e:	f105 0044 	add.w	r0, r5, #68	; 0x44
 8002682:	f8c1 312c 	str.w	r3, [r1, #300]	; 0x12c
    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002686:	2200      	movs	r2, #0
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8002688:	f8c1 6114 	str.w	r6, [r1, #276]	; 0x114
    dmarxdesc =  heth->Init.RxDesc + i;
 800268c:	4623      	mov	r3, r4
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 800268e:	f8c1 6120 	str.w	r6, [r1, #288]	; 0x120
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002692:	f105 0654 	add.w	r6, r5, #84	; 0x54
    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002696:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002698:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800269a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800269c:	615a      	str	r2, [r3, #20]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800269e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80026a0:	60da      	str	r2, [r3, #12]
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80026a2:	f840 3f04 	str.w	r3, [r0, #4]!
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80026a6:	42b0      	cmp	r0, r6
 80026a8:	f103 0318 	add.w	r3, r3, #24
 80026ac:	d1f3      	bne.n	8002696 <HAL_ETH_Init+0x1d2>
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 80026ae:	2003      	movs	r0, #3
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80026b0:	686b      	ldr	r3, [r5, #4]
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80026b2:	65aa      	str	r2, [r5, #88]	; 0x58
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80026b4:	e9c5 2217 	strd	r2, r2, [r5, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80026b8:	e9c5 221a 	strd	r2, r2, [r5, #104]	; 0x68
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 80026bc:	f8c1 0130 	str.w	r0, [r1, #304]	; 0x130
  return HAL_OK;
 80026c0:	2000      	movs	r0, #0
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80026c2:	f8c1 411c 	str.w	r4, [r1, #284]	; 0x11c
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 80026c6:	3448      	adds	r4, #72	; 0x48
 80026c8:	f8c1 4128 	str.w	r4, [r1, #296]	; 0x128
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80026cc:	8899      	ldrh	r1, [r3, #4]
 80026ce:	f8c7 1300 	str.w	r1, [r7, #768]	; 0x300
  heth->gState = HAL_ETH_STATE_READY;
 80026d2:	2110      	movs	r1, #16
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80026d4:	681b      	ldr	r3, [r3, #0]
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80026d6:	f8c7 3304 	str.w	r3, [r7, #772]	; 0x304
  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80026da:	f8c5 2088 	str.w	r2, [r5, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80026de:	f8c5 1084 	str.w	r1, [r5, #132]	; 0x84
}
 80026e2:	b025      	add	sp, #148	; 0x94
 80026e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_ERROR;
 80026e6:	2001      	movs	r0, #1
}
 80026e8:	4770      	bx	lr
 80026ea:	bf00      	nop
 80026ec:	58024400 	.word	0x58024400
 80026f0:	58000400 	.word	0x58000400
 80026f4:	431bde83 	.word	0x431bde83
 80026f8:	01010000 	.word	0x01010000
 80026fc:	ffff8001 	.word	0xffff8001

08002700 <HAL_ETH_GetDMAError>:
  return heth->DMAErrorCode;
 8002700:	f8d0 008c 	ldr.w	r0, [r0, #140]	; 0x8c
}
 8002704:	4770      	bx	lr
 8002706:	bf00      	nop

08002708 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800270c:	680c      	ldr	r4, [r1, #0]
{
 800270e:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002710:	2c00      	cmp	r4, #0
 8002712:	f000 80a7 	beq.w	8002864 <HAL_GPIO_Init+0x15c>
 8002716:	f04f 0c00 	mov.w	ip, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800271a:	4f8a      	ldr	r7, [pc, #552]	; (8002944 <HAL_GPIO_Init+0x23c>)
  uint32_t position = 0x00U;
 800271c:	4663      	mov	r3, ip
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800271e:	2201      	movs	r2, #1
 8002720:	409a      	lsls	r2, r3
    if (iocurrent != 0x00U)
 8002722:	ea12 0e04 	ands.w	lr, r2, r4
 8002726:	f000 8096 	beq.w	8002856 <HAL_GPIO_Init+0x14e>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800272a:	684d      	ldr	r5, [r1, #4]
 800272c:	f005 0903 	and.w	r9, r5, #3
 8002730:	f109 36ff 	add.w	r6, r9, #4294967295
 8002734:	2e01      	cmp	r6, #1
 8002736:	f240 8098 	bls.w	800286a <HAL_GPIO_Init+0x162>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800273a:	f1b9 0f03 	cmp.w	r9, #3
 800273e:	f040 80d2 	bne.w	80028e6 <HAL_GPIO_Init+0x1de>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002742:	fa09 f20c 	lsl.w	r2, r9, ip
 8002746:	ea6f 0802 	mvn.w	r8, r2
      temp = GPIOx->MODER;
 800274a:	6806      	ldr	r6, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800274c:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002750:	ea06 0608 	and.w	r6, r6, r8
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002754:	ea42 0206 	orr.w	r2, r2, r6
      GPIOx->MODER = temp;
 8002758:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800275a:	d07c      	beq.n	8002856 <HAL_GPIO_Init+0x14e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800275c:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8002760:	f023 0803 	bic.w	r8, r3, #3

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002764:	f003 0903 	and.w	r9, r3, #3
 8002768:	260f      	movs	r6, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800276a:	f042 0202 	orr.w	r2, r2, #2
 800276e:	f108 48b0 	add.w	r8, r8, #1476395008	; 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002772:	ea4f 0989 	mov.w	r9, r9, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002776:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 800277a:	f508 6880 	add.w	r8, r8, #1024	; 0x400
 800277e:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002782:	fa06 f609 	lsl.w	r6, r6, r9
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002786:	f002 0202 	and.w	r2, r2, #2
 800278a:	9201      	str	r2, [sp, #4]
 800278c:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 800278e:	f8d8 2008 	ldr.w	r2, [r8, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002792:	ea22 0206 	bic.w	r2, r2, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002796:	4e6c      	ldr	r6, [pc, #432]	; (8002948 <HAL_GPIO_Init+0x240>)
 8002798:	42b0      	cmp	r0, r6
 800279a:	d028      	beq.n	80027ee <HAL_GPIO_Init+0xe6>
 800279c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80027a0:	42b0      	cmp	r0, r6
 80027a2:	f000 80ac 	beq.w	80028fe <HAL_GPIO_Init+0x1f6>
 80027a6:	4e69      	ldr	r6, [pc, #420]	; (800294c <HAL_GPIO_Init+0x244>)
 80027a8:	42b0      	cmp	r0, r6
 80027aa:	f000 80ad 	beq.w	8002908 <HAL_GPIO_Init+0x200>
 80027ae:	4e68      	ldr	r6, [pc, #416]	; (8002950 <HAL_GPIO_Init+0x248>)
 80027b0:	42b0      	cmp	r0, r6
 80027b2:	f000 809f 	beq.w	80028f4 <HAL_GPIO_Init+0x1ec>
 80027b6:	4e67      	ldr	r6, [pc, #412]	; (8002954 <HAL_GPIO_Init+0x24c>)
 80027b8:	42b0      	cmp	r0, r6
 80027ba:	f000 80af 	beq.w	800291c <HAL_GPIO_Init+0x214>
 80027be:	4e66      	ldr	r6, [pc, #408]	; (8002958 <HAL_GPIO_Init+0x250>)
 80027c0:	42b0      	cmp	r0, r6
 80027c2:	f000 80b0 	beq.w	8002926 <HAL_GPIO_Init+0x21e>
 80027c6:	4e65      	ldr	r6, [pc, #404]	; (800295c <HAL_GPIO_Init+0x254>)
 80027c8:	42b0      	cmp	r0, r6
 80027ca:	f000 80a2 	beq.w	8002912 <HAL_GPIO_Init+0x20a>
 80027ce:	4e64      	ldr	r6, [pc, #400]	; (8002960 <HAL_GPIO_Init+0x258>)
 80027d0:	42b0      	cmp	r0, r6
 80027d2:	f000 80ad 	beq.w	8002930 <HAL_GPIO_Init+0x228>
 80027d6:	4e63      	ldr	r6, [pc, #396]	; (8002964 <HAL_GPIO_Init+0x25c>)
 80027d8:	42b0      	cmp	r0, r6
 80027da:	f000 80ae 	beq.w	800293a <HAL_GPIO_Init+0x232>
 80027de:	4e62      	ldr	r6, [pc, #392]	; (8002968 <HAL_GPIO_Init+0x260>)
 80027e0:	42b0      	cmp	r0, r6
 80027e2:	bf0c      	ite	eq
 80027e4:	2609      	moveq	r6, #9
 80027e6:	260a      	movne	r6, #10
 80027e8:	fa06 f609 	lsl.w	r6, r6, r9
 80027ec:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2U] = temp;
 80027ee:	f8c8 2008 	str.w	r2, [r8, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80027f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80027f6:	f415 1f80 	tst.w	r5, #1048576	; 0x100000
        temp &= ~(iocurrent);
 80027fa:	ea6f 060e 	mvn.w	r6, lr
        temp = EXTI->RTSR1;
 80027fe:	6812      	ldr	r2, [r2, #0]
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 8002800:	f04f 48b0 	mov.w	r8, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 8002804:	bf0c      	ite	eq
 8002806:	4032      	andeq	r2, r6
          temp |= iocurrent;
 8002808:	ea4e 0202 	orrne.w	r2, lr, r2

        temp = EXTI->FTSR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800280c:	f415 1f00 	tst.w	r5, #2097152	; 0x200000
        EXTI->RTSR1 = temp;
 8002810:	f8c8 2000 	str.w	r2, [r8]
        temp = EXTI->FTSR1;
 8002814:	f8d8 2004 	ldr.w	r2, [r8, #4]
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 8002818:	f04f 48b0 	mov.w	r8, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 800281c:	bf0c      	ite	eq
 800281e:	4032      	andeq	r2, r6
          temp |= iocurrent;
 8002820:	ea4e 0202 	orrne.w	r2, lr, r2

        temp = EXTI_CurrentCPU->EMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002824:	f415 3f00 	tst.w	r5, #131072	; 0x20000
        EXTI->FTSR1 = temp;
 8002828:	f8c8 2004 	str.w	r2, [r8, #4]
        temp = EXTI_CurrentCPU->EMR1;
 800282c:	f8d8 2084 	ldr.w	r2, [r8, #132]	; 0x84
        {
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002830:	f04f 48b0 	mov.w	r8, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 8002834:	bf0c      	ite	eq
 8002836:	4032      	andeq	r2, r6
          temp |= iocurrent;
 8002838:	ea4e 0202 	orrne.w	r2, lr, r2

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800283c:	03ed      	lsls	r5, r5, #15
        {
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800283e:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
        EXTI_CurrentCPU->EMR1 = temp;
 8002842:	f8c8 2084 	str.w	r2, [r8, #132]	; 0x84
        temp = EXTI_CurrentCPU->IMR1;
 8002846:	f8d8 2080 	ldr.w	r2, [r8, #128]	; 0x80
        temp &= ~(iocurrent);
 800284a:	bf54      	ite	pl
 800284c:	4032      	andpl	r2, r6
          temp |= iocurrent;
 800284e:	ea4e 0202 	orrmi.w	r2, lr, r2
        EXTI_CurrentCPU->IMR1 = temp;
 8002852:	f8c5 2080 	str.w	r2, [r5, #128]	; 0x80
      }
    }

    position++;
 8002856:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002858:	f10c 0c02 	add.w	ip, ip, #2
 800285c:	fa34 f203 	lsrs.w	r2, r4, r3
 8002860:	f47f af5d 	bne.w	800271e <HAL_GPIO_Init+0x16>
  }
}
 8002864:	b003      	add	sp, #12
 8002866:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800286a:	f04f 0803 	mov.w	r8, #3
        temp = GPIOx->OSPEEDR;
 800286e:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002870:	fa08 f80c 	lsl.w	r8, r8, ip
 8002874:	ea26 0a08 	bic.w	sl, r6, r8
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002878:	68ce      	ldr	r6, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800287a:	ea6f 0808 	mvn.w	r8, r8
        temp |= (GPIO_Init->Speed << (position * 2U));
 800287e:	fa06 f60c 	lsl.w	r6, r6, ip
 8002882:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OSPEEDR = temp;
 8002886:	6086      	str	r6, [r0, #8]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002888:	f3c5 1600 	ubfx	r6, r5, #4, #1
        temp = GPIOx->OTYPER;
 800288c:	f8d0 a004 	ldr.w	sl, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002890:	409e      	lsls	r6, r3
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002892:	ea2a 0202 	bic.w	r2, sl, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002896:	4332      	orrs	r2, r6
        GPIOx->OTYPER = temp;
 8002898:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 800289a:	68c2      	ldr	r2, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800289c:	f1b9 0f02 	cmp.w	r9, #2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028a0:	688e      	ldr	r6, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80028a2:	ea02 0208 	and.w	r2, r2, r8
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028a6:	fa06 f60c 	lsl.w	r6, r6, ip
 80028aa:	ea46 0602 	orr.w	r6, r6, r2
      GPIOx->PUPDR = temp;
 80028ae:	fa09 f20c 	lsl.w	r2, r9, ip
 80028b2:	60c6      	str	r6, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028b4:	f47f af49 	bne.w	800274a <HAL_GPIO_Init+0x42>
        temp = GPIOx->AFR[position >> 3U];
 80028b8:	ea4f 09d3 	mov.w	r9, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80028bc:	f003 0b07 	and.w	fp, r3, #7
 80028c0:	260f      	movs	r6, #15
 80028c2:	eb00 0989 	add.w	r9, r0, r9, lsl #2
 80028c6:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3U];
 80028ca:	f8d9 a020 	ldr.w	sl, [r9, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80028ce:	fa06 f60b 	lsl.w	r6, r6, fp
 80028d2:	ea2a 0a06 	bic.w	sl, sl, r6
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80028d6:	690e      	ldr	r6, [r1, #16]
 80028d8:	fa06 f60b 	lsl.w	r6, r6, fp
 80028dc:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->AFR[position >> 3U] = temp;
 80028e0:	f8c9 6020 	str.w	r6, [r9, #32]
 80028e4:	e731      	b.n	800274a <HAL_GPIO_Init+0x42>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80028e6:	f04f 0803 	mov.w	r8, #3
 80028ea:	fa08 f80c 	lsl.w	r8, r8, ip
 80028ee:	ea6f 0808 	mvn.w	r8, r8
 80028f2:	e7d2      	b.n	800289a <HAL_GPIO_Init+0x192>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80028f4:	2603      	movs	r6, #3
 80028f6:	fa06 f609 	lsl.w	r6, r6, r9
 80028fa:	4332      	orrs	r2, r6
 80028fc:	e777      	b.n	80027ee <HAL_GPIO_Init+0xe6>
 80028fe:	2601      	movs	r6, #1
 8002900:	fa06 f609 	lsl.w	r6, r6, r9
 8002904:	4332      	orrs	r2, r6
 8002906:	e772      	b.n	80027ee <HAL_GPIO_Init+0xe6>
 8002908:	2602      	movs	r6, #2
 800290a:	fa06 f609 	lsl.w	r6, r6, r9
 800290e:	4332      	orrs	r2, r6
 8002910:	e76d      	b.n	80027ee <HAL_GPIO_Init+0xe6>
 8002912:	2606      	movs	r6, #6
 8002914:	fa06 f609 	lsl.w	r6, r6, r9
 8002918:	4332      	orrs	r2, r6
 800291a:	e768      	b.n	80027ee <HAL_GPIO_Init+0xe6>
 800291c:	2604      	movs	r6, #4
 800291e:	fa06 f609 	lsl.w	r6, r6, r9
 8002922:	4332      	orrs	r2, r6
 8002924:	e763      	b.n	80027ee <HAL_GPIO_Init+0xe6>
 8002926:	2605      	movs	r6, #5
 8002928:	fa06 f609 	lsl.w	r6, r6, r9
 800292c:	4332      	orrs	r2, r6
 800292e:	e75e      	b.n	80027ee <HAL_GPIO_Init+0xe6>
 8002930:	2607      	movs	r6, #7
 8002932:	fa06 f609 	lsl.w	r6, r6, r9
 8002936:	4332      	orrs	r2, r6
 8002938:	e759      	b.n	80027ee <HAL_GPIO_Init+0xe6>
 800293a:	2608      	movs	r6, #8
 800293c:	fa06 f609 	lsl.w	r6, r6, r9
 8002940:	4332      	orrs	r2, r6
 8002942:	e754      	b.n	80027ee <HAL_GPIO_Init+0xe6>
 8002944:	58024400 	.word	0x58024400
 8002948:	58020000 	.word	0x58020000
 800294c:	58020800 	.word	0x58020800
 8002950:	58020c00 	.word	0x58020c00
 8002954:	58021000 	.word	0x58021000
 8002958:	58021400 	.word	0x58021400
 800295c:	58021800 	.word	0x58021800
 8002960:	58021c00 	.word	0x58021c00
 8002964:	58022000 	.word	0x58022000
 8002968:	58022400 	.word	0x58022400

0800296c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800296c:	b902      	cbnz	r2, 8002970 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800296e:	0409      	lsls	r1, r1, #16
 8002970:	6181      	str	r1, [r0, #24]
  }
}
 8002972:	4770      	bx	lr

08002974 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002974:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002976:	4c10      	ldr	r4, [pc, #64]	; (80029b8 <HAL_PWREx_ConfigSupply+0x44>)
 8002978:	68e3      	ldr	r3, [r4, #12]
 800297a:	f013 0f04 	tst.w	r3, #4
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800297e:	68e3      	ldr	r3, [r4, #12]
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002980:	d105      	bne.n	800298e <HAL_PWREx_ConfigSupply+0x1a>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002982:	f003 0307 	and.w	r3, r3, #7
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002986:	1a18      	subs	r0, r3, r0
 8002988:	bf18      	it	ne
 800298a:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 800298c:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800298e:	f023 0307 	bic.w	r3, r3, #7
 8002992:	4303      	orrs	r3, r0
 8002994:	60e3      	str	r3, [r4, #12]
  tickstart = HAL_GetTick ();
 8002996:	f7fe fe2d 	bl	80015f4 <HAL_GetTick>
 800299a:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800299c:	e005      	b.n	80029aa <HAL_PWREx_ConfigSupply+0x36>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800299e:	f7fe fe29 	bl	80015f4 <HAL_GetTick>
 80029a2:	1b40      	subs	r0, r0, r5
 80029a4:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80029a8:	d804      	bhi.n	80029b4 <HAL_PWREx_ConfigSupply+0x40>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80029aa:	6863      	ldr	r3, [r4, #4]
 80029ac:	049b      	lsls	r3, r3, #18
 80029ae:	d5f6      	bpl.n	800299e <HAL_PWREx_ConfigSupply+0x2a>
  return HAL_OK;
 80029b0:	2000      	movs	r0, #0
}
 80029b2:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 80029b4:	2001      	movs	r0, #1
}
 80029b6:	bd38      	pop	{r3, r4, r5, pc}
 80029b8:	58024800 	.word	0x58024800

080029bc <HAL_RCC_GetSysClockFreq.part.0>:
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80029bc:	4b3b      	ldr	r3, [pc, #236]	; (8002aac <HAL_RCC_GetSysClockFreq.part.0+0xf0>)
uint32_t HAL_RCC_GetSysClockFreq(void)
 80029be:	b430      	push	{r4, r5}
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80029c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80029c2:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80029c4:	6add      	ldr	r5, [r3, #44]	; 0x2c
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));

    if (pllm != 0U)
 80029c6:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80029ca:	6b59      	ldr	r1, [r3, #52]	; 0x34
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80029cc:	f3c4 1005 	ubfx	r0, r4, #4, #6
    if (pllm != 0U)
 80029d0:	d038      	beq.n	8002a44 <HAL_RCC_GetSysClockFreq.part.0+0x88>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80029d2:	f3c1 01cc 	ubfx	r1, r1, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80029d6:	f005 0501 	and.w	r5, r5, #1
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80029da:	f002 0203 	and.w	r2, r2, #3
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80029de:	fb05 f101 	mul.w	r1, r5, r1
 80029e2:	2a01      	cmp	r2, #1
 80029e4:	ee07 1a90 	vmov	s15, r1
 80029e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    {
      switch (pllsource)
 80029ec:	d002      	beq.n	80029f4 <HAL_RCC_GetSysClockFreq.part.0+0x38>
 80029ee:	2a02      	cmp	r2, #2
 80029f0:	d04e      	beq.n	8002a90 <HAL_RCC_GetSysClockFreq.part.0+0xd4>
 80029f2:	b34a      	cbz	r2, 8002a48 <HAL_RCC_GetSysClockFreq.part.0+0x8c>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        break;

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80029f4:	ee07 0a90 	vmov	s15, r0
 80029f8:	ed9f 5a2d 	vldr	s10, [pc, #180]	; 8002ab0 <HAL_RCC_GetSysClockFreq.part.0+0xf4>
 80029fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a02:	eec5 6a27 	vdiv.f32	s13, s10, s15
 8002a06:	eddf 5a2b 	vldr	s11, [pc, #172]	; 8002ab4 <HAL_RCC_GetSysClockFreq.part.0+0xf8>
 8002a0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a0e:	ee07 3a90 	vmov	s15, r3
 8002a12:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8002a16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a1a:	eee7 7a25 	vfma.f32	s15, s14, s11
 8002a1e:	ee77 7a86 	vadd.f32	s15, s15, s12
 8002a22:	ee66 6aa7 	vmul.f32	s13, s13, s15
        break;
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8002a26:	4b21      	ldr	r3, [pc, #132]	; (8002aac <HAL_RCC_GetSysClockFreq.part.0+0xf0>)
 8002a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a2a:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8002a2e:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8002a30:	ee07 3a90 	vmov	s15, r3
 8002a34:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002a38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002a3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a40:	ee17 0a90 	vmov	r0, s15
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 8002a44:	bc30      	pop	{r4, r5}
 8002a46:	4770      	bx	lr
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	0692      	lsls	r2, r2, #26
 8002a4c:	d527      	bpl.n	8002a9e <HAL_RCC_GetSysClockFreq.part.0+0xe2>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002a4e:	6819      	ldr	r1, [r3, #0]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002a50:	ee07 0a90 	vmov	s15, r0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002a54:	4a18      	ldr	r2, [pc, #96]	; (8002ab8 <HAL_RCC_GetSysClockFreq.part.0+0xfc>)
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002a56:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8002a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002a5c:	f3c1 01c1 	ubfx	r1, r1, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002a60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a64:	ed9f 5a13 	vldr	s10, [pc, #76]	; 8002ab4 <HAL_RCC_GetSysClockFreq.part.0+0xf8>
 8002a68:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002a6c:	40ca      	lsrs	r2, r1
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002a6e:	ee06 3a90 	vmov	s13, r3
 8002a72:	ee06 2a10 	vmov	s12, r2
 8002a76:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8002a7a:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8002a7e:	eee7 6a05 	vfma.f32	s13, s14, s10
 8002a82:	ee86 7a27 	vdiv.f32	s14, s12, s15
 8002a86:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8002a8a:	ee66 6a87 	vmul.f32	s13, s13, s14
 8002a8e:	e7ca      	b.n	8002a26 <HAL_RCC_GetSysClockFreq.part.0+0x6a>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002a90:	ee07 0a90 	vmov	s15, r0
 8002a94:	ed9f 5a09 	vldr	s10, [pc, #36]	; 8002abc <HAL_RCC_GetSysClockFreq.part.0+0x100>
 8002a98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a9c:	e7b0      	b.n	8002a00 <HAL_RCC_GetSysClockFreq.part.0+0x44>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002a9e:	ee07 0a90 	vmov	s15, r0
 8002aa2:	ed9f 5a07 	vldr	s10, [pc, #28]	; 8002ac0 <HAL_RCC_GetSysClockFreq.part.0+0x104>
 8002aa6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002aaa:	e7a9      	b.n	8002a00 <HAL_RCC_GetSysClockFreq.part.0+0x44>
 8002aac:	58024400 	.word	0x58024400
 8002ab0:	4a742400 	.word	0x4a742400
 8002ab4:	39000000 	.word	0x39000000
 8002ab8:	03d09000 	.word	0x03d09000
 8002abc:	4bbebc20 	.word	0x4bbebc20
 8002ac0:	4c742400 	.word	0x4c742400

08002ac4 <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 8002ac4:	2800      	cmp	r0, #0
 8002ac6:	f000 81e8 	beq.w	8002e9a <HAL_RCC_OscConfig+0x3d6>
{
 8002aca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002acc:	6803      	ldr	r3, [r0, #0]
 8002ace:	4604      	mov	r4, r0
 8002ad0:	07d9      	lsls	r1, r3, #31
 8002ad2:	d52e      	bpl.n	8002b32 <HAL_RCC_OscConfig+0x6e>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ad4:	49a4      	ldr	r1, [pc, #656]	; (8002d68 <HAL_RCC_OscConfig+0x2a4>)
 8002ad6:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002ad8:	6a89      	ldr	r1, [r1, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ada:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002ade:	2a10      	cmp	r2, #16
 8002ae0:	f000 8107 	beq.w	8002cf2 <HAL_RCC_OscConfig+0x22e>
 8002ae4:	2a18      	cmp	r2, #24
 8002ae6:	f000 80ff 	beq.w	8002ce8 <HAL_RCC_OscConfig+0x224>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002aea:	6863      	ldr	r3, [r4, #4]
 8002aec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002af0:	f000 812a 	beq.w	8002d48 <HAL_RCC_OscConfig+0x284>
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	f000 8168 	beq.w	8002dca <HAL_RCC_OscConfig+0x306>
 8002afa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002afe:	4b9a      	ldr	r3, [pc, #616]	; (8002d68 <HAL_RCC_OscConfig+0x2a4>)
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	f000 8269 	beq.w	8002fd8 <HAL_RCC_OscConfig+0x514>
 8002b06:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002b0a:	601a      	str	r2, [r3, #0]
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002b12:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002b14:	f7fe fd6e 	bl	80015f4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002b18:	4e93      	ldr	r6, [pc, #588]	; (8002d68 <HAL_RCC_OscConfig+0x2a4>)
        tickstart = HAL_GetTick();
 8002b1a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002b1c:	e005      	b.n	8002b2a <HAL_RCC_OscConfig+0x66>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b1e:	f7fe fd69 	bl	80015f4 <HAL_GetTick>
 8002b22:	1b40      	subs	r0, r0, r5
 8002b24:	2864      	cmp	r0, #100	; 0x64
 8002b26:	f200 814e 	bhi.w	8002dc6 <HAL_RCC_OscConfig+0x302>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002b2a:	6833      	ldr	r3, [r6, #0]
 8002b2c:	039b      	lsls	r3, r3, #14
 8002b2e:	d5f6      	bpl.n	8002b1e <HAL_RCC_OscConfig+0x5a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b30:	6823      	ldr	r3, [r4, #0]
 8002b32:	079d      	lsls	r5, r3, #30
 8002b34:	f100 808a 	bmi.w	8002c4c <HAL_RCC_OscConfig+0x188>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002b38:	06d9      	lsls	r1, r3, #27
 8002b3a:	d533      	bpl.n	8002ba4 <HAL_RCC_OscConfig+0xe0>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b3c:	4a8a      	ldr	r2, [pc, #552]	; (8002d68 <HAL_RCC_OscConfig+0x2a4>)
 8002b3e:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002b40:	6a92      	ldr	r2, [r2, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b42:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002b46:	2b08      	cmp	r3, #8
 8002b48:	f000 80e3 	beq.w	8002d12 <HAL_RCC_OscConfig+0x24e>
 8002b4c:	2b18      	cmp	r3, #24
 8002b4e:	f000 80db 	beq.w	8002d08 <HAL_RCC_OscConfig+0x244>
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002b52:	69e3      	ldr	r3, [r4, #28]
        __HAL_RCC_CSI_ENABLE();
 8002b54:	4d84      	ldr	r5, [pc, #528]	; (8002d68 <HAL_RCC_OscConfig+0x2a4>)
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	f000 816f 	beq.w	8002e3a <HAL_RCC_OscConfig+0x376>
        __HAL_RCC_CSI_ENABLE();
 8002b5c:	682b      	ldr	r3, [r5, #0]
 8002b5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b62:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002b64:	f7fe fd46 	bl	80015f4 <HAL_GetTick>
 8002b68:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002b6a:	e005      	b.n	8002b78 <HAL_RCC_OscConfig+0xb4>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002b6c:	f7fe fd42 	bl	80015f4 <HAL_GetTick>
 8002b70:	1b80      	subs	r0, r0, r6
 8002b72:	2802      	cmp	r0, #2
 8002b74:	f200 8127 	bhi.w	8002dc6 <HAL_RCC_OscConfig+0x302>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002b78:	682b      	ldr	r3, [r5, #0]
 8002b7a:	05db      	lsls	r3, r3, #23
 8002b7c:	d5f6      	bpl.n	8002b6c <HAL_RCC_OscConfig+0xa8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002b7e:	f7fe fd3f 	bl	8001600 <HAL_GetREVID>
 8002b82:	f241 0303 	movw	r3, #4099	; 0x1003
 8002b86:	4298      	cmp	r0, r3
 8002b88:	f200 8247 	bhi.w	800301a <HAL_RCC_OscConfig+0x556>
 8002b8c:	6a22      	ldr	r2, [r4, #32]
 8002b8e:	686b      	ldr	r3, [r5, #4]
 8002b90:	2a20      	cmp	r2, #32
 8002b92:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002b96:	bf0c      	ite	eq
 8002b98:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 8002b9c:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 8002ba0:	606b      	str	r3, [r5, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ba2:	6823      	ldr	r3, [r4, #0]
 8002ba4:	071d      	lsls	r5, r3, #28
 8002ba6:	d516      	bpl.n	8002bd6 <HAL_RCC_OscConfig+0x112>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002ba8:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 8002baa:	4d6f      	ldr	r5, [pc, #444]	; (8002d68 <HAL_RCC_OscConfig+0x2a4>)
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	f000 8122 	beq.w	8002df6 <HAL_RCC_OscConfig+0x332>
      __HAL_RCC_LSI_ENABLE();
 8002bb2:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8002bb4:	f043 0301 	orr.w	r3, r3, #1
 8002bb8:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8002bba:	f7fe fd1b 	bl	80015f4 <HAL_GetTick>
 8002bbe:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002bc0:	e005      	b.n	8002bce <HAL_RCC_OscConfig+0x10a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bc2:	f7fe fd17 	bl	80015f4 <HAL_GetTick>
 8002bc6:	1b80      	subs	r0, r0, r6
 8002bc8:	2802      	cmp	r0, #2
 8002bca:	f200 80fc 	bhi.w	8002dc6 <HAL_RCC_OscConfig+0x302>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002bce:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8002bd0:	0798      	lsls	r0, r3, #30
 8002bd2:	d5f6      	bpl.n	8002bc2 <HAL_RCC_OscConfig+0xfe>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002bd4:	6823      	ldr	r3, [r4, #0]
 8002bd6:	069a      	lsls	r2, r3, #26
 8002bd8:	d516      	bpl.n	8002c08 <HAL_RCC_OscConfig+0x144>
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002bda:	69a3      	ldr	r3, [r4, #24]
      __HAL_RCC_HSI48_ENABLE();
 8002bdc:	4d62      	ldr	r5, [pc, #392]	; (8002d68 <HAL_RCC_OscConfig+0x2a4>)
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	f000 811a 	beq.w	8002e18 <HAL_RCC_OscConfig+0x354>
      __HAL_RCC_HSI48_ENABLE();
 8002be4:	682b      	ldr	r3, [r5, #0]
 8002be6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002bea:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8002bec:	f7fe fd02 	bl	80015f4 <HAL_GetTick>
 8002bf0:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002bf2:	e005      	b.n	8002c00 <HAL_RCC_OscConfig+0x13c>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002bf4:	f7fe fcfe 	bl	80015f4 <HAL_GetTick>
 8002bf8:	1b80      	subs	r0, r0, r6
 8002bfa:	2802      	cmp	r0, #2
 8002bfc:	f200 80e3 	bhi.w	8002dc6 <HAL_RCC_OscConfig+0x302>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002c00:	682b      	ldr	r3, [r5, #0]
 8002c02:	049f      	lsls	r7, r3, #18
 8002c04:	d5f6      	bpl.n	8002bf4 <HAL_RCC_OscConfig+0x130>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c06:	6823      	ldr	r3, [r4, #0]
 8002c08:	0759      	lsls	r1, r3, #29
 8002c0a:	f100 80a3 	bmi.w	8002d54 <HAL_RCC_OscConfig+0x290>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c0e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8002c10:	b1d0      	cbz	r0, 8002c48 <HAL_RCC_OscConfig+0x184>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002c12:	4d55      	ldr	r5, [pc, #340]	; (8002d68 <HAL_RCC_OscConfig+0x2a4>)
 8002c14:	692b      	ldr	r3, [r5, #16]
 8002c16:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002c1a:	2b18      	cmp	r3, #24
 8002c1c:	f000 81ae 	beq.w	8002f7c <HAL_RCC_OscConfig+0x4b8>
        __HAL_RCC_PLL_DISABLE();
 8002c20:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c22:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8002c24:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c28:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c2a:	f000 8142 	beq.w	8002eb2 <HAL_RCC_OscConfig+0x3ee>
        tickstart = HAL_GetTick();
 8002c2e:	f7fe fce1 	bl	80015f4 <HAL_GetTick>
 8002c32:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002c34:	e005      	b.n	8002c42 <HAL_RCC_OscConfig+0x17e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c36:	f7fe fcdd 	bl	80015f4 <HAL_GetTick>
 8002c3a:	1b00      	subs	r0, r0, r4
 8002c3c:	2802      	cmp	r0, #2
 8002c3e:	f200 80c2 	bhi.w	8002dc6 <HAL_RCC_OscConfig+0x302>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002c42:	682b      	ldr	r3, [r5, #0]
 8002c44:	019b      	lsls	r3, r3, #6
 8002c46:	d4f6      	bmi.n	8002c36 <HAL_RCC_OscConfig+0x172>
  return HAL_OK;
 8002c48:	2000      	movs	r0, #0
}
 8002c4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c4c:	4a46      	ldr	r2, [pc, #280]	; (8002d68 <HAL_RCC_OscConfig+0x2a4>)
 8002c4e:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002c50:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002c52:	f013 0338 	ands.w	r3, r3, #56	; 0x38
 8002c56:	d12d      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x1f0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c58:	4b43      	ldr	r3, [pc, #268]	; (8002d68 <HAL_RCC_OscConfig+0x2a4>)
 8002c5a:	68e2      	ldr	r2, [r4, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	0759      	lsls	r1, r3, #29
 8002c60:	d501      	bpl.n	8002c66 <HAL_RCC_OscConfig+0x1a2>
 8002c62:	2a00      	cmp	r2, #0
 8002c64:	d04e      	beq.n	8002d04 <HAL_RCC_OscConfig+0x240>
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002c66:	4d40      	ldr	r5, [pc, #256]	; (8002d68 <HAL_RCC_OscConfig+0x2a4>)
 8002c68:	682b      	ldr	r3, [r5, #0]
 8002c6a:	f023 0319 	bic.w	r3, r3, #25
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	602b      	str	r3, [r5, #0]
          tickstart = HAL_GetTick();
 8002c72:	f7fe fcbf 	bl	80015f4 <HAL_GetTick>
 8002c76:	4606      	mov	r6, r0
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002c78:	e005      	b.n	8002c86 <HAL_RCC_OscConfig+0x1c2>
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c7a:	f7fe fcbb 	bl	80015f4 <HAL_GetTick>
 8002c7e:	1b80      	subs	r0, r0, r6
 8002c80:	2802      	cmp	r0, #2
 8002c82:	f200 80a0 	bhi.w	8002dc6 <HAL_RCC_OscConfig+0x302>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002c86:	682b      	ldr	r3, [r5, #0]
 8002c88:	075b      	lsls	r3, r3, #29
 8002c8a:	d5f6      	bpl.n	8002c7a <HAL_RCC_OscConfig+0x1b6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c8c:	f7fe fcb8 	bl	8001600 <HAL_GetREVID>
 8002c90:	f241 0303 	movw	r3, #4099	; 0x1003
 8002c94:	4298      	cmp	r0, r3
 8002c96:	f200 80f7 	bhi.w	8002e88 <HAL_RCC_OscConfig+0x3c4>
 8002c9a:	6922      	ldr	r2, [r4, #16]
 8002c9c:	686b      	ldr	r3, [r5, #4]
 8002c9e:	2a40      	cmp	r2, #64	; 0x40
 8002ca0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002ca4:	bf0c      	ite	eq
 8002ca6:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
 8002caa:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 8002cae:	606b      	str	r3, [r5, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002cb0:	6823      	ldr	r3, [r4, #0]
 8002cb2:	e741      	b.n	8002b38 <HAL_RCC_OscConfig+0x74>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002cb4:	2b18      	cmp	r3, #24
 8002cb6:	f000 80e3 	beq.w	8002e80 <HAL_RCC_OscConfig+0x3bc>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002cba:	4d2b      	ldr	r5, [pc, #172]	; (8002d68 <HAL_RCC_OscConfig+0x2a4>)
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002cbc:	68e2      	ldr	r2, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002cbe:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002cc0:	2a00      	cmp	r2, #0
 8002cc2:	f000 80cc 	beq.w	8002e5e <HAL_RCC_OscConfig+0x39a>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002cc6:	f023 0319 	bic.w	r3, r3, #25
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002cce:	f7fe fc91 	bl	80015f4 <HAL_GetTick>
 8002cd2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002cd4:	e004      	b.n	8002ce0 <HAL_RCC_OscConfig+0x21c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cd6:	f7fe fc8d 	bl	80015f4 <HAL_GetTick>
 8002cda:	1b80      	subs	r0, r0, r6
 8002cdc:	2802      	cmp	r0, #2
 8002cde:	d872      	bhi.n	8002dc6 <HAL_RCC_OscConfig+0x302>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ce0:	682b      	ldr	r3, [r5, #0]
 8002ce2:	075f      	lsls	r7, r3, #29
 8002ce4:	d5f7      	bpl.n	8002cd6 <HAL_RCC_OscConfig+0x212>
 8002ce6:	e7d1      	b.n	8002c8c <HAL_RCC_OscConfig+0x1c8>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002ce8:	f001 0103 	and.w	r1, r1, #3
 8002cec:	2902      	cmp	r1, #2
 8002cee:	f47f aefc 	bne.w	8002aea <HAL_RCC_OscConfig+0x26>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cf2:	4a1d      	ldr	r2, [pc, #116]	; (8002d68 <HAL_RCC_OscConfig+0x2a4>)
 8002cf4:	6812      	ldr	r2, [r2, #0]
 8002cf6:	0392      	lsls	r2, r2, #14
 8002cf8:	f57f af1b 	bpl.w	8002b32 <HAL_RCC_OscConfig+0x6e>
 8002cfc:	6862      	ldr	r2, [r4, #4]
 8002cfe:	2a00      	cmp	r2, #0
 8002d00:	f47f af17 	bne.w	8002b32 <HAL_RCC_OscConfig+0x6e>
        return HAL_ERROR;
 8002d04:	2001      	movs	r0, #1
}
 8002d06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002d08:	f002 0203 	and.w	r2, r2, #3
 8002d0c:	2a01      	cmp	r2, #1
 8002d0e:	f47f af20 	bne.w	8002b52 <HAL_RCC_OscConfig+0x8e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002d12:	4b15      	ldr	r3, [pc, #84]	; (8002d68 <HAL_RCC_OscConfig+0x2a4>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	05da      	lsls	r2, r3, #23
 8002d18:	d502      	bpl.n	8002d20 <HAL_RCC_OscConfig+0x25c>
 8002d1a:	69e3      	ldr	r3, [r4, #28]
 8002d1c:	2b80      	cmp	r3, #128	; 0x80
 8002d1e:	d1f1      	bne.n	8002d04 <HAL_RCC_OscConfig+0x240>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002d20:	f7fe fc6e 	bl	8001600 <HAL_GetREVID>
 8002d24:	f241 0303 	movw	r3, #4099	; 0x1003
 8002d28:	4298      	cmp	r0, r3
 8002d2a:	f200 80b8 	bhi.w	8002e9e <HAL_RCC_OscConfig+0x3da>
 8002d2e:	6a22      	ldr	r2, [r4, #32]
 8002d30:	2a20      	cmp	r2, #32
 8002d32:	f000 8187 	beq.w	8003044 <HAL_RCC_OscConfig+0x580>
 8002d36:	490c      	ldr	r1, [pc, #48]	; (8002d68 <HAL_RCC_OscConfig+0x2a4>)
 8002d38:	684b      	ldr	r3, [r1, #4]
 8002d3a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002d3e:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 8002d42:	604b      	str	r3, [r1, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d44:	6823      	ldr	r3, [r4, #0]
 8002d46:	e72d      	b.n	8002ba4 <HAL_RCC_OscConfig+0xe0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d48:	4a07      	ldr	r2, [pc, #28]	; (8002d68 <HAL_RCC_OscConfig+0x2a4>)
 8002d4a:	6813      	ldr	r3, [r2, #0]
 8002d4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d50:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d52:	e6df      	b.n	8002b14 <HAL_RCC_OscConfig+0x50>
    PWR->CR1 |= PWR_CR1_DBP;
 8002d54:	4d05      	ldr	r5, [pc, #20]	; (8002d6c <HAL_RCC_OscConfig+0x2a8>)
 8002d56:	682b      	ldr	r3, [r5, #0]
 8002d58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d5c:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8002d5e:	f7fe fc49 	bl	80015f4 <HAL_GetTick>
 8002d62:	4606      	mov	r6, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002d64:	e009      	b.n	8002d7a <HAL_RCC_OscConfig+0x2b6>
 8002d66:	bf00      	nop
 8002d68:	58024400 	.word	0x58024400
 8002d6c:	58024800 	.word	0x58024800
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002d70:	f7fe fc40 	bl	80015f4 <HAL_GetTick>
 8002d74:	1b80      	subs	r0, r0, r6
 8002d76:	2864      	cmp	r0, #100	; 0x64
 8002d78:	d825      	bhi.n	8002dc6 <HAL_RCC_OscConfig+0x302>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002d7a:	682b      	ldr	r3, [r5, #0]
 8002d7c:	05da      	lsls	r2, r3, #23
 8002d7e:	d5f7      	bpl.n	8002d70 <HAL_RCC_OscConfig+0x2ac>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d80:	68a3      	ldr	r3, [r4, #8]
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	f000 8158 	beq.w	8003038 <HAL_RCC_OscConfig+0x574>
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	f000 812d 	beq.w	8002fe8 <HAL_RCC_OscConfig+0x524>
 8002d8e:	2b05      	cmp	r3, #5
 8002d90:	4ba6      	ldr	r3, [pc, #664]	; (800302c <HAL_RCC_OscConfig+0x568>)
 8002d92:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002d94:	f000 815f 	beq.w	8003056 <HAL_RCC_OscConfig+0x592>
 8002d98:	f022 0201 	bic.w	r2, r2, #1
 8002d9c:	671a      	str	r2, [r3, #112]	; 0x70
 8002d9e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002da0:	f022 0204 	bic.w	r2, r2, #4
 8002da4:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 8002da6:	f7fe fc25 	bl	80015f4 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002daa:	4ea0      	ldr	r6, [pc, #640]	; (800302c <HAL_RCC_OscConfig+0x568>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002dac:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002db0:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002db2:	e004      	b.n	8002dbe <HAL_RCC_OscConfig+0x2fa>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002db4:	f7fe fc1e 	bl	80015f4 <HAL_GetTick>
 8002db8:	1b40      	subs	r0, r0, r5
 8002dba:	42b8      	cmp	r0, r7
 8002dbc:	d803      	bhi.n	8002dc6 <HAL_RCC_OscConfig+0x302>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002dbe:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8002dc0:	079b      	lsls	r3, r3, #30
 8002dc2:	d5f7      	bpl.n	8002db4 <HAL_RCC_OscConfig+0x2f0>
 8002dc4:	e723      	b.n	8002c0e <HAL_RCC_OscConfig+0x14a>
            return HAL_TIMEOUT;
 8002dc6:	2003      	movs	r0, #3
}
 8002dc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002dca:	4d98      	ldr	r5, [pc, #608]	; (800302c <HAL_RCC_OscConfig+0x568>)
 8002dcc:	682b      	ldr	r3, [r5, #0]
 8002dce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dd2:	602b      	str	r3, [r5, #0]
 8002dd4:	682b      	ldr	r3, [r5, #0]
 8002dd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dda:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002ddc:	f7fe fc0a 	bl	80015f4 <HAL_GetTick>
 8002de0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002de2:	e004      	b.n	8002dee <HAL_RCC_OscConfig+0x32a>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002de4:	f7fe fc06 	bl	80015f4 <HAL_GetTick>
 8002de8:	1b80      	subs	r0, r0, r6
 8002dea:	2864      	cmp	r0, #100	; 0x64
 8002dec:	d8eb      	bhi.n	8002dc6 <HAL_RCC_OscConfig+0x302>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002dee:	682b      	ldr	r3, [r5, #0]
 8002df0:	039f      	lsls	r7, r3, #14
 8002df2:	d4f7      	bmi.n	8002de4 <HAL_RCC_OscConfig+0x320>
 8002df4:	e69c      	b.n	8002b30 <HAL_RCC_OscConfig+0x6c>
      __HAL_RCC_LSI_DISABLE();
 8002df6:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8002df8:	f023 0301 	bic.w	r3, r3, #1
 8002dfc:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8002dfe:	f7fe fbf9 	bl	80015f4 <HAL_GetTick>
 8002e02:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002e04:	e004      	b.n	8002e10 <HAL_RCC_OscConfig+0x34c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e06:	f7fe fbf5 	bl	80015f4 <HAL_GetTick>
 8002e0a:	1b80      	subs	r0, r0, r6
 8002e0c:	2802      	cmp	r0, #2
 8002e0e:	d8da      	bhi.n	8002dc6 <HAL_RCC_OscConfig+0x302>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002e10:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8002e12:	0799      	lsls	r1, r3, #30
 8002e14:	d4f7      	bmi.n	8002e06 <HAL_RCC_OscConfig+0x342>
 8002e16:	e6dd      	b.n	8002bd4 <HAL_RCC_OscConfig+0x110>
      __HAL_RCC_HSI48_DISABLE();
 8002e18:	682b      	ldr	r3, [r5, #0]
 8002e1a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002e1e:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8002e20:	f7fe fbe8 	bl	80015f4 <HAL_GetTick>
 8002e24:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002e26:	e004      	b.n	8002e32 <HAL_RCC_OscConfig+0x36e>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002e28:	f7fe fbe4 	bl	80015f4 <HAL_GetTick>
 8002e2c:	1b80      	subs	r0, r0, r6
 8002e2e:	2802      	cmp	r0, #2
 8002e30:	d8c9      	bhi.n	8002dc6 <HAL_RCC_OscConfig+0x302>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002e32:	682b      	ldr	r3, [r5, #0]
 8002e34:	0498      	lsls	r0, r3, #18
 8002e36:	d4f7      	bmi.n	8002e28 <HAL_RCC_OscConfig+0x364>
 8002e38:	e6e5      	b.n	8002c06 <HAL_RCC_OscConfig+0x142>
        __HAL_RCC_CSI_DISABLE();
 8002e3a:	682b      	ldr	r3, [r5, #0]
 8002e3c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e40:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002e42:	f7fe fbd7 	bl	80015f4 <HAL_GetTick>
 8002e46:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002e48:	e004      	b.n	8002e54 <HAL_RCC_OscConfig+0x390>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002e4a:	f7fe fbd3 	bl	80015f4 <HAL_GetTick>
 8002e4e:	1b80      	subs	r0, r0, r6
 8002e50:	2802      	cmp	r0, #2
 8002e52:	d8b8      	bhi.n	8002dc6 <HAL_RCC_OscConfig+0x302>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002e54:	682b      	ldr	r3, [r5, #0]
 8002e56:	05df      	lsls	r7, r3, #23
 8002e58:	d4f7      	bmi.n	8002e4a <HAL_RCC_OscConfig+0x386>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e5a:	6823      	ldr	r3, [r4, #0]
 8002e5c:	e6a2      	b.n	8002ba4 <HAL_RCC_OscConfig+0xe0>
        __HAL_RCC_HSI_DISABLE();
 8002e5e:	f023 0301 	bic.w	r3, r3, #1
 8002e62:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002e64:	f7fe fbc6 	bl	80015f4 <HAL_GetTick>
 8002e68:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002e6a:	e004      	b.n	8002e76 <HAL_RCC_OscConfig+0x3b2>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e6c:	f7fe fbc2 	bl	80015f4 <HAL_GetTick>
 8002e70:	1b80      	subs	r0, r0, r6
 8002e72:	2802      	cmp	r0, #2
 8002e74:	d8a7      	bhi.n	8002dc6 <HAL_RCC_OscConfig+0x302>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002e76:	682b      	ldr	r3, [r5, #0]
 8002e78:	0758      	lsls	r0, r3, #29
 8002e7a:	d4f7      	bmi.n	8002e6c <HAL_RCC_OscConfig+0x3a8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002e7c:	6823      	ldr	r3, [r4, #0]
 8002e7e:	e65b      	b.n	8002b38 <HAL_RCC_OscConfig+0x74>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002e80:	0790      	lsls	r0, r2, #30
 8002e82:	f47f af1a 	bne.w	8002cba <HAL_RCC_OscConfig+0x1f6>
 8002e86:	e6e7      	b.n	8002c58 <HAL_RCC_OscConfig+0x194>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e88:	686b      	ldr	r3, [r5, #4]
 8002e8a:	6922      	ldr	r2, [r4, #16]
 8002e8c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002e90:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002e94:	606b      	str	r3, [r5, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002e96:	6823      	ldr	r3, [r4, #0]
 8002e98:	e64e      	b.n	8002b38 <HAL_RCC_OscConfig+0x74>
    return HAL_ERROR;
 8002e9a:	2001      	movs	r0, #1
}
 8002e9c:	4770      	bx	lr
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002e9e:	4a63      	ldr	r2, [pc, #396]	; (800302c <HAL_RCC_OscConfig+0x568>)
 8002ea0:	6a21      	ldr	r1, [r4, #32]
 8002ea2:	68d3      	ldr	r3, [r2, #12]
 8002ea4:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8002ea8:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8002eac:	60d3      	str	r3, [r2, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002eae:	6823      	ldr	r3, [r4, #0]
 8002eb0:	e678      	b.n	8002ba4 <HAL_RCC_OscConfig+0xe0>
        tickstart = HAL_GetTick();
 8002eb2:	f7fe fb9f 	bl	80015f4 <HAL_GetTick>
 8002eb6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002eb8:	e004      	b.n	8002ec4 <HAL_RCC_OscConfig+0x400>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002eba:	f7fe fb9b 	bl	80015f4 <HAL_GetTick>
 8002ebe:	1b80      	subs	r0, r0, r6
 8002ec0:	2802      	cmp	r0, #2
 8002ec2:	d880      	bhi.n	8002dc6 <HAL_RCC_OscConfig+0x302>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002ec4:	682b      	ldr	r3, [r5, #0]
 8002ec6:	0199      	lsls	r1, r3, #6
 8002ec8:	d4f7      	bmi.n	8002eba <HAL_RCC_OscConfig+0x3f6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002eca:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8002ecc:	4b58      	ldr	r3, [pc, #352]	; (8003030 <HAL_RCC_OscConfig+0x56c>)
 8002ece:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002ed0:	400b      	ands	r3, r1
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002ed2:	4958      	ldr	r1, [pc, #352]	; (8003034 <HAL_RCC_OscConfig+0x570>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002ed4:	4e55      	ldr	r6, [pc, #340]	; (800302c <HAL_RCC_OscConfig+0x568>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002eda:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8002ede:	62ab      	str	r3, [r5, #40]	; 0x28
 8002ee0:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	; 0x34
 8002ee4:	3b01      	subs	r3, #1
 8002ee6:	3a01      	subs	r2, #1
 8002ee8:	025b      	lsls	r3, r3, #9
 8002eea:	0412      	lsls	r2, r2, #16
 8002eec:	b29b      	uxth	r3, r3
 8002eee:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002ef6:	3a01      	subs	r2, #1
 8002ef8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002efc:	4313      	orrs	r3, r2
 8002efe:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002f00:	3a01      	subs	r2, #1
 8002f02:	0612      	lsls	r2, r2, #24
 8002f04:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	632b      	str	r3, [r5, #48]	; 0x30
         __HAL_RCC_PLLFRACN_DISABLE();
 8002f0c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8002f0e:	f023 0301 	bic.w	r3, r3, #1
 8002f12:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002f14:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8002f16:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8002f18:	4011      	ands	r1, r2
 8002f1a:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 8002f1e:	6369      	str	r1, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002f20:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8002f22:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002f24:	f023 030c 	bic.w	r3, r3, #12
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002f2c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8002f2e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8002f30:	f023 0302 	bic.w	r3, r3, #2
 8002f34:	4313      	orrs	r3, r2
 8002f36:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002f38:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8002f3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f3e:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f40:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8002f42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f46:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002f48:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8002f4a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f4e:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 8002f50:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8002f52:	f043 0301 	orr.w	r3, r3, #1
 8002f56:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 8002f58:	682b      	ldr	r3, [r5, #0]
 8002f5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f5e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002f60:	f7fe fb48 	bl	80015f4 <HAL_GetTick>
 8002f64:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002f66:	e005      	b.n	8002f74 <HAL_RCC_OscConfig+0x4b0>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f68:	f7fe fb44 	bl	80015f4 <HAL_GetTick>
 8002f6c:	1b00      	subs	r0, r0, r4
 8002f6e:	2802      	cmp	r0, #2
 8002f70:	f63f af29 	bhi.w	8002dc6 <HAL_RCC_OscConfig+0x302>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002f74:	6833      	ldr	r3, [r6, #0]
 8002f76:	019a      	lsls	r2, r3, #6
 8002f78:	d5f6      	bpl.n	8002f68 <HAL_RCC_OscConfig+0x4a4>
 8002f7a:	e665      	b.n	8002c48 <HAL_RCC_OscConfig+0x184>
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f7c:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002f7e:	6aaa      	ldr	r2, [r5, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002f80:	6b2d      	ldr	r5, [r5, #48]	; 0x30
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f82:	f43f ae62 	beq.w	8002c4a <HAL_RCC_OscConfig+0x186>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f86:	f002 0303 	and.w	r3, r2, #3
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f8a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8002f8c:	428b      	cmp	r3, r1
 8002f8e:	f47f aeb9 	bne.w	8002d04 <HAL_RCC_OscConfig+0x240>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f92:	f3c2 1205 	ubfx	r2, r2, #4, #6
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f96:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	f47f aeb3 	bne.w	8002d04 <HAL_RCC_OscConfig+0x240>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002f9e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002fa0:	f3c5 0208 	ubfx	r2, r5, #0, #9
 8002fa4:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	f47f aeac 	bne.w	8002d04 <HAL_RCC_OscConfig+0x240>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002fac:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002fae:	f3c5 2246 	ubfx	r2, r5, #9, #7
 8002fb2:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	f47f aea5 	bne.w	8002d04 <HAL_RCC_OscConfig+0x240>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002fba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002fbc:	f3c5 4206 	ubfx	r2, r5, #16, #7
 8002fc0:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002fc2:	429a      	cmp	r2, r3
 8002fc4:	f47f ae9e 	bne.w	8002d04 <HAL_RCC_OscConfig+0x240>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002fc8:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002fca:	f3c5 6506 	ubfx	r5, r5, #24, #7
 8002fce:	3801      	subs	r0, #1
    return HAL_ERROR;
 8002fd0:	1a28      	subs	r0, r5, r0
 8002fd2:	bf18      	it	ne
 8002fd4:	2001      	movne	r0, #1
}
 8002fd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fd8:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002fdc:	601a      	str	r2, [r3, #0]
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002fe4:	601a      	str	r2, [r3, #0]
 8002fe6:	e595      	b.n	8002b14 <HAL_RCC_OscConfig+0x50>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fe8:	4d10      	ldr	r5, [pc, #64]	; (800302c <HAL_RCC_OscConfig+0x568>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fea:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fee:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002ff0:	f023 0301 	bic.w	r3, r3, #1
 8002ff4:	672b      	str	r3, [r5, #112]	; 0x70
 8002ff6:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002ff8:	f023 0304 	bic.w	r3, r3, #4
 8002ffc:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8002ffe:	f7fe faf9 	bl	80015f4 <HAL_GetTick>
 8003002:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003004:	e005      	b.n	8003012 <HAL_RCC_OscConfig+0x54e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003006:	f7fe faf5 	bl	80015f4 <HAL_GetTick>
 800300a:	1b80      	subs	r0, r0, r6
 800300c:	42b8      	cmp	r0, r7
 800300e:	f63f aeda 	bhi.w	8002dc6 <HAL_RCC_OscConfig+0x302>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003012:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8003014:	0798      	lsls	r0, r3, #30
 8003016:	d4f6      	bmi.n	8003006 <HAL_RCC_OscConfig+0x542>
 8003018:	e5f9      	b.n	8002c0e <HAL_RCC_OscConfig+0x14a>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800301a:	68eb      	ldr	r3, [r5, #12]
 800301c:	6a22      	ldr	r2, [r4, #32]
 800301e:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8003022:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8003026:	60eb      	str	r3, [r5, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003028:	6823      	ldr	r3, [r4, #0]
 800302a:	e5bb      	b.n	8002ba4 <HAL_RCC_OscConfig+0xe0>
 800302c:	58024400 	.word	0x58024400
 8003030:	fffffc0c 	.word	0xfffffc0c
 8003034:	ffff0007 	.word	0xffff0007
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003038:	4a0b      	ldr	r2, [pc, #44]	; (8003068 <HAL_RCC_OscConfig+0x5a4>)
 800303a:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800303c:	f043 0301 	orr.w	r3, r3, #1
 8003040:	6713      	str	r3, [r2, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003042:	e6b0      	b.n	8002da6 <HAL_RCC_OscConfig+0x2e2>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003044:	4a08      	ldr	r2, [pc, #32]	; (8003068 <HAL_RCC_OscConfig+0x5a4>)
 8003046:	6853      	ldr	r3, [r2, #4]
 8003048:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800304c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003050:	6053      	str	r3, [r2, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003052:	6823      	ldr	r3, [r4, #0]
 8003054:	e5a6      	b.n	8002ba4 <HAL_RCC_OscConfig+0xe0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003056:	f042 0204 	orr.w	r2, r2, #4
 800305a:	671a      	str	r2, [r3, #112]	; 0x70
 800305c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800305e:	f042 0201 	orr.w	r2, r2, #1
 8003062:	671a      	str	r2, [r3, #112]	; 0x70
 8003064:	e69f      	b.n	8002da6 <HAL_RCC_OscConfig+0x2e2>
 8003066:	bf00      	nop
 8003068:	58024400 	.word	0x58024400

0800306c <HAL_RCC_GetSysClockFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800306c:	4a0c      	ldr	r2, [pc, #48]	; (80030a0 <HAL_RCC_GetSysClockFreq+0x34>)
 800306e:	6913      	ldr	r3, [r2, #16]
 8003070:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003074:	2b10      	cmp	r3, #16
 8003076:	d004      	beq.n	8003082 <HAL_RCC_GetSysClockFreq+0x16>
 8003078:	2b18      	cmp	r3, #24
 800307a:	d00d      	beq.n	8003098 <HAL_RCC_GetSysClockFreq+0x2c>
 800307c:	b11b      	cbz	r3, 8003086 <HAL_RCC_GetSysClockFreq+0x1a>
    sysclockfreq = CSI_VALUE;
 800307e:	4809      	ldr	r0, [pc, #36]	; (80030a4 <HAL_RCC_GetSysClockFreq+0x38>)
 8003080:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003082:	4809      	ldr	r0, [pc, #36]	; (80030a8 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003084:	4770      	bx	lr
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003086:	6813      	ldr	r3, [r2, #0]
 8003088:	069b      	lsls	r3, r3, #26
 800308a:	d507      	bpl.n	800309c <HAL_RCC_GetSysClockFreq+0x30>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800308c:	6813      	ldr	r3, [r2, #0]
 800308e:	4807      	ldr	r0, [pc, #28]	; (80030ac <HAL_RCC_GetSysClockFreq+0x40>)
 8003090:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8003094:	40d8      	lsrs	r0, r3
 8003096:	4770      	bx	lr
 8003098:	f7ff bc90 	b.w	80029bc <HAL_RCC_GetSysClockFreq.part.0>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800309c:	4803      	ldr	r0, [pc, #12]	; (80030ac <HAL_RCC_GetSysClockFreq+0x40>)
}
 800309e:	4770      	bx	lr
 80030a0:	58024400 	.word	0x58024400
 80030a4:	003d0900 	.word	0x003d0900
 80030a8:	017d7840 	.word	0x017d7840
 80030ac:	03d09000 	.word	0x03d09000

080030b0 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 80030b0:	2800      	cmp	r0, #0
 80030b2:	f000 810c 	beq.w	80032ce <HAL_RCC_ClockConfig+0x21e>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80030b6:	4a8c      	ldr	r2, [pc, #560]	; (80032e8 <HAL_RCC_ClockConfig+0x238>)
 80030b8:	6813      	ldr	r3, [r2, #0]
 80030ba:	f003 030f 	and.w	r3, r3, #15
 80030be:	428b      	cmp	r3, r1
{
 80030c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80030c4:	4604      	mov	r4, r0
 80030c6:	460d      	mov	r5, r1
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80030c8:	d20c      	bcs.n	80030e4 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030ca:	6813      	ldr	r3, [r2, #0]
 80030cc:	f023 030f 	bic.w	r3, r3, #15
 80030d0:	430b      	orrs	r3, r1
 80030d2:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030d4:	6813      	ldr	r3, [r2, #0]
 80030d6:	f003 030f 	and.w	r3, r3, #15
 80030da:	428b      	cmp	r3, r1
 80030dc:	d002      	beq.n	80030e4 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 80030de:	2001      	movs	r0, #1
}
 80030e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80030e4:	6823      	ldr	r3, [r4, #0]
 80030e6:	075f      	lsls	r7, r3, #29
 80030e8:	d50b      	bpl.n	8003102 <HAL_RCC_ClockConfig+0x52>
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80030ea:	4980      	ldr	r1, [pc, #512]	; (80032ec <HAL_RCC_ClockConfig+0x23c>)
 80030ec:	6920      	ldr	r0, [r4, #16]
 80030ee:	698a      	ldr	r2, [r1, #24]
 80030f0:	f002 0270 	and.w	r2, r2, #112	; 0x70
 80030f4:	4290      	cmp	r0, r2
 80030f6:	d904      	bls.n	8003102 <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80030f8:	698a      	ldr	r2, [r1, #24]
 80030fa:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80030fe:	4302      	orrs	r2, r0
 8003100:	618a      	str	r2, [r1, #24]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003102:	071e      	lsls	r6, r3, #28
 8003104:	d50b      	bpl.n	800311e <HAL_RCC_ClockConfig+0x6e>
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003106:	4979      	ldr	r1, [pc, #484]	; (80032ec <HAL_RCC_ClockConfig+0x23c>)
 8003108:	6960      	ldr	r0, [r4, #20]
 800310a:	69ca      	ldr	r2, [r1, #28]
 800310c:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8003110:	4290      	cmp	r0, r2
 8003112:	d904      	bls.n	800311e <HAL_RCC_ClockConfig+0x6e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003114:	69ca      	ldr	r2, [r1, #28]
 8003116:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800311a:	4302      	orrs	r2, r0
 800311c:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800311e:	06d8      	lsls	r0, r3, #27
 8003120:	d50b      	bpl.n	800313a <HAL_RCC_ClockConfig+0x8a>
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003122:	4972      	ldr	r1, [pc, #456]	; (80032ec <HAL_RCC_ClockConfig+0x23c>)
 8003124:	69a0      	ldr	r0, [r4, #24]
 8003126:	69ca      	ldr	r2, [r1, #28]
 8003128:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800312c:	4290      	cmp	r0, r2
 800312e:	d904      	bls.n	800313a <HAL_RCC_ClockConfig+0x8a>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003130:	69ca      	ldr	r2, [r1, #28]
 8003132:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003136:	4302      	orrs	r2, r0
 8003138:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800313a:	0699      	lsls	r1, r3, #26
 800313c:	d50b      	bpl.n	8003156 <HAL_RCC_ClockConfig+0xa6>
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800313e:	496b      	ldr	r1, [pc, #428]	; (80032ec <HAL_RCC_ClockConfig+0x23c>)
 8003140:	69e0      	ldr	r0, [r4, #28]
 8003142:	6a0a      	ldr	r2, [r1, #32]
 8003144:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8003148:	4290      	cmp	r0, r2
 800314a:	d904      	bls.n	8003156 <HAL_RCC_ClockConfig+0xa6>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800314c:	6a0a      	ldr	r2, [r1, #32]
 800314e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003152:	4302      	orrs	r2, r0
 8003154:	620a      	str	r2, [r1, #32]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003156:	079a      	lsls	r2, r3, #30
 8003158:	f140 80ab 	bpl.w	80032b2 <HAL_RCC_ClockConfig+0x202>
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800315c:	4863      	ldr	r0, [pc, #396]	; (80032ec <HAL_RCC_ClockConfig+0x23c>)
 800315e:	68e1      	ldr	r1, [r4, #12]
 8003160:	6982      	ldr	r2, [r0, #24]
 8003162:	f002 020f 	and.w	r2, r2, #15
 8003166:	4291      	cmp	r1, r2
 8003168:	d904      	bls.n	8003174 <HAL_RCC_ClockConfig+0xc4>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800316a:	6982      	ldr	r2, [r0, #24]
 800316c:	f022 020f 	bic.w	r2, r2, #15
 8003170:	430a      	orrs	r2, r1
 8003172:	6182      	str	r2, [r0, #24]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003174:	07d8      	lsls	r0, r3, #31
 8003176:	d530      	bpl.n	80031da <HAL_RCC_ClockConfig+0x12a>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003178:	4a5c      	ldr	r2, [pc, #368]	; (80032ec <HAL_RCC_ClockConfig+0x23c>)
 800317a:	68a1      	ldr	r1, [r4, #8]
 800317c:	6993      	ldr	r3, [r2, #24]
 800317e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003182:	430b      	orrs	r3, r1
 8003184:	6193      	str	r3, [r2, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003186:	6861      	ldr	r1, [r4, #4]
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003188:	6813      	ldr	r3, [r2, #0]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800318a:	2902      	cmp	r1, #2
 800318c:	f000 80a1 	beq.w	80032d2 <HAL_RCC_ClockConfig+0x222>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003190:	2903      	cmp	r1, #3
 8003192:	f000 8098 	beq.w	80032c6 <HAL_RCC_ClockConfig+0x216>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003196:	2901      	cmp	r1, #1
 8003198:	f000 80a1 	beq.w	80032de <HAL_RCC_ClockConfig+0x22e>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800319c:	0758      	lsls	r0, r3, #29
 800319e:	d59e      	bpl.n	80030de <HAL_RCC_ClockConfig+0x2e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80031a0:	4e52      	ldr	r6, [pc, #328]	; (80032ec <HAL_RCC_ClockConfig+0x23c>)
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031a2:	f241 3888 	movw	r8, #5000	; 0x1388
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80031a6:	6933      	ldr	r3, [r6, #16]
 80031a8:	f023 0307 	bic.w	r3, r3, #7
 80031ac:	430b      	orrs	r3, r1
 80031ae:	6133      	str	r3, [r6, #16]
      tickstart = HAL_GetTick();
 80031b0:	f7fe fa20 	bl	80015f4 <HAL_GetTick>
 80031b4:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031b6:	e005      	b.n	80031c4 <HAL_RCC_ClockConfig+0x114>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031b8:	f7fe fa1c 	bl	80015f4 <HAL_GetTick>
 80031bc:	1bc0      	subs	r0, r0, r7
 80031be:	4540      	cmp	r0, r8
 80031c0:	f200 808b 	bhi.w	80032da <HAL_RCC_ClockConfig+0x22a>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031c4:	6933      	ldr	r3, [r6, #16]
 80031c6:	6862      	ldr	r2, [r4, #4]
 80031c8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80031cc:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 80031d0:	d1f2      	bne.n	80031b8 <HAL_RCC_ClockConfig+0x108>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031d2:	6823      	ldr	r3, [r4, #0]
 80031d4:	0799      	lsls	r1, r3, #30
 80031d6:	d506      	bpl.n	80031e6 <HAL_RCC_ClockConfig+0x136>
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80031d8:	68e1      	ldr	r1, [r4, #12]
 80031da:	4844      	ldr	r0, [pc, #272]	; (80032ec <HAL_RCC_ClockConfig+0x23c>)
 80031dc:	6982      	ldr	r2, [r0, #24]
 80031de:	f002 020f 	and.w	r2, r2, #15
 80031e2:	428a      	cmp	r2, r1
 80031e4:	d869      	bhi.n	80032ba <HAL_RCC_ClockConfig+0x20a>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80031e6:	4940      	ldr	r1, [pc, #256]	; (80032e8 <HAL_RCC_ClockConfig+0x238>)
 80031e8:	680a      	ldr	r2, [r1, #0]
 80031ea:	f002 020f 	and.w	r2, r2, #15
 80031ee:	42aa      	cmp	r2, r5
 80031f0:	d90a      	bls.n	8003208 <HAL_RCC_ClockConfig+0x158>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031f2:	680a      	ldr	r2, [r1, #0]
 80031f4:	f022 020f 	bic.w	r2, r2, #15
 80031f8:	432a      	orrs	r2, r5
 80031fa:	600a      	str	r2, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031fc:	680a      	ldr	r2, [r1, #0]
 80031fe:	f002 020f 	and.w	r2, r2, #15
 8003202:	42aa      	cmp	r2, r5
 8003204:	f47f af6b 	bne.w	80030de <HAL_RCC_ClockConfig+0x2e>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003208:	075a      	lsls	r2, r3, #29
 800320a:	d50b      	bpl.n	8003224 <HAL_RCC_ClockConfig+0x174>
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800320c:	4937      	ldr	r1, [pc, #220]	; (80032ec <HAL_RCC_ClockConfig+0x23c>)
 800320e:	6920      	ldr	r0, [r4, #16]
 8003210:	698a      	ldr	r2, [r1, #24]
 8003212:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8003216:	4290      	cmp	r0, r2
 8003218:	d204      	bcs.n	8003224 <HAL_RCC_ClockConfig+0x174>
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800321a:	698a      	ldr	r2, [r1, #24]
 800321c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003220:	4302      	orrs	r2, r0
 8003222:	618a      	str	r2, [r1, #24]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003224:	071f      	lsls	r7, r3, #28
 8003226:	d50b      	bpl.n	8003240 <HAL_RCC_ClockConfig+0x190>
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003228:	4930      	ldr	r1, [pc, #192]	; (80032ec <HAL_RCC_ClockConfig+0x23c>)
 800322a:	6960      	ldr	r0, [r4, #20]
 800322c:	69ca      	ldr	r2, [r1, #28]
 800322e:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8003232:	4290      	cmp	r0, r2
 8003234:	d204      	bcs.n	8003240 <HAL_RCC_ClockConfig+0x190>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003236:	69ca      	ldr	r2, [r1, #28]
 8003238:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800323c:	4302      	orrs	r2, r0
 800323e:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003240:	06de      	lsls	r6, r3, #27
 8003242:	d50b      	bpl.n	800325c <HAL_RCC_ClockConfig+0x1ac>
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003244:	4929      	ldr	r1, [pc, #164]	; (80032ec <HAL_RCC_ClockConfig+0x23c>)
 8003246:	69a0      	ldr	r0, [r4, #24]
 8003248:	69ca      	ldr	r2, [r1, #28]
 800324a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800324e:	4290      	cmp	r0, r2
 8003250:	d204      	bcs.n	800325c <HAL_RCC_ClockConfig+0x1ac>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003252:	69ca      	ldr	r2, [r1, #28]
 8003254:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003258:	4302      	orrs	r2, r0
 800325a:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800325c:	069d      	lsls	r5, r3, #26
 800325e:	d50b      	bpl.n	8003278 <HAL_RCC_ClockConfig+0x1c8>
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003260:	4a22      	ldr	r2, [pc, #136]	; (80032ec <HAL_RCC_ClockConfig+0x23c>)
 8003262:	69e1      	ldr	r1, [r4, #28]
 8003264:	6a13      	ldr	r3, [r2, #32]
 8003266:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800326a:	4299      	cmp	r1, r3
 800326c:	d204      	bcs.n	8003278 <HAL_RCC_ClockConfig+0x1c8>
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800326e:	6a13      	ldr	r3, [r2, #32]
 8003270:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003274:	430b      	orrs	r3, r1
 8003276:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003278:	f7ff fef8 	bl	800306c <HAL_RCC_GetSysClockFreq>
 800327c:	4a1b      	ldr	r2, [pc, #108]	; (80032ec <HAL_RCC_ClockConfig+0x23c>)
 800327e:	4603      	mov	r3, r0
 8003280:	481b      	ldr	r0, [pc, #108]	; (80032f0 <HAL_RCC_ClockConfig+0x240>)
 8003282:	6991      	ldr	r1, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003284:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003286:	f3c1 2103 	ubfx	r1, r1, #8, #4
  SystemCoreClock = common_system_clock;
 800328a:	4d1a      	ldr	r5, [pc, #104]	; (80032f4 <HAL_RCC_ClockConfig+0x244>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800328c:	f002 020f 	and.w	r2, r2, #15
 8003290:	4c19      	ldr	r4, [pc, #100]	; (80032f8 <HAL_RCC_ClockConfig+0x248>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003292:	5c41      	ldrb	r1, [r0, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003294:	5c82      	ldrb	r2, [r0, r2]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003296:	f001 011f 	and.w	r1, r1, #31
  halstatus = HAL_InitTick (uwTickPrio);
 800329a:	4818      	ldr	r0, [pc, #96]	; (80032fc <HAL_RCC_ClockConfig+0x24c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800329c:	f002 021f 	and.w	r2, r2, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80032a0:	40cb      	lsrs	r3, r1
  halstatus = HAL_InitTick (uwTickPrio);
 80032a2:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = common_system_clock;
 80032a4:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80032a6:	40d3      	lsrs	r3, r2
 80032a8:	6023      	str	r3, [r4, #0]
}
 80032aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick (uwTickPrio);
 80032ae:	f7fd bf3d 	b.w	800112c <HAL_InitTick>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032b2:	07da      	lsls	r2, r3, #31
 80032b4:	f53f af60 	bmi.w	8003178 <HAL_RCC_ClockConfig+0xc8>
 80032b8:	e795      	b.n	80031e6 <HAL_RCC_ClockConfig+0x136>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032ba:	6982      	ldr	r2, [r0, #24]
 80032bc:	f022 020f 	bic.w	r2, r2, #15
 80032c0:	430a      	orrs	r2, r1
 80032c2:	6182      	str	r2, [r0, #24]
 80032c4:	e78f      	b.n	80031e6 <HAL_RCC_ClockConfig+0x136>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80032c6:	019f      	lsls	r7, r3, #6
 80032c8:	f53f af6a 	bmi.w	80031a0 <HAL_RCC_ClockConfig+0xf0>
 80032cc:	e707      	b.n	80030de <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 80032ce:	2001      	movs	r0, #1
}
 80032d0:	4770      	bx	lr
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80032d2:	039b      	lsls	r3, r3, #14
 80032d4:	f53f af64 	bmi.w	80031a0 <HAL_RCC_ClockConfig+0xf0>
 80032d8:	e701      	b.n	80030de <HAL_RCC_ClockConfig+0x2e>
            return HAL_TIMEOUT;
 80032da:	2003      	movs	r0, #3
 80032dc:	e700      	b.n	80030e0 <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80032de:	05de      	lsls	r6, r3, #23
 80032e0:	f53f af5e 	bmi.w	80031a0 <HAL_RCC_ClockConfig+0xf0>
 80032e4:	e6fb      	b.n	80030de <HAL_RCC_ClockConfig+0x2e>
 80032e6:	bf00      	nop
 80032e8:	52002000 	.word	0x52002000
 80032ec:	58024400 	.word	0x58024400
 80032f0:	0800f6ec 	.word	0x0800f6ec
 80032f4:	24000000 	.word	0x24000000
 80032f8:	24000004 	.word	0x24000004
 80032fc:	2400000c 	.word	0x2400000c

08003300 <HAL_RCC_GetHCLKFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003300:	4a18      	ldr	r2, [pc, #96]	; (8003364 <HAL_RCC_GetHCLKFreq+0x64>)
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003302:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003304:	6913      	ldr	r3, [r2, #16]
 8003306:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800330a:	2b10      	cmp	r3, #16
 800330c:	d01a      	beq.n	8003344 <HAL_RCC_GetHCLKFreq+0x44>
 800330e:	2b18      	cmp	r3, #24
 8003310:	d023      	beq.n	800335a <HAL_RCC_GetHCLKFreq+0x5a>
 8003312:	b1cb      	cbz	r3, 8003348 <HAL_RCC_GetHCLKFreq+0x48>
    sysclockfreq = CSI_VALUE;
 8003314:	4814      	ldr	r0, [pc, #80]	; (8003368 <HAL_RCC_GetHCLKFreq+0x68>)
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003316:	4b13      	ldr	r3, [pc, #76]	; (8003364 <HAL_RCC_GetHCLKFreq+0x64>)
 8003318:	4914      	ldr	r1, [pc, #80]	; (800336c <HAL_RCC_GetHCLKFreq+0x6c>)
 800331a:	699a      	ldr	r2, [r3, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800331c:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800331e:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003322:	4c13      	ldr	r4, [pc, #76]	; (8003370 <HAL_RCC_GetHCLKFreq+0x70>)
 8003324:	f003 030f 	and.w	r3, r3, #15
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003328:	4d12      	ldr	r5, [pc, #72]	; (8003374 <HAL_RCC_GetHCLKFreq+0x74>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800332a:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800332c:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800332e:	f002 021f 	and.w	r2, r2, #31
 8003332:	fa20 f202 	lsr.w	r2, r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003336:	f003 001f 	and.w	r0, r3, #31
 800333a:	fa22 f000 	lsr.w	r0, r2, r0
  SystemCoreClock = common_system_clock;
 800333e:	602a      	str	r2, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003340:	6020      	str	r0, [r4, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 8003342:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003344:	480c      	ldr	r0, [pc, #48]	; (8003378 <HAL_RCC_GetHCLKFreq+0x78>)
 8003346:	e7e6      	b.n	8003316 <HAL_RCC_GetHCLKFreq+0x16>
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003348:	6813      	ldr	r3, [r2, #0]
 800334a:	069b      	lsls	r3, r3, #26
 800334c:	d508      	bpl.n	8003360 <HAL_RCC_GetHCLKFreq+0x60>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800334e:	6813      	ldr	r3, [r2, #0]
 8003350:	480a      	ldr	r0, [pc, #40]	; (800337c <HAL_RCC_GetHCLKFreq+0x7c>)
 8003352:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8003356:	40d8      	lsrs	r0, r3
 8003358:	e7dd      	b.n	8003316 <HAL_RCC_GetHCLKFreq+0x16>
 800335a:	f7ff fb2f 	bl	80029bc <HAL_RCC_GetSysClockFreq.part.0>
 800335e:	e7da      	b.n	8003316 <HAL_RCC_GetHCLKFreq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003360:	4806      	ldr	r0, [pc, #24]	; (800337c <HAL_RCC_GetHCLKFreq+0x7c>)
 8003362:	e7d8      	b.n	8003316 <HAL_RCC_GetHCLKFreq+0x16>
 8003364:	58024400 	.word	0x58024400
 8003368:	003d0900 	.word	0x003d0900
 800336c:	0800f6ec 	.word	0x0800f6ec
 8003370:	24000004 	.word	0x24000004
 8003374:	24000000 	.word	0x24000000
 8003378:	017d7840 	.word	0x017d7840
 800337c:	03d09000 	.word	0x03d09000

08003380 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003380:	b508      	push	{r3, lr}
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003382:	f7ff ffbd 	bl	8003300 <HAL_RCC_GetHCLKFreq>
 8003386:	4b05      	ldr	r3, [pc, #20]	; (800339c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8003388:	4a05      	ldr	r2, [pc, #20]	; (80033a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800338a:	69db      	ldr	r3, [r3, #28]
 800338c:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8003390:	5cd3      	ldrb	r3, [r2, r3]
 8003392:	f003 031f 	and.w	r3, r3, #31
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003396:	40d8      	lsrs	r0, r3
 8003398:	bd08      	pop	{r3, pc}
 800339a:	bf00      	nop
 800339c:	58024400 	.word	0x58024400
 80033a0:	0800f6ec 	.word	0x0800f6ec

080033a4 <HAL_RCC_GetClockConfig>:
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80033a4:	4b13      	ldr	r3, [pc, #76]	; (80033f4 <HAL_RCC_GetClockConfig+0x50>)
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80033a6:	223f      	movs	r2, #63	; 0x3f
 80033a8:	6002      	str	r2, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80033aa:	691a      	ldr	r2, [r3, #16]
 80033ac:	f002 0207 	and.w	r2, r2, #7
 80033b0:	6042      	str	r2, [r0, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80033b2:	699a      	ldr	r2, [r3, #24]
 80033b4:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
 80033b8:	6082      	str	r2, [r0, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80033ba:	699a      	ldr	r2, [r3, #24]
 80033bc:	f002 020f 	and.w	r2, r2, #15
 80033c0:	60c2      	str	r2, [r0, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80033c2:	699a      	ldr	r2, [r3, #24]
 80033c4:	f002 0270 	and.w	r2, r2, #112	; 0x70
 80033c8:	6102      	str	r2, [r0, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80033ca:	69da      	ldr	r2, [r3, #28]
 80033cc:	f002 0270 	and.w	r2, r2, #112	; 0x70
 80033d0:	6142      	str	r2, [r0, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80033d2:	69da      	ldr	r2, [r3, #28]
 80033d4:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 80033d8:	6182      	str	r2, [r0, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80033da:	6a1b      	ldr	r3, [r3, #32]
{
 80033dc:	b410      	push	{r4}
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80033de:	f003 0370 	and.w	r3, r3, #112	; 0x70
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80033e2:	4c05      	ldr	r4, [pc, #20]	; (80033f8 <HAL_RCC_GetClockConfig+0x54>)
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80033e4:	61c3      	str	r3, [r0, #28]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80033e6:	6823      	ldr	r3, [r4, #0]
}
 80033e8:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80033ec:	f003 030f 	and.w	r3, r3, #15
 80033f0:	600b      	str	r3, [r1, #0]
}
 80033f2:	4770      	bx	lr
 80033f4:	58024400 	.word	0x58024400
 80033f8:	52002000 	.word	0x52002000

080033fc <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80033fc:	4770      	bx	lr
 80033fe:	bf00      	nop

08003400 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003400:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003404:	2b01      	cmp	r3, #1
 8003406:	d141      	bne.n	800348c <HAL_TIM_Base_Start_IT+0x8c>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003408:	6802      	ldr	r2, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800340a:	2102      	movs	r1, #2

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800340c:	4b24      	ldr	r3, [pc, #144]	; (80034a0 <HAL_TIM_Base_Start_IT+0xa0>)
 800340e:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8003412:	bf18      	it	ne
 8003414:	429a      	cmpne	r2, r3
{
 8003416:	b430      	push	{r4, r5}
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003418:	bf0c      	ite	eq
 800341a:	2301      	moveq	r3, #1
 800341c:	2300      	movne	r3, #0
 800341e:	4d21      	ldr	r5, [pc, #132]	; (80034a4 <HAL_TIM_Base_Start_IT+0xa4>)
 8003420:	4c21      	ldr	r4, [pc, #132]	; (80034a8 <HAL_TIM_Base_Start_IT+0xa8>)
 8003422:	42aa      	cmp	r2, r5
 8003424:	bf08      	it	eq
 8003426:	f043 0301 	orreq.w	r3, r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800342a:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800342e:	68d1      	ldr	r1, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003430:	42a2      	cmp	r2, r4
 8003432:	bf08      	it	eq
 8003434:	f043 0301 	orreq.w	r3, r3, #1
 8003438:	f504 6480 	add.w	r4, r4, #1024	; 0x400
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800343c:	f041 0101 	orr.w	r1, r1, #1
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003440:	481a      	ldr	r0, [pc, #104]	; (80034ac <HAL_TIM_Base_Start_IT+0xac>)
 8003442:	42a2      	cmp	r2, r4
 8003444:	bf08      	it	eq
 8003446:	f043 0301 	orreq.w	r3, r3, #1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800344a:	60d1      	str	r1, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800344c:	4282      	cmp	r2, r0
 800344e:	bf08      	it	eq
 8003450:	f043 0301 	orreq.w	r3, r3, #1
 8003454:	4916      	ldr	r1, [pc, #88]	; (80034b0 <HAL_TIM_Base_Start_IT+0xb0>)
 8003456:	428a      	cmp	r2, r1
 8003458:	bf08      	it	eq
 800345a:	f043 0301 	orreq.w	r3, r3, #1
 800345e:	b933      	cbnz	r3, 800346e <HAL_TIM_Base_Start_IT+0x6e>
 8003460:	f500 5070 	add.w	r0, r0, #15360	; 0x3c00
 8003464:	1a10      	subs	r0, r2, r0
 8003466:	fab0 f080 	clz	r0, r0
 800346a:	0940      	lsrs	r0, r0, #5
 800346c:	b198      	cbz	r0, 8003496 <HAL_TIM_Base_Start_IT+0x96>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800346e:	6891      	ldr	r1, [r2, #8]
 8003470:	4b10      	ldr	r3, [pc, #64]	; (80034b4 <HAL_TIM_Base_Start_IT+0xb4>)
 8003472:	400b      	ands	r3, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003474:	2b06      	cmp	r3, #6
 8003476:	d00b      	beq.n	8003490 <HAL_TIM_Base_Start_IT+0x90>
 8003478:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800347c:	d008      	beq.n	8003490 <HAL_TIM_Base_Start_IT+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800347e:	6813      	ldr	r3, [r2, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 8003480:	2000      	movs	r0, #0
      __HAL_TIM_ENABLE(htim);
 8003482:	f043 0301 	orr.w	r3, r3, #1
 8003486:	6013      	str	r3, [r2, #0]
}
 8003488:	bc30      	pop	{r4, r5}
 800348a:	4770      	bx	lr
    return HAL_ERROR;
 800348c:	2001      	movs	r0, #1
}
 800348e:	4770      	bx	lr
  return HAL_OK;
 8003490:	2000      	movs	r0, #0
}
 8003492:	bc30      	pop	{r4, r5}
 8003494:	4770      	bx	lr
    __HAL_TIM_ENABLE(htim);
 8003496:	6813      	ldr	r3, [r2, #0]
 8003498:	f043 0301 	orr.w	r3, r3, #1
 800349c:	6013      	str	r3, [r2, #0]
 800349e:	e7f3      	b.n	8003488 <HAL_TIM_Base_Start_IT+0x88>
 80034a0:	40010000 	.word	0x40010000
 80034a4:	40000400 	.word	0x40000400
 80034a8:	40000800 	.word	0x40000800
 80034ac:	40010400 	.word	0x40010400
 80034b0:	40001800 	.word	0x40001800
 80034b4:	00010007 	.word	0x00010007

080034b8 <HAL_TIM_OC_DelayElapsedCallback>:
 80034b8:	4770      	bx	lr
 80034ba:	bf00      	nop

080034bc <HAL_TIM_IC_CaptureCallback>:
 80034bc:	4770      	bx	lr
 80034be:	bf00      	nop

080034c0 <HAL_TIM_PWM_PulseFinishedCallback>:
 80034c0:	4770      	bx	lr
 80034c2:	bf00      	nop

080034c4 <HAL_TIM_TriggerCallback>:
 80034c4:	4770      	bx	lr
 80034c6:	bf00      	nop

080034c8 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80034c8:	6803      	ldr	r3, [r0, #0]
 80034ca:	691a      	ldr	r2, [r3, #16]
 80034cc:	0791      	lsls	r1, r2, #30
{
 80034ce:	b510      	push	{r4, lr}
 80034d0:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80034d2:	d502      	bpl.n	80034da <HAL_TIM_IRQHandler+0x12>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80034d4:	68da      	ldr	r2, [r3, #12]
 80034d6:	0792      	lsls	r2, r2, #30
 80034d8:	d468      	bmi.n	80035ac <HAL_TIM_IRQHandler+0xe4>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80034da:	691a      	ldr	r2, [r3, #16]
 80034dc:	0752      	lsls	r2, r2, #29
 80034de:	d502      	bpl.n	80034e6 <HAL_TIM_IRQHandler+0x1e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80034e0:	68da      	ldr	r2, [r3, #12]
 80034e2:	0750      	lsls	r0, r2, #29
 80034e4:	d44f      	bmi.n	8003586 <HAL_TIM_IRQHandler+0xbe>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80034e6:	691a      	ldr	r2, [r3, #16]
 80034e8:	0711      	lsls	r1, r2, #28
 80034ea:	d502      	bpl.n	80034f2 <HAL_TIM_IRQHandler+0x2a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80034ec:	68da      	ldr	r2, [r3, #12]
 80034ee:	0712      	lsls	r2, r2, #28
 80034f0:	d437      	bmi.n	8003562 <HAL_TIM_IRQHandler+0x9a>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80034f2:	691a      	ldr	r2, [r3, #16]
 80034f4:	06d0      	lsls	r0, r2, #27
 80034f6:	d502      	bpl.n	80034fe <HAL_TIM_IRQHandler+0x36>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80034f8:	68da      	ldr	r2, [r3, #12]
 80034fa:	06d1      	lsls	r1, r2, #27
 80034fc:	d41e      	bmi.n	800353c <HAL_TIM_IRQHandler+0x74>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80034fe:	691a      	ldr	r2, [r3, #16]
 8003500:	07d2      	lsls	r2, r2, #31
 8003502:	d502      	bpl.n	800350a <HAL_TIM_IRQHandler+0x42>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003504:	68da      	ldr	r2, [r3, #12]
 8003506:	07d0      	lsls	r0, r2, #31
 8003508:	d469      	bmi.n	80035de <HAL_TIM_IRQHandler+0x116>
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800350a:	691a      	ldr	r2, [r3, #16]
 800350c:	0611      	lsls	r1, r2, #24
 800350e:	d502      	bpl.n	8003516 <HAL_TIM_IRQHandler+0x4e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003510:	68da      	ldr	r2, [r3, #12]
 8003512:	0612      	lsls	r2, r2, #24
 8003514:	d46b      	bmi.n	80035ee <HAL_TIM_IRQHandler+0x126>
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003516:	691a      	ldr	r2, [r3, #16]
 8003518:	05d0      	lsls	r0, r2, #23
 800351a:	d502      	bpl.n	8003522 <HAL_TIM_IRQHandler+0x5a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800351c:	68da      	ldr	r2, [r3, #12]
 800351e:	0611      	lsls	r1, r2, #24
 8003520:	d46d      	bmi.n	80035fe <HAL_TIM_IRQHandler+0x136>
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003522:	691a      	ldr	r2, [r3, #16]
 8003524:	0652      	lsls	r2, r2, #25
 8003526:	d502      	bpl.n	800352e <HAL_TIM_IRQHandler+0x66>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003528:	68da      	ldr	r2, [r3, #12]
 800352a:	0650      	lsls	r0, r2, #25
 800352c:	d46f      	bmi.n	800360e <HAL_TIM_IRQHandler+0x146>
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800352e:	691a      	ldr	r2, [r3, #16]
 8003530:	0691      	lsls	r1, r2, #26
 8003532:	d502      	bpl.n	800353a <HAL_TIM_IRQHandler+0x72>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003534:	68da      	ldr	r2, [r3, #12]
 8003536:	0692      	lsls	r2, r2, #26
 8003538:	d449      	bmi.n	80035ce <HAL_TIM_IRQHandler+0x106>
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800353a:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800353c:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003540:	2208      	movs	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 8003542:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003544:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003546:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003548:	69db      	ldr	r3, [r3, #28]
 800354a:	f413 7f40 	tst.w	r3, #768	; 0x300
 800354e:	d16f      	bne.n	8003630 <HAL_TIM_IRQHandler+0x168>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003550:	f7ff ffb2 	bl	80034b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003554:	4620      	mov	r0, r4
 8003556:	f7ff ffb3 	bl	80034c0 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800355a:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800355c:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800355e:	7722      	strb	r2, [r4, #28]
 8003560:	e7cd      	b.n	80034fe <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003562:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003566:	2204      	movs	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 8003568:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800356a:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800356c:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800356e:	69db      	ldr	r3, [r3, #28]
 8003570:	079b      	lsls	r3, r3, #30
 8003572:	d15a      	bne.n	800362a <HAL_TIM_IRQHandler+0x162>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003574:	f7ff ffa0 	bl	80034b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003578:	4620      	mov	r0, r4
 800357a:	f7ff ffa1 	bl	80034c0 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800357e:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003580:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003582:	7722      	strb	r2, [r4, #28]
 8003584:	e7b5      	b.n	80034f2 <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003586:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800358a:	2202      	movs	r2, #2
        HAL_TIM_IC_CaptureCallback(htim);
 800358c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800358e:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003590:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003592:	699b      	ldr	r3, [r3, #24]
 8003594:	f413 7f40 	tst.w	r3, #768	; 0x300
 8003598:	d144      	bne.n	8003624 <HAL_TIM_IRQHandler+0x15c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800359a:	f7ff ff8d 	bl	80034b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800359e:	4620      	mov	r0, r4
 80035a0:	f7ff ff8e 	bl	80034c0 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035a4:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80035a6:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035a8:	7722      	strb	r2, [r4, #28]
 80035aa:	e79c      	b.n	80034e6 <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80035ac:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80035b0:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80035b2:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80035b4:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80035b6:	699b      	ldr	r3, [r3, #24]
 80035b8:	0799      	lsls	r1, r3, #30
 80035ba:	d130      	bne.n	800361e <HAL_TIM_IRQHandler+0x156>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80035bc:	f7ff ff7c 	bl	80034b8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035c0:	4620      	mov	r0, r4
 80035c2:	f7ff ff7d 	bl	80034c0 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035c6:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80035c8:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035ca:	7722      	strb	r2, [r4, #28]
 80035cc:	e785      	b.n	80034da <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80035ce:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 80035d2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80035d4:	611a      	str	r2, [r3, #16]
}
 80035d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 80035da:	f000 b8eb 	b.w	80037b4 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80035de:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 80035e2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80035e4:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80035e6:	f7fd fd6f 	bl	80010c8 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80035ea:	6823      	ldr	r3, [r4, #0]
 80035ec:	e78d      	b.n	800350a <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80035ee:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 80035f2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80035f4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80035f6:	f000 f8df 	bl	80037b8 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80035fa:	6823      	ldr	r3, [r4, #0]
 80035fc:	e78b      	b.n	8003516 <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80035fe:	f46f 7280 	mvn.w	r2, #256	; 0x100
      HAL_TIMEx_Break2Callback(htim);
 8003602:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003604:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8003606:	f000 f8d9 	bl	80037bc <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800360a:	6823      	ldr	r3, [r4, #0]
 800360c:	e789      	b.n	8003522 <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800360e:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 8003612:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003614:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8003616:	f7ff ff55 	bl	80034c4 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800361a:	6823      	ldr	r3, [r4, #0]
 800361c:	e787      	b.n	800352e <HAL_TIM_IRQHandler+0x66>
          HAL_TIM_IC_CaptureCallback(htim);
 800361e:	f7ff ff4d 	bl	80034bc <HAL_TIM_IC_CaptureCallback>
 8003622:	e7d0      	b.n	80035c6 <HAL_TIM_IRQHandler+0xfe>
        HAL_TIM_IC_CaptureCallback(htim);
 8003624:	f7ff ff4a 	bl	80034bc <HAL_TIM_IC_CaptureCallback>
 8003628:	e7bc      	b.n	80035a4 <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
 800362a:	f7ff ff47 	bl	80034bc <HAL_TIM_IC_CaptureCallback>
 800362e:	e7a6      	b.n	800357e <HAL_TIM_IRQHandler+0xb6>
        HAL_TIM_IC_CaptureCallback(htim);
 8003630:	f7ff ff44 	bl	80034bc <HAL_TIM_IC_CaptureCallback>
 8003634:	e791      	b.n	800355a <HAL_TIM_IRQHandler+0x92>
 8003636:	bf00      	nop

08003638 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003638:	4a3f      	ldr	r2, [pc, #252]	; (8003738 <TIM_Base_SetConfig+0x100>)
 800363a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
  tmpcr1 = TIMx->CR1;
 800363e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003640:	eba0 0202 	sub.w	r2, r0, r2
 8003644:	fab2 f282 	clz	r2, r2
{
 8003648:	b430      	push	{r4, r5}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800364a:	ea4f 1252 	mov.w	r2, r2, lsr #5
 800364e:	d023      	beq.n	8003698 <TIM_Base_SetConfig+0x60>
 8003650:	bb12      	cbnz	r2, 8003698 <TIM_Base_SetConfig+0x60>
 8003652:	4c3a      	ldr	r4, [pc, #232]	; (800373c <TIM_Base_SetConfig+0x104>)
 8003654:	42a0      	cmp	r0, r4
 8003656:	d047      	beq.n	80036e8 <TIM_Base_SetConfig+0xb0>
 8003658:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800365c:	42a0      	cmp	r0, r4
 800365e:	d043      	beq.n	80036e8 <TIM_Base_SetConfig+0xb0>
 8003660:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003664:	42a0      	cmp	r0, r4
 8003666:	d049      	beq.n	80036fc <TIM_Base_SetConfig+0xc4>
 8003668:	f504 4478 	add.w	r4, r4, #63488	; 0xf800
 800366c:	42a0      	cmp	r0, r4
 800366e:	d045      	beq.n	80036fc <TIM_Base_SetConfig+0xc4>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003670:	4c33      	ldr	r4, [pc, #204]	; (8003740 <TIM_Base_SetConfig+0x108>)
 8003672:	4a34      	ldr	r2, [pc, #208]	; (8003744 <TIM_Base_SetConfig+0x10c>)
 8003674:	4290      	cmp	r0, r2
 8003676:	bf18      	it	ne
 8003678:	42a0      	cmpne	r0, r4
 800367a:	d04f      	beq.n	800371c <TIM_Base_SetConfig+0xe4>
 800367c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003680:	4290      	cmp	r0, r2
 8003682:	d04b      	beq.n	800371c <TIM_Base_SetConfig+0xe4>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003684:	694d      	ldr	r5, [r1, #20]
 8003686:	f023 0380 	bic.w	r3, r3, #128	; 0x80

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800368a:	688c      	ldr	r4, [r1, #8]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800368c:	680a      	ldr	r2, [r1, #0]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800368e:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8003690:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003692:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003694:	6282      	str	r2, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003696:	e023      	b.n	80036e0 <TIM_Base_SetConfig+0xa8>
    tmpcr1 |= Structure->CounterMode;
 8003698:	684c      	ldr	r4, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800369a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800369e:	4323      	orrs	r3, r4
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80036a0:	4c29      	ldr	r4, [pc, #164]	; (8003748 <TIM_Base_SetConfig+0x110>)
 80036a2:	1b04      	subs	r4, r0, r4
 80036a4:	fab4 f484 	clz	r4, r4
 80036a8:	0964      	lsrs	r4, r4, #5
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80036aa:	68cd      	ldr	r5, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80036ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80036b0:	432b      	orrs	r3, r5
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80036b2:	694d      	ldr	r5, [r1, #20]
 80036b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036b8:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 80036ba:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80036bc:	688b      	ldr	r3, [r1, #8]
 80036be:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80036c0:	680b      	ldr	r3, [r1, #0]
 80036c2:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80036c4:	b952      	cbnz	r2, 80036dc <TIM_Base_SetConfig+0xa4>
 80036c6:	b94c      	cbnz	r4, 80036dc <TIM_Base_SetConfig+0xa4>
 80036c8:	4a1d      	ldr	r2, [pc, #116]	; (8003740 <TIM_Base_SetConfig+0x108>)
 80036ca:	4b1e      	ldr	r3, [pc, #120]	; (8003744 <TIM_Base_SetConfig+0x10c>)
 80036cc:	4298      	cmp	r0, r3
 80036ce:	bf18      	it	ne
 80036d0:	4290      	cmpne	r0, r2
 80036d2:	d003      	beq.n	80036dc <TIM_Base_SetConfig+0xa4>
 80036d4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80036d8:	4298      	cmp	r0, r3
 80036da:	d101      	bne.n	80036e0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80036dc:	690b      	ldr	r3, [r1, #16]
 80036de:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80036e0:	2301      	movs	r3, #1
}
 80036e2:	bc30      	pop	{r4, r5}
  TIMx->EGR = TIM_EGR_UG;
 80036e4:	6143      	str	r3, [r0, #20]
}
 80036e6:	4770      	bx	lr
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80036e8:	4c17      	ldr	r4, [pc, #92]	; (8003748 <TIM_Base_SetConfig+0x110>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80036ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80036ee:	684d      	ldr	r5, [r1, #4]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80036f0:	1b04      	subs	r4, r0, r4
    tmpcr1 |= Structure->CounterMode;
 80036f2:	432b      	orrs	r3, r5
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80036f4:	fab4 f484 	clz	r4, r4
 80036f8:	0964      	lsrs	r4, r4, #5
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80036fa:	e7d6      	b.n	80036aa <TIM_Base_SetConfig+0x72>
    tmpcr1 |= Structure->CounterMode;
 80036fc:	684d      	ldr	r5, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80036fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003702:	4c11      	ldr	r4, [pc, #68]	; (8003748 <TIM_Base_SetConfig+0x110>)
    tmpcr1 |= Structure->CounterMode;
 8003704:	432b      	orrs	r3, r5
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003706:	4d11      	ldr	r5, [pc, #68]	; (800374c <TIM_Base_SetConfig+0x114>)
 8003708:	1b04      	subs	r4, r0, r4
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800370a:	42a8      	cmp	r0, r5
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800370c:	fab4 f484 	clz	r4, r4
 8003710:	ea4f 1454 	mov.w	r4, r4, lsr #5
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003714:	d0c9      	beq.n	80036aa <TIM_Base_SetConfig+0x72>
 8003716:	2c00      	cmp	r4, #0
 8003718:	d1c7      	bne.n	80036aa <TIM_Base_SetConfig+0x72>
 800371a:	e7a9      	b.n	8003670 <TIM_Base_SetConfig+0x38>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800371c:	68cc      	ldr	r4, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800371e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003722:	694a      	ldr	r2, [r1, #20]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003724:	4323      	orrs	r3, r4
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003726:	688c      	ldr	r4, [r1, #8]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003728:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800372c:	4313      	orrs	r3, r2
  TIMx->PSC = Structure->Prescaler;
 800372e:	680a      	ldr	r2, [r1, #0]
  TIMx->CR1 = tmpcr1;
 8003730:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003732:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003734:	6282      	str	r2, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003736:	e7c7      	b.n	80036c8 <TIM_Base_SetConfig+0x90>
 8003738:	40010000 	.word	0x40010000
 800373c:	40000400 	.word	0x40000400
 8003740:	40014000 	.word	0x40014000
 8003744:	40014400 	.word	0x40014400
 8003748:	40010400 	.word	0x40010400
 800374c:	40000c00 	.word	0x40000c00

08003750 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8003750:	b370      	cbz	r0, 80037b0 <HAL_TIM_Base_Init+0x60>
{
 8003752:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8003754:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003758:	4604      	mov	r4, r0
 800375a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800375e:	b313      	cbz	r3, 80037a6 <HAL_TIM_Base_Init+0x56>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003760:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 8003762:	2302      	movs	r3, #2
 8003764:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003768:	f851 0b04 	ldr.w	r0, [r1], #4
 800376c:	f7ff ff64 	bl	8003638 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003770:	2301      	movs	r3, #1
  return HAL_OK;
 8003772:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003774:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003778:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800377c:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8003780:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8003784:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8003788:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800378c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003790:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8003794:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003798:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800379c:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 80037a0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 80037a4:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80037a6:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80037aa:	f7ff fe27 	bl	80033fc <HAL_TIM_Base_MspInit>
 80037ae:	e7d7      	b.n	8003760 <HAL_TIM_Base_Init+0x10>
    return HAL_ERROR;
 80037b0:	2001      	movs	r0, #1
}
 80037b2:	4770      	bx	lr

080037b4 <HAL_TIMEx_CommutCallback>:
 80037b4:	4770      	bx	lr
 80037b6:	bf00      	nop

080037b8 <HAL_TIMEx_BreakCallback>:
 80037b8:	4770      	bx	lr
 80037ba:	bf00      	nop

080037bc <HAL_TIMEx_Break2Callback>:
 80037bc:	4770      	bx	lr
 80037be:	bf00      	nop

080037c0 <ethernet_link_status_updated>:
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 80037c0:	4770      	bx	lr
 80037c2:	bf00      	nop

080037c4 <MX_LWIP_Init>:
{
 80037c4:	b5f0      	push	{r4, r5, r6, r7, lr}
  IP_ADDRESS[0] = 192;
 80037c6:	4b25      	ldr	r3, [pc, #148]	; (800385c <MX_LWIP_Init+0x98>)
  GATEWAY_ADDRESS[0] = 0;
 80037c8:	2400      	movs	r4, #0
  IP_ADDRESS[0] = 192;
 80037ca:	4f25      	ldr	r7, [pc, #148]	; (8003860 <MX_LWIP_Init+0x9c>)
{
 80037cc:	b085      	sub	sp, #20
  NETMASK_ADDRESS[0] = 255;
 80037ce:	4e25      	ldr	r6, [pc, #148]	; (8003864 <MX_LWIP_Init+0xa0>)
	tcpip_init(tcpip_init_done, arg);
 80037d0:	4621      	mov	r1, r4
  GATEWAY_ADDRESS[0] = 0;
 80037d2:	4d25      	ldr	r5, [pc, #148]	; (8003868 <MX_LWIP_Init+0xa4>)
	tcpip_init(tcpip_init_done, arg);
 80037d4:	4620      	mov	r0, r4
  IP_ADDRESS[0] = 192;
 80037d6:	603b      	str	r3, [r7, #0]
  NETMASK_ADDRESS[0] = 255;
 80037d8:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
  GATEWAY_ADDRESS[0] = 0;
 80037dc:	602c      	str	r4, [r5, #0]
  NETMASK_ADDRESS[0] = 255;
 80037de:	6033      	str	r3, [r6, #0]
	tcpip_init(tcpip_init_done, arg);
 80037e0:	f003 f898 	bl	8006914 <tcpip_init>
	LOCK_TCPIP_CORE();
 80037e4:	f000 fb20 	bl	8003e28 <sys_lock_tcpip_core>
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 80037e8:	4920      	ldr	r1, [pc, #128]	; (800386c <MX_LWIP_Init+0xa8>)
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 80037ea:	4a21      	ldr	r2, [pc, #132]	; (8003870 <MX_LWIP_Init+0xac>)
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 80037ec:	683b      	ldr	r3, [r7, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 80037ee:	6830      	ldr	r0, [r6, #0]
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 80037f0:	9400      	str	r4, [sp, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 80037f2:	6010      	str	r0, [r2, #0]
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 80037f4:	600b      	str	r3, [r1, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 80037f6:	6828      	ldr	r0, [r5, #0]
 80037f8:	4b1e      	ldr	r3, [pc, #120]	; (8003874 <MX_LWIP_Init+0xb0>)
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 80037fa:	4c1f      	ldr	r4, [pc, #124]	; (8003878 <MX_LWIP_Init+0xb4>)
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 80037fc:	6018      	str	r0, [r3, #0]
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 80037fe:	481f      	ldr	r0, [pc, #124]	; (800387c <MX_LWIP_Init+0xb8>)
 8003800:	9002      	str	r0, [sp, #8]
 8003802:	481f      	ldr	r0, [pc, #124]	; (8003880 <MX_LWIP_Init+0xbc>)
 8003804:	9001      	str	r0, [sp, #4]
 8003806:	4620      	mov	r0, r4
 8003808:	f003 fd5e 	bl	80072c8 <netif_add>
  netif_set_default(&gnetif);
 800380c:	4620      	mov	r0, r4
 800380e:	f003 fe11 	bl	8007434 <netif_set_default>
  if (netif_is_link_up(&gnetif))
 8003812:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
    netif_set_up(&gnetif);
 8003816:	4620      	mov	r0, r4
  if (netif_is_link_up(&gnetif))
 8003818:	075b      	lsls	r3, r3, #29
 800381a:	d51c      	bpl.n	8003856 <MX_LWIP_Init+0x92>
    netif_set_up(&gnetif);
 800381c:	f003 fe14 	bl	8007448 <netif_set_up>
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8003820:	4c18      	ldr	r4, [pc, #96]	; (8003884 <MX_LWIP_Init+0xc0>)
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8003822:	4919      	ldr	r1, [pc, #100]	; (8003888 <MX_LWIP_Init+0xc4>)
 8003824:	4814      	ldr	r0, [pc, #80]	; (8003878 <MX_LWIP_Init+0xb4>)
 8003826:	f003 fea3 	bl	8007570 <netif_set_link_callback>
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 800382a:	2220      	movs	r2, #32
 800382c:	2100      	movs	r1, #0
 800382e:	1d20      	adds	r0, r4, #4
 8003830:	f00a fc5d 	bl	800e0ee <memset>
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8003834:	f44f 6180 	mov.w	r1, #1024	; 0x400
  attributes.name = "EthLink";
 8003838:	4814      	ldr	r0, [pc, #80]	; (800388c <MX_LWIP_Init+0xc8>)
  attributes.priority = osPriorityBelowNormal;
 800383a:	2310      	movs	r3, #16
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 800383c:	6161      	str	r1, [r4, #20]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 800383e:	4622      	mov	r2, r4
 8003840:	490d      	ldr	r1, [pc, #52]	; (8003878 <MX_LWIP_Init+0xb4>)
  attributes.name = "EthLink";
 8003842:	6020      	str	r0, [r4, #0]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 8003844:	4812      	ldr	r0, [pc, #72]	; (8003890 <MX_LWIP_Init+0xcc>)
  attributes.priority = osPriorityBelowNormal;
 8003846:	61a3      	str	r3, [r4, #24]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 8003848:	f000 fbf2 	bl	8004030 <osThreadNew>
}
 800384c:	b005      	add	sp, #20
 800384e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  UNLOCK_TCPIP_CORE();
 8003852:	f000 bb67 	b.w	8003f24 <sys_unlock_tcpip_core>
    netif_set_down(&gnetif);
 8003856:	f003 fe1b 	bl	8007490 <netif_set_down>
 800385a:	e7e1      	b.n	8003820 <MX_LWIP_Init+0x5c>
 800385c:	0a01a8c0 	.word	0x0a01a8c0
 8003860:	24000108 	.word	0x24000108
 8003864:	2400010c 	.word	0x2400010c
 8003868:	24000104 	.word	0x24000104
 800386c:	2400016c 	.word	0x2400016c
 8003870:	24000170 	.word	0x24000170
 8003874:	24000168 	.word	0x24000168
 8003878:	24000134 	.word	0x24000134
 800387c:	08006895 	.word	0x08006895
 8003880:	08003a55 	.word	0x08003a55
 8003884:	24000110 	.word	0x24000110
 8003888:	080037c1 	.word	0x080037c1
 800388c:	0800f6fc 	.word	0x0800f6fc
 8003890:	08003e45 	.word	0x08003e45

08003894 <ETH_PHY_IO_DeInit>:
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
  return 0;
}
 8003894:	2000      	movs	r0, #0
 8003896:	4770      	bx	lr

08003898 <low_level_output>:
{
 8003898:	b570      	push	{r4, r5, r6, lr}
 800389a:	b08c      	sub	sp, #48	; 0x30
 800389c:	460c      	mov	r4, r1
  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800389e:	2230      	movs	r2, #48	; 0x30
 80038a0:	2100      	movs	r1, #0
 80038a2:	4668      	mov	r0, sp
 80038a4:	f00a fc23 	bl	800e0ee <memset>
  for(q = p; q != NULL; q = q->next)
 80038a8:	b1fc      	cbz	r4, 80038ea <low_level_output+0x52>
    Txbuffer[i].len = q->len;
 80038aa:	8962      	ldrh	r2, [r4, #10]
 80038ac:	466b      	mov	r3, sp
    Txbuffer[i].buffer = q->payload;
 80038ae:	6861      	ldr	r1, [r4, #4]
  uint32_t i = 0U;
 80038b0:	f04f 0c00 	mov.w	ip, #0
    if(i >= ETH_TX_DESC_CNT)
 80038b4:	330c      	adds	r3, #12
    Txbuffer[i].len = q->len;
 80038b6:	e9cd 1200 	strd	r1, r2, [sp]
 80038ba:	4622      	mov	r2, r4
    if(q->next == NULL)
 80038bc:	6812      	ldr	r2, [r2, #0]
 80038be:	b16a      	cbz	r2, 80038dc <low_level_output+0x44>
    i++;
 80038c0:	f10c 0c01 	add.w	ip, ip, #1
    if(i >= ETH_TX_DESC_CNT)
 80038c4:	f1bc 0f04 	cmp.w	ip, #4
 80038c8:	d02b      	beq.n	8003922 <low_level_output+0x8a>
    Txbuffer[i].buffer = q->payload;
 80038ca:	6850      	ldr	r0, [r2, #4]
    Txbuffer[i].len = q->len;
 80038cc:	8951      	ldrh	r1, [r2, #10]
    if(q->next == NULL)
 80038ce:	6812      	ldr	r2, [r2, #0]
    Txbuffer[i].len = q->len;
 80038d0:	6059      	str	r1, [r3, #4]
    Txbuffer[i].buffer = q->payload;
 80038d2:	e943 3001 	strd	r3, r0, [r3, #-4]
    if(i >= ETH_TX_DESC_CNT)
 80038d6:	330c      	adds	r3, #12
    if(q->next == NULL)
 80038d8:	2a00      	cmp	r2, #0
 80038da:	d1f1      	bne.n	80038c0 <low_level_output+0x28>
      Txbuffer[i].next = NULL;
 80038dc:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 80038e0:	ab0c      	add	r3, sp, #48	; 0x30
 80038e2:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 80038e6:	f84c 2c28 	str.w	r2, [ip, #-40]
  TxConfig.Length = p->tot_len;
 80038ea:	4e10      	ldr	r6, [pc, #64]	; (800392c <low_level_output+0x94>)
  pbuf_ref(p);
 80038ec:	4620      	mov	r0, r4
  TxConfig.Length = p->tot_len;
 80038ee:	8923      	ldrh	r3, [r4, #8]
  TxConfig.TxBuffer = Txbuffer;
 80038f0:	f8c6 d008 	str.w	sp, [r6, #8]
  TxConfig.Length = p->tot_len;
 80038f4:	6073      	str	r3, [r6, #4]
  TxConfig.pData = p;
 80038f6:	6374      	str	r4, [r6, #52]	; 0x34
  pbuf_ref(p);
 80038f8:	f004 f976 	bl	8007be8 <pbuf_ref>
  HAL_ETH_Transmit_IT(&heth, &TxConfig);
 80038fc:	4631      	mov	r1, r6
 80038fe:	480c      	ldr	r0, [pc, #48]	; (8003930 <low_level_output+0x98>)
 8003900:	4d0c      	ldr	r5, [pc, #48]	; (8003934 <low_level_output+0x9c>)
 8003902:	f7fe fac9 	bl	8001e98 <HAL_ETH_Transmit_IT>
  while(osSemaphoreAcquire(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 8003906:	f04f 31ff 	mov.w	r1, #4294967295
 800390a:	6828      	ldr	r0, [r5, #0]
 800390c:	f000 fcc2 	bl	8004294 <osSemaphoreAcquire>
 8003910:	4604      	mov	r4, r0
 8003912:	2800      	cmp	r0, #0
 8003914:	d1f7      	bne.n	8003906 <low_level_output+0x6e>
  HAL_ETH_ReleaseTxPacket(&heth);
 8003916:	4806      	ldr	r0, [pc, #24]	; (8003930 <low_level_output+0x98>)
 8003918:	f7fe fb78 	bl	800200c <HAL_ETH_ReleaseTxPacket>
  return errval;
 800391c:	4620      	mov	r0, r4
}
 800391e:	b00c      	add	sp, #48	; 0x30
 8003920:	bd70      	pop	{r4, r5, r6, pc}
      return ERR_IF;
 8003922:	f06f 000b 	mvn.w	r0, #11
}
 8003926:	b00c      	add	sp, #48	; 0x30
 8003928:	bd70      	pop	{r4, r5, r6, pc}
 800392a:	bf00      	nop
 800392c:	2400019c 	.word	0x2400019c
 8003930:	240001d8 	.word	0x240001d8
 8003934:	240001d4 	.word	0x240001d4

08003938 <ETH_PHY_IO_GetTick>:
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
  return HAL_GetTick();
 8003938:	f7fd be5c 	b.w	80015f4 <HAL_GetTick>

0800393c <ETH_PHY_IO_Init>:
  HAL_ETH_SetMDIOClockRange(&heth);
 800393c:	4802      	ldr	r0, [pc, #8]	; (8003948 <ETH_PHY_IO_Init+0xc>)
{
 800393e:	b508      	push	{r3, lr}
  HAL_ETH_SetMDIOClockRange(&heth);
 8003940:	f7fe fd7e 	bl	8002440 <HAL_ETH_SetMDIOClockRange>
}
 8003944:	2000      	movs	r0, #0
 8003946:	bd08      	pop	{r3, pc}
 8003948:	240001d8 	.word	0x240001d8

0800394c <ETH_PHY_IO_ReadReg>:
{
 800394c:	4684      	mov	ip, r0
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800394e:	4806      	ldr	r0, [pc, #24]	; (8003968 <ETH_PHY_IO_ReadReg+0x1c>)
{
 8003950:	b508      	push	{r3, lr}
 8003952:	4613      	mov	r3, r2
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8003954:	460a      	mov	r2, r1
 8003956:	4661      	mov	r1, ip
 8003958:	f7fe fc3a 	bl	80021d0 <HAL_ETH_ReadPHYRegister>
 800395c:	3800      	subs	r0, #0
 800395e:	bf18      	it	ne
 8003960:	2001      	movne	r0, #1
}
 8003962:	4240      	negs	r0, r0
 8003964:	bd08      	pop	{r3, pc}
 8003966:	bf00      	nop
 8003968:	240001d8 	.word	0x240001d8

0800396c <ETH_PHY_IO_WriteReg>:
{
 800396c:	4684      	mov	ip, r0
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800396e:	4806      	ldr	r0, [pc, #24]	; (8003988 <ETH_PHY_IO_WriteReg+0x1c>)
{
 8003970:	b508      	push	{r3, lr}
 8003972:	4613      	mov	r3, r2
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8003974:	460a      	mov	r2, r1
 8003976:	4661      	mov	r1, ip
 8003978:	f7fe fc58 	bl	800222c <HAL_ETH_WritePHYRegister>
 800397c:	3800      	subs	r0, #0
 800397e:	bf18      	it	ne
 8003980:	2001      	movne	r0, #1
}
 8003982:	4240      	negs	r0, r0
 8003984:	bd08      	pop	{r3, pc}
 8003986:	bf00      	nop
 8003988:	240001d8 	.word	0x240001d8

0800398c <pbuf_free_custom>:
{
 800398c:	4601      	mov	r1, r0
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800398e:	4808      	ldr	r0, [pc, #32]	; (80039b0 <pbuf_free_custom+0x24>)
{
 8003990:	b508      	push	{r3, lr}
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8003992:	f003 fbb7 	bl	8007104 <memp_free_pool>
  if (RxAllocStatus == RX_ALLOC_ERROR)
 8003996:	4b07      	ldr	r3, [pc, #28]	; (80039b4 <pbuf_free_custom+0x28>)
 8003998:	781a      	ldrb	r2, [r3, #0]
 800399a:	2a01      	cmp	r2, #1
 800399c:	d000      	beq.n	80039a0 <pbuf_free_custom+0x14>
}
 800399e:	bd08      	pop	{r3, pc}
    osSemaphoreRelease(RxPktSemaphore);
 80039a0:	4905      	ldr	r1, [pc, #20]	; (80039b8 <pbuf_free_custom+0x2c>)
    RxAllocStatus = RX_ALLOC_OK;
 80039a2:	2200      	movs	r2, #0
    osSemaphoreRelease(RxPktSemaphore);
 80039a4:	6808      	ldr	r0, [r1, #0]
    RxAllocStatus = RX_ALLOC_OK;
 80039a6:	701a      	strb	r2, [r3, #0]
}
 80039a8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    osSemaphoreRelease(RxPktSemaphore);
 80039ac:	f000 bca6 	b.w	80042fc <osSemaphoreRelease>
 80039b0:	0800f7bc 	.word	0x0800f7bc
 80039b4:	24000194 	.word	0x24000194
 80039b8:	24000198 	.word	0x24000198

080039bc <ethernetif_input>:
{
 80039bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80039c0:	4c14      	ldr	r4, [pc, #80]	; (8003a14 <ethernetif_input+0x58>)
 80039c2:	b083      	sub	sp, #12
 80039c4:	f8df 8050 	ldr.w	r8, [pc, #80]	; 8003a18 <ethernetif_input+0x5c>
 80039c8:	4606      	mov	r6, r0
  struct pbuf *p = NULL;
 80039ca:	2700      	movs	r7, #0
    HAL_ETH_ReadData(&heth, (void **)&p);
 80039cc:	f8df 904c 	ldr.w	r9, [pc, #76]	; 8003a1c <ethernetif_input+0x60>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80039d0:	f04f 31ff 	mov.w	r1, #4294967295
 80039d4:	6820      	ldr	r0, [r4, #0]
 80039d6:	f000 fc5d 	bl	8004294 <osSemaphoreAcquire>
 80039da:	2800      	cmp	r0, #0
 80039dc:	d1f8      	bne.n	80039d0 <ethernetif_input+0x14>
  if(RxAllocStatus == RX_ALLOC_OK)
 80039de:	f898 3000 	ldrb.w	r3, [r8]
  struct pbuf *p = NULL;
 80039e2:	9701      	str	r7, [sp, #4]
  if(RxAllocStatus == RX_ALLOC_OK)
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d1f3      	bne.n	80039d0 <ethernetif_input+0x14>
    HAL_ETH_ReadData(&heth, (void **)&p);
 80039e8:	a901      	add	r1, sp, #4
 80039ea:	4648      	mov	r0, r9
 80039ec:	f7fe fa84 	bl	8001ef8 <HAL_ETH_ReadData>
  return p;
 80039f0:	9d01      	ldr	r5, [sp, #4]
          if (netif->input( p, netif) != ERR_OK )
 80039f2:	4631      	mov	r1, r6
 80039f4:	4628      	mov	r0, r5
        if (p != NULL)
 80039f6:	2d00      	cmp	r5, #0
 80039f8:	d0ea      	beq.n	80039d0 <ethernetif_input+0x14>
          if (netif->input( p, netif) != ERR_OK )
 80039fa:	6933      	ldr	r3, [r6, #16]
 80039fc:	4798      	blx	r3
 80039fe:	2800      	cmp	r0, #0
 8003a00:	d0ed      	beq.n	80039de <ethernetif_input+0x22>
            pbuf_free(p);
 8003a02:	4628      	mov	r0, r5
 8003a04:	f003 ff6e 	bl	80078e4 <pbuf_free>
  if(RxAllocStatus == RX_ALLOC_OK)
 8003a08:	f898 3000 	ldrb.w	r3, [r8]
  struct pbuf *p = NULL;
 8003a0c:	9701      	str	r7, [sp, #4]
  if(RxAllocStatus == RX_ALLOC_OK)
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d1de      	bne.n	80039d0 <ethernetif_input+0x14>
 8003a12:	e7e9      	b.n	80039e8 <ethernetif_input+0x2c>
 8003a14:	24000198 	.word	0x24000198
 8003a18:	24000194 	.word	0x24000194
 8003a1c:	240001d8 	.word	0x240001d8

08003a20 <HAL_ETH_RxCpltCallback>:
  osSemaphoreRelease(RxPktSemaphore);
 8003a20:	4b01      	ldr	r3, [pc, #4]	; (8003a28 <HAL_ETH_RxCpltCallback+0x8>)
 8003a22:	6818      	ldr	r0, [r3, #0]
 8003a24:	f000 bc6a 	b.w	80042fc <osSemaphoreRelease>
 8003a28:	24000198 	.word	0x24000198

08003a2c <HAL_ETH_TxCpltCallback>:
  osSemaphoreRelease(TxPktSemaphore);
 8003a2c:	4b01      	ldr	r3, [pc, #4]	; (8003a34 <HAL_ETH_TxCpltCallback+0x8>)
 8003a2e:	6818      	ldr	r0, [r3, #0]
 8003a30:	f000 bc64 	b.w	80042fc <osSemaphoreRelease>
 8003a34:	240001d4 	.word	0x240001d4

08003a38 <HAL_ETH_ErrorCallback>:
{
 8003a38:	b508      	push	{r3, lr}
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMACSR_RBU) == ETH_DMACSR_RBU)
 8003a3a:	f7fe fe61 	bl	8002700 <HAL_ETH_GetDMAError>
 8003a3e:	0603      	lsls	r3, r0, #24
 8003a40:	d400      	bmi.n	8003a44 <HAL_ETH_ErrorCallback+0xc>
}
 8003a42:	bd08      	pop	{r3, pc}
     osSemaphoreRelease(RxPktSemaphore);
 8003a44:	4b02      	ldr	r3, [pc, #8]	; (8003a50 <HAL_ETH_ErrorCallback+0x18>)
 8003a46:	6818      	ldr	r0, [r3, #0]
}
 8003a48:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
     osSemaphoreRelease(RxPktSemaphore);
 8003a4c:	f000 bc56 	b.w	80042fc <osSemaphoreRelease>
 8003a50:	24000198 	.word	0x24000198

08003a54 <ethernetif_init>:
{
 8003a54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8003a58:	4604      	mov	r4, r0
{
 8003a5a:	b0a5      	sub	sp, #148	; 0x94
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8003a5c:	2800      	cmp	r0, #0
 8003a5e:	f000 80b7 	beq.w	8003bd0 <ethernetif_init+0x17c>
  netif->linkoutput = low_level_output;
 8003a62:	4b5f      	ldr	r3, [pc, #380]	; (8003be0 <ethernetif_init+0x18c>)
  netif->name[0] = IFNAME0;
 8003a64:	f247 4173 	movw	r1, #29811	; 0x7473
  netif->output = etharp_output;
 8003a68:	4a5e      	ldr	r2, [pc, #376]	; (8003be4 <ethernetif_init+0x190>)
  ETH_MACConfigTypeDef MACConf = {0};
 8003a6a:	a80b      	add	r0, sp, #44	; 0x2c
  netif->name[0] = IFNAME0;
 8003a6c:	85e1      	strh	r1, [r4, #46]	; 0x2e
  ETH_MACConfigTypeDef MACConf = {0};
 8003a6e:	2100      	movs	r1, #0
  netif->output = etharp_output;
 8003a70:	6162      	str	r2, [r4, #20]
  ETH_MACConfigTypeDef MACConf = {0};
 8003a72:	2264      	movs	r2, #100	; 0x64
  netif->linkoutput = low_level_output;
 8003a74:	61a3      	str	r3, [r4, #24]
  MACAddr[4] = 0x00;
 8003a76:	2600      	movs	r6, #0
  ETH_MACConfigTypeDef MACConf = {0};
 8003a78:	f00a fb39 	bl	800e0ee <memset>
  heth.Instance = ETH;
 8003a7c:	4d5a      	ldr	r5, [pc, #360]	; (8003be8 <ethernetif_init+0x194>)
 8003a7e:	4b5b      	ldr	r3, [pc, #364]	; (8003bec <ethernetif_init+0x198>)
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8003a80:	2701      	movs	r7, #1
  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8003a82:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 8003c2c <ethernetif_init+0x1d8>
  hal_eth_init_status = HAL_ETH_Init(&heth);
 8003a86:	4628      	mov	r0, r5
  heth.Instance = ETH;
 8003a88:	602b      	str	r3, [r5, #0]
  MACAddr[0] = 0x00;
 8003a8a:	4b59      	ldr	r3, [pc, #356]	; (8003bf0 <ethernetif_init+0x19c>)
  MACAddr[4] = 0x00;
 8003a8c:	f8ad 6004 	strh.w	r6, [sp, #4]
  MACAddr[0] = 0x00;
 8003a90:	9300      	str	r3, [sp, #0]
  heth.Init.TxDesc = DMATxDscrTab;
 8003a92:	4b58      	ldr	r3, [pc, #352]	; (8003bf4 <ethernetif_init+0x1a0>)
  heth.Init.MACAddr = &MACAddr[0];
 8003a94:	f8c5 d004 	str.w	sp, [r5, #4]
  heth.Init.TxDesc = DMATxDscrTab;
 8003a98:	60eb      	str	r3, [r5, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8003a9a:	4b57      	ldr	r3, [pc, #348]	; (8003bf8 <ethernetif_init+0x1a4>)
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8003a9c:	722f      	strb	r7, [r5, #8]
  heth.Init.RxDesc = DMARxDscrTab;
 8003a9e:	612b      	str	r3, [r5, #16]
  heth.Init.RxBuffLen = 1536;
 8003aa0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003aa4:	616b      	str	r3, [r5, #20]
  hal_eth_init_status = HAL_ETH_Init(&heth);
 8003aa6:	f7fe fd0d 	bl	80024c4 <HAL_ETH_Init>
  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8003aaa:	2234      	movs	r2, #52	; 0x34
 8003aac:	4631      	mov	r1, r6
  hal_eth_init_status = HAL_ETH_Init(&heth);
 8003aae:	4680      	mov	r8, r0
  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8003ab0:	f109 0004 	add.w	r0, r9, #4
 8003ab4:	f00a fb1b 	bl	800e0ee <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8003ab8:	2321      	movs	r3, #33	; 0x21
  LWIP_MEMPOOL_INIT(RX_POOL);
 8003aba:	4850      	ldr	r0, [pc, #320]	; (8003bfc <ethernetif_init+0x1a8>)
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8003abc:	f8c9 3000 	str.w	r3, [r9]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8003ac0:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8003ac4:	f8c9 3014 	str.w	r3, [r9, #20]
  LWIP_MEMPOOL_INIT(RX_POOL);
 8003ac8:	f003 faa4 	bl	8007014 <memp_init_pool>
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8003acc:	686b      	ldr	r3, [r5, #4]
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8003ace:	2206      	movs	r2, #6
  RxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 8003ad0:	4638      	mov	r0, r7
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8003ad2:	f884 202c 	strb.w	r2, [r4, #44]	; 0x2c
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8003ad6:	781a      	ldrb	r2, [r3, #0]
 8003ad8:	f884 2026 	strb.w	r2, [r4, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8003adc:	785a      	ldrb	r2, [r3, #1]
 8003ade:	f884 2027 	strb.w	r2, [r4, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8003ae2:	789a      	ldrb	r2, [r3, #2]
 8003ae4:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8003ae8:	78da      	ldrb	r2, [r3, #3]
 8003aea:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8003aee:	7919      	ldrb	r1, [r3, #4]
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8003af0:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8003af4:	f884 102a 	strb.w	r1, [r4, #42]	; 0x2a
  RxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 8003af8:	4639      	mov	r1, r7
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8003afa:	795b      	ldrb	r3, [r3, #5]
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8003afc:	f042 020a 	orr.w	r2, r2, #10
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8003b00:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
  netif->mtu = ETH_MAX_PAYLOAD;
 8003b04:	f240 53dc 	movw	r3, #1500	; 0x5dc
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8003b08:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
  RxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 8003b0c:	4632      	mov	r2, r6
  netif->mtu = ETH_MAX_PAYLOAD;
 8003b0e:	84a3      	strh	r3, [r4, #36]	; 0x24
  RxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 8003b10:	f000 fb70 	bl	80041f4 <osSemaphoreNew>
 8003b14:	4b3a      	ldr	r3, [pc, #232]	; (8003c00 <ethernetif_init+0x1ac>)
  TxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 8003b16:	4632      	mov	r2, r6
 8003b18:	4639      	mov	r1, r7
  RxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 8003b1a:	6018      	str	r0, [r3, #0]
  TxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 8003b1c:	4638      	mov	r0, r7
 8003b1e:	f000 fb69 	bl	80041f4 <osSemaphoreNew>
 8003b22:	4b38      	ldr	r3, [pc, #224]	; (8003c04 <ethernetif_init+0x1b0>)
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8003b24:	4631      	mov	r1, r6
 8003b26:	2220      	movs	r2, #32
  TxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 8003b28:	6018      	str	r0, [r3, #0]
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8003b2a:	a803      	add	r0, sp, #12
 8003b2c:	f00a fadf 	bl	800e0ee <memset>
  attributes.name = "EthIf";
 8003b30:	4b35      	ldr	r3, [pc, #212]	; (8003c08 <ethernetif_init+0x1b4>)
  attributes.priority = osPriorityRealtime;
 8003b32:	f44f 6180 	mov.w	r1, #1024	; 0x400
  osThreadNew(ethernetif_input, netif, &attributes);
 8003b36:	aa02      	add	r2, sp, #8
  attributes.name = "EthIf";
 8003b38:	9302      	str	r3, [sp, #8]
  attributes.priority = osPriorityRealtime;
 8003b3a:	2330      	movs	r3, #48	; 0x30
  osThreadNew(ethernetif_input, netif, &attributes);
 8003b3c:	4833      	ldr	r0, [pc, #204]	; (8003c0c <ethernetif_init+0x1b8>)
  attributes.priority = osPriorityRealtime;
 8003b3e:	e9cd 1307 	strd	r1, r3, [sp, #28]
  osThreadNew(ethernetif_input, netif, &attributes);
 8003b42:	4621      	mov	r1, r4
 8003b44:	f000 fa74 	bl	8004030 <osThreadNew>
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8003b48:	4931      	ldr	r1, [pc, #196]	; (8003c10 <ethernetif_init+0x1bc>)
 8003b4a:	4832      	ldr	r0, [pc, #200]	; (8003c14 <ethernetif_init+0x1c0>)
 8003b4c:	f7fd fc44 	bl	80013d8 <LAN8742_RegisterBusIO>
  LAN8742_Init(&LAN8742);
 8003b50:	4830      	ldr	r0, [pc, #192]	; (8003c14 <ethernetif_init+0x1c0>)
 8003b52:	f7fd fc5b 	bl	800140c <LAN8742_Init>
  if (hal_eth_init_status == HAL_OK)
 8003b56:	f1b8 0f00 	cmp.w	r8, #0
 8003b5a:	d124      	bne.n	8003ba6 <ethernetif_init+0x152>
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8003b5c:	482d      	ldr	r0, [pc, #180]	; (8003c14 <ethernetif_init+0x1c0>)
 8003b5e:	f7fd fcbf 	bl	80014e0 <LAN8742_GetLinkState>
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 8003b62:	42b8      	cmp	r0, r7
 8003b64:	dd2a      	ble.n	8003bbc <ethernetif_init+0x168>
      switch (PHYLinkState)
 8003b66:	3803      	subs	r0, #3
 8003b68:	2802      	cmp	r0, #2
 8003b6a:	d822      	bhi.n	8003bb2 <ethernetif_init+0x15e>
 8003b6c:	4a2a      	ldr	r2, [pc, #168]	; (8003c18 <ethernetif_init+0x1c4>)
 8003b6e:	4b2b      	ldr	r3, [pc, #172]	; (8003c1c <ethernetif_init+0x1c8>)
 8003b70:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 8003b74:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 8003b78:	a90b      	add	r1, sp, #44	; 0x2c
 8003b7a:	481b      	ldr	r0, [pc, #108]	; (8003be8 <ethernetif_init+0x194>)
 8003b7c:	f7fe fb88 	bl	8002290 <HAL_ETH_GetMACConfig>
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 8003b80:	a90b      	add	r1, sp, #44	; 0x2c
 8003b82:	4819      	ldr	r0, [pc, #100]	; (8003be8 <ethernetif_init+0x194>)
    MACConf.Speed = speed;
 8003b84:	e9cd 5610 	strd	r5, r6, [sp, #64]	; 0x40
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 8003b88:	f7fe fc4c 	bl	8002424 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 8003b8c:	4816      	ldr	r0, [pc, #88]	; (8003be8 <ethernetif_init+0x194>)
 8003b8e:	f7fe f8ef 	bl	8001d70 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8003b92:	4620      	mov	r0, r4
 8003b94:	f003 fc58 	bl	8007448 <netif_set_up>
    netif_set_link_up(netif);
 8003b98:	4620      	mov	r0, r4
 8003b9a:	f003 fc9d 	bl	80074d8 <netif_set_link_up>
}
 8003b9e:	2000      	movs	r0, #0
 8003ba0:	b025      	add	sp, #148	; 0x94
 8003ba2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    Error_Handler();
 8003ba6:	f7fd fa99 	bl	80010dc <Error_Handler>
}
 8003baa:	2000      	movs	r0, #0
 8003bac:	b025      	add	sp, #148	; 0x94
 8003bae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      switch (PHYLinkState)
 8003bb2:	f44f 4580 	mov.w	r5, #16384	; 0x4000
 8003bb6:	f44f 5600 	mov.w	r6, #8192	; 0x2000
 8003bba:	e7dd      	b.n	8003b78 <ethernetif_init+0x124>
      netif_set_link_down(netif);
 8003bbc:	4620      	mov	r0, r4
 8003bbe:	f003 fcb3 	bl	8007528 <netif_set_link_down>
      netif_set_down(netif);
 8003bc2:	4620      	mov	r0, r4
 8003bc4:	f003 fc64 	bl	8007490 <netif_set_down>
}
 8003bc8:	2000      	movs	r0, #0
 8003bca:	b025      	add	sp, #148	; 0x94
 8003bcc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8003bd0:	4b13      	ldr	r3, [pc, #76]	; (8003c20 <ethernetif_init+0x1cc>)
 8003bd2:	f44f 7206 	mov.w	r2, #536	; 0x218
 8003bd6:	4913      	ldr	r1, [pc, #76]	; (8003c24 <ethernetif_init+0x1d0>)
 8003bd8:	4813      	ldr	r0, [pc, #76]	; (8003c28 <ethernetif_init+0x1d4>)
 8003bda:	f00a fa23 	bl	800e024 <iprintf>
 8003bde:	e740      	b.n	8003a62 <ethernetif_init+0xe>
 8003be0:	08003899 	.word	0x08003899
 8003be4:	0800cc49 	.word	0x0800cc49
 8003be8:	240001d8 	.word	0x240001d8
 8003bec:	40028000 	.word	0x40028000
 8003bf0:	00e18000 	.word	0x00e18000
 8003bf4:	30040060 	.word	0x30040060
 8003bf8:	30040000 	.word	0x30040000
 8003bfc:	0800f7bc 	.word	0x0800f7bc
 8003c00:	24000198 	.word	0x24000198
 8003c04:	240001d4 	.word	0x240001d4
 8003c08:	0800f730 	.word	0x0800f730
 8003c0c:	080039bd 	.word	0x080039bd
 8003c10:	24000010 	.word	0x24000010
 8003c14:	24000174 	.word	0x24000174
 8003c18:	0800f784 	.word	0x0800f784
 8003c1c:	0800f790 	.word	0x0800f790
 8003c20:	0800f704 	.word	0x0800f704
 8003c24:	0800f720 	.word	0x0800f720
 8003c28:	0800ef30 	.word	0x0800ef30
 8003c2c:	2400019c 	.word	0x2400019c

08003c30 <sys_now>:
  return HAL_GetTick();
 8003c30:	f7fd bce0 	b.w	80015f4 <HAL_GetTick>

08003c34 <HAL_ETH_MspInit>:
  if(ethHandle->Instance==ETH)
 8003c34:	4b4b      	ldr	r3, [pc, #300]	; (8003d64 <HAL_ETH_MspInit+0x130>)
 8003c36:	6802      	ldr	r2, [r0, #0]
{
 8003c38:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(ethHandle->Instance==ETH)
 8003c3a:	429a      	cmp	r2, r3
{
 8003c3c:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c3e:	f04f 0400 	mov.w	r4, #0
 8003c42:	e9cd 4407 	strd	r4, r4, [sp, #28]
 8003c46:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 8003c4a:	940b      	str	r4, [sp, #44]	; 0x2c
  if(ethHandle->Instance==ETH)
 8003c4c:	d001      	beq.n	8003c52 <HAL_ETH_MspInit+0x1e>
}
 8003c4e:	b00d      	add	sp, #52	; 0x34
 8003c50:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8003c52:	4b45      	ldr	r3, [pc, #276]	; (8003d68 <HAL_ETH_MspInit+0x134>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c54:	2702      	movs	r7, #2
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8003c56:	2132      	movs	r1, #50	; 0x32
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c58:	2603      	movs	r6, #3
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8003c5a:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003c5e:	250b      	movs	r5, #11
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c60:	4842      	ldr	r0, [pc, #264]	; (8003d6c <HAL_ETH_MspInit+0x138>)
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8003c62:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c66:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 8003c6a:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8003c6e:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8003c72:	9200      	str	r2, [sp, #0]
 8003c74:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8003c76:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8003c7a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003c7e:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 8003c82:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8003c86:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
 8003c8a:	9201      	str	r2, [sp, #4]
 8003c8c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8003c8e:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8003c92:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003c96:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 8003c9a:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8003c9e:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8003ca2:	9202      	str	r2, [sp, #8]
 8003ca4:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ca6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003caa:	f042 0204 	orr.w	r2, r2, #4
 8003cae:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8003cb2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003cb6:	f002 0204 	and.w	r2, r2, #4
 8003cba:	9203      	str	r2, [sp, #12]
 8003cbc:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003cbe:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003cc2:	f042 0201 	orr.w	r2, r2, #1
 8003cc6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8003cca:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003cce:	f002 0201 	and.w	r2, r2, #1
 8003cd2:	9204      	str	r2, [sp, #16]
 8003cd4:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003cd6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003cda:	433a      	orrs	r2, r7
 8003cdc:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8003ce0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003ce4:	403a      	ands	r2, r7
 8003ce6:	9205      	str	r2, [sp, #20]
 8003ce8:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003cea:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003cee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003cf2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8003cf6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003cfa:	960a      	str	r6, [sp, #40]	; 0x28
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003cfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003d00:	950b      	str	r5, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d02:	e9cd 1707 	strd	r1, r7, [sp, #28]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003d06:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003d08:	a907      	add	r1, sp, #28
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003d0a:	9b06      	ldr	r3, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003d0c:	f7fe fcfc 	bl	8002708 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8003d10:	2386      	movs	r3, #134	; 0x86
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d12:	a907      	add	r1, sp, #28
 8003d14:	4816      	ldr	r0, [pc, #88]	; (8003d70 <HAL_ETH_MspInit+0x13c>)
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8003d16:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d18:	e9cd 7408 	strd	r7, r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003d1c:	e9cd 650a 	strd	r6, r5, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d20:	f7fe fcf2 	bl	8002708 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003d24:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d28:	a907      	add	r1, sp, #28
 8003d2a:	4812      	ldr	r0, [pc, #72]	; (8003d74 <HAL_ETH_MspInit+0x140>)
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003d2c:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d2e:	e9cd 7408 	strd	r7, r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003d32:	e9cd 650a 	strd	r6, r5, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d36:	f7fe fce7 	bl	8002708 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8003d3a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003d3e:	a907      	add	r1, sp, #28
 8003d40:	480d      	ldr	r0, [pc, #52]	; (8003d78 <HAL_ETH_MspInit+0x144>)
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8003d42:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d44:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003d46:	950b      	str	r5, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d48:	e9cd 4609 	strd	r4, r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003d4c:	f7fe fcdc 	bl	8002708 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8003d50:	4622      	mov	r2, r4
 8003d52:	2105      	movs	r1, #5
 8003d54:	203d      	movs	r0, #61	; 0x3d
 8003d56:	f7fd fc75 	bl	8001644 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8003d5a:	203d      	movs	r0, #61	; 0x3d
 8003d5c:	f7fd fcb0 	bl	80016c0 <HAL_NVIC_EnableIRQ>
}
 8003d60:	b00d      	add	sp, #52	; 0x34
 8003d62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d64:	40028000 	.word	0x40028000
 8003d68:	58024400 	.word	0x58024400
 8003d6c:	58020800 	.word	0x58020800
 8003d70:	58020000 	.word	0x58020000
 8003d74:	58020400 	.word	0x58020400
 8003d78:	58021800 	.word	0x58021800

08003d7c <HAL_ETH_RxAllocateCallback>:
    osDelay(100);
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8003d7c:	b530      	push	{r4, r5, lr}
 8003d7e:	4604      	mov	r4, r0
 8003d80:	b083      	sub	sp, #12
/* USER CODE BEGIN HAL ETH RxAllocateCallback */

  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8003d82:	480d      	ldr	r0, [pc, #52]	; (8003db8 <HAL_ETH_RxAllocateCallback+0x3c>)
 8003d84:	f003 f98e 	bl	80070a4 <memp_malloc_pool>
  if (p)
 8003d88:	4603      	mov	r3, r0
 8003d8a:	b178      	cbz	r0, 8003dac <HAL_ETH_RxAllocateCallback+0x30>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8003d8c:	f100 0520 	add.w	r5, r0, #32
    p->custom_free_function = pbuf_free_custom;
 8003d90:	4a0a      	ldr	r2, [pc, #40]	; (8003dbc <HAL_ETH_RxAllocateCallback+0x40>)
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 8003d92:	2100      	movs	r1, #0
 8003d94:	f44f 60c0 	mov.w	r0, #1536	; 0x600
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8003d98:	6025      	str	r5, [r4, #0]
    p->custom_free_function = pbuf_free_custom;
 8003d9a:	611a      	str	r2, [r3, #16]
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 8003d9c:	2241      	movs	r2, #65	; 0x41
 8003d9e:	9001      	str	r0, [sp, #4]
 8003da0:	4608      	mov	r0, r1
 8003da2:	9500      	str	r5, [sp, #0]
 8003da4:	f003 fce2 	bl	800776c <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8003da8:	b003      	add	sp, #12
 8003daa:	bd30      	pop	{r4, r5, pc}
    RxAllocStatus = RX_ALLOC_ERROR;
 8003dac:	4a04      	ldr	r2, [pc, #16]	; (8003dc0 <HAL_ETH_RxAllocateCallback+0x44>)
 8003dae:	2101      	movs	r1, #1
    *buff = NULL;
 8003db0:	6020      	str	r0, [r4, #0]
    RxAllocStatus = RX_ALLOC_ERROR;
 8003db2:	7011      	strb	r1, [r2, #0]
}
 8003db4:	b003      	add	sp, #12
 8003db6:	bd30      	pop	{r4, r5, pc}
 8003db8:	0800f7bc 	.word	0x0800f7bc
 8003dbc:	0800398d 	.word	0x0800398d
 8003dc0:	24000194 	.word	0x24000194

08003dc4 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8003dc4:	b430      	push	{r4, r5}
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
  struct pbuf *p = NULL;

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
  p->next = NULL;
 8003dc6:	2500      	movs	r5, #0
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8003dc8:	f1a2 0420 	sub.w	r4, r2, #32
  p->tot_len = 0;
  p->len = Length;
 8003dcc:	f822 3c16 	strh.w	r3, [r2, #-22]
  p->next = NULL;
 8003dd0:	f842 5c20 	str.w	r5, [r2, #-32]
  p->tot_len = 0;
 8003dd4:	f822 5c18 	strh.w	r5, [r2, #-24]

  /* Chain the buffer. */
  if (!*ppStart)
 8003dd8:	6805      	ldr	r5, [r0, #0]
 8003dda:	b1f5      	cbz	r5, 8003e1a <HAL_ETH_RxLinkCallback+0x56>
    *ppStart = p;
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8003ddc:	680d      	ldr	r5, [r1, #0]
 8003dde:	602c      	str	r4, [r5, #0]
  }
  *ppEnd  = p;
 8003de0:	600c      	str	r4, [r1, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8003de2:	6801      	ldr	r1, [r0, #0]
 8003de4:	b129      	cbz	r1, 8003df2 <HAL_ETH_RxLinkCallback+0x2e>
  {
    p->tot_len += Length;
 8003de6:	8908      	ldrh	r0, [r1, #8]
 8003de8:	4418      	add	r0, r3
 8003dea:	8108      	strh	r0, [r1, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8003dec:	6809      	ldr	r1, [r1, #0]
 8003dee:	2900      	cmp	r1, #0
 8003df0:	d1f9      	bne.n	8003de6 <HAL_ETH_RxLinkCallback+0x22>
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 8003df2:	b183      	cbz	r3, 8003e16 <HAL_ETH_RxLinkCallback+0x52>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8003df4:	f002 011f 	and.w	r1, r2, #31
 8003df8:	4419      	add	r1, r3
 8003dfa:	f3bf 8f4f 	dsb	sy
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8003dfe:	4808      	ldr	r0, [pc, #32]	; (8003e20 <HAL_ETH_RxLinkCallback+0x5c>)
 8003e00:	4411      	add	r1, r2
 8003e02:	f8c0 225c 	str.w	r2, [r0, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8003e06:	3220      	adds	r2, #32
        op_size -= __SCB_DCACHE_LINE_SIZE;
      } while ( op_size > 0 );
 8003e08:	1a8b      	subs	r3, r1, r2
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	dcf9      	bgt.n	8003e02 <HAL_ETH_RxLinkCallback+0x3e>
 8003e0e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003e12:	f3bf 8f6f 	isb	sy

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);

/* USER CODE END HAL ETH RxLinkCallback */
}
 8003e16:	bc30      	pop	{r4, r5}
 8003e18:	4770      	bx	lr
    *ppStart = p;
 8003e1a:	6004      	str	r4, [r0, #0]
 8003e1c:	e7e0      	b.n	8003de0 <HAL_ETH_RxLinkCallback+0x1c>
 8003e1e:	bf00      	nop
 8003e20:	e000ed00 	.word	0xe000ed00

08003e24 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 8003e24:	f003 bd5e 	b.w	80078e4 <pbuf_free>

08003e28 <sys_lock_tcpip_core>:
/* ETH_CODE: add functions needed for proper multithreading support and check */

static osThreadId_t lwip_core_lock_holder_thread_id;
static osThreadId_t lwip_tcpip_thread_id;

void sys_lock_tcpip_core(void){
 8003e28:	b508      	push	{r3, lr}
	sys_mutex_lock(&lock_tcpip_core);
 8003e2a:	4804      	ldr	r0, [pc, #16]	; (8003e3c <sys_lock_tcpip_core+0x14>)
 8003e2c:	f009 ffda 	bl	800dde4 <sys_mutex_lock>
	lwip_core_lock_holder_thread_id = osThreadGetId();
 8003e30:	f000 f94a 	bl	80040c8 <osThreadGetId>
 8003e34:	4b02      	ldr	r3, [pc, #8]	; (8003e40 <sys_lock_tcpip_core+0x18>)
 8003e36:	6018      	str	r0, [r3, #0]
}
 8003e38:	bd08      	pop	{r3, pc}
 8003e3a:	bf00      	nop
 8003e3c:	24009a78 	.word	0x24009a78
 8003e40:	24000288 	.word	0x24000288

08003e44 <ethernet_link_thread>:
{
 8003e44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e48:	b09b      	sub	sp, #108	; 0x6c
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8003e4a:	f04f 0900 	mov.w	r9, #0
  ETH_MACConfigTypeDef MACConf = {0};
 8003e4e:	2264      	movs	r2, #100	; 0x64
 8003e50:	2100      	movs	r1, #0
{
 8003e52:	4606      	mov	r6, r0
  ETH_MACConfigTypeDef MACConf = {0};
 8003e54:	a801      	add	r0, sp, #4
 8003e56:	f00a f94a 	bl	800e0ee <memset>
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8003e5a:	46cb      	mov	fp, r9
 8003e5c:	46ca      	mov	sl, r9
 8003e5e:	4d2b      	ldr	r5, [pc, #172]	; (8003f0c <ethernet_link_thread+0xc8>)
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8003e60:	4f2b      	ldr	r7, [pc, #172]	; (8003f10 <ethernet_link_thread+0xcc>)
  LOCK_TCPIP_CORE();
 8003e62:	f7ff ffe1 	bl	8003e28 <sys_lock_tcpip_core>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8003e66:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8003f20 <ethernet_link_thread+0xdc>

void sys_unlock_tcpip_core(void){
	lwip_core_lock_holder_thread_id = 0;
	sys_mutex_unlock(&lock_tcpip_core);
 8003e6a:	4c2a      	ldr	r4, [pc, #168]	; (8003f14 <ethernet_link_thread+0xd0>)
 8003e6c:	e018      	b.n	8003ea0 <ethernet_link_thread+0x5c>
  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8003e6e:	2801      	cmp	r0, #1
 8003e70:	dc42      	bgt.n	8003ef8 <ethernet_link_thread+0xb4>
    HAL_ETH_Stop_IT(&heth);
 8003e72:	4640      	mov	r0, r8
 8003e74:	f7fd ffcc 	bl	8001e10 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 8003e78:	4630      	mov	r0, r6
 8003e7a:	f003 fb09 	bl	8007490 <netif_set_down>
    netif_set_link_down(netif);
 8003e7e:	4630      	mov	r0, r6
 8003e80:	f003 fb52 	bl	8007528 <netif_set_link_down>
	lwip_core_lock_holder_thread_id = 0;
 8003e84:	2300      	movs	r3, #0
	sys_mutex_unlock(&lock_tcpip_core);
 8003e86:	4620      	mov	r0, r4
	lwip_core_lock_holder_thread_id = 0;
 8003e88:	602b      	str	r3, [r5, #0]
	sys_mutex_unlock(&lock_tcpip_core);
 8003e8a:	f009 ffb1 	bl	800ddf0 <sys_mutex_unlock>
  osDelay(100);
 8003e8e:	2064      	movs	r0, #100	; 0x64
 8003e90:	f000 f91c 	bl	80040cc <osDelay>
	sys_mutex_lock(&lock_tcpip_core);
 8003e94:	4620      	mov	r0, r4
 8003e96:	f009 ffa5 	bl	800dde4 <sys_mutex_lock>
	lwip_core_lock_holder_thread_id = osThreadGetId();
 8003e9a:	f000 f915 	bl	80040c8 <osThreadGetId>
 8003e9e:	6028      	str	r0, [r5, #0]
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8003ea0:	4638      	mov	r0, r7
 8003ea2:	f7fd fb1d 	bl	80014e0 <LAN8742_GetLinkState>
  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8003ea6:	f896 302d 	ldrb.w	r3, [r6, #45]	; 0x2d
 8003eaa:	0759      	lsls	r1, r3, #29
 8003eac:	ea4f 0293 	mov.w	r2, r3, lsr #2
 8003eb0:	d4dd      	bmi.n	8003e6e <ethernet_link_thread+0x2a>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8003eb2:	07d2      	lsls	r2, r2, #31
 8003eb4:	d4e6      	bmi.n	8003e84 <ethernet_link_thread+0x40>
 8003eb6:	2801      	cmp	r0, #1
 8003eb8:	dde4      	ble.n	8003e84 <ethernet_link_thread+0x40>
    switch (PHYLinkState)
 8003eba:	3802      	subs	r0, #2
 8003ebc:	2803      	cmp	r0, #3
 8003ebe:	d820      	bhi.n	8003f02 <ethernet_link_thread+0xbe>
 8003ec0:	4b15      	ldr	r3, [pc, #84]	; (8003f18 <ethernet_link_thread+0xd4>)
 8003ec2:	f853 b020 	ldr.w	fp, [r3, r0, lsl #2]
 8003ec6:	4b15      	ldr	r3, [pc, #84]	; (8003f1c <ethernet_link_thread+0xd8>)
 8003ec8:	f853 9020 	ldr.w	r9, [r3, r0, lsl #2]
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8003ecc:	a901      	add	r1, sp, #4
 8003ece:	4640      	mov	r0, r8
 8003ed0:	f7fe f9de 	bl	8002290 <HAL_ETH_GetMACConfig>
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8003ed4:	a901      	add	r1, sp, #4
 8003ed6:	4640      	mov	r0, r8
      netif_set_link_up(netif);
 8003ed8:	f04f 0a01 	mov.w	sl, #1
      MACConf.Speed = speed;
 8003edc:	e9cd b906 	strd	fp, r9, [sp, #24]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8003ee0:	f7fe faa0 	bl	8002424 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 8003ee4:	4640      	mov	r0, r8
 8003ee6:	f7fd ff43 	bl	8001d70 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 8003eea:	4630      	mov	r0, r6
 8003eec:	f003 faac 	bl	8007448 <netif_set_up>
      netif_set_link_up(netif);
 8003ef0:	4630      	mov	r0, r6
 8003ef2:	f003 faf1 	bl	80074d8 <netif_set_link_up>
 8003ef6:	e7c5      	b.n	8003e84 <ethernet_link_thread+0x40>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8003ef8:	075b      	lsls	r3, r3, #29
 8003efa:	d4c3      	bmi.n	8003e84 <ethernet_link_thread+0x40>
    switch (PHYLinkState)
 8003efc:	3802      	subs	r0, #2
 8003efe:	2803      	cmp	r0, #3
 8003f00:	d9de      	bls.n	8003ec0 <ethernet_link_thread+0x7c>
    if(linkchanged)
 8003f02:	f1ba 0f00 	cmp.w	sl, #0
 8003f06:	d0bd      	beq.n	8003e84 <ethernet_link_thread+0x40>
 8003f08:	e7e0      	b.n	8003ecc <ethernet_link_thread+0x88>
 8003f0a:	bf00      	nop
 8003f0c:	24000288 	.word	0x24000288
 8003f10:	24000174 	.word	0x24000174
 8003f14:	24009a78 	.word	0x24009a78
 8003f18:	0800f79c 	.word	0x0800f79c
 8003f1c:	0800f7ac 	.word	0x0800f7ac
 8003f20:	240001d8 	.word	0x240001d8

08003f24 <sys_unlock_tcpip_core>:
	lwip_core_lock_holder_thread_id = 0;
 8003f24:	4b02      	ldr	r3, [pc, #8]	; (8003f30 <sys_unlock_tcpip_core+0xc>)
 8003f26:	2200      	movs	r2, #0
	sys_mutex_unlock(&lock_tcpip_core);
 8003f28:	4802      	ldr	r0, [pc, #8]	; (8003f34 <sys_unlock_tcpip_core+0x10>)
	lwip_core_lock_holder_thread_id = 0;
 8003f2a:	601a      	str	r2, [r3, #0]
	sys_mutex_unlock(&lock_tcpip_core);
 8003f2c:	f009 bf60 	b.w	800ddf0 <sys_mutex_unlock>
 8003f30:	24000288 	.word	0x24000288
 8003f34:	24009a78 	.word	0x24009a78

08003f38 <sys_check_core_locking>:
}

void sys_check_core_locking(void){
 8003f38:	b538      	push	{r3, r4, r5, lr}
  /* Embedded systems should check we are NOT in an interrupt context here */

  LWIP_ASSERT("Function called from interrupt context", (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0);
 8003f3a:	4b11      	ldr	r3, [pc, #68]	; (8003f80 <sys_check_core_locking+0x48>)
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f42:	b9ab      	cbnz	r3, 8003f70 <sys_check_core_locking+0x38>

  if (lwip_tcpip_thread_id != 0) {
 8003f44:	4b0f      	ldr	r3, [pc, #60]	; (8003f84 <sys_check_core_locking+0x4c>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	b18b      	cbz	r3, 8003f6e <sys_check_core_locking+0x36>
	  osThreadId_t current_thread_id = osThreadGetId();

#if LWIP_TCPIP_CORE_LOCKING
	LWIP_ASSERT("Function called without core lock", current_thread_id == lwip_core_lock_holder_thread_id);
 8003f4a:	4d0f      	ldr	r5, [pc, #60]	; (8003f88 <sys_check_core_locking+0x50>)
	  osThreadId_t current_thread_id = osThreadGetId();
 8003f4c:	f000 f8bc 	bl	80040c8 <osThreadGetId>
 8003f50:	4604      	mov	r4, r0
	LWIP_ASSERT("Function called without core lock", current_thread_id == lwip_core_lock_holder_thread_id);
 8003f52:	682b      	ldr	r3, [r5, #0]
 8003f54:	4283      	cmp	r3, r0
 8003f56:	d00a      	beq.n	8003f6e <sys_check_core_locking+0x36>
 8003f58:	4b0c      	ldr	r3, [pc, #48]	; (8003f8c <sys_check_core_locking+0x54>)
 8003f5a:	f240 32d2 	movw	r2, #978	; 0x3d2
 8003f5e:	490c      	ldr	r1, [pc, #48]	; (8003f90 <sys_check_core_locking+0x58>)
 8003f60:	480c      	ldr	r0, [pc, #48]	; (8003f94 <sys_check_core_locking+0x5c>)
 8003f62:	f00a f85f 	bl	800e024 <iprintf>
	/* ETH_CODE: to easily check that example has correct handling of core lock
	 * This will trigger breakpoint (__BKPT)
	 */
#warning Below check should be removed in production code
	if(current_thread_id != lwip_core_lock_holder_thread_id) __BKPT(0);
 8003f66:	682b      	ldr	r3, [r5, #0]
 8003f68:	42a3      	cmp	r3, r4
 8003f6a:	d000      	beq.n	8003f6e <sys_check_core_locking+0x36>
 8003f6c:	be00      	bkpt	0x0000
#else /* LWIP_TCPIP_CORE_LOCKING */
	LWIP_ASSERT("Function called from wrong thread", current_thread_id == lwip_tcpip_thread_id);
#endif /* LWIP_TCPIP_CORE_LOCKING */
	LWIP_UNUSED_ARG(current_thread_id); /* for LWIP_NOASSERT */
  }
}
 8003f6e:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("Function called from interrupt context", (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0);
 8003f70:	4b06      	ldr	r3, [pc, #24]	; (8003f8c <sys_check_core_locking+0x54>)
 8003f72:	f44f 7273 	mov.w	r2, #972	; 0x3cc
 8003f76:	4908      	ldr	r1, [pc, #32]	; (8003f98 <sys_check_core_locking+0x60>)
 8003f78:	4806      	ldr	r0, [pc, #24]	; (8003f94 <sys_check_core_locking+0x5c>)
 8003f7a:	f00a f853 	bl	800e024 <iprintf>
 8003f7e:	e7e1      	b.n	8003f44 <sys_check_core_locking+0xc>
 8003f80:	e000ed00 	.word	0xe000ed00
 8003f84:	2400028c 	.word	0x2400028c
 8003f88:	24000288 	.word	0x24000288
 8003f8c:	0800f704 	.word	0x0800f704
 8003f90:	0800f760 	.word	0x0800f760
 8003f94:	0800ef30 	.word	0x0800ef30
 8003f98:	0800f738 	.word	0x0800f738

08003f9c <sys_mark_tcpip_thread>:
void sys_mark_tcpip_thread(void){
 8003f9c:	b508      	push	{r3, lr}
	lwip_tcpip_thread_id = osThreadGetId();
 8003f9e:	f000 f893 	bl	80040c8 <osThreadGetId>
 8003fa2:	4b01      	ldr	r3, [pc, #4]	; (8003fa8 <sys_mark_tcpip_thread+0xc>)
 8003fa4:	6018      	str	r0, [r3, #0]
}
 8003fa6:	bd08      	pop	{r3, pc}
 8003fa8:	2400028c 	.word	0x2400028c

08003fac <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003fac:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
 8003fae:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8003fb2:	691b      	ldr	r3, [r3, #16]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003fb4:	f001 fe02 	bl	8005bbc <xTaskGetSchedulerState>
 8003fb8:	2801      	cmp	r0, #1
 8003fba:	d100      	bne.n	8003fbe <SysTick_Handler+0x12>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
 8003fbc:	bd08      	pop	{r3, pc}
 8003fbe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 8003fc2:	f002 b9df 	b.w	8006384 <xPortSysTickHandler>
 8003fc6:	bf00      	nop

08003fc8 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003fc8:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8003fcc:	b92b      	cbnz	r3, 8003fda <osKernelInitialize+0x12>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 8003fce:	4b06      	ldr	r3, [pc, #24]	; (8003fe8 <osKernelInitialize+0x20>)
 8003fd0:	6818      	ldr	r0, [r3, #0]
 8003fd2:	b928      	cbnz	r0, 8003fe0 <osKernelInitialize+0x18>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003fd8:	4770      	bx	lr
    stat = osErrorISR;
 8003fda:	f06f 0005 	mvn.w	r0, #5
 8003fde:	4770      	bx	lr
    } else {
      stat = osError;
 8003fe0:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 8003fe4:	4770      	bx	lr
 8003fe6:	bf00      	nop
 8003fe8:	24000b3c 	.word	0x24000b3c

08003fec <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003fec:	b510      	push	{r4, lr}
 8003fee:	f3ef 8405 	mrs	r4, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8003ff2:	b974      	cbnz	r4, 8004012 <osKernelStart+0x26>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 8003ff4:	4b08      	ldr	r3, [pc, #32]	; (8004018 <osKernelStart+0x2c>)
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	2a01      	cmp	r2, #1
 8003ffa:	d107      	bne.n	800400c <osKernelStart+0x20>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ffc:	4907      	ldr	r1, [pc, #28]	; (800401c <osKernelStart+0x30>)
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003ffe:	2202      	movs	r2, #2
 8004000:	77cc      	strb	r4, [r1, #31]
 8004002:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004004:	f001 fabe 	bl	8005584 <vTaskStartScheduler>
      stat = osOK;
 8004008:	4620      	mov	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
 800400a:	bd10      	pop	{r4, pc}
      stat = osError;
 800400c:	f04f 30ff 	mov.w	r0, #4294967295
}
 8004010:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 8004012:	f06f 0005 	mvn.w	r0, #5
}
 8004016:	bd10      	pop	{r4, pc}
 8004018:	24000b3c 	.word	0x24000b3c
 800401c:	e000ed00 	.word	0xe000ed00

08004020 <osKernelGetTickCount>:
 8004020:	f3ef 8305 	mrs	r3, IPSR
}

uint32_t osKernelGetTickCount (void) {
  TickType_t ticks;

  if (IS_IRQ()) {
 8004024:	b10b      	cbz	r3, 800402a <osKernelGetTickCount+0xa>
    ticks = xTaskGetTickCountFromISR();
 8004026:	f001 bb0b 	b.w	8005640 <xTaskGetTickCountFromISR>
  } else {
    ticks = xTaskGetTickCount();
 800402a:	f001 bb03 	b.w	8005634 <xTaskGetTickCount>
 800402e:	bf00      	nop

08004030 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004030:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004032:	2500      	movs	r5, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004034:	b087      	sub	sp, #28
 8004036:	4614      	mov	r4, r2
  hTask = NULL;
 8004038:	9505      	str	r5, [sp, #20]
 800403a:	f3ef 8205 	mrs	r2, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 800403e:	bb62      	cbnz	r2, 800409a <osThreadNew+0x6a>
 8004040:	4606      	mov	r6, r0
 8004042:	b350      	cbz	r0, 800409a <osThreadNew+0x6a>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 8004044:	b1e4      	cbz	r4, 8004080 <osThreadNew+0x50>
      if (attr->name != NULL) {
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 8004046:	69a7      	ldr	r7, [r4, #24]
 8004048:	bb57      	cbnz	r7, 80040a0 <osThreadNew+0x70>
 800404a:	2718      	movs	r7, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800404c:	6863      	ldr	r3, [r4, #4]
 800404e:	07db      	lsls	r3, r3, #31
 8004050:	d423      	bmi.n	800409a <osThreadNew+0x6a>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 8004052:	6963      	ldr	r3, [r4, #20]
 8004054:	b343      	cbz	r3, 80040a8 <osThreadNew+0x78>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004056:	ea4f 0c93 	mov.w	ip, r3, lsr #2
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800405a:	68a0      	ldr	r0, [r4, #8]
      if (attr->name != NULL) {
 800405c:	6825      	ldr	r5, [r4, #0]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800405e:	b340      	cbz	r0, 80040b2 <osThreadNew+0x82>
 8004060:	68e2      	ldr	r2, [r4, #12]
 8004062:	2aa7      	cmp	r2, #167	; 0xa7
 8004064:	d919      	bls.n	800409a <osThreadNew+0x6a>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004066:	6924      	ldr	r4, [r4, #16]
 8004068:	b1bb      	cbz	r3, 800409a <osThreadNew+0x6a>
 800406a:	b1b4      	cbz	r4, 800409a <osThreadNew+0x6a>
      mem = 0;
    }

    if (mem == 1) {
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800406c:	460b      	mov	r3, r1
 800406e:	4662      	mov	r2, ip
 8004070:	4629      	mov	r1, r5
 8004072:	9700      	str	r7, [sp, #0]
 8004074:	e9cd 4001 	strd	r4, r0, [sp, #4]
 8004078:	4630      	mov	r0, r6
 800407a:	f001 fa17 	bl	80054ac <xTaskCreateStatic>
 800407e:	e00d      	b.n	800409c <osThreadNew+0x6c>
 8004080:	f44f 7200 	mov.w	r2, #512	; 0x200
    prio  = (UBaseType_t)osPriorityNormal;
 8004084:	2718      	movs	r7, #24
      #endif
    }
    else {
      if (mem == 0) {
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004086:	460b      	mov	r3, r1
 8004088:	4621      	mov	r1, r4
 800408a:	ac05      	add	r4, sp, #20
 800408c:	4630      	mov	r0, r6
 800408e:	9700      	str	r7, [sp, #0]
 8004090:	9401      	str	r4, [sp, #4]
 8004092:	f001 fa45 	bl	8005520 <xTaskCreate>
 8004096:	2801      	cmp	r0, #1
 8004098:	d009      	beq.n	80040ae <osThreadNew+0x7e>
        return (NULL);
 800409a:	2000      	movs	r0, #0
      }
    }
  }

  return ((osThreadId_t)hTask);
}
 800409c:	b007      	add	sp, #28
 800409e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80040a0:	1e7a      	subs	r2, r7, #1
 80040a2:	2a37      	cmp	r2, #55	; 0x37
 80040a4:	d9d2      	bls.n	800404c <osThreadNew+0x1c>
 80040a6:	e7f8      	b.n	800409a <osThreadNew+0x6a>
    stack = configMINIMAL_STACK_SIZE;
 80040a8:	f44f 7c00 	mov.w	ip, #512	; 0x200
 80040ac:	e7d5      	b.n	800405a <osThreadNew+0x2a>
  return ((osThreadId_t)hTask);
 80040ae:	9805      	ldr	r0, [sp, #20]
 80040b0:	e7f4      	b.n	800409c <osThreadNew+0x6c>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80040b2:	68e3      	ldr	r3, [r4, #12]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d1f1      	bne.n	800409c <osThreadNew+0x6c>
 80040b8:	6923      	ldr	r3, [r4, #16]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d1ee      	bne.n	800409c <osThreadNew+0x6c>
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80040be:	fa1f f28c 	uxth.w	r2, ip
 80040c2:	462c      	mov	r4, r5
 80040c4:	e7df      	b.n	8004086 <osThreadNew+0x56>
 80040c6:	bf00      	nop

080040c8 <osThreadGetId>:
}

osThreadId_t osThreadGetId (void) {
  osThreadId_t id;

  id = (osThreadId_t)xTaskGetCurrentTaskHandle();
 80040c8:	f001 bd72 	b.w	8005bb0 <xTaskGetCurrentTaskHandle>

080040cc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80040cc:	b510      	push	{r4, lr}
 80040ce:	f3ef 8405 	mrs	r4, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 80040d2:	b92c      	cbnz	r4, 80040e0 <osDelay+0x14>
    stat = osErrorISR;
  }
  else {
    stat = osOK;

    if (ticks != 0U) {
 80040d4:	b900      	cbnz	r0, 80040d8 <osDelay+0xc>
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
 80040d6:	bd10      	pop	{r4, pc}
      vTaskDelay(ticks);
 80040d8:	f001 fc08 	bl	80058ec <vTaskDelay>
    stat = osOK;
 80040dc:	4620      	mov	r0, r4
}
 80040de:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 80040e0:	f06f 0005 	mvn.w	r0, #5
}
 80040e4:	bd10      	pop	{r4, pc}
 80040e6:	bf00      	nop

080040e8 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80040e8:	b570      	push	{r4, r5, r6, lr}
 80040ea:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hMutex = NULL;

  if (!IS_IRQ()) {
 80040ee:	b9db      	cbnz	r3, 8004128 <osMutexNew+0x40>
    if (attr != NULL) {
 80040f0:	4604      	mov	r4, r0
 80040f2:	b1e0      	cbz	r0, 800412e <osMutexNew+0x46>
      type = attr->attr_bits;
 80040f4:	6846      	ldr	r6, [r0, #4]
      rmtx = 1U;
    } else {
      rmtx = 0U;
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80040f6:	0733      	lsls	r3, r6, #28
 80040f8:	d416      	bmi.n	8004128 <osMutexNew+0x40>
      mem = -1;

      if (attr != NULL) {
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80040fa:	6881      	ldr	r1, [r0, #8]
    if ((type & osMutexRecursive) == osMutexRecursive) {
 80040fc:	f006 0601 	and.w	r6, r6, #1
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8004100:	68c3      	ldr	r3, [r0, #12]
 8004102:	b181      	cbz	r1, 8004126 <osMutexNew+0x3e>
 8004104:	2b4f      	cmp	r3, #79	; 0x4f
 8004106:	d90f      	bls.n	8004128 <osMutexNew+0x40>
        mem = 0;
      }

      if (mem == 1) {
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8004108:	b31e      	cbz	r6, 8004152 <osMutexNew+0x6a>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800410a:	2004      	movs	r0, #4
 800410c:	f000 fc9a 	bl	8004a44 <xQueueCreateMutexStatic>
 8004110:	4605      	mov	r5, r0
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8004112:	b14d      	cbz	r5, 8004128 <osMutexNew+0x40>
        if (attr != NULL) {
          name = attr->name;
        } else {
          name = NULL;
        }
        vQueueAddToRegistry (hMutex, name);
 8004114:	6821      	ldr	r1, [r4, #0]
 8004116:	4628      	mov	r0, r5
 8004118:	f001 f812 	bl	8005140 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800411c:	b12e      	cbz	r6, 800412a <osMutexNew+0x42>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800411e:	f045 0501 	orr.w	r5, r5, #1
      }
    }
  }

  return ((osMutexId_t)hMutex);
}
 8004122:	4628      	mov	r0, r5
 8004124:	bd70      	pop	{r4, r5, r6, pc}
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004126:	b163      	cbz	r3, 8004142 <osMutexNew+0x5a>
  hMutex = NULL;
 8004128:	2500      	movs	r5, #0
}
 800412a:	4628      	mov	r0, r5
 800412c:	bd70      	pop	{r4, r5, r6, pc}
              hMutex = xSemaphoreCreateMutex ();
 800412e:	2001      	movs	r0, #1
 8004130:	f000 fcde 	bl	8004af0 <xQueueCreateMutex>
      if (hMutex != NULL) {
 8004134:	4605      	mov	r5, r0
 8004136:	2800      	cmp	r0, #0
 8004138:	d0f6      	beq.n	8004128 <osMutexNew+0x40>
        vQueueAddToRegistry (hMutex, name);
 800413a:	4621      	mov	r1, r4
 800413c:	f001 f800 	bl	8005140 <vQueueAddToRegistry>
      if ((hMutex != NULL) && (rmtx != 0U)) {
 8004140:	e7f3      	b.n	800412a <osMutexNew+0x42>
            if (rmtx != 0U) {
 8004142:	b15e      	cbz	r6, 800415c <osMutexNew+0x74>
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8004144:	2004      	movs	r0, #4
 8004146:	f000 fcd3 	bl	8004af0 <xQueueCreateMutex>
      if (hMutex != NULL) {
 800414a:	4605      	mov	r5, r0
 800414c:	2800      	cmp	r0, #0
 800414e:	d1e1      	bne.n	8004114 <osMutexNew+0x2c>
 8004150:	e7ea      	b.n	8004128 <osMutexNew+0x40>
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8004152:	2001      	movs	r0, #1
 8004154:	f000 fc76 	bl	8004a44 <xQueueCreateMutexStatic>
 8004158:	4605      	mov	r5, r0
 800415a:	e7da      	b.n	8004112 <osMutexNew+0x2a>
              hMutex = xSemaphoreCreateMutex ();
 800415c:	2001      	movs	r0, #1
 800415e:	f000 fcc7 	bl	8004af0 <xQueueCreateMutex>
      if (hMutex != NULL) {
 8004162:	4605      	mov	r5, r0
 8004164:	e7d5      	b.n	8004112 <osMutexNew+0x2a>
 8004166:	bf00      	nop

08004168 <osMutexAcquire>:
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8004168:	f020 0201 	bic.w	r2, r0, #1

  rmtx = (uint32_t)mutex_id & 1U;
 800416c:	f000 0301 	and.w	r3, r0, #1
 8004170:	f3ef 8005 	mrs	r0, IPSR

  stat = osOK;

  if (IS_IRQ()) {
 8004174:	b9a8      	cbnz	r0, 80041a2 <osMutexAcquire+0x3a>
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 8004176:	b1ba      	cbz	r2, 80041a8 <osMutexAcquire+0x40>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8004178:	4610      	mov	r0, r2
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800417a:	b510      	push	{r4, lr}
 800417c:	460c      	mov	r4, r1
    if (rmtx != 0U) {
 800417e:	b953      	cbnz	r3, 8004196 <osMutexAcquire+0x2e>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8004180:	f000 fe58 	bl	8004e34 <xQueueSemaphoreTake>
 8004184:	2801      	cmp	r0, #1
 8004186:	d00a      	beq.n	800419e <osMutexAcquire+0x36>
          stat = osErrorResource;
 8004188:	2c00      	cmp	r4, #0
 800418a:	bf14      	ite	ne
 800418c:	f06f 0001 	mvnne.w	r0, #1
 8004190:	f06f 0002 	mvneq.w	r0, #2
      }
    }
  }

  return (stat);
}
 8004194:	bd10      	pop	{r4, pc}
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8004196:	f000 ff29 	bl	8004fec <xQueueTakeMutexRecursive>
 800419a:	2801      	cmp	r0, #1
 800419c:	d1f4      	bne.n	8004188 <osMutexAcquire+0x20>
  stat = osOK;
 800419e:	2000      	movs	r0, #0
}
 80041a0:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 80041a2:	f06f 0005 	mvn.w	r0, #5
 80041a6:	4770      	bx	lr
    stat = osErrorParameter;
 80041a8:	f06f 0003 	mvn.w	r0, #3
}
 80041ac:	4770      	bx	lr
 80041ae:	bf00      	nop

080041b0 <osMutexRelease>:
 80041b0:	f3ef 8205 	mrs	r2, IPSR

  rmtx = (uint32_t)mutex_id & 1U;

  stat = osOK;

  if (IS_IRQ()) {
 80041b4:	b9ba      	cbnz	r2, 80041e6 <osMutexRelease+0x36>
osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80041b6:	b510      	push	{r4, lr}
 80041b8:	f020 0401 	bic.w	r4, r0, #1
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 80041bc:	b1b4      	cbz	r4, 80041ec <osMutexRelease+0x3c>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
 80041be:	f000 0301 	and.w	r3, r0, #1
 80041c2:	b943      	cbnz	r3, 80041d6 <osMutexRelease+0x26>
        stat = osErrorResource;
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 80041c4:	461a      	mov	r2, r3
 80041c6:	4619      	mov	r1, r3
 80041c8:	4620      	mov	r0, r4
 80041ca:	f000 fb77 	bl	80048bc <xQueueGenericSend>
 80041ce:	2801      	cmp	r0, #1
 80041d0:	d106      	bne.n	80041e0 <osMutexRelease+0x30>
  stat = osOK;
 80041d2:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 80041d4:	bd10      	pop	{r4, pc}
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 80041d6:	4620      	mov	r0, r4
 80041d8:	f000 fc6a 	bl	8004ab0 <xQueueGiveMutexRecursive>
 80041dc:	2801      	cmp	r0, #1
 80041de:	d0f8      	beq.n	80041d2 <osMutexRelease+0x22>
        stat = osErrorResource;
 80041e0:	f06f 0002 	mvn.w	r0, #2
}
 80041e4:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 80041e6:	f06f 0005 	mvn.w	r0, #5
}
 80041ea:	4770      	bx	lr
    stat = osErrorParameter;
 80041ec:	f06f 0003 	mvn.w	r0, #3
}
 80041f0:	bd10      	pop	{r4, pc}
 80041f2:	bf00      	nop

080041f4 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80041f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041f6:	b083      	sub	sp, #12
 80041f8:	f3ef 8605 	mrs	r6, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80041fc:	b98e      	cbnz	r6, 8004222 <osSemaphoreNew+0x2e>
 80041fe:	4605      	mov	r5, r0
 8004200:	b178      	cbz	r0, 8004222 <osSemaphoreNew+0x2e>
 8004202:	4288      	cmp	r0, r1
 8004204:	460f      	mov	r7, r1
 8004206:	d30c      	bcc.n	8004222 <osSemaphoreNew+0x2e>
    mem = -1;

    if (attr != NULL) {
 8004208:	4614      	mov	r4, r2
 800420a:	b182      	cbz	r2, 800422e <osSemaphoreNew+0x3a>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800420c:	e9d2 2302 	ldrd	r2, r3, [r2, #8]
 8004210:	b15a      	cbz	r2, 800422a <osSemaphoreNew+0x36>
 8004212:	2b4f      	cmp	r3, #79	; 0x4f
 8004214:	d905      	bls.n	8004222 <osSemaphoreNew+0x2e>
    else {
      mem = 0;
    }

    if (mem != -1) {
      if (max_count == 1U) {
 8004216:	2801      	cmp	r0, #1
 8004218:	d032      	beq.n	8004280 <osSemaphoreNew+0x8c>
        }
      }
      else {
        if (mem == 1) {
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800421a:	f000 fb0d 	bl	8004838 <xQueueCreateCountingSemaphoreStatic>
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800421e:	4605      	mov	r5, r0
 8004220:	b978      	cbnz	r0, 8004242 <osSemaphoreNew+0x4e>
  hSemaphore = NULL;
 8004222:	2500      	movs	r5, #0
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 8004224:	4628      	mov	r0, r5
 8004226:	b003      	add	sp, #12
 8004228:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800422a:	2b00      	cmp	r3, #0
 800422c:	d1f9      	bne.n	8004222 <osSemaphoreNew+0x2e>
      if (max_count == 1U) {
 800422e:	2d01      	cmp	r5, #1
 8004230:	d00f      	beq.n	8004252 <osSemaphoreNew+0x5e>
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8004232:	4628      	mov	r0, r5
 8004234:	4639      	mov	r1, r7
 8004236:	f000 fb23 	bl	8004880 <xQueueCreateCountingSemaphore>
 800423a:	4605      	mov	r5, r0
      if (hSemaphore != NULL) {
 800423c:	2d00      	cmp	r5, #0
 800423e:	d0f0      	beq.n	8004222 <osSemaphoreNew+0x2e>
        if (attr != NULL) {
 8004240:	b104      	cbz	r4, 8004244 <osSemaphoreNew+0x50>
          name = attr->name;
 8004242:	6824      	ldr	r4, [r4, #0]
        vQueueAddToRegistry (hSemaphore, name);
 8004244:	4628      	mov	r0, r5
 8004246:	4621      	mov	r1, r4
 8004248:	f000 ff7a 	bl	8005140 <vQueueAddToRegistry>
}
 800424c:	4628      	mov	r0, r5
 800424e:	b003      	add	sp, #12
 8004250:	bdf0      	pop	{r4, r5, r6, r7, pc}
            hSemaphore = xSemaphoreCreateBinary();
 8004252:	4628      	mov	r0, r5
 8004254:	2203      	movs	r2, #3
 8004256:	2100      	movs	r1, #0
 8004258:	f000 fac6 	bl	80047e8 <xQueueGenericCreate>
 800425c:	4605      	mov	r5, r0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800425e:	2d00      	cmp	r5, #0
 8004260:	d0df      	beq.n	8004222 <osSemaphoreNew+0x2e>
 8004262:	2f00      	cmp	r7, #0
 8004264:	d0ea      	beq.n	800423c <osSemaphoreNew+0x48>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8004266:	2300      	movs	r3, #0
 8004268:	4628      	mov	r0, r5
 800426a:	461a      	mov	r2, r3
 800426c:	4619      	mov	r1, r3
 800426e:	f000 fb25 	bl	80048bc <xQueueGenericSend>
 8004272:	2801      	cmp	r0, #1
 8004274:	d0e4      	beq.n	8004240 <osSemaphoreNew+0x4c>
            vSemaphoreDelete (hSemaphore);
 8004276:	4628      	mov	r0, r5
            hSemaphore = NULL;
 8004278:	2500      	movs	r5, #0
            vSemaphoreDelete (hSemaphore);
 800427a:	f000 ff37 	bl	80050ec <vQueueDelete>
      if (hSemaphore != NULL) {
 800427e:	e7d1      	b.n	8004224 <osSemaphoreNew+0x30>
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8004280:	4613      	mov	r3, r2
 8004282:	2203      	movs	r2, #3
 8004284:	4631      	mov	r1, r6
 8004286:	9200      	str	r2, [sp, #0]
 8004288:	4632      	mov	r2, r6
 800428a:	f000 fa5b 	bl	8004744 <xQueueGenericCreateStatic>
 800428e:	4605      	mov	r5, r0
 8004290:	e7e5      	b.n	800425e <osSemaphoreNew+0x6a>
 8004292:	bf00      	nop

08004294 <osSemaphoreAcquire>:
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 8004294:	b370      	cbz	r0, 80042f4 <osSemaphoreAcquire+0x60>
osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8004296:	b510      	push	{r4, lr}
 8004298:	460c      	mov	r4, r1
 800429a:	b082      	sub	sp, #8
 800429c:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 80042a0:	b1c3      	cbz	r3, 80042d4 <osSemaphoreAcquire+0x40>
    if (timeout != 0U) {
 80042a2:	bb21      	cbnz	r1, 80042ee <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80042a4:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 80042a6:	9101      	str	r1, [sp, #4]
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80042a8:	f000 fec0 	bl	800502c <xQueueReceiveFromISR>
 80042ac:	2801      	cmp	r0, #1
 80042ae:	d11a      	bne.n	80042e6 <osSemaphoreAcquire+0x52>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 80042b0:	9b01      	ldr	r3, [sp, #4]
 80042b2:	b913      	cbnz	r3, 80042ba <osSemaphoreAcquire+0x26>
  stat = osOK;
 80042b4:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 80042b6:	b002      	add	sp, #8
 80042b8:	bd10      	pop	{r4, pc}
        portYIELD_FROM_ISR (yield);
 80042ba:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80042be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042c2:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80042c6:	f3bf 8f4f 	dsb	sy
 80042ca:	f3bf 8f6f 	isb	sy
  stat = osOK;
 80042ce:	4620      	mov	r0, r4
}
 80042d0:	b002      	add	sp, #8
 80042d2:	bd10      	pop	{r4, pc}
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80042d4:	f000 fdae 	bl	8004e34 <xQueueSemaphoreTake>
 80042d8:	2801      	cmp	r0, #1
 80042da:	d0eb      	beq.n	80042b4 <osSemaphoreAcquire+0x20>
      if (timeout != 0U) {
 80042dc:	b11c      	cbz	r4, 80042e6 <osSemaphoreAcquire+0x52>
        stat = osErrorTimeout;
 80042de:	f06f 0001 	mvn.w	r0, #1
}
 80042e2:	b002      	add	sp, #8
 80042e4:	bd10      	pop	{r4, pc}
        stat = osErrorResource;
 80042e6:	f06f 0002 	mvn.w	r0, #2
}
 80042ea:	b002      	add	sp, #8
 80042ec:	bd10      	pop	{r4, pc}
    stat = osErrorParameter;
 80042ee:	f06f 0003 	mvn.w	r0, #3
 80042f2:	e7e0      	b.n	80042b6 <osSemaphoreAcquire+0x22>
 80042f4:	f06f 0003 	mvn.w	r0, #3
}
 80042f8:	4770      	bx	lr
 80042fa:	bf00      	nop

080042fc <osSemaphoreRelease>:
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 80042fc:	b330      	cbz	r0, 800434c <osSemaphoreRelease+0x50>
osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80042fe:	b510      	push	{r4, lr}
 8004300:	b082      	sub	sp, #8
 8004302:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 8004306:	b1ab      	cbz	r3, 8004334 <osSemaphoreRelease+0x38>
    yield = pdFALSE;
 8004308:	2400      	movs	r4, #0

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800430a:	a901      	add	r1, sp, #4
    yield = pdFALSE;
 800430c:	9401      	str	r4, [sp, #4]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800430e:	f000 fc77 	bl	8004c00 <xQueueGiveFromISR>
 8004312:	2801      	cmp	r0, #1
 8004314:	d117      	bne.n	8004346 <osSemaphoreRelease+0x4a>
      stat = osErrorResource;
    } else {
      portYIELD_FROM_ISR (yield);
 8004316:	9b01      	ldr	r3, [sp, #4]
 8004318:	b193      	cbz	r3, 8004340 <osSemaphoreRelease+0x44>
 800431a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800431e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004322:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8004326:	f3bf 8f4f 	dsb	sy
 800432a:	f3bf 8f6f 	isb	sy
  stat = osOK;
 800432e:	4620      	mov	r0, r4
      stat = osErrorResource;
    }
  }

  return (stat);
}
 8004330:	b002      	add	sp, #8
 8004332:	bd10      	pop	{r4, pc}
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8004334:	461a      	mov	r2, r3
 8004336:	4619      	mov	r1, r3
 8004338:	f000 fac0 	bl	80048bc <xQueueGenericSend>
 800433c:	2801      	cmp	r0, #1
 800433e:	d102      	bne.n	8004346 <osSemaphoreRelease+0x4a>
  stat = osOK;
 8004340:	2000      	movs	r0, #0
}
 8004342:	b002      	add	sp, #8
 8004344:	bd10      	pop	{r4, pc}
      stat = osErrorResource;
 8004346:	f06f 0002 	mvn.w	r0, #2
 800434a:	e7fa      	b.n	8004342 <osSemaphoreRelease+0x46>
    stat = osErrorParameter;
 800434c:	f06f 0003 	mvn.w	r0, #3
}
 8004350:	4770      	bx	lr
 8004352:	bf00      	nop

08004354 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8004354:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004356:	b083      	sub	sp, #12
 8004358:	f3ef 8705 	mrs	r7, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800435c:	b987      	cbnz	r7, 8004380 <osMessageQueueNew+0x2c>
 800435e:	4605      	mov	r5, r0
 8004360:	b170      	cbz	r0, 8004380 <osMessageQueueNew+0x2c>
 8004362:	b169      	cbz	r1, 8004380 <osMessageQueueNew+0x2c>
    mem = -1;

    if (attr != NULL) {
 8004364:	4614      	mov	r4, r2
 8004366:	b17a      	cbz	r2, 8004388 <osMessageQueueNew+0x34>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004368:	6893      	ldr	r3, [r2, #8]
 800436a:	b1cb      	cbz	r3, 80043a0 <osMessageQueueNew+0x4c>
 800436c:	68d2      	ldr	r2, [r2, #12]
 800436e:	2a4f      	cmp	r2, #79	; 0x4f
 8004370:	d906      	bls.n	8004380 <osMessageQueueNew+0x2c>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004372:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004374:	b122      	cbz	r2, 8004380 <osMessageQueueNew+0x2c>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004376:	fb01 f505 	mul.w	r5, r1, r5
 800437a:	6966      	ldr	r6, [r4, #20]
 800437c:	42ae      	cmp	r6, r5
 800437e:	d21f      	bcs.n	80043c0 <osMessageQueueNew+0x6c>
  hQueue = NULL;
 8004380:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 8004382:	4628      	mov	r0, r5
 8004384:	b003      	add	sp, #12
 8004386:	bdf0      	pop	{r4, r5, r6, r7, pc}
          hQueue = xQueueCreate (msg_count, msg_size);
 8004388:	f000 fa2e 	bl	80047e8 <xQueueGenericCreate>
    if (hQueue != NULL) {
 800438c:	4605      	mov	r5, r0
 800438e:	2800      	cmp	r0, #0
 8004390:	d0f6      	beq.n	8004380 <osMessageQueueNew+0x2c>
      vQueueAddToRegistry (hQueue, name);
 8004392:	4628      	mov	r0, r5
 8004394:	4621      	mov	r1, r4
 8004396:	f000 fed3 	bl	8005140 <vQueueAddToRegistry>
}
 800439a:	4628      	mov	r0, r5
 800439c:	b003      	add	sp, #12
 800439e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80043a0:	68d3      	ldr	r3, [r2, #12]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d1ec      	bne.n	8004380 <osMessageQueueNew+0x2c>
 80043a6:	6913      	ldr	r3, [r2, #16]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d1e9      	bne.n	8004380 <osMessageQueueNew+0x2c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80043ac:	6952      	ldr	r2, [r2, #20]
 80043ae:	2a00      	cmp	r2, #0
 80043b0:	d1e6      	bne.n	8004380 <osMessageQueueNew+0x2c>
          hQueue = xQueueCreate (msg_count, msg_size);
 80043b2:	f000 fa19 	bl	80047e8 <xQueueGenericCreate>
    if (hQueue != NULL) {
 80043b6:	4605      	mov	r5, r0
 80043b8:	2800      	cmp	r0, #0
 80043ba:	d0e1      	beq.n	8004380 <osMessageQueueNew+0x2c>
        name = attr->name;
 80043bc:	6824      	ldr	r4, [r4, #0]
 80043be:	e7e8      	b.n	8004392 <osMessageQueueNew+0x3e>
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80043c0:	9700      	str	r7, [sp, #0]
 80043c2:	f000 f9bf 	bl	8004744 <xQueueGenericCreateStatic>
    if (hQueue != NULL) {
 80043c6:	4605      	mov	r5, r0
 80043c8:	2800      	cmp	r0, #0
 80043ca:	d1f7      	bne.n	80043bc <osMessageQueueNew+0x68>
 80043cc:	e7d8      	b.n	8004380 <osMessageQueueNew+0x2c>
 80043ce:	bf00      	nop

080043d0 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80043d0:	b530      	push	{r4, r5, lr}
 80043d2:	461c      	mov	r4, r3
 80043d4:	b083      	sub	sp, #12
 80043d6:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 80043da:	b30b      	cbz	r3, 8004420 <osMessageQueuePut+0x50>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80043dc:	3c00      	subs	r4, #0
 80043de:	bf18      	it	ne
 80043e0:	2401      	movne	r4, #1
 80043e2:	2900      	cmp	r1, #0
 80043e4:	bf08      	it	eq
 80043e6:	f044 0401 	orreq.w	r4, r4, #1
 80043ea:	bb7c      	cbnz	r4, 800444c <osMessageQueuePut+0x7c>
 80043ec:	fab0 f480 	clz	r4, r0
 80043f0:	0964      	lsrs	r4, r4, #5
 80043f2:	b358      	cbz	r0, 800444c <osMessageQueuePut+0x7c>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80043f4:	4623      	mov	r3, r4
 80043f6:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 80043f8:	9401      	str	r4, [sp, #4]
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80043fa:	f000 fb97 	bl	8004b2c <xQueueGenericSendFromISR>
 80043fe:	2801      	cmp	r0, #1
 8004400:	d120      	bne.n	8004444 <osMessageQueuePut+0x74>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 8004402:	9b01      	ldr	r3, [sp, #4]
 8004404:	b1db      	cbz	r3, 800443e <osMessageQueuePut+0x6e>
 8004406:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800440a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800440e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8004412:	f3bf 8f4f 	dsb	sy
 8004416:	f3bf 8f6f 	isb	sy
  stat = osOK;
 800441a:	4620      	mov	r0, r4
      }
    }
  }

  return (stat);
}
 800441c:	b003      	add	sp, #12
 800441e:	bd30      	pop	{r4, r5, pc}
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8004420:	b1a0      	cbz	r0, 800444c <osMessageQueuePut+0x7c>
 8004422:	fab1 f381 	clz	r3, r1
 8004426:	095b      	lsrs	r3, r3, #5
 8004428:	b181      	cbz	r1, 800444c <osMessageQueuePut+0x7c>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800442a:	4622      	mov	r2, r4
 800442c:	f000 fa46 	bl	80048bc <xQueueGenericSend>
 8004430:	2801      	cmp	r0, #1
 8004432:	d004      	beq.n	800443e <osMessageQueuePut+0x6e>
        if (timeout != 0U) {
 8004434:	b134      	cbz	r4, 8004444 <osMessageQueuePut+0x74>
          stat = osErrorTimeout;
 8004436:	f06f 0001 	mvn.w	r0, #1
}
 800443a:	b003      	add	sp, #12
 800443c:	bd30      	pop	{r4, r5, pc}
  stat = osOK;
 800443e:	2000      	movs	r0, #0
}
 8004440:	b003      	add	sp, #12
 8004442:	bd30      	pop	{r4, r5, pc}
          stat = osErrorResource;
 8004444:	f06f 0002 	mvn.w	r0, #2
}
 8004448:	b003      	add	sp, #12
 800444a:	bd30      	pop	{r4, r5, pc}
      stat = osErrorParameter;
 800444c:	f06f 0003 	mvn.w	r0, #3
 8004450:	e7e4      	b.n	800441c <osMessageQueuePut+0x4c>
 8004452:	bf00      	nop

08004454 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8004454:	b530      	push	{r4, r5, lr}
 8004456:	461c      	mov	r4, r3
 8004458:	b083      	sub	sp, #12
 800445a:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 800445e:	b303      	cbz	r3, 80044a2 <osMessageQueueGet+0x4e>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004460:	3c00      	subs	r4, #0
 8004462:	bf18      	it	ne
 8004464:	2401      	movne	r4, #1
 8004466:	2900      	cmp	r1, #0
 8004468:	bf08      	it	eq
 800446a:	f044 0401 	orreq.w	r4, r4, #1
 800446e:	bb5c      	cbnz	r4, 80044c8 <osMessageQueueGet+0x74>
 8004470:	fab0 f480 	clz	r4, r0
 8004474:	0964      	lsrs	r4, r4, #5
 8004476:	b338      	cbz	r0, 80044c8 <osMessageQueueGet+0x74>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8004478:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 800447a:	9401      	str	r4, [sp, #4]
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800447c:	f000 fdd6 	bl	800502c <xQueueReceiveFromISR>
 8004480:	2801      	cmp	r0, #1
 8004482:	d11d      	bne.n	80044c0 <osMessageQueueGet+0x6c>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 8004484:	9b01      	ldr	r3, [sp, #4]
 8004486:	b1c3      	cbz	r3, 80044ba <osMessageQueueGet+0x66>
 8004488:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800448c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004490:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8004494:	f3bf 8f4f 	dsb	sy
 8004498:	f3bf 8f6f 	isb	sy
  stat = osOK;
 800449c:	4620      	mov	r0, r4
      }
    }
  }

  return (stat);
}
 800449e:	b003      	add	sp, #12
 80044a0:	bd30      	pop	{r4, r5, pc}
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80044a2:	b188      	cbz	r0, 80044c8 <osMessageQueueGet+0x74>
 80044a4:	b181      	cbz	r1, 80044c8 <osMessageQueueGet+0x74>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80044a6:	4622      	mov	r2, r4
 80044a8:	f000 fc02 	bl	8004cb0 <xQueueReceive>
 80044ac:	2801      	cmp	r0, #1
 80044ae:	d004      	beq.n	80044ba <osMessageQueueGet+0x66>
        if (timeout != 0U) {
 80044b0:	b134      	cbz	r4, 80044c0 <osMessageQueueGet+0x6c>
          stat = osErrorTimeout;
 80044b2:	f06f 0001 	mvn.w	r0, #1
}
 80044b6:	b003      	add	sp, #12
 80044b8:	bd30      	pop	{r4, r5, pc}
  stat = osOK;
 80044ba:	2000      	movs	r0, #0
}
 80044bc:	b003      	add	sp, #12
 80044be:	bd30      	pop	{r4, r5, pc}
          stat = osErrorResource;
 80044c0:	f06f 0002 	mvn.w	r0, #2
}
 80044c4:	b003      	add	sp, #12
 80044c6:	bd30      	pop	{r4, r5, pc}
      stat = osErrorParameter;
 80044c8:	f06f 0003 	mvn.w	r0, #3
 80044cc:	e7e7      	b.n	800449e <osMessageQueueGet+0x4a>
 80044ce:	bf00      	nop

080044d0 <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80044d0:	4b05      	ldr	r3, [pc, #20]	; (80044e8 <vApplicationGetIdleTaskMemory+0x18>)
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80044d2:	b410      	push	{r4}
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80044d4:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80044d6:	f44f 7300 	mov.w	r3, #512	; 0x200
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80044da:	4c04      	ldr	r4, [pc, #16]	; (80044ec <vApplicationGetIdleTaskMemory+0x1c>)
 80044dc:	600c      	str	r4, [r1, #0]
}
 80044de:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80044e2:	6013      	str	r3, [r2, #0]
}
 80044e4:	4770      	bx	lr
 80044e6:	bf00      	nop
 80044e8:	24000a94 	.word	0x24000a94
 80044ec:	24000294 	.word	0x24000294

080044f0 <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80044f0:	4b05      	ldr	r3, [pc, #20]	; (8004508 <vApplicationGetTimerTaskMemory+0x18>)
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80044f2:	b410      	push	{r4}
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80044f4:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80044f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80044fa:	4c04      	ldr	r4, [pc, #16]	; (800450c <vApplicationGetTimerTaskMemory+0x1c>)
 80044fc:	600c      	str	r4, [r1, #0]
}
 80044fe:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004502:	6013      	str	r3, [r2, #0]
}
 8004504:	4770      	bx	lr
 8004506:	bf00      	nop
 8004508:	24001b40 	.word	0x24001b40
 800450c:	24000b40 	.word	0x24000b40

08004510 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004510:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004514:	f04f 31ff 	mov.w	r1, #4294967295
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004518:	2200      	movs	r2, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800451a:	6081      	str	r1, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800451c:	6002      	str	r2, [r0, #0]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800451e:	6043      	str	r3, [r0, #4]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004520:	e9c0 3303 	strd	r3, r3, [r0, #12]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004524:	4770      	bx	lr
 8004526:	bf00      	nop

08004528 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004528:	2300      	movs	r3, #0
 800452a:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800452c:	4770      	bx	lr
 800452e:	bf00      	nop

08004530 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8004530:	6843      	ldr	r3, [r0, #4]
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8004532:	6802      	ldr	r2, [r0, #0]
{
 8004534:	b410      	push	{r4}
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004536:	689c      	ldr	r4, [r3, #8]
	( pxList->uxNumberOfItems )++;
 8004538:	3201      	adds	r2, #1
	pxNewListItem->pxNext = pxIndex;
 800453a:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800453c:	608c      	str	r4, [r1, #8]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800453e:	689c      	ldr	r4, [r3, #8]
 8004540:	6061      	str	r1, [r4, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004542:	6099      	str	r1, [r3, #8]
}
 8004544:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxNewListItem->pxContainer = pxList;
 8004548:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800454a:	6002      	str	r2, [r0, #0]
}
 800454c:	4770      	bx	lr
 800454e:	bf00      	nop

08004550 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004550:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004552:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004554:	1c6b      	adds	r3, r5, #1
 8004556:	d010      	beq.n	800457a <vListInsert+0x2a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004558:	f100 0308 	add.w	r3, r0, #8
 800455c:	461c      	mov	r4, r3
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	681a      	ldr	r2, [r3, #0]
 8004562:	42aa      	cmp	r2, r5
 8004564:	d9fa      	bls.n	800455c <vListInsert+0xc>

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8004566:	6802      	ldr	r2, [r0, #0]
	pxNewListItem->pxNext = pxIterator->pxNext;
 8004568:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
 800456a:	3201      	adds	r2, #1
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800456c:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800456e:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8004570:	6061      	str	r1, [r4, #4]
	pxNewListItem->pxContainer = pxList;
 8004572:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8004574:	6002      	str	r2, [r0, #0]
}
 8004576:	bc30      	pop	{r4, r5}
 8004578:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 800457a:	6904      	ldr	r4, [r0, #16]
	pxNewListItem->pxNext = pxIterator->pxNext;
 800457c:	6863      	ldr	r3, [r4, #4]
 800457e:	e7f2      	b.n	8004566 <vListInsert+0x16>

08004580 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004580:	6903      	ldr	r3, [r0, #16]
{
 8004582:	b410      	push	{r4}

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004584:	685c      	ldr	r4, [r3, #4]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004586:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
	if( pxList->pxIndex == pxItemToRemove )
 800458a:	4284      	cmp	r4, r0

	pxItemToRemove->pxContainer = NULL;
	( pxList->uxNumberOfItems )--;

	return pxList->uxNumberOfItems;
}
 800458c:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004590:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004592:	6051      	str	r1, [r2, #4]
	pxItemToRemove->pxContainer = NULL;
 8004594:	f04f 0100 	mov.w	r1, #0
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004598:	bf08      	it	eq
 800459a:	605a      	streq	r2, [r3, #4]
	( pxList->uxNumberOfItems )--;
 800459c:	681a      	ldr	r2, [r3, #0]
	pxItemToRemove->pxContainer = NULL;
 800459e:	6101      	str	r1, [r0, #16]
	( pxList->uxNumberOfItems )--;
 80045a0:	3a01      	subs	r2, #1
 80045a2:	601a      	str	r2, [r3, #0]
	return pxList->uxNumberOfItems;
 80045a4:	6818      	ldr	r0, [r3, #0]
}
 80045a6:	4770      	bx	lr

080045a8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80045a8:	b570      	push	{r4, r5, r6, lr}
 80045aa:	4615      	mov	r5, r2

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80045ac:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 80045ae:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80045b0:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80045b2:	b92a      	cbnz	r2, 80045c0 <prvCopyDataToQueue+0x18>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80045b4:	6805      	ldr	r5, [r0, #0]
 80045b6:	b365      	cbz	r5, 8004612 <prvCopyDataToQueue+0x6a>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80045b8:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
 80045ba:	4610      	mov	r0, r2
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80045bc:	63a6      	str	r6, [r4, #56]	; 0x38

	return xReturn;
}
 80045be:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 80045c0:	b97d      	cbnz	r5, 80045e2 <prvCopyDataToQueue+0x3a>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80045c2:	6840      	ldr	r0, [r0, #4]
 80045c4:	f009 fe5e 	bl	800e284 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80045c8:	6863      	ldr	r3, [r4, #4]
 80045ca:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80045cc:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80045ce:	68a2      	ldr	r2, [r4, #8]
 80045d0:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80045d2:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80045d4:	d319      	bcc.n	800460a <prvCopyDataToQueue+0x62>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80045d6:	6822      	ldr	r2, [r4, #0]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80045d8:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
 80045da:	4628      	mov	r0, r5
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80045dc:	6062      	str	r2, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80045de:	63a6      	str	r6, [r4, #56]	; 0x38
}
 80045e0:	bd70      	pop	{r4, r5, r6, pc}
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80045e2:	68c0      	ldr	r0, [r0, #12]
 80045e4:	f009 fe4e 	bl	800e284 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80045e8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80045ea:	68e3      	ldr	r3, [r4, #12]
 80045ec:	4251      	negs	r1, r2
 80045ee:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80045f0:	6822      	ldr	r2, [r4, #0]
 80045f2:	4293      	cmp	r3, r2
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80045f4:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80045f6:	d202      	bcs.n	80045fe <prvCopyDataToQueue+0x56>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80045f8:	68a3      	ldr	r3, [r4, #8]
 80045fa:	440b      	add	r3, r1
 80045fc:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 80045fe:	2d02      	cmp	r5, #2
 8004600:	d00d      	beq.n	800461e <prvCopyDataToQueue+0x76>
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004602:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
 8004604:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004606:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8004608:	bd70      	pop	{r4, r5, r6, pc}
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800460a:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
 800460c:	4628      	mov	r0, r5
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800460e:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8004610:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004612:	6880      	ldr	r0, [r0, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004614:	3601      	adds	r6, #1
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004616:	f001 fb27 	bl	8005c68 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800461a:	60a5      	str	r5, [r4, #8]
 800461c:	e7ce      	b.n	80045bc <prvCopyDataToQueue+0x14>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800461e:	2e01      	cmp	r6, #1
BaseType_t xReturn = pdFALSE;
 8004620:	f04f 0000 	mov.w	r0, #0
 8004624:	bf38      	it	cc
 8004626:	2601      	movcc	r6, #1
 8004628:	e7c8      	b.n	80045bc <prvCopyDataToQueue+0x14>
 800462a:	bf00      	nop

0800462c <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800462c:	b570      	push	{r4, r5, r6, lr}
 800462e:	4605      	mov	r5, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004630:	f001 fe40 	bl	80062b4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004634:	f895 3045 	ldrb.w	r3, [r5, #69]	; 0x45
 8004638:	b25c      	sxtb	r4, r3

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800463a:	2c00      	cmp	r4, #0
 800463c:	dd14      	ble.n	8004668 <prvUnlockQueue+0x3c>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800463e:	f105 0624 	add.w	r6, r5, #36	; 0x24
 8004642:	e003      	b.n	800464c <prvUnlockQueue+0x20>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004644:	1e63      	subs	r3, r4, #1
 8004646:	b2da      	uxtb	r2, r3
 8004648:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800464a:	b16a      	cbz	r2, 8004668 <prvUnlockQueue+0x3c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800464c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800464e:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004650:	b153      	cbz	r3, 8004668 <prvUnlockQueue+0x3c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004652:	f001 fa09 	bl	8005a68 <xTaskRemoveFromEventList>
 8004656:	2800      	cmp	r0, #0
 8004658:	d0f4      	beq.n	8004644 <prvUnlockQueue+0x18>
						vTaskMissedYield();
 800465a:	f001 faa3 	bl	8005ba4 <vTaskMissedYield>
			--cTxLock;
 800465e:	1e63      	subs	r3, r4, #1
 8004660:	b2da      	uxtb	r2, r3
 8004662:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004664:	2a00      	cmp	r2, #0
 8004666:	d1f1      	bne.n	800464c <prvUnlockQueue+0x20>
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004668:	23ff      	movs	r3, #255	; 0xff
 800466a:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800466e:	f001 fe43 	bl	80062f8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004672:	f001 fe1f 	bl	80062b4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004676:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
 800467a:	b25c      	sxtb	r4, r3

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800467c:	2c00      	cmp	r4, #0
 800467e:	dd14      	ble.n	80046aa <prvUnlockQueue+0x7e>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004680:	f105 0610 	add.w	r6, r5, #16
 8004684:	e003      	b.n	800468e <prvUnlockQueue+0x62>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004686:	1e63      	subs	r3, r4, #1
 8004688:	b2da      	uxtb	r2, r3
 800468a:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800468c:	b16a      	cbz	r2, 80046aa <prvUnlockQueue+0x7e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800468e:	692b      	ldr	r3, [r5, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004690:	4630      	mov	r0, r6
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004692:	b153      	cbz	r3, 80046aa <prvUnlockQueue+0x7e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004694:	f001 f9e8 	bl	8005a68 <xTaskRemoveFromEventList>
 8004698:	2800      	cmp	r0, #0
 800469a:	d0f4      	beq.n	8004686 <prvUnlockQueue+0x5a>
					vTaskMissedYield();
 800469c:	f001 fa82 	bl	8005ba4 <vTaskMissedYield>
				--cRxLock;
 80046a0:	1e63      	subs	r3, r4, #1
 80046a2:	b2da      	uxtb	r2, r3
 80046a4:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80046a6:	2a00      	cmp	r2, #0
 80046a8:	d1f1      	bne.n	800468e <prvUnlockQueue+0x62>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80046aa:	23ff      	movs	r3, #255	; 0xff
 80046ac:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
}
 80046b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 80046b4:	f001 be20 	b.w	80062f8 <vPortExitCritical>

080046b8 <xQueueGenericReset>:
{
 80046b8:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 80046ba:	b1e0      	cbz	r0, 80046f6 <xQueueGenericReset+0x3e>
 80046bc:	4604      	mov	r4, r0
 80046be:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
 80046c0:	f001 fdf8 	bl	80062b4 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80046c4:	6822      	ldr	r2, [r4, #0]
 80046c6:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	; 0x3c
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80046ca:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80046cc:	fb01 f303 	mul.w	r3, r1, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80046d0:	1a59      	subs	r1, r3, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80046d2:	4413      	add	r3, r2
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80046d4:	440a      	add	r2, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80046d6:	60a3      	str	r3, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80046d8:	2100      	movs	r1, #0
		pxQueue->cRxLock = queueUNLOCKED;
 80046da:	23ff      	movs	r3, #255	; 0xff
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80046dc:	60e2      	str	r2, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80046de:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 80046e0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80046e4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 80046e8:	b975      	cbnz	r5, 8004708 <xQueueGenericReset+0x50>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80046ea:	6923      	ldr	r3, [r4, #16]
 80046ec:	b9c3      	cbnz	r3, 8004720 <xQueueGenericReset+0x68>
	taskEXIT_CRITICAL();
 80046ee:	f001 fe03 	bl	80062f8 <vPortExitCritical>
}
 80046f2:	2001      	movs	r0, #1
 80046f4:	bd38      	pop	{r3, r4, r5, pc}

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80046f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046fa:	f383 8811 	msr	BASEPRI, r3
 80046fe:	f3bf 8f6f 	isb	sy
 8004702:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8004706:	e7fe      	b.n	8004706 <xQueueGenericReset+0x4e>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004708:	f104 0010 	add.w	r0, r4, #16
 800470c:	f7ff ff00 	bl	8004510 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004710:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004714:	f7ff fefc 	bl	8004510 <vListInitialise>
	taskEXIT_CRITICAL();
 8004718:	f001 fdee 	bl	80062f8 <vPortExitCritical>
}
 800471c:	2001      	movs	r0, #1
 800471e:	bd38      	pop	{r3, r4, r5, pc}
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004720:	f104 0010 	add.w	r0, r4, #16
 8004724:	f001 f9a0 	bl	8005a68 <xTaskRemoveFromEventList>
 8004728:	2800      	cmp	r0, #0
 800472a:	d0e0      	beq.n	80046ee <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 800472c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8004730:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004734:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8004738:	f3bf 8f4f 	dsb	sy
 800473c:	f3bf 8f6f 	isb	sy
 8004740:	e7d5      	b.n	80046ee <xQueueGenericReset+0x36>
 8004742:	bf00      	nop

08004744 <xQueueGenericCreateStatic>:
	{
 8004744:	b530      	push	{r4, r5, lr}
 8004746:	b085      	sub	sp, #20
 8004748:	f89d 4020 	ldrb.w	r4, [sp, #32]
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800474c:	b940      	cbnz	r0, 8004760 <xQueueGenericCreateStatic+0x1c>
 800474e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004752:	f383 8811 	msr	BASEPRI, r3
 8004756:	f3bf 8f6f 	isb	sy
 800475a:	f3bf 8f4f 	dsb	sy
 800475e:	e7fe      	b.n	800475e <xQueueGenericCreateStatic+0x1a>
		configASSERT( pxStaticQueue != NULL );
 8004760:	b153      	cbz	r3, 8004778 <xQueueGenericCreateStatic+0x34>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004762:	b30a      	cbz	r2, 80047a8 <xQueueGenericCreateStatic+0x64>
 8004764:	b989      	cbnz	r1, 800478a <xQueueGenericCreateStatic+0x46>
 8004766:	f04f 0350 	mov.w	r3, #80	; 0x50
 800476a:	f383 8811 	msr	BASEPRI, r3
 800476e:	f3bf 8f6f 	isb	sy
 8004772:	f3bf 8f4f 	dsb	sy
 8004776:	e7fe      	b.n	8004776 <xQueueGenericCreateStatic+0x32>
 8004778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800477c:	f383 8811 	msr	BASEPRI, r3
 8004780:	f3bf 8f6f 	isb	sy
 8004784:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
 8004788:	e7fe      	b.n	8004788 <xQueueGenericCreateStatic+0x44>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800478a:	b16a      	cbz	r2, 80047a8 <xQueueGenericCreateStatic+0x64>
			volatile size_t xSize = sizeof( StaticQueue_t );
 800478c:	2550      	movs	r5, #80	; 0x50
 800478e:	9503      	str	r5, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004790:	9d03      	ldr	r5, [sp, #12]
 8004792:	2d50      	cmp	r5, #80	; 0x50
 8004794:	d013      	beq.n	80047be <xQueueGenericCreateStatic+0x7a>
 8004796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800479a:	f383 8811 	msr	BASEPRI, r3
 800479e:	f3bf 8f6f 	isb	sy
 80047a2:	f3bf 8f4f 	dsb	sy
 80047a6:	e7fe      	b.n	80047a6 <xQueueGenericCreateStatic+0x62>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80047a8:	2900      	cmp	r1, #0
 80047aa:	d0ef      	beq.n	800478c <xQueueGenericCreateStatic+0x48>
 80047ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047b0:	f383 8811 	msr	BASEPRI, r3
 80047b4:	f3bf 8f6f 	isb	sy
 80047b8:	f3bf 8f4f 	dsb	sy
 80047bc:	e7fe      	b.n	80047bc <xQueueGenericCreateStatic+0x78>
	if( uxItemSize == ( UBaseType_t ) 0 )
 80047be:	2900      	cmp	r1, #0
 80047c0:	bf08      	it	eq
 80047c2:	461a      	moveq	r2, r3
	pxNewQueue->uxItemSize = uxItemSize;
 80047c4:	6419      	str	r1, [r3, #64]	; 0x40
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80047c6:	2101      	movs	r1, #1
	pxNewQueue->uxLength = uxQueueLength;
 80047c8:	63d8      	str	r0, [r3, #60]	; 0x3c
 80047ca:	601a      	str	r2, [r3, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80047cc:	4618      	mov	r0, r3
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80047ce:	f883 1046 	strb.w	r1, [r3, #70]	; 0x46
 80047d2:	9301      	str	r3, [sp, #4]
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80047d4:	9a03      	ldr	r2, [sp, #12]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80047d6:	f7ff ff6f 	bl	80046b8 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 80047da:	9b01      	ldr	r3, [sp, #4]
	}
 80047dc:	4618      	mov	r0, r3
		pxNewQueue->ucQueueType = ucQueueType;
 80047de:	f883 404c 	strb.w	r4, [r3, #76]	; 0x4c
	}
 80047e2:	b005      	add	sp, #20
 80047e4:	bd30      	pop	{r4, r5, pc}
 80047e6:	bf00      	nop

080047e8 <xQueueGenericCreate>:
	{
 80047e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80047ea:	b940      	cbnz	r0, 80047fe <xQueueGenericCreate+0x16>
 80047ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047f0:	f383 8811 	msr	BASEPRI, r3
 80047f4:	f3bf 8f6f 	isb	sy
 80047f8:	f3bf 8f4f 	dsb	sy
 80047fc:	e7fe      	b.n	80047fc <xQueueGenericCreate+0x14>
 80047fe:	4604      	mov	r4, r0
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004800:	fb01 f000 	mul.w	r0, r1, r0
 8004804:	460d      	mov	r5, r1
 8004806:	4616      	mov	r6, r2
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004808:	3050      	adds	r0, #80	; 0x50
 800480a:	f001 fecf 	bl	80065ac <pvPortMalloc>
		if( pxNewQueue != NULL )
 800480e:	4607      	mov	r7, r0
 8004810:	b170      	cbz	r0, 8004830 <xQueueGenericCreate+0x48>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004812:	2300      	movs	r3, #0
 8004814:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 8004818:	b165      	cbz	r5, 8004834 <xQueueGenericCreate+0x4c>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800481a:	f100 0350 	add.w	r3, r0, #80	; 0x50
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800481e:	2101      	movs	r1, #1
 8004820:	4638      	mov	r0, r7
 8004822:	603b      	str	r3, [r7, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 8004824:	e9c7 450f 	strd	r4, r5, [r7, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004828:	f7ff ff46 	bl	80046b8 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800482c:	f887 604c 	strb.w	r6, [r7, #76]	; 0x4c
	}
 8004830:	4638      	mov	r0, r7
 8004832:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004834:	4603      	mov	r3, r0
 8004836:	e7f2      	b.n	800481e <xQueueGenericCreate+0x36>

08004838 <xQueueCreateCountingSemaphoreStatic>:
		configASSERT( uxMaxCount != 0 );
 8004838:	b940      	cbnz	r0, 800484c <xQueueCreateCountingSemaphoreStatic+0x14>
 800483a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800483e:	f383 8811 	msr	BASEPRI, r3
 8004842:	f3bf 8f6f 	isb	sy
 8004846:	f3bf 8f4f 	dsb	sy
 800484a:	e7fe      	b.n	800484a <xQueueCreateCountingSemaphoreStatic+0x12>
		configASSERT( uxInitialCount <= uxMaxCount );
 800484c:	4288      	cmp	r0, r1
	{
 800484e:	b510      	push	{r4, lr}
 8004850:	460c      	mov	r4, r1
 8004852:	b082      	sub	sp, #8
		configASSERT( uxInitialCount <= uxMaxCount );
 8004854:	d208      	bcs.n	8004868 <xQueueCreateCountingSemaphoreStatic+0x30>
 8004856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800485a:	f383 8811 	msr	BASEPRI, r3
 800485e:	f3bf 8f6f 	isb	sy
 8004862:	f3bf 8f4f 	dsb	sy
 8004866:	e7fe      	b.n	8004866 <xQueueCreateCountingSemaphoreStatic+0x2e>
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8004868:	2102      	movs	r1, #2
 800486a:	4613      	mov	r3, r2
 800486c:	2200      	movs	r2, #0
 800486e:	9100      	str	r1, [sp, #0]
 8004870:	4611      	mov	r1, r2
 8004872:	f7ff ff67 	bl	8004744 <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 8004876:	b100      	cbz	r0, 800487a <xQueueCreateCountingSemaphoreStatic+0x42>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8004878:	6384      	str	r4, [r0, #56]	; 0x38
	}
 800487a:	b002      	add	sp, #8
 800487c:	bd10      	pop	{r4, pc}
 800487e:	bf00      	nop

08004880 <xQueueCreateCountingSemaphore>:
		configASSERT( uxMaxCount != 0 );
 8004880:	b940      	cbnz	r0, 8004894 <xQueueCreateCountingSemaphore+0x14>
 8004882:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004886:	f383 8811 	msr	BASEPRI, r3
 800488a:	f3bf 8f6f 	isb	sy
 800488e:	f3bf 8f4f 	dsb	sy
 8004892:	e7fe      	b.n	8004892 <xQueueCreateCountingSemaphore+0x12>
		configASSERT( uxInitialCount <= uxMaxCount );
 8004894:	4288      	cmp	r0, r1
	{
 8004896:	b510      	push	{r4, lr}
 8004898:	460c      	mov	r4, r1
		configASSERT( uxInitialCount <= uxMaxCount );
 800489a:	d208      	bcs.n	80048ae <xQueueCreateCountingSemaphore+0x2e>
 800489c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048a0:	f383 8811 	msr	BASEPRI, r3
 80048a4:	f3bf 8f6f 	isb	sy
 80048a8:	f3bf 8f4f 	dsb	sy
 80048ac:	e7fe      	b.n	80048ac <xQueueCreateCountingSemaphore+0x2c>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80048ae:	2202      	movs	r2, #2
 80048b0:	2100      	movs	r1, #0
 80048b2:	f7ff ff99 	bl	80047e8 <xQueueGenericCreate>
		if( xHandle != NULL )
 80048b6:	b100      	cbz	r0, 80048ba <xQueueCreateCountingSemaphore+0x3a>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80048b8:	6384      	str	r4, [r0, #56]	; 0x38
	}
 80048ba:	bd10      	pop	{r4, pc}

080048bc <xQueueGenericSend>:
{
 80048bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80048c0:	b085      	sub	sp, #20
 80048c2:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 80048c4:	2800      	cmp	r0, #0
 80048c6:	d07e      	beq.n	80049c6 <xQueueGenericSend+0x10a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80048c8:	460f      	mov	r7, r1
 80048ca:	4604      	mov	r4, r0
 80048cc:	461e      	mov	r6, r3
 80048ce:	2900      	cmp	r1, #0
 80048d0:	d069      	beq.n	80049a6 <xQueueGenericSend+0xea>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80048d2:	2e02      	cmp	r6, #2
 80048d4:	d10b      	bne.n	80048ee <xQueueGenericSend+0x32>
 80048d6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80048d8:	2b01      	cmp	r3, #1
 80048da:	d008      	beq.n	80048ee <xQueueGenericSend+0x32>
 80048dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048e0:	f383 8811 	msr	BASEPRI, r3
 80048e4:	f3bf 8f6f 	isb	sy
 80048e8:	f3bf 8f4f 	dsb	sy
 80048ec:	e7fe      	b.n	80048ec <xQueueGenericSend+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80048ee:	f001 f965 	bl	8005bbc <xTaskGetSchedulerState>
 80048f2:	2800      	cmp	r0, #0
 80048f4:	d070      	beq.n	80049d8 <xQueueGenericSend+0x11c>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80048f6:	f1a6 0802 	sub.w	r8, r6, #2
 80048fa:	2500      	movs	r5, #0
 80048fc:	fab8 f888 	clz	r8, r8
		prvLockQueue( pxQueue );
 8004900:	46a9      	mov	r9, r5
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004902:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8004906:	e007      	b.n	8004918 <xQueueGenericSend+0x5c>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8004908:	f001 fcf6 	bl	80062f8 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 800490c:	4620      	mov	r0, r4
 800490e:	f7ff fe8d 	bl	800462c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004912:	f000 ffdb 	bl	80058cc <xTaskResumeAll>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004916:	2501      	movs	r5, #1
		taskENTER_CRITICAL();
 8004918:	f001 fccc 	bl	80062b4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800491c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800491e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8004920:	4290      	cmp	r0, r2
 8004922:	d365      	bcc.n	80049f0 <xQueueGenericSend+0x134>
 8004924:	f1b8 0f00 	cmp.w	r8, #0
 8004928:	d162      	bne.n	80049f0 <xQueueGenericSend+0x134>
				if( xTicksToWait == ( TickType_t ) 0 )
 800492a:	9b01      	ldr	r3, [sp, #4]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d077      	beq.n	8004a20 <xQueueGenericSend+0x164>
				else if( xEntryTimeSet == pdFALSE )
 8004930:	2d00      	cmp	r5, #0
 8004932:	d044      	beq.n	80049be <xQueueGenericSend+0x102>
		taskEXIT_CRITICAL();
 8004934:	f001 fce0 	bl	80062f8 <vPortExitCritical>
		vTaskSuspendAll();
 8004938:	f000 fe74 	bl	8005624 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800493c:	f001 fcba 	bl	80062b4 <vPortEnterCritical>
 8004940:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8004944:	2bff      	cmp	r3, #255	; 0xff
 8004946:	d101      	bne.n	800494c <xQueueGenericSend+0x90>
 8004948:	f884 9044 	strb.w	r9, [r4, #68]	; 0x44
 800494c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8004950:	2bff      	cmp	r3, #255	; 0xff
 8004952:	d101      	bne.n	8004958 <xQueueGenericSend+0x9c>
 8004954:	f884 9045 	strb.w	r9, [r4, #69]	; 0x45
 8004958:	f001 fcce 	bl	80062f8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800495c:	a901      	add	r1, sp, #4
 800495e:	a802      	add	r0, sp, #8
 8004960:	f001 f8d8 	bl	8005b14 <xTaskCheckForTimeOut>
 8004964:	2800      	cmp	r0, #0
 8004966:	d15f      	bne.n	8004a28 <xQueueGenericSend+0x16c>
	taskENTER_CRITICAL();
 8004968:	f001 fca4 	bl	80062b4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800496c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800496e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004970:	429a      	cmp	r2, r3
 8004972:	d1c9      	bne.n	8004908 <xQueueGenericSend+0x4c>
	taskEXIT_CRITICAL();
 8004974:	f001 fcc0 	bl	80062f8 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004978:	9901      	ldr	r1, [sp, #4]
 800497a:	f104 0010 	add.w	r0, r4, #16
 800497e:	f001 f83b 	bl	80059f8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004982:	4620      	mov	r0, r4
 8004984:	f7ff fe52 	bl	800462c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004988:	f000 ffa0 	bl	80058cc <xTaskResumeAll>
 800498c:	2800      	cmp	r0, #0
 800498e:	d1c2      	bne.n	8004916 <xQueueGenericSend+0x5a>
					portYIELD_WITHIN_API();
 8004990:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8004994:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004998:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800499c:	f3bf 8f4f 	dsb	sy
 80049a0:	f3bf 8f6f 	isb	sy
 80049a4:	e7b7      	b.n	8004916 <xQueueGenericSend+0x5a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80049a6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d092      	beq.n	80048d2 <xQueueGenericSend+0x16>
 80049ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049b0:	f383 8811 	msr	BASEPRI, r3
 80049b4:	f3bf 8f6f 	isb	sy
 80049b8:	f3bf 8f4f 	dsb	sy
 80049bc:	e7fe      	b.n	80049bc <xQueueGenericSend+0x100>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80049be:	a802      	add	r0, sp, #8
 80049c0:	f001 f89c 	bl	8005afc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80049c4:	e7b6      	b.n	8004934 <xQueueGenericSend+0x78>
 80049c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ca:	f383 8811 	msr	BASEPRI, r3
 80049ce:	f3bf 8f6f 	isb	sy
 80049d2:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 80049d6:	e7fe      	b.n	80049d6 <xQueueGenericSend+0x11a>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80049d8:	9b01      	ldr	r3, [sp, #4]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d08b      	beq.n	80048f6 <xQueueGenericSend+0x3a>
 80049de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049e2:	f383 8811 	msr	BASEPRI, r3
 80049e6:	f3bf 8f6f 	isb	sy
 80049ea:	f3bf 8f4f 	dsb	sy
 80049ee:	e7fe      	b.n	80049ee <xQueueGenericSend+0x132>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80049f0:	4632      	mov	r2, r6
 80049f2:	4639      	mov	r1, r7
 80049f4:	4620      	mov	r0, r4
 80049f6:	f7ff fdd7 	bl	80045a8 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80049fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80049fc:	b9db      	cbnz	r3, 8004a36 <xQueueGenericSend+0x17a>
					else if( xYieldRequired != pdFALSE )
 80049fe:	b148      	cbz	r0, 8004a14 <xQueueGenericSend+0x158>
						queueYIELD_IF_USING_PREEMPTION();
 8004a00:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8004a04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a08:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8004a0c:	f3bf 8f4f 	dsb	sy
 8004a10:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8004a14:	f001 fc70 	bl	80062f8 <vPortExitCritical>
				return pdPASS;
 8004a18:	2001      	movs	r0, #1
}
 8004a1a:	b005      	add	sp, #20
 8004a1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					taskEXIT_CRITICAL();
 8004a20:	f001 fc6a 	bl	80062f8 <vPortExitCritical>
					return errQUEUE_FULL;
 8004a24:	4640      	mov	r0, r8
 8004a26:	e7f8      	b.n	8004a1a <xQueueGenericSend+0x15e>
			prvUnlockQueue( pxQueue );
 8004a28:	4620      	mov	r0, r4
 8004a2a:	f7ff fdff 	bl	800462c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004a2e:	f000 ff4d 	bl	80058cc <xTaskResumeAll>
			return errQUEUE_FULL;
 8004a32:	2000      	movs	r0, #0
 8004a34:	e7f1      	b.n	8004a1a <xQueueGenericSend+0x15e>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004a36:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004a3a:	f001 f815 	bl	8005a68 <xTaskRemoveFromEventList>
 8004a3e:	2800      	cmp	r0, #0
 8004a40:	d0e8      	beq.n	8004a14 <xQueueGenericSend+0x158>
 8004a42:	e7dd      	b.n	8004a00 <xQueueGenericSend+0x144>

08004a44 <xQueueCreateMutexStatic>:
		configASSERT( pxStaticQueue != NULL );
 8004a44:	b179      	cbz	r1, 8004a66 <xQueueCreateMutexStatic+0x22>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004a46:	2350      	movs	r3, #80	; 0x50
	{
 8004a48:	b570      	push	{r4, r5, r6, lr}
 8004a4a:	b082      	sub	sp, #8
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004a4c:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004a4e:	9b01      	ldr	r3, [sp, #4]
 8004a50:	2b50      	cmp	r3, #80	; 0x50
 8004a52:	d011      	beq.n	8004a78 <xQueueCreateMutexStatic+0x34>
 8004a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a58:	f383 8811 	msr	BASEPRI, r3
 8004a5c:	f3bf 8f6f 	isb	sy
 8004a60:	f3bf 8f4f 	dsb	sy
 8004a64:	e7fe      	b.n	8004a64 <xQueueCreateMutexStatic+0x20>
 8004a66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a6a:	f383 8811 	msr	BASEPRI, r3
 8004a6e:	f3bf 8f6f 	isb	sy
 8004a72:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
 8004a76:	e7fe      	b.n	8004a76 <xQueueCreateMutexStatic+0x32>
 8004a78:	460c      	mov	r4, r1
	pxNewQueue->uxItemSize = uxItemSize;
 8004a7a:	2600      	movs	r6, #0
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004a7c:	2101      	movs	r1, #1
 8004a7e:	4605      	mov	r5, r0
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004a80:	6024      	str	r4, [r4, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004a82:	4620      	mov	r0, r4
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004a84:	f884 1046 	strb.w	r1, [r4, #70]	; 0x46
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004a88:	9a01      	ldr	r2, [sp, #4]
	pxNewQueue->uxItemSize = uxItemSize;
 8004a8a:	e9c4 160f 	strd	r1, r6, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004a8e:	f7ff fe13 	bl	80046b8 <xQueueGenericReset>
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004a92:	4633      	mov	r3, r6
 8004a94:	4632      	mov	r2, r6
 8004a96:	4631      	mov	r1, r6
 8004a98:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 8004a9a:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8004a9e:	60a6      	str	r6, [r4, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8004aa0:	6026      	str	r6, [r4, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8004aa2:	60e6      	str	r6, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004aa4:	f7ff ff0a 	bl	80048bc <xQueueGenericSend>
	}
 8004aa8:	4620      	mov	r0, r4
 8004aaa:	b002      	add	sp, #8
 8004aac:	bd70      	pop	{r4, r5, r6, pc}
 8004aae:	bf00      	nop

08004ab0 <xQueueGiveMutexRecursive>:
	{
 8004ab0:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxMutex );
 8004ab2:	b138      	cbz	r0, 8004ac4 <xQueueGiveMutexRecursive+0x14>
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8004ab4:	6885      	ldr	r5, [r0, #8]
 8004ab6:	4604      	mov	r4, r0
 8004ab8:	f001 f87a 	bl	8005bb0 <xTaskGetCurrentTaskHandle>
 8004abc:	4285      	cmp	r5, r0
 8004abe:	d00a      	beq.n	8004ad6 <xQueueGiveMutexRecursive+0x26>
			xReturn = pdFAIL;
 8004ac0:	2000      	movs	r0, #0
	}
 8004ac2:	bd38      	pop	{r3, r4, r5, pc}
 8004ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ac8:	f383 8811 	msr	BASEPRI, r3
 8004acc:	f3bf 8f6f 	isb	sy
 8004ad0:	f3bf 8f4f 	dsb	sy
		configASSERT( pxMutex );
 8004ad4:	e7fe      	b.n	8004ad4 <xQueueGiveMutexRecursive+0x24>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8004ad6:	68e3      	ldr	r3, [r4, #12]
 8004ad8:	3b01      	subs	r3, #1
 8004ada:	60e3      	str	r3, [r4, #12]
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8004adc:	b10b      	cbz	r3, 8004ae2 <xQueueGiveMutexRecursive+0x32>
			xReturn = pdPASS;
 8004ade:	2001      	movs	r0, #1
	}
 8004ae0:	bd38      	pop	{r3, r4, r5, pc}
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8004ae2:	461a      	mov	r2, r3
 8004ae4:	4619      	mov	r1, r3
 8004ae6:	4620      	mov	r0, r4
 8004ae8:	f7ff fee8 	bl	80048bc <xQueueGenericSend>
			xReturn = pdPASS;
 8004aec:	2001      	movs	r0, #1
	}
 8004aee:	bd38      	pop	{r3, r4, r5, pc}

08004af0 <xQueueCreateMutex>:
	{
 8004af0:	b570      	push	{r4, r5, r6, lr}
 8004af2:	4605      	mov	r5, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004af4:	2050      	movs	r0, #80	; 0x50
 8004af6:	f001 fd59 	bl	80065ac <pvPortMalloc>
		if( pxNewQueue != NULL )
 8004afa:	4604      	mov	r4, r0
 8004afc:	b198      	cbz	r0, 8004b26 <xQueueCreateMutex+0x36>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004afe:	2600      	movs	r6, #0
	pxNewQueue->uxLength = uxQueueLength;
 8004b00:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004b02:	6020      	str	r0, [r4, #0]
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004b04:	f880 6046 	strb.w	r6, [r0, #70]	; 0x46
	pxNewQueue->uxItemSize = uxItemSize;
 8004b08:	e9c0 160f 	strd	r1, r6, [r0, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004b0c:	f7ff fdd4 	bl	80046b8 <xQueueGenericReset>
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004b10:	4633      	mov	r3, r6
 8004b12:	4632      	mov	r2, r6
 8004b14:	4631      	mov	r1, r6
 8004b16:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 8004b18:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8004b1c:	60a6      	str	r6, [r4, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8004b1e:	6026      	str	r6, [r4, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8004b20:	60e6      	str	r6, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004b22:	f7ff fecb 	bl	80048bc <xQueueGenericSend>
	}
 8004b26:	4620      	mov	r0, r4
 8004b28:	bd70      	pop	{r4, r5, r6, pc}
 8004b2a:	bf00      	nop

08004b2c <xQueueGenericSendFromISR>:
	configASSERT( pxQueue );
 8004b2c:	2800      	cmp	r0, #0
 8004b2e:	d04e      	beq.n	8004bce <xQueueGenericSendFromISR+0xa2>
{
 8004b30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b34:	460e      	mov	r6, r1
 8004b36:	4604      	mov	r4, r0
 8004b38:	4617      	mov	r7, r2
 8004b3a:	461d      	mov	r5, r3
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004b3c:	b339      	cbz	r1, 8004b8e <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004b3e:	2d02      	cmp	r5, #2
 8004b40:	d10b      	bne.n	8004b5a <xQueueGenericSendFromISR+0x2e>
 8004b42:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004b44:	2b01      	cmp	r3, #1
 8004b46:	d008      	beq.n	8004b5a <xQueueGenericSendFromISR+0x2e>
 8004b48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b4c:	f383 8811 	msr	BASEPRI, r3
 8004b50:	f3bf 8f6f 	isb	sy
 8004b54:	f3bf 8f4f 	dsb	sy
 8004b58:	e7fe      	b.n	8004b58 <xQueueGenericSendFromISR+0x2c>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004b5a:	f001 fcc7 	bl	80064ec <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004b5e:	f3ef 8811 	mrs	r8, BASEPRI
 8004b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b66:	f383 8811 	msr	BASEPRI, r3
 8004b6a:	f3bf 8f6f 	isb	sy
 8004b6e:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004b72:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004b74:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004b76:	429a      	cmp	r2, r3
 8004b78:	d315      	bcc.n	8004ba6 <xQueueGenericSendFromISR+0x7a>
 8004b7a:	f1a5 0002 	sub.w	r0, r5, #2
 8004b7e:	fab0 f080 	clz	r0, r0
 8004b82:	0940      	lsrs	r0, r0, #5
 8004b84:	b978      	cbnz	r0, 8004ba6 <xQueueGenericSendFromISR+0x7a>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004b86:	f388 8811 	msr	BASEPRI, r8
}
 8004b8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004b8e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d0d4      	beq.n	8004b3e <xQueueGenericSendFromISR+0x12>
	__asm volatile
 8004b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b98:	f383 8811 	msr	BASEPRI, r3
 8004b9c:	f3bf 8f6f 	isb	sy
 8004ba0:	f3bf 8f4f 	dsb	sy
 8004ba4:	e7fe      	b.n	8004ba4 <xQueueGenericSendFromISR+0x78>
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004ba6:	462a      	mov	r2, r5
			const int8_t cTxLock = pxQueue->cTxLock;
 8004ba8:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004bac:	4631      	mov	r1, r6
 8004bae:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 8004bb0:	b26d      	sxtb	r5, r5
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004bb2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004bb4:	f7ff fcf8 	bl	80045a8 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8004bb8:	1c6b      	adds	r3, r5, #1
 8004bba:	d011      	beq.n	8004be0 <xQueueGenericSendFromISR+0xb4>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004bbc:	1c6b      	adds	r3, r5, #1
			xReturn = pdPASS;
 8004bbe:	2001      	movs	r0, #1
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004bc0:	b25b      	sxtb	r3, r3
 8004bc2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	__asm volatile
 8004bc6:	f388 8811 	msr	BASEPRI, r8
}
 8004bca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm volatile
 8004bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bd2:	f383 8811 	msr	BASEPRI, r3
 8004bd6:	f3bf 8f6f 	isb	sy
 8004bda:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8004bde:	e7fe      	b.n	8004bde <xQueueGenericSendFromISR+0xb2>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004be0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004be2:	b90b      	cbnz	r3, 8004be8 <xQueueGenericSendFromISR+0xbc>
			xReturn = pdPASS;
 8004be4:	2001      	movs	r0, #1
 8004be6:	e7ce      	b.n	8004b86 <xQueueGenericSendFromISR+0x5a>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004be8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004bec:	f000 ff3c 	bl	8005a68 <xTaskRemoveFromEventList>
							if( pxHigherPriorityTaskWoken != NULL )
 8004bf0:	2800      	cmp	r0, #0
 8004bf2:	d0f7      	beq.n	8004be4 <xQueueGenericSendFromISR+0xb8>
 8004bf4:	2f00      	cmp	r7, #0
 8004bf6:	d0f5      	beq.n	8004be4 <xQueueGenericSendFromISR+0xb8>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004bf8:	2301      	movs	r3, #1
			xReturn = pdPASS;
 8004bfa:	4618      	mov	r0, r3
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004bfc:	603b      	str	r3, [r7, #0]
 8004bfe:	e7c2      	b.n	8004b86 <xQueueGenericSendFromISR+0x5a>

08004c00 <xQueueGiveFromISR>:
	configASSERT( pxQueue );
 8004c00:	b360      	cbz	r0, 8004c5c <xQueueGiveFromISR+0x5c>
	configASSERT( pxQueue->uxItemSize == 0 );
 8004c02:	6c03      	ldr	r3, [r0, #64]	; 0x40
{
 8004c04:	b570      	push	{r4, r5, r6, lr}
 8004c06:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 8004c08:	b143      	cbz	r3, 8004c1c <xQueueGiveFromISR+0x1c>
 8004c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c0e:	f383 8811 	msr	BASEPRI, r3
 8004c12:	f3bf 8f6f 	isb	sy
 8004c16:	f3bf 8f4f 	dsb	sy
 8004c1a:	e7fe      	b.n	8004c1a <xQueueGiveFromISR+0x1a>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8004c1c:	6803      	ldr	r3, [r0, #0]
 8004c1e:	460d      	mov	r5, r1
 8004c20:	b32b      	cbz	r3, 8004c6e <xQueueGiveFromISR+0x6e>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004c22:	f001 fc63 	bl	80064ec <vPortValidateInterruptPriority>
	__asm volatile
 8004c26:	f3ef 8611 	mrs	r6, BASEPRI
 8004c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c2e:	f383 8811 	msr	BASEPRI, r3
 8004c32:	f3bf 8f6f 	isb	sy
 8004c36:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004c3a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 8004c3c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8004c3e:	429a      	cmp	r2, r3
 8004c40:	d921      	bls.n	8004c86 <xQueueGiveFromISR+0x86>
			const int8_t cTxLock = pxQueue->cTxLock;
 8004c42:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004c46:	3301      	adds	r3, #1
			if( cTxLock == queueUNLOCKED )
 8004c48:	2aff      	cmp	r2, #255	; 0xff
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004c4a:	63a3      	str	r3, [r4, #56]	; 0x38
			const int8_t cTxLock = pxQueue->cTxLock;
 8004c4c:	b253      	sxtb	r3, r2
			if( cTxLock == queueUNLOCKED )
 8004c4e:	d01e      	beq.n	8004c8e <xQueueGiveFromISR+0x8e>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004c50:	3301      	adds	r3, #1
			xReturn = pdPASS;
 8004c52:	2001      	movs	r0, #1
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004c54:	b25b      	sxtb	r3, r3
 8004c56:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004c5a:	e015      	b.n	8004c88 <xQueueGiveFromISR+0x88>
	__asm volatile
 8004c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c60:	f383 8811 	msr	BASEPRI, r3
 8004c64:	f3bf 8f6f 	isb	sy
 8004c68:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8004c6c:	e7fe      	b.n	8004c6c <xQueueGiveFromISR+0x6c>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8004c6e:	6883      	ldr	r3, [r0, #8]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d0d6      	beq.n	8004c22 <xQueueGiveFromISR+0x22>
 8004c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c78:	f383 8811 	msr	BASEPRI, r3
 8004c7c:	f3bf 8f6f 	isb	sy
 8004c80:	f3bf 8f4f 	dsb	sy
 8004c84:	e7fe      	b.n	8004c84 <xQueueGiveFromISR+0x84>
			xReturn = errQUEUE_FULL;
 8004c86:	2000      	movs	r0, #0
	__asm volatile
 8004c88:	f386 8811 	msr	BASEPRI, r6
}
 8004c8c:	bd70      	pop	{r4, r5, r6, pc}
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004c8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004c90:	b90b      	cbnz	r3, 8004c96 <xQueueGiveFromISR+0x96>
			xReturn = pdPASS;
 8004c92:	2001      	movs	r0, #1
 8004c94:	e7f8      	b.n	8004c88 <xQueueGiveFromISR+0x88>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004c96:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004c9a:	f000 fee5 	bl	8005a68 <xTaskRemoveFromEventList>
							if( pxHigherPriorityTaskWoken != NULL )
 8004c9e:	2d00      	cmp	r5, #0
 8004ca0:	d0f7      	beq.n	8004c92 <xQueueGiveFromISR+0x92>
 8004ca2:	2800      	cmp	r0, #0
 8004ca4:	d0f5      	beq.n	8004c92 <xQueueGiveFromISR+0x92>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004ca6:	2301      	movs	r3, #1
			xReturn = pdPASS;
 8004ca8:	4618      	mov	r0, r3
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004caa:	602b      	str	r3, [r5, #0]
 8004cac:	e7ec      	b.n	8004c88 <xQueueGiveFromISR+0x88>
 8004cae:	bf00      	nop

08004cb0 <xQueueReceive>:
{
 8004cb0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004cb4:	b085      	sub	sp, #20
 8004cb6:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8004cb8:	2800      	cmp	r0, #0
 8004cba:	f000 80a0 	beq.w	8004dfe <xQueueReceive+0x14e>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004cbe:	460d      	mov	r5, r1
 8004cc0:	4604      	mov	r4, r0
 8004cc2:	2900      	cmp	r1, #0
 8004cc4:	d047      	beq.n	8004d56 <xQueueReceive+0xa6>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004cc6:	f000 ff79 	bl	8005bbc <xTaskGetSchedulerState>
 8004cca:	2800      	cmp	r0, #0
 8004ccc:	d04f      	beq.n	8004d6e <xQueueReceive+0xbe>
		taskENTER_CRITICAL();
 8004cce:	f001 faf1 	bl	80062b4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004cd2:	6ba6      	ldr	r6, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004cd4:	2e00      	cmp	r6, #0
 8004cd6:	d17d      	bne.n	8004dd4 <xQueueReceive+0x124>
				if( xTicksToWait == ( TickType_t ) 0 )
 8004cd8:	9b01      	ldr	r3, [sp, #4]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d035      	beq.n	8004d4a <xQueueReceive+0x9a>
		prvLockQueue( pxQueue );
 8004cde:	4637      	mov	r7, r6
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004ce0:	f104 0824 	add.w	r8, r4, #36	; 0x24
					portYIELD_WITHIN_API();
 8004ce4:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004ce8:	a802      	add	r0, sp, #8
 8004cea:	f000 ff07 	bl	8005afc <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8004cee:	f001 fb03 	bl	80062f8 <vPortExitCritical>
		vTaskSuspendAll();
 8004cf2:	f000 fc97 	bl	8005624 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004cf6:	f001 fadd 	bl	80062b4 <vPortEnterCritical>
 8004cfa:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8004cfe:	2bff      	cmp	r3, #255	; 0xff
 8004d00:	d101      	bne.n	8004d06 <xQueueReceive+0x56>
 8004d02:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
 8004d06:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8004d0a:	2bff      	cmp	r3, #255	; 0xff
 8004d0c:	d101      	bne.n	8004d12 <xQueueReceive+0x62>
 8004d0e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004d12:	f001 faf1 	bl	80062f8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004d16:	a901      	add	r1, sp, #4
 8004d18:	a802      	add	r0, sp, #8
 8004d1a:	f000 fefb 	bl	8005b14 <xTaskCheckForTimeOut>
 8004d1e:	2800      	cmp	r0, #0
 8004d20:	d131      	bne.n	8004d86 <xQueueReceive+0xd6>
	taskENTER_CRITICAL();
 8004d22:	f001 fac7 	bl	80062b4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004d26:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d039      	beq.n	8004da0 <xQueueReceive+0xf0>
	taskEXIT_CRITICAL();
 8004d2c:	f001 fae4 	bl	80062f8 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8004d30:	4620      	mov	r0, r4
 8004d32:	f7ff fc7b 	bl	800462c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004d36:	f000 fdc9 	bl	80058cc <xTaskResumeAll>
		taskENTER_CRITICAL();
 8004d3a:	f001 fabb 	bl	80062b4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004d3e:	6ba6      	ldr	r6, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004d40:	2e00      	cmp	r6, #0
 8004d42:	d147      	bne.n	8004dd4 <xQueueReceive+0x124>
				if( xTicksToWait == ( TickType_t ) 0 )
 8004d44:	9b01      	ldr	r3, [sp, #4]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d1d1      	bne.n	8004cee <xQueueReceive+0x3e>
					taskEXIT_CRITICAL();
 8004d4a:	f001 fad5 	bl	80062f8 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8004d4e:	2000      	movs	r0, #0
}
 8004d50:	b005      	add	sp, #20
 8004d52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004d56:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d0b4      	beq.n	8004cc6 <xQueueReceive+0x16>
	__asm volatile
 8004d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d60:	f383 8811 	msr	BASEPRI, r3
 8004d64:	f3bf 8f6f 	isb	sy
 8004d68:	f3bf 8f4f 	dsb	sy
 8004d6c:	e7fe      	b.n	8004d6c <xQueueReceive+0xbc>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004d6e:	9b01      	ldr	r3, [sp, #4]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d0ac      	beq.n	8004cce <xQueueReceive+0x1e>
 8004d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d78:	f383 8811 	msr	BASEPRI, r3
 8004d7c:	f3bf 8f6f 	isb	sy
 8004d80:	f3bf 8f4f 	dsb	sy
 8004d84:	e7fe      	b.n	8004d84 <xQueueReceive+0xd4>
			prvUnlockQueue( pxQueue );
 8004d86:	4620      	mov	r0, r4
 8004d88:	f7ff fc50 	bl	800462c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004d8c:	f000 fd9e 	bl	80058cc <xTaskResumeAll>
	taskENTER_CRITICAL();
 8004d90:	f001 fa90 	bl	80062b4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004d94:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d0d7      	beq.n	8004d4a <xQueueReceive+0x9a>
	taskEXIT_CRITICAL();
 8004d9a:	f001 faad 	bl	80062f8 <vPortExitCritical>
 8004d9e:	e7cc      	b.n	8004d3a <xQueueReceive+0x8a>
 8004da0:	f001 faaa 	bl	80062f8 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004da4:	9901      	ldr	r1, [sp, #4]
 8004da6:	4640      	mov	r0, r8
 8004da8:	f000 fe26 	bl	80059f8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004dac:	4620      	mov	r0, r4
 8004dae:	f7ff fc3d 	bl	800462c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004db2:	f000 fd8b 	bl	80058cc <xTaskResumeAll>
 8004db6:	2800      	cmp	r0, #0
 8004db8:	d1bf      	bne.n	8004d3a <xQueueReceive+0x8a>
					portYIELD_WITHIN_API();
 8004dba:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004dbe:	f8c9 3d04 	str.w	r3, [r9, #3332]	; 0xd04
 8004dc2:	f3bf 8f4f 	dsb	sy
 8004dc6:	f3bf 8f6f 	isb	sy
		taskENTER_CRITICAL();
 8004dca:	f001 fa73 	bl	80062b4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004dce:	6ba6      	ldr	r6, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004dd0:	2e00      	cmp	r6, #0
 8004dd2:	d0b7      	beq.n	8004d44 <xQueueReceive+0x94>
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004dd4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004dd6:	b152      	cbz	r2, 8004dee <xQueueReceive+0x13e>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004dd8:	68e1      	ldr	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004dda:	68a3      	ldr	r3, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004ddc:	4411      	add	r1, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004dde:	4299      	cmp	r1, r3
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004de0:	60e1      	str	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004de2:	d301      	bcc.n	8004de8 <xQueueReceive+0x138>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004de4:	6821      	ldr	r1, [r4, #0]
 8004de6:	60e1      	str	r1, [r4, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004de8:	4628      	mov	r0, r5
 8004dea:	f009 fa4b 	bl	800e284 <memcpy>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004dee:	3e01      	subs	r6, #1
 8004df0:	63a6      	str	r6, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004df2:	6923      	ldr	r3, [r4, #16]
 8004df4:	b963      	cbnz	r3, 8004e10 <xQueueReceive+0x160>
				taskEXIT_CRITICAL();
 8004df6:	f001 fa7f 	bl	80062f8 <vPortExitCritical>
				return pdPASS;
 8004dfa:	2001      	movs	r0, #1
 8004dfc:	e7a8      	b.n	8004d50 <xQueueReceive+0xa0>
 8004dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e02:	f383 8811 	msr	BASEPRI, r3
 8004e06:	f3bf 8f6f 	isb	sy
 8004e0a:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 8004e0e:	e7fe      	b.n	8004e0e <xQueueReceive+0x15e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004e10:	f104 0010 	add.w	r0, r4, #16
 8004e14:	f000 fe28 	bl	8005a68 <xTaskRemoveFromEventList>
 8004e18:	2800      	cmp	r0, #0
 8004e1a:	d0ec      	beq.n	8004df6 <xQueueReceive+0x146>
						queueYIELD_IF_USING_PREEMPTION();
 8004e1c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8004e20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e24:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8004e28:	f3bf 8f4f 	dsb	sy
 8004e2c:	f3bf 8f6f 	isb	sy
 8004e30:	e7e1      	b.n	8004df6 <xQueueReceive+0x146>
 8004e32:	bf00      	nop

08004e34 <xQueueSemaphoreTake>:
{
 8004e34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e36:	b085      	sub	sp, #20
 8004e38:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 8004e3a:	2800      	cmp	r0, #0
 8004e3c:	d055      	beq.n	8004eea <xQueueSemaphoreTake+0xb6>
	configASSERT( pxQueue->uxItemSize == 0 );
 8004e3e:	6c06      	ldr	r6, [r0, #64]	; 0x40
 8004e40:	4604      	mov	r4, r0
 8004e42:	b146      	cbz	r6, 8004e56 <xQueueSemaphoreTake+0x22>
 8004e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e48:	f383 8811 	msr	BASEPRI, r3
 8004e4c:	f3bf 8f6f 	isb	sy
 8004e50:	f3bf 8f4f 	dsb	sy
 8004e54:	e7fe      	b.n	8004e54 <xQueueSemaphoreTake+0x20>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004e56:	f000 feb1 	bl	8005bbc <xTaskGetSchedulerState>
 8004e5a:	4605      	mov	r5, r0
 8004e5c:	2800      	cmp	r0, #0
 8004e5e:	d04d      	beq.n	8004efc <xQueueSemaphoreTake+0xc8>
 8004e60:	4635      	mov	r5, r6
		taskENTER_CRITICAL();
 8004e62:	f001 fa27 	bl	80062b4 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004e66:	6ba3      	ldr	r3, [r4, #56]	; 0x38
		prvLockQueue( pxQueue );
 8004e68:	2700      	movs	r7, #0
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004e6a:	bb8b      	cbnz	r3, 8004ed0 <xQueueSemaphoreTake+0x9c>
				if( xTicksToWait == ( TickType_t ) 0 )
 8004e6c:	9b01      	ldr	r3, [sp, #4]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	f000 809b 	beq.w	8004faa <xQueueSemaphoreTake+0x176>
				else if( xEntryTimeSet == pdFALSE )
 8004e74:	2d00      	cmp	r5, #0
 8004e76:	d059      	beq.n	8004f2c <xQueueSemaphoreTake+0xf8>
		taskEXIT_CRITICAL();
 8004e78:	f001 fa3e 	bl	80062f8 <vPortExitCritical>
		vTaskSuspendAll();
 8004e7c:	f000 fbd2 	bl	8005624 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004e80:	f001 fa18 	bl	80062b4 <vPortEnterCritical>
 8004e84:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8004e88:	2bff      	cmp	r3, #255	; 0xff
 8004e8a:	d101      	bne.n	8004e90 <xQueueSemaphoreTake+0x5c>
 8004e8c:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
 8004e90:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8004e94:	2bff      	cmp	r3, #255	; 0xff
 8004e96:	d101      	bne.n	8004e9c <xQueueSemaphoreTake+0x68>
 8004e98:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004e9c:	f001 fa2c 	bl	80062f8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004ea0:	a901      	add	r1, sp, #4
 8004ea2:	a802      	add	r0, sp, #8
 8004ea4:	f000 fe36 	bl	8005b14 <xTaskCheckForTimeOut>
 8004ea8:	2800      	cmp	r0, #0
 8004eaa:	d133      	bne.n	8004f14 <xQueueSemaphoreTake+0xe0>
	taskENTER_CRITICAL();
 8004eac:	f001 fa02 	bl	80062b4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004eb0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d03e      	beq.n	8004f34 <xQueueSemaphoreTake+0x100>
	taskEXIT_CRITICAL();
 8004eb6:	f001 fa1f 	bl	80062f8 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8004eba:	4620      	mov	r0, r4
 8004ebc:	f7ff fbb6 	bl	800462c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004ec0:	f000 fd04 	bl	80058cc <xTaskResumeAll>
		taskENTER_CRITICAL();
 8004ec4:	f001 f9f6 	bl	80062b4 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004ec8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004eca:	2501      	movs	r5, #1
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d0cd      	beq.n	8004e6c <xQueueSemaphoreTake+0x38>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004ed0:	3b01      	subs	r3, #1
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004ed2:	6822      	ldr	r2, [r4, #0]
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004ed4:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004ed6:	2a00      	cmp	r2, #0
 8004ed8:	f000 8083 	beq.w	8004fe2 <xQueueSemaphoreTake+0x1ae>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004edc:	6923      	ldr	r3, [r4, #16]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d16e      	bne.n	8004fc0 <xQueueSemaphoreTake+0x18c>
				return pdPASS;
 8004ee2:	2601      	movs	r6, #1
				taskEXIT_CRITICAL();
 8004ee4:	f001 fa08 	bl	80062f8 <vPortExitCritical>
				return pdPASS;
 8004ee8:	e042      	b.n	8004f70 <xQueueSemaphoreTake+0x13c>
 8004eea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eee:	f383 8811 	msr	BASEPRI, r3
 8004ef2:	f3bf 8f6f 	isb	sy
 8004ef6:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 8004efa:	e7fe      	b.n	8004efa <xQueueSemaphoreTake+0xc6>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004efc:	9b01      	ldr	r3, [sp, #4]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d039      	beq.n	8004f76 <xQueueSemaphoreTake+0x142>
 8004f02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f06:	f383 8811 	msr	BASEPRI, r3
 8004f0a:	f3bf 8f6f 	isb	sy
 8004f0e:	f3bf 8f4f 	dsb	sy
 8004f12:	e7fe      	b.n	8004f12 <xQueueSemaphoreTake+0xde>
			prvUnlockQueue( pxQueue );
 8004f14:	4620      	mov	r0, r4
 8004f16:	f7ff fb89 	bl	800462c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004f1a:	f000 fcd7 	bl	80058cc <xTaskResumeAll>
	taskENTER_CRITICAL();
 8004f1e:	f001 f9c9 	bl	80062b4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004f22:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004f24:	b30b      	cbz	r3, 8004f6a <xQueueSemaphoreTake+0x136>
	taskEXIT_CRITICAL();
 8004f26:	f001 f9e7 	bl	80062f8 <vPortExitCritical>
	return xReturn;
 8004f2a:	e7cb      	b.n	8004ec4 <xQueueSemaphoreTake+0x90>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004f2c:	a802      	add	r0, sp, #8
 8004f2e:	f000 fde5 	bl	8005afc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004f32:	e7a1      	b.n	8004e78 <xQueueSemaphoreTake+0x44>
	taskEXIT_CRITICAL();
 8004f34:	f001 f9e0 	bl	80062f8 <vPortExitCritical>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004f38:	6823      	ldr	r3, [r4, #0]
 8004f3a:	b36b      	cbz	r3, 8004f98 <xQueueSemaphoreTake+0x164>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004f3c:	9901      	ldr	r1, [sp, #4]
 8004f3e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004f42:	f000 fd59 	bl	80059f8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004f46:	4620      	mov	r0, r4
 8004f48:	f7ff fb70 	bl	800462c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004f4c:	f000 fcbe 	bl	80058cc <xTaskResumeAll>
 8004f50:	2800      	cmp	r0, #0
 8004f52:	d1b7      	bne.n	8004ec4 <xQueueSemaphoreTake+0x90>
					portYIELD_WITHIN_API();
 8004f54:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8004f58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f5c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8004f60:	f3bf 8f4f 	dsb	sy
 8004f64:	f3bf 8f6f 	isb	sy
 8004f68:	e7ac      	b.n	8004ec4 <xQueueSemaphoreTake+0x90>
	taskEXIT_CRITICAL();
 8004f6a:	f001 f9c5 	bl	80062f8 <vPortExitCritical>
					if( xInheritanceOccurred != pdFALSE )
 8004f6e:	b926      	cbnz	r6, 8004f7a <xQueueSemaphoreTake+0x146>
}
 8004f70:	4630      	mov	r0, r6
 8004f72:	b005      	add	sp, #20
 8004f74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f76:	4606      	mov	r6, r0
 8004f78:	e773      	b.n	8004e62 <xQueueSemaphoreTake+0x2e>
						taskENTER_CRITICAL();
 8004f7a:	f001 f99b 	bl	80062b4 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8004f7e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004f80:	b119      	cbz	r1, 8004f8a <xQueueSemaphoreTake+0x156>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004f82:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004f84:	6819      	ldr	r1, [r3, #0]
 8004f86:	f1c1 0138 	rsb	r1, r1, #56	; 0x38
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004f8a:	68a0      	ldr	r0, [r4, #8]
				return errQUEUE_EMPTY;
 8004f8c:	2600      	movs	r6, #0
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004f8e:	f000 feb1 	bl	8005cf4 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 8004f92:	f001 f9b1 	bl	80062f8 <vPortExitCritical>
 8004f96:	e7eb      	b.n	8004f70 <xQueueSemaphoreTake+0x13c>
						taskENTER_CRITICAL();
 8004f98:	f001 f98c 	bl	80062b4 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004f9c:	68a0      	ldr	r0, [r4, #8]
 8004f9e:	f000 fe1d 	bl	8005bdc <xTaskPriorityInherit>
 8004fa2:	4606      	mov	r6, r0
						taskEXIT_CRITICAL();
 8004fa4:	f001 f9a8 	bl	80062f8 <vPortExitCritical>
 8004fa8:	e7c8      	b.n	8004f3c <xQueueSemaphoreTake+0x108>
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004faa:	2e00      	cmp	r6, #0
 8004fac:	d0f1      	beq.n	8004f92 <xQueueSemaphoreTake+0x15e>
 8004fae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fb2:	f383 8811 	msr	BASEPRI, r3
 8004fb6:	f3bf 8f6f 	isb	sy
 8004fba:	f3bf 8f4f 	dsb	sy
 8004fbe:	e7fe      	b.n	8004fbe <xQueueSemaphoreTake+0x18a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004fc0:	f104 0010 	add.w	r0, r4, #16
 8004fc4:	f000 fd50 	bl	8005a68 <xTaskRemoveFromEventList>
 8004fc8:	2800      	cmp	r0, #0
 8004fca:	d08a      	beq.n	8004ee2 <xQueueSemaphoreTake+0xae>
						queueYIELD_IF_USING_PREEMPTION();
 8004fcc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8004fd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fd4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8004fd8:	f3bf 8f4f 	dsb	sy
 8004fdc:	f3bf 8f6f 	isb	sy
 8004fe0:	e77f      	b.n	8004ee2 <xQueueSemaphoreTake+0xae>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8004fe2:	f000 fedb 	bl	8005d9c <pvTaskIncrementMutexHeldCount>
 8004fe6:	60a0      	str	r0, [r4, #8]
 8004fe8:	e778      	b.n	8004edc <xQueueSemaphoreTake+0xa8>
 8004fea:	bf00      	nop

08004fec <xQueueTakeMutexRecursive>:
		configASSERT( pxMutex );
 8004fec:	b1a8      	cbz	r0, 800501a <xQueueTakeMutexRecursive+0x2e>
	{
 8004fee:	b570      	push	{r4, r5, r6, lr}
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8004ff0:	6886      	ldr	r6, [r0, #8]
 8004ff2:	4604      	mov	r4, r0
 8004ff4:	460d      	mov	r5, r1
 8004ff6:	f000 fddb 	bl	8005bb0 <xTaskGetCurrentTaskHandle>
 8004ffa:	4286      	cmp	r6, r0
 8004ffc:	d008      	beq.n	8005010 <xQueueTakeMutexRecursive+0x24>
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8004ffe:	4629      	mov	r1, r5
 8005000:	4620      	mov	r0, r4
 8005002:	f7ff ff17 	bl	8004e34 <xQueueSemaphoreTake>
			if( xReturn != pdFAIL )
 8005006:	b110      	cbz	r0, 800500e <xQueueTakeMutexRecursive+0x22>
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8005008:	68e3      	ldr	r3, [r4, #12]
 800500a:	3301      	adds	r3, #1
 800500c:	60e3      	str	r3, [r4, #12]
	}
 800500e:	bd70      	pop	{r4, r5, r6, pc}
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8005010:	68e3      	ldr	r3, [r4, #12]
			xReturn = pdPASS;
 8005012:	2001      	movs	r0, #1
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8005014:	4403      	add	r3, r0
 8005016:	60e3      	str	r3, [r4, #12]
	}
 8005018:	bd70      	pop	{r4, r5, r6, pc}
 800501a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800501e:	f383 8811 	msr	BASEPRI, r3
 8005022:	f3bf 8f6f 	isb	sy
 8005026:	f3bf 8f4f 	dsb	sy
		configASSERT( pxMutex );
 800502a:	e7fe      	b.n	800502a <xQueueTakeMutexRecursive+0x3e>

0800502c <xQueueReceiveFromISR>:
{
 800502c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8005030:	b310      	cbz	r0, 8005078 <xQueueReceiveFromISR+0x4c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005032:	460e      	mov	r6, r1
 8005034:	4604      	mov	r4, r0
 8005036:	4617      	mov	r7, r2
 8005038:	b191      	cbz	r1, 8005060 <xQueueReceiveFromISR+0x34>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800503a:	f001 fa57 	bl	80064ec <vPortValidateInterruptPriority>
	__asm volatile
 800503e:	f3ef 8911 	mrs	r9, BASEPRI
 8005042:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005046:	f383 8811 	msr	BASEPRI, r3
 800504a:	f3bf 8f6f 	isb	sy
 800504e:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005052:	6ba5      	ldr	r5, [r4, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005054:	b9cd      	cbnz	r5, 800508a <xQueueReceiveFromISR+0x5e>
			xReturn = pdFAIL;
 8005056:	4628      	mov	r0, r5
	__asm volatile
 8005058:	f389 8811 	msr	BASEPRI, r9
}
 800505c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005060:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005062:	2b00      	cmp	r3, #0
 8005064:	d0e9      	beq.n	800503a <xQueueReceiveFromISR+0xe>
	__asm volatile
 8005066:	f04f 0350 	mov.w	r3, #80	; 0x50
 800506a:	f383 8811 	msr	BASEPRI, r3
 800506e:	f3bf 8f6f 	isb	sy
 8005072:	f3bf 8f4f 	dsb	sy
 8005076:	e7fe      	b.n	8005076 <xQueueReceiveFromISR+0x4a>
 8005078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800507c:	f383 8811 	msr	BASEPRI, r3
 8005080:	f3bf 8f6f 	isb	sy
 8005084:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8005088:	e7fe      	b.n	8005088 <xQueueReceiveFromISR+0x5c>
			const int8_t cRxLock = pxQueue->cRxLock;
 800508a:	f894 8044 	ldrb.w	r8, [r4, #68]	; 0x44
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800508e:	6c22      	ldr	r2, [r4, #64]	; 0x40
			const int8_t cRxLock = pxQueue->cRxLock;
 8005090:	fa4f f888 	sxtb.w	r8, r8
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005094:	b142      	cbz	r2, 80050a8 <xQueueReceiveFromISR+0x7c>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005096:	68e1      	ldr	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005098:	68a3      	ldr	r3, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800509a:	4411      	add	r1, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800509c:	4299      	cmp	r1, r3
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800509e:	60e1      	str	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80050a0:	d215      	bcs.n	80050ce <xQueueReceiveFromISR+0xa2>
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80050a2:	4630      	mov	r0, r6
 80050a4:	f009 f8ee 	bl	800e284 <memcpy>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80050a8:	3d01      	subs	r5, #1
			if( cRxLock == queueUNLOCKED )
 80050aa:	f1b8 3fff 	cmp.w	r8, #4294967295
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80050ae:	63a5      	str	r5, [r4, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 80050b0:	d009      	beq.n	80050c6 <xQueueReceiveFromISR+0x9a>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80050b2:	f108 0301 	add.w	r3, r8, #1
			xReturn = pdPASS;
 80050b6:	2001      	movs	r0, #1
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80050b8:	b25b      	sxtb	r3, r3
 80050ba:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	__asm volatile
 80050be:	f389 8811 	msr	BASEPRI, r9
}
 80050c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80050c6:	6923      	ldr	r3, [r4, #16]
 80050c8:	b923      	cbnz	r3, 80050d4 <xQueueReceiveFromISR+0xa8>
			xReturn = pdPASS;
 80050ca:	2001      	movs	r0, #1
 80050cc:	e7c4      	b.n	8005058 <xQueueReceiveFromISR+0x2c>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80050ce:	6821      	ldr	r1, [r4, #0]
 80050d0:	60e1      	str	r1, [r4, #12]
 80050d2:	e7e6      	b.n	80050a2 <xQueueReceiveFromISR+0x76>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80050d4:	f104 0010 	add.w	r0, r4, #16
 80050d8:	f000 fcc6 	bl	8005a68 <xTaskRemoveFromEventList>
						if( pxHigherPriorityTaskWoken != NULL )
 80050dc:	2f00      	cmp	r7, #0
 80050de:	d0f4      	beq.n	80050ca <xQueueReceiveFromISR+0x9e>
 80050e0:	2800      	cmp	r0, #0
 80050e2:	d0f2      	beq.n	80050ca <xQueueReceiveFromISR+0x9e>
							*pxHigherPriorityTaskWoken = pdTRUE;
 80050e4:	2301      	movs	r3, #1
			xReturn = pdPASS;
 80050e6:	4618      	mov	r0, r3
							*pxHigherPriorityTaskWoken = pdTRUE;
 80050e8:	603b      	str	r3, [r7, #0]
 80050ea:	e7b5      	b.n	8005058 <xQueueReceiveFromISR+0x2c>

080050ec <vQueueDelete>:
	configASSERT( pxQueue );
 80050ec:	b180      	cbz	r0, 8005110 <vQueueDelete+0x24>
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80050ee:	2300      	movs	r3, #0
{
 80050f0:	b410      	push	{r4}
 80050f2:	4c12      	ldr	r4, [pc, #72]	; (800513c <vQueueDelete+0x50>)
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80050f4:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
 80050f8:	6851      	ldr	r1, [r2, #4]
 80050fa:	4288      	cmp	r0, r1
 80050fc:	d015      	beq.n	800512a <vQueueDelete+0x3e>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80050fe:	3301      	adds	r3, #1
 8005100:	2b08      	cmp	r3, #8
 8005102:	d1f7      	bne.n	80050f4 <vQueueDelete+0x8>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005104:	f890 3046 	ldrb.w	r3, [r0, #70]	; 0x46
 8005108:	b15b      	cbz	r3, 8005122 <vQueueDelete+0x36>
}
 800510a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800510e:	4770      	bx	lr
	__asm volatile
 8005110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005114:	f383 8811 	msr	BASEPRI, r3
 8005118:	f3bf 8f6f 	isb	sy
 800511c:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8005120:	e7fe      	b.n	8005120 <vQueueDelete+0x34>
}
 8005122:	f85d 4b04 	ldr.w	r4, [sp], #4
			vPortFree( pxQueue );
 8005126:	f001 bad7 	b.w	80066d8 <vPortFree>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800512a:	2100      	movs	r1, #0
 800512c:	f844 1033 	str.w	r1, [r4, r3, lsl #3]
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005130:	f890 3046 	ldrb.w	r3, [r0, #70]	; 0x46

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8005134:	6051      	str	r1, [r2, #4]
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005136:	2b00      	cmp	r3, #0
 8005138:	d1e7      	bne.n	800510a <vQueueDelete+0x1e>
 800513a:	e7f2      	b.n	8005122 <vQueueDelete+0x36>
 800513c:	24001be8 	.word	0x24001be8

08005140 <vQueueAddToRegistry>:
	{
 8005140:	b410      	push	{r4}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005142:	2300      	movs	r3, #0
 8005144:	4c08      	ldr	r4, [pc, #32]	; (8005168 <vQueueAddToRegistry+0x28>)
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005146:	f854 2033 	ldr.w	r2, [r4, r3, lsl #3]
 800514a:	b12a      	cbz	r2, 8005158 <vQueueAddToRegistry+0x18>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800514c:	3301      	adds	r3, #1
 800514e:	2b08      	cmp	r3, #8
 8005150:	d1f9      	bne.n	8005146 <vQueueAddToRegistry+0x6>
	}
 8005152:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005156:	4770      	bx	lr
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005158:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800515c:	f844 1033 	str.w	r1, [r4, r3, lsl #3]
	}
 8005160:	f85d 4b04 	ldr.w	r4, [sp], #4
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005164:	6050      	str	r0, [r2, #4]
	}
 8005166:	4770      	bx	lr
 8005168:	24001be8 	.word	0x24001be8

0800516c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800516c:	b570      	push	{r4, r5, r6, lr}
 800516e:	4604      	mov	r4, r0
 8005170:	460e      	mov	r6, r1
 8005172:	4615      	mov	r5, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005174:	f001 f89e 	bl	80062b4 <vPortEnterCritical>
 8005178:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800517c:	2bff      	cmp	r3, #255	; 0xff
 800517e:	d102      	bne.n	8005186 <vQueueWaitForMessageRestricted+0x1a>
 8005180:	2300      	movs	r3, #0
 8005182:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8005186:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800518a:	2bff      	cmp	r3, #255	; 0xff
 800518c:	d102      	bne.n	8005194 <vQueueWaitForMessageRestricted+0x28>
 800518e:	2300      	movs	r3, #0
 8005190:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005194:	f001 f8b0 	bl	80062f8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005198:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800519a:	b123      	cbz	r3, 80051a6 <vQueueWaitForMessageRestricted+0x3a>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800519c:	4620      	mov	r0, r4
	}
 800519e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 80051a2:	f7ff ba43 	b.w	800462c <prvUnlockQueue>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80051a6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80051aa:	462a      	mov	r2, r5
 80051ac:	4631      	mov	r1, r6
 80051ae:	f000 fc3d 	bl	8005a2c <vTaskPlaceOnEventListRestricted>
		prvUnlockQueue( pxQueue );
 80051b2:	4620      	mov	r0, r4
	}
 80051b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 80051b8:	f7ff ba38 	b.w	800462c <prvUnlockQueue>

080051bc <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80051bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80051c0:	4605      	mov	r5, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80051c2:	f001 f877 	bl	80062b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80051c6:	4a34      	ldr	r2, [pc, #208]	; (8005298 <prvAddNewTaskToReadyList+0xdc>)
		if( pxCurrentTCB == NULL )
 80051c8:	4e34      	ldr	r6, [pc, #208]	; (800529c <prvAddNewTaskToReadyList+0xe0>)
		uxCurrentNumberOfTasks++;
 80051ca:	6813      	ldr	r3, [r2, #0]
 80051cc:	3301      	adds	r3, #1
 80051ce:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80051d0:	6833      	ldr	r3, [r6, #0]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d032      	beq.n	800523c <prvAddNewTaskToReadyList+0x80>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80051d6:	4c32      	ldr	r4, [pc, #200]	; (80052a0 <prvAddNewTaskToReadyList+0xe4>)
 80051d8:	6823      	ldr	r3, [r4, #0]
 80051da:	b33b      	cbz	r3, 800522c <prvAddNewTaskToReadyList+0x70>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80051dc:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 80051de:	4f31      	ldr	r7, [pc, #196]	; (80052a4 <prvAddNewTaskToReadyList+0xe8>)
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80051e0:	4a31      	ldr	r2, [pc, #196]	; (80052a8 <prvAddNewTaskToReadyList+0xec>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80051e2:	4932      	ldr	r1, [pc, #200]	; (80052ac <prvAddNewTaskToReadyList+0xf0>)
		uxTaskNumber++;
 80051e4:	6813      	ldr	r3, [r2, #0]
 80051e6:	3301      	adds	r3, #1
 80051e8:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80051ea:	646b      	str	r3, [r5, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 80051ec:	680b      	ldr	r3, [r1, #0]
 80051ee:	4283      	cmp	r3, r0
 80051f0:	d200      	bcs.n	80051f4 <prvAddNewTaskToReadyList+0x38>
 80051f2:	6008      	str	r0, [r1, #0]
 80051f4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80051f8:	1d29      	adds	r1, r5, #4
 80051fa:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 80051fe:	f7ff f997 	bl	8004530 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005202:	f001 f879 	bl	80062f8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005206:	6823      	ldr	r3, [r4, #0]
 8005208:	b173      	cbz	r3, 8005228 <prvAddNewTaskToReadyList+0x6c>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800520a:	6832      	ldr	r2, [r6, #0]
 800520c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800520e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005210:	429a      	cmp	r2, r3
 8005212:	d209      	bcs.n	8005228 <prvAddNewTaskToReadyList+0x6c>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005214:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005218:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800521c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8005220:	f3bf 8f4f 	dsb	sy
 8005224:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005228:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800522c:	6833      	ldr	r3, [r6, #0]
 800522e:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8005230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005232:	4f1c      	ldr	r7, [pc, #112]	; (80052a4 <prvAddNewTaskToReadyList+0xe8>)
 8005234:	4283      	cmp	r3, r0
 8005236:	d8d3      	bhi.n	80051e0 <prvAddNewTaskToReadyList+0x24>
					pxCurrentTCB = pxNewTCB;
 8005238:	6035      	str	r5, [r6, #0]
 800523a:	e7d1      	b.n	80051e0 <prvAddNewTaskToReadyList+0x24>
			pxCurrentTCB = pxNewTCB;
 800523c:	6035      	str	r5, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800523e:	6813      	ldr	r3, [r2, #0]
 8005240:	2b01      	cmp	r3, #1
 8005242:	d003      	beq.n	800524c <prvAddNewTaskToReadyList+0x90>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005244:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8005246:	4f17      	ldr	r7, [pc, #92]	; (80052a4 <prvAddNewTaskToReadyList+0xe8>)
 8005248:	4c15      	ldr	r4, [pc, #84]	; (80052a0 <prvAddNewTaskToReadyList+0xe4>)
 800524a:	e7c9      	b.n	80051e0 <prvAddNewTaskToReadyList+0x24>
 800524c:	4f15      	ldr	r7, [pc, #84]	; (80052a4 <prvAddNewTaskToReadyList+0xe8>)
 800524e:	463c      	mov	r4, r7
 8005250:	f507 688c 	add.w	r8, r7, #1120	; 0x460
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005254:	4620      	mov	r0, r4
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005256:	3414      	adds	r4, #20
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005258:	f7ff f95a 	bl	8004510 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800525c:	45a0      	cmp	r8, r4
 800525e:	d1f9      	bne.n	8005254 <prvAddNewTaskToReadyList+0x98>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005260:	f8df 9060 	ldr.w	r9, [pc, #96]	; 80052c4 <prvAddNewTaskToReadyList+0x108>
	vListInitialise( &xDelayedTaskList2 );
 8005264:	f8df 8060 	ldr.w	r8, [pc, #96]	; 80052c8 <prvAddNewTaskToReadyList+0x10c>
	vListInitialise( &xDelayedTaskList1 );
 8005268:	4648      	mov	r0, r9
 800526a:	4c0d      	ldr	r4, [pc, #52]	; (80052a0 <prvAddNewTaskToReadyList+0xe4>)
 800526c:	f7ff f950 	bl	8004510 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005270:	4640      	mov	r0, r8
 8005272:	f7ff f94d 	bl	8004510 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005276:	480e      	ldr	r0, [pc, #56]	; (80052b0 <prvAddNewTaskToReadyList+0xf4>)
 8005278:	f7ff f94a 	bl	8004510 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800527c:	480d      	ldr	r0, [pc, #52]	; (80052b4 <prvAddNewTaskToReadyList+0xf8>)
 800527e:	f7ff f947 	bl	8004510 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005282:	480d      	ldr	r0, [pc, #52]	; (80052b8 <prvAddNewTaskToReadyList+0xfc>)
 8005284:	f7ff f944 	bl	8004510 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005288:	4b0c      	ldr	r3, [pc, #48]	; (80052bc <prvAddNewTaskToReadyList+0x100>)
		prvAddTaskToReadyList( pxNewTCB );
 800528a:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
	pxDelayedTaskList = &xDelayedTaskList1;
 800528c:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005290:	4b0b      	ldr	r3, [pc, #44]	; (80052c0 <prvAddNewTaskToReadyList+0x104>)
 8005292:	f8c3 8000 	str.w	r8, [r3]
}
 8005296:	e7a3      	b.n	80051e0 <prvAddNewTaskToReadyList+0x24>
 8005298:	24002094 	.word	0x24002094
 800529c:	24001c28 	.word	0x24001c28
 80052a0:	240020f0 	.word	0x240020f0
 80052a4:	24001c34 	.word	0x24001c34
 80052a8:	240020a0 	.word	0x240020a0
 80052ac:	240020a4 	.word	0x240020a4
 80052b0:	240020dc 	.word	0x240020dc
 80052b4:	24002108 	.word	0x24002108
 80052b8:	240020f4 	.word	0x240020f4
 80052bc:	24001c2c 	.word	0x24001c2c
 80052c0:	24001c30 	.word	0x24001c30
 80052c4:	240020a8 	.word	0x240020a8
 80052c8:	240020bc 	.word	0x240020bc

080052cc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80052cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80052ce:	4b15      	ldr	r3, [pc, #84]	; (8005324 <prvAddCurrentTaskToDelayedList+0x58>)
{
 80052d0:	4604      	mov	r4, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80052d2:	4e15      	ldr	r6, [pc, #84]	; (8005328 <prvAddCurrentTaskToDelayedList+0x5c>)
{
 80052d4:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 80052d6:	681d      	ldr	r5, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80052d8:	6833      	ldr	r3, [r6, #0]
 80052da:	1d18      	adds	r0, r3, #4
 80052dc:	f7ff f950 	bl	8004580 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80052e0:	1c63      	adds	r3, r4, #1
 80052e2:	d100      	bne.n	80052e6 <prvAddCurrentTaskToDelayedList+0x1a>
 80052e4:	b9bf      	cbnz	r7, 8005316 <prvAddCurrentTaskToDelayedList+0x4a>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 80052e6:	192d      	adds	r5, r5, r4

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80052e8:	6833      	ldr	r3, [r6, #0]
 80052ea:	605d      	str	r5, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 80052ec:	d307      	bcc.n	80052fe <prvAddCurrentTaskToDelayedList+0x32>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80052ee:	4b0f      	ldr	r3, [pc, #60]	; (800532c <prvAddCurrentTaskToDelayedList+0x60>)
 80052f0:	6818      	ldr	r0, [r3, #0]
 80052f2:	6831      	ldr	r1, [r6, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80052f4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80052f8:	3104      	adds	r1, #4
 80052fa:	f7ff b929 	b.w	8004550 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80052fe:	4b0c      	ldr	r3, [pc, #48]	; (8005330 <prvAddCurrentTaskToDelayedList+0x64>)
 8005300:	6818      	ldr	r0, [r3, #0]
 8005302:	6831      	ldr	r1, [r6, #0]
 8005304:	3104      	adds	r1, #4
 8005306:	f7ff f923 	bl	8004550 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800530a:	4b0a      	ldr	r3, [pc, #40]	; (8005334 <prvAddCurrentTaskToDelayedList+0x68>)
 800530c:	681a      	ldr	r2, [r3, #0]
 800530e:	42aa      	cmp	r2, r5
 8005310:	d900      	bls.n	8005314 <prvAddCurrentTaskToDelayedList+0x48>
					xNextTaskUnblockTime = xTimeToWake;
 8005312:	601d      	str	r5, [r3, #0]
}
 8005314:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005316:	6831      	ldr	r1, [r6, #0]
 8005318:	4807      	ldr	r0, [pc, #28]	; (8005338 <prvAddCurrentTaskToDelayedList+0x6c>)
 800531a:	3104      	adds	r1, #4
}
 800531c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005320:	f7ff b906 	b.w	8004530 <vListInsertEnd>
 8005324:	2400211c 	.word	0x2400211c
 8005328:	24001c28 	.word	0x24001c28
 800532c:	24001c30 	.word	0x24001c30
 8005330:	24001c2c 	.word	0x24001c2c
 8005334:	240020d0 	.word	0x240020d0
 8005338:	240020f4 	.word	0x240020f4

0800533c <prvDeleteTCB>:
	{
 800533c:	b510      	push	{r4, lr}
 800533e:	4604      	mov	r4, r0
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005340:	3054      	adds	r0, #84	; 0x54
 8005342:	f008 feed 	bl	800e120 <_reclaim_reent>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005346:	f894 30a5 	ldrb.w	r3, [r4, #165]	; 0xa5
 800534a:	b163      	cbz	r3, 8005366 <prvDeleteTCB+0x2a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800534c:	2b01      	cmp	r3, #1
 800534e:	d013      	beq.n	8005378 <prvDeleteTCB+0x3c>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005350:	2b02      	cmp	r3, #2
 8005352:	d010      	beq.n	8005376 <prvDeleteTCB+0x3a>
 8005354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005358:	f383 8811 	msr	BASEPRI, r3
 800535c:	f3bf 8f6f 	isb	sy
 8005360:	f3bf 8f4f 	dsb	sy
 8005364:	e7fe      	b.n	8005364 <prvDeleteTCB+0x28>
				vPortFree( pxTCB->pxStack );
 8005366:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8005368:	f001 f9b6 	bl	80066d8 <vPortFree>
				vPortFree( pxTCB );
 800536c:	4620      	mov	r0, r4
	}
 800536e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 8005372:	f001 b9b1 	b.w	80066d8 <vPortFree>
	}
 8005376:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 8005378:	4620      	mov	r0, r4
	}
 800537a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 800537e:	f001 b9ab 	b.w	80066d8 <vPortFree>
 8005382:	bf00      	nop

08005384 <prvIdleTask>:
{
 8005384:	4c15      	ldr	r4, [pc, #84]	; (80053dc <prvIdleTask+0x58>)
				taskYIELD();
 8005386:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
 800538a:	4e15      	ldr	r6, [pc, #84]	; (80053e0 <prvIdleTask+0x5c>)
 800538c:	f04f 5880 	mov.w	r8, #268435456	; 0x10000000
 8005390:	4d14      	ldr	r5, [pc, #80]	; (80053e4 <prvIdleTask+0x60>)
 8005392:	f8df a054 	ldr.w	sl, [pc, #84]	; 80053e8 <prvIdleTask+0x64>
{
 8005396:	b580      	push	{r7, lr}
 8005398:	e011      	b.n	80053be <prvIdleTask+0x3a>
			taskENTER_CRITICAL();
 800539a:	f000 ff8b 	bl	80062b4 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800539e:	68f3      	ldr	r3, [r6, #12]
 80053a0:	68df      	ldr	r7, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80053a2:	1d38      	adds	r0, r7, #4
 80053a4:	f7ff f8ec 	bl	8004580 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80053a8:	682b      	ldr	r3, [r5, #0]
 80053aa:	3b01      	subs	r3, #1
 80053ac:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 80053ae:	6823      	ldr	r3, [r4, #0]
 80053b0:	3b01      	subs	r3, #1
 80053b2:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 80053b4:	f000 ffa0 	bl	80062f8 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 80053b8:	4638      	mov	r0, r7
 80053ba:	f7ff ffbf 	bl	800533c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80053be:	6823      	ldr	r3, [r4, #0]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d1ea      	bne.n	800539a <prvIdleTask+0x16>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80053c4:	f8da 3000 	ldr.w	r3, [sl]
 80053c8:	2b01      	cmp	r3, #1
 80053ca:	d9f8      	bls.n	80053be <prvIdleTask+0x3a>
				taskYIELD();
 80053cc:	f8c9 8d04 	str.w	r8, [r9, #3332]	; 0xd04
 80053d0:	f3bf 8f4f 	dsb	sy
 80053d4:	f3bf 8f6f 	isb	sy
 80053d8:	e7f1      	b.n	80053be <prvIdleTask+0x3a>
 80053da:	bf00      	nop
 80053dc:	24002098 	.word	0x24002098
 80053e0:	24002108 	.word	0x24002108
 80053e4:	24002094 	.word	0x24002094
 80053e8:	24001c34 	.word	0x24001c34

080053ec <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80053ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80053f0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80053f2:	ea4f 0982 	mov.w	r9, r2, lsl #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80053f6:	4606      	mov	r6, r0
 80053f8:	460d      	mov	r5, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80053fa:	464a      	mov	r2, r9
 80053fc:	21a5      	movs	r1, #165	; 0xa5
 80053fe:	6b20      	ldr	r0, [r4, #48]	; 0x30
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8005400:	461f      	mov	r7, r3
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005402:	f1a9 0904 	sub.w	r9, r9, #4
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8005406:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800540a:	f008 fe70 	bl	800e0ee <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800540e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005410:	444b      	add	r3, r9
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005412:	f023 0907 	bic.w	r9, r3, #7
	if( pcName != NULL )
 8005416:	2d00      	cmp	r5, #0
 8005418:	d043      	beq.n	80054a2 <prvInitialiseNewTask.constprop.0+0xb6>
 800541a:	f105 3cff 	add.w	ip, r5, #4294967295
 800541e:	f105 030f 	add.w	r3, r5, #15
 8005422:	f104 0e33 	add.w	lr, r4, #51	; 0x33
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005426:	f81c 5f01 	ldrb.w	r5, [ip, #1]!
 800542a:	f80e 5f01 	strb.w	r5, [lr, #1]!
			if( pcName[ x ] == ( char ) 0x00 )
 800542e:	b10d      	cbz	r5, 8005434 <prvInitialiseNewTask.constprop.0+0x48>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005430:	459c      	cmp	ip, r3
 8005432:	d1f8      	bne.n	8005426 <prvInitialiseNewTask.constprop.0+0x3a>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005434:	2300      	movs	r3, #0
 8005436:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800543a:	9d08      	ldr	r5, [sp, #32]
		pxNewTCB->uxMutexesHeld = 0;
 800543c:	f04f 0a00 	mov.w	sl, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005440:	1d20      	adds	r0, r4, #4
 8005442:	2d37      	cmp	r5, #55	; 0x37
		pxNewTCB->uxMutexesHeld = 0;
 8005444:	f8c4 a050 	str.w	sl, [r4, #80]	; 0x50
 8005448:	bf28      	it	cs
 800544a:	2537      	movcs	r5, #55	; 0x37
	pxNewTCB->uxPriority = uxPriority;
 800544c:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800544e:	64e5      	str	r5, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005450:	f1c5 0538 	rsb	r5, r5, #56	; 0x38
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005454:	f7ff f868 	bl	8004528 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005458:	f104 0018 	add.w	r0, r4, #24
 800545c:	f7ff f864 	bl	8004528 <vListInitialiseItem>
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005460:	4651      	mov	r1, sl
 8005462:	224c      	movs	r2, #76	; 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005464:	61a5      	str	r5, [r4, #24]
		pxNewTCB->ulNotifiedValue = 0;
 8005466:	f8c4 a0a0 	str.w	sl, [r4, #160]	; 0xa0
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800546a:	f104 0054 	add.w	r0, r4, #84	; 0x54
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800546e:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005470:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005472:	f884 a0a4 	strb.w	sl, [r4, #164]	; 0xa4
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005476:	f008 fe3a 	bl	800e0ee <memset>
 800547a:	4b0b      	ldr	r3, [pc, #44]	; (80054a8 <prvInitialiseNewTask.constprop.0+0xbc>)
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800547c:	463a      	mov	r2, r7
 800547e:	4631      	mov	r1, r6
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005480:	f103 0568 	add.w	r5, r3, #104	; 0x68
 8005484:	65a3      	str	r3, [r4, #88]	; 0x58
 8005486:	33d0      	adds	r3, #208	; 0xd0
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005488:	4648      	mov	r0, r9
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800548a:	65e5      	str	r5, [r4, #92]	; 0x5c
 800548c:	6623      	str	r3, [r4, #96]	; 0x60
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800548e:	f000 fee5 	bl	800625c <pxPortInitialiseStack>
 8005492:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 8005494:	f1b8 0f00 	cmp.w	r8, #0
 8005498:	d001      	beq.n	800549e <prvInitialiseNewTask.constprop.0+0xb2>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800549a:	f8c8 4000 	str.w	r4, [r8]
}
 800549e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80054a2:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
 80054a6:	e7c8      	b.n	800543a <prvInitialiseNewTask.constprop.0+0x4e>
 80054a8:	240106b4 	.word	0x240106b4

080054ac <xTaskCreateStatic>:
	{
 80054ac:	b530      	push	{r4, r5, lr}
 80054ae:	b087      	sub	sp, #28
 80054b0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 80054b2:	b1c4      	cbz	r4, 80054e6 <xTaskCreateStatic+0x3a>
		configASSERT( pxTaskBuffer != NULL );
 80054b4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80054b6:	b16d      	cbz	r5, 80054d4 <xTaskCreateStatic+0x28>
			volatile size_t xSize = sizeof( StaticTask_t );
 80054b8:	25a8      	movs	r5, #168	; 0xa8
 80054ba:	9505      	str	r5, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 80054bc:	9d05      	ldr	r5, [sp, #20]
 80054be:	2da8      	cmp	r5, #168	; 0xa8
 80054c0:	d01a      	beq.n	80054f8 <xTaskCreateStatic+0x4c>
 80054c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054c6:	f383 8811 	msr	BASEPRI, r3
 80054ca:	f3bf 8f6f 	isb	sy
 80054ce:	f3bf 8f4f 	dsb	sy
 80054d2:	e7fe      	b.n	80054d2 <xTaskCreateStatic+0x26>
 80054d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054d8:	f383 8811 	msr	BASEPRI, r3
 80054dc:	f3bf 8f6f 	isb	sy
 80054e0:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 80054e4:	e7fe      	b.n	80054e4 <xTaskCreateStatic+0x38>
 80054e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054ea:	f383 8811 	msr	BASEPRI, r3
 80054ee:	f3bf 8f6f 	isb	sy
 80054f2:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 80054f6:	e7fe      	b.n	80054f6 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80054f8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80054fa:	632c      	str	r4, [r5, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80054fc:	2402      	movs	r4, #2
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80054fe:	9502      	str	r5, [sp, #8]
 8005500:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8005502:	9500      	str	r5, [sp, #0]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005504:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005506:	f885 40a5 	strb.w	r4, [r5, #165]	; 0xa5
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800550a:	ac04      	add	r4, sp, #16
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800550c:	9d05      	ldr	r5, [sp, #20]
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800550e:	9401      	str	r4, [sp, #4]
 8005510:	f7ff ff6c 	bl	80053ec <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005514:	980c      	ldr	r0, [sp, #48]	; 0x30
 8005516:	f7ff fe51 	bl	80051bc <prvAddNewTaskToReadyList>
	}
 800551a:	9804      	ldr	r0, [sp, #16]
 800551c:	b007      	add	sp, #28
 800551e:	bd30      	pop	{r4, r5, pc}

08005520 <xTaskCreate>:
	{
 8005520:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005524:	4607      	mov	r7, r0
 8005526:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005528:	0090      	lsls	r0, r2, #2
	{
 800552a:	4615      	mov	r5, r2
 800552c:	4688      	mov	r8, r1
 800552e:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005530:	f001 f83c 	bl	80065ac <pvPortMalloc>
			if( pxStack != NULL )
 8005534:	b1d8      	cbz	r0, 800556e <xTaskCreate+0x4e>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005536:	4604      	mov	r4, r0
 8005538:	20a8      	movs	r0, #168	; 0xa8
 800553a:	f001 f837 	bl	80065ac <pvPortMalloc>
				if( pxNewTCB != NULL )
 800553e:	4606      	mov	r6, r0
 8005540:	b1d0      	cbz	r0, 8005578 <xTaskCreate+0x58>
					pxNewTCB->pxStack = pxStack;
 8005542:	6304      	str	r4, [r0, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005544:	2400      	movs	r4, #0
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005546:	464b      	mov	r3, r9
 8005548:	462a      	mov	r2, r5
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800554a:	f886 40a5 	strb.w	r4, [r6, #165]	; 0xa5
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800554e:	4641      	mov	r1, r8
 8005550:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8005552:	4638      	mov	r0, r7
 8005554:	9602      	str	r6, [sp, #8]
 8005556:	9401      	str	r4, [sp, #4]
 8005558:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800555a:	9400      	str	r4, [sp, #0]
 800555c:	f7ff ff46 	bl	80053ec <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005560:	4630      	mov	r0, r6
 8005562:	f7ff fe2b 	bl	80051bc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005566:	2001      	movs	r0, #1
	}
 8005568:	b005      	add	sp, #20
 800556a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800556e:	f04f 30ff 	mov.w	r0, #4294967295
	}
 8005572:	b005      	add	sp, #20
 8005574:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 8005578:	4620      	mov	r0, r4
 800557a:	f001 f8ad 	bl	80066d8 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800557e:	f04f 30ff 	mov.w	r0, #4294967295
 8005582:	e7f1      	b.n	8005568 <xTaskCreate+0x48>

08005584 <vTaskStartScheduler>:
{
 8005584:	b510      	push	{r4, lr}
 8005586:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005588:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800558a:	aa07      	add	r2, sp, #28
 800558c:	a906      	add	r1, sp, #24
 800558e:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005590:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005594:	f7fe ff9c 	bl	80044d0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005598:	4623      	mov	r3, r4
 800559a:	9a07      	ldr	r2, [sp, #28]
 800559c:	9400      	str	r4, [sp, #0]
 800559e:	e9dd 0105 	ldrd	r0, r1, [sp, #20]
 80055a2:	e9cd 1001 	strd	r1, r0, [sp, #4]
 80055a6:	4918      	ldr	r1, [pc, #96]	; (8005608 <vTaskStartScheduler+0x84>)
 80055a8:	4818      	ldr	r0, [pc, #96]	; (800560c <vTaskStartScheduler+0x88>)
 80055aa:	f7ff ff7f 	bl	80054ac <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 80055ae:	b1e8      	cbz	r0, 80055ec <vTaskStartScheduler+0x68>
			xReturn = xTimerCreateTimerTask();
 80055b0:	f000 fc36 	bl	8005e20 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 80055b4:	2801      	cmp	r0, #1
 80055b6:	d11b      	bne.n	80055f0 <vTaskStartScheduler+0x6c>
 80055b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055bc:	f383 8811 	msr	BASEPRI, r3
 80055c0:	f3bf 8f6f 	isb	sy
 80055c4:	f3bf 8f4f 	dsb	sy
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80055c8:	4b11      	ldr	r3, [pc, #68]	; (8005610 <vTaskStartScheduler+0x8c>)
 80055ca:	4a12      	ldr	r2, [pc, #72]	; (8005614 <vTaskStartScheduler+0x90>)
 80055cc:	681b      	ldr	r3, [r3, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 80055ce:	4912      	ldr	r1, [pc, #72]	; (8005618 <vTaskStartScheduler+0x94>)
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80055d0:	3354      	adds	r3, #84	; 0x54
 80055d2:	6013      	str	r3, [r2, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 80055d4:	f04f 33ff 	mov.w	r3, #4294967295
		xSchedulerRunning = pdTRUE;
 80055d8:	4a10      	ldr	r2, [pc, #64]	; (800561c <vTaskStartScheduler+0x98>)
		xNextTaskUnblockTime = portMAX_DELAY;
 80055da:	600b      	str	r3, [r1, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80055dc:	4b10      	ldr	r3, [pc, #64]	; (8005620 <vTaskStartScheduler+0x9c>)
		xSchedulerRunning = pdTRUE;
 80055de:	6010      	str	r0, [r2, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80055e0:	601c      	str	r4, [r3, #0]
}
 80055e2:	b008      	add	sp, #32
 80055e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 80055e8:	f000 bef6 	b.w	80063d8 <xPortStartScheduler>
}
 80055ec:	b008      	add	sp, #32
 80055ee:	bd10      	pop	{r4, pc}
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80055f0:	3001      	adds	r0, #1
 80055f2:	d1fb      	bne.n	80055ec <vTaskStartScheduler+0x68>
 80055f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055f8:	f383 8811 	msr	BASEPRI, r3
 80055fc:	f3bf 8f6f 	isb	sy
 8005600:	f3bf 8f4f 	dsb	sy
 8005604:	e7fe      	b.n	8005604 <vTaskStartScheduler+0x80>
 8005606:	bf00      	nop
 8005608:	0800f7c8 	.word	0x0800f7c8
 800560c:	08005385 	.word	0x08005385
 8005610:	24001c28 	.word	0x24001c28
 8005614:	24000088 	.word	0x24000088
 8005618:	240020d0 	.word	0x240020d0
 800561c:	240020f0 	.word	0x240020f0
 8005620:	2400211c 	.word	0x2400211c

08005624 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8005624:	4a02      	ldr	r2, [pc, #8]	; (8005630 <vTaskSuspendAll+0xc>)
 8005626:	6813      	ldr	r3, [r2, #0]
 8005628:	3301      	adds	r3, #1
 800562a:	6013      	str	r3, [r2, #0]
}
 800562c:	4770      	bx	lr
 800562e:	bf00      	nop
 8005630:	2400209c 	.word	0x2400209c

08005634 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8005634:	4b01      	ldr	r3, [pc, #4]	; (800563c <xTaskGetTickCount+0x8>)
 8005636:	6818      	ldr	r0, [r3, #0]
}
 8005638:	4770      	bx	lr
 800563a:	bf00      	nop
 800563c:	2400211c 	.word	0x2400211c

08005640 <xTaskGetTickCountFromISR>:
{
 8005640:	b508      	push	{r3, lr}
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005642:	f000 ff53 	bl	80064ec <vPortValidateInterruptPriority>
		xReturn = xTickCount;
 8005646:	4b01      	ldr	r3, [pc, #4]	; (800564c <xTaskGetTickCountFromISR+0xc>)
 8005648:	6818      	ldr	r0, [r3, #0]
}
 800564a:	bd08      	pop	{r3, pc}
 800564c:	2400211c 	.word	0x2400211c

08005650 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005650:	4b50      	ldr	r3, [pc, #320]	; (8005794 <xTaskIncrementTick+0x144>)
 8005652:	681b      	ldr	r3, [r3, #0]
{
 8005654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005658:	b083      	sub	sp, #12
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800565a:	2b00      	cmp	r3, #0
 800565c:	d146      	bne.n	80056ec <xTaskIncrementTick+0x9c>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800565e:	4b4e      	ldr	r3, [pc, #312]	; (8005798 <xTaskIncrementTick+0x148>)
 8005660:	681e      	ldr	r6, [r3, #0]
 8005662:	3601      	adds	r6, #1
		xTickCount = xConstTickCount;
 8005664:	601e      	str	r6, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005666:	2e00      	cmp	r6, #0
 8005668:	d049      	beq.n	80056fe <xTaskIncrementTick+0xae>
 800566a:	f8df b144 	ldr.w	fp, [pc, #324]	; 80057b0 <xTaskIncrementTick+0x160>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800566e:	f8db 3000 	ldr.w	r3, [fp]
 8005672:	429e      	cmp	r6, r3
 8005674:	d350      	bcc.n	8005718 <xTaskIncrementTick+0xc8>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005676:	4f49      	ldr	r7, [pc, #292]	; (800579c <xTaskIncrementTick+0x14c>)
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	681d      	ldr	r5, [r3, #0]
 800567c:	2d00      	cmp	r5, #0
 800567e:	d077      	beq.n	8005770 <xTaskIncrementTick+0x120>
BaseType_t xSwitchRequired = pdFALSE;
 8005680:	2500      	movs	r5, #0
 8005682:	f8df 9130 	ldr.w	r9, [pc, #304]	; 80057b4 <xTaskIncrementTick+0x164>
 8005686:	f8df a130 	ldr.w	sl, [pc, #304]	; 80057b8 <xTaskIncrementTick+0x168>
					prvAddTaskToReadyList( pxTCB );
 800568a:	f8df 8130 	ldr.w	r8, [pc, #304]	; 80057bc <xTaskIncrementTick+0x16c>
 800568e:	e022      	b.n	80056d6 <xTaskIncrementTick+0x86>
 8005690:	9101      	str	r1, [sp, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005692:	f7fe ff75 	bl	8004580 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005696:	6aa3      	ldr	r3, [r4, #40]	; 0x28
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005698:	f104 0018 	add.w	r0, r4, #24
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800569c:	9901      	ldr	r1, [sp, #4]
 800569e:	b113      	cbz	r3, 80056a6 <xTaskIncrementTick+0x56>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80056a0:	f7fe ff6e 	bl	8004580 <uxListRemove>
 80056a4:	9901      	ldr	r1, [sp, #4]
					prvAddTaskToReadyList( pxTCB );
 80056a6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80056a8:	f8d8 3000 	ldr.w	r3, [r8]
 80056ac:	4298      	cmp	r0, r3
 80056ae:	d901      	bls.n	80056b4 <xTaskIncrementTick+0x64>
 80056b0:	f8c8 0000 	str.w	r0, [r8]
 80056b4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80056b8:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 80056bc:	f7fe ff38 	bl	8004530 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80056c0:	f8da 3000 	ldr.w	r3, [sl]
 80056c4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80056c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 80056c8:	429a      	cmp	r2, r3
 80056ca:	bf28      	it	cs
 80056cc:	2501      	movcs	r5, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d050      	beq.n	8005778 <xTaskIncrementTick+0x128>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	68db      	ldr	r3, [r3, #12]
 80056da:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80056dc:	6863      	ldr	r3, [r4, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80056de:	1d21      	adds	r1, r4, #4
					if( xConstTickCount < xItemValue )
 80056e0:	429e      	cmp	r6, r3
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80056e2:	4608      	mov	r0, r1
					if( xConstTickCount < xItemValue )
 80056e4:	d2d4      	bcs.n	8005690 <xTaskIncrementTick+0x40>
						xNextTaskUnblockTime = xItemValue;
 80056e6:	f8cb 3000 	str.w	r3, [fp]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80056ea:	e01a      	b.n	8005722 <xTaskIncrementTick+0xd2>
		++xPendedTicks;
 80056ec:	4a2c      	ldr	r2, [pc, #176]	; (80057a0 <xTaskIncrementTick+0x150>)
BaseType_t xSwitchRequired = pdFALSE;
 80056ee:	2500      	movs	r5, #0
		++xPendedTicks;
 80056f0:	6813      	ldr	r3, [r2, #0]
}
 80056f2:	4628      	mov	r0, r5
		++xPendedTicks;
 80056f4:	3301      	adds	r3, #1
 80056f6:	6013      	str	r3, [r2, #0]
}
 80056f8:	b003      	add	sp, #12
 80056fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			taskSWITCH_DELAYED_LISTS();
 80056fe:	4b27      	ldr	r3, [pc, #156]	; (800579c <xTaskIncrementTick+0x14c>)
 8005700:	681a      	ldr	r2, [r3, #0]
 8005702:	6812      	ldr	r2, [r2, #0]
 8005704:	b30a      	cbz	r2, 800574a <xTaskIncrementTick+0xfa>
 8005706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800570a:	f383 8811 	msr	BASEPRI, r3
 800570e:	f3bf 8f6f 	isb	sy
 8005712:	f3bf 8f4f 	dsb	sy
 8005716:	e7fe      	b.n	8005716 <xTaskIncrementTick+0xc6>
BaseType_t xSwitchRequired = pdFALSE;
 8005718:	2500      	movs	r5, #0
 800571a:	f8df 9098 	ldr.w	r9, [pc, #152]	; 80057b4 <xTaskIncrementTick+0x164>
 800571e:	f8df a098 	ldr.w	sl, [pc, #152]	; 80057b8 <xTaskIncrementTick+0x168>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005722:	f8da 3000 	ldr.w	r3, [sl]
			if( xYieldPending != pdFALSE )
 8005726:	491f      	ldr	r1, [pc, #124]	; (80057a4 <xTaskIncrementTick+0x154>)
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800572a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800572e:	009b      	lsls	r3, r3, #2
 8005730:	f859 2003 	ldr.w	r2, [r9, r3]
			if( xYieldPending != pdFALSE )
 8005734:	680b      	ldr	r3, [r1, #0]
				xSwitchRequired = pdTRUE;
 8005736:	2a02      	cmp	r2, #2
 8005738:	bf28      	it	cs
 800573a:	2501      	movcs	r5, #1
				xSwitchRequired = pdTRUE;
 800573c:	2b00      	cmp	r3, #0
 800573e:	bf18      	it	ne
 8005740:	2501      	movne	r5, #1
}
 8005742:	4628      	mov	r0, r5
 8005744:	b003      	add	sp, #12
 8005746:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			taskSWITCH_DELAYED_LISTS();
 800574a:	4a17      	ldr	r2, [pc, #92]	; (80057a8 <xTaskIncrementTick+0x158>)
 800574c:	6818      	ldr	r0, [r3, #0]
 800574e:	6811      	ldr	r1, [r2, #0]
 8005750:	6019      	str	r1, [r3, #0]
 8005752:	4916      	ldr	r1, [pc, #88]	; (80057ac <xTaskIncrementTick+0x15c>)
 8005754:	6010      	str	r0, [r2, #0]
 8005756:	680a      	ldr	r2, [r1, #0]
 8005758:	3201      	adds	r2, #1
 800575a:	600a      	str	r2, [r1, #0]
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800575c:	681a      	ldr	r2, [r3, #0]
 800575e:	6812      	ldr	r2, [r2, #0]
 8005760:	b97a      	cbnz	r2, 8005782 <xTaskIncrementTick+0x132>
		xNextTaskUnblockTime = portMAX_DELAY;
 8005762:	f8df b04c 	ldr.w	fp, [pc, #76]	; 80057b0 <xTaskIncrementTick+0x160>
 8005766:	f04f 33ff 	mov.w	r3, #4294967295
 800576a:	f8cb 3000 	str.w	r3, [fp]
 800576e:	e77e      	b.n	800566e <xTaskIncrementTick+0x1e>
 8005770:	f8df 9040 	ldr.w	r9, [pc, #64]	; 80057b4 <xTaskIncrementTick+0x164>
 8005774:	f8df a040 	ldr.w	sl, [pc, #64]	; 80057b8 <xTaskIncrementTick+0x168>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005778:	f04f 33ff 	mov.w	r3, #4294967295
 800577c:	f8cb 3000 	str.w	r3, [fp]
					break;
 8005780:	e7cf      	b.n	8005722 <xTaskIncrementTick+0xd2>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005782:	681b      	ldr	r3, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005784:	f8df b028 	ldr.w	fp, [pc, #40]	; 80057b0 <xTaskIncrementTick+0x160>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005788:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800578a:	68db      	ldr	r3, [r3, #12]
 800578c:	685b      	ldr	r3, [r3, #4]
 800578e:	f8cb 3000 	str.w	r3, [fp]
}
 8005792:	e76c      	b.n	800566e <xTaskIncrementTick+0x1e>
 8005794:	2400209c 	.word	0x2400209c
 8005798:	2400211c 	.word	0x2400211c
 800579c:	24001c2c 	.word	0x24001c2c
 80057a0:	240020d8 	.word	0x240020d8
 80057a4:	24002120 	.word	0x24002120
 80057a8:	24001c30 	.word	0x24001c30
 80057ac:	240020d4 	.word	0x240020d4
 80057b0:	240020d0 	.word	0x240020d0
 80057b4:	24001c34 	.word	0x24001c34
 80057b8:	24001c28 	.word	0x24001c28
 80057bc:	240020a4 	.word	0x240020a4

080057c0 <xTaskResumeAll.part.0>:
BaseType_t xTaskResumeAll( void )
 80057c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057c4:	b083      	sub	sp, #12
	taskENTER_CRITICAL();
 80057c6:	f000 fd75 	bl	80062b4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 80057ca:	4b36      	ldr	r3, [pc, #216]	; (80058a4 <xTaskResumeAll.part.0+0xe4>)
 80057cc:	681a      	ldr	r2, [r3, #0]
 80057ce:	3a01      	subs	r2, #1
 80057d0:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d155      	bne.n	8005884 <xTaskResumeAll.part.0+0xc4>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80057d8:	4b33      	ldr	r3, [pc, #204]	; (80058a8 <xTaskResumeAll.part.0+0xe8>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d051      	beq.n	8005884 <xTaskResumeAll.part.0+0xc4>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80057e0:	4d32      	ldr	r5, [pc, #200]	; (80058ac <xTaskResumeAll.part.0+0xec>)
 80057e2:	682b      	ldr	r3, [r5, #0]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d05a      	beq.n	800589e <xTaskResumeAll.part.0+0xde>
 80057e8:	4e31      	ldr	r6, [pc, #196]	; (80058b0 <xTaskResumeAll.part.0+0xf0>)
						xYieldPending = pdTRUE;
 80057ea:	f04f 0a01 	mov.w	sl, #1
 80057ee:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 80058c4 <xTaskResumeAll.part.0+0x104>
 80057f2:	4f30      	ldr	r7, [pc, #192]	; (80058b4 <xTaskResumeAll.part.0+0xf4>)
 80057f4:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 80058c8 <xTaskResumeAll.part.0+0x108>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80057f8:	68eb      	ldr	r3, [r5, #12]
 80057fa:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80057fc:	f104 0b04 	add.w	fp, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005800:	f104 0018 	add.w	r0, r4, #24
 8005804:	f7fe febc 	bl	8004580 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005808:	4658      	mov	r0, fp
 800580a:	f7fe feb9 	bl	8004580 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800580e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005810:	6832      	ldr	r2, [r6, #0]
 8005812:	4659      	mov	r1, fp
 8005814:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 8005818:	4293      	cmp	r3, r2
 800581a:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 800581e:	d900      	bls.n	8005822 <xTaskResumeAll.part.0+0x62>
 8005820:	6033      	str	r3, [r6, #0]
 8005822:	f7fe fe85 	bl	8004530 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800582a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800582c:	429a      	cmp	r2, r3
 800582e:	d301      	bcc.n	8005834 <xTaskResumeAll.part.0+0x74>
						xYieldPending = pdTRUE;
 8005830:	f8c9 a000 	str.w	sl, [r9]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005834:	682b      	ldr	r3, [r5, #0]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d1de      	bne.n	80057f8 <xTaskResumeAll.part.0+0x38>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800583a:	4b1f      	ldr	r3, [pc, #124]	; (80058b8 <xTaskResumeAll.part.0+0xf8>)
 800583c:	681a      	ldr	r2, [r3, #0]
 800583e:	6812      	ldr	r2, [r2, #0]
 8005840:	b342      	cbz	r2, 8005894 <xTaskResumeAll.part.0+0xd4>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005842:	681a      	ldr	r2, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005844:	4b1d      	ldr	r3, [pc, #116]	; (80058bc <xTaskResumeAll.part.0+0xfc>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005846:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005848:	68d2      	ldr	r2, [r2, #12]
 800584a:	6852      	ldr	r2, [r2, #4]
 800584c:	601a      	str	r2, [r3, #0]
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800584e:	4e1c      	ldr	r6, [pc, #112]	; (80058c0 <xTaskResumeAll.part.0+0x100>)
 8005850:	6834      	ldr	r4, [r6, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 8005852:	b144      	cbz	r4, 8005866 <xTaskResumeAll.part.0+0xa6>
								xYieldPending = pdTRUE;
 8005854:	2501      	movs	r5, #1
							if( xTaskIncrementTick() != pdFALSE )
 8005856:	f7ff fefb 	bl	8005650 <xTaskIncrementTick>
 800585a:	b108      	cbz	r0, 8005860 <xTaskResumeAll.part.0+0xa0>
								xYieldPending = pdTRUE;
 800585c:	f8c9 5000 	str.w	r5, [r9]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005860:	3c01      	subs	r4, #1
 8005862:	d1f8      	bne.n	8005856 <xTaskResumeAll.part.0+0x96>
						xPendedTicks = 0;
 8005864:	6034      	str	r4, [r6, #0]
				if( xYieldPending != pdFALSE )
 8005866:	f8d9 3000 	ldr.w	r3, [r9]
 800586a:	b15b      	cbz	r3, 8005884 <xTaskResumeAll.part.0+0xc4>
					taskYIELD_IF_USING_PREEMPTION();
 800586c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005870:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005874:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8005878:	f3bf 8f4f 	dsb	sy
 800587c:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8005880:	2001      	movs	r0, #1
 8005882:	e000      	b.n	8005886 <xTaskResumeAll.part.0+0xc6>
BaseType_t xAlreadyYielded = pdFALSE;
 8005884:	2000      	movs	r0, #0
 8005886:	9001      	str	r0, [sp, #4]
	taskEXIT_CRITICAL();
 8005888:	f000 fd36 	bl	80062f8 <vPortExitCritical>
}
 800588c:	9801      	ldr	r0, [sp, #4]
 800588e:	b003      	add	sp, #12
 8005890:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		xNextTaskUnblockTime = portMAX_DELAY;
 8005894:	4b09      	ldr	r3, [pc, #36]	; (80058bc <xTaskResumeAll.part.0+0xfc>)
 8005896:	f04f 32ff 	mov.w	r2, #4294967295
 800589a:	601a      	str	r2, [r3, #0]
 800589c:	e7d7      	b.n	800584e <xTaskResumeAll.part.0+0x8e>
 800589e:	f8df 9028 	ldr.w	r9, [pc, #40]	; 80058c8 <xTaskResumeAll.part.0+0x108>
 80058a2:	e7d4      	b.n	800584e <xTaskResumeAll.part.0+0x8e>
 80058a4:	2400209c 	.word	0x2400209c
 80058a8:	24002094 	.word	0x24002094
 80058ac:	240020dc 	.word	0x240020dc
 80058b0:	240020a4 	.word	0x240020a4
 80058b4:	24001c28 	.word	0x24001c28
 80058b8:	24001c2c 	.word	0x24001c2c
 80058bc:	240020d0 	.word	0x240020d0
 80058c0:	240020d8 	.word	0x240020d8
 80058c4:	24001c34 	.word	0x24001c34
 80058c8:	24002120 	.word	0x24002120

080058cc <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
 80058cc:	4b06      	ldr	r3, [pc, #24]	; (80058e8 <xTaskResumeAll+0x1c>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	b943      	cbnz	r3, 80058e4 <xTaskResumeAll+0x18>
 80058d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058d6:	f383 8811 	msr	BASEPRI, r3
 80058da:	f3bf 8f6f 	isb	sy
 80058de:	f3bf 8f4f 	dsb	sy
 80058e2:	e7fe      	b.n	80058e2 <xTaskResumeAll+0x16>
 80058e4:	f7ff bf6c 	b.w	80057c0 <xTaskResumeAll.part.0>
 80058e8:	2400209c 	.word	0x2400209c

080058ec <vTaskDelay>:
	{
 80058ec:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 80058ee:	b950      	cbnz	r0, 8005906 <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 80058f0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80058f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058f8:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80058fc:	f3bf 8f4f 	dsb	sy
 8005900:	f3bf 8f6f 	isb	sy
	}
 8005904:	bd10      	pop	{r4, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8005906:	4c10      	ldr	r4, [pc, #64]	; (8005948 <vTaskDelay+0x5c>)
 8005908:	6821      	ldr	r1, [r4, #0]
 800590a:	b141      	cbz	r1, 800591e <vTaskDelay+0x32>
 800590c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005910:	f383 8811 	msr	BASEPRI, r3
 8005914:	f3bf 8f6f 	isb	sy
 8005918:	f3bf 8f4f 	dsb	sy
 800591c:	e7fe      	b.n	800591c <vTaskDelay+0x30>
	++uxSchedulerSuspended;
 800591e:	6823      	ldr	r3, [r4, #0]
 8005920:	3301      	adds	r3, #1
 8005922:	6023      	str	r3, [r4, #0]
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005924:	f7ff fcd2 	bl	80052cc <prvAddCurrentTaskToDelayedList>
	configASSERT( uxSchedulerSuspended );
 8005928:	6823      	ldr	r3, [r4, #0]
 800592a:	b943      	cbnz	r3, 800593e <vTaskDelay+0x52>
 800592c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005930:	f383 8811 	msr	BASEPRI, r3
 8005934:	f3bf 8f6f 	isb	sy
 8005938:	f3bf 8f4f 	dsb	sy
 800593c:	e7fe      	b.n	800593c <vTaskDelay+0x50>
 800593e:	f7ff ff3f 	bl	80057c0 <xTaskResumeAll.part.0>
		if( xAlreadyYielded == pdFALSE )
 8005942:	2800      	cmp	r0, #0
 8005944:	d0d4      	beq.n	80058f0 <vTaskDelay+0x4>
	}
 8005946:	bd10      	pop	{r4, pc}
 8005948:	2400209c 	.word	0x2400209c

0800594c <vTaskSwitchContext>:
{
 800594c:	b538      	push	{r3, r4, r5, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800594e:	4b24      	ldr	r3, [pc, #144]	; (80059e0 <vTaskSwitchContext+0x94>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	b11b      	cbz	r3, 800595c <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8005954:	4b23      	ldr	r3, [pc, #140]	; (80059e4 <vTaskSwitchContext+0x98>)
 8005956:	2201      	movs	r2, #1
 8005958:	601a      	str	r2, [r3, #0]
}
 800595a:	bd38      	pop	{r3, r4, r5, pc}
		taskCHECK_FOR_STACK_OVERFLOW();
 800595c:	4c22      	ldr	r4, [pc, #136]	; (80059e8 <vTaskSwitchContext+0x9c>)
		xYieldPending = pdFALSE;
 800595e:	4a21      	ldr	r2, [pc, #132]	; (80059e4 <vTaskSwitchContext+0x98>)
 8005960:	6013      	str	r3, [r2, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8005962:	6822      	ldr	r2, [r4, #0]
 8005964:	6823      	ldr	r3, [r4, #0]
 8005966:	6812      	ldr	r2, [r2, #0]
 8005968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800596a:	429a      	cmp	r2, r3
 800596c:	d92e      	bls.n	80059cc <vTaskSwitchContext+0x80>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800596e:	4d1f      	ldr	r5, [pc, #124]	; (80059ec <vTaskSwitchContext+0xa0>)
 8005970:	491f      	ldr	r1, [pc, #124]	; (80059f0 <vTaskSwitchContext+0xa4>)
 8005972:	682b      	ldr	r3, [r5, #0]
 8005974:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8005978:	0098      	lsls	r0, r3, #2
 800597a:	0092      	lsls	r2, r2, #2
 800597c:	588a      	ldr	r2, [r1, r2]
 800597e:	b942      	cbnz	r2, 8005992 <vTaskSwitchContext+0x46>
 8005980:	b1db      	cbz	r3, 80059ba <vTaskSwitchContext+0x6e>
 8005982:	3b01      	subs	r3, #1
 8005984:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8005988:	0098      	lsls	r0, r3, #2
 800598a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800598e:	2a00      	cmp	r2, #0
 8005990:	d0f6      	beq.n	8005980 <vTaskSwitchContext+0x34>
 8005992:	4418      	add	r0, r3
 8005994:	eb01 0c80 	add.w	ip, r1, r0, lsl #2
 8005998:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800599c:	4662      	mov	r2, ip
 800599e:	6849      	ldr	r1, [r1, #4]
 80059a0:	3208      	adds	r2, #8
 80059a2:	4291      	cmp	r1, r2
 80059a4:	f8cc 1004 	str.w	r1, [ip, #4]
 80059a8:	d016      	beq.n	80059d8 <vTaskSwitchContext+0x8c>
 80059aa:	68c9      	ldr	r1, [r1, #12]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80059ac:	4a11      	ldr	r2, [pc, #68]	; (80059f4 <vTaskSwitchContext+0xa8>)
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80059ae:	6021      	str	r1, [r4, #0]
 80059b0:	602b      	str	r3, [r5, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80059b2:	6823      	ldr	r3, [r4, #0]
 80059b4:	3354      	adds	r3, #84	; 0x54
 80059b6:	6013      	str	r3, [r2, #0]
}
 80059b8:	bd38      	pop	{r3, r4, r5, pc}
 80059ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059be:	f383 8811 	msr	BASEPRI, r3
 80059c2:	f3bf 8f6f 	isb	sy
 80059c6:	f3bf 8f4f 	dsb	sy
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80059ca:	e7fe      	b.n	80059ca <vTaskSwitchContext+0x7e>
		taskCHECK_FOR_STACK_OVERFLOW();
 80059cc:	6820      	ldr	r0, [r4, #0]
 80059ce:	6821      	ldr	r1, [r4, #0]
 80059d0:	3134      	adds	r1, #52	; 0x34
 80059d2:	f7fa fcd5 	bl	8000380 <vApplicationStackOverflowHook>
 80059d6:	e7ca      	b.n	800596e <vTaskSwitchContext+0x22>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80059d8:	6849      	ldr	r1, [r1, #4]
 80059da:	f8cc 1004 	str.w	r1, [ip, #4]
 80059de:	e7e4      	b.n	80059aa <vTaskSwitchContext+0x5e>
 80059e0:	2400209c 	.word	0x2400209c
 80059e4:	24002120 	.word	0x24002120
 80059e8:	24001c28 	.word	0x24001c28
 80059ec:	240020a4 	.word	0x240020a4
 80059f0:	24001c34 	.word	0x24001c34
 80059f4:	24000088 	.word	0x24000088

080059f8 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 80059f8:	b160      	cbz	r0, 8005a14 <vTaskPlaceOnEventList+0x1c>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80059fa:	4b0b      	ldr	r3, [pc, #44]	; (8005a28 <vTaskPlaceOnEventList+0x30>)
{
 80059fc:	b510      	push	{r4, lr}
 80059fe:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005a00:	6819      	ldr	r1, [r3, #0]
 8005a02:	3118      	adds	r1, #24
 8005a04:	f7fe fda4 	bl	8004550 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005a08:	4620      	mov	r0, r4
 8005a0a:	2101      	movs	r1, #1
}
 8005a0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005a10:	f7ff bc5c 	b.w	80052cc <prvAddCurrentTaskToDelayedList>
 8005a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a18:	f383 8811 	msr	BASEPRI, r3
 8005a1c:	f3bf 8f6f 	isb	sy
 8005a20:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 8005a24:	e7fe      	b.n	8005a24 <vTaskPlaceOnEventList+0x2c>
 8005a26:	bf00      	nop
 8005a28:	24001c28 	.word	0x24001c28

08005a2c <vTaskPlaceOnEventListRestricted>:
	{
 8005a2c:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 8005a2e:	b180      	cbz	r0, 8005a52 <vTaskPlaceOnEventListRestricted+0x26>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005a30:	4b0c      	ldr	r3, [pc, #48]	; (8005a64 <vTaskPlaceOnEventListRestricted+0x38>)
 8005a32:	460d      	mov	r5, r1
 8005a34:	4614      	mov	r4, r2
 8005a36:	6819      	ldr	r1, [r3, #0]
 8005a38:	3118      	adds	r1, #24
 8005a3a:	f7fe fd79 	bl	8004530 <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 8005a3e:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005a40:	4621      	mov	r1, r4
 8005a42:	bf0c      	ite	eq
 8005a44:	4628      	moveq	r0, r5
 8005a46:	f04f 30ff 	movne.w	r0, #4294967295
	}
 8005a4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005a4e:	f7ff bc3d 	b.w	80052cc <prvAddCurrentTaskToDelayedList>
 8005a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a56:	f383 8811 	msr	BASEPRI, r3
 8005a5a:	f3bf 8f6f 	isb	sy
 8005a5e:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventList );
 8005a62:	e7fe      	b.n	8005a62 <vTaskPlaceOnEventListRestricted+0x36>
 8005a64:	24001c28 	.word	0x24001c28

08005a68 <xTaskRemoveFromEventList>:
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a68:	68c3      	ldr	r3, [r0, #12]
{
 8005a6a:	b530      	push	{r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a6c:	68dc      	ldr	r4, [r3, #12]
{
 8005a6e:	b083      	sub	sp, #12
	configASSERT( pxUnblockedTCB );
 8005a70:	b35c      	cbz	r4, 8005aca <xTaskRemoveFromEventList+0x62>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005a72:	f104 0518 	add.w	r5, r4, #24
 8005a76:	4628      	mov	r0, r5
 8005a78:	f7fe fd82 	bl	8004580 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005a7c:	4b19      	ldr	r3, [pc, #100]	; (8005ae4 <xTaskRemoveFromEventList+0x7c>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	b17b      	cbz	r3, 8005aa2 <xTaskRemoveFromEventList+0x3a>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005a82:	4629      	mov	r1, r5
 8005a84:	4818      	ldr	r0, [pc, #96]	; (8005ae8 <xTaskRemoveFromEventList+0x80>)
 8005a86:	f7fe fd53 	bl	8004530 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005a8a:	4b18      	ldr	r3, [pc, #96]	; (8005aec <xTaskRemoveFromEventList+0x84>)
 8005a8c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a92:	429a      	cmp	r2, r3
 8005a94:	d922      	bls.n	8005adc <xTaskRemoveFromEventList+0x74>
		xYieldPending = pdTRUE;
 8005a96:	2301      	movs	r3, #1
 8005a98:	4a15      	ldr	r2, [pc, #84]	; (8005af0 <xTaskRemoveFromEventList+0x88>)
		xReturn = pdTRUE;
 8005a9a:	4618      	mov	r0, r3
		xYieldPending = pdTRUE;
 8005a9c:	6013      	str	r3, [r2, #0]
}
 8005a9e:	b003      	add	sp, #12
 8005aa0:	bd30      	pop	{r4, r5, pc}
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005aa2:	1d21      	adds	r1, r4, #4
 8005aa4:	4608      	mov	r0, r1
 8005aa6:	9101      	str	r1, [sp, #4]
 8005aa8:	f7fe fd6a 	bl	8004580 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005aac:	4a11      	ldr	r2, [pc, #68]	; (8005af4 <xTaskRemoveFromEventList+0x8c>)
 8005aae:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005ab0:	6810      	ldr	r0, [r2, #0]
 8005ab2:	9901      	ldr	r1, [sp, #4]
 8005ab4:	4283      	cmp	r3, r0
 8005ab6:	d900      	bls.n	8005aba <xTaskRemoveFromEventList+0x52>
 8005ab8:	6013      	str	r3, [r2, #0]
 8005aba:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005abe:	480e      	ldr	r0, [pc, #56]	; (8005af8 <xTaskRemoveFromEventList+0x90>)
 8005ac0:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8005ac4:	f7fe fd34 	bl	8004530 <vListInsertEnd>
 8005ac8:	e7df      	b.n	8005a8a <xTaskRemoveFromEventList+0x22>
 8005aca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ace:	f383 8811 	msr	BASEPRI, r3
 8005ad2:	f3bf 8f6f 	isb	sy
 8005ad6:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 8005ada:	e7fe      	b.n	8005ada <xTaskRemoveFromEventList+0x72>
		xReturn = pdFALSE;
 8005adc:	2000      	movs	r0, #0
}
 8005ade:	b003      	add	sp, #12
 8005ae0:	bd30      	pop	{r4, r5, pc}
 8005ae2:	bf00      	nop
 8005ae4:	2400209c 	.word	0x2400209c
 8005ae8:	240020dc 	.word	0x240020dc
 8005aec:	24001c28 	.word	0x24001c28
 8005af0:	24002120 	.word	0x24002120
 8005af4:	240020a4 	.word	0x240020a4
 8005af8:	24001c34 	.word	0x24001c34

08005afc <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005afc:	4a03      	ldr	r2, [pc, #12]	; (8005b0c <vTaskInternalSetTimeOutState+0x10>)
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005afe:	4b04      	ldr	r3, [pc, #16]	; (8005b10 <vTaskInternalSetTimeOutState+0x14>)
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005b00:	6812      	ldr	r2, [r2, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	e9c0 2300 	strd	r2, r3, [r0]
}
 8005b08:	4770      	bx	lr
 8005b0a:	bf00      	nop
 8005b0c:	240020d4 	.word	0x240020d4
 8005b10:	2400211c 	.word	0x2400211c

08005b14 <xTaskCheckForTimeOut>:
	configASSERT( pxTimeOut );
 8005b14:	b328      	cbz	r0, 8005b62 <xTaskCheckForTimeOut+0x4e>
{
 8005b16:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b18:	460d      	mov	r5, r1
 8005b1a:	b083      	sub	sp, #12
	configASSERT( pxTicksToWait );
 8005b1c:	b1c1      	cbz	r1, 8005b50 <xTaskCheckForTimeOut+0x3c>
 8005b1e:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8005b20:	f000 fbc8 	bl	80062b4 <vPortEnterCritical>
			if( *pxTicksToWait == portMAX_DELAY )
 8005b24:	682b      	ldr	r3, [r5, #0]
		const TickType_t xConstTickCount = xTickCount;
 8005b26:	4a1d      	ldr	r2, [pc, #116]	; (8005b9c <xTaskCheckForTimeOut+0x88>)
			if( *pxTicksToWait == portMAX_DELAY )
 8005b28:	1c58      	adds	r0, r3, #1
		const TickType_t xConstTickCount = xTickCount;
 8005b2a:	6811      	ldr	r1, [r2, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8005b2c:	d030      	beq.n	8005b90 <xTaskCheckForTimeOut+0x7c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005b2e:	f8df c070 	ldr.w	ip, [pc, #112]	; 8005ba0 <xTaskCheckForTimeOut+0x8c>
 8005b32:	6826      	ldr	r6, [r4, #0]
 8005b34:	f8dc 7000 	ldr.w	r7, [ip]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005b38:	6860      	ldr	r0, [r4, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005b3a:	42be      	cmp	r6, r7
 8005b3c:	d01a      	beq.n	8005b74 <xTaskCheckForTimeOut+0x60>
 8005b3e:	4288      	cmp	r0, r1
 8005b40:	d818      	bhi.n	8005b74 <xTaskCheckForTimeOut+0x60>
			xReturn = pdTRUE;
 8005b42:	2001      	movs	r0, #1
 8005b44:	9001      	str	r0, [sp, #4]
	taskEXIT_CRITICAL();
 8005b46:	f000 fbd7 	bl	80062f8 <vPortExitCritical>
}
 8005b4a:	9801      	ldr	r0, [sp, #4]
 8005b4c:	b003      	add	sp, #12
 8005b4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b54:	f383 8811 	msr	BASEPRI, r3
 8005b58:	f3bf 8f6f 	isb	sy
 8005b5c:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
 8005b60:	e7fe      	b.n	8005b60 <xTaskCheckForTimeOut+0x4c>
 8005b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b66:	f383 8811 	msr	BASEPRI, r3
 8005b6a:	f3bf 8f6f 	isb	sy
 8005b6e:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
 8005b72:	e7fe      	b.n	8005b72 <xTaskCheckForTimeOut+0x5e>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005b74:	eba1 0e00 	sub.w	lr, r1, r0
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005b78:	4573      	cmp	r3, lr
 8005b7a:	d90b      	bls.n	8005b94 <xTaskCheckForTimeOut+0x80>
			*pxTicksToWait -= xElapsedTime;
 8005b7c:	1a5b      	subs	r3, r3, r1
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005b7e:	f8dc 1000 	ldr.w	r1, [ip]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005b82:	6812      	ldr	r2, [r2, #0]
			*pxTicksToWait -= xElapsedTime;
 8005b84:	4403      	add	r3, r0
			xReturn = pdFALSE;
 8005b86:	2000      	movs	r0, #0
			*pxTicksToWait -= xElapsedTime;
 8005b88:	602b      	str	r3, [r5, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005b8a:	e9c4 1200 	strd	r1, r2, [r4]
			xReturn = pdFALSE;
 8005b8e:	e7d9      	b.n	8005b44 <xTaskCheckForTimeOut+0x30>
				xReturn = pdFALSE;
 8005b90:	2000      	movs	r0, #0
 8005b92:	e7d7      	b.n	8005b44 <xTaskCheckForTimeOut+0x30>
			*pxTicksToWait = 0;
 8005b94:	2300      	movs	r3, #0
			xReturn = pdTRUE;
 8005b96:	2001      	movs	r0, #1
			*pxTicksToWait = 0;
 8005b98:	602b      	str	r3, [r5, #0]
			xReturn = pdTRUE;
 8005b9a:	e7d3      	b.n	8005b44 <xTaskCheckForTimeOut+0x30>
 8005b9c:	2400211c 	.word	0x2400211c
 8005ba0:	240020d4 	.word	0x240020d4

08005ba4 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8005ba4:	4b01      	ldr	r3, [pc, #4]	; (8005bac <vTaskMissedYield+0x8>)
 8005ba6:	2201      	movs	r2, #1
 8005ba8:	601a      	str	r2, [r3, #0]
}
 8005baa:	4770      	bx	lr
 8005bac:	24002120 	.word	0x24002120

08005bb0 <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 8005bb0:	4b01      	ldr	r3, [pc, #4]	; (8005bb8 <xTaskGetCurrentTaskHandle+0x8>)
 8005bb2:	6818      	ldr	r0, [r3, #0]
	}
 8005bb4:	4770      	bx	lr
 8005bb6:	bf00      	nop
 8005bb8:	24001c28 	.word	0x24001c28

08005bbc <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8005bbc:	4b05      	ldr	r3, [pc, #20]	; (8005bd4 <xTaskGetSchedulerState+0x18>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	b133      	cbz	r3, 8005bd0 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005bc2:	4b05      	ldr	r3, [pc, #20]	; (8005bd8 <xTaskGetSchedulerState+0x1c>)
 8005bc4:	6818      	ldr	r0, [r3, #0]
 8005bc6:	fab0 f080 	clz	r0, r0
 8005bca:	0940      	lsrs	r0, r0, #5
 8005bcc:	0040      	lsls	r0, r0, #1
 8005bce:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005bd0:	2001      	movs	r0, #1
	}
 8005bd2:	4770      	bx	lr
 8005bd4:	240020f0 	.word	0x240020f0
 8005bd8:	2400209c 	.word	0x2400209c

08005bdc <xTaskPriorityInherit>:
	{
 8005bdc:	b570      	push	{r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 8005bde:	4604      	mov	r4, r0
	{
 8005be0:	b082      	sub	sp, #8
		if( pxMutexHolder != NULL )
 8005be2:	b1c8      	cbz	r0, 8005c18 <xTaskPriorityInherit+0x3c>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005be4:	4d1d      	ldr	r5, [pc, #116]	; (8005c5c <xTaskPriorityInherit+0x80>)
 8005be6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8005be8:	682a      	ldr	r2, [r5, #0]
 8005bea:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d215      	bcs.n	8005c1c <xTaskPriorityInherit+0x40>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005bf0:	6982      	ldr	r2, [r0, #24]
 8005bf2:	2a00      	cmp	r2, #0
 8005bf4:	db04      	blt.n	8005c00 <xTaskPriorityInherit+0x24>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005bf6:	682a      	ldr	r2, [r5, #0]
 8005bf8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005bfa:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8005bfe:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005c00:	4e17      	ldr	r6, [pc, #92]	; (8005c60 <xTaskPriorityInherit+0x84>)
 8005c02:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005c06:	6962      	ldr	r2, [r4, #20]
 8005c08:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005c0c:	429a      	cmp	r2, r3
 8005c0e:	d00e      	beq.n	8005c2e <xTaskPriorityInherit+0x52>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005c10:	682b      	ldr	r3, [r5, #0]
				xReturn = pdTRUE;
 8005c12:	2001      	movs	r0, #1
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c16:	62e3      	str	r3, [r4, #44]	; 0x2c
	}
 8005c18:	b002      	add	sp, #8
 8005c1a:	bd70      	pop	{r4, r5, r6, pc}
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005c1c:	682b      	ldr	r3, [r5, #0]
 8005c1e:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8005c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c22:	4298      	cmp	r0, r3
 8005c24:	bf2c      	ite	cs
 8005c26:	2000      	movcs	r0, #0
 8005c28:	2001      	movcc	r0, #1
	}
 8005c2a:	b002      	add	sp, #8
 8005c2c:	bd70      	pop	{r4, r5, r6, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005c2e:	1d21      	adds	r1, r4, #4
 8005c30:	4608      	mov	r0, r1
 8005c32:	9101      	str	r1, [sp, #4]
 8005c34:	f7fe fca4 	bl	8004580 <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005c38:	682a      	ldr	r2, [r5, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005c3a:	4b0a      	ldr	r3, [pc, #40]	; (8005c64 <xTaskPriorityInherit+0x88>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005c3c:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005c3e:	681a      	ldr	r2, [r3, #0]
 8005c40:	9901      	ldr	r1, [sp, #4]
 8005c42:	4290      	cmp	r0, r2
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005c44:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005c46:	d900      	bls.n	8005c4a <xTaskPriorityInherit+0x6e>
 8005c48:	6018      	str	r0, [r3, #0]
 8005c4a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005c4e:	eb06 0080 	add.w	r0, r6, r0, lsl #2
 8005c52:	f7fe fc6d 	bl	8004530 <vListInsertEnd>
				xReturn = pdTRUE;
 8005c56:	2001      	movs	r0, #1
 8005c58:	e7de      	b.n	8005c18 <xTaskPriorityInherit+0x3c>
 8005c5a:	bf00      	nop
 8005c5c:	24001c28 	.word	0x24001c28
 8005c60:	24001c34 	.word	0x24001c34
 8005c64:	240020a4 	.word	0x240020a4

08005c68 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 8005c68:	b318      	cbz	r0, 8005cb2 <xTaskPriorityDisinherit+0x4a>
			configASSERT( pxTCB == pxCurrentTCB );
 8005c6a:	4b1f      	ldr	r3, [pc, #124]	; (8005ce8 <xTaskPriorityDisinherit+0x80>)
	{
 8005c6c:	b510      	push	{r4, lr}
			configASSERT( pxTCB == pxCurrentTCB );
 8005c6e:	681c      	ldr	r4, [r3, #0]
	{
 8005c70:	b082      	sub	sp, #8
			configASSERT( pxTCB == pxCurrentTCB );
 8005c72:	4284      	cmp	r4, r0
 8005c74:	d008      	beq.n	8005c88 <xTaskPriorityDisinherit+0x20>
 8005c76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c7a:	f383 8811 	msr	BASEPRI, r3
 8005c7e:	f3bf 8f6f 	isb	sy
 8005c82:	f3bf 8f4f 	dsb	sy
 8005c86:	e7fe      	b.n	8005c86 <xTaskPriorityDisinherit+0x1e>
			configASSERT( pxTCB->uxMutexesHeld );
 8005c88:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005c8a:	b14b      	cbz	r3, 8005ca0 <xTaskPriorityDisinherit+0x38>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005c8c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
			( pxTCB->uxMutexesHeld )--;
 8005c8e:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005c90:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
			( pxTCB->uxMutexesHeld )--;
 8005c92:	6523      	str	r3, [r4, #80]	; 0x50
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005c94:	4291      	cmp	r1, r2
 8005c96:	d000      	beq.n	8005c9a <xTaskPriorityDisinherit+0x32>
 8005c98:	b16b      	cbz	r3, 8005cb6 <xTaskPriorityDisinherit+0x4e>
	BaseType_t xReturn = pdFALSE;
 8005c9a:	2000      	movs	r0, #0
	}
 8005c9c:	b002      	add	sp, #8
 8005c9e:	bd10      	pop	{r4, pc}
 8005ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ca4:	f383 8811 	msr	BASEPRI, r3
 8005ca8:	f3bf 8f6f 	isb	sy
 8005cac:	f3bf 8f4f 	dsb	sy
			configASSERT( pxTCB->uxMutexesHeld );
 8005cb0:	e7fe      	b.n	8005cb0 <xTaskPriorityDisinherit+0x48>
	BaseType_t xReturn = pdFALSE;
 8005cb2:	2000      	movs	r0, #0
	}
 8005cb4:	4770      	bx	lr
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005cb6:	1d21      	adds	r1, r4, #4
 8005cb8:	4608      	mov	r0, r1
 8005cba:	9101      	str	r1, [sp, #4]
 8005cbc:	f7fe fc60 	bl	8004580 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005cc0:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
					prvAddTaskToReadyList( pxTCB );
 8005cc2:	4b0a      	ldr	r3, [pc, #40]	; (8005cec <xTaskPriorityDisinherit+0x84>)
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005cc4:	f1c0 0238 	rsb	r2, r0, #56	; 0x38
					prvAddTaskToReadyList( pxTCB );
 8005cc8:	9901      	ldr	r1, [sp, #4]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005cca:	62e0      	str	r0, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ccc:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8005cce:	681a      	ldr	r2, [r3, #0]
 8005cd0:	4290      	cmp	r0, r2
 8005cd2:	d900      	bls.n	8005cd6 <xTaskPriorityDisinherit+0x6e>
 8005cd4:	6018      	str	r0, [r3, #0]
 8005cd6:	4b06      	ldr	r3, [pc, #24]	; (8005cf0 <xTaskPriorityDisinherit+0x88>)
 8005cd8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005cdc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005ce0:	f7fe fc26 	bl	8004530 <vListInsertEnd>
					xReturn = pdTRUE;
 8005ce4:	2001      	movs	r0, #1
		return xReturn;
 8005ce6:	e7d9      	b.n	8005c9c <xTaskPriorityDisinherit+0x34>
 8005ce8:	24001c28 	.word	0x24001c28
 8005cec:	240020a4 	.word	0x240020a4
 8005cf0:	24001c34 	.word	0x24001c34

08005cf4 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
 8005cf4:	2800      	cmp	r0, #0
 8005cf6:	d040      	beq.n	8005d7a <vTaskPriorityDisinheritAfterTimeout+0x86>
			configASSERT( pxTCB->uxMutexesHeld );
 8005cf8:	6d03      	ldr	r3, [r0, #80]	; 0x50
	{
 8005cfa:	b530      	push	{r4, r5, lr}
 8005cfc:	4604      	mov	r4, r0
 8005cfe:	b083      	sub	sp, #12
			configASSERT( pxTCB->uxMutexesHeld );
 8005d00:	b153      	cbz	r3, 8005d18 <vTaskPriorityDisinheritAfterTimeout+0x24>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005d02:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005d04:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005d06:	4281      	cmp	r1, r0
 8005d08:	bf38      	it	cc
 8005d0a:	4601      	movcc	r1, r0
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005d0c:	2b01      	cmp	r3, #1
 8005d0e:	d101      	bne.n	8005d14 <vTaskPriorityDisinheritAfterTimeout+0x20>
 8005d10:	428a      	cmp	r2, r1
 8005d12:	d10a      	bne.n	8005d2a <vTaskPriorityDisinheritAfterTimeout+0x36>
	}
 8005d14:	b003      	add	sp, #12
 8005d16:	bd30      	pop	{r4, r5, pc}
 8005d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d1c:	f383 8811 	msr	BASEPRI, r3
 8005d20:	f3bf 8f6f 	isb	sy
 8005d24:	f3bf 8f4f 	dsb	sy
			configASSERT( pxTCB->uxMutexesHeld );
 8005d28:	e7fe      	b.n	8005d28 <vTaskPriorityDisinheritAfterTimeout+0x34>
					configASSERT( pxTCB != pxCurrentTCB );
 8005d2a:	4b19      	ldr	r3, [pc, #100]	; (8005d90 <vTaskPriorityDisinheritAfterTimeout+0x9c>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	42a3      	cmp	r3, r4
 8005d30:	d024      	beq.n	8005d7c <vTaskPriorityDisinheritAfterTimeout+0x88>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005d32:	69a3      	ldr	r3, [r4, #24]
					pxTCB->uxPriority = uxPriorityToUse;
 8005d34:	62e1      	str	r1, [r4, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	db02      	blt.n	8005d40 <vTaskPriorityDisinheritAfterTimeout+0x4c>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d3a:	f1c1 0138 	rsb	r1, r1, #56	; 0x38
 8005d3e:	61a1      	str	r1, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005d40:	4d14      	ldr	r5, [pc, #80]	; (8005d94 <vTaskPriorityDisinheritAfterTimeout+0xa0>)
 8005d42:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8005d46:	6961      	ldr	r1, [r4, #20]
 8005d48:	eb05 0382 	add.w	r3, r5, r2, lsl #2
 8005d4c:	4299      	cmp	r1, r3
 8005d4e:	d1e1      	bne.n	8005d14 <vTaskPriorityDisinheritAfterTimeout+0x20>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005d50:	1d21      	adds	r1, r4, #4
 8005d52:	4608      	mov	r0, r1
 8005d54:	9101      	str	r1, [sp, #4]
 8005d56:	f7fe fc13 	bl	8004580 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 8005d5a:	4b0f      	ldr	r3, [pc, #60]	; (8005d98 <vTaskPriorityDisinheritAfterTimeout+0xa4>)
 8005d5c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8005d5e:	681a      	ldr	r2, [r3, #0]
 8005d60:	9901      	ldr	r1, [sp, #4]
 8005d62:	4290      	cmp	r0, r2
 8005d64:	d900      	bls.n	8005d68 <vTaskPriorityDisinheritAfterTimeout+0x74>
 8005d66:	6018      	str	r0, [r3, #0]
 8005d68:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005d6c:	eb05 0080 	add.w	r0, r5, r0, lsl #2
	}
 8005d70:	b003      	add	sp, #12
 8005d72:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
						prvAddTaskToReadyList( pxTCB );
 8005d76:	f7fe bbdb 	b.w	8004530 <vListInsertEnd>
 8005d7a:	4770      	bx	lr
 8005d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d80:	f383 8811 	msr	BASEPRI, r3
 8005d84:	f3bf 8f6f 	isb	sy
 8005d88:	f3bf 8f4f 	dsb	sy
					configASSERT( pxTCB != pxCurrentTCB );
 8005d8c:	e7fe      	b.n	8005d8c <vTaskPriorityDisinheritAfterTimeout+0x98>
 8005d8e:	bf00      	nop
 8005d90:	24001c28 	.word	0x24001c28
 8005d94:	24001c34 	.word	0x24001c34
 8005d98:	240020a4 	.word	0x240020a4

08005d9c <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8005d9c:	4b04      	ldr	r3, [pc, #16]	; (8005db0 <pvTaskIncrementMutexHeldCount+0x14>)
 8005d9e:	681a      	ldr	r2, [r3, #0]
 8005da0:	b11a      	cbz	r2, 8005daa <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 8005da2:	6819      	ldr	r1, [r3, #0]
 8005da4:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8005da6:	3201      	adds	r2, #1
 8005da8:	650a      	str	r2, [r1, #80]	; 0x50
		return pxCurrentTCB;
 8005daa:	6818      	ldr	r0, [r3, #0]
	}
 8005dac:	4770      	bx	lr
 8005dae:	bf00      	nop
 8005db0:	24001c28 	.word	0x24001c28

08005db4 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005db4:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 8005db6:	4c12      	ldr	r4, [pc, #72]	; (8005e00 <prvCheckForValidListAndQueue+0x4c>)
{
 8005db8:	b083      	sub	sp, #12
	taskENTER_CRITICAL();
 8005dba:	f000 fa7b 	bl	80062b4 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 8005dbe:	6825      	ldr	r5, [r4, #0]
 8005dc0:	b125      	cbz	r5, 8005dcc <prvCheckForValidListAndQueue+0x18>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 8005dc2:	b003      	add	sp, #12
 8005dc4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 8005dc8:	f000 ba96 	b.w	80062f8 <vPortExitCritical>
			vListInitialise( &xActiveTimerList1 );
 8005dcc:	4f0d      	ldr	r7, [pc, #52]	; (8005e04 <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList2 );
 8005dce:	4e0e      	ldr	r6, [pc, #56]	; (8005e08 <prvCheckForValidListAndQueue+0x54>)
			vListInitialise( &xActiveTimerList1 );
 8005dd0:	4638      	mov	r0, r7
 8005dd2:	f7fe fb9d 	bl	8004510 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005dd6:	4630      	mov	r0, r6
 8005dd8:	f7fe fb9a 	bl	8004510 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005ddc:	4a0b      	ldr	r2, [pc, #44]	; (8005e0c <prvCheckForValidListAndQueue+0x58>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005dde:	9500      	str	r5, [sp, #0]
 8005de0:	2110      	movs	r1, #16
			pxCurrentTimerList = &xActiveTimerList1;
 8005de2:	6017      	str	r7, [r2, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005de4:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
 8005de6:	4a0a      	ldr	r2, [pc, #40]	; (8005e10 <prvCheckForValidListAndQueue+0x5c>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005de8:	4b0a      	ldr	r3, [pc, #40]	; (8005e14 <prvCheckForValidListAndQueue+0x60>)
			pxOverflowTimerList = &xActiveTimerList2;
 8005dea:	6016      	str	r6, [r2, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005dec:	4a0a      	ldr	r2, [pc, #40]	; (8005e18 <prvCheckForValidListAndQueue+0x64>)
 8005dee:	f7fe fca9 	bl	8004744 <xQueueGenericCreateStatic>
 8005df2:	6020      	str	r0, [r4, #0]
				if( xTimerQueue != NULL )
 8005df4:	2800      	cmp	r0, #0
 8005df6:	d0e4      	beq.n	8005dc2 <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005df8:	4908      	ldr	r1, [pc, #32]	; (8005e1c <prvCheckForValidListAndQueue+0x68>)
 8005dfa:	f7ff f9a1 	bl	8005140 <vQueueAddToRegistry>
 8005dfe:	e7e0      	b.n	8005dc2 <prvCheckForValidListAndQueue+0xe>
 8005e00:	24002248 	.word	0x24002248
 8005e04:	240021cc 	.word	0x240021cc
 8005e08:	240021e0 	.word	0x240021e0
 8005e0c:	24002124 	.word	0x24002124
 8005e10:	24002128 	.word	0x24002128
 8005e14:	240021f8 	.word	0x240021f8
 8005e18:	2400212c 	.word	0x2400212c
 8005e1c:	0800f7d0 	.word	0x0800f7d0

08005e20 <xTimerCreateTimerTask>:
{
 8005e20:	b530      	push	{r4, r5, lr}
 8005e22:	b089      	sub	sp, #36	; 0x24
	prvCheckForValidListAndQueue();
 8005e24:	f7ff ffc6 	bl	8005db4 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 8005e28:	4b12      	ldr	r3, [pc, #72]	; (8005e74 <xTimerCreateTimerTask+0x54>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	b1cb      	cbz	r3, 8005e62 <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005e2e:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005e30:	aa07      	add	r2, sp, #28
 8005e32:	a906      	add	r1, sp, #24
 8005e34:	a805      	add	r0, sp, #20
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005e36:	2502      	movs	r5, #2
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005e38:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005e3c:	f7fe fb58 	bl	80044f0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005e40:	4623      	mov	r3, r4
 8005e42:	9a07      	ldr	r2, [sp, #28]
 8005e44:	9500      	str	r5, [sp, #0]
 8005e46:	e9dd 0105 	ldrd	r0, r1, [sp, #20]
 8005e4a:	e9cd 1001 	strd	r1, r0, [sp, #4]
 8005e4e:	490a      	ldr	r1, [pc, #40]	; (8005e78 <xTimerCreateTimerTask+0x58>)
 8005e50:	480a      	ldr	r0, [pc, #40]	; (8005e7c <xTimerCreateTimerTask+0x5c>)
 8005e52:	f7ff fb2b 	bl	80054ac <xTaskCreateStatic>
 8005e56:	4b0a      	ldr	r3, [pc, #40]	; (8005e80 <xTimerCreateTimerTask+0x60>)
 8005e58:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 8005e5a:	b110      	cbz	r0, 8005e62 <xTimerCreateTimerTask+0x42>
}
 8005e5c:	2001      	movs	r0, #1
 8005e5e:	b009      	add	sp, #36	; 0x24
 8005e60:	bd30      	pop	{r4, r5, pc}
 8005e62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e66:	f383 8811 	msr	BASEPRI, r3
 8005e6a:	f3bf 8f6f 	isb	sy
 8005e6e:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 8005e72:	e7fe      	b.n	8005e72 <xTimerCreateTimerTask+0x52>
 8005e74:	24002248 	.word	0x24002248
 8005e78:	0800f7d8 	.word	0x0800f7d8
 8005e7c:	08005f71 	.word	0x08005f71
 8005e80:	2400224c 	.word	0x2400224c

08005e84 <xTimerGenericCommand>:
	configASSERT( xTimer );
 8005e84:	b1c8      	cbz	r0, 8005eba <xTimerGenericCommand+0x36>
{
 8005e86:	b570      	push	{r4, r5, r6, lr}
	if( xTimerQueue != NULL )
 8005e88:	4e17      	ldr	r6, [pc, #92]	; (8005ee8 <xTimerGenericCommand+0x64>)
{
 8005e8a:	b084      	sub	sp, #16
	if( xTimerQueue != NULL )
 8005e8c:	6834      	ldr	r4, [r6, #0]
 8005e8e:	b18c      	cbz	r4, 8005eb4 <xTimerGenericCommand+0x30>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005e90:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005e92:	9002      	str	r0, [sp, #8]
		xMessage.xMessageID = xCommandID;
 8005e94:	e9cd 1200 	strd	r1, r2, [sp]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005e98:	dc18      	bgt.n	8005ecc <xTimerGenericCommand+0x48>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005e9a:	f7ff fe8f 	bl	8005bbc <xTaskGetSchedulerState>
 8005e9e:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005ea0:	f04f 0300 	mov.w	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005ea4:	d01a      	beq.n	8005edc <xTimerGenericCommand+0x58>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005ea6:	4669      	mov	r1, sp
 8005ea8:	461a      	mov	r2, r3
 8005eaa:	6830      	ldr	r0, [r6, #0]
 8005eac:	f7fe fd06 	bl	80048bc <xQueueGenericSend>
}
 8005eb0:	b004      	add	sp, #16
 8005eb2:	bd70      	pop	{r4, r5, r6, pc}
BaseType_t xReturn = pdFAIL;
 8005eb4:	4620      	mov	r0, r4
}
 8005eb6:	b004      	add	sp, #16
 8005eb8:	bd70      	pop	{r4, r5, r6, pc}
 8005eba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ebe:	f383 8811 	msr	BASEPRI, r3
 8005ec2:	f3bf 8f6f 	isb	sy
 8005ec6:	f3bf 8f4f 	dsb	sy
	configASSERT( xTimer );
 8005eca:	e7fe      	b.n	8005eca <xTimerGenericCommand+0x46>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005ecc:	461a      	mov	r2, r3
 8005ece:	4669      	mov	r1, sp
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	4620      	mov	r0, r4
 8005ed4:	f7fe fe2a 	bl	8004b2c <xQueueGenericSendFromISR>
}
 8005ed8:	b004      	add	sp, #16
 8005eda:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005edc:	9a08      	ldr	r2, [sp, #32]
 8005ede:	4669      	mov	r1, sp
 8005ee0:	6830      	ldr	r0, [r6, #0]
 8005ee2:	f7fe fceb 	bl	80048bc <xQueueGenericSend>
 8005ee6:	e7e6      	b.n	8005eb6 <xTimerGenericCommand+0x32>
 8005ee8:	24002248 	.word	0x24002248

08005eec <prvSwitchTimerLists>:
{
 8005eec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ef0:	4e1d      	ldr	r6, [pc, #116]	; (8005f68 <prvSwitchTimerLists+0x7c>)
 8005ef2:	b082      	sub	sp, #8
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005ef4:	f04f 0800 	mov.w	r8, #0
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005ef8:	e00d      	b.n	8005f16 <prvSwitchTimerLists+0x2a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005efa:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005efc:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005efe:	681f      	ldr	r7, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005f00:	1d25      	adds	r5, r4, #4
 8005f02:	4628      	mov	r0, r5
 8005f04:	f7fe fb3c 	bl	8004580 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005f08:	6a23      	ldr	r3, [r4, #32]
 8005f0a:	4620      	mov	r0, r4
 8005f0c:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005f0e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8005f12:	075b      	lsls	r3, r3, #29
 8005f14:	d40a      	bmi.n	8005f2c <prvSwitchTimerLists+0x40>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005f16:	6833      	ldr	r3, [r6, #0]
 8005f18:	681a      	ldr	r2, [r3, #0]
 8005f1a:	2a00      	cmp	r2, #0
 8005f1c:	d1ed      	bne.n	8005efa <prvSwitchTimerLists+0xe>
	pxCurrentTimerList = pxOverflowTimerList;
 8005f1e:	4a13      	ldr	r2, [pc, #76]	; (8005f6c <prvSwitchTimerLists+0x80>)
 8005f20:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005f22:	6013      	str	r3, [r2, #0]
	pxCurrentTimerList = pxOverflowTimerList;
 8005f24:	6031      	str	r1, [r6, #0]
}
 8005f26:	b002      	add	sp, #8
 8005f28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005f2c:	69a2      	ldr	r2, [r4, #24]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005f2e:	4629      	mov	r1, r5
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005f30:	2300      	movs	r3, #0
 8005f32:	4620      	mov	r0, r4
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005f34:	18bd      	adds	r5, r7, r2
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005f36:	463a      	mov	r2, r7
			if( xReloadTime > xNextExpireTime )
 8005f38:	42af      	cmp	r7, r5
 8005f3a:	d205      	bcs.n	8005f48 <prvSwitchTimerLists+0x5c>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005f3c:	6830      	ldr	r0, [r6, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005f3e:	6065      	str	r5, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005f40:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005f42:	f7fe fb05 	bl	8004550 <vListInsert>
 8005f46:	e7e6      	b.n	8005f16 <prvSwitchTimerLists+0x2a>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005f48:	4619      	mov	r1, r3
 8005f4a:	f8cd 8000 	str.w	r8, [sp]
 8005f4e:	f7ff ff99 	bl	8005e84 <xTimerGenericCommand>
				configASSERT( xResult );
 8005f52:	2800      	cmp	r0, #0
 8005f54:	d1df      	bne.n	8005f16 <prvSwitchTimerLists+0x2a>
 8005f56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f5a:	f383 8811 	msr	BASEPRI, r3
 8005f5e:	f3bf 8f6f 	isb	sy
 8005f62:	f3bf 8f4f 	dsb	sy
 8005f66:	e7fe      	b.n	8005f66 <prvSwitchTimerLists+0x7a>
 8005f68:	24002124 	.word	0x24002124
 8005f6c:	24002128 	.word	0x24002128

08005f70 <prvTimerTask>:
{
 8005f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f74:	4e96      	ldr	r6, [pc, #600]	; (80061d0 <prvTimerTask+0x260>)
 8005f76:	b087      	sub	sp, #28
 8005f78:	4d96      	ldr	r5, [pc, #600]	; (80061d4 <prvTimerTask+0x264>)
					portYIELD_WITHIN_API();
 8005f7a:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
 8005f7e:	4c96      	ldr	r4, [pc, #600]	; (80061d8 <prvTimerTask+0x268>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005f80:	6833      	ldr	r3, [r6, #0]
 8005f82:	681f      	ldr	r7, [r3, #0]
 8005f84:	2f00      	cmp	r7, #0
 8005f86:	f000 80a9 	beq.w	80060dc <prvTimerTask+0x16c>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005f8a:	68db      	ldr	r3, [r3, #12]
 8005f8c:	681f      	ldr	r7, [r3, #0]
	vTaskSuspendAll();
 8005f8e:	f7ff fb49 	bl	8005624 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 8005f92:	f7ff fb4f 	bl	8005634 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8005f96:	682a      	ldr	r2, [r5, #0]
	xTimeNow = xTaskGetTickCount();
 8005f98:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
 8005f9a:	4290      	cmp	r0, r2
 8005f9c:	f0c0 80a6 	bcc.w	80060ec <prvTimerTask+0x17c>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005fa0:	4287      	cmp	r7, r0
	xLastTime = xTimeNow;
 8005fa2:	6028      	str	r0, [r5, #0]
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005fa4:	f200 80c7 	bhi.w	8006136 <prvTimerTask+0x1c6>
				( void ) xTaskResumeAll();
 8005fa8:	f7ff fc90 	bl	80058cc <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005fac:	6832      	ldr	r2, [r6, #0]
 8005fae:	68d2      	ldr	r2, [r2, #12]
 8005fb0:	f8d2 b00c 	ldr.w	fp, [r2, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005fb4:	f10b 0804 	add.w	r8, fp, #4
 8005fb8:	4640      	mov	r0, r8
 8005fba:	f7fe fae1 	bl	8004580 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005fbe:	f89b 0028 	ldrb.w	r0, [fp, #40]	; 0x28
 8005fc2:	0743      	lsls	r3, r0, #29
 8005fc4:	f100 80c6 	bmi.w	8006154 <prvTimerTask+0x1e4>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005fc8:	f020 0001 	bic.w	r0, r0, #1
 8005fcc:	f88b 0028 	strb.w	r0, [fp, #40]	; 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005fd0:	f8db 3020 	ldr.w	r3, [fp, #32]
 8005fd4:	4658      	mov	r0, fp
 8005fd6:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005fd8:	2200      	movs	r2, #0
 8005fda:	a902      	add	r1, sp, #8
 8005fdc:	6820      	ldr	r0, [r4, #0]
 8005fde:	f7fe fe67 	bl	8004cb0 <xQueueReceive>
 8005fe2:	2800      	cmp	r0, #0
 8005fe4:	d0cc      	beq.n	8005f80 <prvTimerTask+0x10>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005fe6:	9b02      	ldr	r3, [sp, #8]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	db6e      	blt.n	80060ca <prvTimerTask+0x15a>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005fec:	9f04      	ldr	r7, [sp, #16]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005fee:	697b      	ldr	r3, [r7, #20]
 8005ff0:	b113      	cbz	r3, 8005ff8 <prvTimerTask+0x88>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005ff2:	1d38      	adds	r0, r7, #4
 8005ff4:	f7fe fac4 	bl	8004580 <uxListRemove>
	xTimeNow = xTaskGetTickCount();
 8005ff8:	f7ff fb1c 	bl	8005634 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8005ffc:	682b      	ldr	r3, [r5, #0]
	xTimeNow = xTaskGetTickCount();
 8005ffe:	4680      	mov	r8, r0
	if( xTimeNow < xLastTime )
 8006000:	4298      	cmp	r0, r3
 8006002:	d37a      	bcc.n	80060fa <prvTimerTask+0x18a>
			switch( xMessage.xMessageID )
 8006004:	9b02      	ldr	r3, [sp, #8]
	xLastTime = xTimeNow;
 8006006:	f8c5 8000 	str.w	r8, [r5]
			switch( xMessage.xMessageID )
 800600a:	2b09      	cmp	r3, #9
 800600c:	d8e4      	bhi.n	8005fd8 <prvTimerTask+0x68>
 800600e:	e8df f003 	tbb	[pc, r3]
 8006012:	0505      	.short	0x0505
 8006014:	53364c05 	.word	0x53364c05
 8006018:	364c0505 	.word	0x364c0505
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800601c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006020:	9b03      	ldr	r3, [sp, #12]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006022:	f042 0201 	orr.w	r2, r2, #1
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006026:	69b9      	ldr	r1, [r7, #24]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006028:	613f      	str	r7, [r7, #16]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800602a:	f887 2028 	strb.w	r2, [r7, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800602e:	185a      	adds	r2, r3, r1
 8006030:	bf2c      	ite	cs
 8006032:	2001      	movcs	r0, #1
 8006034:	2000      	movcc	r0, #0
	if( xNextExpiryTime <= xTimeNow )
 8006036:	4542      	cmp	r2, r8
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006038:	607a      	str	r2, [r7, #4]
	if( xNextExpiryTime <= xTimeNow )
 800603a:	d87e      	bhi.n	800613a <prvTimerTask+0x1ca>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800603c:	eba8 0303 	sub.w	r3, r8, r3
 8006040:	4299      	cmp	r1, r3
 8006042:	f200 80b0 	bhi.w	80061a6 <prvTimerTask+0x236>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006046:	6a3b      	ldr	r3, [r7, #32]
 8006048:	4638      	mov	r0, r7
 800604a:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800604c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006050:	0759      	lsls	r1, r3, #29
 8006052:	d5c1      	bpl.n	8005fd8 <prvTimerTask+0x68>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006054:	2200      	movs	r2, #0
 8006056:	69bb      	ldr	r3, [r7, #24]
 8006058:	4638      	mov	r0, r7
 800605a:	9200      	str	r2, [sp, #0]
 800605c:	9a03      	ldr	r2, [sp, #12]
 800605e:	441a      	add	r2, r3
 8006060:	2300      	movs	r3, #0
 8006062:	4619      	mov	r1, r3
 8006064:	f7ff ff0e 	bl	8005e84 <xTimerGenericCommand>
							configASSERT( xResult );
 8006068:	2800      	cmp	r0, #0
 800606a:	d1b5      	bne.n	8005fd8 <prvTimerTask+0x68>
 800606c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006070:	f383 8811 	msr	BASEPRI, r3
 8006074:	f3bf 8f6f 	isb	sy
 8006078:	f3bf 8f4f 	dsb	sy
 800607c:	e7fe      	b.n	800607c <prvTimerTask+0x10c>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800607e:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006082:	9b03      	ldr	r3, [sp, #12]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006084:	f042 0201 	orr.w	r2, r2, #1
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006088:	61bb      	str	r3, [r7, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800608a:	f887 2028 	strb.w	r2, [r7, #40]	; 0x28
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800608e:	2b00      	cmp	r3, #0
 8006090:	f000 8095 	beq.w	80061be <prvTimerTask+0x24e>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006094:	4443      	add	r3, r8
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006096:	1d39      	adds	r1, r7, #4
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006098:	613f      	str	r7, [r7, #16]
	if( xNextExpiryTime <= xTimeNow )
 800609a:	4543      	cmp	r3, r8
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800609c:	607b      	str	r3, [r7, #4]
	if( xNextExpiryTime <= xTimeNow )
 800609e:	d855      	bhi.n	800614c <prvTimerTask+0x1dc>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80060a0:	4b4e      	ldr	r3, [pc, #312]	; (80061dc <prvTimerTask+0x26c>)
 80060a2:	6818      	ldr	r0, [r3, #0]
 80060a4:	f7fe fa54 	bl	8004550 <vListInsert>
	return xProcessTimerNow;
 80060a8:	e796      	b.n	8005fd8 <prvTimerTask+0x68>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80060aa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80060ae:	f023 0301 	bic.w	r3, r3, #1
 80060b2:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
					break;
 80060b6:	e78f      	b.n	8005fd8 <prvTimerTask+0x68>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80060b8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80060bc:	079a      	lsls	r2, r3, #30
 80060be:	d569      	bpl.n	8006194 <prvTimerTask+0x224>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80060c0:	f023 0301 	bic.w	r3, r3, #1
 80060c4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 80060c8:	e786      	b.n	8005fd8 <prvTimerTask+0x68>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80060ca:	9b03      	ldr	r3, [sp, #12]
 80060cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80060d0:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80060d2:	9b02      	ldr	r3, [sp, #8]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	f6ff af7f 	blt.w	8005fd8 <prvTimerTask+0x68>
 80060da:	e787      	b.n	8005fec <prvTimerTask+0x7c>
	vTaskSuspendAll();
 80060dc:	f7ff faa2 	bl	8005624 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 80060e0:	f7ff faa8 	bl	8005634 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 80060e4:	682a      	ldr	r2, [r5, #0]
	xTimeNow = xTaskGetTickCount();
 80060e6:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
 80060e8:	4290      	cmp	r0, r2
 80060ea:	d209      	bcs.n	8006100 <prvTimerTask+0x190>
		prvSwitchTimerLists();
 80060ec:	f7ff fefe 	bl	8005eec <prvSwitchTimerLists>
	xLastTime = xTimeNow;
 80060f0:	f8c5 a000 	str.w	sl, [r5]
			( void ) xTaskResumeAll();
 80060f4:	f7ff fbea 	bl	80058cc <xTaskResumeAll>
 80060f8:	e76e      	b.n	8005fd8 <prvTimerTask+0x68>
		prvSwitchTimerLists();
 80060fa:	f7ff fef7 	bl	8005eec <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80060fe:	e781      	b.n	8006004 <prvTimerTask+0x94>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006100:	4b36      	ldr	r3, [pc, #216]	; (80061dc <prvTimerTask+0x26c>)
	xLastTime = xTimeNow;
 8006102:	f8c5 a000 	str.w	sl, [r5]
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006106:	681a      	ldr	r2, [r3, #0]
 8006108:	6812      	ldr	r2, [r2, #0]
 800610a:	fab2 f282 	clz	r2, r2
 800610e:	0952      	lsrs	r2, r2, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006110:	eba7 010a 	sub.w	r1, r7, sl
 8006114:	6820      	ldr	r0, [r4, #0]
 8006116:	f7ff f829 	bl	800516c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800611a:	f7ff fbd7 	bl	80058cc <xTaskResumeAll>
 800611e:	2800      	cmp	r0, #0
 8006120:	f47f af5a 	bne.w	8005fd8 <prvTimerTask+0x68>
					portYIELD_WITHIN_API();
 8006124:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006128:	f8c9 3d04 	str.w	r3, [r9, #3332]	; 0xd04
 800612c:	f3bf 8f4f 	dsb	sy
 8006130:	f3bf 8f6f 	isb	sy
 8006134:	e750      	b.n	8005fd8 <prvTimerTask+0x68>
 8006136:	2200      	movs	r2, #0
 8006138:	e7ea      	b.n	8006110 <prvTimerTask+0x1a0>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800613a:	4543      	cmp	r3, r8
 800613c:	d901      	bls.n	8006142 <prvTimerTask+0x1d2>
 800613e:	2800      	cmp	r0, #0
 8006140:	d081      	beq.n	8006046 <prvTimerTask+0xd6>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006142:	1d39      	adds	r1, r7, #4
 8006144:	6830      	ldr	r0, [r6, #0]
 8006146:	f7fe fa03 	bl	8004550 <vListInsert>
	return xProcessTimerNow;
 800614a:	e745      	b.n	8005fd8 <prvTimerTask+0x68>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800614c:	6830      	ldr	r0, [r6, #0]
 800614e:	f7fe f9ff 	bl	8004550 <vListInsert>
 8006152:	e741      	b.n	8005fd8 <prvTimerTask+0x68>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006154:	f8db 2018 	ldr.w	r2, [fp, #24]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006158:	f8cb b010 	str.w	fp, [fp, #16]
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800615c:	18b8      	adds	r0, r7, r2
	if( xNextExpiryTime <= xTimeNow )
 800615e:	4582      	cmp	sl, r0
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006160:	f8cb 0004 	str.w	r0, [fp, #4]
	if( xNextExpiryTime <= xTimeNow )
 8006164:	d31a      	bcc.n	800619c <prvTimerTask+0x22c>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006166:	ebaa 0307 	sub.w	r3, sl, r7
 800616a:	429a      	cmp	r2, r3
 800616c:	d821      	bhi.n	80061b2 <prvTimerTask+0x242>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800616e:	2300      	movs	r3, #0
 8006170:	463a      	mov	r2, r7
 8006172:	4658      	mov	r0, fp
 8006174:	4619      	mov	r1, r3
 8006176:	9300      	str	r3, [sp, #0]
 8006178:	f7ff fe84 	bl	8005e84 <xTimerGenericCommand>
			configASSERT( xResult );
 800617c:	2800      	cmp	r0, #0
 800617e:	f47f af27 	bne.w	8005fd0 <prvTimerTask+0x60>
 8006182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006186:	f383 8811 	msr	BASEPRI, r3
 800618a:	f3bf 8f6f 	isb	sy
 800618e:	f3bf 8f4f 	dsb	sy
 8006192:	e7fe      	b.n	8006192 <prvTimerTask+0x222>
							vPortFree( pxTimer );
 8006194:	4638      	mov	r0, r7
 8006196:	f000 fa9f 	bl	80066d8 <vPortFree>
 800619a:	e71d      	b.n	8005fd8 <prvTimerTask+0x68>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800619c:	4641      	mov	r1, r8
 800619e:	6830      	ldr	r0, [r6, #0]
 80061a0:	f7fe f9d6 	bl	8004550 <vListInsert>
	return xProcessTimerNow;
 80061a4:	e714      	b.n	8005fd0 <prvTimerTask+0x60>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80061a6:	4b0d      	ldr	r3, [pc, #52]	; (80061dc <prvTimerTask+0x26c>)
 80061a8:	1d39      	adds	r1, r7, #4
 80061aa:	6818      	ldr	r0, [r3, #0]
 80061ac:	f7fe f9d0 	bl	8004550 <vListInsert>
	return xProcessTimerNow;
 80061b0:	e712      	b.n	8005fd8 <prvTimerTask+0x68>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80061b2:	4b0a      	ldr	r3, [pc, #40]	; (80061dc <prvTimerTask+0x26c>)
 80061b4:	4641      	mov	r1, r8
 80061b6:	6818      	ldr	r0, [r3, #0]
 80061b8:	f7fe f9ca 	bl	8004550 <vListInsert>
	return xProcessTimerNow;
 80061bc:	e708      	b.n	8005fd0 <prvTimerTask+0x60>
 80061be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061c2:	f383 8811 	msr	BASEPRI, r3
 80061c6:	f3bf 8f6f 	isb	sy
 80061ca:	f3bf 8f4f 	dsb	sy
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80061ce:	e7fe      	b.n	80061ce <prvTimerTask+0x25e>
 80061d0:	24002124 	.word	0x24002124
 80061d4:	240021f4 	.word	0x240021f4
 80061d8:	24002248 	.word	0x24002248
 80061dc:	24002128 	.word	0x24002128

080061e0 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80061e0:	4808      	ldr	r0, [pc, #32]	; (8006204 <prvPortStartFirstTask+0x24>)
 80061e2:	6800      	ldr	r0, [r0, #0]
 80061e4:	6800      	ldr	r0, [r0, #0]
 80061e6:	f380 8808 	msr	MSP, r0
 80061ea:	f04f 0000 	mov.w	r0, #0
 80061ee:	f380 8814 	msr	CONTROL, r0
 80061f2:	b662      	cpsie	i
 80061f4:	b661      	cpsie	f
 80061f6:	f3bf 8f4f 	dsb	sy
 80061fa:	f3bf 8f6f 	isb	sy
 80061fe:	df00      	svc	0
 8006200:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006202:	0000      	.short	0x0000
 8006204:	e000ed08 	.word	0xe000ed08

08006208 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006208:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006218 <vPortEnableVFP+0x10>
 800620c:	6801      	ldr	r1, [r0, #0]
 800620e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006212:	6001      	str	r1, [r0, #0]
 8006214:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006216:	0000      	.short	0x0000
 8006218:	e000ed88 	.word	0xe000ed88

0800621c <prvTaskExitError>:
	configASSERT( uxCriticalNesting == ~0UL );
 800621c:	4b0e      	ldr	r3, [pc, #56]	; (8006258 <prvTaskExitError+0x3c>)
{
 800621e:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8006220:	2200      	movs	r2, #0
	configASSERT( uxCriticalNesting == ~0UL );
 8006222:	681b      	ldr	r3, [r3, #0]
volatile uint32_t ulDummy = 0;
 8006224:	9201      	str	r2, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 8006226:	3301      	adds	r3, #1
 8006228:	d008      	beq.n	800623c <prvTaskExitError+0x20>
 800622a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800622e:	f383 8811 	msr	BASEPRI, r3
 8006232:	f3bf 8f6f 	isb	sy
 8006236:	f3bf 8f4f 	dsb	sy
 800623a:	e7fe      	b.n	800623a <prvTaskExitError+0x1e>
 800623c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006240:	f383 8811 	msr	BASEPRI, r3
 8006244:	f3bf 8f6f 	isb	sy
 8006248:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 800624c:	9b01      	ldr	r3, [sp, #4]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d0fc      	beq.n	800624c <prvTaskExitError+0x30>
}
 8006252:	b002      	add	sp, #8
 8006254:	4770      	bx	lr
 8006256:	bf00      	nop
 8006258:	24000024 	.word	0x24000024

0800625c <pxPortInitialiseStack>:
{
 800625c:	4603      	mov	r3, r0
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800625e:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006262:	4809      	ldr	r0, [pc, #36]	; (8006288 <pxPortInitialiseStack+0x2c>)
{
 8006264:	b410      	push	{r4}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006266:	f04f 7480 	mov.w	r4, #16777216	; 0x1000000
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800626a:	f843 0c0c 	str.w	r0, [r3, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800626e:	f843 2c20 	str.w	r2, [r3, #-32]
}
 8006272:	f1a3 0044 	sub.w	r0, r3, #68	; 0x44
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006276:	e943 1402 	strd	r1, r4, [r3, #-8]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800627a:	f06f 0102 	mvn.w	r1, #2
}
 800627e:	f85d 4b04 	ldr.w	r4, [sp], #4
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006282:	f843 1c24 	str.w	r1, [r3, #-36]
}
 8006286:	4770      	bx	lr
 8006288:	0800621d 	.word	0x0800621d
 800628c:	00000000 	.word	0x00000000

08006290 <SVC_Handler>:
	__asm volatile (
 8006290:	4b07      	ldr	r3, [pc, #28]	; (80062b0 <pxCurrentTCBConst2>)
 8006292:	6819      	ldr	r1, [r3, #0]
 8006294:	6808      	ldr	r0, [r1, #0]
 8006296:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800629a:	f380 8809 	msr	PSP, r0
 800629e:	f3bf 8f6f 	isb	sy
 80062a2:	f04f 0000 	mov.w	r0, #0
 80062a6:	f380 8811 	msr	BASEPRI, r0
 80062aa:	4770      	bx	lr
 80062ac:	f3af 8000 	nop.w

080062b0 <pxCurrentTCBConst2>:
 80062b0:	24001c28 	.word	0x24001c28

080062b4 <vPortEnterCritical>:
 80062b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062b8:	f383 8811 	msr	BASEPRI, r3
 80062bc:	f3bf 8f6f 	isb	sy
 80062c0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 80062c4:	4a0b      	ldr	r2, [pc, #44]	; (80062f4 <vPortEnterCritical+0x40>)
 80062c6:	6813      	ldr	r3, [r2, #0]
 80062c8:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 80062ca:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 80062cc:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 80062ce:	d000      	beq.n	80062d2 <vPortEnterCritical+0x1e>
}
 80062d0:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80062d2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80062d6:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 80062da:	b2db      	uxtb	r3, r3
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d0f7      	beq.n	80062d0 <vPortEnterCritical+0x1c>
 80062e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062e4:	f383 8811 	msr	BASEPRI, r3
 80062e8:	f3bf 8f6f 	isb	sy
 80062ec:	f3bf 8f4f 	dsb	sy
 80062f0:	e7fe      	b.n	80062f0 <vPortEnterCritical+0x3c>
 80062f2:	bf00      	nop
 80062f4:	24000024 	.word	0x24000024

080062f8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 80062f8:	4a08      	ldr	r2, [pc, #32]	; (800631c <vPortExitCritical+0x24>)
 80062fa:	6813      	ldr	r3, [r2, #0]
 80062fc:	b943      	cbnz	r3, 8006310 <vPortExitCritical+0x18>
 80062fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006302:	f383 8811 	msr	BASEPRI, r3
 8006306:	f3bf 8f6f 	isb	sy
 800630a:	f3bf 8f4f 	dsb	sy
 800630e:	e7fe      	b.n	800630e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8006310:	3b01      	subs	r3, #1
 8006312:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006314:	b90b      	cbnz	r3, 800631a <vPortExitCritical+0x22>
	__asm volatile
 8006316:	f383 8811 	msr	BASEPRI, r3
}
 800631a:	4770      	bx	lr
 800631c:	24000024 	.word	0x24000024

08006320 <PendSV_Handler>:
	__asm volatile
 8006320:	f3ef 8009 	mrs	r0, PSP
 8006324:	f3bf 8f6f 	isb	sy
 8006328:	4b15      	ldr	r3, [pc, #84]	; (8006380 <pxCurrentTCBConst>)
 800632a:	681a      	ldr	r2, [r3, #0]
 800632c:	f01e 0f10 	tst.w	lr, #16
 8006330:	bf08      	it	eq
 8006332:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006336:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800633a:	6010      	str	r0, [r2, #0]
 800633c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006340:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006344:	f380 8811 	msr	BASEPRI, r0
 8006348:	f3bf 8f4f 	dsb	sy
 800634c:	f3bf 8f6f 	isb	sy
 8006350:	f7ff fafc 	bl	800594c <vTaskSwitchContext>
 8006354:	f04f 0000 	mov.w	r0, #0
 8006358:	f380 8811 	msr	BASEPRI, r0
 800635c:	bc09      	pop	{r0, r3}
 800635e:	6819      	ldr	r1, [r3, #0]
 8006360:	6808      	ldr	r0, [r1, #0]
 8006362:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006366:	f01e 0f10 	tst.w	lr, #16
 800636a:	bf08      	it	eq
 800636c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006370:	f380 8809 	msr	PSP, r0
 8006374:	f3bf 8f6f 	isb	sy
 8006378:	4770      	bx	lr
 800637a:	bf00      	nop
 800637c:	f3af 8000 	nop.w

08006380 <pxCurrentTCBConst>:
 8006380:	24001c28 	.word	0x24001c28

08006384 <xPortSysTickHandler>:
{
 8006384:	b508      	push	{r3, lr}
	__asm volatile
 8006386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800638a:	f383 8811 	msr	BASEPRI, r3
 800638e:	f3bf 8f6f 	isb	sy
 8006392:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8006396:	f7ff f95b 	bl	8005650 <xTaskIncrementTick>
 800639a:	b128      	cbz	r0, 80063a8 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800639c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80063a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063a4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
 80063a8:	2300      	movs	r3, #0
 80063aa:	f383 8811 	msr	BASEPRI, r3
}
 80063ae:	bd08      	pop	{r3, pc}

080063b0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80063b0:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 80063b4:	2300      	movs	r3, #0
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80063b6:	4806      	ldr	r0, [pc, #24]	; (80063d0 <vPortSetupTimerInterrupt+0x20>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80063b8:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80063ba:	4906      	ldr	r1, [pc, #24]	; (80063d4 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80063bc:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80063be:	6803      	ldr	r3, [r0, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80063c0:	2007      	movs	r0, #7
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80063c2:	fba1 1303 	umull	r1, r3, r1, r3
 80063c6:	099b      	lsrs	r3, r3, #6
 80063c8:	3b01      	subs	r3, #1
 80063ca:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80063cc:	6110      	str	r0, [r2, #16]
}
 80063ce:	4770      	bx	lr
 80063d0:	24000000 	.word	0x24000000
 80063d4:	10624dd3 	.word	0x10624dd3

080063d8 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80063d8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80063dc:	4a3d      	ldr	r2, [pc, #244]	; (80064d4 <xPortStartScheduler+0xfc>)
 80063de:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	; 0xd00
 80063e2:	4291      	cmp	r1, r2
 80063e4:	d041      	beq.n	800646a <xPortStartScheduler+0x92>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80063e6:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 80063ea:	4b3b      	ldr	r3, [pc, #236]	; (80064d8 <xPortStartScheduler+0x100>)
 80063ec:	429a      	cmp	r2, r3
 80063ee:	d033      	beq.n	8006458 <xPortStartScheduler+0x80>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80063f0:	4b3a      	ldr	r3, [pc, #232]	; (80064dc <xPortStartScheduler+0x104>)
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80063f2:	20ff      	movs	r0, #255	; 0xff
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80063f4:	493a      	ldr	r1, [pc, #232]	; (80064e0 <xPortStartScheduler+0x108>)
{
 80063f6:	b530      	push	{r4, r5, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80063f8:	781a      	ldrb	r2, [r3, #0]
{
 80063fa:	b083      	sub	sp, #12
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80063fc:	4c39      	ldr	r4, [pc, #228]	; (80064e4 <xPortStartScheduler+0x10c>)
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80063fe:	b2d2      	uxtb	r2, r2
 8006400:	9201      	str	r2, [sp, #4]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006402:	2207      	movs	r2, #7
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006404:	7018      	strb	r0, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006406:	781b      	ldrb	r3, [r3, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006408:	6022      	str	r2, [r4, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800640a:	b2db      	uxtb	r3, r3
 800640c:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006410:	f89d 3003 	ldrb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006414:	f89d 2003 	ldrb.w	r2, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006418:	f003 0350 	and.w	r3, r3, #80	; 0x50
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800641c:	0610      	lsls	r0, r2, #24
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800641e:	700b      	strb	r3, [r1, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006420:	d511      	bpl.n	8006446 <xPortStartScheduler+0x6e>
 8006422:	2206      	movs	r2, #6
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006424:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8006428:	4610      	mov	r0, r2
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800642a:	3a01      	subs	r2, #1
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800642c:	005b      	lsls	r3, r3, #1
 800642e:	b2db      	uxtb	r3, r3
 8006430:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006434:	f89d 1003 	ldrb.w	r1, [sp, #3]
 8006438:	0609      	lsls	r1, r1, #24
 800643a:	d4f3      	bmi.n	8006424 <xPortStartScheduler+0x4c>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800643c:	2803      	cmp	r0, #3
 800643e:	6020      	str	r0, [r4, #0]
 8006440:	f88d 3003 	strb.w	r3, [sp, #3]
 8006444:	d01a      	beq.n	800647c <xPortStartScheduler+0xa4>
	__asm volatile
 8006446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800644a:	f383 8811 	msr	BASEPRI, r3
 800644e:	f3bf 8f6f 	isb	sy
 8006452:	f3bf 8f4f 	dsb	sy
 8006456:	e7fe      	b.n	8006456 <xPortStartScheduler+0x7e>
 8006458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800645c:	f383 8811 	msr	BASEPRI, r3
 8006460:	f3bf 8f6f 	isb	sy
 8006464:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006468:	e7fe      	b.n	8006468 <xPortStartScheduler+0x90>
 800646a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800646e:	f383 8811 	msr	BASEPRI, r3
 8006472:	f3bf 8f6f 	isb	sy
 8006476:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800647a:	e7fe      	b.n	800647a <xPortStartScheduler+0xa2>
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800647c:	9b01      	ldr	r3, [sp, #4]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800647e:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006482:	4a16      	ldr	r2, [pc, #88]	; (80064dc <xPortStartScheduler+0x104>)
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006484:	f44f 7140 	mov.w	r1, #768	; 0x300
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006488:	b2db      	uxtb	r3, r3
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800648a:	6021      	str	r1, [r4, #0]
	uxCriticalNesting = 0;
 800648c:	2400      	movs	r4, #0
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800648e:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006490:	f8d5 3d20 	ldr.w	r3, [r5, #3360]	; 0xd20
 8006494:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006498:	f8c5 3d20 	str.w	r3, [r5, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800649c:	f8d5 3d20 	ldr.w	r3, [r5, #3360]	; 0xd20
 80064a0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80064a4:	f8c5 3d20 	str.w	r3, [r5, #3360]	; 0xd20
	vPortSetupTimerInterrupt();
 80064a8:	f7ff ff82 	bl	80063b0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 80064ac:	4b0e      	ldr	r3, [pc, #56]	; (80064e8 <xPortStartScheduler+0x110>)
 80064ae:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 80064b0:	f7ff feaa 	bl	8006208 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80064b4:	f8d5 3f34 	ldr.w	r3, [r5, #3892]	; 0xf34
 80064b8:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80064bc:	f8c5 3f34 	str.w	r3, [r5, #3892]	; 0xf34
	prvPortStartFirstTask();
 80064c0:	f7ff fe8e 	bl	80061e0 <prvPortStartFirstTask>
	vTaskSwitchContext();
 80064c4:	f7ff fa42 	bl	800594c <vTaskSwitchContext>
}
 80064c8:	4620      	mov	r0, r4
	prvTaskExitError();
 80064ca:	f7ff fea7 	bl	800621c <prvTaskExitError>
}
 80064ce:	b003      	add	sp, #12
 80064d0:	bd30      	pop	{r4, r5, pc}
 80064d2:	bf00      	nop
 80064d4:	410fc271 	.word	0x410fc271
 80064d8:	410fc270 	.word	0x410fc270
 80064dc:	e000e400 	.word	0xe000e400
 80064e0:	24002250 	.word	0x24002250
 80064e4:	24002254 	.word	0x24002254
 80064e8:	24000024 	.word	0x24000024

080064ec <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80064ec:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80064f0:	2b0f      	cmp	r3, #15
 80064f2:	d90e      	bls.n	8006512 <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80064f4:	4911      	ldr	r1, [pc, #68]	; (800653c <vPortValidateInterruptPriority+0x50>)
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80064f6:	4a12      	ldr	r2, [pc, #72]	; (8006540 <vPortValidateInterruptPriority+0x54>)
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80064f8:	5c5b      	ldrb	r3, [r3, r1]
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80064fa:	7812      	ldrb	r2, [r2, #0]
 80064fc:	429a      	cmp	r2, r3
 80064fe:	d908      	bls.n	8006512 <vPortValidateInterruptPriority+0x26>
 8006500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006504:	f383 8811 	msr	BASEPRI, r3
 8006508:	f3bf 8f6f 	isb	sy
 800650c:	f3bf 8f4f 	dsb	sy
 8006510:	e7fe      	b.n	8006510 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006512:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006516:	4a0b      	ldr	r2, [pc, #44]	; (8006544 <vPortValidateInterruptPriority+0x58>)
 8006518:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 800651c:	6812      	ldr	r2, [r2, #0]
 800651e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006522:	4293      	cmp	r3, r2
 8006524:	d908      	bls.n	8006538 <vPortValidateInterruptPriority+0x4c>
 8006526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800652a:	f383 8811 	msr	BASEPRI, r3
 800652e:	f3bf 8f6f 	isb	sy
 8006532:	f3bf 8f4f 	dsb	sy
 8006536:	e7fe      	b.n	8006536 <vPortValidateInterruptPriority+0x4a>
	}
 8006538:	4770      	bx	lr
 800653a:	bf00      	nop
 800653c:	e000e3f0 	.word	0xe000e3f0
 8006540:	24002250 	.word	0x24002250
 8006544:	24002254 	.word	0x24002254

08006548 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006548:	4b16      	ldr	r3, [pc, #88]	; (80065a4 <prvInsertBlockIntoFreeList+0x5c>)
 800654a:	461a      	mov	r2, r3
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	4283      	cmp	r3, r0
 8006550:	d3fb      	bcc.n	800654a <prvInsertBlockIntoFreeList+0x2>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006552:	6851      	ldr	r1, [r2, #4]
 8006554:	eb02 0c01 	add.w	ip, r2, r1
 8006558:	4560      	cmp	r0, ip
 800655a:	d01a      	beq.n	8006592 <prvInsertBlockIntoFreeList+0x4a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800655c:	6841      	ldr	r1, [r0, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800655e:	eb00 0c01 	add.w	ip, r0, r1
 8006562:	4563      	cmp	r3, ip
 8006564:	d005      	beq.n	8006572 <prvInsertBlockIntoFreeList+0x2a>

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006566:	4282      	cmp	r2, r0
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006568:	6003      	str	r3, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800656a:	bf18      	it	ne
 800656c:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
 800656e:	4770      	bx	lr
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006570:	4610      	mov	r0, r2
{
 8006572:	b410      	push	{r4}
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006574:	4c0c      	ldr	r4, [pc, #48]	; (80065a8 <prvInsertBlockIntoFreeList+0x60>)
 8006576:	6824      	ldr	r4, [r4, #0]
 8006578:	42a3      	cmp	r3, r4
 800657a:	d003      	beq.n	8006584 <prvInsertBlockIntoFreeList+0x3c>
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800657c:	e9d3 3400 	ldrd	r3, r4, [r3]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006580:	4421      	add	r1, r4
 8006582:	6041      	str	r1, [r0, #4]
	if( pxIterator != pxBlockToInsert )
 8006584:	4282      	cmp	r2, r0
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006586:	6003      	str	r3, [r0, #0]
	if( pxIterator != pxBlockToInsert )
 8006588:	d000      	beq.n	800658c <prvInsertBlockIntoFreeList+0x44>
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800658a:	6010      	str	r0, [r2, #0]
	}
}
 800658c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006590:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006592:	6840      	ldr	r0, [r0, #4]
 8006594:	4401      	add	r1, r0
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006596:	1850      	adds	r0, r2, r1
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006598:	6051      	str	r1, [r2, #4]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800659a:	4283      	cmp	r3, r0
 800659c:	d0e8      	beq.n	8006570 <prvInsertBlockIntoFreeList+0x28>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800659e:	6013      	str	r3, [r2, #0]
	if( pxIterator != pxBlockToInsert )
 80065a0:	4770      	bx	lr
 80065a2:	bf00      	nop
 80065a4:	24009a70 	.word	0x24009a70
 80065a8:	24002258 	.word	0x24002258

080065ac <pvPortMalloc>:
{
 80065ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if( pxEnd == NULL )
 80065b0:	4e42      	ldr	r6, [pc, #264]	; (80066bc <pvPortMalloc+0x110>)
{
 80065b2:	4604      	mov	r4, r0
	vTaskSuspendAll();
 80065b4:	f7ff f836 	bl	8005624 <vTaskSuspendAll>
		if( pxEnd == NULL )
 80065b8:	6833      	ldr	r3, [r6, #0]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d05a      	beq.n	8006674 <pvPortMalloc+0xc8>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80065be:	4b40      	ldr	r3, [pc, #256]	; (80066c0 <pvPortMalloc+0x114>)
 80065c0:	681d      	ldr	r5, [r3, #0]
			if( xWantedSize > 0 )
 80065c2:	422c      	tst	r4, r5
 80065c4:	d12e      	bne.n	8006624 <pvPortMalloc+0x78>
 80065c6:	b36c      	cbz	r4, 8006624 <pvPortMalloc+0x78>
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80065c8:	0760      	lsls	r0, r4, #29
				xWantedSize += xHeapStructSize;
 80065ca:	f104 0108 	add.w	r1, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80065ce:	d002      	beq.n	80065d6 <pvPortMalloc+0x2a>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80065d0:	f021 0107 	bic.w	r1, r1, #7
 80065d4:	3108      	adds	r1, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80065d6:	b329      	cbz	r1, 8006624 <pvPortMalloc+0x78>
 80065d8:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 80066d4 <pvPortMalloc+0x128>
 80065dc:	f8d8 7000 	ldr.w	r7, [r8]
 80065e0:	428f      	cmp	r7, r1
 80065e2:	d31f      	bcc.n	8006624 <pvPortMalloc+0x78>
				pxBlock = xStart.pxNextFreeBlock;
 80065e4:	4837      	ldr	r0, [pc, #220]	; (80066c4 <pvPortMalloc+0x118>)
 80065e6:	6804      	ldr	r4, [r0, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80065e8:	e003      	b.n	80065f2 <pvPortMalloc+0x46>
 80065ea:	6823      	ldr	r3, [r4, #0]
 80065ec:	b123      	cbz	r3, 80065f8 <pvPortMalloc+0x4c>
 80065ee:	4620      	mov	r0, r4
 80065f0:	461c      	mov	r4, r3
 80065f2:	6862      	ldr	r2, [r4, #4]
 80065f4:	428a      	cmp	r2, r1
 80065f6:	d3f8      	bcc.n	80065ea <pvPortMalloc+0x3e>
				if( pxBlock != pxEnd )
 80065f8:	6833      	ldr	r3, [r6, #0]
 80065fa:	42a3      	cmp	r3, r4
 80065fc:	d012      	beq.n	8006624 <pvPortMalloc+0x78>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80065fe:	6823      	ldr	r3, [r4, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006600:	6806      	ldr	r6, [r0, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006602:	6003      	str	r3, [r0, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006604:	1a53      	subs	r3, r2, r1
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006606:	3608      	adds	r6, #8
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006608:	2b10      	cmp	r3, #16
 800660a:	d916      	bls.n	800663a <pvPortMalloc+0x8e>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800660c:	1860      	adds	r0, r4, r1
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800660e:	0742      	lsls	r2, r0, #29
 8006610:	d00e      	beq.n	8006630 <pvPortMalloc+0x84>
 8006612:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006616:	f383 8811 	msr	BASEPRI, r3
 800661a:	f3bf 8f6f 	isb	sy
 800661e:	f3bf 8f4f 	dsb	sy
 8006622:	e7fe      	b.n	8006622 <pvPortMalloc+0x76>
	( void ) xTaskResumeAll();
 8006624:	2600      	movs	r6, #0
 8006626:	f7ff f951 	bl	80058cc <xTaskResumeAll>
}
 800662a:	4630      	mov	r0, r6
 800662c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006630:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006632:	6061      	str	r1, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006634:	f7ff ff88 	bl	8006548 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006638:	6862      	ldr	r2, [r4, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800663a:	4b23      	ldr	r3, [pc, #140]	; (80066c8 <pvPortMalloc+0x11c>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800663c:	1abf      	subs	r7, r7, r2
					xNumberOfSuccessfulAllocations++;
 800663e:	4923      	ldr	r1, [pc, #140]	; (80066cc <pvPortMalloc+0x120>)
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006640:	4315      	orrs	r5, r2
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006642:	6818      	ldr	r0, [r3, #0]
					pxBlock->pxNextFreeBlock = NULL;
 8006644:	2200      	movs	r2, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006646:	f8c8 7000 	str.w	r7, [r8]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800664a:	4287      	cmp	r7, r0
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800664c:	bf38      	it	cc
 800664e:	601f      	strcc	r7, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006650:	680b      	ldr	r3, [r1, #0]
 8006652:	3301      	adds	r3, #1
					pxBlock->pxNextFreeBlock = NULL;
 8006654:	e9c4 2500 	strd	r2, r5, [r4]
					xNumberOfSuccessfulAllocations++;
 8006658:	600b      	str	r3, [r1, #0]
	( void ) xTaskResumeAll();
 800665a:	f7ff f937 	bl	80058cc <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800665e:	0773      	lsls	r3, r6, #29
 8006660:	d0e3      	beq.n	800662a <pvPortMalloc+0x7e>
 8006662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006666:	f383 8811 	msr	BASEPRI, r3
 800666a:	f3bf 8f6f 	isb	sy
 800666e:	f3bf 8f4f 	dsb	sy
 8006672:	e7fe      	b.n	8006672 <pvPortMalloc+0xc6>
	uxAddress = ( size_t ) ucHeap;
 8006674:	4b16      	ldr	r3, [pc, #88]	; (80066d0 <pvPortMalloc+0x124>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006676:	075d      	lsls	r5, r3, #29
 8006678:	d119      	bne.n	80066ae <pvPortMalloc+0x102>
 800667a:	f503 42f0 	add.w	r2, r3, #30720	; 0x7800
 800667e:	4619      	mov	r1, r3
	uxAddress -= xHeapStructSize;
 8006680:	3a08      	subs	r2, #8
	xStart.xBlockSize = ( size_t ) 0;
 8006682:	2000      	movs	r0, #0
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006684:	4d0f      	ldr	r5, [pc, #60]	; (80066c4 <pvPortMalloc+0x118>)
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006686:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800668a:	f022 0207 	bic.w	r2, r2, #7
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800668e:	1ad3      	subs	r3, r2, r3
	pxEnd = ( void * ) uxAddress;
 8006690:	6032      	str	r2, [r6, #0]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006692:	e9c5 1000 	strd	r1, r0, [r5]
	pxEnd->pxNextFreeBlock = NULL;
 8006696:	e9c2 0000 	strd	r0, r0, [r2]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800669a:	e9c1 2300 	strd	r2, r3, [r1]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800669e:	4a0a      	ldr	r2, [pc, #40]	; (80066c8 <pvPortMalloc+0x11c>)
}
 80066a0:	463d      	mov	r5, r7
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80066a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80066a4:	4a0b      	ldr	r2, [pc, #44]	; (80066d4 <pvPortMalloc+0x128>)
 80066a6:	6013      	str	r3, [r2, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80066a8:	4b05      	ldr	r3, [pc, #20]	; (80066c0 <pvPortMalloc+0x114>)
 80066aa:	601f      	str	r7, [r3, #0]
}
 80066ac:	e789      	b.n	80065c2 <pvPortMalloc+0x16>
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80066ae:	1dd9      	adds	r1, r3, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80066b0:	f503 42f0 	add.w	r2, r3, #30720	; 0x7800
	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80066b4:	f021 0107 	bic.w	r1, r1, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80066b8:	460b      	mov	r3, r1
 80066ba:	e7e1      	b.n	8006680 <pvPortMalloc+0xd4>
 80066bc:	24002258 	.word	0x24002258
 80066c0:	24009a5c 	.word	0x24009a5c
 80066c4:	24009a70 	.word	0x24009a70
 80066c8:	24009a64 	.word	0x24009a64
 80066cc:	24009a68 	.word	0x24009a68
 80066d0:	2400225c 	.word	0x2400225c
 80066d4:	24009a60 	.word	0x24009a60

080066d8 <vPortFree>:
	if( pv != NULL )
 80066d8:	b1d0      	cbz	r0, 8006710 <vPortFree+0x38>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80066da:	4a1c      	ldr	r2, [pc, #112]	; (800674c <vPortFree+0x74>)
 80066dc:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80066e0:	6812      	ldr	r2, [r2, #0]
 80066e2:	4213      	tst	r3, r2
 80066e4:	d00b      	beq.n	80066fe <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80066e6:	f850 1c08 	ldr.w	r1, [r0, #-8]
 80066ea:	b191      	cbz	r1, 8006712 <vPortFree+0x3a>
 80066ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066f0:	f383 8811 	msr	BASEPRI, r3
 80066f4:	f3bf 8f6f 	isb	sy
 80066f8:	f3bf 8f4f 	dsb	sy
 80066fc:	e7fe      	b.n	80066fc <vPortFree+0x24>
 80066fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006702:	f383 8811 	msr	BASEPRI, r3
 8006706:	f3bf 8f6f 	isb	sy
 800670a:	f3bf 8f4f 	dsb	sy
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800670e:	e7fe      	b.n	800670e <vPortFree+0x36>
 8006710:	4770      	bx	lr
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006712:	ea23 0302 	bic.w	r3, r3, r2
{
 8006716:	b500      	push	{lr}
 8006718:	b083      	sub	sp, #12
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800671a:	f840 3c04 	str.w	r3, [r0, #-4]
 800671e:	9001      	str	r0, [sp, #4]
				vTaskSuspendAll();
 8006720:	f7fe ff80 	bl	8005624 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006724:	4a0a      	ldr	r2, [pc, #40]	; (8006750 <vPortFree+0x78>)
 8006726:	9801      	ldr	r0, [sp, #4]
 8006728:	6811      	ldr	r1, [r2, #0]
 800672a:	f850 3c04 	ldr.w	r3, [r0, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800672e:	3808      	subs	r0, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006730:	440b      	add	r3, r1
 8006732:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006734:	f7ff ff08 	bl	8006548 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006738:	4a06      	ldr	r2, [pc, #24]	; (8006754 <vPortFree+0x7c>)
 800673a:	6813      	ldr	r3, [r2, #0]
 800673c:	3301      	adds	r3, #1
 800673e:	6013      	str	r3, [r2, #0]
}
 8006740:	b003      	add	sp, #12
 8006742:	f85d eb04 	ldr.w	lr, [sp], #4
				( void ) xTaskResumeAll();
 8006746:	f7ff b8c1 	b.w	80058cc <xTaskResumeAll>
 800674a:	bf00      	nop
 800674c:	24009a5c 	.word	0x24009a5c
 8006750:	24009a60 	.word	0x24009a60
 8006754:	24009a6c 	.word	0x24009a6c

08006758 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b082      	sub	sp, #8
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();
 800675c:	f7fd fc1e 	bl	8003f9c <sys_mark_tcpip_thread>

  LOCK_TCPIP_CORE();
 8006760:	f7fd fb62 	bl	8003e28 <sys_lock_tcpip_core>
  if (tcpip_init_done != NULL) {
 8006764:	4b2c      	ldr	r3, [pc, #176]	; (8006818 <tcpip_thread+0xc0>)
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	b113      	cbz	r3, 8006770 <tcpip_thread+0x18>
    tcpip_init_done(tcpip_init_done_arg);
 800676a:	4a2c      	ldr	r2, [pc, #176]	; (800681c <tcpip_thread+0xc4>)
 800676c:	6810      	ldr	r0, [r2, #0]
 800676e:	4798      	blx	r3
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8006770:	4d2b      	ldr	r5, [pc, #172]	; (8006820 <tcpip_thread+0xc8>)
      msg->msg.cb.function(msg->msg.cb.ctx);
      break;

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8006772:	4f2c      	ldr	r7, [pc, #176]	; (8006824 <tcpip_thread+0xcc>)
 8006774:	4e2c      	ldr	r6, [pc, #176]	; (8006828 <tcpip_thread+0xd0>)
 8006776:	e00e      	b.n	8006796 <tcpip_thread+0x3e>
  } else if (sleeptime == 0) {
 8006778:	b158      	cbz	r0, 8006792 <tcpip_thread+0x3a>
  UNLOCK_TCPIP_CORE();
 800677a:	f7fd fbd3 	bl	8003f24 <sys_unlock_tcpip_core>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800677e:	4622      	mov	r2, r4
 8006780:	a901      	add	r1, sp, #4
 8006782:	4628      	mov	r0, r5
 8006784:	f007 faf2 	bl	800dd6c <sys_arch_mbox_fetch>
 8006788:	4604      	mov	r4, r0
  LOCK_TCPIP_CORE();
 800678a:	f7fd fb4d 	bl	8003e28 <sys_lock_tcpip_core>
  if (res == SYS_ARCH_TIMEOUT) {
 800678e:	3401      	adds	r4, #1
 8006790:	d111      	bne.n	80067b6 <tcpip_thread+0x5e>
    sys_check_timeouts();
 8006792:	f005 fd71 	bl	800c278 <sys_check_timeouts>
  LWIP_ASSERT_CORE_LOCKED();
 8006796:	f7fd fbcf 	bl	8003f38 <sys_check_core_locking>
  sleeptime = sys_timeouts_sleeptime();
 800679a:	f005 fd97 	bl	800c2cc <sys_timeouts_sleeptime>
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800679e:	1c43      	adds	r3, r0, #1
  sleeptime = sys_timeouts_sleeptime();
 80067a0:	4604      	mov	r4, r0
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 80067a2:	d1e9      	bne.n	8006778 <tcpip_thread+0x20>
    UNLOCK_TCPIP_CORE();
 80067a4:	f7fd fbbe 	bl	8003f24 <sys_unlock_tcpip_core>
    sys_arch_mbox_fetch(mbox, msg, 0);
 80067a8:	2200      	movs	r2, #0
 80067aa:	a901      	add	r1, sp, #4
 80067ac:	4628      	mov	r0, r5
 80067ae:	f007 fadd 	bl	800dd6c <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 80067b2:	f7fd fb39 	bl	8003e28 <sys_lock_tcpip_core>
    if (msg == NULL) {
 80067b6:	9c01      	ldr	r4, [sp, #4]
 80067b8:	b164      	cbz	r4, 80067d4 <tcpip_thread+0x7c>
  switch (msg->type) {
 80067ba:	7823      	ldrb	r3, [r4, #0]
 80067bc:	2b01      	cmp	r3, #1
 80067be:	d01e      	beq.n	80067fe <tcpip_thread+0xa6>
 80067c0:	2b02      	cmp	r3, #2
 80067c2:	d018      	beq.n	80067f6 <tcpip_thread+0x9e>
 80067c4:	b16b      	cbz	r3, 80067e2 <tcpip_thread+0x8a>
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80067c6:	463b      	mov	r3, r7
 80067c8:	22cf      	movs	r2, #207	; 0xcf
 80067ca:	4631      	mov	r1, r6
 80067cc:	4817      	ldr	r0, [pc, #92]	; (800682c <tcpip_thread+0xd4>)
 80067ce:	f007 fc29 	bl	800e024 <iprintf>
      break;
 80067d2:	e7e0      	b.n	8006796 <tcpip_thread+0x3e>
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80067d4:	463b      	mov	r3, r7
 80067d6:	2291      	movs	r2, #145	; 0x91
 80067d8:	4631      	mov	r1, r6
 80067da:	4814      	ldr	r0, [pc, #80]	; (800682c <tcpip_thread+0xd4>)
 80067dc:	f007 fc22 	bl	800e024 <iprintf>
      continue;
 80067e0:	e7d9      	b.n	8006796 <tcpip_thread+0x3e>
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 80067e2:	e9d4 1302 	ldrd	r1, r3, [r4, #8]
 80067e6:	6860      	ldr	r0, [r4, #4]
 80067e8:	4798      	blx	r3
 80067ea:	b980      	cbnz	r0, 800680e <tcpip_thread+0xb6>
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 80067ec:	4621      	mov	r1, r4
 80067ee:	2009      	movs	r0, #9
 80067f0:	f000 fcb2 	bl	8007158 <memp_free>
      break;
 80067f4:	e7cf      	b.n	8006796 <tcpip_thread+0x3e>
      msg->msg.cb.function(msg->msg.cb.ctx);
 80067f6:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 80067fa:	4798      	blx	r3
      break;
 80067fc:	e7cb      	b.n	8006796 <tcpip_thread+0x3e>
      msg->msg.cb.function(msg->msg.cb.ctx);
 80067fe:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 8006802:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8006804:	4621      	mov	r1, r4
 8006806:	2008      	movs	r0, #8
 8006808:	f000 fca6 	bl	8007158 <memp_free>
      break;
 800680c:	e7c3      	b.n	8006796 <tcpip_thread+0x3e>
        pbuf_free(msg->msg.inp.p);
 800680e:	6860      	ldr	r0, [r4, #4]
 8006810:	f001 f868 	bl	80078e4 <pbuf_free>
 8006814:	e7ea      	b.n	80067ec <tcpip_thread+0x94>
 8006816:	bf00      	nop
 8006818:	24009a7c 	.word	0x24009a7c
 800681c:	24009a80 	.word	0x24009a80
 8006820:	24009a84 	.word	0x24009a84
 8006824:	0800f7e0 	.word	0x0800f7e0
 8006828:	0800f810 	.word	0x0800f810
 800682c:	0800ef30 	.word	0x0800ef30

08006830 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8006830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006832:	4607      	mov	r7, r0
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8006834:	4813      	ldr	r0, [pc, #76]	; (8006884 <tcpip_inpkt+0x54>)
{
 8006836:	460e      	mov	r6, r1
 8006838:	4615      	mov	r5, r2
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800683a:	f007 fab7 	bl	800ddac <sys_mbox_valid>
 800683e:	b178      	cbz	r0, 8006860 <tcpip_inpkt+0x30>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8006840:	2009      	movs	r0, #9
 8006842:	f000 fc43 	bl	80070cc <memp_malloc>
  if (msg == NULL) {
 8006846:	4604      	mov	r4, r0
 8006848:	b1c0      	cbz	r0, 800687c <tcpip_inpkt+0x4c>
    return ERR_MEM;
  }

  msg->type = TCPIP_MSG_INPKT;
 800684a:	2300      	movs	r3, #0
  msg->msg.inp.p = p;
 800684c:	6047      	str	r7, [r0, #4]
  msg->msg.inp.netif = inp;
 800684e:	6086      	str	r6, [r0, #8]
  msg->msg.inp.input_fn = input_fn;
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8006850:	4601      	mov	r1, r0
  msg->type = TCPIP_MSG_INPKT;
 8006852:	7003      	strb	r3, [r0, #0]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8006854:	480b      	ldr	r0, [pc, #44]	; (8006884 <tcpip_inpkt+0x54>)
  msg->msg.inp.input_fn = input_fn;
 8006856:	60e5      	str	r5, [r4, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8006858:	f007 fa78 	bl	800dd4c <sys_mbox_trypost>
 800685c:	b938      	cbnz	r0, 800686e <tcpip_inpkt+0x3e>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
    return ERR_MEM;
  }
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800685e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8006860:	4b09      	ldr	r3, [pc, #36]	; (8006888 <tcpip_inpkt+0x58>)
 8006862:	22fc      	movs	r2, #252	; 0xfc
 8006864:	4909      	ldr	r1, [pc, #36]	; (800688c <tcpip_inpkt+0x5c>)
 8006866:	480a      	ldr	r0, [pc, #40]	; (8006890 <tcpip_inpkt+0x60>)
 8006868:	f007 fbdc 	bl	800e024 <iprintf>
 800686c:	e7e8      	b.n	8006840 <tcpip_inpkt+0x10>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800686e:	4621      	mov	r1, r4
 8006870:	2009      	movs	r0, #9
 8006872:	f000 fc71 	bl	8007158 <memp_free>
    return ERR_MEM;
 8006876:	f04f 30ff 	mov.w	r0, #4294967295
}
 800687a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return ERR_MEM;
 800687c:	f04f 30ff 	mov.w	r0, #4294967295
}
 8006880:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006882:	bf00      	nop
 8006884:	24009a84 	.word	0x24009a84
 8006888:	0800f7e0 	.word	0x0800f7e0
 800688c:	0800f830 	.word	0x0800f830
 8006890:	0800ef30 	.word	0x0800ef30

08006894 <tcpip_input>:
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8006894:	f891 302d 	ldrb.w	r3, [r1, #45]	; 0x2d
 8006898:	f013 0f18 	tst.w	r3, #24
 800689c:	d002      	beq.n	80068a4 <tcpip_input+0x10>
    return tcpip_inpkt(p, inp, ethernet_input);
 800689e:	4a03      	ldr	r2, [pc, #12]	; (80068ac <tcpip_input+0x18>)
 80068a0:	f7ff bfc6 	b.w	8006830 <tcpip_inpkt>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 80068a4:	4a02      	ldr	r2, [pc, #8]	; (80068b0 <tcpip_input+0x1c>)
 80068a6:	f7ff bfc3 	b.w	8006830 <tcpip_inpkt>
 80068aa:	bf00      	nop
 80068ac:	0800dc15 	.word	0x0800dc15
 80068b0:	0800d041 	.word	0x0800d041

080068b4 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 80068b4:	b570      	push	{r4, r5, r6, lr}
 80068b6:	4606      	mov	r6, r0
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80068b8:	4812      	ldr	r0, [pc, #72]	; (8006904 <tcpip_try_callback+0x50>)
{
 80068ba:	460d      	mov	r5, r1
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80068bc:	f007 fa76 	bl	800ddac <sys_mbox_valid>
 80068c0:	b170      	cbz	r0, 80068e0 <tcpip_try_callback+0x2c>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 80068c2:	2008      	movs	r0, #8
 80068c4:	f000 fc02 	bl	80070cc <memp_malloc>
  if (msg == NULL) {
 80068c8:	4604      	mov	r4, r0
 80068ca:	b1c0      	cbz	r0, 80068fe <tcpip_try_callback+0x4a>
    return ERR_MEM;
  }

  msg->type = TCPIP_MSG_CALLBACK;
 80068cc:	2301      	movs	r3, #1
  msg->msg.cb.function = function;
  msg->msg.cb.ctx = ctx;

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80068ce:	4601      	mov	r1, r0
  msg->msg.cb.ctx = ctx;
 80068d0:	e9c0 6501 	strd	r6, r5, [r0, #4]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80068d4:	480b      	ldr	r0, [pc, #44]	; (8006904 <tcpip_try_callback+0x50>)
  msg->type = TCPIP_MSG_CALLBACK;
 80068d6:	7023      	strb	r3, [r4, #0]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80068d8:	f007 fa38 	bl	800dd4c <sys_mbox_trypost>
 80068dc:	b940      	cbnz	r0, 80068f0 <tcpip_try_callback+0x3c>
    memp_free(MEMP_TCPIP_MSG_API, msg);
    return ERR_MEM;
  }
  return ERR_OK;
}
 80068de:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80068e0:	4b09      	ldr	r3, [pc, #36]	; (8006908 <tcpip_try_callback+0x54>)
 80068e2:	f240 125d 	movw	r2, #349	; 0x15d
 80068e6:	4909      	ldr	r1, [pc, #36]	; (800690c <tcpip_try_callback+0x58>)
 80068e8:	4809      	ldr	r0, [pc, #36]	; (8006910 <tcpip_try_callback+0x5c>)
 80068ea:	f007 fb9b 	bl	800e024 <iprintf>
 80068ee:	e7e8      	b.n	80068c2 <tcpip_try_callback+0xe>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 80068f0:	4621      	mov	r1, r4
 80068f2:	2008      	movs	r0, #8
 80068f4:	f000 fc30 	bl	8007158 <memp_free>
    return ERR_MEM;
 80068f8:	f04f 30ff 	mov.w	r0, #4294967295
}
 80068fc:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_MEM;
 80068fe:	f04f 30ff 	mov.w	r0, #4294967295
}
 8006902:	bd70      	pop	{r4, r5, r6, pc}
 8006904:	24009a84 	.word	0x24009a84
 8006908:	0800f7e0 	.word	0x0800f7e0
 800690c:	0800f830 	.word	0x0800f830
 8006910:	0800ef30 	.word	0x0800ef30

08006914 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8006914:	b530      	push	{r4, r5, lr}
 8006916:	b083      	sub	sp, #12
 8006918:	4605      	mov	r5, r0
 800691a:	460c      	mov	r4, r1
  lwip_init();
 800691c:	f000 f8b2 	bl	8006a84 <lwip_init>

  tcpip_init_done = initfunc;
 8006920:	4a15      	ldr	r2, [pc, #84]	; (8006978 <tcpip_init+0x64>)
  tcpip_init_done_arg = arg;
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8006922:	2106      	movs	r1, #6
  tcpip_init_done_arg = arg;
 8006924:	4b15      	ldr	r3, [pc, #84]	; (800697c <tcpip_init+0x68>)
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8006926:	4816      	ldr	r0, [pc, #88]	; (8006980 <tcpip_init+0x6c>)
  tcpip_init_done = initfunc;
 8006928:	6015      	str	r5, [r2, #0]
  tcpip_init_done_arg = arg;
 800692a:	601c      	str	r4, [r3, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800692c:	f007 fa00 	bl	800dd30 <sys_mbox_new>
 8006930:	b970      	cbnz	r0, 8006950 <tcpip_init+0x3c>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8006932:	4814      	ldr	r0, [pc, #80]	; (8006984 <tcpip_init+0x70>)
 8006934:	f007 fa4a 	bl	800ddcc <sys_mutex_new>
 8006938:	b9b0      	cbnz	r0, 8006968 <tcpip_init+0x54>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800693a:	2418      	movs	r4, #24
 800693c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006940:	2200      	movs	r2, #0
 8006942:	4911      	ldr	r1, [pc, #68]	; (8006988 <tcpip_init+0x74>)
 8006944:	9400      	str	r4, [sp, #0]
 8006946:	4811      	ldr	r0, [pc, #68]	; (800698c <tcpip_init+0x78>)
 8006948:	f007 fa56 	bl	800ddf8 <sys_thread_new>
}
 800694c:	b003      	add	sp, #12
 800694e:	bd30      	pop	{r4, r5, pc}
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8006950:	4b0f      	ldr	r3, [pc, #60]	; (8006990 <tcpip_init+0x7c>)
 8006952:	f240 2261 	movw	r2, #609	; 0x261
 8006956:	490f      	ldr	r1, [pc, #60]	; (8006994 <tcpip_init+0x80>)
 8006958:	480f      	ldr	r0, [pc, #60]	; (8006998 <tcpip_init+0x84>)
 800695a:	f007 fb63 	bl	800e024 <iprintf>
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800695e:	4809      	ldr	r0, [pc, #36]	; (8006984 <tcpip_init+0x70>)
 8006960:	f007 fa34 	bl	800ddcc <sys_mutex_new>
 8006964:	2800      	cmp	r0, #0
 8006966:	d0e8      	beq.n	800693a <tcpip_init+0x26>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8006968:	4b09      	ldr	r3, [pc, #36]	; (8006990 <tcpip_init+0x7c>)
 800696a:	f240 2265 	movw	r2, #613	; 0x265
 800696e:	490b      	ldr	r1, [pc, #44]	; (800699c <tcpip_init+0x88>)
 8006970:	4809      	ldr	r0, [pc, #36]	; (8006998 <tcpip_init+0x84>)
 8006972:	f007 fb57 	bl	800e024 <iprintf>
 8006976:	e7e0      	b.n	800693a <tcpip_init+0x26>
 8006978:	24009a7c 	.word	0x24009a7c
 800697c:	24009a80 	.word	0x24009a80
 8006980:	24009a84 	.word	0x24009a84
 8006984:	24009a78 	.word	0x24009a78
 8006988:	08006759 	.word	0x08006759
 800698c:	0800f888 	.word	0x0800f888
 8006990:	0800f7e0 	.word	0x0800f7e0
 8006994:	0800f840 	.word	0x0800f840
 8006998:	0800ef30 	.word	0x0800ef30
 800699c:	0800f864 	.word	0x0800f864

080069a0 <lwip_htons>:
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
  return PP_HTONS(n);
 80069a0:	ba40      	rev16	r0, r0
}
 80069a2:	b280      	uxth	r0, r0
 80069a4:	4770      	bx	lr
 80069a6:	bf00      	nop

080069a8 <lwip_htonl>:
 */
u32_t
lwip_htonl(u32_t n)
{
  return PP_HTONL(n);
}
 80069a8:	ba00      	rev	r0, r0
 80069aa:	4770      	bx	lr

080069ac <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 80069ac:	b530      	push	{r4, r5, lr}
  const u8_t *pb = (const u8_t *)dataptr;
  const u16_t *ps;
  u16_t t = 0;
 80069ae:	f04f 0e00 	mov.w	lr, #0
  u32_t sum = 0;
  int odd = ((mem_ptr_t)pb & 1);
 80069b2:	f000 0501 	and.w	r5, r0, #1

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 80069b6:	4571      	cmp	r1, lr
 80069b8:	dd05      	ble.n	80069c6 <lwip_standard_chksum+0x1a>
 80069ba:	b125      	cbz	r5, 80069c6 <lwip_standard_chksum+0x1a>
    ((u8_t *)&t)[1] = *pb++;
 80069bc:	f810 3b01 	ldrb.w	r3, [r0], #1
    len--;
 80069c0:	3901      	subs	r1, #1
    ((u8_t *)&t)[1] = *pb++;
 80069c2:	f363 2e1f 	bfi	lr, r3, #8, #24
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
  while (len > 1) {
 80069c6:	2901      	cmp	r1, #1
 80069c8:	dd27      	ble.n	8006a1a <lwip_standard_chksum+0x6e>
 80069ca:	3902      	subs	r1, #2
  u32_t sum = 0;
 80069cc:	2300      	movs	r3, #0
 80069ce:	084c      	lsrs	r4, r1, #1
 80069d0:	f104 0c01 	add.w	ip, r4, #1
 80069d4:	eb00 0c4c 	add.w	ip, r0, ip, lsl #1
    sum += *ps++;
 80069d8:	f830 2b02 	ldrh.w	r2, [r0], #2
  while (len > 1) {
 80069dc:	4584      	cmp	ip, r0
    sum += *ps++;
 80069de:	4413      	add	r3, r2
  while (len > 1) {
 80069e0:	d1fa      	bne.n	80069d8 <lwip_standard_chksum+0x2c>
    len -= 2;
 80069e2:	ebc4 74c4 	rsb	r4, r4, r4, lsl #31
 80069e6:	eb01 0144 	add.w	r1, r1, r4, lsl #1
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 80069ea:	2901      	cmp	r1, #1
 80069ec:	d105      	bne.n	80069fa <lwip_standard_chksum+0x4e>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 80069ee:	f89c 2000 	ldrb.w	r2, [ip]
 80069f2:	f362 0e07 	bfi	lr, r2, #0, #8
 80069f6:	fa1f fe8e 	uxth.w	lr, lr
  }

  /* Add end bytes */
  sum += t;
 80069fa:	449e      	add	lr, r3

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 80069fc:	fa1f f38e 	uxth.w	r3, lr
 8006a00:	eb03 431e 	add.w	r3, r3, lr, lsr #16
  sum = FOLD_U32T(sum);
 8006a04:	b298      	uxth	r0, r3
 8006a06:	eb00 4013 	add.w	r0, r0, r3, lsr #16

  /* Swap if alignment was odd */
  if (odd) {
 8006a0a:	b125      	cbz	r5, 8006a16 <lwip_standard_chksum+0x6a>
    sum = SWAP_BYTES_IN_WORD(sum);
 8006a0c:	0203      	lsls	r3, r0, #8
 8006a0e:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8006a12:	b29b      	uxth	r3, r3
 8006a14:	4318      	orrs	r0, r3
  }

  return (u16_t)sum;
}
 8006a16:	b280      	uxth	r0, r0
 8006a18:	bd30      	pop	{r4, r5, pc}
  ps = (const u16_t *)(const void *)pb;
 8006a1a:	4684      	mov	ip, r0
  u32_t sum = 0;
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	e7e4      	b.n	80069ea <lwip_standard_chksum+0x3e>

08006a20 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 8006a20:	b508      	push	{r3, lr}
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 8006a22:	f7ff ffc3 	bl	80069ac <lwip_standard_chksum>
 8006a26:	43c0      	mvns	r0, r0
}
 8006a28:	b280      	uxth	r0, r0
 8006a2a:	bd08      	pop	{r3, pc}

08006a2c <inet_chksum_pbuf>:
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;

  acc = 0;
  for (q = p; q != NULL; q = q->next) {
 8006a2c:	b338      	cbz	r0, 8006a7e <inet_chksum_pbuf+0x52>
{
 8006a2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  int swapped = 0;
 8006a30:	2700      	movs	r7, #0
 8006a32:	4605      	mov	r5, r0
  acc = 0;
 8006a34:	463c      	mov	r4, r7
    acc += LWIP_CHKSUM(q->payload, q->len);
 8006a36:	896e      	ldrh	r6, [r5, #10]
 8006a38:	6868      	ldr	r0, [r5, #4]
 8006a3a:	4631      	mov	r1, r6
 8006a3c:	f7ff ffb6 	bl	80069ac <lwip_standard_chksum>
 8006a40:	4404      	add	r4, r0
    acc = FOLD_U32T(acc);
    if (q->len % 2 != 0) {
 8006a42:	f016 0f01 	tst.w	r6, #1
    acc = FOLD_U32T(acc);
 8006a46:	b2a3      	uxth	r3, r4
 8006a48:	eb03 4414 	add.w	r4, r3, r4, lsr #16
      swapped = !swapped;
      acc = SWAP_BYTES_IN_WORD(acc);
 8006a4c:	ea4f 2304 	mov.w	r3, r4, lsl #8
 8006a50:	f3c4 2207 	ubfx	r2, r4, #8, #8
    if (q->len % 2 != 0) {
 8006a54:	d004      	beq.n	8006a60 <inet_chksum_pbuf+0x34>
      acc = SWAP_BYTES_IN_WORD(acc);
 8006a56:	b29b      	uxth	r3, r3
 8006a58:	f087 0701 	eor.w	r7, r7, #1
 8006a5c:	ea43 0402 	orr.w	r4, r3, r2
  for (q = p; q != NULL; q = q->next) {
 8006a60:	682d      	ldr	r5, [r5, #0]
 8006a62:	2d00      	cmp	r5, #0
 8006a64:	d1e7      	bne.n	8006a36 <inet_chksum_pbuf+0xa>
    }
  }

  if (swapped) {
 8006a66:	b13f      	cbz	r7, 8006a78 <inet_chksum_pbuf+0x4c>
    acc = SWAP_BYTES_IN_WORD(acc);
 8006a68:	0220      	lsls	r0, r4, #8
 8006a6a:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8006a6e:	b280      	uxth	r0, r0
 8006a70:	4320      	orrs	r0, r4
  }
  return (u16_t)~(acc & 0xffffUL);
 8006a72:	43c0      	mvns	r0, r0
 8006a74:	b280      	uxth	r0, r0
}
 8006a76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return (u16_t)~(acc & 0xffffUL);
 8006a78:	43e0      	mvns	r0, r4
 8006a7a:	b280      	uxth	r0, r0
}
 8006a7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  for (q = p; q != NULL; q = q->next) {
 8006a7e:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
 8006a82:	4770      	bx	lr

08006a84 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8006a84:	b508      	push	{r3, lr}
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8006a86:	f007 f997 	bl	800ddb8 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8006a8a:	f000 f80d 	bl	8006aa8 <mem_init>
  memp_init();
 8006a8e:	f000 fadb 	bl	8007048 <memp_init>
  pbuf_init();
  netif_init();
 8006a92:	f000 fbe1 	bl	8007258 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8006a96:	f005 fc2d 	bl	800c2f4 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8006a9a:	f001 fa33 	bl	8007f04 <tcp_init>
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
#endif /* LWIP_TIMERS */
}
 8006a9e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_timeouts_init();
 8006aa2:	f005 bbcb 	b.w	800c23c <sys_timeouts_init>
 8006aa6:	bf00      	nop

08006aa8 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8006aa8:	b510      	push	{r4, lr}

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8006aaa:	4b11      	ldr	r3, [pc, #68]	; (8006af0 <mem_init+0x48>)
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
  mem->next = MEM_SIZE_ALIGNED;
  mem->prev = 0;
 8006aac:	2200      	movs	r2, #0
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8006aae:	4c11      	ldr	r4, [pc, #68]	; (8006af4 <mem_init+0x4c>)
  mem->next = MEM_SIZE_ALIGNED;
 8006ab0:	4911      	ldr	r1, [pc, #68]	; (8006af8 <mem_init+0x50>)
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8006ab2:	6023      	str	r3, [r4, #0]
  mem->used = 0;
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8006ab4:	4811      	ldr	r0, [pc, #68]	; (8006afc <mem_init+0x54>)
 8006ab6:	4c12      	ldr	r4, [pc, #72]	; (8006b00 <mem_init+0x58>)
  mem->used = 0;
 8006ab8:	721a      	strb	r2, [r3, #8]
  mem->prev = 0;
 8006aba:	e9c3 1200 	strd	r1, r2, [r3]
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8006abe:	6004      	str	r4, [r0, #0]
  ram_end->used = 1;
 8006ac0:	2001      	movs	r0, #1
 8006ac2:	4a10      	ldr	r2, [pc, #64]	; (8006b04 <mem_init+0x5c>)
  ram_end->next = MEM_SIZE_ALIGNED;
  ram_end->prev = MEM_SIZE_ALIGNED;
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8006ac4:	4c10      	ldr	r4, [pc, #64]	; (8006b08 <mem_init+0x60>)
  ram_end->used = 1;
 8006ac6:	f882 00f0 	strb.w	r0, [r2, #240]	; 0xf0
  ram_end->next = MEM_SIZE_ALIGNED;
 8006aca:	f8c2 10e8 	str.w	r1, [r2, #232]	; 0xe8
  ram_end->prev = MEM_SIZE_ALIGNED;
 8006ace:	f8c2 10ec 	str.w	r1, [r2, #236]	; 0xec

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8006ad2:	480e      	ldr	r0, [pc, #56]	; (8006b0c <mem_init+0x64>)
  lfree = (struct mem *)(void *)ram;
 8006ad4:	6023      	str	r3, [r4, #0]
  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8006ad6:	f007 f979 	bl	800ddcc <sys_mutex_new>
 8006ada:	b900      	cbnz	r0, 8006ade <mem_init+0x36>
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8006adc:	bd10      	pop	{r4, pc}
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8006ade:	4b0c      	ldr	r3, [pc, #48]	; (8006b10 <mem_init+0x68>)
 8006ae0:	f240 221f 	movw	r2, #543	; 0x21f
 8006ae4:	490b      	ldr	r1, [pc, #44]	; (8006b14 <mem_init+0x6c>)
 8006ae6:	480c      	ldr	r0, [pc, #48]	; (8006b18 <mem_init+0x70>)
}
 8006ae8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8006aec:	f007 ba9a 	b.w	800e024 <iprintf>
 8006af0:	30020000 	.word	0x30020000
 8006af4:	24009aa8 	.word	0x24009aa8
 8006af8:	0001ffe8 	.word	0x0001ffe8
 8006afc:	24009aac 	.word	0x24009aac
 8006b00:	3003ffe8 	.word	0x3003ffe8
 8006b04:	3003ff00 	.word	0x3003ff00
 8006b08:	24009aa0 	.word	0x24009aa0
 8006b0c:	24009aa4 	.word	0x24009aa4
 8006b10:	0800f898 	.word	0x0800f898
 8006b14:	0800f8c8 	.word	0x0800f8c8
 8006b18:	0800ef30 	.word	0x0800ef30

08006b1c <mem_free>:
mem_free(void *rmem)
{
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8006b1c:	2800      	cmp	r0, #0
 8006b1e:	f000 8098 	beq.w	8006c52 <mem_free+0x136>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8006b22:	0783      	lsls	r3, r0, #30
{
 8006b24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b28:	4604      	mov	r4, r0
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8006b2a:	f040 808d 	bne.w	8006c48 <mem_free+0x12c>

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8006b2e:	4e61      	ldr	r6, [pc, #388]	; (8006cb4 <mem_free+0x198>)
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8006b30:	f1a0 050c 	sub.w	r5, r0, #12
  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8006b34:	6833      	ldr	r3, [r6, #0]
 8006b36:	42ab      	cmp	r3, r5
 8006b38:	d805      	bhi.n	8006b46 <mem_free+0x2a>
 8006b3a:	4f5f      	ldr	r7, [pc, #380]	; (8006cb8 <mem_free+0x19c>)
 8006b3c:	f100 030c 	add.w	r3, r0, #12
 8006b40:	683a      	ldr	r2, [r7, #0]
 8006b42:	429a      	cmp	r2, r3
 8006b44:	d20c      	bcs.n	8006b60 <mem_free+0x44>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8006b46:	4b5d      	ldr	r3, [pc, #372]	; (8006cbc <mem_free+0x1a0>)
 8006b48:	f240 227f 	movw	r2, #639	; 0x27f
 8006b4c:	495c      	ldr	r1, [pc, #368]	; (8006cc0 <mem_free+0x1a4>)
 8006b4e:	485d      	ldr	r0, [pc, #372]	; (8006cc4 <mem_free+0x1a8>)
 8006b50:	f007 fa68 	bl	800e024 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8006b54:	f007 f966 	bl	800de24 <sys_arch_protect>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8006b58:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    MEM_STATS_INC_LOCKED(illegal);
 8006b5c:	f007 b96e 	b.w	800de3c <sys_arch_unprotect>
  LWIP_MEM_FREE_PROTECT();
 8006b60:	4859      	ldr	r0, [pc, #356]	; (8006cc8 <mem_free+0x1ac>)
 8006b62:	f007 f93f 	bl	800dde4 <sys_mutex_lock>
  if (!mem->used) {
 8006b66:	f814 3c04 	ldrb.w	r3, [r4, #-4]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	f000 809c 	beq.w	8006ca8 <mem_free+0x18c>
  pmem = ptr_to_mem(mem->prev);
 8006b70:	f854 1c08 	ldr.w	r1, [r4, #-8]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8006b74:	4855      	ldr	r0, [pc, #340]	; (8006ccc <mem_free+0x1b0>)
  return (mem_size_t)((u8_t *)mem - ram);
 8006b76:	6832      	ldr	r2, [r6, #0]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8006b78:	4281      	cmp	r1, r0
  nmem = ptr_to_mem(mem->next);
 8006b7a:	f854 3c0c 	ldr.w	r3, [r4, #-12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8006b7e:	d807      	bhi.n	8006b90 <mem_free+0x74>
 8006b80:	4283      	cmp	r3, r0
 8006b82:	d805      	bhi.n	8006b90 <mem_free+0x74>
  return (mem_size_t)((u8_t *)mem - ram);
 8006b84:	1aa8      	subs	r0, r5, r2
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8006b86:	4288      	cmp	r0, r1
 8006b88:	d012      	beq.n	8006bb0 <mem_free+0x94>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8006b8a:	5851      	ldr	r1, [r2, r1]
 8006b8c:	4288      	cmp	r0, r1
 8006b8e:	d00f      	beq.n	8006bb0 <mem_free+0x94>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8006b90:	4b4a      	ldr	r3, [pc, #296]	; (8006cbc <mem_free+0x1a0>)
 8006b92:	f240 2295 	movw	r2, #661	; 0x295
 8006b96:	494e      	ldr	r1, [pc, #312]	; (8006cd0 <mem_free+0x1b4>)
 8006b98:	484a      	ldr	r0, [pc, #296]	; (8006cc4 <mem_free+0x1a8>)
 8006b9a:	f007 fa43 	bl	800e024 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8006b9e:	484a      	ldr	r0, [pc, #296]	; (8006cc8 <mem_free+0x1ac>)
 8006ba0:	f007 f926 	bl	800ddf0 <sys_mutex_unlock>
    MEM_STATS_INC_LOCKED(illegal);
 8006ba4:	f007 f93e 	bl	800de24 <sys_arch_protect>
}
 8006ba8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    MEM_STATS_INC_LOCKED(illegal);
 8006bac:	f007 b946 	b.w	800de3c <sys_arch_unprotect>
  return (struct mem *)(void *)&ram[ptr];
 8006bb0:	18d1      	adds	r1, r2, r3
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8006bb2:	f8d7 c000 	ldr.w	ip, [r7]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8006bb6:	4561      	cmp	r1, ip
 8006bb8:	d002      	beq.n	8006bc0 <mem_free+0xa4>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8006bba:	6849      	ldr	r1, [r1, #4]
 8006bbc:	4288      	cmp	r0, r1
 8006bbe:	d1e7      	bne.n	8006b90 <mem_free+0x74>
  if (mem < lfree) {
 8006bc0:	f8df 8128 	ldr.w	r8, [pc, #296]	; 8006cec <mem_free+0x1d0>
  mem->used = 0;
 8006bc4:	2100      	movs	r1, #0
 8006bc6:	f804 1c04 	strb.w	r1, [r4, #-4]
  if (mem < lfree) {
 8006bca:	f8d8 1000 	ldr.w	r1, [r8]
 8006bce:	42a9      	cmp	r1, r5
    lfree = mem;
 8006bd0:	bf88      	it	hi
 8006bd2:	f8c8 5000 	strhi.w	r5, [r8]
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8006bd6:	4295      	cmp	r5, r2
 8006bd8:	d33c      	bcc.n	8006c54 <mem_free+0x138>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8006bda:	4565      	cmp	r5, ip
 8006bdc:	d244      	bcs.n	8006c68 <mem_free+0x14c>
  return (struct mem *)(void *)&ram[ptr];
 8006bde:	6832      	ldr	r2, [r6, #0]
 8006be0:	4413      	add	r3, r2
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8006be2:	429d      	cmp	r5, r3
 8006be4:	d014      	beq.n	8006c10 <mem_free+0xf4>
 8006be6:	7a19      	ldrb	r1, [r3, #8]
 8006be8:	b991      	cbnz	r1, 8006c10 <mem_free+0xf4>
 8006bea:	6839      	ldr	r1, [r7, #0]
 8006bec:	428b      	cmp	r3, r1
 8006bee:	d00f      	beq.n	8006c10 <mem_free+0xf4>
    if (lfree == nmem) {
 8006bf0:	f8d8 1000 	ldr.w	r1, [r8]
 8006bf4:	428b      	cmp	r3, r1
    mem->next = nmem->next;
 8006bf6:	6819      	ldr	r1, [r3, #0]
 8006bf8:	f844 1c0c 	str.w	r1, [r4, #-12]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8006bfc:	4933      	ldr	r1, [pc, #204]	; (8006ccc <mem_free+0x1b0>)
 8006bfe:	681b      	ldr	r3, [r3, #0]
      lfree = mem;
 8006c00:	bf08      	it	eq
 8006c02:	f8c8 5000 	streq.w	r5, [r8]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8006c06:	428b      	cmp	r3, r1
 8006c08:	d002      	beq.n	8006c10 <mem_free+0xf4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8006c0a:	4413      	add	r3, r2
  return (mem_size_t)((u8_t *)mem - ram);
 8006c0c:	1aa9      	subs	r1, r5, r2
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8006c0e:	6059      	str	r1, [r3, #4]
  pmem = ptr_to_mem(mem->prev);
 8006c10:	f854 1c08 	ldr.w	r1, [r4, #-8]
  return (struct mem *)(void *)&ram[ptr];
 8006c14:	1853      	adds	r3, r2, r1
  if (pmem != mem && pmem->used == 0) {
 8006c16:	429d      	cmp	r5, r3
 8006c18:	d011      	beq.n	8006c3e <mem_free+0x122>
 8006c1a:	7a18      	ldrb	r0, [r3, #8]
 8006c1c:	b978      	cbnz	r0, 8006c3e <mem_free+0x122>
    if (lfree == mem) {
 8006c1e:	f8d8 0000 	ldr.w	r0, [r8]
 8006c22:	4285      	cmp	r5, r0
    if (mem->next != MEM_SIZE_ALIGNED) {
 8006c24:	4829      	ldr	r0, [pc, #164]	; (8006ccc <mem_free+0x1b0>)
      lfree = pmem;
 8006c26:	bf08      	it	eq
 8006c28:	f8c8 3000 	streq.w	r3, [r8]
    pmem->next = mem->next;
 8006c2c:	f854 3c0c 	ldr.w	r3, [r4, #-12]
 8006c30:	5053      	str	r3, [r2, r1]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8006c32:	f854 3c0c 	ldr.w	r3, [r4, #-12]
 8006c36:	4283      	cmp	r3, r0
 8006c38:	d001      	beq.n	8006c3e <mem_free+0x122>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8006c3a:	441a      	add	r2, r3
 8006c3c:	6051      	str	r1, [r2, #4]
  LWIP_MEM_FREE_UNPROTECT();
 8006c3e:	4822      	ldr	r0, [pc, #136]	; (8006cc8 <mem_free+0x1ac>)
}
 8006c40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  LWIP_MEM_FREE_UNPROTECT();
 8006c44:	f007 b8d4 	b.w	800ddf0 <sys_mutex_unlock>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8006c48:	4b1c      	ldr	r3, [pc, #112]	; (8006cbc <mem_free+0x1a0>)
 8006c4a:	f240 2273 	movw	r2, #627	; 0x273
 8006c4e:	4921      	ldr	r1, [pc, #132]	; (8006cd4 <mem_free+0x1b8>)
 8006c50:	e77d      	b.n	8006b4e <mem_free+0x32>
 8006c52:	4770      	bx	lr
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8006c54:	4b19      	ldr	r3, [pc, #100]	; (8006cbc <mem_free+0x1a0>)
 8006c56:	f240 12df 	movw	r2, #479	; 0x1df
 8006c5a:	491f      	ldr	r1, [pc, #124]	; (8006cd8 <mem_free+0x1bc>)
 8006c5c:	4819      	ldr	r0, [pc, #100]	; (8006cc4 <mem_free+0x1a8>)
 8006c5e:	f007 f9e1 	bl	800e024 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	429d      	cmp	r5, r3
 8006c66:	d306      	bcc.n	8006c76 <mem_free+0x15a>
 8006c68:	4b14      	ldr	r3, [pc, #80]	; (8006cbc <mem_free+0x1a0>)
 8006c6a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8006c6e:	491b      	ldr	r1, [pc, #108]	; (8006cdc <mem_free+0x1c0>)
 8006c70:	4814      	ldr	r0, [pc, #80]	; (8006cc4 <mem_free+0x1a8>)
 8006c72:	f007 f9d7 	bl	800e024 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8006c76:	f814 3c04 	ldrb.w	r3, [r4, #-4]
 8006c7a:	b133      	cbz	r3, 8006c8a <mem_free+0x16e>
 8006c7c:	4b0f      	ldr	r3, [pc, #60]	; (8006cbc <mem_free+0x1a0>)
 8006c7e:	f240 12e1 	movw	r2, #481	; 0x1e1
 8006c82:	4917      	ldr	r1, [pc, #92]	; (8006ce0 <mem_free+0x1c4>)
 8006c84:	480f      	ldr	r0, [pc, #60]	; (8006cc4 <mem_free+0x1a8>)
 8006c86:	f007 f9cd 	bl	800e024 <iprintf>
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8006c8a:	f854 3c0c 	ldr.w	r3, [r4, #-12]
 8006c8e:	4a0f      	ldr	r2, [pc, #60]	; (8006ccc <mem_free+0x1b0>)
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d9a4      	bls.n	8006bde <mem_free+0xc2>
 8006c94:	4b09      	ldr	r3, [pc, #36]	; (8006cbc <mem_free+0x1a0>)
 8006c96:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8006c9a:	4912      	ldr	r1, [pc, #72]	; (8006ce4 <mem_free+0x1c8>)
 8006c9c:	4809      	ldr	r0, [pc, #36]	; (8006cc4 <mem_free+0x1a8>)
 8006c9e:	f007 f9c1 	bl	800e024 <iprintf>
  nmem = ptr_to_mem(mem->next);
 8006ca2:	f854 3c0c 	ldr.w	r3, [r4, #-12]
 8006ca6:	e79a      	b.n	8006bde <mem_free+0xc2>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8006ca8:	4b04      	ldr	r3, [pc, #16]	; (8006cbc <mem_free+0x1a0>)
 8006caa:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8006cae:	490e      	ldr	r1, [pc, #56]	; (8006ce8 <mem_free+0x1cc>)
 8006cb0:	e772      	b.n	8006b98 <mem_free+0x7c>
 8006cb2:	bf00      	nop
 8006cb4:	24009aa8 	.word	0x24009aa8
 8006cb8:	24009aac 	.word	0x24009aac
 8006cbc:	0800f898 	.word	0x0800f898
 8006cc0:	0800f908 	.word	0x0800f908
 8006cc4:	0800ef30 	.word	0x0800ef30
 8006cc8:	24009aa4 	.word	0x24009aa4
 8006ccc:	0001ffe8 	.word	0x0001ffe8
 8006cd0:	0800f94c 	.word	0x0800f94c
 8006cd4:	0800f8e4 	.word	0x0800f8e4
 8006cd8:	0800f980 	.word	0x0800f980
 8006cdc:	0800f998 	.word	0x0800f998
 8006ce0:	0800f9b4 	.word	0x0800f9b4
 8006ce4:	0800f9d0 	.word	0x0800f9d0
 8006ce8:	0800f924 	.word	0x0800f924
 8006cec:	24009aa0 	.word	0x24009aa0

08006cf0 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8006cf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8006cf4:	1ccb      	adds	r3, r1, #3
 8006cf6:	f023 0303 	bic.w	r3, r3, #3
  if (newsize < MIN_SIZE_ALIGNED) {
 8006cfa:	2b0c      	cmp	r3, #12
 8006cfc:	461d      	mov	r5, r3
 8006cfe:	bf38      	it	cc
 8006d00:	250c      	movcc	r5, #12
    newsize = MIN_SIZE_ALIGNED;
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8006d02:	42a9      	cmp	r1, r5
 8006d04:	d875      	bhi.n	8006df2 <mem_trim+0x102>
 8006d06:	4a4d      	ldr	r2, [pc, #308]	; (8006e3c <mem_trim+0x14c>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d872      	bhi.n	8006df2 <mem_trim+0x102>
    return NULL;
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8006d0c:	4f4c      	ldr	r7, [pc, #304]	; (8006e40 <mem_trim+0x150>)
 8006d0e:	4604      	mov	r4, r0
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	4283      	cmp	r3, r0
 8006d14:	d83b      	bhi.n	8006d8e <mem_trim+0x9e>
 8006d16:	4a4b      	ldr	r2, [pc, #300]	; (8006e44 <mem_trim+0x154>)
 8006d18:	6812      	ldr	r2, [r2, #0]
 8006d1a:	4282      	cmp	r2, r0
 8006d1c:	d937      	bls.n	8006d8e <mem_trim+0x9e>
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8006d1e:	f1a4 080c 	sub.w	r8, r4, #12
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8006d22:	f854 6c0c 	ldr.w	r6, [r4, #-12]
  return (mem_size_t)((u8_t *)mem - ram);
 8006d26:	eba8 0803 	sub.w	r8, r8, r3
  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8006d2a:	3e0c      	subs	r6, #12
 8006d2c:	eba6 0608 	sub.w	r6, r6, r8
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8006d30:	42ae      	cmp	r6, r5
 8006d32:	d361      	bcc.n	8006df8 <mem_trim+0x108>
  if (newsize > size) {
    /* not supported */
    return NULL;
  }
  if (newsize == size) {
 8006d34:	d06a      	beq.n	8006e0c <mem_trim+0x11c>
    /* No change in size, simply return */
    return rmem;
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8006d36:	4844      	ldr	r0, [pc, #272]	; (8006e48 <mem_trim+0x158>)
 8006d38:	f007 f854 	bl	800dde4 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 8006d3c:	f854 2c0c 	ldr.w	r2, [r4, #-12]
  return (struct mem *)(void *)&ram[ptr];
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	eb03 0902 	add.w	r9, r3, r2
  if (mem2->used == 0) {
 8006d46:	f899 1008 	ldrb.w	r1, [r9, #8]
 8006d4a:	2900      	cmp	r1, #0
 8006d4c:	d134      	bne.n	8006db8 <mem_trim+0xc8>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8006d4e:	493b      	ldr	r1, [pc, #236]	; (8006e3c <mem_trim+0x14c>)
 8006d50:	428a      	cmp	r2, r1
 8006d52:	d069      	beq.n	8006e28 <mem_trim+0x138>
    /* remember the old next pointer */
    next = mem2->next;
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
    if (lfree == mem2) {
 8006d54:	493d      	ldr	r1, [pc, #244]	; (8006e4c <mem_trim+0x15c>)
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8006d56:	350c      	adds	r5, #12
    next = mem2->next;
 8006d58:	f8d9 0000 	ldr.w	r0, [r9]
    if (lfree == mem2) {
 8006d5c:	680a      	ldr	r2, [r1, #0]
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8006d5e:	4445      	add	r5, r8
    if (lfree == mem2) {
 8006d60:	454a      	cmp	r2, r9
  return (struct mem *)(void *)&ram[ptr];
 8006d62:	eb03 0205 	add.w	r2, r3, r5
      lfree = ptr_to_mem(ptr2);
 8006d66:	bf08      	it	eq
 8006d68:	600a      	streq	r2, [r1, #0]
    }
    mem2 = ptr_to_mem(ptr2);
    mem2->used = 0;
 8006d6a:	2100      	movs	r1, #0
    /* restore the next pointer */
    mem2->next = next;
    /* link it back to mem */
    mem2->prev = ptr;
 8006d6c:	e9c2 0800 	strd	r0, r8, [r2]
    mem2->used = 0;
 8006d70:	7211      	strb	r1, [r2, #8]
    /* link mem to it */
    mem->next = ptr2;
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8006d72:	4932      	ldr	r1, [pc, #200]	; (8006e3c <mem_trim+0x14c>)
    mem->next = ptr2;
 8006d74:	f844 5c0c 	str.w	r5, [r4, #-12]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8006d78:	6812      	ldr	r2, [r2, #0]
 8006d7a:	428a      	cmp	r2, r1
 8006d7c:	d001      	beq.n	8006d82 <mem_trim+0x92>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8006d7e:	441a      	add	r2, r3
 8006d80:	6055      	str	r5, [r2, #4]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8006d82:	4831      	ldr	r0, [pc, #196]	; (8006e48 <mem_trim+0x158>)
 8006d84:	f007 f834 	bl	800ddf0 <sys_mutex_unlock>
  return rmem;
 8006d88:	4620      	mov	r0, r4
}
 8006d8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8006d8e:	4b30      	ldr	r3, [pc, #192]	; (8006e50 <mem_trim+0x160>)
 8006d90:	f240 22d1 	movw	r2, #721	; 0x2d1
 8006d94:	492f      	ldr	r1, [pc, #188]	; (8006e54 <mem_trim+0x164>)
 8006d96:	4830      	ldr	r0, [pc, #192]	; (8006e58 <mem_trim+0x168>)
 8006d98:	f007 f944 	bl	800e024 <iprintf>
  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	42a3      	cmp	r3, r4
 8006da0:	d803      	bhi.n	8006daa <mem_trim+0xba>
 8006da2:	4a28      	ldr	r2, [pc, #160]	; (8006e44 <mem_trim+0x154>)
 8006da4:	6812      	ldr	r2, [r2, #0]
 8006da6:	42a2      	cmp	r2, r4
 8006da8:	d8b9      	bhi.n	8006d1e <mem_trim+0x2e>
    MEM_STATS_INC_LOCKED(illegal);
 8006daa:	f007 f83b 	bl	800de24 <sys_arch_protect>
 8006dae:	f007 f845 	bl	800de3c <sys_arch_unprotect>
    return rmem;
 8006db2:	4620      	mov	r0, r4
}
 8006db4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8006db8:	f105 0118 	add.w	r1, r5, #24
 8006dbc:	42b1      	cmp	r1, r6
 8006dbe:	d8e0      	bhi.n	8006d82 <mem_trim+0x92>
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8006dc0:	491e      	ldr	r1, [pc, #120]	; (8006e3c <mem_trim+0x14c>)
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8006dc2:	350c      	adds	r5, #12
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8006dc4:	428a      	cmp	r2, r1
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8006dc6:	4445      	add	r5, r8
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8006dc8:	d023      	beq.n	8006e12 <mem_trim+0x122>
    if (mem2 < lfree) {
 8006dca:	4820      	ldr	r0, [pc, #128]	; (8006e4c <mem_trim+0x15c>)
  return (struct mem *)(void *)&ram[ptr];
 8006dcc:	1959      	adds	r1, r3, r5
    if (mem2 < lfree) {
 8006dce:	6806      	ldr	r6, [r0, #0]
    mem2->prev = ptr;
 8006dd0:	e9c1 2800 	strd	r2, r8, [r1]
    if (mem2 < lfree) {
 8006dd4:	428e      	cmp	r6, r1
    mem2->used = 0;
 8006dd6:	f04f 0200 	mov.w	r2, #0
      lfree = mem2;
 8006dda:	bf88      	it	hi
 8006ddc:	6001      	strhi	r1, [r0, #0]
    mem2->used = 0;
 8006dde:	720a      	strb	r2, [r1, #8]
    mem->next = ptr2;
 8006de0:	f844 5c0c 	str.w	r5, [r4, #-12]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8006de4:	680a      	ldr	r2, [r1, #0]
 8006de6:	4915      	ldr	r1, [pc, #84]	; (8006e3c <mem_trim+0x14c>)
 8006de8:	428a      	cmp	r2, r1
 8006dea:	d0ca      	beq.n	8006d82 <mem_trim+0x92>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8006dec:	4413      	add	r3, r2
 8006dee:	605d      	str	r5, [r3, #4]
 8006df0:	e7c7      	b.n	8006d82 <mem_trim+0x92>
    return NULL;
 8006df2:	2000      	movs	r0, #0
}
 8006df4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8006df8:	4b15      	ldr	r3, [pc, #84]	; (8006e50 <mem_trim+0x160>)
 8006dfa:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8006dfe:	4917      	ldr	r1, [pc, #92]	; (8006e5c <mem_trim+0x16c>)
 8006e00:	4815      	ldr	r0, [pc, #84]	; (8006e58 <mem_trim+0x168>)
 8006e02:	f007 f90f 	bl	800e024 <iprintf>
    return NULL;
 8006e06:	2000      	movs	r0, #0
}
 8006e08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e0c:	4620      	mov	r0, r4
 8006e0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8006e12:	4b0f      	ldr	r3, [pc, #60]	; (8006e50 <mem_trim+0x160>)
 8006e14:	f240 3216 	movw	r2, #790	; 0x316
 8006e18:	4911      	ldr	r1, [pc, #68]	; (8006e60 <mem_trim+0x170>)
 8006e1a:	480f      	ldr	r0, [pc, #60]	; (8006e58 <mem_trim+0x168>)
 8006e1c:	f007 f902 	bl	800e024 <iprintf>
    mem2->next = mem->next;
 8006e20:	f854 2c0c 	ldr.w	r2, [r4, #-12]
  return (struct mem *)(void *)&ram[ptr];
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	e7d0      	b.n	8006dca <mem_trim+0xda>
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8006e28:	4b09      	ldr	r3, [pc, #36]	; (8006e50 <mem_trim+0x160>)
 8006e2a:	f240 22f5 	movw	r2, #757	; 0x2f5
 8006e2e:	490c      	ldr	r1, [pc, #48]	; (8006e60 <mem_trim+0x170>)
 8006e30:	4809      	ldr	r0, [pc, #36]	; (8006e58 <mem_trim+0x168>)
 8006e32:	f007 f8f7 	bl	800e024 <iprintf>
  return (struct mem *)(void *)&ram[ptr];
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	e78c      	b.n	8006d54 <mem_trim+0x64>
 8006e3a:	bf00      	nop
 8006e3c:	0001ffe8 	.word	0x0001ffe8
 8006e40:	24009aa8 	.word	0x24009aa8
 8006e44:	24009aac 	.word	0x24009aac
 8006e48:	24009aa4 	.word	0x24009aa4
 8006e4c:	24009aa0 	.word	0x24009aa0
 8006e50:	0800f898 	.word	0x0800f898
 8006e54:	0800f9fc 	.word	0x0800f9fc
 8006e58:	0800ef30 	.word	0x0800ef30
 8006e5c:	0800fa14 	.word	0x0800fa14
 8006e60:	0800fa34 	.word	0x0800fa34

08006e64 <mem_malloc>:
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8006e64:	2800      	cmp	r0, #0
 8006e66:	d066      	beq.n	8006f36 <mem_malloc+0xd2>
{
 8006e68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    return NULL;
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8006e6c:	1cc3      	adds	r3, r0, #3
 8006e6e:	f023 0303 	bic.w	r3, r3, #3
  if (size < MIN_SIZE_ALIGNED) {
 8006e72:	2b0c      	cmp	r3, #12
 8006e74:	4698      	mov	r8, r3
 8006e76:	bf38      	it	cc
 8006e78:	f04f 080c 	movcc.w	r8, #12
    size = MIN_SIZE_ALIGNED;
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8006e7c:	4540      	cmp	r0, r8
 8006e7e:	d827      	bhi.n	8006ed0 <mem_malloc+0x6c>
 8006e80:	4c47      	ldr	r4, [pc, #284]	; (8006fa0 <mem_malloc+0x13c>)
 8006e82:	42a3      	cmp	r3, r4
 8006e84:	d824      	bhi.n	8006ed0 <mem_malloc+0x6c>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8006e86:	4f47      	ldr	r7, [pc, #284]	; (8006fa4 <mem_malloc+0x140>)
  return (mem_size_t)((u8_t *)mem - ram);
 8006e88:	4e47      	ldr	r6, [pc, #284]	; (8006fa8 <mem_malloc+0x144>)
  sys_mutex_lock(&mem_mutex);
 8006e8a:	4848      	ldr	r0, [pc, #288]	; (8006fac <mem_malloc+0x148>)
 8006e8c:	f006 ffaa 	bl	800dde4 <sys_mutex_lock>
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8006e90:	6838      	ldr	r0, [r7, #0]
  return (mem_size_t)((u8_t *)mem - ram);
 8006e92:	6832      	ldr	r2, [r6, #0]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8006e94:	eba4 0c08 	sub.w	ip, r4, r8
  return (mem_size_t)((u8_t *)mem - ram);
 8006e98:	1a84      	subs	r4, r0, r2
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8006e9a:	4564      	cmp	r4, ip
 8006e9c:	d212      	bcs.n	8006ec4 <mem_malloc+0x60>
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8006e9e:	f06f 0e0b 	mvn.w	lr, #11
 8006ea2:	e006      	b.n	8006eb2 <mem_malloc+0x4e>
 8006ea4:	5911      	ldr	r1, [r2, r4]
 8006ea6:	440b      	add	r3, r1
      if ((!mem->used) &&
 8006ea8:	4543      	cmp	r3, r8
 8006eaa:	d214      	bcs.n	8006ed6 <mem_malloc+0x72>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8006eac:	460c      	mov	r4, r1
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8006eae:	4564      	cmp	r4, ip
 8006eb0:	d208      	bcs.n	8006ec4 <mem_malloc+0x60>
  return (struct mem *)(void *)&ram[ptr];
 8006eb2:	1915      	adds	r5, r2, r4
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8006eb4:	ebae 0304 	sub.w	r3, lr, r4
      if ((!mem->used) &&
 8006eb8:	7a29      	ldrb	r1, [r5, #8]
 8006eba:	2900      	cmp	r1, #0
 8006ebc:	d0f2      	beq.n	8006ea4 <mem_malloc+0x40>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8006ebe:	5914      	ldr	r4, [r2, r4]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8006ec0:	4564      	cmp	r4, ip
 8006ec2:	d3f6      	bcc.n	8006eb2 <mem_malloc+0x4e>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8006ec4:	4839      	ldr	r0, [pc, #228]	; (8006fac <mem_malloc+0x148>)
 8006ec6:	f006 ff93 	bl	800ddf0 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8006eca:	2000      	movs	r0, #0
}
 8006ecc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return NULL;
 8006ed0:	2000      	movs	r0, #0
}
 8006ed2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8006ed6:	f108 0c18 	add.w	ip, r8, #24
 8006eda:	f108 080c 	add.w	r8, r8, #12
 8006ede:	4563      	cmp	r3, ip
 8006ee0:	d32a      	bcc.n	8006f38 <mem_malloc+0xd4>
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8006ee2:	4b2f      	ldr	r3, [pc, #188]	; (8006fa0 <mem_malloc+0x13c>)
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8006ee4:	eb08 0904 	add.w	r9, r8, r4
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8006ee8:	4599      	cmp	r9, r3
 8006eea:	d04d      	beq.n	8006f88 <mem_malloc+0x124>
  return (struct mem *)(void *)&ram[ptr];
 8006eec:	eb02 0309 	add.w	r3, r2, r9
          mem2->used = 0;
 8006ef0:	f04f 0c00 	mov.w	ip, #0
 8006ef4:	f883 c008 	strb.w	ip, [r3, #8]
          mem2->next = mem->next;
 8006ef8:	f842 1009 	str.w	r1, [r2, r9]
          mem2->prev = ptr;
 8006efc:	605c      	str	r4, [r3, #4]
          mem->used = 1;
 8006efe:	2301      	movs	r3, #1
          if (mem2->next != MEM_SIZE_ALIGNED) {
 8006f00:	4927      	ldr	r1, [pc, #156]	; (8006fa0 <mem_malloc+0x13c>)
          mem->next = ptr2;
 8006f02:	f8c5 9000 	str.w	r9, [r5]
          mem->used = 1;
 8006f06:	722b      	strb	r3, [r5, #8]
          if (mem2->next != MEM_SIZE_ALIGNED) {
 8006f08:	f852 3009 	ldr.w	r3, [r2, r9]
 8006f0c:	428b      	cmp	r3, r1
 8006f0e:	d002      	beq.n	8006f16 <mem_malloc+0xb2>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8006f10:	441a      	add	r2, r3
 8006f12:	f8c2 9004 	str.w	r9, [r2, #4]
        if (mem == lfree) {
 8006f16:	4285      	cmp	r5, r0
          while (cur->used && cur != ram_end) {
 8006f18:	4c25      	ldr	r4, [pc, #148]	; (8006fb0 <mem_malloc+0x14c>)
        if (mem == lfree) {
 8006f1a:	d027      	beq.n	8006f6c <mem_malloc+0x108>
        sys_mutex_unlock(&mem_mutex);
 8006f1c:	4823      	ldr	r0, [pc, #140]	; (8006fac <mem_malloc+0x148>)
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8006f1e:	44a8      	add	r8, r5
        sys_mutex_unlock(&mem_mutex);
 8006f20:	f006 ff66 	bl	800ddf0 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8006f24:	6823      	ldr	r3, [r4, #0]
 8006f26:	4543      	cmp	r3, r8
 8006f28:	d318      	bcc.n	8006f5c <mem_malloc+0xf8>
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8006f2a:	07ab      	lsls	r3, r5, #30
 8006f2c:	d107      	bne.n	8006f3e <mem_malloc+0xda>
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8006f2e:	f105 000c 	add.w	r0, r5, #12
}
 8006f32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f36:	4770      	bx	lr
          mem->used = 1;
 8006f38:	2301      	movs	r3, #1
 8006f3a:	722b      	strb	r3, [r5, #8]
 8006f3c:	e7eb      	b.n	8006f16 <mem_malloc+0xb2>
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8006f3e:	4b1d      	ldr	r3, [pc, #116]	; (8006fb4 <mem_malloc+0x150>)
 8006f40:	f240 32bb 	movw	r2, #955	; 0x3bb
 8006f44:	491c      	ldr	r1, [pc, #112]	; (8006fb8 <mem_malloc+0x154>)
 8006f46:	481d      	ldr	r0, [pc, #116]	; (8006fbc <mem_malloc+0x158>)
 8006f48:	f007 f86c 	bl	800e024 <iprintf>
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8006f4c:	4b19      	ldr	r3, [pc, #100]	; (8006fb4 <mem_malloc+0x150>)
 8006f4e:	f240 32bd 	movw	r2, #957	; 0x3bd
 8006f52:	491b      	ldr	r1, [pc, #108]	; (8006fc0 <mem_malloc+0x15c>)
 8006f54:	4819      	ldr	r0, [pc, #100]	; (8006fbc <mem_malloc+0x158>)
 8006f56:	f007 f865 	bl	800e024 <iprintf>
 8006f5a:	e7e8      	b.n	8006f2e <mem_malloc+0xca>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8006f5c:	4b15      	ldr	r3, [pc, #84]	; (8006fb4 <mem_malloc+0x150>)
 8006f5e:	f240 32b9 	movw	r2, #953	; 0x3b9
 8006f62:	4918      	ldr	r1, [pc, #96]	; (8006fc4 <mem_malloc+0x160>)
 8006f64:	4815      	ldr	r0, [pc, #84]	; (8006fbc <mem_malloc+0x158>)
 8006f66:	f007 f85d 	bl	800e024 <iprintf>
 8006f6a:	e7de      	b.n	8006f2a <mem_malloc+0xc6>
  return (struct mem *)(void *)&ram[ptr];
 8006f6c:	6830      	ldr	r0, [r6, #0]
 8006f6e:	462b      	mov	r3, r5
          while (cur->used && cur != ram_end) {
 8006f70:	6821      	ldr	r1, [r4, #0]
 8006f72:	e003      	b.n	8006f7c <mem_malloc+0x118>
  return (struct mem *)(void *)&ram[ptr];
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	4403      	add	r3, r0
          while (cur->used && cur != ram_end) {
 8006f78:	7a1a      	ldrb	r2, [r3, #8]
 8006f7a:	b11a      	cbz	r2, 8006f84 <mem_malloc+0x120>
 8006f7c:	4299      	cmp	r1, r3
 8006f7e:	d1f9      	bne.n	8006f74 <mem_malloc+0x110>
          lfree = cur;
 8006f80:	6039      	str	r1, [r7, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8006f82:	e7cb      	b.n	8006f1c <mem_malloc+0xb8>
          lfree = cur;
 8006f84:	603b      	str	r3, [r7, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8006f86:	e7c9      	b.n	8006f1c <mem_malloc+0xb8>
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8006f88:	f240 3287 	movw	r2, #903	; 0x387
 8006f8c:	490e      	ldr	r1, [pc, #56]	; (8006fc8 <mem_malloc+0x164>)
 8006f8e:	4b09      	ldr	r3, [pc, #36]	; (8006fb4 <mem_malloc+0x150>)
 8006f90:	480a      	ldr	r0, [pc, #40]	; (8006fbc <mem_malloc+0x158>)
 8006f92:	f007 f847 	bl	800e024 <iprintf>
          mem2->next = mem->next;
 8006f96:	6829      	ldr	r1, [r5, #0]
  return (struct mem *)(void *)&ram[ptr];
 8006f98:	6832      	ldr	r2, [r6, #0]
        if (mem == lfree) {
 8006f9a:	6838      	ldr	r0, [r7, #0]
 8006f9c:	e7a6      	b.n	8006eec <mem_malloc+0x88>
 8006f9e:	bf00      	nop
 8006fa0:	0001ffe8 	.word	0x0001ffe8
 8006fa4:	24009aa0 	.word	0x24009aa0
 8006fa8:	24009aa8 	.word	0x24009aa8
 8006fac:	24009aa4 	.word	0x24009aa4
 8006fb0:	24009aac 	.word	0x24009aac
 8006fb4:	0800f898 	.word	0x0800f898
 8006fb8:	0800fa78 	.word	0x0800fa78
 8006fbc:	0800ef30 	.word	0x0800ef30
 8006fc0:	0800faa8 	.word	0x0800faa8
 8006fc4:	0800fa48 	.word	0x0800fa48
 8006fc8:	0800fa34 	.word	0x0800fa34

08006fcc <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8006fcc:	b538      	push	{r3, r4, r5, lr}
 8006fce:	4604      	mov	r4, r0

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8006fd0:	f006 ff28 	bl	800de24 <sys_arch_protect>

  memp = *desc->tab;
 8006fd4:	68a3      	ldr	r3, [r4, #8]
 8006fd6:	681c      	ldr	r4, [r3, #0]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8006fd8:	b18c      	cbz	r4, 8006ffe <do_memp_malloc_pool+0x32>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8006fda:	6822      	ldr	r2, [r4, #0]
 8006fdc:	4605      	mov	r5, r0
 8006fde:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8006fe0:	07a3      	lsls	r3, r4, #30
 8006fe2:	d104      	bne.n	8006fee <do_memp_malloc_pool+0x22>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8006fe4:	4628      	mov	r0, r5
 8006fe6:	f006 ff29 	bl	800de3c <sys_arch_unprotect>
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
}
 8006fea:	4620      	mov	r0, r4
 8006fec:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8006fee:	4b06      	ldr	r3, [pc, #24]	; (8007008 <do_memp_malloc_pool+0x3c>)
 8006ff0:	f44f 728c 	mov.w	r2, #280	; 0x118
 8006ff4:	4905      	ldr	r1, [pc, #20]	; (800700c <do_memp_malloc_pool+0x40>)
 8006ff6:	4806      	ldr	r0, [pc, #24]	; (8007010 <do_memp_malloc_pool+0x44>)
 8006ff8:	f007 f814 	bl	800e024 <iprintf>
 8006ffc:	e7f2      	b.n	8006fe4 <do_memp_malloc_pool+0x18>
    SYS_ARCH_UNPROTECT(old_level);
 8006ffe:	f006 ff1d 	bl	800de3c <sys_arch_unprotect>
}
 8007002:	4620      	mov	r0, r4
 8007004:	bd38      	pop	{r3, r4, r5, pc}
 8007006:	bf00      	nop
 8007008:	0800facc 	.word	0x0800facc
 800700c:	0800fafc 	.word	0x0800fafc
 8007010:	0800ef30 	.word	0x0800ef30

08007014 <memp_init_pool>:
{
 8007014:	b430      	push	{r4, r5}
  *desc->tab = NULL;
 8007016:	2100      	movs	r1, #0
  for (i = 0; i < desc->num; ++i) {
 8007018:	8844      	ldrh	r4, [r0, #2]
  *desc->tab = NULL;
 800701a:	e9d0 3501 	ldrd	r3, r5, [r0, #4]
 800701e:	6029      	str	r1, [r5, #0]
  for (i = 0; i < desc->num; ++i) {
 8007020:	b17c      	cbz	r4, 8007042 <memp_init_pool+0x2e>
 8007022:	3303      	adds	r3, #3
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8007024:	f8b0 c000 	ldrh.w	ip, [r0]
  for (i = 0; i < desc->num; ++i) {
 8007028:	460a      	mov	r2, r1
 800702a:	f023 0303 	bic.w	r3, r3, #3
 800702e:	e000      	b.n	8007032 <memp_init_pool+0x1e>
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8007030:	4603      	mov	r3, r0
  for (i = 0; i < desc->num; ++i) {
 8007032:	3201      	adds	r2, #1
    memp->next = *desc->tab;
 8007034:	6019      	str	r1, [r3, #0]
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8007036:	eb03 000c 	add.w	r0, r3, ip
  for (i = 0; i < desc->num; ++i) {
 800703a:	4619      	mov	r1, r3
 800703c:	42a2      	cmp	r2, r4
 800703e:	d1f7      	bne.n	8007030 <memp_init_pool+0x1c>
 8007040:	602b      	str	r3, [r5, #0]
}
 8007042:	bc30      	pop	{r4, r5}
 8007044:	4770      	bx	lr
 8007046:	bf00      	nop

08007048 <memp_init>:
{
 8007048:	b5f0      	push	{r4, r5, r6, r7, lr}
 800704a:	f8df e054 	ldr.w	lr, [pc, #84]	; 80070a0 <memp_init+0x58>
 800704e:	2404      	movs	r4, #4
 8007050:	4b10      	ldr	r3, [pc, #64]	; (8007094 <memp_init+0x4c>)
  *desc->tab = NULL;
 8007052:	2600      	movs	r6, #0
{
 8007054:	4d10      	ldr	r5, [pc, #64]	; (8007098 <memp_init+0x50>)
 8007056:	f10e 0730 	add.w	r7, lr, #48	; 0x30
 800705a:	4a10      	ldr	r2, [pc, #64]	; (800709c <memp_init+0x54>)
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800705c:	3303      	adds	r3, #3
  *desc->tab = NULL;
 800705e:	602e      	str	r6, [r5, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8007060:	f023 0303 	bic.w	r3, r3, #3
  for (i = 0; i < desc->num; ++i) {
 8007064:	b16c      	cbz	r4, 8007082 <memp_init+0x3a>
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8007066:	2100      	movs	r1, #0
 8007068:	f8b2 c000 	ldrh.w	ip, [r2]
  for (i = 0; i < desc->num; ++i) {
 800706c:	460a      	mov	r2, r1
 800706e:	e000      	b.n	8007072 <memp_init+0x2a>
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8007070:	4603      	mov	r3, r0
  for (i = 0; i < desc->num; ++i) {
 8007072:	3201      	adds	r2, #1
    memp->next = *desc->tab;
 8007074:	6019      	str	r1, [r3, #0]
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8007076:	eb03 000c 	add.w	r0, r3, ip
  for (i = 0; i < desc->num; ++i) {
 800707a:	4619      	mov	r1, r3
 800707c:	42a2      	cmp	r2, r4
 800707e:	d1f7      	bne.n	8007070 <memp_init+0x28>
 8007080:	602b      	str	r3, [r5, #0]
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8007082:	4577      	cmp	r7, lr
 8007084:	d005      	beq.n	8007092 <memp_init+0x4a>
    memp_init_pool(memp_pools[i]);
 8007086:	f85e 2f04 	ldr.w	r2, [lr, #4]!
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800708a:	e9d2 3501 	ldrd	r3, r5, [r2, #4]
  for (i = 0; i < desc->num; ++i) {
 800708e:	8854      	ldrh	r4, [r2, #2]
 8007090:	e7e4      	b.n	800705c <memp_init+0x14>
}
 8007092:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007094:	24010484 	.word	0x24010484
 8007098:	24010538 	.word	0x24010538
 800709c:	0800fc20 	.word	0x0800fc20
 80070a0:	0800fc2c 	.word	0x0800fc2c

080070a4 <memp_malloc_pool>:
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80070a4:	b108      	cbz	r0, 80070aa <memp_malloc_pool+0x6>
  if (desc == NULL) {
    return NULL;
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 80070a6:	f7ff bf91 	b.w	8006fcc <do_memp_malloc_pool>
{
 80070aa:	b510      	push	{r4, lr}
 80070ac:	4604      	mov	r4, r0
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80070ae:	4b04      	ldr	r3, [pc, #16]	; (80070c0 <memp_malloc_pool+0x1c>)
 80070b0:	f44f 729e 	mov.w	r2, #316	; 0x13c
 80070b4:	4903      	ldr	r1, [pc, #12]	; (80070c4 <memp_malloc_pool+0x20>)
 80070b6:	4804      	ldr	r0, [pc, #16]	; (80070c8 <memp_malloc_pool+0x24>)
 80070b8:	f006 ffb4 	bl	800e024 <iprintf>
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 80070bc:	4620      	mov	r0, r4
 80070be:	bd10      	pop	{r4, pc}
 80070c0:	0800facc 	.word	0x0800facc
 80070c4:	0800fb20 	.word	0x0800fb20
 80070c8:	0800ef30 	.word	0x0800ef30

080070cc <memp_malloc>:
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80070cc:	280c      	cmp	r0, #12
{
 80070ce:	b508      	push	{r3, lr}
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80070d0:	d806      	bhi.n	80070e0 <memp_malloc+0x14>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 80070d2:	4b08      	ldr	r3, [pc, #32]	; (80070f4 <memp_malloc+0x28>)
 80070d4:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
}
 80070d8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  memp = do_memp_malloc_pool(memp_pools[type]);
 80070dc:	f7ff bf76 	b.w	8006fcc <do_memp_malloc_pool>
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80070e0:	4b05      	ldr	r3, [pc, #20]	; (80070f8 <memp_malloc+0x2c>)
 80070e2:	f240 1257 	movw	r2, #343	; 0x157
 80070e6:	4905      	ldr	r1, [pc, #20]	; (80070fc <memp_malloc+0x30>)
 80070e8:	4805      	ldr	r0, [pc, #20]	; (8007100 <memp_malloc+0x34>)
 80070ea:	f006 ff9b 	bl	800e024 <iprintf>
}
 80070ee:	2000      	movs	r0, #0
 80070f0:	bd08      	pop	{r3, pc}
 80070f2:	bf00      	nop
 80070f4:	0800fc2c 	.word	0x0800fc2c
 80070f8:	0800facc 	.word	0x0800facc
 80070fc:	0800fb34 	.word	0x0800fb34
 8007100:	0800ef30 	.word	0x0800ef30

08007104 <memp_free_pool>:
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8007104:	b180      	cbz	r0, 8007128 <memp_free_pool+0x24>
{
 8007106:	b570      	push	{r4, r5, r6, lr}
 8007108:	460c      	mov	r4, r1
  if ((desc == NULL) || (mem == NULL)) {
 800710a:	b161      	cbz	r1, 8007126 <memp_free_pool+0x22>
  LWIP_ASSERT("memp_free: mem properly aligned",
 800710c:	078b      	lsls	r3, r1, #30
 800710e:	4605      	mov	r5, r0
 8007110:	d111      	bne.n	8007136 <memp_free_pool+0x32>
  SYS_ARCH_PROTECT(old_level);
 8007112:	f006 fe87 	bl	800de24 <sys_arch_protect>
  memp->next = *desc->tab;
 8007116:	68ab      	ldr	r3, [r5, #8]
 8007118:	681a      	ldr	r2, [r3, #0]
 800711a:	6022      	str	r2, [r4, #0]
  *desc->tab = memp;
 800711c:	601c      	str	r4, [r3, #0]
    return;
  }

  do_memp_free_pool(desc, mem);
}
 800711e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  SYS_ARCH_UNPROTECT(old_level);
 8007122:	f006 be8b 	b.w	800de3c <sys_arch_unprotect>
}
 8007126:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8007128:	4b07      	ldr	r3, [pc, #28]	; (8007148 <memp_free_pool+0x44>)
 800712a:	f240 1295 	movw	r2, #405	; 0x195
 800712e:	4907      	ldr	r1, [pc, #28]	; (800714c <memp_free_pool+0x48>)
 8007130:	4807      	ldr	r0, [pc, #28]	; (8007150 <memp_free_pool+0x4c>)
 8007132:	f006 bf77 	b.w	800e024 <iprintf>
  LWIP_ASSERT("memp_free: mem properly aligned",
 8007136:	4b04      	ldr	r3, [pc, #16]	; (8007148 <memp_free_pool+0x44>)
 8007138:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800713c:	4905      	ldr	r1, [pc, #20]	; (8007154 <memp_free_pool+0x50>)
 800713e:	4804      	ldr	r0, [pc, #16]	; (8007150 <memp_free_pool+0x4c>)
 8007140:	f006 ff70 	bl	800e024 <iprintf>
 8007144:	e7e5      	b.n	8007112 <memp_free_pool+0xe>
 8007146:	bf00      	nop
 8007148:	0800facc 	.word	0x0800facc
 800714c:	0800fb20 	.word	0x0800fb20
 8007150:	0800ef30 	.word	0x0800ef30
 8007154:	0800fb54 	.word	0x0800fb54

08007158 <memp_free>:
{
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8007158:	280c      	cmp	r0, #12
 800715a:	d812      	bhi.n	8007182 <memp_free+0x2a>
{
 800715c:	b570      	push	{r4, r5, r6, lr}
 800715e:	460c      	mov	r4, r1

  if (mem == NULL) {
 8007160:	b171      	cbz	r1, 8007180 <memp_free+0x28>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8007162:	4b0f      	ldr	r3, [pc, #60]	; (80071a0 <memp_free+0x48>)
 8007164:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
  LWIP_ASSERT("memp_free: mem properly aligned",
 8007168:	078b      	lsls	r3, r1, #30
 800716a:	d111      	bne.n	8007190 <memp_free+0x38>
  SYS_ARCH_PROTECT(old_level);
 800716c:	f006 fe5a 	bl	800de24 <sys_arch_protect>
  memp->next = *desc->tab;
 8007170:	68ab      	ldr	r3, [r5, #8]
 8007172:	681a      	ldr	r2, [r3, #0]
 8007174:	6022      	str	r2, [r4, #0]
  *desc->tab = memp;
 8007176:	601c      	str	r4, [r3, #0]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8007178:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  SYS_ARCH_UNPROTECT(old_level);
 800717c:	f006 be5e 	b.w	800de3c <sys_arch_unprotect>
}
 8007180:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8007182:	4b08      	ldr	r3, [pc, #32]	; (80071a4 <memp_free+0x4c>)
 8007184:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8007188:	4907      	ldr	r1, [pc, #28]	; (80071a8 <memp_free+0x50>)
 800718a:	4808      	ldr	r0, [pc, #32]	; (80071ac <memp_free+0x54>)
 800718c:	f006 bf4a 	b.w	800e024 <iprintf>
  LWIP_ASSERT("memp_free: mem properly aligned",
 8007190:	4b04      	ldr	r3, [pc, #16]	; (80071a4 <memp_free+0x4c>)
 8007192:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8007196:	4906      	ldr	r1, [pc, #24]	; (80071b0 <memp_free+0x58>)
 8007198:	4804      	ldr	r0, [pc, #16]	; (80071ac <memp_free+0x54>)
 800719a:	f006 ff43 	bl	800e024 <iprintf>
 800719e:	e7e5      	b.n	800716c <memp_free+0x14>
 80071a0:	0800fc2c 	.word	0x0800fc2c
 80071a4:	0800facc 	.word	0x0800facc
 80071a8:	0800fb74 	.word	0x0800fb74
 80071ac:	0800ef30 	.word	0x0800ef30
 80071b0:	0800fb54 	.word	0x0800fb54

080071b4 <netif_null_output_ip4>:
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
}
 80071b4:	f06f 000b 	mvn.w	r0, #11
 80071b8:	4770      	bx	lr
 80071ba:	bf00      	nop

080071bc <netif_issue_reports>:
{
 80071bc:	b510      	push	{r4, lr}
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 80071be:	4604      	mov	r4, r0
 80071c0:	b150      	cbz	r0, 80071d8 <netif_issue_reports+0x1c>
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80071c2:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 80071c6:	f003 0205 	and.w	r2, r3, #5
 80071ca:	2a05      	cmp	r2, #5
 80071cc:	d103      	bne.n	80071d6 <netif_issue_reports+0x1a>
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80071ce:	6862      	ldr	r2, [r4, #4]
 80071d0:	b10a      	cbz	r2, 80071d6 <netif_issue_reports+0x1a>
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80071d2:	071b      	lsls	r3, r3, #28
 80071d4:	d408      	bmi.n	80071e8 <netif_issue_reports+0x2c>
}
 80071d6:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 80071d8:	4b06      	ldr	r3, [pc, #24]	; (80071f4 <netif_issue_reports+0x38>)
 80071da:	f240 326d 	movw	r2, #877	; 0x36d
 80071de:	4906      	ldr	r1, [pc, #24]	; (80071f8 <netif_issue_reports+0x3c>)
 80071e0:	4806      	ldr	r0, [pc, #24]	; (80071fc <netif_issue_reports+0x40>)
 80071e2:	f006 ff1f 	bl	800e024 <iprintf>
 80071e6:	e7ec      	b.n	80071c2 <netif_issue_reports+0x6>
      etharp_gratuitous(netif);
 80071e8:	1d21      	adds	r1, r4, #4
 80071ea:	4620      	mov	r0, r4
}
 80071ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      etharp_gratuitous(netif);
 80071f0:	f005 bdda 	b.w	800cda8 <etharp_request>
 80071f4:	0800fc60 	.word	0x0800fc60
 80071f8:	0800fc94 	.word	0x0800fc94
 80071fc:	0800ef30 	.word	0x0800ef30

08007200 <netif_do_set_ipaddr.isra.0>:
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
 8007200:	b570      	push	{r4, r5, r6, lr}
 8007202:	4605      	mov	r5, r0
 8007204:	b082      	sub	sp, #8
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8007206:	460c      	mov	r4, r1
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
 8007208:	4616      	mov	r6, r2
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800720a:	b1b9      	cbz	r1, 800723c <netif_do_set_ipaddr.isra.0+0x3c>
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800720c:	686b      	ldr	r3, [r5, #4]
 800720e:	6822      	ldr	r2, [r4, #0]
 8007210:	429a      	cmp	r2, r3
 8007212:	d101      	bne.n	8007218 <netif_do_set_ipaddr.isra.0+0x18>
}
 8007214:	b002      	add	sp, #8
 8007216:	bd70      	pop	{r4, r5, r6, pc}
    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8007218:	6033      	str	r3, [r6, #0]
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800721a:	4630      	mov	r0, r6
 800721c:	a901      	add	r1, sp, #4
    *ip_2_ip4(&new_addr) = *ipaddr;
 800721e:	9201      	str	r2, [sp, #4]
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8007220:	f002 f8e8 	bl	80093f4 <tcp_netif_ip_addr_changed>
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8007224:	a901      	add	r1, sp, #4
 8007226:	4630      	mov	r0, r6
 8007228:	f005 f970 	bl	800c50c <udp_netif_ip_addr_changed>
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800722c:	6823      	ldr	r3, [r4, #0]
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800722e:	2101      	movs	r1, #1
 8007230:	4628      	mov	r0, r5
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8007232:	606b      	str	r3, [r5, #4]
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8007234:	f7ff ffc2 	bl	80071bc <netif_issue_reports>
}
 8007238:	b002      	add	sp, #8
 800723a:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800723c:	4b03      	ldr	r3, [pc, #12]	; (800724c <netif_do_set_ipaddr.isra.0+0x4c>)
 800723e:	f240 12cb 	movw	r2, #459	; 0x1cb
 8007242:	4903      	ldr	r1, [pc, #12]	; (8007250 <netif_do_set_ipaddr.isra.0+0x50>)
 8007244:	4803      	ldr	r0, [pc, #12]	; (8007254 <netif_do_set_ipaddr.isra.0+0x54>)
 8007246:	f006 feed 	bl	800e024 <iprintf>
 800724a:	e7df      	b.n	800720c <netif_do_set_ipaddr.isra.0+0xc>
 800724c:	0800fc60 	.word	0x0800fc60
 8007250:	0800fcb8 	.word	0x0800fcb8
 8007254:	0800ef30 	.word	0x0800ef30

08007258 <netif_init>:
}
 8007258:	4770      	bx	lr
 800725a:	bf00      	nop

0800725c <netif_set_addr>:
{
 800725c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800725e:	460d      	mov	r5, r1
 8007260:	b083      	sub	sp, #12
 8007262:	4604      	mov	r4, r0
 8007264:	4617      	mov	r7, r2
 8007266:	461e      	mov	r6, r3
  LWIP_ASSERT_CORE_LOCKED();
 8007268:	f7fc fe66 	bl	8003f38 <sys_check_core_locking>
  if (ipaddr == NULL) {
 800726c:	b1fd      	cbz	r5, 80072ae <netif_set_addr+0x52>
  if (netmask == NULL) {
 800726e:	b187      	cbz	r7, 8007292 <netif_set_addr+0x36>
  if (gw == NULL) {
 8007270:	b196      	cbz	r6, 8007298 <netif_set_addr+0x3c>
  remove = ip4_addr_isany(ipaddr);
 8007272:	682b      	ldr	r3, [r5, #0]
 8007274:	b1a3      	cbz	r3, 80072a0 <netif_set_addr+0x44>
 8007276:	2200      	movs	r2, #0
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	68a1      	ldr	r1, [r4, #8]
 800727c:	428b      	cmp	r3, r1
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800727e:	68e1      	ldr	r1, [r4, #12]
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8007280:	bf18      	it	ne
 8007282:	60a3      	strne	r3, [r4, #8]
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8007284:	6833      	ldr	r3, [r6, #0]
 8007286:	428b      	cmp	r3, r1
    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8007288:	bf18      	it	ne
 800728a:	60e3      	strne	r3, [r4, #12]
  if (!remove) {
 800728c:	b19a      	cbz	r2, 80072b6 <netif_set_addr+0x5a>
}
 800728e:	b003      	add	sp, #12
 8007290:	bdf0      	pop	{r4, r5, r6, r7, pc}
    netmask = IP4_ADDR_ANY4;
 8007292:	4f0c      	ldr	r7, [pc, #48]	; (80072c4 <netif_set_addr+0x68>)
  if (gw == NULL) {
 8007294:	2e00      	cmp	r6, #0
 8007296:	d1ec      	bne.n	8007272 <netif_set_addr+0x16>
  remove = ip4_addr_isany(ipaddr);
 8007298:	682b      	ldr	r3, [r5, #0]
    gw = IP4_ADDR_ANY4;
 800729a:	4e0a      	ldr	r6, [pc, #40]	; (80072c4 <netif_set_addr+0x68>)
  remove = ip4_addr_isany(ipaddr);
 800729c:	2b00      	cmp	r3, #0
 800729e:	d1ea      	bne.n	8007276 <netif_set_addr+0x1a>
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80072a0:	aa01      	add	r2, sp, #4
 80072a2:	4629      	mov	r1, r5
 80072a4:	4620      	mov	r0, r4
 80072a6:	f7ff ffab 	bl	8007200 <netif_do_set_ipaddr.isra.0>
 80072aa:	2201      	movs	r2, #1
 80072ac:	e7e4      	b.n	8007278 <netif_set_addr+0x1c>
    ipaddr = IP4_ADDR_ANY4;
 80072ae:	4d05      	ldr	r5, [pc, #20]	; (80072c4 <netif_set_addr+0x68>)
  if (netmask == NULL) {
 80072b0:	2f00      	cmp	r7, #0
 80072b2:	d1dd      	bne.n	8007270 <netif_set_addr+0x14>
 80072b4:	e7ed      	b.n	8007292 <netif_set_addr+0x36>
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80072b6:	aa01      	add	r2, sp, #4
 80072b8:	4629      	mov	r1, r5
 80072ba:	4620      	mov	r0, r4
 80072bc:	f7ff ffa0 	bl	8007200 <netif_do_set_ipaddr.isra.0>
}
 80072c0:	b003      	add	sp, #12
 80072c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80072c4:	08011640 	.word	0x08011640

080072c8 <netif_add>:
{
 80072c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072cc:	4606      	mov	r6, r0
 80072ce:	460c      	mov	r4, r1
 80072d0:	4615      	mov	r5, r2
 80072d2:	461f      	mov	r7, r3
 80072d4:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
  LWIP_ASSERT_CORE_LOCKED();
 80072d8:	f7fc fe2e 	bl	8003f38 <sys_check_core_locking>
  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 80072dc:	2e00      	cmp	r6, #0
 80072de:	f000 8083 	beq.w	80073e8 <netif_add+0x120>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 80072e2:	f1b8 0f00 	cmp.w	r8, #0
 80072e6:	f000 8088 	beq.w	80073fa <netif_add+0x132>
  if (ipaddr == NULL) {
 80072ea:	2c00      	cmp	r4, #0
 80072ec:	d070      	beq.n	80073d0 <netif_add+0x108>
  if (netmask == NULL) {
 80072ee:	2d00      	cmp	r5, #0
 80072f0:	d069      	beq.n	80073c6 <netif_add+0xfe>
  if (gw == NULL) {
 80072f2:	2f00      	cmp	r7, #0
 80072f4:	d06a      	beq.n	80073cc <netif_add+0x104>
  netif->state = state;
 80072f6:	980a      	ldr	r0, [sp, #40]	; 0x28
  netif_set_addr(netif, ipaddr, netmask, gw);
 80072f8:	4621      	mov	r1, r4
  netif->num = netif_num;
 80072fa:	f8df a12c 	ldr.w	sl, [pc, #300]	; 8007428 <netif_add+0x160>
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80072fe:	2400      	movs	r4, #0
  netif->state = state;
 8007300:	6230      	str	r0, [r6, #32]
  netif_set_addr(netif, ipaddr, netmask, gw);
 8007302:	463b      	mov	r3, r7
  netif->input = input;
 8007304:	980c      	ldr	r0, [sp, #48]	; 0x30
  netif_set_addr(netif, ipaddr, netmask, gw);
 8007306:	462a      	mov	r2, r5
  ip_addr_set_zero_ip4(&netif->gw);
 8007308:	60f4      	str	r4, [r6, #12]
  netif->input = input;
 800730a:	6130      	str	r0, [r6, #16]
  netif->num = netif_num;
 800730c:	f89a 0000 	ldrb.w	r0, [sl]
  netif->mtu = 0;
 8007310:	84b4      	strh	r4, [r6, #36]	; 0x24
  netif->num = netif_num;
 8007312:	f886 0030 	strb.w	r0, [r6, #48]	; 0x30
  netif->output = netif_null_output_ip4;
 8007316:	483d      	ldr	r0, [pc, #244]	; (800740c <netif_add+0x144>)
  netif->flags = 0;
 8007318:	f886 402d 	strb.w	r4, [r6, #45]	; 0x2d
  netif->output = netif_null_output_ip4;
 800731c:	6170      	str	r0, [r6, #20]
  netif_set_addr(netif, ipaddr, netmask, gw);
 800731e:	4630      	mov	r0, r6
  netif->link_callback = NULL;
 8007320:	61f4      	str	r4, [r6, #28]
  ip_addr_set_zero_ip4(&netif->netmask);
 8007322:	e9c6 4401 	strd	r4, r4, [r6, #4]
  netif_set_addr(netif, ipaddr, netmask, gw);
 8007326:	f7ff ff99 	bl	800725c <netif_set_addr>
  if (init(netif) != ERR_OK) {
 800732a:	4630      	mov	r0, r6
 800732c:	47c0      	blx	r8
 800732e:	2800      	cmp	r0, #0
 8007330:	d157      	bne.n	80073e2 <netif_add+0x11a>
      if (netif->num == 255) {
 8007332:	f896 2030 	ldrb.w	r2, [r6, #48]	; 0x30
 8007336:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 800742c <netif_add+0x164>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800733a:	f8df b0e0 	ldr.w	fp, [pc, #224]	; 800741c <netif_add+0x154>
 800733e:	f8df 90f0 	ldr.w	r9, [pc, #240]	; 8007430 <netif_add+0x168>
 8007342:	4f33      	ldr	r7, [pc, #204]	; (8007410 <netif_add+0x148>)
      if (netif->num == 255) {
 8007344:	2aff      	cmp	r2, #255	; 0xff
 8007346:	d102      	bne.n	800734e <netif_add+0x86>
        netif->num = 0;
 8007348:	2300      	movs	r3, #0
 800734a:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800734e:	f8d8 4000 	ldr.w	r4, [r8]
 8007352:	2c00      	cmp	r4, #0
 8007354:	d042      	beq.n	80073dc <netif_add+0x114>
      num_netifs = 0;
 8007356:	2500      	movs	r5, #0
 8007358:	e007      	b.n	800736a <netif_add+0xa2>
        if (netif2->num == netif->num) {
 800735a:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 800735e:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
 8007362:	429a      	cmp	r2, r3
 8007364:	d014      	beq.n	8007390 <netif_add+0xc8>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8007366:	6824      	ldr	r4, [r4, #0]
 8007368:	b1fc      	cbz	r4, 80073aa <netif_add+0xe2>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800736a:	42b4      	cmp	r4, r6
        num_netifs++;
 800736c:	f105 0501 	add.w	r5, r5, #1
        LWIP_ASSERT("netif already added", netif2 != netif);
 8007370:	d013      	beq.n	800739a <netif_add+0xd2>
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8007372:	2dff      	cmp	r5, #255	; 0xff
 8007374:	ddf1      	ble.n	800735a <netif_add+0x92>
 8007376:	465b      	mov	r3, fp
 8007378:	f240 128d 	movw	r2, #397	; 0x18d
 800737c:	4925      	ldr	r1, [pc, #148]	; (8007414 <netif_add+0x14c>)
 800737e:	4638      	mov	r0, r7
 8007380:	f006 fe50 	bl	800e024 <iprintf>
        if (netif2->num == netif->num) {
 8007384:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 8007388:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
 800738c:	429a      	cmp	r2, r3
 800738e:	d1ea      	bne.n	8007366 <netif_add+0x9e>
          netif->num++;
 8007390:	3201      	adds	r2, #1
 8007392:	b2d2      	uxtb	r2, r2
 8007394:	f886 2030 	strb.w	r2, [r6, #48]	; 0x30
    } while (netif2 != NULL);
 8007398:	e7d4      	b.n	8007344 <netif_add+0x7c>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800739a:	465b      	mov	r3, fp
 800739c:	f240 128b 	movw	r2, #395	; 0x18b
 80073a0:	4649      	mov	r1, r9
 80073a2:	4638      	mov	r0, r7
 80073a4:	f006 fe3e 	bl	800e024 <iprintf>
 80073a8:	e7e3      	b.n	8007372 <netif_add+0xaa>
  netif->next = netif_list;
 80073aa:	f8d8 4000 	ldr.w	r4, [r8]
  if (netif->num == 254) {
 80073ae:	2bfe      	cmp	r3, #254	; 0xfe
 80073b0:	d012      	beq.n	80073d8 <netif_add+0x110>
    netif_num = (u8_t)(netif->num + 1);
 80073b2:	3301      	adds	r3, #1
 80073b4:	b2db      	uxtb	r3, r3
  return netif;
 80073b6:	4630      	mov	r0, r6
  netif->next = netif_list;
 80073b8:	6034      	str	r4, [r6, #0]
 80073ba:	f88a 3000 	strb.w	r3, [sl]
  netif_list = netif;
 80073be:	f8c8 6000 	str.w	r6, [r8]
}
 80073c2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 80073c6:	4d14      	ldr	r5, [pc, #80]	; (8007418 <netif_add+0x150>)
  if (gw == NULL) {
 80073c8:	2f00      	cmp	r7, #0
 80073ca:	d194      	bne.n	80072f6 <netif_add+0x2e>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 80073cc:	4f12      	ldr	r7, [pc, #72]	; (8007418 <netif_add+0x150>)
 80073ce:	e792      	b.n	80072f6 <netif_add+0x2e>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 80073d0:	4c11      	ldr	r4, [pc, #68]	; (8007418 <netif_add+0x150>)
  if (netmask == NULL) {
 80073d2:	2d00      	cmp	r5, #0
 80073d4:	d18d      	bne.n	80072f2 <netif_add+0x2a>
 80073d6:	e7f6      	b.n	80073c6 <netif_add+0xfe>
    netif_num = 0;
 80073d8:	2300      	movs	r3, #0
 80073da:	e7ec      	b.n	80073b6 <netif_add+0xee>
  if (netif->num == 254) {
 80073dc:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
 80073e0:	e7e5      	b.n	80073ae <netif_add+0xe6>
    return NULL;
 80073e2:	4620      	mov	r0, r4
}
 80073e4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 80073e8:	4b0c      	ldr	r3, [pc, #48]	; (800741c <netif_add+0x154>)
 80073ea:	f240 1227 	movw	r2, #295	; 0x127
 80073ee:	490c      	ldr	r1, [pc, #48]	; (8007420 <netif_add+0x158>)
 80073f0:	4807      	ldr	r0, [pc, #28]	; (8007410 <netif_add+0x148>)
 80073f2:	f006 fe17 	bl	800e024 <iprintf>
 80073f6:	4630      	mov	r0, r6
 80073f8:	e7e3      	b.n	80073c2 <netif_add+0xfa>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 80073fa:	4b08      	ldr	r3, [pc, #32]	; (800741c <netif_add+0x154>)
 80073fc:	f44f 7294 	mov.w	r2, #296	; 0x128
 8007400:	4908      	ldr	r1, [pc, #32]	; (8007424 <netif_add+0x15c>)
 8007402:	4803      	ldr	r0, [pc, #12]	; (8007410 <netif_add+0x148>)
 8007404:	f006 fe0e 	bl	800e024 <iprintf>
 8007408:	4640      	mov	r0, r8
 800740a:	e7da      	b.n	80073c2 <netif_add+0xfa>
 800740c:	080071b5 	.word	0x080071b5
 8007410:	0800ef30 	.word	0x0800ef30
 8007414:	0800fd1c 	.word	0x0800fd1c
 8007418:	08011640 	.word	0x08011640
 800741c:	0800fc60 	.word	0x0800fc60
 8007420:	0800fcc8 	.word	0x0800fcc8
 8007424:	0800fce4 	.word	0x0800fce4
 8007428:	24010544 	.word	0x24010544
 800742c:	24010540 	.word	0x24010540
 8007430:	0800fd08 	.word	0x0800fd08

08007434 <netif_set_default>:
{
 8007434:	b510      	push	{r4, lr}
 8007436:	4604      	mov	r4, r0
  LWIP_ASSERT_CORE_LOCKED();
 8007438:	f7fc fd7e 	bl	8003f38 <sys_check_core_locking>
  netif_default = netif;
 800743c:	4b01      	ldr	r3, [pc, #4]	; (8007444 <netif_set_default+0x10>)
 800743e:	601c      	str	r4, [r3, #0]
}
 8007440:	bd10      	pop	{r4, pc}
 8007442:	bf00      	nop
 8007444:	2401053c 	.word	0x2401053c

08007448 <netif_set_up>:
{
 8007448:	b510      	push	{r4, lr}
 800744a:	4604      	mov	r4, r0
  LWIP_ASSERT_CORE_LOCKED();
 800744c:	f7fc fd74 	bl	8003f38 <sys_check_core_locking>
  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8007450:	b174      	cbz	r4, 8007470 <netif_set_up+0x28>
  if (!(netif->flags & NETIF_FLAG_UP)) {
 8007452:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8007456:	07da      	lsls	r2, r3, #31
 8007458:	d500      	bpl.n	800745c <netif_set_up+0x14>
}
 800745a:	bd10      	pop	{r4, pc}
    netif_set_flags(netif, NETIF_FLAG_UP);
 800745c:	f043 0301 	orr.w	r3, r3, #1
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8007460:	4620      	mov	r0, r4
 8007462:	2103      	movs	r1, #3
    netif_set_flags(netif, NETIF_FLAG_UP);
 8007464:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
}
 8007468:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800746c:	f7ff bea6 	b.w	80071bc <netif_issue_reports>
  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8007470:	4b04      	ldr	r3, [pc, #16]	; (8007484 <netif_set_up+0x3c>)
 8007472:	f44f 7254 	mov.w	r2, #848	; 0x350
 8007476:	4904      	ldr	r1, [pc, #16]	; (8007488 <netif_set_up+0x40>)
 8007478:	4804      	ldr	r0, [pc, #16]	; (800748c <netif_set_up+0x44>)
}
 800747a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800747e:	f006 bdd1 	b.w	800e024 <iprintf>
 8007482:	bf00      	nop
 8007484:	0800fc60 	.word	0x0800fc60
 8007488:	0800fd4c 	.word	0x0800fd4c
 800748c:	0800ef30 	.word	0x0800ef30

08007490 <netif_set_down>:
{
 8007490:	b510      	push	{r4, lr}
 8007492:	4604      	mov	r4, r0
  LWIP_ASSERT_CORE_LOCKED();
 8007494:	f7fc fd50 	bl	8003f38 <sys_check_core_locking>
  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8007498:	b17c      	cbz	r4, 80074ba <netif_set_down+0x2a>
  if (netif->flags & NETIF_FLAG_UP) {
 800749a:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 800749e:	07da      	lsls	r2, r3, #31
 80074a0:	d505      	bpl.n	80074ae <netif_set_down+0x1e>
    netif_clear_flags(netif, NETIF_FLAG_UP);
 80074a2:	f023 0201 	bic.w	r2, r3, #1
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80074a6:	071b      	lsls	r3, r3, #28
    netif_clear_flags(netif, NETIF_FLAG_UP);
 80074a8:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80074ac:	d400      	bmi.n	80074b0 <netif_set_down+0x20>
}
 80074ae:	bd10      	pop	{r4, pc}
      etharp_cleanup_netif(netif);
 80074b0:	4620      	mov	r0, r4
}
 80074b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      etharp_cleanup_netif(netif);
 80074b6:	f005 ba3d 	b.w	800c934 <etharp_cleanup_netif>
  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 80074ba:	4b04      	ldr	r3, [pc, #16]	; (80074cc <netif_set_down+0x3c>)
 80074bc:	f240 329b 	movw	r2, #923	; 0x39b
 80074c0:	4903      	ldr	r1, [pc, #12]	; (80074d0 <netif_set_down+0x40>)
 80074c2:	4804      	ldr	r0, [pc, #16]	; (80074d4 <netif_set_down+0x44>)
}
 80074c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 80074c8:	f006 bdac 	b.w	800e024 <iprintf>
 80074cc:	0800fc60 	.word	0x0800fc60
 80074d0:	0800fd68 	.word	0x0800fd68
 80074d4:	0800ef30 	.word	0x0800ef30

080074d8 <netif_set_link_up>:
{
 80074d8:	b510      	push	{r4, lr}
 80074da:	4604      	mov	r4, r0
  LWIP_ASSERT_CORE_LOCKED();
 80074dc:	f7fc fd2c 	bl	8003f38 <sys_check_core_locking>
  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 80074e0:	b19c      	cbz	r4, 800750a <netif_set_link_up+0x32>
  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 80074e2:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 80074e6:	075a      	lsls	r2, r3, #29
 80074e8:	d500      	bpl.n	80074ec <netif_set_link_up+0x14>
}
 80074ea:	bd10      	pop	{r4, pc}
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 80074ec:	f043 0304 	orr.w	r3, r3, #4
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80074f0:	2103      	movs	r1, #3
 80074f2:	4620      	mov	r0, r4
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 80074f4:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80074f8:	f7ff fe60 	bl	80071bc <netif_issue_reports>
    NETIF_LINK_CALLBACK(netif);
 80074fc:	69e3      	ldr	r3, [r4, #28]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d0f3      	beq.n	80074ea <netif_set_link_up+0x12>
 8007502:	4620      	mov	r0, r4
}
 8007504:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    NETIF_LINK_CALLBACK(netif);
 8007508:	4718      	bx	r3
  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800750a:	4b04      	ldr	r3, [pc, #16]	; (800751c <netif_set_link_up+0x44>)
 800750c:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8007510:	4903      	ldr	r1, [pc, #12]	; (8007520 <netif_set_link_up+0x48>)
 8007512:	4804      	ldr	r0, [pc, #16]	; (8007524 <netif_set_link_up+0x4c>)
}
 8007514:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8007518:	f006 bd84 	b.w	800e024 <iprintf>
 800751c:	0800fc60 	.word	0x0800fc60
 8007520:	0800fd88 	.word	0x0800fd88
 8007524:	0800ef30 	.word	0x0800ef30

08007528 <netif_set_link_down>:
{
 8007528:	b510      	push	{r4, lr}
 800752a:	4604      	mov	r4, r0
  LWIP_ASSERT_CORE_LOCKED();
 800752c:	f7fc fd04 	bl	8003f38 <sys_check_core_locking>
  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8007530:	b174      	cbz	r4, 8007550 <netif_set_link_down+0x28>
  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8007532:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8007536:	075a      	lsls	r2, r3, #29
 8007538:	d509      	bpl.n	800754e <netif_set_link_down+0x26>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800753a:	f023 0304 	bic.w	r3, r3, #4
    NETIF_LINK_CALLBACK(netif);
 800753e:	69e2      	ldr	r2, [r4, #28]
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8007540:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 8007544:	b11a      	cbz	r2, 800754e <netif_set_link_down+0x26>
 8007546:	4620      	mov	r0, r4
}
 8007548:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    NETIF_LINK_CALLBACK(netif);
 800754c:	4710      	bx	r2
}
 800754e:	bd10      	pop	{r4, pc}
  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8007550:	4b04      	ldr	r3, [pc, #16]	; (8007564 <netif_set_link_down+0x3c>)
 8007552:	f240 4206 	movw	r2, #1030	; 0x406
 8007556:	4904      	ldr	r1, [pc, #16]	; (8007568 <netif_set_link_down+0x40>)
 8007558:	4804      	ldr	r0, [pc, #16]	; (800756c <netif_set_link_down+0x44>)
}
 800755a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800755e:	f006 bd61 	b.w	800e024 <iprintf>
 8007562:	bf00      	nop
 8007564:	0800fc60 	.word	0x0800fc60
 8007568:	0800fdac 	.word	0x0800fdac
 800756c:	0800ef30 	.word	0x0800ef30

08007570 <netif_set_link_callback>:
{
 8007570:	b538      	push	{r3, r4, r5, lr}
 8007572:	4604      	mov	r4, r0
 8007574:	460d      	mov	r5, r1
  LWIP_ASSERT_CORE_LOCKED();
 8007576:	f7fc fcdf 	bl	8003f38 <sys_check_core_locking>
  if (netif) {
 800757a:	b104      	cbz	r4, 800757e <netif_set_link_callback+0xe>
    netif->link_callback = link_callback;
 800757c:	61e5      	str	r5, [r4, #28]
}
 800757e:	bd38      	pop	{r3, r4, r5, pc}

08007580 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8007580:	b510      	push	{r4, lr}
 8007582:	4604      	mov	r4, r0
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();
 8007584:	f7fc fcd8 	bl	8003f38 <sys_check_core_locking>

  if (idx != NETIF_NO_INDEX) {
 8007588:	b164      	cbz	r4, 80075a4 <netif_get_by_index+0x24>
    NETIF_FOREACH(netif) {
 800758a:	4b07      	ldr	r3, [pc, #28]	; (80075a8 <netif_get_by_index+0x28>)
 800758c:	6818      	ldr	r0, [r3, #0]
 800758e:	b910      	cbnz	r0, 8007596 <netif_get_by_index+0x16>
 8007590:	e007      	b.n	80075a2 <netif_get_by_index+0x22>
 8007592:	6800      	ldr	r0, [r0, #0]
 8007594:	b128      	cbz	r0, 80075a2 <netif_get_by_index+0x22>
      if (idx == netif_get_index(netif)) {
 8007596:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 800759a:	3301      	adds	r3, #1
 800759c:	b2db      	uxtb	r3, r3
 800759e:	42a3      	cmp	r3, r4
 80075a0:	d1f7      	bne.n	8007592 <netif_get_by_index+0x12>
      }
    }
  }

  return NULL;
}
 80075a2:	bd10      	pop	{r4, pc}
  return NULL;
 80075a4:	4620      	mov	r0, r4
}
 80075a6:	bd10      	pop	{r4, pc}
 80075a8:	24010540 	.word	0x24010540

080075ac <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 80075ac:	b508      	push	{r3, lr}
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 80075ae:	f006 fc39 	bl	800de24 <sys_arch_protect>
 80075b2:	4b09      	ldr	r3, [pc, #36]	; (80075d8 <pbuf_free_ooseq_callback+0x2c>)
 80075b4:	2200      	movs	r2, #0
 80075b6:	701a      	strb	r2, [r3, #0]
 80075b8:	f006 fc40 	bl	800de3c <sys_arch_unprotect>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80075bc:	4b07      	ldr	r3, [pc, #28]	; (80075dc <pbuf_free_ooseq_callback+0x30>)
 80075be:	6818      	ldr	r0, [r3, #0]
 80075c0:	b910      	cbnz	r0, 80075c8 <pbuf_free_ooseq_callback+0x1c>
 80075c2:	e008      	b.n	80075d6 <pbuf_free_ooseq_callback+0x2a>
 80075c4:	68c0      	ldr	r0, [r0, #12]
 80075c6:	b130      	cbz	r0, 80075d6 <pbuf_free_ooseq_callback+0x2a>
    if (pcb->ooseq != NULL) {
 80075c8:	6f43      	ldr	r3, [r0, #116]	; 0x74
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d0fa      	beq.n	80075c4 <pbuf_free_ooseq_callback+0x18>
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
}
 80075ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      tcp_free_ooseq(pcb);
 80075d2:	f001 bf39 	b.w	8009448 <tcp_free_ooseq>
}
 80075d6:	bd08      	pop	{r3, pc}
 80075d8:	24010545 	.word	0x24010545
 80075dc:	24010548 	.word	0x24010548

080075e0 <pbuf_copy.part.0>:
 * @return ERR_OK if pbuf was copied
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
 80075e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
{
  size_t offset_to = 0, offset_from = 0, len;
 80075e4:	2600      	movs	r6, #0
      len = p_to->len - offset_to;
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
    offset_to += len;
    offset_from += len;
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80075e6:	f8df a124 	ldr.w	sl, [pc, #292]	; 800770c <pbuf_copy.part.0+0x12c>
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
 80075ea:	4605      	mov	r5, r0
 80075ec:	4688      	mov	r8, r1
  size_t offset_to = 0, offset_from = 0, len;
 80075ee:	4637      	mov	r7, r6
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80075f0:	8944      	ldrh	r4, [r0, #10]
 80075f2:	894b      	ldrh	r3, [r1, #10]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80075f4:	f8df b128 	ldr.w	fp, [pc, #296]	; 8007720 <pbuf_copy.part.0+0x140>
 80075f8:	f8df 9118 	ldr.w	r9, [pc, #280]	; 8007714 <pbuf_copy.part.0+0x134>
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80075fc:	1be4      	subs	r4, r4, r7
 80075fe:	1b9b      	subs	r3, r3, r6
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8007600:	6868      	ldr	r0, [r5, #4]
 8007602:	429c      	cmp	r4, r3
 8007604:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007608:	4438      	add	r0, r7
 800760a:	bf28      	it	cs
 800760c:	461c      	movcs	r4, r3
 800760e:	4431      	add	r1, r6
 8007610:	4622      	mov	r2, r4
    offset_to += len;
 8007612:	4427      	add	r7, r4
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8007614:	f006 fe36 	bl	800e284 <memcpy>
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8007618:	896b      	ldrh	r3, [r5, #10]
    offset_from += len;
 800761a:	4426      	add	r6, r4
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800761c:	429f      	cmp	r7, r3
 800761e:	d838      	bhi.n	8007692 <pbuf_copy.part.0+0xb2>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8007620:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 8007624:	429e      	cmp	r6, r3
 8007626:	d82a      	bhi.n	800767e <pbuf_copy.part.0+0x9e>
    if (offset_from >= p_from->len) {
 8007628:	429e      	cmp	r6, r3
 800762a:	d318      	bcc.n	800765e <pbuf_copy.part.0+0x7e>
      /* on to next p_from (if any) */
      offset_from = 0;
      p_from = p_from->next;
    }
    if (offset_to == p_to->len) {
 800762c:	896b      	ldrh	r3, [r5, #10]
      p_from = p_from->next;
 800762e:	f8d8 8000 	ldr.w	r8, [r8]
    if (offset_to == p_to->len) {
 8007632:	429f      	cmp	r7, r3
 8007634:	d04c      	beq.n	80076d0 <pbuf_copy.part.0+0xf0>
      offset_to = 0;
      p_to = p_to->next;
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8007636:	f1b8 0f00 	cmp.w	r8, #0
 800763a:	d145      	bne.n	80076c8 <pbuf_copy.part.0+0xe8>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800763c:	892a      	ldrh	r2, [r5, #8]
 800763e:	896b      	ldrh	r3, [r5, #10]
 8007640:	429a      	cmp	r2, r3
 8007642:	d14d      	bne.n	80076e0 <pbuf_copy.part.0+0x100>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8007644:	6828      	ldr	r0, [r5, #0]
 8007646:	b140      	cbz	r0, 800765a <pbuf_copy.part.0+0x7a>
 8007648:	4b30      	ldr	r3, [pc, #192]	; (800770c <pbuf_copy.part.0+0x12c>)
 800764a:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800764e:	4930      	ldr	r1, [pc, #192]	; (8007710 <pbuf_copy.part.0+0x130>)
 8007650:	4830      	ldr	r0, [pc, #192]	; (8007714 <pbuf_copy.part.0+0x134>)
 8007652:	f006 fce7 	bl	800e024 <iprintf>
 8007656:	f06f 0005 	mvn.w	r0, #5
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
}
 800765a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (offset_to == p_to->len) {
 800765e:	896a      	ldrh	r2, [r5, #10]
 8007660:	4297      	cmp	r7, r2
 8007662:	d040      	beq.n	80076e6 <pbuf_copy.part.0+0x106>
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8007664:	f8b8 2008 	ldrh.w	r2, [r8, #8]
 8007668:	429a      	cmp	r2, r3
 800766a:	d01a      	beq.n	80076a2 <pbuf_copy.part.0+0xc2>
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800766c:	896c      	ldrh	r4, [r5, #10]
 800766e:	2d00      	cmp	r5, #0
 8007670:	d0c4      	beq.n	80075fc <pbuf_copy.part.0+0x1c>
 8007672:	892b      	ldrh	r3, [r5, #8]
 8007674:	42a3      	cmp	r3, r4
 8007676:	d045      	beq.n	8007704 <pbuf_copy.part.0+0x124>
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8007678:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 800767c:	e7be      	b.n	80075fc <pbuf_copy.part.0+0x1c>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800767e:	4653      	mov	r3, sl
 8007680:	f240 32da 	movw	r2, #986	; 0x3da
 8007684:	4924      	ldr	r1, [pc, #144]	; (8007718 <pbuf_copy.part.0+0x138>)
 8007686:	4648      	mov	r0, r9
 8007688:	f006 fccc 	bl	800e024 <iprintf>
    if (offset_from >= p_from->len) {
 800768c:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 8007690:	e7ca      	b.n	8007628 <pbuf_copy.part.0+0x48>
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8007692:	4653      	mov	r3, sl
 8007694:	f240 32d9 	movw	r2, #985	; 0x3d9
 8007698:	4659      	mov	r1, fp
 800769a:	4648      	mov	r0, r9
 800769c:	f006 fcc2 	bl	800e024 <iprintf>
 80076a0:	e7be      	b.n	8007620 <pbuf_copy.part.0+0x40>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80076a2:	f8d8 2000 	ldr.w	r2, [r8]
 80076a6:	2a00      	cmp	r2, #0
 80076a8:	d0e0      	beq.n	800766c <pbuf_copy.part.0+0x8c>
 80076aa:	4b18      	ldr	r3, [pc, #96]	; (800770c <pbuf_copy.part.0+0x12c>)
 80076ac:	f240 32e9 	movw	r2, #1001	; 0x3e9
 80076b0:	4917      	ldr	r1, [pc, #92]	; (8007710 <pbuf_copy.part.0+0x130>)
 80076b2:	4818      	ldr	r0, [pc, #96]	; (8007714 <pbuf_copy.part.0+0x134>)
 80076b4:	f006 fcb6 	bl	800e024 <iprintf>
 80076b8:	f06f 0005 	mvn.w	r0, #5
}
 80076bc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80076c0:	f1b8 0f00 	cmp.w	r8, #0
 80076c4:	d00a      	beq.n	80076dc <pbuf_copy.part.0+0xfc>
      offset_to = 0;
 80076c6:	2700      	movs	r7, #0
 80076c8:	2600      	movs	r6, #0
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80076ca:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 80076ce:	e7c9      	b.n	8007664 <pbuf_copy.part.0+0x84>
      p_to = p_to->next;
 80076d0:	682d      	ldr	r5, [r5, #0]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 80076d2:	2d00      	cmp	r5, #0
 80076d4:	d1f4      	bne.n	80076c0 <pbuf_copy.part.0+0xe0>
 80076d6:	f1b8 0f00 	cmp.w	r8, #0
 80076da:	d108      	bne.n	80076ee <pbuf_copy.part.0+0x10e>
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80076dc:	2d00      	cmp	r5, #0
 80076de:	d1ad      	bne.n	800763c <pbuf_copy.part.0+0x5c>
  return ERR_OK;
 80076e0:	2000      	movs	r0, #0
}
 80076e2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      p_to = p_to->next;
 80076e6:	682d      	ldr	r5, [r5, #0]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 80076e8:	b10d      	cbz	r5, 80076ee <pbuf_copy.part.0+0x10e>
      offset_to = 0;
 80076ea:	2700      	movs	r7, #0
 80076ec:	e7ed      	b.n	80076ca <pbuf_copy.part.0+0xea>
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 80076ee:	4b07      	ldr	r3, [pc, #28]	; (800770c <pbuf_copy.part.0+0x12c>)
 80076f0:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 80076f4:	4909      	ldr	r1, [pc, #36]	; (800771c <pbuf_copy.part.0+0x13c>)
 80076f6:	4807      	ldr	r0, [pc, #28]	; (8007714 <pbuf_copy.part.0+0x134>)
 80076f8:	f006 fc94 	bl	800e024 <iprintf>
 80076fc:	f06f 000f 	mvn.w	r0, #15
}
 8007700:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8007704:	682b      	ldr	r3, [r5, #0]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d0b6      	beq.n	8007678 <pbuf_copy.part.0+0x98>
 800770a:	e79d      	b.n	8007648 <pbuf_copy.part.0+0x68>
 800770c:	0800fdd0 	.word	0x0800fdd0
 8007710:	0800fe44 	.word	0x0800fe44
 8007714:	0800ef30 	.word	0x0800ef30
 8007718:	0800fe18 	.word	0x0800fe18
 800771c:	0800fe34 	.word	0x0800fe34
 8007720:	0800fe00 	.word	0x0800fe00

08007724 <pbuf_alloc_reference>:
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8007724:	f022 0340 	bic.w	r3, r2, #64	; 0x40
 8007728:	2b01      	cmp	r3, #1
{
 800772a:	b570      	push	{r4, r5, r6, lr}
 800772c:	4614      	mov	r4, r2
 800772e:	4606      	mov	r6, r0
 8007730:	460d      	mov	r5, r1
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8007732:	d10d      	bne.n	8007750 <pbuf_alloc_reference+0x2c>
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8007734:	200b      	movs	r0, #11
 8007736:	f7ff fcc9 	bl	80070cc <memp_malloc>
  if (p == NULL) {
 800773a:	b140      	cbz	r0, 800774e <pbuf_alloc_reference+0x2a>
  p->next = NULL;
 800773c:	2300      	movs	r3, #0
  p->ref = 1;
 800773e:	2201      	movs	r2, #1
  p->payload = payload;
 8007740:	6046      	str	r6, [r0, #4]
  p->tot_len = tot_len;
 8007742:	8105      	strh	r5, [r0, #8]
  p->next = NULL;
 8007744:	6003      	str	r3, [r0, #0]
  p->len = len;
 8007746:	8145      	strh	r5, [r0, #10]
  p->type_internal = (u8_t)type;
 8007748:	7304      	strb	r4, [r0, #12]
  p->flags = flags;
 800774a:	7343      	strb	r3, [r0, #13]
  p->ref = 1;
 800774c:	81c2      	strh	r2, [r0, #14]
}
 800774e:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8007750:	4b03      	ldr	r3, [pc, #12]	; (8007760 <pbuf_alloc_reference+0x3c>)
 8007752:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8007756:	4903      	ldr	r1, [pc, #12]	; (8007764 <pbuf_alloc_reference+0x40>)
 8007758:	4803      	ldr	r0, [pc, #12]	; (8007768 <pbuf_alloc_reference+0x44>)
 800775a:	f006 fc63 	bl	800e024 <iprintf>
 800775e:	e7e9      	b.n	8007734 <pbuf_alloc_reference+0x10>
 8007760:	0800fdd0 	.word	0x0800fdd0
 8007764:	0800fe70 	.word	0x0800fe70
 8007768:	0800ef30 	.word	0x0800ef30

0800776c <pbuf_alloced_custom>:
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800776c:	3003      	adds	r0, #3
 800776e:	f020 0003 	bic.w	r0, r0, #3
{
 8007772:	b510      	push	{r4, lr}
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8007774:	eb01 0e00 	add.w	lr, r1, r0
{
 8007778:	f8bd c00c 	ldrh.w	ip, [sp, #12]
 800777c:	9c02      	ldr	r4, [sp, #8]
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800777e:	45e6      	cmp	lr, ip
 8007780:	d80d      	bhi.n	800779e <pbuf_alloced_custom+0x32>
  if (payload_mem != NULL) {
 8007782:	b104      	cbz	r4, 8007786 <pbuf_alloced_custom+0x1a>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8007784:	4404      	add	r4, r0
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8007786:	4618      	mov	r0, r3
  p->next = NULL;
 8007788:	2300      	movs	r3, #0
  p->payload = payload;
 800778a:	6044      	str	r4, [r0, #4]
  p->flags = flags;
 800778c:	2402      	movs	r4, #2
  p->next = NULL;
 800778e:	6003      	str	r3, [r0, #0]
  p->ref = 1;
 8007790:	2301      	movs	r3, #1
  p->tot_len = tot_len;
 8007792:	8101      	strh	r1, [r0, #8]
  p->len = len;
 8007794:	8141      	strh	r1, [r0, #10]
  p->type_internal = (u8_t)type;
 8007796:	7302      	strb	r2, [r0, #12]
  p->flags = flags;
 8007798:	7344      	strb	r4, [r0, #13]
  p->ref = 1;
 800779a:	81c3      	strh	r3, [r0, #14]
}
 800779c:	bd10      	pop	{r4, pc}
    return NULL;
 800779e:	2000      	movs	r0, #0
}
 80077a0:	bd10      	pop	{r4, pc}
 80077a2:	bf00      	nop

080077a4 <pbuf_add_header>:
{
 80077a4:	b508      	push	{r3, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
 80077a6:	b310      	cbz	r0, 80077ee <pbuf_add_header+0x4a>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 80077a8:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 80077ac:	d20c      	bcs.n	80077c8 <pbuf_add_header+0x24>
  if (header_size_increment == 0) {
 80077ae:	b169      	cbz	r1, 80077cc <pbuf_add_header+0x28>
  increment_magnitude = (u16_t)header_size_increment;
 80077b0:	fa1f fc81 	uxth.w	ip, r1
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 80077b4:	8902      	ldrh	r2, [r0, #8]
 80077b6:	4603      	mov	r3, r0
 80077b8:	4462      	add	r2, ip
 80077ba:	b292      	uxth	r2, r2
 80077bc:	4594      	cmp	ip, r2
 80077be:	d803      	bhi.n	80077c8 <pbuf_add_header+0x24>
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 80077c0:	f990 000c 	ldrsb.w	r0, [r0, #12]
 80077c4:	2800      	cmp	r0, #0
 80077c6:	db03      	blt.n	80077d0 <pbuf_add_header+0x2c>
    return 1;
 80077c8:	2001      	movs	r0, #1
}
 80077ca:	bd08      	pop	{r3, pc}
    return 0;
 80077cc:	4608      	mov	r0, r1
}
 80077ce:	bd08      	pop	{r3, pc}
    payload = (u8_t *)p->payload - header_size_increment;
 80077d0:	6858      	ldr	r0, [r3, #4]
 80077d2:	1a41      	subs	r1, r0, r1
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 80077d4:	f103 0010 	add.w	r0, r3, #16
 80077d8:	4281      	cmp	r1, r0
 80077da:	d3f5      	bcc.n	80077c8 <pbuf_add_header+0x24>
  p->len = (u16_t)(p->len + increment_magnitude);
 80077dc:	f8b3 e00a 	ldrh.w	lr, [r3, #10]
  return 0;
 80077e0:	2000      	movs	r0, #0
  p->payload = payload;
 80077e2:	6059      	str	r1, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 80077e4:	44f4      	add	ip, lr
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 80077e6:	811a      	strh	r2, [r3, #8]
  p->len = (u16_t)(p->len + increment_magnitude);
 80077e8:	f8a3 c00a 	strh.w	ip, [r3, #10]
}
 80077ec:	bd08      	pop	{r3, pc}
  LWIP_ASSERT("p != NULL", p != NULL);
 80077ee:	4b04      	ldr	r3, [pc, #16]	; (8007800 <pbuf_add_header+0x5c>)
 80077f0:	f240 12df 	movw	r2, #479	; 0x1df
 80077f4:	4903      	ldr	r1, [pc, #12]	; (8007804 <pbuf_add_header+0x60>)
 80077f6:	4804      	ldr	r0, [pc, #16]	; (8007808 <pbuf_add_header+0x64>)
 80077f8:	f006 fc14 	bl	800e024 <iprintf>
    return 1;
 80077fc:	2001      	movs	r0, #1
}
 80077fe:	bd08      	pop	{r3, pc}
 8007800:	0800fdd0 	.word	0x0800fdd0
 8007804:	0800f020 	.word	0x0800f020
 8007808:	0800ef30 	.word	0x0800ef30

0800780c <pbuf_remove_header>:
{
 800780c:	b510      	push	{r4, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
 800780e:	b1a0      	cbz	r0, 800783a <pbuf_remove_header+0x2e>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8007810:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8007814:	d21a      	bcs.n	800784c <pbuf_remove_header+0x40>
  if (header_size_decrement == 0) {
 8007816:	b171      	cbz	r1, 8007836 <pbuf_remove_header+0x2a>
 8007818:	4603      	mov	r3, r0
  increment_magnitude = (u16_t)header_size_decrement;
 800781a:	b288      	uxth	r0, r1
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800781c:	895a      	ldrh	r2, [r3, #10]
 800781e:	4290      	cmp	r0, r2
 8007820:	d816      	bhi.n	8007850 <pbuf_remove_header+0x44>
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8007822:	685c      	ldr	r4, [r3, #4]
  p->len = (u16_t)(p->len - increment_magnitude);
 8007824:	1a12      	subs	r2, r2, r0
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8007826:	440c      	add	r4, r1
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8007828:	8919      	ldrh	r1, [r3, #8]
  p->len = (u16_t)(p->len - increment_magnitude);
 800782a:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800782c:	1a0a      	subs	r2, r1, r0
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800782e:	605c      	str	r4, [r3, #4]
  return 0;
 8007830:	2000      	movs	r0, #0
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8007832:	811a      	strh	r2, [r3, #8]
}
 8007834:	bd10      	pop	{r4, pc}
    return 0;
 8007836:	4608      	mov	r0, r1
}
 8007838:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("p != NULL", p != NULL);
 800783a:	4b0a      	ldr	r3, [pc, #40]	; (8007864 <pbuf_remove_header+0x58>)
 800783c:	f240 224b 	movw	r2, #587	; 0x24b
 8007840:	4909      	ldr	r1, [pc, #36]	; (8007868 <pbuf_remove_header+0x5c>)
 8007842:	480a      	ldr	r0, [pc, #40]	; (800786c <pbuf_remove_header+0x60>)
 8007844:	f006 fbee 	bl	800e024 <iprintf>
    return 1;
 8007848:	2001      	movs	r0, #1
}
 800784a:	bd10      	pop	{r4, pc}
    return 1;
 800784c:	2001      	movs	r0, #1
}
 800784e:	bd10      	pop	{r4, pc}
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8007850:	4b04      	ldr	r3, [pc, #16]	; (8007864 <pbuf_remove_header+0x58>)
 8007852:	f240 2255 	movw	r2, #597	; 0x255
 8007856:	4906      	ldr	r1, [pc, #24]	; (8007870 <pbuf_remove_header+0x64>)
 8007858:	4804      	ldr	r0, [pc, #16]	; (800786c <pbuf_remove_header+0x60>)
 800785a:	f006 fbe3 	bl	800e024 <iprintf>
 800785e:	2001      	movs	r0, #1
}
 8007860:	bd10      	pop	{r4, pc}
 8007862:	bf00      	nop
 8007864:	0800fdd0 	.word	0x0800fdd0
 8007868:	0800f020 	.word	0x0800f020
 800786c:	0800ef30 	.word	0x0800ef30
 8007870:	0800fe84 	.word	0x0800fe84

08007874 <pbuf_header_force>:
  if (header_size_increment < 0) {
 8007874:	2900      	cmp	r1, #0
 8007876:	db1a      	blt.n	80078ae <pbuf_header_force+0x3a>
{
 8007878:	b508      	push	{r3, lr}
 800787a:	4603      	mov	r3, r0
  LWIP_ASSERT("p != NULL", p != NULL);
 800787c:	b1d0      	cbz	r0, 80078b4 <pbuf_header_force+0x40>
  if (header_size_increment == 0) {
 800787e:	b341      	cbz	r1, 80078d2 <pbuf_header_force+0x5e>
  increment_magnitude = (u16_t)header_size_increment;
 8007880:	fa1f fc81 	uxth.w	ip, r1
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8007884:	891a      	ldrh	r2, [r3, #8]
 8007886:	4462      	add	r2, ip
 8007888:	b292      	uxth	r2, r2
 800788a:	4594      	cmp	ip, r2
 800788c:	d81f      	bhi.n	80078ce <pbuf_header_force+0x5a>
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800788e:	f993 000c 	ldrsb.w	r0, [r3, #12]
 8007892:	2800      	cmp	r0, #0
    payload = (u8_t *)p->payload - header_size_increment;
 8007894:	6858      	ldr	r0, [r3, #4]
 8007896:	eba0 0101 	sub.w	r1, r0, r1
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800789a:	db14      	blt.n	80078c6 <pbuf_header_force+0x52>
  p->len = (u16_t)(p->len + increment_magnitude);
 800789c:	f8b3 e00a 	ldrh.w	lr, [r3, #10]
  return 0;
 80078a0:	2000      	movs	r0, #0
  p->payload = payload;
 80078a2:	6059      	str	r1, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 80078a4:	44f4      	add	ip, lr
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 80078a6:	811a      	strh	r2, [r3, #8]
  p->len = (u16_t)(p->len + increment_magnitude);
 80078a8:	f8a3 c00a 	strh.w	ip, [r3, #10]
}
 80078ac:	bd08      	pop	{r3, pc}
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 80078ae:	4249      	negs	r1, r1
 80078b0:	f7ff bfac 	b.w	800780c <pbuf_remove_header>
  LWIP_ASSERT("p != NULL", p != NULL);
 80078b4:	4b08      	ldr	r3, [pc, #32]	; (80078d8 <pbuf_header_force+0x64>)
 80078b6:	f240 12df 	movw	r2, #479	; 0x1df
 80078ba:	4908      	ldr	r1, [pc, #32]	; (80078dc <pbuf_header_force+0x68>)
 80078bc:	4808      	ldr	r0, [pc, #32]	; (80078e0 <pbuf_header_force+0x6c>)
 80078be:	f006 fbb1 	bl	800e024 <iprintf>
    return 1;
 80078c2:	2001      	movs	r0, #1
}
 80078c4:	bd08      	pop	{r3, pc}
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 80078c6:	f103 0010 	add.w	r0, r3, #16
 80078ca:	4281      	cmp	r1, r0
 80078cc:	d2e6      	bcs.n	800789c <pbuf_header_force+0x28>
    return 1;
 80078ce:	2001      	movs	r0, #1
}
 80078d0:	bd08      	pop	{r3, pc}
    return 0;
 80078d2:	4608      	mov	r0, r1
}
 80078d4:	bd08      	pop	{r3, pc}
 80078d6:	bf00      	nop
 80078d8:	0800fdd0 	.word	0x0800fdd0
 80078dc:	0800f020 	.word	0x0800f020
 80078e0:	0800ef30 	.word	0x0800ef30

080078e4 <pbuf_free>:
{
 80078e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (p == NULL) {
 80078e8:	4605      	mov	r5, r0
 80078ea:	2800      	cmp	r0, #0
 80078ec:	d055      	beq.n	800799a <pbuf_free+0xb6>
  count = 0;
 80078ee:	2600      	movs	r6, #0
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80078f0:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 80079b8 <pbuf_free+0xd4>
 80078f4:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 80079c0 <pbuf_free+0xdc>
 80078f8:	4f2c      	ldr	r7, [pc, #176]	; (80079ac <pbuf_free+0xc8>)
 80078fa:	e008      	b.n	800790e <pbuf_free+0x2a>
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80078fc:	692b      	ldr	r3, [r5, #16]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d03d      	beq.n	800797e <pbuf_free+0x9a>
        pc->custom_free_function(p);
 8007902:	4628      	mov	r0, r5
 8007904:	4798      	blx	r3
      count++;
 8007906:	3601      	adds	r6, #1
 8007908:	b2f6      	uxtb	r6, r6
  while (p != NULL) {
 800790a:	b1fc      	cbz	r4, 800794c <pbuf_free+0x68>
 800790c:	4625      	mov	r5, r4
    SYS_ARCH_PROTECT(old_level);
 800790e:	f006 fa89 	bl	800de24 <sys_arch_protect>
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8007912:	7bab      	ldrb	r3, [r5, #14]
    SYS_ARCH_PROTECT(old_level);
 8007914:	4604      	mov	r4, r0
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8007916:	b1e3      	cbz	r3, 8007952 <pbuf_free+0x6e>
    ref = --(p->ref);
 8007918:	3b01      	subs	r3, #1
    SYS_ARCH_UNPROTECT(old_level);
 800791a:	4620      	mov	r0, r4
    ref = --(p->ref);
 800791c:	b2dc      	uxtb	r4, r3
 800791e:	73ac      	strb	r4, [r5, #14]
    SYS_ARCH_UNPROTECT(old_level);
 8007920:	f006 fa8c 	bl	800de3c <sys_arch_unprotect>
    if (ref == 0) {
 8007924:	b994      	cbnz	r4, 800794c <pbuf_free+0x68>
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8007926:	7b6a      	ldrb	r2, [r5, #13]
      q = p->next;
 8007928:	682c      	ldr	r4, [r5, #0]
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800792a:	0792      	lsls	r2, r2, #30
      alloc_src = pbuf_get_allocsrc(p);
 800792c:	7b2b      	ldrb	r3, [r5, #12]
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800792e:	d4e5      	bmi.n	80078fc <pbuf_free+0x18>
      alloc_src = pbuf_get_allocsrc(p);
 8007930:	f003 030f 	and.w	r3, r3, #15
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8007934:	2b02      	cmp	r3, #2
 8007936:	d01d      	beq.n	8007974 <pbuf_free+0x90>
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8007938:	2b01      	cmp	r3, #1
 800793a:	d029      	beq.n	8007990 <pbuf_free+0xac>
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800793c:	b993      	cbnz	r3, 8007964 <pbuf_free+0x80>
      count++;
 800793e:	3601      	adds	r6, #1
          mem_free(p);
 8007940:	4628      	mov	r0, r5
 8007942:	f7ff f8eb 	bl	8006b1c <mem_free>
      count++;
 8007946:	b2f6      	uxtb	r6, r6
  while (p != NULL) {
 8007948:	2c00      	cmp	r4, #0
 800794a:	d1df      	bne.n	800790c <pbuf_free+0x28>
}
 800794c:	4630      	mov	r0, r6
 800794e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8007952:	4643      	mov	r3, r8
 8007954:	f240 22f1 	movw	r2, #753	; 0x2f1
 8007958:	4649      	mov	r1, r9
 800795a:	4638      	mov	r0, r7
 800795c:	f006 fb62 	bl	800e024 <iprintf>
    ref = --(p->ref);
 8007960:	7bab      	ldrb	r3, [r5, #14]
 8007962:	e7d9      	b.n	8007918 <pbuf_free+0x34>
          LWIP_ASSERT("invalid pbuf type", 0);
 8007964:	4643      	mov	r3, r8
 8007966:	f240 320f 	movw	r2, #783	; 0x30f
 800796a:	4911      	ldr	r1, [pc, #68]	; (80079b0 <pbuf_free+0xcc>)
 800796c:	4638      	mov	r0, r7
 800796e:	f006 fb59 	bl	800e024 <iprintf>
 8007972:	e7c8      	b.n	8007906 <pbuf_free+0x22>
          memp_free(MEMP_PBUF_POOL, p);
 8007974:	4629      	mov	r1, r5
 8007976:	200c      	movs	r0, #12
 8007978:	f7ff fbee 	bl	8007158 <memp_free>
 800797c:	e7c3      	b.n	8007906 <pbuf_free+0x22>
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800797e:	4643      	mov	r3, r8
 8007980:	f240 22ff 	movw	r2, #767	; 0x2ff
 8007984:	490b      	ldr	r1, [pc, #44]	; (80079b4 <pbuf_free+0xd0>)
 8007986:	4638      	mov	r0, r7
 8007988:	f006 fb4c 	bl	800e024 <iprintf>
        pc->custom_free_function(p);
 800798c:	692b      	ldr	r3, [r5, #16]
 800798e:	e7b8      	b.n	8007902 <pbuf_free+0x1e>
          memp_free(MEMP_PBUF, p);
 8007990:	4629      	mov	r1, r5
 8007992:	200b      	movs	r0, #11
 8007994:	f7ff fbe0 	bl	8007158 <memp_free>
 8007998:	e7b5      	b.n	8007906 <pbuf_free+0x22>
    LWIP_ASSERT("p != NULL", p != NULL);
 800799a:	4b07      	ldr	r3, [pc, #28]	; (80079b8 <pbuf_free+0xd4>)
 800799c:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 80079a0:	4906      	ldr	r1, [pc, #24]	; (80079bc <pbuf_free+0xd8>)
    return 0;
 80079a2:	462e      	mov	r6, r5
    LWIP_ASSERT("p != NULL", p != NULL);
 80079a4:	4801      	ldr	r0, [pc, #4]	; (80079ac <pbuf_free+0xc8>)
 80079a6:	f006 fb3d 	bl	800e024 <iprintf>
    return 0;
 80079aa:	e7cf      	b.n	800794c <pbuf_free+0x68>
 80079ac:	0800ef30 	.word	0x0800ef30
 80079b0:	0800fee0 	.word	0x0800fee0
 80079b4:	0800febc 	.word	0x0800febc
 80079b8:	0800fdd0 	.word	0x0800fdd0
 80079bc:	0800f020 	.word	0x0800f020
 80079c0:	0800fea4 	.word	0x0800fea4

080079c4 <pbuf_alloc>:
  switch (type) {
 80079c4:	f5b2 7fc1 	cmp.w	r2, #386	; 0x182
{
 80079c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80079cc:	4688      	mov	r8, r1
 80079ce:	b083      	sub	sp, #12
  u16_t offset = (u16_t)layer;
 80079d0:	fa1f f980 	uxth.w	r9, r0
  switch (type) {
 80079d4:	d040      	beq.n	8007a58 <pbuf_alloc+0x94>
 80079d6:	d80f      	bhi.n	80079f8 <pbuf_alloc+0x34>
 80079d8:	f022 0340 	bic.w	r3, r2, #64	; 0x40
 80079dc:	2b01      	cmp	r3, #1
 80079de:	d035      	beq.n	8007a4c <pbuf_alloc+0x88>
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80079e0:	4b48      	ldr	r3, [pc, #288]	; (8007b04 <pbuf_alloc+0x140>)
 80079e2:	f240 1227 	movw	r2, #295	; 0x127
 80079e6:	4948      	ldr	r1, [pc, #288]	; (8007b08 <pbuf_alloc+0x144>)
      return NULL;
 80079e8:	2400      	movs	r4, #0
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80079ea:	4848      	ldr	r0, [pc, #288]	; (8007b0c <pbuf_alloc+0x148>)
 80079ec:	f006 fb1a 	bl	800e024 <iprintf>
}
 80079f0:	4620      	mov	r0, r4
 80079f2:	b003      	add	sp, #12
 80079f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  switch (type) {
 80079f8:	f5b2 7f20 	cmp.w	r2, #640	; 0x280
 80079fc:	d1f0      	bne.n	80079e0 <pbuf_alloc+0x1c>
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 80079fe:	f109 0303 	add.w	r3, r9, #3
 8007a02:	1cca      	adds	r2, r1, #3
 8007a04:	4605      	mov	r5, r0
 8007a06:	f022 0203 	bic.w	r2, r2, #3
 8007a0a:	f023 0303 	bic.w	r3, r3, #3
 8007a0e:	4413      	add	r3, r2
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8007a10:	b29b      	uxth	r3, r3
 8007a12:	f103 0010 	add.w	r0, r3, #16
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8007a16:	4283      	cmp	r3, r0
 8007a18:	bf28      	it	cs
 8007a1a:	4603      	movcs	r3, r0
 8007a1c:	429a      	cmp	r2, r3
 8007a1e:	d84c      	bhi.n	8007aba <pbuf_alloc+0xf6>
      p = (struct pbuf *)mem_malloc(alloc_len);
 8007a20:	f7ff fa20 	bl	8006e64 <mem_malloc>
      if (p == NULL) {
 8007a24:	4604      	mov	r4, r0
 8007a26:	2800      	cmp	r0, #0
 8007a28:	d0e2      	beq.n	80079f0 <pbuf_alloc+0x2c>
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8007a2a:	1943      	adds	r3, r0, r5
  p->next = NULL;
 8007a2c:	2100      	movs	r1, #0
  p->type_internal = (u8_t)type;
 8007a2e:	4a38      	ldr	r2, [pc, #224]	; (8007b10 <pbuf_alloc+0x14c>)
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8007a30:	3313      	adds	r3, #19
  p->tot_len = tot_len;
 8007a32:	f8a0 8008 	strh.w	r8, [r0, #8]
  p->next = NULL;
 8007a36:	6001      	str	r1, [r0, #0]
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8007a38:	f023 0303 	bic.w	r3, r3, #3
  p->len = len;
 8007a3c:	f8a0 800a 	strh.w	r8, [r0, #10]
  p->type_internal = (u8_t)type;
 8007a40:	60c2      	str	r2, [r0, #12]
  p->payload = payload;
 8007a42:	6043      	str	r3, [r0, #4]
}
 8007a44:	4620      	mov	r0, r4
 8007a46:	b003      	add	sp, #12
 8007a48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      p = pbuf_alloc_reference(NULL, length, type);
 8007a4c:	2000      	movs	r0, #0
}
 8007a4e:	b003      	add	sp, #12
 8007a50:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
      p = pbuf_alloc_reference(NULL, length, type);
 8007a54:	f7ff be66 	b.w	8007724 <pbuf_alloc_reference>
  switch (type) {
 8007a58:	2100      	movs	r1, #0
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8007a5a:	f240 56ec 	movw	r6, #1516	; 0x5ec
  p->type_internal = (u8_t)type;
 8007a5e:	4d2d      	ldr	r5, [pc, #180]	; (8007b14 <pbuf_alloc+0x150>)
  switch (type) {
 8007a60:	460c      	mov	r4, r1
 8007a62:	e009      	b.n	8007a78 <pbuf_alloc+0xb4>
          last->next = q;
 8007a64:	6038      	str	r0, [r7, #0]
        rem_len = (u16_t)(rem_len - qlen);
 8007a66:	eba8 0303 	sub.w	r3, r8, r3
        offset = 0;
 8007a6a:	f04f 0900 	mov.w	r9, #0
        rem_len = (u16_t)(rem_len - qlen);
 8007a6e:	fa1f f883 	uxth.w	r8, r3
      } while (rem_len > 0);
 8007a72:	f1b8 0f00 	cmp.w	r8, #0
 8007a76:	d0bb      	beq.n	80079f0 <pbuf_alloc+0x2c>
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8007a78:	200c      	movs	r0, #12
 8007a7a:	460f      	mov	r7, r1
 8007a7c:	f7ff fb26 	bl	80070cc <memp_malloc>
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8007a80:	f109 0203 	add.w	r2, r9, #3
  p->next = NULL;
 8007a84:	f04f 0c00 	mov.w	ip, #0
        if (q == NULL) {
 8007a88:	4601      	mov	r1, r0
 8007a8a:	b1d8      	cbz	r0, 8007ac4 <pbuf_alloc+0x100>
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8007a8c:	f022 0303 	bic.w	r3, r2, #3
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8007a90:	eb00 0209 	add.w	r2, r0, r9
  p->tot_len = tot_len;
 8007a94:	f8a0 8008 	strh.w	r8, [r0, #8]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8007a98:	1af3      	subs	r3, r6, r3
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8007a9a:	3213      	adds	r2, #19
  p->next = NULL;
 8007a9c:	f8c0 c000 	str.w	ip, [r0]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8007aa0:	b29b      	uxth	r3, r3
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8007aa2:	f022 0203 	bic.w	r2, r2, #3
  p->type_internal = (u8_t)type;
 8007aa6:	60c5      	str	r5, [r0, #12]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8007aa8:	4543      	cmp	r3, r8
  p->payload = payload;
 8007aaa:	6042      	str	r2, [r0, #4]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8007aac:	bf28      	it	cs
 8007aae:	4643      	movcs	r3, r8
  p->len = len;
 8007ab0:	8143      	strh	r3, [r0, #10]
        if (p == NULL) {
 8007ab2:	2c00      	cmp	r4, #0
 8007ab4:	d1d6      	bne.n	8007a64 <pbuf_alloc+0xa0>
 8007ab6:	4604      	mov	r4, r0
 8007ab8:	e7d5      	b.n	8007a66 <pbuf_alloc+0xa2>
          return NULL;
 8007aba:	2400      	movs	r4, #0
}
 8007abc:	4620      	mov	r0, r4
 8007abe:	b003      	add	sp, #12
 8007ac0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  queued = pbuf_free_ooseq_pending;
 8007ac4:	4e14      	ldr	r6, [pc, #80]	; (8007b18 <pbuf_alloc+0x154>)
 8007ac6:	9001      	str	r0, [sp, #4]
  SYS_ARCH_PROTECT(old_level);
 8007ac8:	f006 f9ac 	bl	800de24 <sys_arch_protect>
  queued = pbuf_free_ooseq_pending;
 8007acc:	7835      	ldrb	r5, [r6, #0]
  pbuf_free_ooseq_pending = 1;
 8007ace:	2301      	movs	r3, #1
  queued = pbuf_free_ooseq_pending;
 8007ad0:	b2ed      	uxtb	r5, r5
  pbuf_free_ooseq_pending = 1;
 8007ad2:	7033      	strb	r3, [r6, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8007ad4:	f006 f9b2 	bl	800de3c <sys_arch_unprotect>
  if (!queued) {
 8007ad8:	9901      	ldr	r1, [sp, #4]
 8007ada:	b135      	cbz	r5, 8007aea <pbuf_alloc+0x126>
          if (p) {
 8007adc:	2c00      	cmp	r4, #0
 8007ade:	d0ec      	beq.n	8007aba <pbuf_alloc+0xf6>
            pbuf_free(p);
 8007ae0:	4620      	mov	r0, r4
          return NULL;
 8007ae2:	2400      	movs	r4, #0
            pbuf_free(p);
 8007ae4:	f7ff fefe 	bl	80078e4 <pbuf_free>
 8007ae8:	e782      	b.n	80079f0 <pbuf_alloc+0x2c>
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8007aea:	480c      	ldr	r0, [pc, #48]	; (8007b1c <pbuf_alloc+0x158>)
 8007aec:	f7fe fee2 	bl	80068b4 <tcpip_try_callback>
 8007af0:	2800      	cmp	r0, #0
 8007af2:	d0f3      	beq.n	8007adc <pbuf_alloc+0x118>
 8007af4:	f006 f996 	bl	800de24 <sys_arch_protect>
 8007af8:	9901      	ldr	r1, [sp, #4]
 8007afa:	7031      	strb	r1, [r6, #0]
 8007afc:	f006 f99e 	bl	800de3c <sys_arch_unprotect>
 8007b00:	e7ec      	b.n	8007adc <pbuf_alloc+0x118>
 8007b02:	bf00      	nop
 8007b04:	0800fdd0 	.word	0x0800fdd0
 8007b08:	0800fef4 	.word	0x0800fef4
 8007b0c:	0800ef30 	.word	0x0800ef30
 8007b10:	00010080 	.word	0x00010080
 8007b14:	00010082 	.word	0x00010082
 8007b18:	24010545 	.word	0x24010545
 8007b1c:	080075ad 	.word	0x080075ad

08007b20 <pbuf_realloc>:
{
 8007b20:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8007b22:	4604      	mov	r4, r0
{
 8007b24:	460d      	mov	r5, r1
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8007b26:	2800      	cmp	r0, #0
 8007b28:	d036      	beq.n	8007b98 <pbuf_realloc+0x78>
  if (new_len >= p->tot_len) {
 8007b2a:	8922      	ldrh	r2, [r4, #8]
 8007b2c:	42aa      	cmp	r2, r5
 8007b2e:	d91b      	bls.n	8007b68 <pbuf_realloc+0x48>
  while (rem_len > q->len) {
 8007b30:	8963      	ldrh	r3, [r4, #10]
 8007b32:	429d      	cmp	r5, r3
 8007b34:	d90d      	bls.n	8007b52 <pbuf_realloc+0x32>
 8007b36:	1aa9      	subs	r1, r5, r2
 8007b38:	b289      	uxth	r1, r1
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8007b3a:	440a      	add	r2, r1
    rem_len = (u16_t)(rem_len - q->len);
 8007b3c:	1aeb      	subs	r3, r5, r3
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8007b3e:	8122      	strh	r2, [r4, #8]
    rem_len = (u16_t)(rem_len - q->len);
 8007b40:	b29d      	uxth	r5, r3
    q = q->next;
 8007b42:	6824      	ldr	r4, [r4, #0]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8007b44:	2c00      	cmp	r4, #0
 8007b46:	d02f      	beq.n	8007ba8 <pbuf_realloc+0x88>
  while (rem_len > q->len) {
 8007b48:	8963      	ldrh	r3, [r4, #10]
 8007b4a:	42ab      	cmp	r3, r5
 8007b4c:	d201      	bcs.n	8007b52 <pbuf_realloc+0x32>
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8007b4e:	8922      	ldrh	r2, [r4, #8]
 8007b50:	e7f3      	b.n	8007b3a <pbuf_realloc+0x1a>
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8007b52:	7b22      	ldrb	r2, [r4, #12]
 8007b54:	0712      	lsls	r2, r2, #28
 8007b56:	d008      	beq.n	8007b6a <pbuf_realloc+0x4a>
  if (q->next != NULL) {
 8007b58:	6820      	ldr	r0, [r4, #0]
  q->len = rem_len;
 8007b5a:	8165      	strh	r5, [r4, #10]
  q->tot_len = q->len;
 8007b5c:	8125      	strh	r5, [r4, #8]
  if (q->next != NULL) {
 8007b5e:	b108      	cbz	r0, 8007b64 <pbuf_realloc+0x44>
    pbuf_free(q->next);
 8007b60:	f7ff fec0 	bl	80078e4 <pbuf_free>
  q->next = NULL;
 8007b64:	2300      	movs	r3, #0
 8007b66:	6023      	str	r3, [r4, #0]
}
 8007b68:	bd38      	pop	{r3, r4, r5, pc}
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8007b6a:	42ab      	cmp	r3, r5
 8007b6c:	d0f4      	beq.n	8007b58 <pbuf_realloc+0x38>
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8007b6e:	7b63      	ldrb	r3, [r4, #13]
 8007b70:	079b      	lsls	r3, r3, #30
 8007b72:	d4f1      	bmi.n	8007b58 <pbuf_realloc+0x38>
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8007b74:	6863      	ldr	r3, [r4, #4]
 8007b76:	4620      	mov	r0, r4
 8007b78:	1b1b      	subs	r3, r3, r4
 8007b7a:	1959      	adds	r1, r3, r5
 8007b7c:	f7ff f8b8 	bl	8006cf0 <mem_trim>
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8007b80:	4604      	mov	r4, r0
 8007b82:	2800      	cmp	r0, #0
 8007b84:	d1e8      	bne.n	8007b58 <pbuf_realloc+0x38>
 8007b86:	4b0d      	ldr	r3, [pc, #52]	; (8007bbc <pbuf_realloc+0x9c>)
 8007b88:	f240 12bd 	movw	r2, #445	; 0x1bd
 8007b8c:	490c      	ldr	r1, [pc, #48]	; (8007bc0 <pbuf_realloc+0xa0>)
 8007b8e:	480d      	ldr	r0, [pc, #52]	; (8007bc4 <pbuf_realloc+0xa4>)
 8007b90:	f006 fa48 	bl	800e024 <iprintf>
  q->len = rem_len;
 8007b94:	8164      	strh	r4, [r4, #10]
 8007b96:	deff      	udf	#255	; 0xff
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8007b98:	4b08      	ldr	r3, [pc, #32]	; (8007bbc <pbuf_realloc+0x9c>)
 8007b9a:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8007b9e:	490a      	ldr	r1, [pc, #40]	; (8007bc8 <pbuf_realloc+0xa8>)
 8007ba0:	4808      	ldr	r0, [pc, #32]	; (8007bc4 <pbuf_realloc+0xa4>)
 8007ba2:	f006 fa3f 	bl	800e024 <iprintf>
 8007ba6:	e7c0      	b.n	8007b2a <pbuf_realloc+0xa>
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8007ba8:	4b04      	ldr	r3, [pc, #16]	; (8007bbc <pbuf_realloc+0x9c>)
 8007baa:	f240 12af 	movw	r2, #431	; 0x1af
 8007bae:	4907      	ldr	r1, [pc, #28]	; (8007bcc <pbuf_realloc+0xac>)
 8007bb0:	4804      	ldr	r0, [pc, #16]	; (8007bc4 <pbuf_realloc+0xa4>)
 8007bb2:	f006 fa37 	bl	800e024 <iprintf>
  while (rem_len > q->len) {
 8007bb6:	8963      	ldrh	r3, [r4, #10]
 8007bb8:	deff      	udf	#255	; 0xff
 8007bba:	bf00      	nop
 8007bbc:	0800fdd0 	.word	0x0800fdd0
 8007bc0:	0800ff40 	.word	0x0800ff40
 8007bc4:	0800ef30 	.word	0x0800ef30
 8007bc8:	0800ff10 	.word	0x0800ff10
 8007bcc:	0800ff28 	.word	0x0800ff28

08007bd0 <pbuf_clen>:
  while (p != NULL) {
 8007bd0:	b138      	cbz	r0, 8007be2 <pbuf_clen+0x12>
  len = 0;
 8007bd2:	2300      	movs	r3, #0
    ++len;
 8007bd4:	3301      	adds	r3, #1
    p = p->next;
 8007bd6:	6800      	ldr	r0, [r0, #0]
    ++len;
 8007bd8:	b29b      	uxth	r3, r3
  while (p != NULL) {
 8007bda:	2800      	cmp	r0, #0
 8007bdc:	d1fa      	bne.n	8007bd4 <pbuf_clen+0x4>
}
 8007bde:	4618      	mov	r0, r3
 8007be0:	4770      	bx	lr
  len = 0;
 8007be2:	4603      	mov	r3, r0
}
 8007be4:	4618      	mov	r0, r3
 8007be6:	4770      	bx	lr

08007be8 <pbuf_ref>:
  if (p != NULL) {
 8007be8:	b158      	cbz	r0, 8007c02 <pbuf_ref+0x1a>
{
 8007bea:	b510      	push	{r4, lr}
 8007bec:	4604      	mov	r4, r0
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8007bee:	f006 f919 	bl	800de24 <sys_arch_protect>
 8007bf2:	7ba3      	ldrb	r3, [r4, #14]
 8007bf4:	3301      	adds	r3, #1
 8007bf6:	73a3      	strb	r3, [r4, #14]
 8007bf8:	f006 f920 	bl	800de3c <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8007bfc:	7ba3      	ldrb	r3, [r4, #14]
 8007bfe:	b10b      	cbz	r3, 8007c04 <pbuf_ref+0x1c>
}
 8007c00:	bd10      	pop	{r4, pc}
 8007c02:	4770      	bx	lr
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8007c04:	4b04      	ldr	r3, [pc, #16]	; (8007c18 <pbuf_ref+0x30>)
 8007c06:	f240 3242 	movw	r2, #834	; 0x342
 8007c0a:	4904      	ldr	r1, [pc, #16]	; (8007c1c <pbuf_ref+0x34>)
 8007c0c:	4804      	ldr	r0, [pc, #16]	; (8007c20 <pbuf_ref+0x38>)
}
 8007c0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8007c12:	f006 ba07 	b.w	800e024 <iprintf>
 8007c16:	bf00      	nop
 8007c18:	0800fdd0 	.word	0x0800fdd0
 8007c1c:	0800ff5c 	.word	0x0800ff5c
 8007c20:	0800ef30 	.word	0x0800ef30

08007c24 <pbuf_cat>:
{
 8007c24:	b570      	push	{r4, r5, r6, lr}
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8007c26:	b330      	cbz	r0, 8007c76 <pbuf_cat+0x52>
 8007c28:	460d      	mov	r5, r1
 8007c2a:	b321      	cbz	r1, 8007c76 <pbuf_cat+0x52>
  for (p = h; p->next != NULL; p = p->next) {
 8007c2c:	6803      	ldr	r3, [r0, #0]
 8007c2e:	4604      	mov	r4, r0
 8007c30:	b13b      	cbz	r3, 8007c42 <pbuf_cat+0x1e>
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8007c32:	8922      	ldrh	r2, [r4, #8]
 8007c34:	8928      	ldrh	r0, [r5, #8]
 8007c36:	4402      	add	r2, r0
 8007c38:	8122      	strh	r2, [r4, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8007c3a:	461c      	mov	r4, r3
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d1f7      	bne.n	8007c32 <pbuf_cat+0xe>
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8007c42:	8963      	ldrh	r3, [r4, #10]
 8007c44:	8922      	ldrh	r2, [r4, #8]
 8007c46:	429a      	cmp	r2, r3
 8007c48:	d010      	beq.n	8007c6c <pbuf_cat+0x48>
 8007c4a:	4b0f      	ldr	r3, [pc, #60]	; (8007c88 <pbuf_cat+0x64>)
 8007c4c:	f240 3262 	movw	r2, #866	; 0x362
 8007c50:	490e      	ldr	r1, [pc, #56]	; (8007c8c <pbuf_cat+0x68>)
 8007c52:	480f      	ldr	r0, [pc, #60]	; (8007c90 <pbuf_cat+0x6c>)
 8007c54:	f006 f9e6 	bl	800e024 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8007c58:	6823      	ldr	r3, [r4, #0]
 8007c5a:	b133      	cbz	r3, 8007c6a <pbuf_cat+0x46>
 8007c5c:	4b0a      	ldr	r3, [pc, #40]	; (8007c88 <pbuf_cat+0x64>)
 8007c5e:	f240 3263 	movw	r2, #867	; 0x363
 8007c62:	490c      	ldr	r1, [pc, #48]	; (8007c94 <pbuf_cat+0x70>)
 8007c64:	480a      	ldr	r0, [pc, #40]	; (8007c90 <pbuf_cat+0x6c>)
 8007c66:	f006 f9dd 	bl	800e024 <iprintf>
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8007c6a:	8923      	ldrh	r3, [r4, #8]
 8007c6c:	892a      	ldrh	r2, [r5, #8]
  p->next = t;
 8007c6e:	6025      	str	r5, [r4, #0]
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8007c70:	4413      	add	r3, r2
 8007c72:	8123      	strh	r3, [r4, #8]
}
 8007c74:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8007c76:	4b04      	ldr	r3, [pc, #16]	; (8007c88 <pbuf_cat+0x64>)
 8007c78:	f240 3259 	movw	r2, #857	; 0x359
 8007c7c:	4906      	ldr	r1, [pc, #24]	; (8007c98 <pbuf_cat+0x74>)
 8007c7e:	4804      	ldr	r0, [pc, #16]	; (8007c90 <pbuf_cat+0x6c>)
}
 8007c80:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8007c84:	f006 b9ce 	b.w	800e024 <iprintf>
 8007c88:	0800fdd0 	.word	0x0800fdd0
 8007c8c:	0800ffa8 	.word	0x0800ffa8
 8007c90:	0800ef30 	.word	0x0800ef30
 8007c94:	0800ffd8 	.word	0x0800ffd8
 8007c98:	0800ff70 	.word	0x0800ff70

08007c9c <pbuf_copy>:
{
 8007c9c:	b508      	push	{r3, lr}
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8007c9e:	b140      	cbz	r0, 8007cb2 <pbuf_copy+0x16>
 8007ca0:	b139      	cbz	r1, 8007cb2 <pbuf_copy+0x16>
 8007ca2:	8902      	ldrh	r2, [r0, #8]
 8007ca4:	890b      	ldrh	r3, [r1, #8]
 8007ca6:	429a      	cmp	r2, r3
 8007ca8:	d303      	bcc.n	8007cb2 <pbuf_copy+0x16>
}
 8007caa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007cae:	f7ff bc97 	b.w	80075e0 <pbuf_copy.part.0>
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8007cb2:	4b05      	ldr	r3, [pc, #20]	; (8007cc8 <pbuf_copy+0x2c>)
 8007cb4:	f240 32c9 	movw	r2, #969	; 0x3c9
 8007cb8:	4904      	ldr	r1, [pc, #16]	; (8007ccc <pbuf_copy+0x30>)
 8007cba:	4805      	ldr	r0, [pc, #20]	; (8007cd0 <pbuf_copy+0x34>)
 8007cbc:	f006 f9b2 	bl	800e024 <iprintf>
}
 8007cc0:	f06f 000f 	mvn.w	r0, #15
 8007cc4:	bd08      	pop	{r3, pc}
 8007cc6:	bf00      	nop
 8007cc8:	0800fdd0 	.word	0x0800fdd0
 8007ccc:	0800ffe8 	.word	0x0800ffe8
 8007cd0:	0800ef30 	.word	0x0800ef30

08007cd4 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8007cd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  const struct pbuf *p;
  u16_t left = 0;
  u16_t buf_copy_len;
  u16_t copied_total = 0;

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8007cd8:	4605      	mov	r5, r0
 8007cda:	b370      	cbz	r0, 8007d3a <pbuf_copy_partial+0x66>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8007cdc:	460f      	mov	r7, r1
 8007cde:	2900      	cmp	r1, #0
 8007ce0:	d036      	beq.n	8007d50 <pbuf_copy_partial+0x7c>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8007ce2:	4690      	mov	r8, r2
 8007ce4:	b392      	cbz	r2, 8007d4c <pbuf_copy_partial+0x78>
  u16_t left = 0;
 8007ce6:	2600      	movs	r6, #0
 8007ce8:	e005      	b.n	8007cf6 <pbuf_copy_partial+0x22>
    if ((offset != 0) && (offset >= p->len)) {
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8007cea:	b293      	uxth	r3, r2
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8007cec:	682d      	ldr	r5, [r5, #0]
 8007cee:	f1b8 0f00 	cmp.w	r8, #0
 8007cf2:	d01f      	beq.n	8007d34 <pbuf_copy_partial+0x60>
 8007cf4:	b1f5      	cbz	r5, 8007d34 <pbuf_copy_partial+0x60>
      buf_copy_len = (u16_t)(p->len - offset);
      if (buf_copy_len > len) {
        buf_copy_len = len;
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8007cf6:	19b8      	adds	r0, r7, r6
    if ((offset != 0) && (offset >= p->len)) {
 8007cf8:	f8b5 c00a 	ldrh.w	ip, [r5, #10]
 8007cfc:	b11b      	cbz	r3, 8007d06 <pbuf_copy_partial+0x32>
 8007cfe:	4563      	cmp	r3, ip
      offset = (u16_t)(offset - p->len);
 8007d00:	eba3 020c 	sub.w	r2, r3, ip
    if ((offset != 0) && (offset >= p->len)) {
 8007d04:	d2f1      	bcs.n	8007cea <pbuf_copy_partial+0x16>
      buf_copy_len = (u16_t)(p->len - offset);
 8007d06:	ebac 0c03 	sub.w	ip, ip, r3
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8007d0a:	6869      	ldr	r1, [r5, #4]
 8007d0c:	fa1f f48c 	uxth.w	r4, ip
 8007d10:	4419      	add	r1, r3
 8007d12:	4544      	cmp	r4, r8
 8007d14:	bf28      	it	cs
 8007d16:	4644      	movcs	r4, r8
 8007d18:	4622      	mov	r2, r4
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8007d1a:	4426      	add	r6, r4
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8007d1c:	f006 fab2 	bl	800e284 <memcpy>
      left = (u16_t)(left + buf_copy_len);
      len = (u16_t)(len - buf_copy_len);
 8007d20:	eba8 0204 	sub.w	r2, r8, r4
      offset = 0;
 8007d24:	2300      	movs	r3, #0
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8007d26:	b2b6      	uxth	r6, r6
      len = (u16_t)(len - buf_copy_len);
 8007d28:	fa1f f882 	uxth.w	r8, r2
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8007d2c:	682d      	ldr	r5, [r5, #0]
 8007d2e:	f1b8 0f00 	cmp.w	r8, #0
 8007d32:	d1df      	bne.n	8007cf4 <pbuf_copy_partial+0x20>
    }
  }
  return copied_total;
}
 8007d34:	4630      	mov	r0, r6
 8007d36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8007d3a:	4b0a      	ldr	r3, [pc, #40]	; (8007d64 <pbuf_copy_partial+0x90>)
 8007d3c:	f240 420a 	movw	r2, #1034	; 0x40a
 8007d40:	4909      	ldr	r1, [pc, #36]	; (8007d68 <pbuf_copy_partial+0x94>)
 8007d42:	462e      	mov	r6, r5
 8007d44:	4809      	ldr	r0, [pc, #36]	; (8007d6c <pbuf_copy_partial+0x98>)
 8007d46:	f006 f96d 	bl	800e024 <iprintf>
 8007d4a:	e7f3      	b.n	8007d34 <pbuf_copy_partial+0x60>
  u16_t left = 0;
 8007d4c:	4616      	mov	r6, r2
 8007d4e:	e7f1      	b.n	8007d34 <pbuf_copy_partial+0x60>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8007d50:	4b04      	ldr	r3, [pc, #16]	; (8007d64 <pbuf_copy_partial+0x90>)
 8007d52:	f240 420b 	movw	r2, #1035	; 0x40b
 8007d56:	4906      	ldr	r1, [pc, #24]	; (8007d70 <pbuf_copy_partial+0x9c>)
 8007d58:	463e      	mov	r6, r7
 8007d5a:	4804      	ldr	r0, [pc, #16]	; (8007d6c <pbuf_copy_partial+0x98>)
 8007d5c:	f006 f962 	bl	800e024 <iprintf>
 8007d60:	e7e8      	b.n	8007d34 <pbuf_copy_partial+0x60>
 8007d62:	bf00      	nop
 8007d64:	0800fdd0 	.word	0x0800fdd0
 8007d68:	08010018 	.word	0x08010018
 8007d6c:	0800ef30 	.word	0x0800ef30
 8007d70:	08010038 	.word	0x08010038

08007d74 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8007d74:	b538      	push	{r3, r4, r5, lr}
 8007d76:	4615      	mov	r5, r2
 8007d78:	460a      	mov	r2, r1
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8007d7a:	8929      	ldrh	r1, [r5, #8]
 8007d7c:	f7ff fe22 	bl	80079c4 <pbuf_alloc>
  if (q == NULL) {
 8007d80:	4604      	mov	r4, r0
 8007d82:	b138      	cbz	r0, 8007d94 <pbuf_clone+0x20>
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8007d84:	8902      	ldrh	r2, [r0, #8]
 8007d86:	892b      	ldrh	r3, [r5, #8]
 8007d88:	429a      	cmp	r2, r3
 8007d8a:	d305      	bcc.n	8007d98 <pbuf_clone+0x24>
 8007d8c:	4629      	mov	r1, r5
 8007d8e:	f7ff fc27 	bl	80075e0 <pbuf_copy.part.0>
    return NULL;
  }
  err = pbuf_copy(q, p);
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8007d92:	b940      	cbnz	r0, 8007da6 <pbuf_clone+0x32>
  return q;
}
 8007d94:	4620      	mov	r0, r4
 8007d96:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8007d98:	4b07      	ldr	r3, [pc, #28]	; (8007db8 <pbuf_clone+0x44>)
 8007d9a:	f240 32c9 	movw	r2, #969	; 0x3c9
 8007d9e:	4907      	ldr	r1, [pc, #28]	; (8007dbc <pbuf_clone+0x48>)
 8007da0:	4807      	ldr	r0, [pc, #28]	; (8007dc0 <pbuf_clone+0x4c>)
 8007da2:	f006 f93f 	bl	800e024 <iprintf>
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8007da6:	4b04      	ldr	r3, [pc, #16]	; (8007db8 <pbuf_clone+0x44>)
 8007da8:	f240 5224 	movw	r2, #1316	; 0x524
 8007dac:	4905      	ldr	r1, [pc, #20]	; (8007dc4 <pbuf_clone+0x50>)
 8007dae:	4804      	ldr	r0, [pc, #16]	; (8007dc0 <pbuf_clone+0x4c>)
 8007db0:	f006 f938 	bl	800e024 <iprintf>
}
 8007db4:	4620      	mov	r0, r4
 8007db6:	bd38      	pop	{r3, r4, r5, pc}
 8007db8:	0800fdd0 	.word	0x0800fdd0
 8007dbc:	0800ffe8 	.word	0x0800ffe8
 8007dc0:	0800ef30 	.word	0x0800ef30
 8007dc4:	0801005c 	.word	0x0801005c

08007dc8 <pbuf_memcmp>:
 * @return zero if equal, nonzero otherwise
 *         (0xffff if p is too short, diffoffset+1 otherwise)
 */
u16_t
pbuf_memcmp(const struct pbuf *p, u16_t offset, const void *s2, u16_t n)
{
 8007dc8:	b570      	push	{r4, r5, r6, lr}
  u16_t start = offset;
  const struct pbuf *q = p;
  u16_t i;

  /* pbuf long enough to perform check? */
  if (p->tot_len < (offset + n)) {
 8007dca:	8905      	ldrh	r5, [r0, #8]
 8007dcc:	18cc      	adds	r4, r1, r3
 8007dce:	42a5      	cmp	r5, r4
 8007dd0:	db2e      	blt.n	8007e30 <pbuf_memcmp+0x68>
    return 0xffff;
  }

  /* get the correct pbuf from chain. We know it succeeds because of p->tot_len check above. */
  while ((q != NULL) && (q->len <= start)) {
 8007dd2:	8944      	ldrh	r4, [r0, #10]
 8007dd4:	428c      	cmp	r4, r1
    start = (u16_t)(start - q->len);
 8007dd6:	eba1 0404 	sub.w	r4, r1, r4
  while ((q != NULL) && (q->len <= start)) {
 8007dda:	d803      	bhi.n	8007de4 <pbuf_memcmp+0x1c>
    q = q->next;
 8007ddc:	6800      	ldr	r0, [r0, #0]
    start = (u16_t)(start - q->len);
 8007dde:	b2a1      	uxth	r1, r4
  while ((q != NULL) && (q->len <= start)) {
 8007de0:	2800      	cmp	r0, #0
 8007de2:	d1f6      	bne.n	8007dd2 <pbuf_memcmp+0xa>
  }

  /* return requested data if pbuf is OK */
  for (i = 0; i < n; i++) {
 8007de4:	b1f3      	cbz	r3, 8007e24 <pbuf_memcmp+0x5c>
 8007de6:	2500      	movs	r5, #0
 8007de8:	1e56      	subs	r6, r2, #1
 8007dea:	46ae      	mov	lr, r5
    /* We know pbuf_get_at() succeeds because of p->tot_len check above. */
    u8_t a = pbuf_get_at(q, (u16_t)(start + i));
 8007dec:	eb01 0c0e 	add.w	ip, r1, lr
  while ((q != NULL) && (q->len <= offset_left)) {
 8007df0:	4604      	mov	r4, r0
 8007df2:	fa1f fc8c 	uxth.w	ip, ip
 8007df6:	b920      	cbnz	r0, 8007e02 <pbuf_memcmp+0x3a>
 8007df8:	e00b      	b.n	8007e12 <pbuf_memcmp+0x4a>
    q = q->next;
 8007dfa:	6824      	ldr	r4, [r4, #0]
    offset_left = (u16_t)(offset_left - q->len);
 8007dfc:	fa1f fc82 	uxth.w	ip, r2
  while ((q != NULL) && (q->len <= offset_left)) {
 8007e00:	b13c      	cbz	r4, 8007e12 <pbuf_memcmp+0x4a>
 8007e02:	8962      	ldrh	r2, [r4, #10]
 8007e04:	4594      	cmp	ip, r2
    offset_left = (u16_t)(offset_left - q->len);
 8007e06:	ebac 0202 	sub.w	r2, ip, r2
  while ((q != NULL) && (q->len <= offset_left)) {
 8007e0a:	d2f6      	bcs.n	8007dfa <pbuf_memcmp+0x32>
    return ((u8_t *)q->payload)[q_idx];
 8007e0c:	6862      	ldr	r2, [r4, #4]
 8007e0e:	f812 400c 	ldrb.w	r4, [r2, ip]
    u8_t b = ((const u8_t *)s2)[i];
    if (a != b) {
 8007e12:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 8007e16:	42a2      	cmp	r2, r4
 8007e18:	d106      	bne.n	8007e28 <pbuf_memcmp+0x60>
  for (i = 0; i < n; i++) {
 8007e1a:	3501      	adds	r5, #1
 8007e1c:	fa1f fe85 	uxth.w	lr, r5
 8007e20:	4573      	cmp	r3, lr
 8007e22:	d8e3      	bhi.n	8007dec <pbuf_memcmp+0x24>
      return (u16_t)LWIP_MIN(i + 1, 0xFFFF);
    }
  }
  return 0;
 8007e24:	2000      	movs	r0, #0
}
 8007e26:	bd70      	pop	{r4, r5, r6, pc}
      return (u16_t)LWIP_MIN(i + 1, 0xFFFF);
 8007e28:	f10e 0301 	add.w	r3, lr, #1
 8007e2c:	b298      	uxth	r0, r3
}
 8007e2e:	bd70      	pop	{r4, r5, r6, pc}
    return 0xffff;
 8007e30:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
 8007e34:	bd70      	pop	{r4, r5, r6, pc}
 8007e36:	bf00      	nop

08007e38 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8007e38:	b4f0      	push	{r4, r5, r6, r7}
 8007e3a:	4f14      	ldr	r7, [pc, #80]	; (8007e8c <tcp_new_port+0x54>)
 8007e3c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8007e40:	4e13      	ldr	r6, [pc, #76]	; (8007e90 <tcp_new_port+0x58>)
  u16_t n = 0;
  struct tcp_pcb *pcb;

again:
  tcp_port++;
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8007e42:	f64f 7cff 	movw	ip, #65535	; 0xffff
 8007e46:	8839      	ldrh	r1, [r7, #0]
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8007e48:	4d12      	ldr	r5, [pc, #72]	; (8007e94 <tcp_new_port+0x5c>)
  tcp_port++;
 8007e4a:	3101      	adds	r1, #1
 8007e4c:	4c12      	ldr	r4, [pc, #72]	; (8007e98 <tcp_new_port+0x60>)
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8007e4e:	462b      	mov	r3, r5
  tcp_port++;
 8007e50:	b289      	uxth	r1, r1
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8007e52:	4561      	cmp	r1, ip
 8007e54:	bf08      	it	eq
 8007e56:	f44f 4140 	moveq.w	r1, #49152	; 0xc000
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	b913      	cbnz	r3, 8007e64 <tcp_new_port+0x2c>
 8007e5e:	e00b      	b.n	8007e78 <tcp_new_port+0x40>
 8007e60:	68db      	ldr	r3, [r3, #12]
 8007e62:	b14b      	cbz	r3, 8007e78 <tcp_new_port+0x40>
      if (pcb->local_port == tcp_port) {
 8007e64:	8ada      	ldrh	r2, [r3, #22]
 8007e66:	428a      	cmp	r2, r1
 8007e68:	d1fa      	bne.n	8007e60 <tcp_new_port+0x28>
        n++;
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8007e6a:	3801      	subs	r0, #1
 8007e6c:	b280      	uxth	r0, r0
 8007e6e:	2800      	cmp	r0, #0
 8007e70:	d1eb      	bne.n	8007e4a <tcp_new_port+0x12>
 8007e72:	8039      	strh	r1, [r7, #0]
        goto again;
      }
    }
  }
  return tcp_port;
}
 8007e74:	bcf0      	pop	{r4, r5, r6, r7}
 8007e76:	4770      	bx	lr
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8007e78:	42a6      	cmp	r6, r4
 8007e7a:	d002      	beq.n	8007e82 <tcp_new_port+0x4a>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8007e7c:	f854 3f04 	ldr.w	r3, [r4, #4]!
 8007e80:	e7eb      	b.n	8007e5a <tcp_new_port+0x22>
 8007e82:	4608      	mov	r0, r1
 8007e84:	8039      	strh	r1, [r7, #0]
}
 8007e86:	bcf0      	pop	{r4, r5, r6, r7}
 8007e88:	4770      	bx	lr
 8007e8a:	bf00      	nop
 8007e8c:	2400002c 	.word	0x2400002c
 8007e90:	08010744 	.word	0x08010744
 8007e94:	24010554 	.word	0x24010554
 8007e98:	08010738 	.word	0x08010738

08007e9c <tcp_close_shutdown_fin>:
{
 8007e9c:	b510      	push	{r4, lr}
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8007e9e:	4604      	mov	r4, r0
 8007ea0:	b308      	cbz	r0, 8007ee6 <tcp_close_shutdown_fin+0x4a>
  switch (pcb->state) {
 8007ea2:	7d23      	ldrb	r3, [r4, #20]
 8007ea4:	2b04      	cmp	r3, #4
 8007ea6:	d005      	beq.n	8007eb4 <tcp_close_shutdown_fin+0x18>
 8007ea8:	2b07      	cmp	r3, #7
 8007eaa:	d00e      	beq.n	8007eca <tcp_close_shutdown_fin+0x2e>
 8007eac:	2b03      	cmp	r3, #3
 8007eae:	d001      	beq.n	8007eb4 <tcp_close_shutdown_fin+0x18>
 8007eb0:	2000      	movs	r0, #0
}
 8007eb2:	bd10      	pop	{r4, pc}
      err = tcp_send_fin(pcb);
 8007eb4:	4620      	mov	r0, r4
 8007eb6:	f003 fd09 	bl	800b8cc <tcp_send_fin>
      if (err == ERR_OK) {
 8007eba:	b950      	cbnz	r0, 8007ed2 <tcp_close_shutdown_fin+0x36>
  if (err == ERR_OK) {
 8007ebc:	2305      	movs	r3, #5
    tcp_output(pcb);
 8007ebe:	4620      	mov	r0, r4
        pcb->state = LAST_ACK;
 8007ec0:	7523      	strb	r3, [r4, #20]
    tcp_output(pcb);
 8007ec2:	f003 fe73 	bl	800bbac <tcp_output>
 8007ec6:	2000      	movs	r0, #0
}
 8007ec8:	bd10      	pop	{r4, pc}
      err = tcp_send_fin(pcb);
 8007eca:	4620      	mov	r0, r4
 8007ecc:	f003 fcfe 	bl	800b8cc <tcp_send_fin>
      if (err == ERR_OK) {
 8007ed0:	b138      	cbz	r0, 8007ee2 <tcp_close_shutdown_fin+0x46>
  } else if (err == ERR_MEM) {
 8007ed2:	1c43      	adds	r3, r0, #1
 8007ed4:	d1ed      	bne.n	8007eb2 <tcp_close_shutdown_fin+0x16>
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8007ed6:	8b63      	ldrh	r3, [r4, #26]
    return ERR_OK;
 8007ed8:	2000      	movs	r0, #0
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8007eda:	f043 0308 	orr.w	r3, r3, #8
 8007ede:	8363      	strh	r3, [r4, #26]
}
 8007ee0:	bd10      	pop	{r4, pc}
 8007ee2:	2309      	movs	r3, #9
 8007ee4:	e7eb      	b.n	8007ebe <tcp_close_shutdown_fin+0x22>
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8007ee6:	4b04      	ldr	r3, [pc, #16]	; (8007ef8 <tcp_close_shutdown_fin+0x5c>)
 8007ee8:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8007eec:	4903      	ldr	r1, [pc, #12]	; (8007efc <tcp_close_shutdown_fin+0x60>)
 8007eee:	4804      	ldr	r0, [pc, #16]	; (8007f00 <tcp_close_shutdown_fin+0x64>)
 8007ef0:	f006 f898 	bl	800e024 <iprintf>
 8007ef4:	e7d5      	b.n	8007ea2 <tcp_close_shutdown_fin+0x6>
 8007ef6:	bf00      	nop
 8007ef8:	08010070 	.word	0x08010070
 8007efc:	080100a0 	.word	0x080100a0
 8007f00:	0800ef30 	.word	0x0800ef30

08007f04 <tcp_init>:
{
 8007f04:	b508      	push	{r3, lr}
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8007f06:	f005 ff9f 	bl	800de48 <rand>
 8007f0a:	4b02      	ldr	r3, [pc, #8]	; (8007f14 <tcp_init+0x10>)
 8007f0c:	4a02      	ldr	r2, [pc, #8]	; (8007f18 <tcp_init+0x14>)
 8007f0e:	4303      	orrs	r3, r0
 8007f10:	8013      	strh	r3, [r2, #0]
}
 8007f12:	bd08      	pop	{r3, pc}
 8007f14:	ffffc000 	.word	0xffffc000
 8007f18:	2400002c 	.word	0x2400002c

08007f1c <tcp_free>:
{
 8007f1c:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8007f1e:	7d03      	ldrb	r3, [r0, #20]
{
 8007f20:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8007f22:	2b01      	cmp	r3, #1
 8007f24:	d005      	beq.n	8007f32 <tcp_free+0x16>
  memp_free(MEMP_TCP_PCB, pcb);
 8007f26:	4621      	mov	r1, r4
 8007f28:	2001      	movs	r0, #1
}
 8007f2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_TCP_PCB, pcb);
 8007f2e:	f7ff b913 	b.w	8007158 <memp_free>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8007f32:	4906      	ldr	r1, [pc, #24]	; (8007f4c <tcp_free+0x30>)
 8007f34:	22d4      	movs	r2, #212	; 0xd4
 8007f36:	4b06      	ldr	r3, [pc, #24]	; (8007f50 <tcp_free+0x34>)
 8007f38:	4806      	ldr	r0, [pc, #24]	; (8007f54 <tcp_free+0x38>)
 8007f3a:	f006 f873 	bl	800e024 <iprintf>
  memp_free(MEMP_TCP_PCB, pcb);
 8007f3e:	4621      	mov	r1, r4
 8007f40:	2001      	movs	r0, #1
}
 8007f42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_TCP_PCB, pcb);
 8007f46:	f7ff b907 	b.w	8007158 <memp_free>
 8007f4a:	bf00      	nop
 8007f4c:	080100ac 	.word	0x080100ac
 8007f50:	08010070 	.word	0x08010070
 8007f54:	0800ef30 	.word	0x0800ef30

08007f58 <tcp_bind>:
{
 8007f58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f5c:	460f      	mov	r7, r1
 8007f5e:	4680      	mov	r8, r0
 8007f60:	4614      	mov	r4, r2
  LWIP_ASSERT_CORE_LOCKED();
 8007f62:	f7fb ffe9 	bl	8003f38 <sys_check_core_locking>
  if (ipaddr == NULL) {
 8007f66:	b1f7      	cbz	r7, 8007fa6 <tcp_bind+0x4e>
  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8007f68:	f1b8 0f00 	cmp.w	r8, #0
 8007f6c:	d044      	beq.n	8007ff8 <tcp_bind+0xa0>
  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8007f6e:	f898 3014 	ldrb.w	r3, [r8, #20]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d136      	bne.n	8007fe4 <tcp_bind+0x8c>
  if (port == 0) {
 8007f76:	b1ec      	cbz	r4, 8007fb4 <tcp_bind+0x5c>
 8007f78:	4e24      	ldr	r6, [pc, #144]	; (800800c <tcp_bind+0xb4>)
 8007f7a:	4b25      	ldr	r3, [pc, #148]	; (8008010 <tcp_bind+0xb8>)
 8007f7c:	f106 010c 	add.w	r1, r6, #12
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	b913      	cbnz	r3, 8007f8a <tcp_bind+0x32>
 8007f84:	e011      	b.n	8007faa <tcp_bind+0x52>
 8007f86:	68db      	ldr	r3, [r3, #12]
 8007f88:	b17b      	cbz	r3, 8007faa <tcp_bind+0x52>
        if (cpcb->local_port == port) {
 8007f8a:	f8b3 c016 	ldrh.w	ip, [r3, #22]
 8007f8e:	45a4      	cmp	ip, r4
 8007f90:	d1f9      	bne.n	8007f86 <tcp_bind+0x2e>
                (ip_addr_isany(&cpcb->local_ip) ||
 8007f92:	681a      	ldr	r2, [r3, #0]
 8007f94:	b11a      	cbz	r2, 8007f9e <tcp_bind+0x46>
                 ip_addr_isany(ipaddr) ||
 8007f96:	683d      	ldr	r5, [r7, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8007f98:	b10d      	cbz	r5, 8007f9e <tcp_bind+0x46>
 8007f9a:	42aa      	cmp	r2, r5
 8007f9c:	d1f3      	bne.n	8007f86 <tcp_bind+0x2e>
              return ERR_USE;
 8007f9e:	f06f 0007 	mvn.w	r0, #7
}
 8007fa2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ipaddr = IP4_ADDR_ANY;
 8007fa6:	4f1b      	ldr	r7, [pc, #108]	; (8008014 <tcp_bind+0xbc>)
 8007fa8:	e7de      	b.n	8007f68 <tcp_bind+0x10>
    for (i = 0; i < max_pcb_list; i++) {
 8007faa:	428e      	cmp	r6, r1
 8007fac:	d006      	beq.n	8007fbc <tcp_bind+0x64>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8007fae:	f856 3f04 	ldr.w	r3, [r6, #4]!
 8007fb2:	e7e5      	b.n	8007f80 <tcp_bind+0x28>
    port = tcp_new_port();
 8007fb4:	f7ff ff40 	bl	8007e38 <tcp_new_port>
    if (port == 0) {
 8007fb8:	4604      	mov	r4, r0
 8007fba:	b180      	cbz	r0, 8007fde <tcp_bind+0x86>
  if (!ip_addr_isany(ipaddr)
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	b10b      	cbz	r3, 8007fc4 <tcp_bind+0x6c>
    ip_addr_set(&pcb->local_ip, ipaddr);
 8007fc0:	f8c8 3000 	str.w	r3, [r8]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8007fc4:	4b14      	ldr	r3, [pc, #80]	; (8008018 <tcp_bind+0xc0>)
  pcb->local_port = port;
 8007fc6:	f8a8 4016 	strh.w	r4, [r8, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8007fca:	681a      	ldr	r2, [r3, #0]
 8007fcc:	f8c3 8000 	str.w	r8, [r3]
 8007fd0:	f8c8 200c 	str.w	r2, [r8, #12]
 8007fd4:	f004 f90e 	bl	800c1f4 <tcp_timer_needed>
  return ERR_OK;
 8007fd8:	2000      	movs	r0, #0
}
 8007fda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return ERR_BUF;
 8007fde:	f06f 0001 	mvn.w	r0, #1
 8007fe2:	e7de      	b.n	8007fa2 <tcp_bind+0x4a>
  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8007fe4:	4b0d      	ldr	r3, [pc, #52]	; (800801c <tcp_bind+0xc4>)
 8007fe6:	f240 22ab 	movw	r2, #683	; 0x2ab
 8007fea:	490d      	ldr	r1, [pc, #52]	; (8008020 <tcp_bind+0xc8>)
 8007fec:	480d      	ldr	r0, [pc, #52]	; (8008024 <tcp_bind+0xcc>)
 8007fee:	f006 f819 	bl	800e024 <iprintf>
 8007ff2:	f06f 0005 	mvn.w	r0, #5
 8007ff6:	e7d4      	b.n	8007fa2 <tcp_bind+0x4a>
  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8007ff8:	4b08      	ldr	r3, [pc, #32]	; (800801c <tcp_bind+0xc4>)
 8007ffa:	f240 22a9 	movw	r2, #681	; 0x2a9
 8007ffe:	490a      	ldr	r1, [pc, #40]	; (8008028 <tcp_bind+0xd0>)
 8008000:	4808      	ldr	r0, [pc, #32]	; (8008024 <tcp_bind+0xcc>)
 8008002:	f006 f80f 	bl	800e024 <iprintf>
 8008006:	f06f 000f 	mvn.w	r0, #15
 800800a:	e7ca      	b.n	8007fa2 <tcp_bind+0x4a>
 800800c:	08010738 	.word	0x08010738
 8008010:	24010554 	.word	0x24010554
 8008014:	08011640 	.word	0x08011640
 8008018:	24010550 	.word	0x24010550
 800801c:	08010070 	.word	0x08010070
 8008020:	080100d8 	.word	0x080100d8
 8008024:	0800ef30 	.word	0x0800ef30
 8008028:	080100c0 	.word	0x080100c0

0800802c <tcp_listen_with_backlog_and_err>:
{
 800802c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800802e:	4604      	mov	r4, r0
 8008030:	4617      	mov	r7, r2
  LWIP_ASSERT_CORE_LOCKED();
 8008032:	f7fb ff81 	bl	8003f38 <sys_check_core_locking>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 8008036:	2c00      	cmp	r4, #0
 8008038:	d05d      	beq.n	80080f6 <tcp_listen_with_backlog_and_err+0xca>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800803a:	7d25      	ldrb	r5, [r4, #20]
 800803c:	2d00      	cmp	r5, #0
 800803e:	d147      	bne.n	80080d0 <tcp_listen_with_backlog_and_err+0xa4>
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8008040:	2002      	movs	r0, #2
 8008042:	f7ff f843 	bl	80070cc <memp_malloc>
  if (lpcb == NULL) {
 8008046:	4606      	mov	r6, r0
 8008048:	2800      	cmp	r0, #0
 800804a:	d051      	beq.n	80080f0 <tcp_listen_with_backlog_and_err+0xc4>
  lpcb->callback_arg = pcb->callback_arg;
 800804c:	6923      	ldr	r3, [r4, #16]
  lpcb->state = LISTEN;
 800804e:	2201      	movs	r2, #1
  lpcb->callback_arg = pcb->callback_arg;
 8008050:	6103      	str	r3, [r0, #16]
  lpcb->local_port = pcb->local_port;
 8008052:	8ae3      	ldrh	r3, [r4, #22]
  lpcb->state = LISTEN;
 8008054:	7502      	strb	r2, [r0, #20]
  lpcb->local_port = pcb->local_port;
 8008056:	82c3      	strh	r3, [r0, #22]
  lpcb->prio = pcb->prio;
 8008058:	7d62      	ldrb	r2, [r4, #21]
 800805a:	7542      	strb	r2, [r0, #21]
  lpcb->so_options = pcb->so_options;
 800805c:	7a62      	ldrb	r2, [r4, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800805e:	7205      	strb	r5, [r0, #8]
  lpcb->so_options = pcb->so_options;
 8008060:	7242      	strb	r2, [r0, #9]
  lpcb->ttl = pcb->ttl;
 8008062:	7ae2      	ldrb	r2, [r4, #11]
 8008064:	72c2      	strb	r2, [r0, #11]
  lpcb->tos = pcb->tos;
 8008066:	7aa2      	ldrb	r2, [r4, #10]
 8008068:	7282      	strb	r2, [r0, #10]
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800806a:	6822      	ldr	r2, [r4, #0]
 800806c:	6002      	str	r2, [r0, #0]
  if (pcb->local_port != 0) {
 800806e:	b99b      	cbnz	r3, 8008098 <tcp_listen_with_backlog_and_err+0x6c>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8008070:	7d23      	ldrb	r3, [r4, #20]
 8008072:	2b01      	cmp	r3, #1
 8008074:	d020      	beq.n	80080b8 <tcp_listen_with_backlog_and_err+0x8c>
  memp_free(MEMP_TCP_PCB, pcb);
 8008076:	4621      	mov	r1, r4
 8008078:	2001      	movs	r0, #1
 800807a:	f7ff f86d 	bl	8007158 <memp_free>
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800807e:	4b23      	ldr	r3, [pc, #140]	; (800810c <tcp_listen_with_backlog_and_err+0xe0>)
  lpcb->accept = tcp_accept_null;
 8008080:	4923      	ldr	r1, [pc, #140]	; (8008110 <tcp_listen_with_backlog_and_err+0xe4>)
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8008082:	681a      	ldr	r2, [r3, #0]
  lpcb->accept = tcp_accept_null;
 8008084:	61b1      	str	r1, [r6, #24]
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8008086:	60f2      	str	r2, [r6, #12]
 8008088:	601e      	str	r6, [r3, #0]
 800808a:	f004 f8b3 	bl	800c1f4 <tcp_timer_needed>
  res = ERR_OK;
 800808e:	2300      	movs	r3, #0
  if (err != NULL) {
 8008090:	b107      	cbz	r7, 8008094 <tcp_listen_with_backlog_and_err+0x68>
    *err = res;
 8008092:	703b      	strb	r3, [r7, #0]
}
 8008094:	4630      	mov	r0, r6
 8008096:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8008098:	4a1e      	ldr	r2, [pc, #120]	; (8008114 <tcp_listen_with_backlog_and_err+0xe8>)
 800809a:	6813      	ldr	r3, [r2, #0]
 800809c:	42a3      	cmp	r3, r4
 800809e:	d012      	beq.n	80080c6 <tcp_listen_with_backlog_and_err+0x9a>
 80080a0:	b12b      	cbz	r3, 80080ae <tcp_listen_with_backlog_and_err+0x82>
 80080a2:	68d9      	ldr	r1, [r3, #12]
 80080a4:	42a1      	cmp	r1, r4
 80080a6:	d01e      	beq.n	80080e6 <tcp_listen_with_backlog_and_err+0xba>
 80080a8:	460b      	mov	r3, r1
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d1f9      	bne.n	80080a2 <tcp_listen_with_backlog_and_err+0x76>
 80080ae:	2300      	movs	r3, #0
 80080b0:	60e3      	str	r3, [r4, #12]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 80080b2:	7d23      	ldrb	r3, [r4, #20]
 80080b4:	2b01      	cmp	r3, #1
 80080b6:	d1de      	bne.n	8008076 <tcp_listen_with_backlog_and_err+0x4a>
 80080b8:	4b17      	ldr	r3, [pc, #92]	; (8008118 <tcp_listen_with_backlog_and_err+0xec>)
 80080ba:	22d4      	movs	r2, #212	; 0xd4
 80080bc:	4917      	ldr	r1, [pc, #92]	; (800811c <tcp_listen_with_backlog_and_err+0xf0>)
 80080be:	4818      	ldr	r0, [pc, #96]	; (8008120 <tcp_listen_with_backlog_and_err+0xf4>)
 80080c0:	f005 ffb0 	bl	800e024 <iprintf>
 80080c4:	e7d7      	b.n	8008076 <tcp_listen_with_backlog_and_err+0x4a>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 80080c6:	68e3      	ldr	r3, [r4, #12]
 80080c8:	6013      	str	r3, [r2, #0]
 80080ca:	2300      	movs	r3, #0
 80080cc:	60e3      	str	r3, [r4, #12]
 80080ce:	e7f0      	b.n	80080b2 <tcp_listen_with_backlog_and_err+0x86>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 80080d0:	4b11      	ldr	r3, [pc, #68]	; (8008118 <tcp_listen_with_backlog_and_err+0xec>)
 80080d2:	f240 325a 	movw	r2, #858	; 0x35a
 80080d6:	4913      	ldr	r1, [pc, #76]	; (8008124 <tcp_listen_with_backlog_and_err+0xf8>)
  struct tcp_pcb_listen *lpcb = NULL;
 80080d8:	2600      	movs	r6, #0
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 80080da:	4811      	ldr	r0, [pc, #68]	; (8008120 <tcp_listen_with_backlog_and_err+0xf4>)
 80080dc:	f005 ffa2 	bl	800e024 <iprintf>
 80080e0:	f06f 030e 	mvn.w	r3, #14
 80080e4:	e7d4      	b.n	8008090 <tcp_listen_with_backlog_and_err+0x64>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 80080e6:	68e2      	ldr	r2, [r4, #12]
 80080e8:	60da      	str	r2, [r3, #12]
 80080ea:	2300      	movs	r3, #0
 80080ec:	60e3      	str	r3, [r4, #12]
 80080ee:	e7e0      	b.n	80080b2 <tcp_listen_with_backlog_and_err+0x86>
    res = ERR_MEM;
 80080f0:	f04f 33ff 	mov.w	r3, #4294967295
 80080f4:	e7cc      	b.n	8008090 <tcp_listen_with_backlog_and_err+0x64>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 80080f6:	4b08      	ldr	r3, [pc, #32]	; (8008118 <tcp_listen_with_backlog_and_err+0xec>)
 80080f8:	f240 3259 	movw	r2, #857	; 0x359
 80080fc:	490a      	ldr	r1, [pc, #40]	; (8008128 <tcp_listen_with_backlog_and_err+0xfc>)
  struct tcp_pcb_listen *lpcb = NULL;
 80080fe:	4626      	mov	r6, r4
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 8008100:	4807      	ldr	r0, [pc, #28]	; (8008120 <tcp_listen_with_backlog_and_err+0xf4>)
 8008102:	f005 ff8f 	bl	800e024 <iprintf>
 8008106:	f06f 030f 	mvn.w	r3, #15
 800810a:	e7c1      	b.n	8008090 <tcp_listen_with_backlog_and_err+0x64>
 800810c:	24010554 	.word	0x24010554
 8008110:	08008dd9 	.word	0x08008dd9
 8008114:	24010550 	.word	0x24010550
 8008118:	08010070 	.word	0x08010070
 800811c:	080100ac 	.word	0x080100ac
 8008120:	0800ef30 	.word	0x0800ef30
 8008124:	08010130 	.word	0x08010130
 8008128:	08010100 	.word	0x08010100

0800812c <tcp_listen_with_backlog>:
{
 800812c:	b500      	push	{lr}
 800812e:	b083      	sub	sp, #12
 8008130:	e9cd 1000 	strd	r1, r0, [sp]
  LWIP_ASSERT_CORE_LOCKED();
 8008134:	f7fb ff00 	bl	8003f38 <sys_check_core_locking>
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 8008138:	2200      	movs	r2, #0
 800813a:	e9dd 1000 	ldrd	r1, r0, [sp]
}
 800813e:	b003      	add	sp, #12
 8008140:	f85d eb04 	ldr.w	lr, [sp], #4
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 8008144:	f7ff bf72 	b.w	800802c <tcp_listen_with_backlog_and_err>

08008148 <tcp_update_rcv_ann_wnd>:
{
 8008148:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800814a:	4604      	mov	r4, r0
 800814c:	b1c8      	cbz	r0, 8008182 <tcp_update_rcv_ann_wnd+0x3a>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800814e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8008150:	f640 3c68 	movw	ip, #2920	; 0xb68
 8008154:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8008156:	f8b4 e032 	ldrh.w	lr, [r4, #50]	; 0x32
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800815a:	6a62      	ldr	r2, [r4, #36]	; 0x24
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800815c:	1a58      	subs	r0, r3, r1
 800815e:	45e6      	cmp	lr, ip
 8008160:	4410      	add	r0, r2
 8008162:	bf94      	ite	ls
 8008164:	eba0 050e 	subls.w	r5, r0, lr
 8008168:	eba0 050c 	subhi.w	r5, r0, ip
 800816c:	2d00      	cmp	r5, #0
 800816e:	db01      	blt.n	8008174 <tcp_update_rcv_ann_wnd+0x2c>
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8008170:	8563      	strh	r3, [r4, #42]	; 0x2a
}
 8008172:	bd38      	pop	{r3, r4, r5, pc}
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8008174:	1a53      	subs	r3, r2, r1
 8008176:	2b00      	cmp	r3, #0
 8008178:	dd0b      	ble.n	8008192 <tcp_update_rcv_ann_wnd+0x4a>
 800817a:	2300      	movs	r3, #0
    return 0;
 800817c:	4618      	mov	r0, r3
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800817e:	8563      	strh	r3, [r4, #42]	; 0x2a
}
 8008180:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8008182:	4b0c      	ldr	r3, [pc, #48]	; (80081b4 <tcp_update_rcv_ann_wnd+0x6c>)
 8008184:	f240 32a6 	movw	r2, #934	; 0x3a6
 8008188:	490b      	ldr	r1, [pc, #44]	; (80081b8 <tcp_update_rcv_ann_wnd+0x70>)
 800818a:	480c      	ldr	r0, [pc, #48]	; (80081bc <tcp_update_rcv_ann_wnd+0x74>)
 800818c:	f005 ff4a 	bl	800e024 <iprintf>
 8008190:	e7dd      	b.n	800814e <tcp_update_rcv_ann_wnd+0x6>
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8008192:	1a8d      	subs	r5, r1, r2
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8008194:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 8008198:	d203      	bcs.n	80081a2 <tcp_update_rcv_ann_wnd+0x5a>
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800819a:	b2ab      	uxth	r3, r5
    return 0;
 800819c:	2000      	movs	r0, #0
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800819e:	8563      	strh	r3, [r4, #42]	; 0x2a
}
 80081a0:	bd38      	pop	{r3, r4, r5, pc}
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 80081a2:	4b04      	ldr	r3, [pc, #16]	; (80081b4 <tcp_update_rcv_ann_wnd+0x6c>)
 80081a4:	f240 32b6 	movw	r2, #950	; 0x3b6
 80081a8:	4905      	ldr	r1, [pc, #20]	; (80081c0 <tcp_update_rcv_ann_wnd+0x78>)
 80081aa:	4804      	ldr	r0, [pc, #16]	; (80081bc <tcp_update_rcv_ann_wnd+0x74>)
 80081ac:	f005 ff3a 	bl	800e024 <iprintf>
 80081b0:	e7f3      	b.n	800819a <tcp_update_rcv_ann_wnd+0x52>
 80081b2:	bf00      	nop
 80081b4:	08010070 	.word	0x08010070
 80081b8:	08010168 	.word	0x08010168
 80081bc:	0800ef30 	.word	0x0800ef30
 80081c0:	0801018c 	.word	0x0801018c

080081c4 <tcp_recved>:
{
 80081c4:	b570      	push	{r4, r5, r6, lr}
 80081c6:	4605      	mov	r5, r0
 80081c8:	460c      	mov	r4, r1
  LWIP_ASSERT_CORE_LOCKED();
 80081ca:	f7fb feb5 	bl	8003f38 <sys_check_core_locking>
  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 80081ce:	b33d      	cbz	r5, 8008220 <tcp_recved+0x5c>
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80081d0:	7d2b      	ldrb	r3, [r5, #20]
 80081d2:	2b01      	cmp	r3, #1
 80081d4:	d01c      	beq.n	8008210 <tcp_recved+0x4c>
  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 80081d6:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
 80081d8:	1919      	adds	r1, r3, r4
 80081da:	b289      	uxth	r1, r1
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 80081dc:	428b      	cmp	r3, r1
 80081de:	d803      	bhi.n	80081e8 <tcp_recved+0x24>
 80081e0:	f241 63d0 	movw	r3, #5840	; 0x16d0
 80081e4:	4299      	cmp	r1, r3
 80081e6:	d901      	bls.n	80081ec <tcp_recved+0x28>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80081e8:	f241 61d0 	movw	r1, #5840	; 0x16d0
  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 80081ec:	4628      	mov	r0, r5
 80081ee:	8529      	strh	r1, [r5, #40]	; 0x28
 80081f0:	f7ff ffaa 	bl	8008148 <tcp_update_rcv_ann_wnd>
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 80081f4:	f240 53b3 	movw	r3, #1459	; 0x5b3
 80081f8:	4298      	cmp	r0, r3
 80081fa:	d800      	bhi.n	80081fe <tcp_recved+0x3a>
}
 80081fc:	bd70      	pop	{r4, r5, r6, pc}
    tcp_ack_now(pcb);
 80081fe:	8b6b      	ldrh	r3, [r5, #26]
    tcp_output(pcb);
 8008200:	4628      	mov	r0, r5
    tcp_ack_now(pcb);
 8008202:	f043 0302 	orr.w	r3, r3, #2
 8008206:	836b      	strh	r3, [r5, #26]
}
 8008208:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    tcp_output(pcb);
 800820c:	f003 bcce 	b.w	800bbac <tcp_output>
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8008210:	4b08      	ldr	r3, [pc, #32]	; (8008234 <tcp_recved+0x70>)
 8008212:	f240 32d2 	movw	r2, #978	; 0x3d2
 8008216:	4908      	ldr	r1, [pc, #32]	; (8008238 <tcp_recved+0x74>)
 8008218:	4808      	ldr	r0, [pc, #32]	; (800823c <tcp_recved+0x78>)
 800821a:	f005 ff03 	bl	800e024 <iprintf>
 800821e:	e7da      	b.n	80081d6 <tcp_recved+0x12>
  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8008220:	4b04      	ldr	r3, [pc, #16]	; (8008234 <tcp_recved+0x70>)
 8008222:	f240 32cf 	movw	r2, #975	; 0x3cf
 8008226:	4906      	ldr	r1, [pc, #24]	; (8008240 <tcp_recved+0x7c>)
 8008228:	4804      	ldr	r0, [pc, #16]	; (800823c <tcp_recved+0x78>)
}
 800822a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800822e:	f005 bef9 	b.w	800e024 <iprintf>
 8008232:	bf00      	nop
 8008234:	08010070 	.word	0x08010070
 8008238:	080101c0 	.word	0x080101c0
 800823c:	0800ef30 	.word	0x0800ef30
 8008240:	080101a8 	.word	0x080101a8

08008244 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 8008244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008246:	4604      	mov	r4, r0
 8008248:	460d      	mov	r5, r1
 800824a:	4617      	mov	r7, r2
 800824c:	461e      	mov	r6, r3
  struct netif *netif = NULL;
  err_t ret;
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();
 800824e:	f7fb fe73 	bl	8003f38 <sys_check_core_locking>

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8008252:	2c00      	cmp	r4, #0
 8008254:	f000 8089 	beq.w	800836a <tcp_connect+0x126>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8008258:	2d00      	cmp	r5, #0
 800825a:	d07c      	beq.n	8008356 <tcp_connect+0x112>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 800825c:	7d23      	ldrb	r3, [r4, #20]
 800825e:	2b00      	cmp	r3, #0
 8008260:	d169      	bne.n	8008336 <tcp_connect+0xf2>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 8008262:	682b      	ldr	r3, [r5, #0]
  pcb->remote_port = port;

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8008264:	7a20      	ldrb	r0, [r4, #8]
  pcb->remote_port = port;
 8008266:	8327      	strh	r7, [r4, #24]
  ip_addr_set(&pcb->remote_ip, ipaddr);
 8008268:	6063      	str	r3, [r4, #4]
  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800826a:	2800      	cmp	r0, #0
 800826c:	d048      	beq.n	8008300 <tcp_connect+0xbc>
    netif = netif_get_by_index(pcb->netif_idx);
 800826e:	f7ff f987 	bl	8007580 <netif_get_by_index>
 8008272:	4605      	mov	r5, r0
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
  }
  if (netif == NULL) {
 8008274:	2d00      	cmp	r5, #0
 8008276:	d06b      	beq.n	8008350 <tcp_connect+0x10c>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 8008278:	6823      	ldr	r3, [r4, #0]
 800827a:	b90b      	cbnz	r3, 8008280 <tcp_connect+0x3c>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
    if (local_ip == NULL) {
      return ERR_RTE;
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800827c:	686b      	ldr	r3, [r5, #4]
 800827e:	6023      	str	r3, [r4, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 8008280:	8ae7      	ldrh	r7, [r4, #22]
  if (pcb->local_port == 0) {
 8008282:	b927      	cbnz	r7, 800828e <tcp_connect+0x4a>
    pcb->local_port = tcp_new_port();
 8008284:	f7ff fdd8 	bl	8007e38 <tcp_new_port>
 8008288:	82e0      	strh	r0, [r4, #22]
    if (pcb->local_port == 0) {
 800828a:	2800      	cmp	r0, #0
 800828c:	d05d      	beq.n	800834a <tcp_connect+0x106>
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800828e:	4b3c      	ldr	r3, [pc, #240]	; (8008380 <tcp_connect+0x13c>)
 8008290:	4a3c      	ldr	r2, [pc, #240]	; (8008384 <tcp_connect+0x140>)
 8008292:	6811      	ldr	r1, [r2, #0]
 8008294:	681a      	ldr	r2, [r3, #0]
 8008296:	440a      	add	r2, r1
  pcb->snd_wnd = TCP_WND;
 8008298:	f241 61d0 	movw	r1, #5840	; 0x16d0
  iss += tcp_ticks;       /* XXX */
 800829c:	601a      	str	r2, [r3, #0]
  pcb->snd_nxt = iss;
 800829e:	6522      	str	r2, [r4, #80]	; 0x50
  pcb->lastack = iss - 1;
 80082a0:	3a01      	subs	r2, #1
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80082a2:	4b39      	ldr	r3, [pc, #228]	; (8008388 <tcp_connect+0x144>)
  pcb->lastack = iss - 1;
 80082a4:	6462      	str	r2, [r4, #68]	; 0x44
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80082a6:	62a3      	str	r3, [r4, #40]	; 0x28
#if LWIP_IPV4
  {
    if (outif == NULL) {
      return sendmss;
    }
    mtu = outif->mtu;
 80082a8:	8cab      	ldrh	r3, [r5, #36]	; 0x24
  pcb->snd_wnd = TCP_WND;
 80082aa:	f8a4 1060 	strh.w	r1, [r4, #96]	; 0x60
  pcb->snd_lbb = iss - 1;
 80082ae:	e9c4 2216 	strd	r2, r2, [r4, #88]	; 0x58
  pcb->rcv_nxt = 0;
 80082b2:	2200      	movs	r2, #0
 80082b4:	6262      	str	r2, [r4, #36]	; 0x24
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80082b6:	62e2      	str	r2, [r4, #44]	; 0x2c
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d036      	beq.n	800832a <tcp_connect+0xe6>
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 80082bc:	2b28      	cmp	r3, #40	; 0x28
 80082be:	d906      	bls.n	80082ce <tcp_connect+0x8a>
 80082c0:	3b28      	subs	r3, #40	; 0x28
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 80082c2:	b29a      	uxth	r2, r3
 80082c4:	f5b2 7f06 	cmp.w	r2, #536	; 0x218
 80082c8:	bf28      	it	cs
 80082ca:	f44f 7206 	movcs.w	r2, #536	; 0x218
  pcb->cwnd = 1;
 80082ce:	2301      	movs	r3, #1
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 80082d0:	2102      	movs	r1, #2
 80082d2:	4620      	mov	r0, r4
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 80082d4:	8662      	strh	r2, [r4, #50]	; 0x32
  pcb->connected = connected;
 80082d6:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
  pcb->cwnd = 1;
 80082da:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 80082de:	f003 fa49 	bl	800b774 <tcp_enqueue_flags>
  if (ret == ERR_OK) {
 80082e2:	4605      	mov	r5, r0
 80082e4:	b9f8      	cbnz	r0, 8008326 <tcp_connect+0xe2>
    pcb->state = SYN_SENT;
 80082e6:	2302      	movs	r3, #2
 80082e8:	7523      	strb	r3, [r4, #20]
    if (old_local_port != 0) {
 80082ea:	b187      	cbz	r7, 800830e <tcp_connect+0xca>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 80082ec:	4a27      	ldr	r2, [pc, #156]	; (800838c <tcp_connect+0x148>)
 80082ee:	6813      	ldr	r3, [r2, #0]
 80082f0:	42a3      	cmp	r3, r4
 80082f2:	d01d      	beq.n	8008330 <tcp_connect+0xec>
 80082f4:	b15b      	cbz	r3, 800830e <tcp_connect+0xca>
 80082f6:	68da      	ldr	r2, [r3, #12]
 80082f8:	42a2      	cmp	r2, r4
 80082fa:	d006      	beq.n	800830a <tcp_connect+0xc6>
 80082fc:	4613      	mov	r3, r2
 80082fe:	e7f9      	b.n	80082f4 <tcp_connect+0xb0>
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8008300:	1d20      	adds	r0, r4, #4
 8008302:	f004 fe69 	bl	800cfd8 <ip4_route>
 8008306:	4605      	mov	r5, r0
 8008308:	e7b4      	b.n	8008274 <tcp_connect+0x30>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800830a:	68e2      	ldr	r2, [r4, #12]
 800830c:	60da      	str	r2, [r3, #12]
    TCP_REG_ACTIVE(pcb);
 800830e:	4b20      	ldr	r3, [pc, #128]	; (8008390 <tcp_connect+0x14c>)
 8008310:	681a      	ldr	r2, [r3, #0]
 8008312:	601c      	str	r4, [r3, #0]
 8008314:	60e2      	str	r2, [r4, #12]
 8008316:	f003 ff6d 	bl	800c1f4 <tcp_timer_needed>
 800831a:	4b1e      	ldr	r3, [pc, #120]	; (8008394 <tcp_connect+0x150>)
 800831c:	2201      	movs	r2, #1
    tcp_output(pcb);
 800831e:	4620      	mov	r0, r4
    TCP_REG_ACTIVE(pcb);
 8008320:	701a      	strb	r2, [r3, #0]
    tcp_output(pcb);
 8008322:	f003 fc43 	bl	800bbac <tcp_output>
}
 8008326:	4628      	mov	r0, r5
 8008328:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800832a:	f44f 7206 	mov.w	r2, #536	; 0x218
 800832e:	e7ce      	b.n	80082ce <tcp_connect+0x8a>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8008330:	68e3      	ldr	r3, [r4, #12]
 8008332:	6013      	str	r3, [r2, #0]
 8008334:	e7eb      	b.n	800830e <tcp_connect+0xca>
  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 8008336:	4b18      	ldr	r3, [pc, #96]	; (8008398 <tcp_connect+0x154>)
 8008338:	f44f 6287 	mov.w	r2, #1080	; 0x438
 800833c:	4917      	ldr	r1, [pc, #92]	; (800839c <tcp_connect+0x158>)
 800833e:	f06f 0509 	mvn.w	r5, #9
 8008342:	4817      	ldr	r0, [pc, #92]	; (80083a0 <tcp_connect+0x15c>)
 8008344:	f005 fe6e 	bl	800e024 <iprintf>
 8008348:	e7ed      	b.n	8008326 <tcp_connect+0xe2>
      return ERR_BUF;
 800834a:	f06f 0501 	mvn.w	r5, #1
 800834e:	e7ea      	b.n	8008326 <tcp_connect+0xe2>
    return ERR_RTE;
 8008350:	f06f 0503 	mvn.w	r5, #3
 8008354:	e7e7      	b.n	8008326 <tcp_connect+0xe2>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8008356:	4b10      	ldr	r3, [pc, #64]	; (8008398 <tcp_connect+0x154>)
 8008358:	f240 4236 	movw	r2, #1078	; 0x436
 800835c:	4911      	ldr	r1, [pc, #68]	; (80083a4 <tcp_connect+0x160>)
 800835e:	f06f 050f 	mvn.w	r5, #15
 8008362:	480f      	ldr	r0, [pc, #60]	; (80083a0 <tcp_connect+0x15c>)
 8008364:	f005 fe5e 	bl	800e024 <iprintf>
 8008368:	e7dd      	b.n	8008326 <tcp_connect+0xe2>
  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800836a:	4b0b      	ldr	r3, [pc, #44]	; (8008398 <tcp_connect+0x154>)
 800836c:	f240 4235 	movw	r2, #1077	; 0x435
 8008370:	490d      	ldr	r1, [pc, #52]	; (80083a8 <tcp_connect+0x164>)
 8008372:	f06f 050f 	mvn.w	r5, #15
 8008376:	480a      	ldr	r0, [pc, #40]	; (80083a0 <tcp_connect+0x15c>)
 8008378:	f005 fe54 	bl	800e024 <iprintf>
 800837c:	e7d3      	b.n	8008326 <tcp_connect+0xe2>
 800837e:	bf00      	nop
 8008380:	24000028 	.word	0x24000028
 8008384:	24010558 	.word	0x24010558
 8008388:	16d016d0 	.word	0x16d016d0
 800838c:	24010550 	.word	0x24010550
 8008390:	24010548 	.word	0x24010548
 8008394:	2401054c 	.word	0x2401054c
 8008398:	08010070 	.word	0x08010070
 800839c:	08010220 	.word	0x08010220
 80083a0:	0800ef30 	.word	0x0800ef30
 80083a4:	08010204 	.word	0x08010204
 80083a8:	080101e8 	.word	0x080101e8

080083ac <tcp_segs_free>:
  while (seg != NULL) {
 80083ac:	b170      	cbz	r0, 80083cc <tcp_segs_free+0x20>
{
 80083ae:	b538      	push	{r3, r4, r5, lr}
 80083b0:	4604      	mov	r4, r0
      pbuf_free(seg->p);
 80083b2:	4625      	mov	r5, r4
    struct tcp_seg *next = seg->next;
 80083b4:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 80083b6:	6868      	ldr	r0, [r5, #4]
 80083b8:	b108      	cbz	r0, 80083be <tcp_segs_free+0x12>
      pbuf_free(seg->p);
 80083ba:	f7ff fa93 	bl	80078e4 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 80083be:	4629      	mov	r1, r5
 80083c0:	2003      	movs	r0, #3
 80083c2:	f7fe fec9 	bl	8007158 <memp_free>
  while (seg != NULL) {
 80083c6:	2c00      	cmp	r4, #0
 80083c8:	d1f3      	bne.n	80083b2 <tcp_segs_free+0x6>
}
 80083ca:	bd38      	pop	{r3, r4, r5, pc}
 80083cc:	4770      	bx	lr
 80083ce:	bf00      	nop

080083d0 <tcp_seg_free>:
  if (seg != NULL) {
 80083d0:	b158      	cbz	r0, 80083ea <tcp_seg_free+0x1a>
{
 80083d2:	b510      	push	{r4, lr}
 80083d4:	4604      	mov	r4, r0
    if (seg->p != NULL) {
 80083d6:	6840      	ldr	r0, [r0, #4]
 80083d8:	b108      	cbz	r0, 80083de <tcp_seg_free+0xe>
      pbuf_free(seg->p);
 80083da:	f7ff fa83 	bl	80078e4 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 80083de:	4621      	mov	r1, r4
 80083e0:	2003      	movs	r0, #3
}
 80083e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    memp_free(MEMP_TCP_SEG, seg);
 80083e6:	f7fe beb7 	b.w	8007158 <memp_free>
 80083ea:	4770      	bx	lr

080083ec <tcp_seg_copy>:
{
 80083ec:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 80083ee:	4605      	mov	r5, r0
 80083f0:	b188      	cbz	r0, 8008416 <tcp_seg_copy+0x2a>
  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 80083f2:	2003      	movs	r0, #3
 80083f4:	f7fe fe6a 	bl	80070cc <memp_malloc>
  if (cseg == NULL) {
 80083f8:	4604      	mov	r4, r0
 80083fa:	b150      	cbz	r0, 8008412 <tcp_seg_copy+0x26>
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 80083fc:	6868      	ldr	r0, [r5, #4]
 80083fe:	6829      	ldr	r1, [r5, #0]
 8008400:	68aa      	ldr	r2, [r5, #8]
 8008402:	68eb      	ldr	r3, [r5, #12]
 8008404:	6060      	str	r0, [r4, #4]
 8008406:	6021      	str	r1, [r4, #0]
  pbuf_ref(cseg->p);
 8008408:	6860      	ldr	r0, [r4, #4]
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800840a:	60a2      	str	r2, [r4, #8]
 800840c:	60e3      	str	r3, [r4, #12]
  pbuf_ref(cseg->p);
 800840e:	f7ff fbeb 	bl	8007be8 <pbuf_ref>
}
 8008412:	4620      	mov	r0, r4
 8008414:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8008416:	4b04      	ldr	r3, [pc, #16]	; (8008428 <tcp_seg_copy+0x3c>)
 8008418:	f240 6282 	movw	r2, #1666	; 0x682
 800841c:	4903      	ldr	r1, [pc, #12]	; (800842c <tcp_seg_copy+0x40>)
 800841e:	4804      	ldr	r0, [pc, #16]	; (8008430 <tcp_seg_copy+0x44>)
 8008420:	f005 fe00 	bl	800e024 <iprintf>
 8008424:	e7e5      	b.n	80083f2 <tcp_seg_copy+0x6>
 8008426:	bf00      	nop
 8008428:	08010070 	.word	0x08010070
 800842c:	08010250 	.word	0x08010250
 8008430:	0800ef30 	.word	0x0800ef30

08008434 <tcp_arg>:
{
 8008434:	b538      	push	{r3, r4, r5, lr}
 8008436:	4604      	mov	r4, r0
 8008438:	460d      	mov	r5, r1
  LWIP_ASSERT_CORE_LOCKED();
 800843a:	f7fb fd7d 	bl	8003f38 <sys_check_core_locking>
  if (pcb != NULL) {
 800843e:	b104      	cbz	r4, 8008442 <tcp_arg+0xe>
    pcb->callback_arg = arg;
 8008440:	6125      	str	r5, [r4, #16]
}
 8008442:	bd38      	pop	{r3, r4, r5, pc}

08008444 <tcp_recv>:
{
 8008444:	b538      	push	{r3, r4, r5, lr}
 8008446:	4604      	mov	r4, r0
 8008448:	460d      	mov	r5, r1
  LWIP_ASSERT_CORE_LOCKED();
 800844a:	f7fb fd75 	bl	8003f38 <sys_check_core_locking>
  if (pcb != NULL) {
 800844e:	b124      	cbz	r4, 800845a <tcp_recv+0x16>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8008450:	7d23      	ldrb	r3, [r4, #20]
 8008452:	2b01      	cmp	r3, #1
 8008454:	d002      	beq.n	800845c <tcp_recv+0x18>
    pcb->recv = recv;
 8008456:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
}
 800845a:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800845c:	4b03      	ldr	r3, [pc, #12]	; (800846c <tcp_recv+0x28>)
 800845e:	f240 72df 	movw	r2, #2015	; 0x7df
 8008462:	4903      	ldr	r1, [pc, #12]	; (8008470 <tcp_recv+0x2c>)
 8008464:	4803      	ldr	r0, [pc, #12]	; (8008474 <tcp_recv+0x30>)
 8008466:	f005 fddd 	bl	800e024 <iprintf>
 800846a:	e7f4      	b.n	8008456 <tcp_recv+0x12>
 800846c:	08010070 	.word	0x08010070
 8008470:	0801026c 	.word	0x0801026c
 8008474:	0800ef30 	.word	0x0800ef30

08008478 <tcp_sent>:
{
 8008478:	b538      	push	{r3, r4, r5, lr}
 800847a:	4604      	mov	r4, r0
 800847c:	460d      	mov	r5, r1
  LWIP_ASSERT_CORE_LOCKED();
 800847e:	f7fb fd5b 	bl	8003f38 <sys_check_core_locking>
  if (pcb != NULL) {
 8008482:	b124      	cbz	r4, 800848e <tcp_sent+0x16>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8008484:	7d23      	ldrb	r3, [r4, #20]
 8008486:	2b01      	cmp	r3, #1
 8008488:	d002      	beq.n	8008490 <tcp_sent+0x18>
    pcb->sent = sent;
 800848a:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
}
 800848e:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8008490:	4b03      	ldr	r3, [pc, #12]	; (80084a0 <tcp_sent+0x28>)
 8008492:	f240 72f3 	movw	r2, #2035	; 0x7f3
 8008496:	4903      	ldr	r1, [pc, #12]	; (80084a4 <tcp_sent+0x2c>)
 8008498:	4803      	ldr	r0, [pc, #12]	; (80084a8 <tcp_sent+0x30>)
 800849a:	f005 fdc3 	bl	800e024 <iprintf>
 800849e:	e7f4      	b.n	800848a <tcp_sent+0x12>
 80084a0:	08010070 	.word	0x08010070
 80084a4:	08010294 	.word	0x08010294
 80084a8:	0800ef30 	.word	0x0800ef30

080084ac <tcp_err>:
{
 80084ac:	b538      	push	{r3, r4, r5, lr}
 80084ae:	4604      	mov	r4, r0
 80084b0:	460d      	mov	r5, r1
  LWIP_ASSERT_CORE_LOCKED();
 80084b2:	f7fb fd41 	bl	8003f38 <sys_check_core_locking>
  if (pcb != NULL) {
 80084b6:	b124      	cbz	r4, 80084c2 <tcp_err+0x16>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 80084b8:	7d23      	ldrb	r3, [r4, #20]
 80084ba:	2b01      	cmp	r3, #1
 80084bc:	d002      	beq.n	80084c4 <tcp_err+0x18>
    pcb->errf = err;
 80084be:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
}
 80084c2:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 80084c4:	4b03      	ldr	r3, [pc, #12]	; (80084d4 <tcp_err+0x28>)
 80084c6:	f640 020d 	movw	r2, #2061	; 0x80d
 80084ca:	4903      	ldr	r1, [pc, #12]	; (80084d8 <tcp_err+0x2c>)
 80084cc:	4803      	ldr	r0, [pc, #12]	; (80084dc <tcp_err+0x30>)
 80084ce:	f005 fda9 	bl	800e024 <iprintf>
 80084d2:	e7f4      	b.n	80084be <tcp_err+0x12>
 80084d4:	08010070 	.word	0x08010070
 80084d8:	080102bc 	.word	0x080102bc
 80084dc:	0800ef30 	.word	0x0800ef30

080084e0 <tcp_accept>:
{
 80084e0:	b538      	push	{r3, r4, r5, lr}
 80084e2:	4604      	mov	r4, r0
 80084e4:	460d      	mov	r5, r1
  LWIP_ASSERT_CORE_LOCKED();
 80084e6:	f7fb fd27 	bl	8003f38 <sys_check_core_locking>
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 80084ea:	b11c      	cbz	r4, 80084f4 <tcp_accept+0x14>
 80084ec:	7d23      	ldrb	r3, [r4, #20]
 80084ee:	2b01      	cmp	r3, #1
    lpcb->accept = accept;
 80084f0:	bf08      	it	eq
 80084f2:	61a5      	streq	r5, [r4, #24]
}
 80084f4:	bd38      	pop	{r3, r4, r5, pc}
 80084f6:	bf00      	nop

080084f8 <tcp_poll>:
{
 80084f8:	b570      	push	{r4, r5, r6, lr}
 80084fa:	4604      	mov	r4, r0
 80084fc:	460e      	mov	r6, r1
 80084fe:	4615      	mov	r5, r2
  LWIP_ASSERT_CORE_LOCKED();
 8008500:	f7fb fd1a 	bl	8003f38 <sys_check_core_locking>
  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8008504:	b18c      	cbz	r4, 800852a <tcp_poll+0x32>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8008506:	7d23      	ldrb	r3, [r4, #20]
 8008508:	2b01      	cmp	r3, #1
 800850a:	d003      	beq.n	8008514 <tcp_poll+0x1c>
  pcb->poll = poll;
 800850c:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
  pcb->pollinterval = interval;
 8008510:	7765      	strb	r5, [r4, #29]
}
 8008512:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8008514:	4b09      	ldr	r3, [pc, #36]	; (800853c <tcp_poll+0x44>)
 8008516:	f640 023e 	movw	r2, #2110	; 0x83e
 800851a:	4909      	ldr	r1, [pc, #36]	; (8008540 <tcp_poll+0x48>)
 800851c:	4809      	ldr	r0, [pc, #36]	; (8008544 <tcp_poll+0x4c>)
 800851e:	f005 fd81 	bl	800e024 <iprintf>
  pcb->poll = poll;
 8008522:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
  pcb->pollinterval = interval;
 8008526:	7765      	strb	r5, [r4, #29]
}
 8008528:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800852a:	4b04      	ldr	r3, [pc, #16]	; (800853c <tcp_poll+0x44>)
 800852c:	f640 023d 	movw	r2, #2109	; 0x83d
 8008530:	4905      	ldr	r1, [pc, #20]	; (8008548 <tcp_poll+0x50>)
 8008532:	4804      	ldr	r0, [pc, #16]	; (8008544 <tcp_poll+0x4c>)
}
 8008534:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8008538:	f005 bd74 	b.w	800e024 <iprintf>
 800853c:	08010070 	.word	0x08010070
 8008540:	080102fc 	.word	0x080102fc
 8008544:	0800ef30 	.word	0x0800ef30
 8008548:	080102e4 	.word	0x080102e4

0800854c <tcp_pcb_purge>:
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800854c:	2800      	cmp	r0, #0
 800854e:	d041      	beq.n	80085d4 <tcp_pcb_purge+0x88>
{
 8008550:	b570      	push	{r4, r5, r6, lr}
  if (pcb->state != CLOSED &&
 8008552:	7d03      	ldrb	r3, [r0, #20]
 8008554:	4605      	mov	r5, r0
      pcb->state != TIME_WAIT &&
 8008556:	2b0a      	cmp	r3, #10
 8008558:	d001      	beq.n	800855e <tcp_pcb_purge+0x12>
 800855a:	2b01      	cmp	r3, #1
 800855c:	d800      	bhi.n	8008560 <tcp_pcb_purge+0x14>
}
 800855e:	bd70      	pop	{r4, r5, r6, pc}
    if (pcb->refused_data != NULL) {
 8008560:	6f80      	ldr	r0, [r0, #120]	; 0x78
 8008562:	b118      	cbz	r0, 800856c <tcp_pcb_purge+0x20>
      pbuf_free(pcb->refused_data);
 8008564:	f7ff f9be 	bl	80078e4 <pbuf_free>
      pcb->refused_data = NULL;
 8008568:	2300      	movs	r3, #0
 800856a:	67ab      	str	r3, [r5, #120]	; 0x78
    if (pcb->ooseq != NULL) {
 800856c:	6f6c      	ldr	r4, [r5, #116]	; 0x74
 800856e:	b164      	cbz	r4, 800858a <tcp_pcb_purge+0x3e>
      pbuf_free(seg->p);
 8008570:	4626      	mov	r6, r4
    struct tcp_seg *next = seg->next;
 8008572:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 8008574:	6870      	ldr	r0, [r6, #4]
 8008576:	b108      	cbz	r0, 800857c <tcp_pcb_purge+0x30>
      pbuf_free(seg->p);
 8008578:	f7ff f9b4 	bl	80078e4 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 800857c:	4631      	mov	r1, r6
 800857e:	2003      	movs	r0, #3
 8008580:	f7fe fdea 	bl	8007158 <memp_free>
  while (seg != NULL) {
 8008584:	2c00      	cmp	r4, #0
 8008586:	d1f3      	bne.n	8008570 <tcp_pcb_purge+0x24>
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
  if (pcb->ooseq) {
    tcp_segs_free(pcb->ooseq);
    pcb->ooseq = NULL;
 8008588:	676c      	str	r4, [r5, #116]	; 0x74
    pcb->rtime = -1;
 800858a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    tcp_segs_free(pcb->unsent);
 800858e:	6eec      	ldr	r4, [r5, #108]	; 0x6c
    pcb->rtime = -1;
 8008590:	862b      	strh	r3, [r5, #48]	; 0x30
  while (seg != NULL) {
 8008592:	b15c      	cbz	r4, 80085ac <tcp_pcb_purge+0x60>
      pbuf_free(seg->p);
 8008594:	4626      	mov	r6, r4
    struct tcp_seg *next = seg->next;
 8008596:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 8008598:	6870      	ldr	r0, [r6, #4]
 800859a:	b108      	cbz	r0, 80085a0 <tcp_pcb_purge+0x54>
      pbuf_free(seg->p);
 800859c:	f7ff f9a2 	bl	80078e4 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 80085a0:	4631      	mov	r1, r6
 80085a2:	2003      	movs	r0, #3
 80085a4:	f7fe fdd8 	bl	8007158 <memp_free>
  while (seg != NULL) {
 80085a8:	2c00      	cmp	r4, #0
 80085aa:	d1f3      	bne.n	8008594 <tcp_pcb_purge+0x48>
    tcp_segs_free(pcb->unacked);
 80085ac:	6f2c      	ldr	r4, [r5, #112]	; 0x70
  while (seg != NULL) {
 80085ae:	b15c      	cbz	r4, 80085c8 <tcp_pcb_purge+0x7c>
      pbuf_free(seg->p);
 80085b0:	4626      	mov	r6, r4
    struct tcp_seg *next = seg->next;
 80085b2:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 80085b4:	6870      	ldr	r0, [r6, #4]
 80085b6:	b108      	cbz	r0, 80085bc <tcp_pcb_purge+0x70>
      pbuf_free(seg->p);
 80085b8:	f7ff f994 	bl	80078e4 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 80085bc:	4631      	mov	r1, r6
 80085be:	2003      	movs	r0, #3
 80085c0:	f7fe fdca 	bl	8007158 <memp_free>
  while (seg != NULL) {
 80085c4:	2c00      	cmp	r4, #0
 80085c6:	d1f3      	bne.n	80085b0 <tcp_pcb_purge+0x64>
    pcb->unacked = pcb->unsent = NULL;
 80085c8:	2300      	movs	r3, #0
 80085ca:	e9c5 331b 	strd	r3, r3, [r5, #108]	; 0x6c
    pcb->unsent_oversize = 0;
 80085ce:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
}
 80085d2:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 80085d4:	4b03      	ldr	r3, [pc, #12]	; (80085e4 <tcp_pcb_purge+0x98>)
 80085d6:	f640 0251 	movw	r2, #2129	; 0x851
 80085da:	4903      	ldr	r1, [pc, #12]	; (80085e8 <tcp_pcb_purge+0x9c>)
 80085dc:	4803      	ldr	r0, [pc, #12]	; (80085ec <tcp_pcb_purge+0xa0>)
 80085de:	f005 bd21 	b.w	800e024 <iprintf>
 80085e2:	bf00      	nop
 80085e4:	08010070 	.word	0x08010070
 80085e8:	0801031c 	.word	0x0801031c
 80085ec:	0800ef30 	.word	0x0800ef30

080085f0 <tcp_slowtmr>:
{
 80085f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  ++tcp_ticks;
 80085f4:	4da9      	ldr	r5, [pc, #676]	; (800889c <tcp_slowtmr+0x2ac>)
{
 80085f6:	b087      	sub	sp, #28
  ++tcp_timer_ctr;
 80085f8:	f8df b2cc 	ldr.w	fp, [pc, #716]	; 80088c8 <tcp_slowtmr+0x2d8>
  ++tcp_ticks;
 80085fc:	682b      	ldr	r3, [r5, #0]
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80085fe:	4fa8      	ldr	r7, [pc, #672]	; (80088a0 <tcp_slowtmr+0x2b0>)
  ++tcp_ticks;
 8008600:	3301      	adds	r3, #1
 8008602:	602b      	str	r3, [r5, #0]
  ++tcp_timer_ctr;
 8008604:	f89b 3000 	ldrb.w	r3, [fp]
 8008608:	3301      	adds	r3, #1
 800860a:	f88b 3000 	strb.w	r3, [fp]
  pcb = tcp_active_pcbs;
 800860e:	4ba5      	ldr	r3, [pc, #660]	; (80088a4 <tcp_slowtmr+0x2b4>)
 8008610:	681c      	ldr	r4, [r3, #0]
  while (pcb != NULL) {
 8008612:	2c00      	cmp	r4, #0
 8008614:	f000 808a 	beq.w	800872c <tcp_slowtmr+0x13c>
  prev = NULL;
 8008618:	2600      	movs	r6, #0
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800861a:	46b1      	mov	r9, r6
 800861c:	7d23      	ldrb	r3, [r4, #20]
 800861e:	2b00      	cmp	r3, #0
 8008620:	f000 80fc 	beq.w	800881c <tcp_slowtmr+0x22c>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8008624:	2b01      	cmp	r3, #1
 8008626:	f000 8104 	beq.w	8008832 <tcp_slowtmr+0x242>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800862a:	2b0a      	cmp	r3, #10
 800862c:	f000 810c 	beq.w	8008848 <tcp_slowtmr+0x258>
    if (pcb->last_timer == tcp_timer_ctr) {
 8008630:	f89b 2000 	ldrb.w	r2, [fp]
 8008634:	7fa3      	ldrb	r3, [r4, #30]
 8008636:	4293      	cmp	r3, r2
 8008638:	f000 8113 	beq.w	8008862 <tcp_slowtmr+0x272>
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800863c:	7d23      	ldrb	r3, [r4, #20]
    pcb->last_timer = tcp_timer_ctr;
 800863e:	77a2      	strb	r2, [r4, #30]
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8008640:	2b02      	cmp	r3, #2
 8008642:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 8008646:	f000 8112 	beq.w	800886e <tcp_slowtmr+0x27e>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800864a:	2a0b      	cmp	r2, #11
 800864c:	f240 80cb 	bls.w	80087e6 <tcp_slowtmr+0x1f6>
      ++pcb_remove;
 8008650:	f04f 0801 	mov.w	r8, #1
    if (pcb->state == FIN_WAIT_2) {
 8008654:	2b06      	cmp	r3, #6
 8008656:	f000 80b7 	beq.w	80087c8 <tcp_slowtmr+0x1d8>
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800865a:	f894 a009 	ldrb.w	sl, [r4, #9]
 800865e:	f01a 0a08 	ands.w	sl, sl, #8
 8008662:	d01d      	beq.n	80086a0 <tcp_slowtmr+0xb0>
 8008664:	2b04      	cmp	r3, #4
 8008666:	d007      	beq.n	8008678 <tcp_slowtmr+0x88>
 8008668:	f1a3 0307 	sub.w	r3, r3, #7
 800866c:	fab3 f383 	clz	r3, r3
 8008670:	095b      	lsrs	r3, r3, #5
 8008672:	2b00      	cmp	r3, #0
 8008674:	f000 80b4 	beq.w	80087e0 <tcp_slowtmr+0x1f0>
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8008678:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 800867c:	4b8a      	ldr	r3, [pc, #552]	; (80088a8 <tcp_slowtmr+0x2b8>)
 800867e:	488b      	ldr	r0, [pc, #556]	; (80088ac <tcp_slowtmr+0x2bc>)
 8008680:	440b      	add	r3, r1
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008682:	682a      	ldr	r2, [r5, #0]
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8008684:	fba0 0303 	umull	r0, r3, r0, r3
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008688:	6a20      	ldr	r0, [r4, #32]
 800868a:	1a12      	subs	r2, r2, r0
 800868c:	ebb2 1f53 	cmp.w	r2, r3, lsr #5
 8008690:	f240 8160 	bls.w	8008954 <tcp_slowtmr+0x364>
        ++pcb_remove;
 8008694:	f108 0801 	add.w	r8, r8, #1
        ++pcb_reset;
 8008698:	f04f 0a01 	mov.w	sl, #1
        ++pcb_remove;
 800869c:	fa5f f888 	uxtb.w	r8, r8
    if (pcb->ooseq != NULL &&
 80086a0:	6f66      	ldr	r6, [r4, #116]	; 0x74
 80086a2:	b156      	cbz	r6, 80086ba <tcp_slowtmr+0xca>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 80086a4:	682b      	ldr	r3, [r5, #0]
 80086a6:	6a22      	ldr	r2, [r4, #32]
 80086a8:	1a9a      	subs	r2, r3, r2
 80086aa:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 80086ae:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    if (pcb->ooseq != NULL &&
 80086b2:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
 80086b6:	f080 80e1 	bcs.w	800887c <tcp_slowtmr+0x28c>
    if (pcb->state == SYN_RCVD) {
 80086ba:	7d23      	ldrb	r3, [r4, #20]
 80086bc:	2b03      	cmp	r3, #3
 80086be:	d057      	beq.n	8008770 <tcp_slowtmr+0x180>
    if (pcb->state == LAST_ACK) {
 80086c0:	2b09      	cmp	r3, #9
 80086c2:	d15a      	bne.n	800877a <tcp_slowtmr+0x18a>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80086c4:	682b      	ldr	r3, [r5, #0]
 80086c6:	6a22      	ldr	r2, [r4, #32]
 80086c8:	1a9b      	subs	r3, r3, r2
 80086ca:	2bf0      	cmp	r3, #240	; 0xf0
 80086cc:	d955      	bls.n	800877a <tcp_slowtmr+0x18a>
      tcp_pcb_purge(pcb);
 80086ce:	4620      	mov	r0, r4
      tcp_err_fn err_fn = pcb->errf;
 80086d0:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
      tcp_pcb_purge(pcb);
 80086d4:	f7ff ff3a 	bl	800854c <tcp_pcb_purge>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 80086d8:	4b72      	ldr	r3, [pc, #456]	; (80088a4 <tcp_slowtmr+0x2b4>)
 80086da:	681b      	ldr	r3, [r3, #0]
      if (prev != NULL) {
 80086dc:	f1b9 0f00 	cmp.w	r9, #0
 80086e0:	f000 817e 	beq.w	80089e0 <tcp_slowtmr+0x3f0>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 80086e4:	42a3      	cmp	r3, r4
 80086e6:	f000 81da 	beq.w	8008a9e <tcp_slowtmr+0x4ae>
        prev->next = pcb->next;
 80086ea:	68e3      	ldr	r3, [r4, #12]
 80086ec:	f8c9 300c 	str.w	r3, [r9, #12]
      if (pcb_reset) {
 80086f0:	f1ba 0f00 	cmp.w	sl, #0
 80086f4:	f040 8147 	bne.w	8008986 <tcp_slowtmr+0x396>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 80086f8:	7d23      	ldrb	r3, [r4, #20]
 80086fa:	2b01      	cmp	r3, #1
      pcb = pcb->next;
 80086fc:	e9d4 8a03 	ldrd	r8, sl, [r4, #12]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8008700:	f000 8153 	beq.w	80089aa <tcp_slowtmr+0x3ba>
  memp_free(MEMP_TCP_PCB, pcb);
 8008704:	4621      	mov	r1, r4
 8008706:	2001      	movs	r0, #1
 8008708:	f7fe fd26 	bl	8007158 <memp_free>
      tcp_active_pcbs_changed = 0;
 800870c:	4c68      	ldr	r4, [pc, #416]	; (80088b0 <tcp_slowtmr+0x2c0>)
 800870e:	2300      	movs	r3, #0
 8008710:	7023      	strb	r3, [r4, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8008712:	b13e      	cbz	r6, 8008724 <tcp_slowtmr+0x134>
 8008714:	f06f 010c 	mvn.w	r1, #12
 8008718:	4650      	mov	r0, sl
 800871a:	47b0      	blx	r6
      if (tcp_active_pcbs_changed) {
 800871c:	7823      	ldrb	r3, [r4, #0]
 800871e:	2b00      	cmp	r3, #0
 8008720:	f47f af75 	bne.w	800860e <tcp_slowtmr+0x1e>
      pcb = pcb->next;
 8008724:	4644      	mov	r4, r8
  while (pcb != NULL) {
 8008726:	2c00      	cmp	r4, #0
 8008728:	f47f af78 	bne.w	800861c <tcp_slowtmr+0x2c>
  pcb = tcp_tw_pcbs;
 800872c:	f8df 919c 	ldr.w	r9, [pc, #412]	; 80088cc <tcp_slowtmr+0x2dc>
 8008730:	f8d9 4000 	ldr.w	r4, [r9]
  while (pcb != NULL) {
 8008734:	b1cc      	cbz	r4, 800876a <tcp_slowtmr+0x17a>
  prev = NULL;
 8008736:	2600      	movs	r6, #0
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8008738:	f8df 8164 	ldr.w	r8, [pc, #356]	; 80088a0 <tcp_slowtmr+0x2b0>
 800873c:	f8df a190 	ldr.w	sl, [pc, #400]	; 80088d0 <tcp_slowtmr+0x2e0>
 8008740:	4f5c      	ldr	r7, [pc, #368]	; (80088b4 <tcp_slowtmr+0x2c4>)
 8008742:	7d23      	ldrb	r3, [r4, #20]
 8008744:	2b0a      	cmp	r3, #10
 8008746:	d006      	beq.n	8008756 <tcp_slowtmr+0x166>
 8008748:	4643      	mov	r3, r8
 800874a:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800874e:	4651      	mov	r1, sl
 8008750:	4638      	mov	r0, r7
 8008752:	f005 fc67 	bl	800e024 <iprintf>
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8008756:	682b      	ldr	r3, [r5, #0]
 8008758:	6a22      	ldr	r2, [r4, #32]
 800875a:	1a9b      	subs	r3, r3, r2
 800875c:	2bf0      	cmp	r3, #240	; 0xf0
 800875e:	f200 80d4 	bhi.w	800890a <tcp_slowtmr+0x31a>
      pcb = pcb->next;
 8008762:	4626      	mov	r6, r4
 8008764:	68e4      	ldr	r4, [r4, #12]
  while (pcb != NULL) {
 8008766:	2c00      	cmp	r4, #0
 8008768:	d1eb      	bne.n	8008742 <tcp_slowtmr+0x152>
}
 800876a:	b007      	add	sp, #28
 800876c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008770:	682b      	ldr	r3, [r5, #0]
 8008772:	6a22      	ldr	r2, [r4, #32]
 8008774:	1a9b      	subs	r3, r3, r2
 8008776:	2b28      	cmp	r3, #40	; 0x28
 8008778:	d8a9      	bhi.n	80086ce <tcp_slowtmr+0xde>
    if (pcb_remove) {
 800877a:	f1b8 0f00 	cmp.w	r8, #0
 800877e:	d1a6      	bne.n	80086ce <tcp_slowtmr+0xde>
      ++prev->polltmr;
 8008780:	7f23      	ldrb	r3, [r4, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8008782:	7f62      	ldrb	r2, [r4, #29]
      ++prev->polltmr;
 8008784:	3301      	adds	r3, #1
      pcb = pcb->next;
 8008786:	68e6      	ldr	r6, [r4, #12]
      ++prev->polltmr;
 8008788:	b2db      	uxtb	r3, r3
      if (prev->polltmr >= prev->pollinterval) {
 800878a:	429a      	cmp	r2, r3
      ++prev->polltmr;
 800878c:	7723      	strb	r3, [r4, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800878e:	d815      	bhi.n	80087bc <tcp_slowtmr+0x1cc>
        tcp_active_pcbs_changed = 0;
 8008790:	f8df 911c 	ldr.w	r9, [pc, #284]	; 80088b0 <tcp_slowtmr+0x2c0>
        TCP_EVENT_POLL(prev, err);
 8008794:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
        prev->polltmr = 0;
 8008798:	f884 801c 	strb.w	r8, [r4, #28]
        tcp_active_pcbs_changed = 0;
 800879c:	f889 8000 	strb.w	r8, [r9]
        TCP_EVENT_POLL(prev, err);
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	f000 80ce 	beq.w	8008942 <tcp_slowtmr+0x352>
 80087a6:	4621      	mov	r1, r4
 80087a8:	6920      	ldr	r0, [r4, #16]
 80087aa:	4798      	blx	r3
        if (tcp_active_pcbs_changed) {
 80087ac:	f899 3000 	ldrb.w	r3, [r9]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	f47f af2c 	bne.w	800860e <tcp_slowtmr+0x1e>
        if (err == ERR_OK) {
 80087b6:	2800      	cmp	r0, #0
 80087b8:	f000 80c3 	beq.w	8008942 <tcp_slowtmr+0x352>
 80087bc:	46a1      	mov	r9, r4
      pcb = pcb->next;
 80087be:	4634      	mov	r4, r6
  while (pcb != NULL) {
 80087c0:	2c00      	cmp	r4, #0
 80087c2:	f47f af2b 	bne.w	800861c <tcp_slowtmr+0x2c>
 80087c6:	e7b1      	b.n	800872c <tcp_slowtmr+0x13c>
      if (pcb->flags & TF_RXCLOSED) {
 80087c8:	8b63      	ldrh	r3, [r4, #26]
 80087ca:	06db      	lsls	r3, r3, #27
 80087cc:	d508      	bpl.n	80087e0 <tcp_slowtmr+0x1f0>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 80087ce:	682b      	ldr	r3, [r5, #0]
 80087d0:	6a22      	ldr	r2, [r4, #32]
 80087d2:	1a9b      	subs	r3, r3, r2
 80087d4:	2b28      	cmp	r3, #40	; 0x28
 80087d6:	d903      	bls.n	80087e0 <tcp_slowtmr+0x1f0>
          ++pcb_remove;
 80087d8:	f108 0801 	add.w	r8, r8, #1
 80087dc:	fa5f f888 	uxtb.w	r8, r8
    pcb_reset = 0;
 80087e0:	f04f 0a00 	mov.w	sl, #0
 80087e4:	e75c      	b.n	80086a0 <tcp_slowtmr+0xb0>
      if (pcb->persist_backoff > 0) {
 80087e6:	f894 8099 	ldrb.w	r8, [r4, #153]	; 0x99
 80087ea:	f1b8 0f00 	cmp.w	r8, #0
 80087ee:	d071      	beq.n	80088d4 <tcp_slowtmr+0x2e4>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 80087f0:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80087f2:	b133      	cbz	r3, 8008802 <tcp_slowtmr+0x212>
 80087f4:	463b      	mov	r3, r7
 80087f6:	f240 42d4 	movw	r2, #1236	; 0x4d4
 80087fa:	492f      	ldr	r1, [pc, #188]	; (80088b8 <tcp_slowtmr+0x2c8>)
 80087fc:	482d      	ldr	r0, [pc, #180]	; (80088b4 <tcp_slowtmr+0x2c4>)
 80087fe:	f005 fc11 	bl	800e024 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8008802:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8008804:	2b00      	cmp	r3, #0
 8008806:	f000 816c 	beq.w	8008ae2 <tcp_slowtmr+0x4f2>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800880a:	f894 309a 	ldrb.w	r3, [r4, #154]	; 0x9a
 800880e:	2b0b      	cmp	r3, #11
 8008810:	f240 80d2 	bls.w	80089b8 <tcp_slowtmr+0x3c8>
    if (pcb->state == FIN_WAIT_2) {
 8008814:	7d23      	ldrb	r3, [r4, #20]
          ++pcb_remove; /* max probes reached */
 8008816:	f04f 0801 	mov.w	r8, #1
 800881a:	e71b      	b.n	8008654 <tcp_slowtmr+0x64>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800881c:	463b      	mov	r3, r7
 800881e:	f240 42be 	movw	r2, #1214	; 0x4be
 8008822:	4926      	ldr	r1, [pc, #152]	; (80088bc <tcp_slowtmr+0x2cc>)
 8008824:	4823      	ldr	r0, [pc, #140]	; (80088b4 <tcp_slowtmr+0x2c4>)
 8008826:	f005 fbfd 	bl	800e024 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800882a:	7d23      	ldrb	r3, [r4, #20]
 800882c:	2b01      	cmp	r3, #1
 800882e:	f47f aefc 	bne.w	800862a <tcp_slowtmr+0x3a>
 8008832:	463b      	mov	r3, r7
 8008834:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8008838:	4921      	ldr	r1, [pc, #132]	; (80088c0 <tcp_slowtmr+0x2d0>)
 800883a:	481e      	ldr	r0, [pc, #120]	; (80088b4 <tcp_slowtmr+0x2c4>)
 800883c:	f005 fbf2 	bl	800e024 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8008840:	7d23      	ldrb	r3, [r4, #20]
 8008842:	2b0a      	cmp	r3, #10
 8008844:	f47f aef4 	bne.w	8008630 <tcp_slowtmr+0x40>
 8008848:	463b      	mov	r3, r7
 800884a:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800884e:	491d      	ldr	r1, [pc, #116]	; (80088c4 <tcp_slowtmr+0x2d4>)
 8008850:	4818      	ldr	r0, [pc, #96]	; (80088b4 <tcp_slowtmr+0x2c4>)
 8008852:	f005 fbe7 	bl	800e024 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8008856:	f89b 2000 	ldrb.w	r2, [fp]
 800885a:	7fa3      	ldrb	r3, [r4, #30]
 800885c:	4293      	cmp	r3, r2
 800885e:	f47f aeed 	bne.w	800863c <tcp_slowtmr+0x4c>
      continue;
 8008862:	46a1      	mov	r9, r4
      pcb = pcb->next;
 8008864:	68e4      	ldr	r4, [r4, #12]
  while (pcb != NULL) {
 8008866:	2c00      	cmp	r4, #0
 8008868:	f47f aed8 	bne.w	800861c <tcp_slowtmr+0x2c>
 800886c:	e75e      	b.n	800872c <tcp_slowtmr+0x13c>
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800886e:	2a05      	cmp	r2, #5
 8008870:	d9b9      	bls.n	80087e6 <tcp_slowtmr+0x1f6>
    pcb_reset = 0;
 8008872:	f04f 0a00 	mov.w	sl, #0
      ++pcb_remove;
 8008876:	f04f 0801 	mov.w	r8, #1
 800887a:	e711      	b.n	80086a0 <tcp_slowtmr+0xb0>
 800887c:	9405      	str	r4, [sp, #20]
      pbuf_free(seg->p);
 800887e:	4634      	mov	r4, r6
    struct tcp_seg *next = seg->next;
 8008880:	6836      	ldr	r6, [r6, #0]
    if (seg->p != NULL) {
 8008882:	6860      	ldr	r0, [r4, #4]
 8008884:	b108      	cbz	r0, 800888a <tcp_slowtmr+0x29a>
      pbuf_free(seg->p);
 8008886:	f7ff f82d 	bl	80078e4 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 800888a:	4621      	mov	r1, r4
 800888c:	2003      	movs	r0, #3
 800888e:	f7fe fc63 	bl	8007158 <memp_free>
  while (seg != NULL) {
 8008892:	2e00      	cmp	r6, #0
 8008894:	d1f3      	bne.n	800887e <tcp_slowtmr+0x28e>
    pcb->ooseq = NULL;
 8008896:	9c05      	ldr	r4, [sp, #20]
 8008898:	6766      	str	r6, [r4, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800889a:	e70e      	b.n	80086ba <tcp_slowtmr+0xca>
 800889c:	24010558 	.word	0x24010558
 80088a0:	08010070 	.word	0x08010070
 80088a4:	24010548 	.word	0x24010548
 80088a8:	000a4cb8 	.word	0x000a4cb8
 80088ac:	10624dd3 	.word	0x10624dd3
 80088b0:	2401054c 	.word	0x2401054c
 80088b4:	0800ef30 	.word	0x0800ef30
 80088b8:	080103c0 	.word	0x080103c0
 80088bc:	08010338 	.word	0x08010338
 80088c0:	08010364 	.word	0x08010364
 80088c4:	08010390 	.word	0x08010390
 80088c8:	2401055d 	.word	0x2401055d
 80088cc:	24010560 	.word	0x24010560
 80088d0:	08010484 	.word	0x08010484
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 80088d4:	f9b4 2030 	ldrsh.w	r2, [r4, #48]	; 0x30
 80088d8:	f647 70fe 	movw	r0, #32766	; 0x7ffe
 80088dc:	b291      	uxth	r1, r2
 80088de:	4281      	cmp	r1, r0
 80088e0:	d802      	bhi.n	80088e8 <tcp_slowtmr+0x2f8>
          ++pcb->rtime;
 80088e2:	3101      	adds	r1, #1
 80088e4:	b20a      	sxth	r2, r1
 80088e6:	8622      	strh	r2, [r4, #48]	; 0x30
        if (pcb->rtime >= pcb->rto) {
 80088e8:	f9b4 1040 	ldrsh.w	r1, [r4, #64]	; 0x40
 80088ec:	4291      	cmp	r1, r2
 80088ee:	f73f aeb1 	bgt.w	8008654 <tcp_slowtmr+0x64>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 80088f2:	4620      	mov	r0, r4
 80088f4:	f003 f81c 	bl	800b930 <tcp_rexmit_rto_prepare>
 80088f8:	2800      	cmp	r0, #0
 80088fa:	f000 809e 	beq.w	8008a3a <tcp_slowtmr+0x44a>
 80088fe:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8008900:	2b00      	cmp	r3, #0
 8008902:	f000 8096 	beq.w	8008a32 <tcp_slowtmr+0x442>
    if (pcb->state == FIN_WAIT_2) {
 8008906:	7d23      	ldrb	r3, [r4, #20]
 8008908:	e6a4      	b.n	8008654 <tcp_slowtmr+0x64>
      tcp_pcb_purge(pcb);
 800890a:	4620      	mov	r0, r4
 800890c:	f7ff fe1e 	bl	800854c <tcp_pcb_purge>
      if (prev != NULL) {
 8008910:	2e00      	cmp	r6, #0
 8008912:	f000 80cc 	beq.w	8008aae <tcp_slowtmr+0x4be>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8008916:	f8d9 3000 	ldr.w	r3, [r9]
 800891a:	42a3      	cmp	r3, r4
 800891c:	f000 80e9 	beq.w	8008af2 <tcp_slowtmr+0x502>
        prev->next = pcb->next;
 8008920:	f8d4 b00c 	ldr.w	fp, [r4, #12]
 8008924:	f8c6 b00c 	str.w	fp, [r6, #12]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8008928:	7d23      	ldrb	r3, [r4, #20]
 800892a:	2b01      	cmp	r3, #1
 800892c:	f000 80d2 	beq.w	8008ad4 <tcp_slowtmr+0x4e4>
  memp_free(MEMP_TCP_PCB, pcb);
 8008930:	4621      	mov	r1, r4
      pcb = pcb->next;
 8008932:	465c      	mov	r4, fp
  memp_free(MEMP_TCP_PCB, pcb);
 8008934:	2001      	movs	r0, #1
 8008936:	f7fe fc0f 	bl	8007158 <memp_free>
  while (pcb != NULL) {
 800893a:	2c00      	cmp	r4, #0
 800893c:	f47f af01 	bne.w	8008742 <tcp_slowtmr+0x152>
 8008940:	e713      	b.n	800876a <tcp_slowtmr+0x17a>
          tcp_output(prev);
 8008942:	4620      	mov	r0, r4
 8008944:	46a1      	mov	r9, r4
      pcb = pcb->next;
 8008946:	4634      	mov	r4, r6
          tcp_output(prev);
 8008948:	f003 f930 	bl	800bbac <tcp_output>
  while (pcb != NULL) {
 800894c:	2c00      	cmp	r4, #0
 800894e:	f47f ae65 	bne.w	800861c <tcp_slowtmr+0x2c>
 8008952:	e6eb      	b.n	800872c <tcp_slowtmr+0x13c>
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8008954:	f894 309b 	ldrb.w	r3, [r4, #155]	; 0x9b
 8008958:	486e      	ldr	r0, [pc, #440]	; (8008b14 <tcp_slowtmr+0x524>)
 800895a:	fb00 1103 	mla	r1, r0, r3, r1
                 / TCP_SLOW_INTERVAL) {
 800895e:	4b6e      	ldr	r3, [pc, #440]	; (8008b18 <tcp_slowtmr+0x528>)
 8008960:	fba3 3101 	umull	r3, r1, r3, r1
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008964:	ebb2 1f51 	cmp.w	r2, r1, lsr #5
 8008968:	f67f af3a 	bls.w	80087e0 <tcp_slowtmr+0x1f0>
        err = tcp_keepalive(pcb);
 800896c:	4620      	mov	r0, r4
 800896e:	f003 fb4b 	bl	800c008 <tcp_keepalive>
        if (err == ERR_OK) {
 8008972:	2800      	cmp	r0, #0
 8008974:	f47f af34 	bne.w	80087e0 <tcp_slowtmr+0x1f0>
          pcb->keep_cnt_sent++;
 8008978:	f894 309b 	ldrb.w	r3, [r4, #155]	; 0x9b
    pcb_reset = 0;
 800897c:	4682      	mov	sl, r0
          pcb->keep_cnt_sent++;
 800897e:	3301      	adds	r3, #1
 8008980:	f884 309b 	strb.w	r3, [r4, #155]	; 0x9b
 8008984:	e68c      	b.n	80086a0 <tcp_slowtmr+0xb0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8008986:	8b23      	ldrh	r3, [r4, #24]
 8008988:	4620      	mov	r0, r4
 800898a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800898c:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800898e:	9302      	str	r3, [sp, #8]
 8008990:	8ae3      	ldrh	r3, [r4, #22]
 8008992:	9301      	str	r3, [sp, #4]
 8008994:	1d23      	adds	r3, r4, #4
 8008996:	9300      	str	r3, [sp, #0]
 8008998:	4623      	mov	r3, r4
 800899a:	f003 f88d 	bl	800bab8 <tcp_rst>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800899e:	7d23      	ldrb	r3, [r4, #20]
 80089a0:	2b01      	cmp	r3, #1
      pcb = pcb->next;
 80089a2:	e9d4 8a03 	ldrd	r8, sl, [r4, #12]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 80089a6:	f47f aead 	bne.w	8008704 <tcp_slowtmr+0x114>
 80089aa:	463b      	mov	r3, r7
 80089ac:	22d4      	movs	r2, #212	; 0xd4
 80089ae:	495b      	ldr	r1, [pc, #364]	; (8008b1c <tcp_slowtmr+0x52c>)
 80089b0:	485b      	ldr	r0, [pc, #364]	; (8008b20 <tcp_slowtmr+0x530>)
 80089b2:	f005 fb37 	bl	800e024 <iprintf>
 80089b6:	e6a5      	b.n	8008704 <tcp_slowtmr+0x114>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 80089b8:	f894 3099 	ldrb.w	r3, [r4, #153]	; 0x99
 80089bc:	4a59      	ldr	r2, [pc, #356]	; (8008b24 <tcp_slowtmr+0x534>)
 80089be:	441a      	add	r2, r3
          if (pcb->persist_cnt < backoff_cnt) {
 80089c0:	f894 3098 	ldrb.w	r3, [r4, #152]	; 0x98
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 80089c4:	f812 2c01 	ldrb.w	r2, [r2, #-1]
          if (pcb->persist_cnt < backoff_cnt) {
 80089c8:	4293      	cmp	r3, r2
 80089ca:	d216      	bcs.n	80089fa <tcp_slowtmr+0x40a>
            pcb->persist_cnt++;
 80089cc:	3301      	adds	r3, #1
 80089ce:	b2db      	uxtb	r3, r3
          if (pcb->persist_cnt >= backoff_cnt) {
 80089d0:	4293      	cmp	r3, r2
            pcb->persist_cnt++;
 80089d2:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 80089d6:	d210      	bcs.n	80089fa <tcp_slowtmr+0x40a>
    if (pcb->state == FIN_WAIT_2) {
 80089d8:	7d23      	ldrb	r3, [r4, #20]
    pcb_remove = 0;
 80089da:	f04f 0800 	mov.w	r8, #0
 80089de:	e639      	b.n	8008654 <tcp_slowtmr+0x64>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 80089e0:	42a3      	cmp	r3, r4
 80089e2:	d006      	beq.n	80089f2 <tcp_slowtmr+0x402>
 80089e4:	463b      	mov	r3, r7
 80089e6:	f240 5271 	movw	r2, #1393	; 0x571
 80089ea:	494f      	ldr	r1, [pc, #316]	; (8008b28 <tcp_slowtmr+0x538>)
 80089ec:	484c      	ldr	r0, [pc, #304]	; (8008b20 <tcp_slowtmr+0x530>)
 80089ee:	f005 fb19 	bl	800e024 <iprintf>
        tcp_active_pcbs = pcb->next;
 80089f2:	68e3      	ldr	r3, [r4, #12]
 80089f4:	4a4d      	ldr	r2, [pc, #308]	; (8008b2c <tcp_slowtmr+0x53c>)
 80089f6:	6013      	str	r3, [r2, #0]
 80089f8:	e67a      	b.n	80086f0 <tcp_slowtmr+0x100>
            if (pcb->snd_wnd == 0) {
 80089fa:	f8b4 6060 	ldrh.w	r6, [r4, #96]	; 0x60
 80089fe:	b936      	cbnz	r6, 8008a0e <tcp_slowtmr+0x41e>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8008a00:	4620      	mov	r0, r4
 8008a02:	f003 fb27 	bl	800c054 <tcp_zero_window_probe>
 8008a06:	b140      	cbz	r0, 8008a1a <tcp_slowtmr+0x42a>
    pcb_remove = 0;
 8008a08:	46b0      	mov	r8, r6
    if (pcb->state == FIN_WAIT_2) {
 8008a0a:	7d23      	ldrb	r3, [r4, #20]
 8008a0c:	e622      	b.n	8008654 <tcp_slowtmr+0x64>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8008a0e:	4631      	mov	r1, r6
 8008a10:	4620      	mov	r0, r4
 8008a12:	f002 fdd9 	bl	800b5c8 <tcp_split_unsent_seg>
 8008a16:	2800      	cmp	r0, #0
 8008a18:	d073      	beq.n	8008b02 <tcp_slowtmr+0x512>
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8008a1a:	f894 3099 	ldrb.w	r3, [r4, #153]	; 0x99
              pcb->persist_cnt = 0;
 8008a1e:	f04f 0800 	mov.w	r8, #0
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8008a22:	2b06      	cmp	r3, #6
              pcb->persist_cnt = 0;
 8008a24:	f884 8098 	strb.w	r8, [r4, #152]	; 0x98
                pcb->persist_backoff++;
 8008a28:	bf9c      	itt	ls
 8008a2a:	3301      	addls	r3, #1
 8008a2c:	f884 3099 	strbls.w	r3, [r4, #153]	; 0x99
 8008a30:	e769      	b.n	8008906 <tcp_slowtmr+0x316>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8008a32:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	f43f af66 	beq.w	8008906 <tcp_slowtmr+0x316>
            if (pcb->state != SYN_SENT) {
 8008a3a:	7d23      	ldrb	r3, [r4, #20]
 8008a3c:	2b02      	cmp	r3, #2
 8008a3e:	d014      	beq.n	8008a6a <tcp_slowtmr+0x47a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8008a40:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8008a44:	f9b4 103c 	ldrsh.w	r1, [r4, #60]	; 0x3c
 8008a48:	2a0c      	cmp	r2, #12
 8008a4a:	f9b4 303e 	ldrsh.w	r3, [r4, #62]	; 0x3e
 8008a4e:	bf28      	it	cs
 8008a50:	220c      	movcs	r2, #12
 8008a52:	eb03 03e1 	add.w	r3, r3, r1, asr #3
 8008a56:	4936      	ldr	r1, [pc, #216]	; (8008b30 <tcp_slowtmr+0x540>)
 8008a58:	5c8a      	ldrb	r2, [r1, r2]
 8008a5a:	4093      	lsls	r3, r2
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8008a5c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8008a60:	4293      	cmp	r3, r2
 8008a62:	bfa8      	it	ge
 8008a64:	4613      	movge	r3, r2
 8008a66:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8008a6a:	8e63      	ldrh	r3, [r4, #50]	; 0x32
            tcp_rexmit_rto_commit(pcb);
 8008a6c:	4620      	mov	r0, r4
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8008a6e:	f8b4 1048 	ldrh.w	r1, [r4, #72]	; 0x48
            pcb->cwnd = pcb->mss;
 8008a72:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8008a76:	005b      	lsls	r3, r3, #1
 8008a78:	b29a      	uxth	r2, r3
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8008a7a:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
            pcb->ssthresh = eff_wnd >> 1;
 8008a7e:	428b      	cmp	r3, r1
 8008a80:	bf28      	it	cs
 8008a82:	460b      	movcs	r3, r1
 8008a84:	085b      	lsrs	r3, r3, #1
 8008a86:	4293      	cmp	r3, r2
 8008a88:	bf38      	it	cc
 8008a8a:	4613      	movcc	r3, r2
 8008a8c:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
            pcb->rtime = 0;
 8008a90:	2300      	movs	r3, #0
 8008a92:	8623      	strh	r3, [r4, #48]	; 0x30
            pcb->bytes_acked = 0;
 8008a94:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
            tcp_rexmit_rto_commit(pcb);
 8008a98:	f003 fa6a 	bl	800bf70 <tcp_rexmit_rto_commit>
 8008a9c:	e733      	b.n	8008906 <tcp_slowtmr+0x316>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8008a9e:	463b      	mov	r3, r7
 8008aa0:	f240 526d 	movw	r2, #1389	; 0x56d
 8008aa4:	4923      	ldr	r1, [pc, #140]	; (8008b34 <tcp_slowtmr+0x544>)
 8008aa6:	481e      	ldr	r0, [pc, #120]	; (8008b20 <tcp_slowtmr+0x530>)
 8008aa8:	f005 fabc 	bl	800e024 <iprintf>
 8008aac:	e61d      	b.n	80086ea <tcp_slowtmr+0xfa>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8008aae:	f8d9 3000 	ldr.w	r3, [r9]
 8008ab2:	42a3      	cmp	r3, r4
 8008ab4:	d006      	beq.n	8008ac4 <tcp_slowtmr+0x4d4>
 8008ab6:	4643      	mov	r3, r8
 8008ab8:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8008abc:	491e      	ldr	r1, [pc, #120]	; (8008b38 <tcp_slowtmr+0x548>)
 8008abe:	4638      	mov	r0, r7
 8008ac0:	f005 fab0 	bl	800e024 <iprintf>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8008ac4:	7d23      	ldrb	r3, [r4, #20]
        tcp_tw_pcbs = pcb->next;
 8008ac6:	f8d4 b00c 	ldr.w	fp, [r4, #12]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8008aca:	2b01      	cmp	r3, #1
        tcp_tw_pcbs = pcb->next;
 8008acc:	f8c9 b000 	str.w	fp, [r9]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8008ad0:	f47f af2e 	bne.w	8008930 <tcp_slowtmr+0x340>
 8008ad4:	4643      	mov	r3, r8
 8008ad6:	22d4      	movs	r2, #212	; 0xd4
 8008ad8:	4910      	ldr	r1, [pc, #64]	; (8008b1c <tcp_slowtmr+0x52c>)
 8008ada:	4638      	mov	r0, r7
 8008adc:	f005 faa2 	bl	800e024 <iprintf>
 8008ae0:	e726      	b.n	8008930 <tcp_slowtmr+0x340>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8008ae2:	463b      	mov	r3, r7
 8008ae4:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8008ae8:	4914      	ldr	r1, [pc, #80]	; (8008b3c <tcp_slowtmr+0x54c>)
 8008aea:	480d      	ldr	r0, [pc, #52]	; (8008b20 <tcp_slowtmr+0x530>)
 8008aec:	f005 fa9a 	bl	800e024 <iprintf>
 8008af0:	e68b      	b.n	800880a <tcp_slowtmr+0x21a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8008af2:	4643      	mov	r3, r8
 8008af4:	f240 52af 	movw	r2, #1455	; 0x5af
 8008af8:	4911      	ldr	r1, [pc, #68]	; (8008b40 <tcp_slowtmr+0x550>)
 8008afa:	4638      	mov	r0, r7
 8008afc:	f005 fa92 	bl	800e024 <iprintf>
 8008b00:	e70e      	b.n	8008920 <tcp_slowtmr+0x330>
                if (tcp_output(pcb) == ERR_OK) {
 8008b02:	4620      	mov	r0, r4
 8008b04:	f003 f852 	bl	800bbac <tcp_output>
 8008b08:	2800      	cmp	r0, #0
 8008b0a:	d186      	bne.n	8008a1a <tcp_slowtmr+0x42a>
    pcb_remove = 0;
 8008b0c:	4680      	mov	r8, r0
    if (pcb->state == FIN_WAIT_2) {
 8008b0e:	7d23      	ldrb	r3, [r4, #20]
 8008b10:	e5a0      	b.n	8008654 <tcp_slowtmr+0x64>
 8008b12:	bf00      	nop
 8008b14:	000124f8 	.word	0x000124f8
 8008b18:	10624dd3 	.word	0x10624dd3
 8008b1c:	080100ac 	.word	0x080100ac
 8008b20:	0800ef30 	.word	0x0800ef30
 8008b24:	08010748 	.word	0x08010748
 8008b28:	08010458 	.word	0x08010458
 8008b2c:	24010548 	.word	0x24010548
 8008b30:	08010728 	.word	0x08010728
 8008b34:	0801042c 	.word	0x0801042c
 8008b38:	080104dc 	.word	0x080104dc
 8008b3c:	080103f4 	.word	0x080103f4
 8008b40:	080104b4 	.word	0x080104b4

08008b44 <tcp_pcb_remove>:
{
 8008b44:	b538      	push	{r3, r4, r5, lr}
 8008b46:	4605      	mov	r5, r0
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8008b48:	460c      	mov	r4, r1
 8008b4a:	2900      	cmp	r1, #0
 8008b4c:	d04a      	beq.n	8008be4 <tcp_pcb_remove+0xa0>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8008b4e:	2d00      	cmp	r5, #0
 8008b50:	d051      	beq.n	8008bf6 <tcp_pcb_remove+0xb2>
  TCP_RMV(pcblist, pcb);
 8008b52:	682b      	ldr	r3, [r5, #0]
 8008b54:	42a3      	cmp	r3, r4
 8008b56:	d032      	beq.n	8008bbe <tcp_pcb_remove+0x7a>
 8008b58:	b12b      	cbz	r3, 8008b66 <tcp_pcb_remove+0x22>
 8008b5a:	68da      	ldr	r2, [r3, #12]
 8008b5c:	42a2      	cmp	r2, r4
 8008b5e:	d03e      	beq.n	8008bde <tcp_pcb_remove+0x9a>
 8008b60:	4613      	mov	r3, r2
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d1f9      	bne.n	8008b5a <tcp_pcb_remove+0x16>
 8008b66:	2300      	movs	r3, #0
  tcp_pcb_purge(pcb);
 8008b68:	4620      	mov	r0, r4
  TCP_RMV(pcblist, pcb);
 8008b6a:	60e3      	str	r3, [r4, #12]
  tcp_pcb_purge(pcb);
 8008b6c:	f7ff fcee 	bl	800854c <tcp_pcb_purge>
  if ((pcb->state != TIME_WAIT) &&
 8008b70:	7d23      	ldrb	r3, [r4, #20]
 8008b72:	2b0a      	cmp	r3, #10
 8008b74:	d02d      	beq.n	8008bd2 <tcp_pcb_remove+0x8e>
 8008b76:	2b01      	cmp	r3, #1
 8008b78:	d01d      	beq.n	8008bb6 <tcp_pcb_remove+0x72>
      (pcb->flags & TF_ACK_DELAY)) {
 8008b7a:	8b63      	ldrh	r3, [r4, #26]
      (pcb->state != LISTEN) &&
 8008b7c:	07da      	lsls	r2, r3, #31
 8008b7e:	d421      	bmi.n	8008bc4 <tcp_pcb_remove+0x80>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8008b80:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8008b82:	b133      	cbz	r3, 8008b92 <tcp_pcb_remove+0x4e>
 8008b84:	4b20      	ldr	r3, [pc, #128]	; (8008c08 <tcp_pcb_remove+0xc4>)
 8008b86:	f640 0293 	movw	r2, #2195	; 0x893
 8008b8a:	4920      	ldr	r1, [pc, #128]	; (8008c0c <tcp_pcb_remove+0xc8>)
 8008b8c:	4820      	ldr	r0, [pc, #128]	; (8008c10 <tcp_pcb_remove+0xcc>)
 8008b8e:	f005 fa49 	bl	800e024 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8008b92:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8008b94:	b133      	cbz	r3, 8008ba4 <tcp_pcb_remove+0x60>
 8008b96:	4b1c      	ldr	r3, [pc, #112]	; (8008c08 <tcp_pcb_remove+0xc4>)
 8008b98:	f640 0294 	movw	r2, #2196	; 0x894
 8008b9c:	491d      	ldr	r1, [pc, #116]	; (8008c14 <tcp_pcb_remove+0xd0>)
 8008b9e:	481c      	ldr	r0, [pc, #112]	; (8008c10 <tcp_pcb_remove+0xcc>)
 8008ba0:	f005 fa40 	bl	800e024 <iprintf>
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8008ba4:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8008ba6:	b133      	cbz	r3, 8008bb6 <tcp_pcb_remove+0x72>
 8008ba8:	4b17      	ldr	r3, [pc, #92]	; (8008c08 <tcp_pcb_remove+0xc4>)
 8008baa:	f640 0296 	movw	r2, #2198	; 0x896
 8008bae:	491a      	ldr	r1, [pc, #104]	; (8008c18 <tcp_pcb_remove+0xd4>)
 8008bb0:	4817      	ldr	r0, [pc, #92]	; (8008c10 <tcp_pcb_remove+0xcc>)
 8008bb2:	f005 fa37 	bl	800e024 <iprintf>
  pcb->state = CLOSED;
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	7523      	strb	r3, [r4, #20]
  pcb->local_port = 0;
 8008bba:	82e3      	strh	r3, [r4, #22]
}
 8008bbc:	bd38      	pop	{r3, r4, r5, pc}
  TCP_RMV(pcblist, pcb);
 8008bbe:	68e3      	ldr	r3, [r4, #12]
 8008bc0:	602b      	str	r3, [r5, #0]
 8008bc2:	e7d0      	b.n	8008b66 <tcp_pcb_remove+0x22>
    tcp_ack_now(pcb);
 8008bc4:	f043 0302 	orr.w	r3, r3, #2
    tcp_output(pcb);
 8008bc8:	4620      	mov	r0, r4
    tcp_ack_now(pcb);
 8008bca:	8363      	strh	r3, [r4, #26]
    tcp_output(pcb);
 8008bcc:	f002 ffee 	bl	800bbac <tcp_output>
  if (pcb->state != LISTEN) {
 8008bd0:	7d23      	ldrb	r3, [r4, #20]
 8008bd2:	2b01      	cmp	r3, #1
 8008bd4:	d0ef      	beq.n	8008bb6 <tcp_pcb_remove+0x72>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8008bd6:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d1d3      	bne.n	8008b84 <tcp_pcb_remove+0x40>
 8008bdc:	e7d9      	b.n	8008b92 <tcp_pcb_remove+0x4e>
  TCP_RMV(pcblist, pcb);
 8008bde:	68e2      	ldr	r2, [r4, #12]
 8008be0:	60da      	str	r2, [r3, #12]
 8008be2:	e7c0      	b.n	8008b66 <tcp_pcb_remove+0x22>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8008be4:	4b08      	ldr	r3, [pc, #32]	; (8008c08 <tcp_pcb_remove+0xc4>)
 8008be6:	f640 0283 	movw	r2, #2179	; 0x883
 8008bea:	490c      	ldr	r1, [pc, #48]	; (8008c1c <tcp_pcb_remove+0xd8>)
 8008bec:	4808      	ldr	r0, [pc, #32]	; (8008c10 <tcp_pcb_remove+0xcc>)
 8008bee:	f005 fa19 	bl	800e024 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8008bf2:	2d00      	cmp	r5, #0
 8008bf4:	d1ad      	bne.n	8008b52 <tcp_pcb_remove+0xe>
 8008bf6:	4b04      	ldr	r3, [pc, #16]	; (8008c08 <tcp_pcb_remove+0xc4>)
 8008bf8:	f640 0284 	movw	r2, #2180	; 0x884
 8008bfc:	4908      	ldr	r1, [pc, #32]	; (8008c20 <tcp_pcb_remove+0xdc>)
 8008bfe:	4804      	ldr	r0, [pc, #16]	; (8008c10 <tcp_pcb_remove+0xcc>)
 8008c00:	f005 fa10 	bl	800e024 <iprintf>
 8008c04:	e7a5      	b.n	8008b52 <tcp_pcb_remove+0xe>
 8008c06:	bf00      	nop
 8008c08:	08010070 	.word	0x08010070
 8008c0c:	08010540 	.word	0x08010540
 8008c10:	0800ef30 	.word	0x0800ef30
 8008c14:	08010558 	.word	0x08010558
 8008c18:	08010574 	.word	0x08010574
 8008c1c:	08010504 	.word	0x08010504
 8008c20:	08010520 	.word	0x08010520

08008c24 <tcp_abandon>:
{
 8008c24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c28:	4605      	mov	r5, r0
 8008c2a:	b087      	sub	sp, #28
 8008c2c:	460e      	mov	r6, r1
  LWIP_ASSERT_CORE_LOCKED();
 8008c2e:	f7fb f983 	bl	8003f38 <sys_check_core_locking>
  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8008c32:	2d00      	cmp	r5, #0
 8008c34:	f000 80a8 	beq.w	8008d88 <tcp_abandon+0x164>
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8008c38:	7d2b      	ldrb	r3, [r5, #20]
 8008c3a:	2b01      	cmp	r3, #1
 8008c3c:	f000 808b 	beq.w	8008d56 <tcp_abandon+0x132>
  if (pcb->state == TIME_WAIT) {
 8008c40:	2b0a      	cmp	r3, #10
 8008c42:	f000 8093 	beq.w	8008d6c <tcp_abandon+0x148>
    seqno = pcb->snd_nxt;
 8008c46:	6d2a      	ldr	r2, [r5, #80]	; 0x50
    ackno = pcb->rcv_nxt;
 8008c48:	f8d5 b024 	ldr.w	fp, [r5, #36]	; 0x24
    errf = pcb->errf;
 8008c4c:	f8d5 8090 	ldr.w	r8, [r5, #144]	; 0x90
    errf_arg = pcb->callback_arg;
 8008c50:	f8d5 9010 	ldr.w	r9, [r5, #16]
    seqno = pcb->snd_nxt;
 8008c54:	9205      	str	r2, [sp, #20]
    if (pcb->state == CLOSED) {
 8008c56:	b96b      	cbnz	r3, 8008c74 <tcp_abandon+0x50>
      if (pcb->local_port != 0) {
 8008c58:	8aef      	ldrh	r7, [r5, #22]
 8008c5a:	2f00      	cmp	r7, #0
 8008c5c:	d052      	beq.n	8008d04 <tcp_abandon+0xe0>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8008c5e:	4a53      	ldr	r2, [pc, #332]	; (8008dac <tcp_abandon+0x188>)
 8008c60:	6813      	ldr	r3, [r2, #0]
 8008c62:	42ab      	cmp	r3, r5
 8008c64:	d074      	beq.n	8008d50 <tcp_abandon+0x12c>
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d050      	beq.n	8008d0c <tcp_abandon+0xe8>
 8008c6a:	68da      	ldr	r2, [r3, #12]
 8008c6c:	42aa      	cmp	r2, r5
 8008c6e:	d04b      	beq.n	8008d08 <tcp_abandon+0xe4>
 8008c70:	4613      	mov	r3, r2
 8008c72:	e7f8      	b.n	8008c66 <tcp_abandon+0x42>
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8008c74:	4629      	mov	r1, r5
 8008c76:	484e      	ldr	r0, [pc, #312]	; (8008db0 <tcp_abandon+0x18c>)
      local_port = pcb->local_port;
 8008c78:	8aef      	ldrh	r7, [r5, #22]
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8008c7a:	f7ff ff63 	bl	8008b44 <tcp_pcb_remove>
 8008c7e:	4b4d      	ldr	r3, [pc, #308]	; (8008db4 <tcp_abandon+0x190>)
 8008c80:	2201      	movs	r2, #1
 8008c82:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 8008c84:	6f2c      	ldr	r4, [r5, #112]	; 0x70
 8008c86:	b164      	cbz	r4, 8008ca2 <tcp_abandon+0x7e>
      pbuf_free(seg->p);
 8008c88:	46a2      	mov	sl, r4
    struct tcp_seg *next = seg->next;
 8008c8a:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 8008c8c:	f8da 0004 	ldr.w	r0, [sl, #4]
 8008c90:	b108      	cbz	r0, 8008c96 <tcp_abandon+0x72>
      pbuf_free(seg->p);
 8008c92:	f7fe fe27 	bl	80078e4 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 8008c96:	4651      	mov	r1, sl
 8008c98:	2003      	movs	r0, #3
 8008c9a:	f7fe fa5d 	bl	8007158 <memp_free>
  while (seg != NULL) {
 8008c9e:	2c00      	cmp	r4, #0
 8008ca0:	d1f2      	bne.n	8008c88 <tcp_abandon+0x64>
    if (pcb->unsent != NULL) {
 8008ca2:	6eec      	ldr	r4, [r5, #108]	; 0x6c
 8008ca4:	b164      	cbz	r4, 8008cc0 <tcp_abandon+0x9c>
      pbuf_free(seg->p);
 8008ca6:	46a2      	mov	sl, r4
    struct tcp_seg *next = seg->next;
 8008ca8:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 8008caa:	f8da 0004 	ldr.w	r0, [sl, #4]
 8008cae:	b108      	cbz	r0, 8008cb4 <tcp_abandon+0x90>
      pbuf_free(seg->p);
 8008cb0:	f7fe fe18 	bl	80078e4 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 8008cb4:	4651      	mov	r1, sl
 8008cb6:	2003      	movs	r0, #3
 8008cb8:	f7fe fa4e 	bl	8007158 <memp_free>
  while (seg != NULL) {
 8008cbc:	2c00      	cmp	r4, #0
 8008cbe:	d1f2      	bne.n	8008ca6 <tcp_abandon+0x82>
    if (pcb->ooseq != NULL) {
 8008cc0:	6f6c      	ldr	r4, [r5, #116]	; 0x74
 8008cc2:	b164      	cbz	r4, 8008cde <tcp_abandon+0xba>
      pbuf_free(seg->p);
 8008cc4:	46a2      	mov	sl, r4
    struct tcp_seg *next = seg->next;
 8008cc6:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 8008cc8:	f8da 0004 	ldr.w	r0, [sl, #4]
 8008ccc:	b108      	cbz	r0, 8008cd2 <tcp_abandon+0xae>
      pbuf_free(seg->p);
 8008cce:	f7fe fe09 	bl	80078e4 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 8008cd2:	4651      	mov	r1, sl
 8008cd4:	2003      	movs	r0, #3
 8008cd6:	f7fe fa3f 	bl	8007158 <memp_free>
  while (seg != NULL) {
 8008cda:	2c00      	cmp	r4, #0
 8008cdc:	d1f2      	bne.n	8008cc4 <tcp_abandon+0xa0>
    if (send_rst) {
 8008cde:	b9ce      	cbnz	r6, 8008d14 <tcp_abandon+0xf0>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8008ce0:	7d2b      	ldrb	r3, [r5, #20]
 8008ce2:	2b01      	cmp	r3, #1
 8008ce4:	d024      	beq.n	8008d30 <tcp_abandon+0x10c>
  memp_free(MEMP_TCP_PCB, pcb);
 8008ce6:	4629      	mov	r1, r5
 8008ce8:	2001      	movs	r0, #1
 8008cea:	f7fe fa35 	bl	8007158 <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8008cee:	f1b8 0f00 	cmp.w	r8, #0
 8008cf2:	d02a      	beq.n	8008d4a <tcp_abandon+0x126>
 8008cf4:	f06f 010c 	mvn.w	r1, #12
 8008cf8:	4648      	mov	r0, r9
 8008cfa:	4643      	mov	r3, r8
}
 8008cfc:	b007      	add	sp, #28
 8008cfe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8008d02:	4718      	bx	r3
    int send_rst = 0;
 8008d04:	461e      	mov	r6, r3
 8008d06:	e7bd      	b.n	8008c84 <tcp_abandon+0x60>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8008d08:	68ea      	ldr	r2, [r5, #12]
 8008d0a:	60da      	str	r2, [r3, #12]
 8008d0c:	2700      	movs	r7, #0
    int send_rst = 0;
 8008d0e:	463e      	mov	r6, r7
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8008d10:	60ef      	str	r7, [r5, #12]
 8008d12:	e7b7      	b.n	8008c84 <tcp_abandon+0x60>
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8008d14:	9701      	str	r7, [sp, #4]
 8008d16:	465a      	mov	r2, fp
 8008d18:	8b2b      	ldrh	r3, [r5, #24]
 8008d1a:	4628      	mov	r0, r5
 8008d1c:	9905      	ldr	r1, [sp, #20]
 8008d1e:	9302      	str	r3, [sp, #8]
 8008d20:	1d2b      	adds	r3, r5, #4
 8008d22:	9300      	str	r3, [sp, #0]
 8008d24:	462b      	mov	r3, r5
 8008d26:	f002 fec7 	bl	800bab8 <tcp_rst>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8008d2a:	7d2b      	ldrb	r3, [r5, #20]
 8008d2c:	2b01      	cmp	r3, #1
 8008d2e:	d1da      	bne.n	8008ce6 <tcp_abandon+0xc2>
 8008d30:	4921      	ldr	r1, [pc, #132]	; (8008db8 <tcp_abandon+0x194>)
 8008d32:	22d4      	movs	r2, #212	; 0xd4
 8008d34:	4b21      	ldr	r3, [pc, #132]	; (8008dbc <tcp_abandon+0x198>)
 8008d36:	4822      	ldr	r0, [pc, #136]	; (8008dc0 <tcp_abandon+0x19c>)
 8008d38:	f005 f974 	bl	800e024 <iprintf>
  memp_free(MEMP_TCP_PCB, pcb);
 8008d3c:	4629      	mov	r1, r5
 8008d3e:	2001      	movs	r0, #1
 8008d40:	f7fe fa0a 	bl	8007158 <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8008d44:	f1b8 0f00 	cmp.w	r8, #0
 8008d48:	d1d4      	bne.n	8008cf4 <tcp_abandon+0xd0>
}
 8008d4a:	b007      	add	sp, #28
 8008d4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8008d50:	68eb      	ldr	r3, [r5, #12]
 8008d52:	6013      	str	r3, [r2, #0]
 8008d54:	e7da      	b.n	8008d0c <tcp_abandon+0xe8>
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8008d56:	4b19      	ldr	r3, [pc, #100]	; (8008dbc <tcp_abandon+0x198>)
 8008d58:	f44f 7210 	mov.w	r2, #576	; 0x240
 8008d5c:	4919      	ldr	r1, [pc, #100]	; (8008dc4 <tcp_abandon+0x1a0>)
 8008d5e:	4818      	ldr	r0, [pc, #96]	; (8008dc0 <tcp_abandon+0x19c>)
 8008d60:	f005 f960 	bl	800e024 <iprintf>
  if (pcb->state == TIME_WAIT) {
 8008d64:	7d2b      	ldrb	r3, [r5, #20]
 8008d66:	2b0a      	cmp	r3, #10
 8008d68:	f47f af6d 	bne.w	8008c46 <tcp_abandon+0x22>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8008d6c:	4629      	mov	r1, r5
 8008d6e:	4816      	ldr	r0, [pc, #88]	; (8008dc8 <tcp_abandon+0x1a4>)
 8008d70:	f7ff fee8 	bl	8008b44 <tcp_pcb_remove>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8008d74:	7d2b      	ldrb	r3, [r5, #20]
 8008d76:	2b01      	cmp	r3, #1
 8008d78:	d010      	beq.n	8008d9c <tcp_abandon+0x178>
  memp_free(MEMP_TCP_PCB, pcb);
 8008d7a:	4629      	mov	r1, r5
 8008d7c:	2001      	movs	r0, #1
}
 8008d7e:	b007      	add	sp, #28
 8008d80:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  memp_free(MEMP_TCP_PCB, pcb);
 8008d84:	f7fe b9e8 	b.w	8007158 <memp_free>
  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8008d88:	4b0c      	ldr	r3, [pc, #48]	; (8008dbc <tcp_abandon+0x198>)
 8008d8a:	f240 223d 	movw	r2, #573	; 0x23d
 8008d8e:	490f      	ldr	r1, [pc, #60]	; (8008dcc <tcp_abandon+0x1a8>)
 8008d90:	480b      	ldr	r0, [pc, #44]	; (8008dc0 <tcp_abandon+0x19c>)
}
 8008d92:	b007      	add	sp, #28
 8008d94:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8008d98:	f005 b944 	b.w	800e024 <iprintf>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8008d9c:	4b07      	ldr	r3, [pc, #28]	; (8008dbc <tcp_abandon+0x198>)
 8008d9e:	22d4      	movs	r2, #212	; 0xd4
 8008da0:	4905      	ldr	r1, [pc, #20]	; (8008db8 <tcp_abandon+0x194>)
 8008da2:	4807      	ldr	r0, [pc, #28]	; (8008dc0 <tcp_abandon+0x19c>)
 8008da4:	f005 f93e 	bl	800e024 <iprintf>
 8008da8:	e7e7      	b.n	8008d7a <tcp_abandon+0x156>
 8008daa:	bf00      	nop
 8008dac:	24010550 	.word	0x24010550
 8008db0:	24010548 	.word	0x24010548
 8008db4:	2401054c 	.word	0x2401054c
 8008db8:	080100ac 	.word	0x080100ac
 8008dbc:	08010070 	.word	0x08010070
 8008dc0:	0800ef30 	.word	0x0800ef30
 8008dc4:	080105a8 	.word	0x080105a8
 8008dc8:	24010560 	.word	0x24010560
 8008dcc:	0801058c 	.word	0x0801058c

08008dd0 <tcp_abort>:
  tcp_abandon(pcb, 1);
 8008dd0:	2101      	movs	r1, #1
 8008dd2:	f7ff bf27 	b.w	8008c24 <tcp_abandon>
 8008dd6:	bf00      	nop

08008dd8 <tcp_accept_null>:
{
 8008dd8:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 8008dda:	460c      	mov	r4, r1
 8008ddc:	b131      	cbz	r1, 8008dec <tcp_accept_null+0x14>
  tcp_abandon(pcb, 1);
 8008dde:	4620      	mov	r0, r4
 8008de0:	2101      	movs	r1, #1
 8008de2:	f7ff ff1f 	bl	8008c24 <tcp_abandon>
}
 8008de6:	f06f 000c 	mvn.w	r0, #12
 8008dea:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 8008dec:	4b06      	ldr	r3, [pc, #24]	; (8008e08 <tcp_accept_null+0x30>)
 8008dee:	f240 320f 	movw	r2, #783	; 0x30f
 8008df2:	4906      	ldr	r1, [pc, #24]	; (8008e0c <tcp_accept_null+0x34>)
 8008df4:	4806      	ldr	r0, [pc, #24]	; (8008e10 <tcp_accept_null+0x38>)
 8008df6:	f005 f915 	bl	800e024 <iprintf>
  tcp_abandon(pcb, 1);
 8008dfa:	4620      	mov	r0, r4
 8008dfc:	2101      	movs	r1, #1
 8008dfe:	f7ff ff11 	bl	8008c24 <tcp_abandon>
}
 8008e02:	f06f 000c 	mvn.w	r0, #12
 8008e06:	bd10      	pop	{r4, pc}
 8008e08:	08010070 	.word	0x08010070
 8008e0c:	080105dc 	.word	0x080105dc
 8008e10:	0800ef30 	.word	0x0800ef30

08008e14 <tcp_netif_ip_addr_changed_pcblist>:
{
 8008e14:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8008e16:	4605      	mov	r5, r0
{
 8008e18:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8008e1a:	b178      	cbz	r0, 8008e3c <tcp_netif_ip_addr_changed_pcblist+0x28>
  while (pcb != NULL) {
 8008e1c:	b134      	cbz	r4, 8008e2c <tcp_netif_ip_addr_changed_pcblist+0x18>
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8008e1e:	6822      	ldr	r2, [r4, #0]
 8008e20:	682b      	ldr	r3, [r5, #0]
 8008e22:	429a      	cmp	r2, r3
 8008e24:	d003      	beq.n	8008e2e <tcp_netif_ip_addr_changed_pcblist+0x1a>
      pcb = pcb->next;
 8008e26:	68e4      	ldr	r4, [r4, #12]
  while (pcb != NULL) {
 8008e28:	2c00      	cmp	r4, #0
 8008e2a:	d1f8      	bne.n	8008e1e <tcp_netif_ip_addr_changed_pcblist+0xa>
}
 8008e2c:	bd38      	pop	{r3, r4, r5, pc}
      struct tcp_pcb *next = pcb->next;
 8008e2e:	68e3      	ldr	r3, [r4, #12]
  tcp_abandon(pcb, 1);
 8008e30:	4620      	mov	r0, r4
 8008e32:	2101      	movs	r1, #1
      pcb = next;
 8008e34:	461c      	mov	r4, r3
  tcp_abandon(pcb, 1);
 8008e36:	f7ff fef5 	bl	8008c24 <tcp_abandon>
      pcb = next;
 8008e3a:	e7ef      	b.n	8008e1c <tcp_netif_ip_addr_changed_pcblist+0x8>
  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8008e3c:	4b03      	ldr	r3, [pc, #12]	; (8008e4c <tcp_netif_ip_addr_changed_pcblist+0x38>)
 8008e3e:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8008e42:	4903      	ldr	r1, [pc, #12]	; (8008e50 <tcp_netif_ip_addr_changed_pcblist+0x3c>)
 8008e44:	4803      	ldr	r0, [pc, #12]	; (8008e54 <tcp_netif_ip_addr_changed_pcblist+0x40>)
 8008e46:	f005 f8ed 	bl	800e024 <iprintf>
 8008e4a:	e7e7      	b.n	8008e1c <tcp_netif_ip_addr_changed_pcblist+0x8>
 8008e4c:	08010070 	.word	0x08010070
 8008e50:	080105fc 	.word	0x080105fc
 8008e54:	0800ef30 	.word	0x0800ef30

08008e58 <tcp_kill_state>:
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008e58:	4b0f      	ldr	r3, [pc, #60]	; (8008e98 <tcp_kill_state+0x40>)
 8008e5a:	6819      	ldr	r1, [r3, #0]
 8008e5c:	b1d1      	cbz	r1, 8008e94 <tcp_kill_state+0x3c>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8008e5e:	4b0f      	ldr	r3, [pc, #60]	; (8008e9c <tcp_kill_state+0x44>)
  inactivity = 0;
 8008e60:	2200      	movs	r2, #0
{
 8008e62:	b430      	push	{r4, r5}
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8008e64:	681d      	ldr	r5, [r3, #0]
  inactive = NULL;
 8008e66:	4614      	mov	r4, r2
 8008e68:	e001      	b.n	8008e6e <tcp_kill_state+0x16>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008e6a:	68c9      	ldr	r1, [r1, #12]
 8008e6c:	b159      	cbz	r1, 8008e86 <tcp_kill_state+0x2e>
    if (pcb->state == state) {
 8008e6e:	7d0b      	ldrb	r3, [r1, #20]
 8008e70:	4283      	cmp	r3, r0
 8008e72:	d1fa      	bne.n	8008e6a <tcp_kill_state+0x12>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8008e74:	6a0b      	ldr	r3, [r1, #32]
 8008e76:	1aeb      	subs	r3, r5, r3
 8008e78:	4293      	cmp	r3, r2
 8008e7a:	d3f6      	bcc.n	8008e6a <tcp_kill_state+0x12>
 8008e7c:	460c      	mov	r4, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008e7e:	68c9      	ldr	r1, [r1, #12]
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8008e80:	461a      	mov	r2, r3
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008e82:	2900      	cmp	r1, #0
 8008e84:	d1f3      	bne.n	8008e6e <tcp_kill_state+0x16>
  if (inactive != NULL) {
 8008e86:	b11c      	cbz	r4, 8008e90 <tcp_kill_state+0x38>
    tcp_abandon(inactive, 0);
 8008e88:	4620      	mov	r0, r4
}
 8008e8a:	bc30      	pop	{r4, r5}
    tcp_abandon(inactive, 0);
 8008e8c:	f7ff beca 	b.w	8008c24 <tcp_abandon>
}
 8008e90:	bc30      	pop	{r4, r5}
 8008e92:	4770      	bx	lr
 8008e94:	4770      	bx	lr
 8008e96:	bf00      	nop
 8008e98:	24010548 	.word	0x24010548
 8008e9c:	24010558 	.word	0x24010558

08008ea0 <tcp_alloc>:
{
 8008ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ea2:	4605      	mov	r5, r0
  LWIP_ASSERT_CORE_LOCKED();
 8008ea4:	f7fb f848 	bl	8003f38 <sys_check_core_locking>
  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008ea8:	2001      	movs	r0, #1
 8008eaa:	f7fe f90f 	bl	80070cc <memp_malloc>
  if (pcb == NULL) {
 8008eae:	4603      	mov	r3, r0
 8008eb0:	b320      	cbz	r0, 8008efc <tcp_alloc+0x5c>
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8008eb2:	229c      	movs	r2, #156	; 0x9c
 8008eb4:	2100      	movs	r1, #0
 8008eb6:	4618      	mov	r0, r3
    pcb->snd_buf = TCP_SND_BUF;
 8008eb8:	f241 64d0 	movw	r4, #5840	; 0x16d0
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8008ebc:	f005 f917 	bl	800e0ee <memset>
    pcb->last_timer = tcp_timer_ctr;
 8008ec0:	4943      	ldr	r1, [pc, #268]	; (8008fd0 <tcp_alloc+0x130>)
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8008ec2:	4603      	mov	r3, r0
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8008ec4:	2206      	movs	r2, #6
    pcb->last_timer = tcp_timer_ctr;
 8008ec6:	7809      	ldrb	r1, [r1, #0]
    pcb->tmr = tcp_ticks;
 8008ec8:	4842      	ldr	r0, [pc, #264]	; (8008fd4 <tcp_alloc+0x134>)
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8008eca:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->tmr = tcp_ticks;
 8008ece:	6800      	ldr	r0, [r0, #0]
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8008ed0:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->last_timer = tcp_timer_ctr;
 8008ed2:	7799      	strb	r1, [r3, #30]
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8008ed4:	4a40      	ldr	r2, [pc, #256]	; (8008fd8 <tcp_alloc+0x138>)
    pcb->recv = tcp_recv_null;
 8008ed6:	4941      	ldr	r1, [pc, #260]	; (8008fdc <tcp_alloc+0x13c>)
    pcb->snd_buf = TCP_SND_BUF;
 8008ed8:	f8a3 4064 	strh.w	r4, [r3, #100]	; 0x64
    pcb->tmr = tcp_ticks;
 8008edc:	6218      	str	r0, [r3, #32]
    pcb->rtime = -1;
 8008ede:	4c40      	ldr	r4, [pc, #256]	; (8008fe0 <tcp_alloc+0x140>)
    pcb->cwnd = 1;
 8008ee0:	4840      	ldr	r0, [pc, #256]	; (8008fe4 <tcp_alloc+0x144>)
    pcb->recv = tcp_recv_null;
 8008ee2:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8008ee6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    pcb->ttl = TCP_TTL;
 8008eea:	22ff      	movs	r2, #255	; 0xff
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8008eec:	493e      	ldr	r1, [pc, #248]	; (8008fe8 <tcp_alloc+0x148>)
    pcb->cwnd = 1;
 8008eee:	6498      	str	r0, [r3, #72]	; 0x48
}
 8008ef0:	4618      	mov	r0, r3
    pcb->prio = prio;
 8008ef2:	755d      	strb	r5, [r3, #21]
    pcb->rtime = -1;
 8008ef4:	631c      	str	r4, [r3, #48]	; 0x30
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8008ef6:	6299      	str	r1, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8008ef8:	72da      	strb	r2, [r3, #11]
}
 8008efa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8008efc:	4e3b      	ldr	r6, [pc, #236]	; (8008fec <tcp_alloc+0x14c>)
 8008efe:	6834      	ldr	r4, [r6, #0]
  while (pcb != NULL) {
 8008f00:	b15c      	cbz	r4, 8008f1a <tcp_alloc+0x7a>
    struct tcp_pcb *next = pcb->next;
 8008f02:	4620      	mov	r0, r4
 8008f04:	68e4      	ldr	r4, [r4, #12]
    if (pcb->flags & TF_CLOSEPEND) {
 8008f06:	8b43      	ldrh	r3, [r0, #26]
 8008f08:	0719      	lsls	r1, r3, #28
 8008f0a:	d5f9      	bpl.n	8008f00 <tcp_alloc+0x60>
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8008f0c:	f023 0308 	bic.w	r3, r3, #8
 8008f10:	8343      	strh	r3, [r0, #26]
      tcp_close_shutdown_fin(pcb);
 8008f12:	f7fe ffc3 	bl	8007e9c <tcp_close_shutdown_fin>
  while (pcb != NULL) {
 8008f16:	2c00      	cmp	r4, #0
 8008f18:	d1f3      	bne.n	8008f02 <tcp_alloc+0x62>
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008f1a:	4b35      	ldr	r3, [pc, #212]	; (8008ff0 <tcp_alloc+0x150>)
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	b193      	cbz	r3, 8008f46 <tcp_alloc+0xa6>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8008f20:	4a2c      	ldr	r2, [pc, #176]	; (8008fd4 <tcp_alloc+0x134>)
 8008f22:	4618      	mov	r0, r3
 8008f24:	6a19      	ldr	r1, [r3, #32]
 8008f26:	6814      	ldr	r4, [r2, #0]
 8008f28:	1a61      	subs	r1, r4, r1
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008f2a:	68db      	ldr	r3, [r3, #12]
 8008f2c:	b143      	cbz	r3, 8008f40 <tcp_alloc+0xa0>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8008f2e:	6a1a      	ldr	r2, [r3, #32]
 8008f30:	1aa2      	subs	r2, r4, r2
 8008f32:	428a      	cmp	r2, r1
 8008f34:	d3f9      	bcc.n	8008f2a <tcp_alloc+0x8a>
 8008f36:	4618      	mov	r0, r3
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008f38:	68db      	ldr	r3, [r3, #12]
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8008f3a:	4611      	mov	r1, r2
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d1f6      	bne.n	8008f2e <tcp_alloc+0x8e>
  tcp_abandon(pcb, 1);
 8008f40:	2101      	movs	r1, #1
 8008f42:	f7ff fe6f 	bl	8008c24 <tcp_abandon>
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008f46:	2001      	movs	r0, #1
 8008f48:	f7fe f8c0 	bl	80070cc <memp_malloc>
    if (pcb == NULL) {
 8008f4c:	4603      	mov	r3, r0
 8008f4e:	2800      	cmp	r0, #0
 8008f50:	d1af      	bne.n	8008eb2 <tcp_alloc+0x12>
      tcp_kill_state(LAST_ACK);
 8008f52:	2009      	movs	r0, #9
 8008f54:	f7ff ff80 	bl	8008e58 <tcp_kill_state>
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008f58:	2001      	movs	r0, #1
 8008f5a:	f7fe f8b7 	bl	80070cc <memp_malloc>
      if (pcb == NULL) {
 8008f5e:	4603      	mov	r3, r0
 8008f60:	2800      	cmp	r0, #0
 8008f62:	d1a6      	bne.n	8008eb2 <tcp_alloc+0x12>
        tcp_kill_state(CLOSING);
 8008f64:	2008      	movs	r0, #8
 8008f66:	f7ff ff77 	bl	8008e58 <tcp_kill_state>
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008f6a:	2001      	movs	r0, #1
 8008f6c:	f7fe f8ae 	bl	80070cc <memp_malloc>
        if (pcb == NULL) {
 8008f70:	4603      	mov	r3, r0
 8008f72:	2800      	cmp	r0, #0
 8008f74:	d19d      	bne.n	8008eb2 <tcp_alloc+0x12>
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8008f76:	062a      	lsls	r2, r5, #24
 8008f78:	d427      	bmi.n	8008fca <tcp_alloc+0x12a>
  if (mprio == 0) {
 8008f7a:	b1ed      	cbz	r5, 8008fb8 <tcp_alloc+0x118>
 8008f7c:	462a      	mov	r2, r5
  mprio--;
 8008f7e:	1e51      	subs	r1, r2, #1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008f80:	6832      	ldr	r2, [r6, #0]
  mprio--;
 8008f82:	b2c9      	uxtb	r1, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008f84:	b1c2      	cbz	r2, 8008fb8 <tcp_alloc+0x118>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8008f86:	4813      	ldr	r0, [pc, #76]	; (8008fd4 <tcp_alloc+0x134>)
  inactivity = 0;
 8008f88:	2600      	movs	r6, #0
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8008f8a:	6807      	ldr	r7, [r0, #0]
 8008f8c:	e005      	b.n	8008f9a <tcp_alloc+0xfa>
 8008f8e:	6a14      	ldr	r4, [r2, #32]
      inactivity = tcp_ticks - pcb->tmr;
 8008f90:	1b3e      	subs	r6, r7, r4
    if ((pcb->prio < mprio) ||
 8008f92:	4601      	mov	r1, r0
      inactivity = tcp_ticks - pcb->tmr;
 8008f94:	4613      	mov	r3, r2
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008f96:	68d2      	ldr	r2, [r2, #12]
 8008f98:	b14a      	cbz	r2, 8008fae <tcp_alloc+0x10e>
    if ((pcb->prio < mprio) ||
 8008f9a:	7d50      	ldrb	r0, [r2, #21]
 8008f9c:	4288      	cmp	r0, r1
 8008f9e:	d3f6      	bcc.n	8008f8e <tcp_alloc+0xee>
 8008fa0:	d1f9      	bne.n	8008f96 <tcp_alloc+0xf6>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8008fa2:	6a14      	ldr	r4, [r2, #32]
 8008fa4:	eba7 0e04 	sub.w	lr, r7, r4
 8008fa8:	45b6      	cmp	lr, r6
 8008faa:	d3f4      	bcc.n	8008f96 <tcp_alloc+0xf6>
 8008fac:	e7f0      	b.n	8008f90 <tcp_alloc+0xf0>
  if (inactive != NULL) {
 8008fae:	b11b      	cbz	r3, 8008fb8 <tcp_alloc+0x118>
  tcp_abandon(pcb, 1);
 8008fb0:	2101      	movs	r1, #1
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	f7ff fe36 	bl	8008c24 <tcp_abandon>
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008fb8:	2001      	movs	r0, #1
 8008fba:	f7fe f887 	bl	80070cc <memp_malloc>
  if (pcb != NULL) {
 8008fbe:	4603      	mov	r3, r0
 8008fc0:	2800      	cmp	r0, #0
 8008fc2:	f47f af76 	bne.w	8008eb2 <tcp_alloc+0x12>
}
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8008fca:	227f      	movs	r2, #127	; 0x7f
 8008fcc:	e7d7      	b.n	8008f7e <tcp_alloc+0xde>
 8008fce:	bf00      	nop
 8008fd0:	2401055d 	.word	0x2401055d
 8008fd4:	24010558 	.word	0x24010558
 8008fd8:	006ddd00 	.word	0x006ddd00
 8008fdc:	080091e1 	.word	0x080091e1
 8008fe0:	0218ffff 	.word	0x0218ffff
 8008fe4:	16d00001 	.word	0x16d00001
 8008fe8:	16d016d0 	.word	0x16d016d0
 8008fec:	24010548 	.word	0x24010548
 8008ff0:	24010560 	.word	0x24010560

08008ff4 <tcp_new_ip_type>:
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 8008ff4:	2040      	movs	r0, #64	; 0x40
 8008ff6:	f7ff bf53 	b.w	8008ea0 <tcp_alloc>
 8008ffa:	bf00      	nop

08008ffc <tcp_close_shutdown>:
{
 8008ffc:	b530      	push	{r4, r5, lr}
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8008ffe:	4604      	mov	r4, r0
{
 8009000:	b085      	sub	sp, #20
 8009002:	460d      	mov	r5, r1
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8009004:	2800      	cmp	r0, #0
 8009006:	d06b      	beq.n	80090e0 <tcp_close_shutdown+0xe4>
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8009008:	7d23      	ldrb	r3, [r4, #20]
 800900a:	b11d      	cbz	r5, 8009014 <tcp_close_shutdown+0x18>
 800900c:	2b04      	cmp	r3, #4
 800900e:	d00c      	beq.n	800902a <tcp_close_shutdown+0x2e>
 8009010:	2b07      	cmp	r3, #7
 8009012:	d00a      	beq.n	800902a <tcp_close_shutdown+0x2e>
  switch (pcb->state) {
 8009014:	2b01      	cmp	r3, #1
 8009016:	d06b      	beq.n	80090f0 <tcp_close_shutdown+0xf4>
 8009018:	2b02      	cmp	r3, #2
 800901a:	d030      	beq.n	800907e <tcp_close_shutdown+0x82>
 800901c:	b333      	cbz	r3, 800906c <tcp_close_shutdown+0x70>
      return tcp_close_shutdown_fin(pcb);
 800901e:	4620      	mov	r0, r4
}
 8009020:	b005      	add	sp, #20
 8009022:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      return tcp_close_shutdown_fin(pcb);
 8009026:	f7fe bf39 	b.w	8007e9c <tcp_close_shutdown_fin>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800902a:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 800902c:	2a00      	cmp	r2, #0
 800902e:	d037      	beq.n	80090a0 <tcp_close_shutdown+0xa4>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8009030:	8b63      	ldrh	r3, [r4, #26]
 8009032:	06db      	lsls	r3, r3, #27
 8009034:	f140 8085 	bpl.w	8009142 <tcp_close_shutdown+0x146>
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8009038:	8b21      	ldrh	r1, [r4, #24]
 800903a:	1d20      	adds	r0, r4, #4
 800903c:	8ae2      	ldrh	r2, [r4, #22]
 800903e:	4623      	mov	r3, r4
 8009040:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8009044:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8009046:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8009048:	9000      	str	r0, [sp, #0]
 800904a:	4620      	mov	r0, r4
 800904c:	f002 fd34 	bl	800bab8 <tcp_rst>
      tcp_pcb_purge(pcb);
 8009050:	4620      	mov	r0, r4
 8009052:	f7ff fa7b 	bl	800854c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8009056:	4a45      	ldr	r2, [pc, #276]	; (800916c <tcp_close_shutdown+0x170>)
 8009058:	6813      	ldr	r3, [r2, #0]
 800905a:	42a3      	cmp	r3, r4
 800905c:	d031      	beq.n	80090c2 <tcp_close_shutdown+0xc6>
 800905e:	2b00      	cmp	r3, #0
 8009060:	d031      	beq.n	80090c6 <tcp_close_shutdown+0xca>
 8009062:	68da      	ldr	r2, [r3, #12]
 8009064:	42a2      	cmp	r2, r4
 8009066:	d069      	beq.n	800913c <tcp_close_shutdown+0x140>
 8009068:	4613      	mov	r3, r2
 800906a:	e7f8      	b.n	800905e <tcp_close_shutdown+0x62>
      if (pcb->local_port != 0) {
 800906c:	8ae3      	ldrh	r3, [r4, #22]
 800906e:	b9eb      	cbnz	r3, 80090ac <tcp_close_shutdown+0xb0>
  memp_free(MEMP_TCP_PCB, pcb);
 8009070:	4621      	mov	r1, r4
 8009072:	2001      	movs	r0, #1
 8009074:	f7fe f870 	bl	8007158 <memp_free>
}
 8009078:	2000      	movs	r0, #0
 800907a:	b005      	add	sp, #20
 800907c:	bd30      	pop	{r4, r5, pc}
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800907e:	4621      	mov	r1, r4
 8009080:	483a      	ldr	r0, [pc, #232]	; (800916c <tcp_close_shutdown+0x170>)
 8009082:	f7ff fd5f 	bl	8008b44 <tcp_pcb_remove>
 8009086:	2101      	movs	r1, #1
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8009088:	7d23      	ldrb	r3, [r4, #20]
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800908a:	4a39      	ldr	r2, [pc, #228]	; (8009170 <tcp_close_shutdown+0x174>)
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800908c:	428b      	cmp	r3, r1
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800908e:	7011      	strb	r1, [r2, #0]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8009090:	d1ee      	bne.n	8009070 <tcp_close_shutdown+0x74>
 8009092:	4b38      	ldr	r3, [pc, #224]	; (8009174 <tcp_close_shutdown+0x178>)
 8009094:	22d4      	movs	r2, #212	; 0xd4
 8009096:	4938      	ldr	r1, [pc, #224]	; (8009178 <tcp_close_shutdown+0x17c>)
 8009098:	4838      	ldr	r0, [pc, #224]	; (800917c <tcp_close_shutdown+0x180>)
 800909a:	f004 ffc3 	bl	800e024 <iprintf>
 800909e:	e7e7      	b.n	8009070 <tcp_close_shutdown+0x74>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 80090a0:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 80090a2:	f241 62d0 	movw	r2, #5840	; 0x16d0
 80090a6:	4291      	cmp	r1, r2
 80090a8:	d0b4      	beq.n	8009014 <tcp_close_shutdown+0x18>
 80090aa:	e7c1      	b.n	8009030 <tcp_close_shutdown+0x34>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80090ac:	4a34      	ldr	r2, [pc, #208]	; (8009180 <tcp_close_shutdown+0x184>)
 80090ae:	6813      	ldr	r3, [r2, #0]
 80090b0:	42a3      	cmp	r3, r4
 80090b2:	d051      	beq.n	8009158 <tcp_close_shutdown+0x15c>
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d03e      	beq.n	8009136 <tcp_close_shutdown+0x13a>
 80090b8:	68da      	ldr	r2, [r3, #12]
 80090ba:	42a2      	cmp	r2, r4
 80090bc:	d039      	beq.n	8009132 <tcp_close_shutdown+0x136>
 80090be:	4613      	mov	r3, r2
 80090c0:	e7f8      	b.n	80090b4 <tcp_close_shutdown+0xb8>
      TCP_RMV_ACTIVE(pcb);
 80090c2:	68e3      	ldr	r3, [r4, #12]
 80090c4:	6013      	str	r3, [r2, #0]
      if (tcp_input_pcb == pcb) {
 80090c6:	4b2f      	ldr	r3, [pc, #188]	; (8009184 <tcp_close_shutdown+0x188>)
      TCP_RMV_ACTIVE(pcb);
 80090c8:	2000      	movs	r0, #0
 80090ca:	4a29      	ldr	r2, [pc, #164]	; (8009170 <tcp_close_shutdown+0x174>)
 80090cc:	2101      	movs	r1, #1
      if (tcp_input_pcb == pcb) {
 80090ce:	681b      	ldr	r3, [r3, #0]
      TCP_RMV_ACTIVE(pcb);
 80090d0:	60e0      	str	r0, [r4, #12]
      if (tcp_input_pcb == pcb) {
 80090d2:	42a3      	cmp	r3, r4
      TCP_RMV_ACTIVE(pcb);
 80090d4:	7011      	strb	r1, [r2, #0]
      if (tcp_input_pcb == pcb) {
 80090d6:	d03c      	beq.n	8009152 <tcp_close_shutdown+0x156>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 80090d8:	7d23      	ldrb	r3, [r4, #20]
 80090da:	2b01      	cmp	r3, #1
 80090dc:	d1c8      	bne.n	8009070 <tcp_close_shutdown+0x74>
 80090de:	e7d8      	b.n	8009092 <tcp_close_shutdown+0x96>
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 80090e0:	4b24      	ldr	r3, [pc, #144]	; (8009174 <tcp_close_shutdown+0x178>)
 80090e2:	f44f 72af 	mov.w	r2, #350	; 0x15e
 80090e6:	4928      	ldr	r1, [pc, #160]	; (8009188 <tcp_close_shutdown+0x18c>)
 80090e8:	4824      	ldr	r0, [pc, #144]	; (800917c <tcp_close_shutdown+0x180>)
 80090ea:	f004 ff9b 	bl	800e024 <iprintf>
 80090ee:	e78b      	b.n	8009008 <tcp_close_shutdown+0xc>
 80090f0:	4926      	ldr	r1, [pc, #152]	; (800918c <tcp_close_shutdown+0x190>)
      pcb->listener = NULL;
 80090f2:	2000      	movs	r0, #0
  switch (pcb->state) {
 80090f4:	4b22      	ldr	r3, [pc, #136]	; (8009180 <tcp_close_shutdown+0x184>)
 80090f6:	f101 0508 	add.w	r5, r1, #8
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 80090fa:	681b      	ldr	r3, [r3, #0]
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80090fc:	b133      	cbz	r3, 800910c <tcp_close_shutdown+0x110>
    if (pcb->listener == lpcb) {
 80090fe:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8009100:	4294      	cmp	r4, r2
      pcb->listener = NULL;
 8009102:	bf08      	it	eq
 8009104:	67d8      	streq	r0, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8009106:	68db      	ldr	r3, [r3, #12]
 8009108:	2b00      	cmp	r3, #0
 800910a:	d1f8      	bne.n	80090fe <tcp_close_shutdown+0x102>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800910c:	42a9      	cmp	r1, r5
 800910e:	d002      	beq.n	8009116 <tcp_close_shutdown+0x11a>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8009110:	f851 3f04 	ldr.w	r3, [r1, #4]!
 8009114:	e7f1      	b.n	80090fa <tcp_close_shutdown+0xfe>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8009116:	4621      	mov	r1, r4
 8009118:	481d      	ldr	r0, [pc, #116]	; (8009190 <tcp_close_shutdown+0x194>)
 800911a:	f7ff fd13 	bl	8008b44 <tcp_pcb_remove>
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800911e:	7d23      	ldrb	r3, [r4, #20]
 8009120:	2b01      	cmp	r3, #1
 8009122:	d01c      	beq.n	800915e <tcp_close_shutdown+0x162>
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8009124:	4621      	mov	r1, r4
 8009126:	2002      	movs	r0, #2
 8009128:	f7fe f816 	bl	8007158 <memp_free>
}
 800912c:	2000      	movs	r0, #0
 800912e:	b005      	add	sp, #20
 8009130:	bd30      	pop	{r4, r5, pc}
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8009132:	68e2      	ldr	r2, [r4, #12]
 8009134:	60da      	str	r2, [r3, #12]
 8009136:	2300      	movs	r3, #0
 8009138:	60e3      	str	r3, [r4, #12]
 800913a:	e799      	b.n	8009070 <tcp_close_shutdown+0x74>
      TCP_RMV_ACTIVE(pcb);
 800913c:	68e2      	ldr	r2, [r4, #12]
 800913e:	60da      	str	r2, [r3, #12]
 8009140:	e7c1      	b.n	80090c6 <tcp_close_shutdown+0xca>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8009142:	4b0c      	ldr	r3, [pc, #48]	; (8009174 <tcp_close_shutdown+0x178>)
 8009144:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8009148:	4912      	ldr	r1, [pc, #72]	; (8009194 <tcp_close_shutdown+0x198>)
 800914a:	480c      	ldr	r0, [pc, #48]	; (800917c <tcp_close_shutdown+0x180>)
 800914c:	f004 ff6a 	bl	800e024 <iprintf>
 8009150:	e772      	b.n	8009038 <tcp_close_shutdown+0x3c>
        tcp_trigger_input_pcb_close();
 8009152:	f001 fd8b 	bl	800ac6c <tcp_trigger_input_pcb_close>
 8009156:	e78f      	b.n	8009078 <tcp_close_shutdown+0x7c>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8009158:	68e3      	ldr	r3, [r4, #12]
 800915a:	6013      	str	r3, [r2, #0]
 800915c:	e7eb      	b.n	8009136 <tcp_close_shutdown+0x13a>
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800915e:	4b05      	ldr	r3, [pc, #20]	; (8009174 <tcp_close_shutdown+0x178>)
 8009160:	22df      	movs	r2, #223	; 0xdf
 8009162:	490d      	ldr	r1, [pc, #52]	; (8009198 <tcp_close_shutdown+0x19c>)
 8009164:	4805      	ldr	r0, [pc, #20]	; (800917c <tcp_close_shutdown+0x180>)
 8009166:	f004 ff5d 	bl	800e024 <iprintf>
 800916a:	e7db      	b.n	8009124 <tcp_close_shutdown+0x128>
 800916c:	24010548 	.word	0x24010548
 8009170:	2401054c 	.word	0x2401054c
 8009174:	08010070 	.word	0x08010070
 8009178:	080100ac 	.word	0x080100ac
 800917c:	0800ef30 	.word	0x0800ef30
 8009180:	24010550 	.word	0x24010550
 8009184:	2401058c 	.word	0x2401058c
 8009188:	08010630 	.word	0x08010630
 800918c:	0801073c 	.word	0x0801073c
 8009190:	24010554 	.word	0x24010554
 8009194:	08010650 	.word	0x08010650
 8009198:	0801066c 	.word	0x0801066c

0800919c <tcp_close>:
{
 800919c:	b510      	push	{r4, lr}
 800919e:	4604      	mov	r4, r0
  LWIP_ASSERT_CORE_LOCKED();
 80091a0:	f7fa feca 	bl	8003f38 <sys_check_core_locking>
  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 80091a4:	b164      	cbz	r4, 80091c0 <tcp_close+0x24>
  if (pcb->state != LISTEN) {
 80091a6:	7d23      	ldrb	r3, [r4, #20]
 80091a8:	2b01      	cmp	r3, #1
 80091aa:	d003      	beq.n	80091b4 <tcp_close+0x18>
    tcp_set_flags(pcb, TF_RXCLOSED);
 80091ac:	8b63      	ldrh	r3, [r4, #26]
 80091ae:	f043 0310 	orr.w	r3, r3, #16
 80091b2:	8363      	strh	r3, [r4, #26]
  return tcp_close_shutdown(pcb, 1);
 80091b4:	4620      	mov	r0, r4
 80091b6:	2101      	movs	r1, #1
}
 80091b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return tcp_close_shutdown(pcb, 1);
 80091bc:	f7ff bf1e 	b.w	8008ffc <tcp_close_shutdown>
  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 80091c0:	4b04      	ldr	r3, [pc, #16]	; (80091d4 <tcp_close+0x38>)
 80091c2:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 80091c6:	4904      	ldr	r1, [pc, #16]	; (80091d8 <tcp_close+0x3c>)
 80091c8:	4804      	ldr	r0, [pc, #16]	; (80091dc <tcp_close+0x40>)
 80091ca:	f004 ff2b 	bl	800e024 <iprintf>
}
 80091ce:	f06f 000f 	mvn.w	r0, #15
 80091d2:	bd10      	pop	{r4, pc}
 80091d4:	08010070 	.word	0x08010070
 80091d8:	08010688 	.word	0x08010688
 80091dc:	0800ef30 	.word	0x0800ef30

080091e0 <tcp_recv_null>:
{
 80091e0:	b510      	push	{r4, lr}
 80091e2:	b082      	sub	sp, #8
  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 80091e4:	b301      	cbz	r1, 8009228 <tcp_recv_null+0x48>
  if (p != NULL) {
 80091e6:	4614      	mov	r4, r2
 80091e8:	4608      	mov	r0, r1
 80091ea:	b142      	cbz	r2, 80091fe <tcp_recv_null+0x1e>
    tcp_recved(pcb, p->tot_len);
 80091ec:	8911      	ldrh	r1, [r2, #8]
 80091ee:	f7fe ffe9 	bl	80081c4 <tcp_recved>
    pbuf_free(p);
 80091f2:	4620      	mov	r0, r4
 80091f4:	f7fe fb76 	bl	80078e4 <pbuf_free>
  return ERR_OK;
 80091f8:	2000      	movs	r0, #0
}
 80091fa:	b002      	add	sp, #8
 80091fc:	bd10      	pop	{r4, pc}
  } else if (err == ERR_OK) {
 80091fe:	b113      	cbz	r3, 8009206 <tcp_recv_null+0x26>
  return ERR_OK;
 8009200:	4610      	mov	r0, r2
}
 8009202:	b002      	add	sp, #8
 8009204:	bd10      	pop	{r4, pc}
 8009206:	9101      	str	r1, [sp, #4]
  LWIP_ASSERT_CORE_LOCKED();
 8009208:	f7fa fe96 	bl	8003f38 <sys_check_core_locking>
  if (pcb->state != LISTEN) {
 800920c:	9801      	ldr	r0, [sp, #4]
 800920e:	7d03      	ldrb	r3, [r0, #20]
 8009210:	2b01      	cmp	r3, #1
 8009212:	d003      	beq.n	800921c <tcp_recv_null+0x3c>
    tcp_set_flags(pcb, TF_RXCLOSED);
 8009214:	8b43      	ldrh	r3, [r0, #26]
 8009216:	f043 0310 	orr.w	r3, r3, #16
 800921a:	8343      	strh	r3, [r0, #26]
  return tcp_close_shutdown(pcb, 1);
 800921c:	2101      	movs	r1, #1
}
 800921e:	b002      	add	sp, #8
 8009220:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return tcp_close_shutdown(pcb, 1);
 8009224:	f7ff beea 	b.w	8008ffc <tcp_close_shutdown>
  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8009228:	4b04      	ldr	r3, [pc, #16]	; (800923c <tcp_recv_null+0x5c>)
 800922a:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800922e:	4904      	ldr	r1, [pc, #16]	; (8009240 <tcp_recv_null+0x60>)
 8009230:	4804      	ldr	r0, [pc, #16]	; (8009244 <tcp_recv_null+0x64>)
 8009232:	f004 fef7 	bl	800e024 <iprintf>
 8009236:	f06f 000f 	mvn.w	r0, #15
 800923a:	e7de      	b.n	80091fa <tcp_recv_null+0x1a>
 800923c:	08010070 	.word	0x08010070
 8009240:	080106a0 	.word	0x080106a0
 8009244:	0800ef30 	.word	0x0800ef30

08009248 <tcp_process_refused_data>:
{
 8009248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800924a:	b380      	cbz	r0, 80092ae <tcp_process_refused_data+0x66>
    u8_t refused_flags = pcb->refused_data->flags;
 800924c:	6f85      	ldr	r5, [r0, #120]	; 0x78
    pcb->refused_data = NULL;
 800924e:	2300      	movs	r3, #0
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8009250:	f8d0 6084 	ldr.w	r6, [r0, #132]	; 0x84
 8009254:	4604      	mov	r4, r0
    u8_t refused_flags = pcb->refused_data->flags;
 8009256:	7b6f      	ldrb	r7, [r5, #13]
    pcb->refused_data = NULL;
 8009258:	6783      	str	r3, [r0, #120]	; 0x78
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800925a:	b156      	cbz	r6, 8009272 <tcp_process_refused_data+0x2a>
 800925c:	4601      	mov	r1, r0
 800925e:	462a      	mov	r2, r5
 8009260:	6900      	ldr	r0, [r0, #16]
 8009262:	47b0      	blx	r6
    if (err == ERR_OK) {
 8009264:	b158      	cbz	r0, 800927e <tcp_process_refused_data+0x36>
    } else if (err == ERR_ABRT) {
 8009266:	300d      	adds	r0, #13
 8009268:	d01e      	beq.n	80092a8 <tcp_process_refused_data+0x60>
      return ERR_INPROGRESS;
 800926a:	f06f 0004 	mvn.w	r0, #4
      pcb->refused_data = refused_data;
 800926e:	67a5      	str	r5, [r4, #120]	; 0x78
}
 8009270:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tcp_recved(pcb, p->tot_len);
 8009272:	8929      	ldrh	r1, [r5, #8]
 8009274:	f7fe ffa6 	bl	80081c4 <tcp_recved>
    pbuf_free(p);
 8009278:	4628      	mov	r0, r5
 800927a:	f7fe fb33 	bl	80078e4 <pbuf_free>
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800927e:	06bb      	lsls	r3, r7, #26
 8009280:	d510      	bpl.n	80092a4 <tcp_process_refused_data+0x5c>
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8009282:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8009284:	f241 62d0 	movw	r2, #5840	; 0x16d0
 8009288:	4293      	cmp	r3, r2
 800928a:	d001      	beq.n	8009290 <tcp_process_refused_data+0x48>
          pcb->rcv_wnd++;
 800928c:	3301      	adds	r3, #1
 800928e:	8523      	strh	r3, [r4, #40]	; 0x28
        TCP_EVENT_CLOSED(pcb, err);
 8009290:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
 8009294:	b135      	cbz	r5, 80092a4 <tcp_process_refused_data+0x5c>
 8009296:	2300      	movs	r3, #0
 8009298:	4621      	mov	r1, r4
 800929a:	6920      	ldr	r0, [r4, #16]
 800929c:	461a      	mov	r2, r3
 800929e:	47a8      	blx	r5
        if (err == ERR_ABRT) {
 80092a0:	300d      	adds	r0, #13
 80092a2:	d001      	beq.n	80092a8 <tcp_process_refused_data+0x60>
  return ERR_OK;
 80092a4:	2000      	movs	r0, #0
}
 80092a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          return ERR_ABRT;
 80092a8:	f06f 000c 	mvn.w	r0, #12
}
 80092ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 80092ae:	4b05      	ldr	r3, [pc, #20]	; (80092c4 <tcp_process_refused_data+0x7c>)
 80092b0:	f240 6209 	movw	r2, #1545	; 0x609
 80092b4:	4904      	ldr	r1, [pc, #16]	; (80092c8 <tcp_process_refused_data+0x80>)
 80092b6:	4805      	ldr	r0, [pc, #20]	; (80092cc <tcp_process_refused_data+0x84>)
 80092b8:	f004 feb4 	bl	800e024 <iprintf>
 80092bc:	f06f 000f 	mvn.w	r0, #15
}
 80092c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80092c2:	bf00      	nop
 80092c4:	08010070 	.word	0x08010070
 80092c8:	080106bc 	.word	0x080106bc
 80092cc:	0800ef30 	.word	0x0800ef30

080092d0 <tcp_fasttmr>:
{
 80092d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  ++tcp_timer_ctr;
 80092d4:	4d1c      	ldr	r5, [pc, #112]	; (8009348 <tcp_fasttmr+0x78>)
        tcp_active_pcbs_changed = 0;
 80092d6:	2700      	movs	r7, #0
 80092d8:	f8df 8074 	ldr.w	r8, [pc, #116]	; 8009350 <tcp_fasttmr+0x80>
  ++tcp_timer_ctr;
 80092dc:	782b      	ldrb	r3, [r5, #0]
        tcp_active_pcbs_changed = 0;
 80092de:	4e1b      	ldr	r6, [pc, #108]	; (800934c <tcp_fasttmr+0x7c>)
  ++tcp_timer_ctr;
 80092e0:	3301      	adds	r3, #1
 80092e2:	702b      	strb	r3, [r5, #0]
  pcb = tcp_active_pcbs;
 80092e4:	f8d8 4000 	ldr.w	r4, [r8]
  while (pcb != NULL) {
 80092e8:	b1bc      	cbz	r4, 800931a <tcp_fasttmr+0x4a>
    if (pcb->last_timer != tcp_timer_ctr) {
 80092ea:	782a      	ldrb	r2, [r5, #0]
 80092ec:	7fa3      	ldrb	r3, [r4, #30]
 80092ee:	4293      	cmp	r3, r2
 80092f0:	d015      	beq.n	800931e <tcp_fasttmr+0x4e>
      if (pcb->flags & TF_ACK_DELAY) {
 80092f2:	8b63      	ldrh	r3, [r4, #26]
      pcb->last_timer = tcp_timer_ctr;
 80092f4:	77a2      	strb	r2, [r4, #30]
      if (pcb->flags & TF_ACK_DELAY) {
 80092f6:	07d9      	lsls	r1, r3, #31
 80092f8:	d41a      	bmi.n	8009330 <tcp_fasttmr+0x60>
      if (pcb->flags & TF_CLOSEPEND) {
 80092fa:	071a      	lsls	r2, r3, #28
 80092fc:	d411      	bmi.n	8009322 <tcp_fasttmr+0x52>
      if (pcb->refused_data != NULL) {
 80092fe:	6fa3      	ldr	r3, [r4, #120]	; 0x78
      next = pcb->next;
 8009300:	f8d4 900c 	ldr.w	r9, [r4, #12]
      if (pcb->refused_data != NULL) {
 8009304:	b133      	cbz	r3, 8009314 <tcp_fasttmr+0x44>
        tcp_process_refused_data(pcb);
 8009306:	4620      	mov	r0, r4
        tcp_active_pcbs_changed = 0;
 8009308:	7037      	strb	r7, [r6, #0]
        tcp_process_refused_data(pcb);
 800930a:	f7ff ff9d 	bl	8009248 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800930e:	7833      	ldrb	r3, [r6, #0]
 8009310:	2b00      	cmp	r3, #0
 8009312:	d1e7      	bne.n	80092e4 <tcp_fasttmr+0x14>
      pcb = next;
 8009314:	464c      	mov	r4, r9
  while (pcb != NULL) {
 8009316:	2c00      	cmp	r4, #0
 8009318:	d1e7      	bne.n	80092ea <tcp_fasttmr+0x1a>
}
 800931a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      pcb = pcb->next;
 800931e:	68e4      	ldr	r4, [r4, #12]
 8009320:	e7e2      	b.n	80092e8 <tcp_fasttmr+0x18>
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8009322:	f023 0308 	bic.w	r3, r3, #8
        tcp_close_shutdown_fin(pcb);
 8009326:	4620      	mov	r0, r4
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8009328:	8363      	strh	r3, [r4, #26]
        tcp_close_shutdown_fin(pcb);
 800932a:	f7fe fdb7 	bl	8007e9c <tcp_close_shutdown_fin>
 800932e:	e7e6      	b.n	80092fe <tcp_fasttmr+0x2e>
        tcp_ack_now(pcb);
 8009330:	f043 0302 	orr.w	r3, r3, #2
        tcp_output(pcb);
 8009334:	4620      	mov	r0, r4
        tcp_ack_now(pcb);
 8009336:	8363      	strh	r3, [r4, #26]
        tcp_output(pcb);
 8009338:	f002 fc38 	bl	800bbac <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800933c:	8b63      	ldrh	r3, [r4, #26]
 800933e:	f023 0303 	bic.w	r3, r3, #3
 8009342:	b29b      	uxth	r3, r3
 8009344:	8363      	strh	r3, [r4, #26]
 8009346:	e7d8      	b.n	80092fa <tcp_fasttmr+0x2a>
 8009348:	2401055d 	.word	0x2401055d
 800934c:	2401054c 	.word	0x2401054c
 8009350:	24010548 	.word	0x24010548

08009354 <tcp_tmr>:
{
 8009354:	b508      	push	{r3, lr}
  tcp_fasttmr();
 8009356:	f7ff ffbb 	bl	80092d0 <tcp_fasttmr>
  if (++tcp_timer & 1) {
 800935a:	4a06      	ldr	r2, [pc, #24]	; (8009374 <tcp_tmr+0x20>)
 800935c:	7813      	ldrb	r3, [r2, #0]
 800935e:	3301      	adds	r3, #1
 8009360:	b2db      	uxtb	r3, r3
 8009362:	7013      	strb	r3, [r2, #0]
 8009364:	07db      	lsls	r3, r3, #31
 8009366:	d400      	bmi.n	800936a <tcp_tmr+0x16>
}
 8009368:	bd08      	pop	{r3, pc}
 800936a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    tcp_slowtmr();
 800936e:	f7ff b93f 	b.w	80085f0 <tcp_slowtmr>
 8009372:	bf00      	nop
 8009374:	2401055c 	.word	0x2401055c

08009378 <tcp_next_iss>:
{
 8009378:	b508      	push	{r3, lr}
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800937a:	b130      	cbz	r0, 800938a <tcp_next_iss+0x12>
  iss += tcp_ticks;       /* XXX */
 800937c:	4b07      	ldr	r3, [pc, #28]	; (800939c <tcp_next_iss+0x24>)
 800937e:	4a08      	ldr	r2, [pc, #32]	; (80093a0 <tcp_next_iss+0x28>)
 8009380:	6818      	ldr	r0, [r3, #0]
 8009382:	6812      	ldr	r2, [r2, #0]
 8009384:	4410      	add	r0, r2
 8009386:	6018      	str	r0, [r3, #0]
}
 8009388:	bd08      	pop	{r3, pc}
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800938a:	4b06      	ldr	r3, [pc, #24]	; (80093a4 <tcp_next_iss+0x2c>)
 800938c:	f640 02af 	movw	r2, #2223	; 0x8af
 8009390:	4905      	ldr	r1, [pc, #20]	; (80093a8 <tcp_next_iss+0x30>)
 8009392:	4806      	ldr	r0, [pc, #24]	; (80093ac <tcp_next_iss+0x34>)
 8009394:	f004 fe46 	bl	800e024 <iprintf>
 8009398:	e7f0      	b.n	800937c <tcp_next_iss+0x4>
 800939a:	bf00      	nop
 800939c:	24000028 	.word	0x24000028
 80093a0:	24010558 	.word	0x24010558
 80093a4:	08010070 	.word	0x08010070
 80093a8:	080106e4 	.word	0x080106e4
 80093ac:	0800ef30 	.word	0x0800ef30

080093b0 <tcp_eff_send_mss_netif>:
{
 80093b0:	b538      	push	{r3, r4, r5, lr}
 80093b2:	4605      	mov	r5, r0
 80093b4:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 80093b6:	b172      	cbz	r2, 80093d6 <tcp_eff_send_mss_netif+0x26>
    if (outif == NULL) {
 80093b8:	b144      	cbz	r4, 80093cc <tcp_eff_send_mss_netif+0x1c>
    mtu = outif->mtu;
 80093ba:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
  if (mtu != 0) {
 80093bc:	b133      	cbz	r3, 80093cc <tcp_eff_send_mss_netif+0x1c>
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 80093be:	2b28      	cmp	r3, #40	; 0x28
 80093c0:	d906      	bls.n	80093d0 <tcp_eff_send_mss_netif+0x20>
 80093c2:	3b28      	subs	r3, #40	; 0x28
    sendmss = LWIP_MIN(sendmss, mss_s);
 80093c4:	b29b      	uxth	r3, r3
 80093c6:	429d      	cmp	r5, r3
 80093c8:	bf28      	it	cs
 80093ca:	461d      	movcs	r5, r3
}
 80093cc:	4628      	mov	r0, r5
 80093ce:	bd38      	pop	{r3, r4, r5, pc}
 80093d0:	2500      	movs	r5, #0
 80093d2:	4628      	mov	r0, r5
 80093d4:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 80093d6:	4b04      	ldr	r3, [pc, #16]	; (80093e8 <tcp_eff_send_mss_netif+0x38>)
 80093d8:	f640 02c5 	movw	r2, #2245	; 0x8c5
 80093dc:	4903      	ldr	r1, [pc, #12]	; (80093ec <tcp_eff_send_mss_netif+0x3c>)
 80093de:	4804      	ldr	r0, [pc, #16]	; (80093f0 <tcp_eff_send_mss_netif+0x40>)
 80093e0:	f004 fe20 	bl	800e024 <iprintf>
 80093e4:	e7e8      	b.n	80093b8 <tcp_eff_send_mss_netif+0x8>
 80093e6:	bf00      	nop
 80093e8:	08010070 	.word	0x08010070
 80093ec:	08010700 	.word	0x08010700
 80093f0:	0800ef30 	.word	0x0800ef30

080093f4 <tcp_netif_ip_addr_changed>:
  if (!ip_addr_isany(old_addr)) {
 80093f4:	b308      	cbz	r0, 800943a <tcp_netif_ip_addr_changed+0x46>
{
 80093f6:	b538      	push	{r3, r4, r5, lr}
  if (!ip_addr_isany(old_addr)) {
 80093f8:	6803      	ldr	r3, [r0, #0]
 80093fa:	4604      	mov	r4, r0
 80093fc:	b903      	cbnz	r3, 8009400 <tcp_netif_ip_addr_changed+0xc>
}
 80093fe:	bd38      	pop	{r3, r4, r5, pc}
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8009400:	4b0e      	ldr	r3, [pc, #56]	; (800943c <tcp_netif_ip_addr_changed+0x48>)
 8009402:	460d      	mov	r5, r1
 8009404:	6819      	ldr	r1, [r3, #0]
 8009406:	f7ff fd05 	bl	8008e14 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800940a:	4b0d      	ldr	r3, [pc, #52]	; (8009440 <tcp_netif_ip_addr_changed+0x4c>)
 800940c:	4620      	mov	r0, r4
 800940e:	6819      	ldr	r1, [r3, #0]
 8009410:	f7ff fd00 	bl	8008e14 <tcp_netif_ip_addr_changed_pcblist>
    if (!ip_addr_isany(new_addr)) {
 8009414:	2d00      	cmp	r5, #0
 8009416:	d0f2      	beq.n	80093fe <tcp_netif_ip_addr_changed+0xa>
 8009418:	682b      	ldr	r3, [r5, #0]
 800941a:	2b00      	cmp	r3, #0
 800941c:	d0ef      	beq.n	80093fe <tcp_netif_ip_addr_changed+0xa>
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800941e:	4b09      	ldr	r3, [pc, #36]	; (8009444 <tcp_netif_ip_addr_changed+0x50>)
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	2b00      	cmp	r3, #0
 8009424:	d0eb      	beq.n	80093fe <tcp_netif_ip_addr_changed+0xa>
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8009426:	6819      	ldr	r1, [r3, #0]
 8009428:	6822      	ldr	r2, [r4, #0]
 800942a:	4291      	cmp	r1, r2
 800942c:	d101      	bne.n	8009432 <tcp_netif_ip_addr_changed+0x3e>
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800942e:	682a      	ldr	r2, [r5, #0]
 8009430:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8009432:	68db      	ldr	r3, [r3, #12]
 8009434:	2b00      	cmp	r3, #0
 8009436:	d1f6      	bne.n	8009426 <tcp_netif_ip_addr_changed+0x32>
}
 8009438:	bd38      	pop	{r3, r4, r5, pc}
 800943a:	4770      	bx	lr
 800943c:	24010548 	.word	0x24010548
 8009440:	24010550 	.word	0x24010550
 8009444:	24010554 	.word	0x24010554

08009448 <tcp_free_ooseq>:
{
 8009448:	b570      	push	{r4, r5, r6, lr}
  if (pcb->ooseq) {
 800944a:	6f44      	ldr	r4, [r0, #116]	; 0x74
 800944c:	b16c      	cbz	r4, 800946a <tcp_free_ooseq+0x22>
 800944e:	4606      	mov	r6, r0
      pbuf_free(seg->p);
 8009450:	4625      	mov	r5, r4
    struct tcp_seg *next = seg->next;
 8009452:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 8009454:	6868      	ldr	r0, [r5, #4]
 8009456:	b108      	cbz	r0, 800945c <tcp_free_ooseq+0x14>
      pbuf_free(seg->p);
 8009458:	f7fe fa44 	bl	80078e4 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 800945c:	4629      	mov	r1, r5
 800945e:	2003      	movs	r0, #3
 8009460:	f7fd fe7a 	bl	8007158 <memp_free>
  while (seg != NULL) {
 8009464:	2c00      	cmp	r4, #0
 8009466:	d1f3      	bne.n	8009450 <tcp_free_ooseq+0x8>
    pcb->ooseq = NULL;
 8009468:	6774      	str	r4, [r6, #116]	; 0x74
}
 800946a:	bd70      	pop	{r4, r5, r6, pc}

0800946c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800946c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800946e:	4605      	mov	r5, r0
{
 8009470:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8009472:	2800      	cmp	r0, #0
 8009474:	d03e      	beq.n	80094f4 <tcp_oos_insert_segment+0x88>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8009476:	68eb      	ldr	r3, [r5, #12]
 8009478:	8998      	ldrh	r0, [r3, #12]
 800947a:	f7fd fa91 	bl	80069a0 <lwip_htons>
 800947e:	07c2      	lsls	r2, r0, #31
 8009480:	d432      	bmi.n	80094e8 <tcp_oos_insert_segment+0x7c>
 8009482:	4e20      	ldr	r6, [pc, #128]	; (8009504 <tcp_oos_insert_segment+0x98>)
 8009484:	e005      	b.n	8009492 <tcp_oos_insert_segment+0x26>
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
      }
      old_seg = next;
      next = next->next;
 8009486:	6827      	ldr	r7, [r4, #0]
      tcp_seg_free(old_seg);
 8009488:	4620      	mov	r0, r4
 800948a:	f7fe ffa1 	bl	80083d0 <tcp_seg_free>
    while (next &&
 800948e:	463c      	mov	r4, r7
 8009490:	b1ef      	cbz	r7, 80094ce <tcp_oos_insert_segment+0x62>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8009492:	68e1      	ldr	r1, [r4, #12]
 8009494:	8923      	ldrh	r3, [r4, #8]
 8009496:	6837      	ldr	r7, [r6, #0]
 8009498:	892a      	ldrh	r2, [r5, #8]
 800949a:	6848      	ldr	r0, [r1, #4]
 800949c:	443a      	add	r2, r7
 800949e:	4403      	add	r3, r0
 80094a0:	1ad3      	subs	r3, r2, r3
    while (next &&
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	db15      	blt.n	80094d2 <tcp_oos_insert_segment+0x66>
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80094a6:	8988      	ldrh	r0, [r1, #12]
 80094a8:	f7fd fa7a 	bl	80069a0 <lwip_htons>
 80094ac:	07c3      	lsls	r3, r0, #31
 80094ae:	d5ea      	bpl.n	8009486 <tcp_oos_insert_segment+0x1a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80094b0:	68eb      	ldr	r3, [r5, #12]
 80094b2:	2001      	movs	r0, #1
 80094b4:	899f      	ldrh	r7, [r3, #12]
 80094b6:	f7fd fa73 	bl	80069a0 <lwip_htons>
 80094ba:	68eb      	ldr	r3, [r5, #12]
 80094bc:	4338      	orrs	r0, r7
      next = next->next;
 80094be:	6827      	ldr	r7, [r4, #0]
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80094c0:	8198      	strh	r0, [r3, #12]
      tcp_seg_free(old_seg);
 80094c2:	4620      	mov	r0, r4
 80094c4:	f7fe ff84 	bl	80083d0 <tcp_seg_free>
    while (next &&
 80094c8:	463c      	mov	r4, r7
 80094ca:	2f00      	cmp	r7, #0
 80094cc:	d1e1      	bne.n	8009492 <tcp_oos_insert_segment+0x26>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
      pbuf_realloc(cseg->p, cseg->len);
    }
  }
  cseg->next = next;
 80094ce:	602c      	str	r4, [r5, #0]
}
 80094d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 80094d2:	1a12      	subs	r2, r2, r0
    if (next &&
 80094d4:	2a00      	cmp	r2, #0
 80094d6:	ddfa      	ble.n	80094ce <tcp_oos_insert_segment+0x62>
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 80094d8:	1bc1      	subs	r1, r0, r7
      pbuf_realloc(cseg->p, cseg->len);
 80094da:	6868      	ldr	r0, [r5, #4]
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 80094dc:	b289      	uxth	r1, r1
 80094de:	8129      	strh	r1, [r5, #8]
      pbuf_realloc(cseg->p, cseg->len);
 80094e0:	f7fe fb1e 	bl	8007b20 <pbuf_realloc>
  cseg->next = next;
 80094e4:	602c      	str	r4, [r5, #0]
}
 80094e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tcp_segs_free(next);
 80094e8:	4620      	mov	r0, r4
    next = NULL;
 80094ea:	2400      	movs	r4, #0
    tcp_segs_free(next);
 80094ec:	f7fe ff5e 	bl	80083ac <tcp_segs_free>
  cseg->next = next;
 80094f0:	602c      	str	r4, [r5, #0]
}
 80094f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 80094f4:	4b04      	ldr	r3, [pc, #16]	; (8009508 <tcp_oos_insert_segment+0x9c>)
 80094f6:	f240 421f 	movw	r2, #1055	; 0x41f
 80094fa:	4904      	ldr	r1, [pc, #16]	; (800950c <tcp_oos_insert_segment+0xa0>)
 80094fc:	4804      	ldr	r0, [pc, #16]	; (8009510 <tcp_oos_insert_segment+0xa4>)
 80094fe:	f004 fd91 	bl	800e024 <iprintf>
 8009502:	e7b8      	b.n	8009476 <tcp_oos_insert_segment+0xa>
 8009504:	24010588 	.word	0x24010588
 8009508:	08010750 	.word	0x08010750
 800950c:	08010784 	.word	0x08010784
 8009510:	0800ef30 	.word	0x0800ef30

08009514 <tcp_input_delayed_close>:
{
 8009514:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8009516:	4604      	mov	r4, r0
 8009518:	b1c8      	cbz	r0, 800954e <tcp_input_delayed_close+0x3a>
  if (recv_flags & TF_CLOSED) {
 800951a:	4b11      	ldr	r3, [pc, #68]	; (8009560 <tcp_input_delayed_close+0x4c>)
 800951c:	781b      	ldrb	r3, [r3, #0]
 800951e:	f013 0310 	ands.w	r3, r3, #16
 8009522:	d101      	bne.n	8009528 <tcp_input_delayed_close+0x14>
  return 0;
 8009524:	4618      	mov	r0, r3
}
 8009526:	bd10      	pop	{r4, pc}
    if (!(pcb->flags & TF_RXCLOSED)) {
 8009528:	8b63      	ldrh	r3, [r4, #26]
 800952a:	06db      	lsls	r3, r3, #27
 800952c:	d406      	bmi.n	800953c <tcp_input_delayed_close+0x28>
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800952e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8009532:	b11b      	cbz	r3, 800953c <tcp_input_delayed_close+0x28>
 8009534:	f06f 010e 	mvn.w	r1, #14
 8009538:	6920      	ldr	r0, [r4, #16]
 800953a:	4798      	blx	r3
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800953c:	4621      	mov	r1, r4
 800953e:	4809      	ldr	r0, [pc, #36]	; (8009564 <tcp_input_delayed_close+0x50>)
 8009540:	f7ff fb00 	bl	8008b44 <tcp_pcb_remove>
    tcp_free(pcb);
 8009544:	4620      	mov	r0, r4
 8009546:	f7fe fce9 	bl	8007f1c <tcp_free>
 800954a:	2001      	movs	r0, #1
}
 800954c:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800954e:	4b06      	ldr	r3, [pc, #24]	; (8009568 <tcp_input_delayed_close+0x54>)
 8009550:	f240 225a 	movw	r2, #602	; 0x25a
 8009554:	4905      	ldr	r1, [pc, #20]	; (800956c <tcp_input_delayed_close+0x58>)
 8009556:	4806      	ldr	r0, [pc, #24]	; (8009570 <tcp_input_delayed_close+0x5c>)
 8009558:	f004 fd64 	bl	800e024 <iprintf>
 800955c:	e7dd      	b.n	800951a <tcp_input_delayed_close+0x6>
 800955e:	bf00      	nop
 8009560:	24010584 	.word	0x24010584
 8009564:	24010548 	.word	0x24010548
 8009568:	08010750 	.word	0x08010750
 800956c:	080107ac 	.word	0x080107ac
 8009570:	0800ef30 	.word	0x0800ef30

08009574 <tcp_free_acked_segments.constprop.0>:
#endif /* TCP_QUEUE_OOSEQ */

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
 8009574:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009578:	b083      	sub	sp, #12
 800957a:	9201      	str	r2, [sp, #4]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800957c:	2900      	cmp	r1, #0
 800957e:	d03d      	beq.n	80095fc <tcp_free_acked_segments.constprop.0+0x88>
 8009580:	4607      	mov	r7, r0
 8009582:	460c      	mov	r4, r1
 8009584:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8009648 <tcp_free_acked_segments.constprop.0+0xd4>
    seg_list = seg_list->next;

    clen = pbuf_clen(next->p);
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8009588:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 800963c <tcp_free_acked_segments.constprop.0+0xc8>
 800958c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800964c <tcp_free_acked_segments.constprop.0+0xd8>
 8009590:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8009644 <tcp_free_acked_segments.constprop.0+0xd0>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8009594:	68e3      	ldr	r3, [r4, #12]
 8009596:	6858      	ldr	r0, [r3, #4]
 8009598:	f7fd fa06 	bl	80069a8 <lwip_htonl>
 800959c:	68e3      	ldr	r3, [r4, #12]
 800959e:	4605      	mov	r5, r0
 80095a0:	8926      	ldrh	r6, [r4, #8]
 80095a2:	8998      	ldrh	r0, [r3, #12]
 80095a4:	f7fd f9fc 	bl	80069a0 <lwip_htons>
 80095a8:	f8d8 3000 	ldr.w	r3, [r8]
 80095ac:	f010 0003 	ands.w	r0, r0, #3
 80095b0:	eba5 0503 	sub.w	r5, r5, r3
 80095b4:	bf18      	it	ne
 80095b6:	2001      	movne	r0, #1
 80095b8:	4435      	add	r5, r6
 80095ba:	4405      	add	r5, r0
  while (seg_list != NULL &&
 80095bc:	2d00      	cmp	r5, #0
 80095be:	dc36      	bgt.n	800962e <tcp_free_acked_segments.constprop.0+0xba>
    seg_list = seg_list->next;
 80095c0:	e9d4 6000 	ldrd	r6, r0, [r4]
    clen = pbuf_clen(next->p);
 80095c4:	f7fe fb04 	bl	8007bd0 <pbuf_clen>
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80095c8:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
    clen = pbuf_clen(next->p);
 80095cc:	4605      	mov	r5, r0
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80095ce:	4298      	cmp	r0, r3
 80095d0:	d823      	bhi.n	800961a <tcp_free_acked_segments.constprop.0+0xa6>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 80095d2:	4919      	ldr	r1, [pc, #100]	; (8009638 <tcp_free_acked_segments.constprop.0+0xc4>)
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 80095d4:	1b5b      	subs	r3, r3, r5
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 80095d6:	8922      	ldrh	r2, [r4, #8]
    tcp_seg_free(next);
 80095d8:	4620      	mov	r0, r4
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 80095da:	880d      	ldrh	r5, [r1, #0]
 80095dc:	4634      	mov	r4, r6
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 80095de:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 80095e2:	1953      	adds	r3, r2, r5
 80095e4:	800b      	strh	r3, [r1, #0]
    tcp_seg_free(next);
 80095e6:	f7fe fef3 	bl	80083d0 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 80095ea:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80095ee:	b11b      	cbz	r3, 80095f8 <tcp_free_acked_segments.constprop.0+0x84>
      LWIP_ASSERT("tcp_receive: valid queue length",
 80095f0:	9b01      	ldr	r3, [sp, #4]
 80095f2:	ea53 0506 	orrs.w	r5, r3, r6
 80095f6:	d005      	beq.n	8009604 <tcp_free_acked_segments.constprop.0+0x90>
  while (seg_list != NULL &&
 80095f8:	2e00      	cmp	r6, #0
 80095fa:	d1cb      	bne.n	8009594 <tcp_free_acked_segments.constprop.0+0x20>
 80095fc:	2000      	movs	r0, #0
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
}
 80095fe:	b003      	add	sp, #12
 8009600:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      LWIP_ASSERT("tcp_receive: valid queue length",
 8009604:	4b0d      	ldr	r3, [pc, #52]	; (800963c <tcp_free_acked_segments.constprop.0+0xc8>)
 8009606:	f240 4261 	movw	r2, #1121	; 0x461
 800960a:	490d      	ldr	r1, [pc, #52]	; (8009640 <tcp_free_acked_segments.constprop.0+0xcc>)
 800960c:	480d      	ldr	r0, [pc, #52]	; (8009644 <tcp_free_acked_segments.constprop.0+0xd0>)
 800960e:	f004 fd09 	bl	800e024 <iprintf>
 8009612:	4628      	mov	r0, r5
}
 8009614:	b003      	add	sp, #12
 8009616:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800961a:	465b      	mov	r3, fp
 800961c:	f240 4257 	movw	r2, #1111	; 0x457
 8009620:	4651      	mov	r1, sl
 8009622:	4648      	mov	r0, r9
 8009624:	f004 fcfe 	bl	800e024 <iprintf>
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8009628:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800962c:	e7d1      	b.n	80095d2 <tcp_free_acked_segments.constprop.0+0x5e>
 800962e:	4620      	mov	r0, r4
}
 8009630:	b003      	add	sp, #12
 8009632:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009636:	bf00      	nop
 8009638:	2401057c 	.word	0x2401057c
 800963c:	08010750 	.word	0x08010750
 8009640:	080107fc 	.word	0x080107fc
 8009644:	0800ef30 	.word	0x0800ef30
 8009648:	24010564 	.word	0x24010564
 800964c:	080107d4 	.word	0x080107d4

08009650 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8009650:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8009654:	4604      	mov	r4, r0
 8009656:	2800      	cmp	r0, #0
 8009658:	f000 81e2 	beq.w	8009a20 <tcp_receive+0x3d0>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800965c:	7d23      	ldrb	r3, [r4, #20]
 800965e:	2b03      	cmp	r3, #3
 8009660:	f240 80f5 	bls.w	800984e <tcp_receive+0x1fe>

  if (flags & TCP_ACK) {
 8009664:	4baf      	ldr	r3, [pc, #700]	; (8009924 <tcp_receive+0x2d4>)
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8009666:	4eb0      	ldr	r6, [pc, #704]	; (8009928 <tcp_receive+0x2d8>)
  if (flags & TCP_ACK) {
 8009668:	781b      	ldrb	r3, [r3, #0]
 800966a:	06d8      	lsls	r0, r3, #27
 800966c:	d470      	bmi.n	8009750 <tcp_receive+0x100>
 800966e:	4faf      	ldr	r7, [pc, #700]	; (800992c <tcp_receive+0x2dc>)

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8009670:	883b      	ldrh	r3, [r7, #0]
 8009672:	b113      	cbz	r3, 800967a <tcp_receive+0x2a>
 8009674:	7d22      	ldrb	r2, [r4, #20]
 8009676:	2a06      	cmp	r2, #6
 8009678:	d911      	bls.n	800969e <tcp_receive+0x4e>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800967a:	6832      	ldr	r2, [r6, #0]
      tcp_send_empty_ack(pcb);
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800967c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800967e:	1ad1      	subs	r1, r2, r3
 8009680:	2900      	cmp	r1, #0
 8009682:	db06      	blt.n	8009692 <tcp_receive+0x42>
 8009684:	f1c3 0301 	rsb	r3, r3, #1
 8009688:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 800968a:	1a5b      	subs	r3, r3, r1
 800968c:	4413      	add	r3, r2
 800968e:	2b00      	cmp	r3, #0
 8009690:	dd03      	ble.n	800969a <tcp_receive+0x4a>
      tcp_ack_now(pcb);
 8009692:	8b63      	ldrh	r3, [r4, #26]
 8009694:	f043 0302 	orr.w	r3, r3, #2
 8009698:	8363      	strh	r3, [r4, #26]
    }
  }
}
 800969a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800969e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80096a0:	6832      	ldr	r2, [r6, #0]
 80096a2:	eba1 0802 	sub.w	r8, r1, r2
 80096a6:	f1b8 0f01 	cmp.w	r8, #1
 80096aa:	d406      	bmi.n	80096ba <tcp_receive+0x6a>
 80096ac:	f1c2 0001 	rsb	r0, r2, #1
 80096b0:	1ac3      	subs	r3, r0, r3
 80096b2:	440b      	add	r3, r1
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	f340 81c2 	ble.w	8009a3e <tcp_receive+0x3ee>
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 80096ba:	1a53      	subs	r3, r2, r1
 80096bc:	2b00      	cmp	r3, #0
 80096be:	f2c0 81b9 	blt.w	8009a34 <tcp_receive+0x3e4>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80096c2:	f102 0c01 	add.w	ip, r2, #1
 80096c6:	8d20      	ldrh	r0, [r4, #40]	; 0x28
 80096c8:	ebac 0301 	sub.w	r3, ip, r1
 80096cc:	1a1b      	subs	r3, r3, r0
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	dc39      	bgt.n	8009746 <tcp_receive+0xf6>
      if (pcb->rcv_nxt == seqno) {
 80096d2:	4291      	cmp	r1, r2
 80096d4:	f000 8452 	beq.w	8009f7c <tcp_receive+0x92c>
        if (pcb->ooseq == NULL) {
 80096d8:	6f65      	ldr	r5, [r4, #116]	; 0x74
 80096da:	2d00      	cmp	r5, #0
 80096dc:	f000 835d 	beq.w	8009d9a <tcp_receive+0x74a>
            if (seqno == next->tcphdr->seqno) {
 80096e0:	68e8      	ldr	r0, [r5, #12]
          struct tcp_seg *next, *prev = NULL;
 80096e2:	f04f 0800 	mov.w	r8, #0
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 80096e6:	f102 3eff 	add.w	lr, r2, #4294967295
            if (seqno == next->tcphdr->seqno) {
 80096ea:	6843      	ldr	r3, [r0, #4]
 80096ec:	429a      	cmp	r2, r3
 80096ee:	d019      	beq.n	8009724 <tcp_receive+0xd4>
              if (prev == NULL) {
 80096f0:	f1b8 0f00 	cmp.w	r8, #0
 80096f4:	f000 812c 	beq.w	8009950 <tcp_receive+0x300>
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 80096f8:	f8d8 100c 	ldr.w	r1, [r8, #12]
 80096fc:	6849      	ldr	r1, [r1, #4]
 80096fe:	ebae 0101 	sub.w	r1, lr, r1
 8009702:	2900      	cmp	r1, #0
 8009704:	db04      	blt.n	8009710 <tcp_receive+0xc0>
 8009706:	ebac 0103 	sub.w	r1, ip, r3
 800970a:	2900      	cmp	r1, #0
 800970c:	f340 834e 	ble.w	8009dac <tcp_receive+0x75c>
              if (next->next == NULL &&
 8009710:	6829      	ldr	r1, [r5, #0]
 8009712:	46a8      	mov	r8, r5
 8009714:	2900      	cmp	r1, #0
 8009716:	f000 812a 	beq.w	800996e <tcp_receive+0x31e>
 800971a:	460d      	mov	r5, r1
            if (seqno == next->tcphdr->seqno) {
 800971c:	68e8      	ldr	r0, [r5, #12]
 800971e:	6843      	ldr	r3, [r0, #4]
 8009720:	429a      	cmp	r2, r3
 8009722:	d1e5      	bne.n	80096f0 <tcp_receive+0xa0>
              if (inseg.len > next->len) {
 8009724:	4882      	ldr	r0, [pc, #520]	; (8009930 <tcp_receive+0x2e0>)
 8009726:	892b      	ldrh	r3, [r5, #8]
 8009728:	8902      	ldrh	r2, [r0, #8]
 800972a:	429a      	cmp	r2, r3
 800972c:	d90b      	bls.n	8009746 <tcp_receive+0xf6>
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800972e:	f7fe fe5d 	bl	80083ec <tcp_seg_copy>
                if (cseg != NULL) {
 8009732:	b140      	cbz	r0, 8009746 <tcp_receive+0xf6>
                  if (prev != NULL) {
 8009734:	f1b8 0f00 	cmp.w	r8, #0
 8009738:	f000 83f7 	beq.w	8009f2a <tcp_receive+0x8da>
                    prev->next = cseg;
 800973c:	f8c8 0000 	str.w	r0, [r8]
                  tcp_oos_insert_segment(cseg, next);
 8009740:	4629      	mov	r1, r5
 8009742:	f7ff fe93 	bl	800946c <tcp_oos_insert_segment>
        tcp_send_empty_ack(pcb);
 8009746:	4620      	mov	r0, r4
}
 8009748:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        tcp_send_empty_ack(pcb);
 800974c:	f002 b9fc 	b.w	800bb48 <tcp_send_empty_ack>
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8009750:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8009752:	6832      	ldr	r2, [r6, #0]
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8009754:	f8b4 e060 	ldrh.w	lr, [r4, #96]	; 0x60
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8009758:	1a99      	subs	r1, r3, r2
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800975a:	f8d4 c058 	ldr.w	ip, [r4, #88]	; 0x58
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800975e:	2900      	cmp	r1, #0
 8009760:	db7d      	blt.n	800985e <tcp_receive+0x20e>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8009762:	4d74      	ldr	r5, [pc, #464]	; (8009934 <tcp_receive+0x2e4>)
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8009764:	4293      	cmp	r3, r2
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8009766:	682b      	ldr	r3, [r5, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8009768:	f000 80cb 	beq.w	8009902 <tcp_receive+0x2b2>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800976c:	459c      	cmp	ip, r3
 800976e:	f000 80d1 	beq.w	8009914 <tcp_receive+0x2c4>
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8009772:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8009774:	1a19      	subs	r1, r3, r0
 8009776:	2900      	cmp	r1, #0
 8009778:	f340 8085 	ble.w	8009886 <tcp_receive+0x236>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800977c:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800977e:	1a9a      	subs	r2, r3, r2
 8009780:	2a00      	cmp	r2, #0
 8009782:	f300 808f 	bgt.w	80098a4 <tcp_receive+0x254>
      if (pcb->flags & TF_INFR) {
 8009786:	8b62      	ldrh	r2, [r4, #26]
 8009788:	0750      	lsls	r0, r2, #29
 800978a:	d509      	bpl.n	80097a0 <tcp_receive+0x150>
        tcp_clear_flags(pcb, TF_INFR);
 800978c:	f022 0204 	bic.w	r2, r2, #4
 8009790:	8362      	strh	r2, [r4, #26]
        pcb->cwnd = pcb->ssthresh;
 8009792:	f8b4 204a 	ldrh.w	r2, [r4, #74]	; 0x4a
 8009796:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
        pcb->bytes_acked = 0;
 800979a:	2200      	movs	r2, #0
 800979c:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80097a0:	f9b4 003c 	ldrsh.w	r0, [r4, #60]	; 0x3c
      pcb->lastack = ackno;
 80097a4:	6463      	str	r3, [r4, #68]	; 0x44
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80097a6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      if (pcb->state >= ESTABLISHED) {
 80097a8:	7d22      	ldrb	r2, [r4, #20]
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80097aa:	eb03 03e0 	add.w	r3, r3, r0, asr #3
      if (pcb->state >= ESTABLISHED) {
 80097ae:	2a03      	cmp	r2, #3
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80097b0:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
      pcb->nrtx = 0;
 80097b4:	f04f 0300 	mov.w	r3, #0
 80097b8:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
      if (pcb->state >= ESTABLISHED) {
 80097bc:	d913      	bls.n	80097e6 <tcp_receive+0x196>
        if (pcb->cwnd < pcb->ssthresh) {
 80097be:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 80097c2:	b289      	uxth	r1, r1
        if (pcb->cwnd < pcb->ssthresh) {
 80097c4:	f8b4 204a 	ldrh.w	r2, [r4, #74]	; 0x4a
 80097c8:	429a      	cmp	r2, r3
 80097ca:	f200 81d1 	bhi.w	8009b70 <tcp_receive+0x520>
          TCP_WND_INC(pcb->bytes_acked, acked);
 80097ce:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 80097d2:	4411      	add	r1, r2
 80097d4:	b289      	uxth	r1, r1
 80097d6:	428a      	cmp	r2, r1
 80097d8:	f200 82c6 	bhi.w	8009d68 <tcp_receive+0x718>
          if (pcb->bytes_acked >= pcb->cwnd) {
 80097dc:	428b      	cmp	r3, r1
 80097de:	f240 82c5 	bls.w	8009d6c <tcp_receive+0x71c>
 80097e2:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 80097e6:	4620      	mov	r0, r4
 80097e8:	e9d4 211b 	ldrd	r2, r1, [r4, #108]	; 0x6c
 80097ec:	f7ff fec2 	bl	8009574 <tcp_free_acked_segments.constprop.0>
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 80097f0:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 80097f2:	4602      	mov	r2, r0
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 80097f4:	6720      	str	r0, [r4, #112]	; 0x70
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 80097f6:	4620      	mov	r0, r4
 80097f8:	f7ff febc 	bl	8009574 <tcp_free_acked_segments.constprop.0>
      if (pcb->unacked == NULL) {
 80097fc:	6f22      	ldr	r2, [r4, #112]	; 0x70
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 80097fe:	66e0      	str	r0, [r4, #108]	; 0x6c
      if (pcb->unacked == NULL) {
 8009800:	fab2 f382 	clz	r3, r2
 8009804:	095b      	lsrs	r3, r3, #5
 8009806:	425b      	negs	r3, r3
 8009808:	8623      	strh	r3, [r4, #48]	; 0x30
      pcb->polltmr = 0;
 800980a:	2300      	movs	r3, #0
 800980c:	7723      	strb	r3, [r4, #28]
      if (pcb->unsent == NULL) {
 800980e:	2800      	cmp	r0, #0
 8009810:	f000 81ab 	beq.w	8009b6a <tcp_receive+0x51a>
      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8009814:	4b48      	ldr	r3, [pc, #288]	; (8009938 <tcp_receive+0x2e8>)
 8009816:	8819      	ldrh	r1, [r3, #0]
 8009818:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
 800981c:	440b      	add	r3, r1
 800981e:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
      if (pcb->flags & TF_RTO) {
 8009822:	8b63      	ldrh	r3, [r4, #26]
 8009824:	0519      	lsls	r1, r3, #20
 8009826:	f140 8103 	bpl.w	8009a30 <tcp_receive+0x3e0>
        if (pcb->unacked == NULL) {
 800982a:	2a00      	cmp	r2, #0
 800982c:	f000 81b7 	beq.w	8009b9e <tcp_receive+0x54e>
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8009830:	68d3      	ldr	r3, [r2, #12]
 8009832:	6ce7      	ldr	r7, [r4, #76]	; 0x4c
 8009834:	6858      	ldr	r0, [r3, #4]
 8009836:	f7fd f8b7 	bl	80069a8 <lwip_htonl>
 800983a:	1a38      	subs	r0, r7, r0
 800983c:	2800      	cmp	r0, #0
 800983e:	f300 80f7 	bgt.w	8009a30 <tcp_receive+0x3e0>
          tcp_clear_flags(pcb, TF_RTO);
 8009842:	8b63      	ldrh	r3, [r4, #26]
 8009844:	4f39      	ldr	r7, [pc, #228]	; (800992c <tcp_receive+0x2dc>)
 8009846:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800984a:	8363      	strh	r3, [r4, #26]
 800984c:	e02e      	b.n	80098ac <tcp_receive+0x25c>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800984e:	4b3b      	ldr	r3, [pc, #236]	; (800993c <tcp_receive+0x2ec>)
 8009850:	f240 427c 	movw	r2, #1148	; 0x47c
 8009854:	493a      	ldr	r1, [pc, #232]	; (8009940 <tcp_receive+0x2f0>)
 8009856:	483b      	ldr	r0, [pc, #236]	; (8009944 <tcp_receive+0x2f4>)
 8009858:	f004 fbe4 	bl	800e024 <iprintf>
 800985c:	e702      	b.n	8009664 <tcp_receive+0x14>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800985e:	4b3a      	ldr	r3, [pc, #232]	; (8009948 <tcp_receive+0x2f8>)
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8009860:	4d34      	ldr	r5, [pc, #208]	; (8009934 <tcp_receive+0x2e4>)
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	89d9      	ldrh	r1, [r3, #14]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8009866:	682b      	ldr	r3, [r5, #0]
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8009868:	f8b4 0062 	ldrh.w	r0, [r4, #98]	; 0x62
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800986c:	f8a4 1060 	strh.w	r1, [r4, #96]	; 0x60
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8009870:	4288      	cmp	r0, r1
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8009872:	6c60      	ldr	r0, [r4, #68]	; 0x44
        pcb->snd_wnd_max = pcb->snd_wnd;
 8009874:	bf38      	it	cc
 8009876:	f8a4 1062 	strhcc.w	r1, [r4, #98]	; 0x62
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800987a:	1a19      	subs	r1, r3, r0
 800987c:	2900      	cmp	r1, #0
      pcb->snd_wl2 = ackno;
 800987e:	e9c4 2315 	strd	r2, r3, [r4, #84]	; 0x54
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8009882:	f73f af7b 	bgt.w	800977c <tcp_receive+0x12c>
      if (tcplen == 0) {
 8009886:	4f29      	ldr	r7, [pc, #164]	; (800992c <tcp_receive+0x2dc>)
 8009888:	8839      	ldrh	r1, [r7, #0]
 800988a:	b939      	cbnz	r1, 800989c <tcp_receive+0x24c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800988c:	44e6      	add	lr, ip
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800988e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8009890:	f8b4 c060 	ldrh.w	ip, [r4, #96]	; 0x60
 8009894:	4461      	add	r1, ip
 8009896:	4571      	cmp	r1, lr
 8009898:	f000 8191 	beq.w	8009bbe <tcp_receive+0x56e>
        pcb->dupacks = 0;
 800989c:	2300      	movs	r3, #0
 800989e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80098a2:	e003      	b.n	80098ac <tcp_receive+0x25c>
      tcp_send_empty_ack(pcb);
 80098a4:	4620      	mov	r0, r4
 80098a6:	4f21      	ldr	r7, [pc, #132]	; (800992c <tcp_receive+0x2dc>)
 80098a8:	f002 f94e 	bl	800bb48 <tcp_send_empty_ack>
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80098ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80098ae:	2900      	cmp	r1, #0
 80098b0:	f43f aede 	beq.w	8009670 <tcp_receive+0x20>
 80098b4:	682b      	ldr	r3, [r5, #0]
 80098b6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80098b8:	1ad2      	subs	r2, r2, r3
 80098ba:	2a00      	cmp	r2, #0
 80098bc:	f6bf aed8 	bge.w	8009670 <tcp_receive+0x20>
      m = (s16_t)(m - (pcb->sa >> 3));
 80098c0:	f9b4 203c 	ldrsh.w	r2, [r4, #60]	; 0x3c
      m = (s16_t)(tcp_ticks - pcb->rttest);
 80098c4:	b289      	uxth	r1, r1
 80098c6:	4b21      	ldr	r3, [pc, #132]	; (800994c <tcp_receive+0x2fc>)
      m = (s16_t)(m - (pcb->sa >> 3));
 80098c8:	f3c2 00cf 	ubfx	r0, r2, #3, #16
      m = (s16_t)(tcp_ticks - pcb->rttest);
 80098cc:	881d      	ldrh	r5, [r3, #0]
      m = (s16_t)(m - (pcb->sa >> 3));
 80098ce:	1a2b      	subs	r3, r5, r0
 80098d0:	1a5b      	subs	r3, r3, r1
 80098d2:	b29b      	uxth	r3, r3
      pcb->sa = (s16_t)(pcb->sa + m);
 80098d4:	441a      	add	r2, r3
      if (m < 0) {
 80098d6:	f413 4f00 	tst.w	r3, #32768	; 0x8000
      pcb->sa = (s16_t)(pcb->sa + m);
 80098da:	b212      	sxth	r2, r2
 80098dc:	87a2      	strh	r2, [r4, #60]	; 0x3c
      if (m < 0) {
 80098de:	d002      	beq.n	80098e6 <tcp_receive+0x296>
        m = (s16_t) - m;
 80098e0:	1b40      	subs	r0, r0, r5
 80098e2:	4401      	add	r1, r0
 80098e4:	b28b      	uxth	r3, r1
      m = (s16_t)(m - (pcb->sv >> 2));
 80098e6:	f9b4 103e 	ldrsh.w	r1, [r4, #62]	; 0x3e
      pcb->sv = (s16_t)(pcb->sv + m);
 80098ea:	eba1 01a1 	sub.w	r1, r1, r1, asr #2
 80098ee:	440b      	add	r3, r1
 80098f0:	b29b      	uxth	r3, r3
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80098f2:	eb03 02e2 	add.w	r2, r3, r2, asr #3
      pcb->sv = (s16_t)(pcb->sv + m);
 80098f6:	87e3      	strh	r3, [r4, #62]	; 0x3e
      pcb->rttest = 0;
 80098f8:	2300      	movs	r3, #0
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80098fa:	f8a4 2040 	strh.w	r2, [r4, #64]	; 0x40
      pcb->rttest = 0;
 80098fe:	6363      	str	r3, [r4, #52]	; 0x34
 8009900:	e6b6      	b.n	8009670 <tcp_receive+0x20>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8009902:	ebac 0103 	sub.w	r1, ip, r3
 8009906:	2900      	cmp	r1, #0
 8009908:	f6bf af30 	bge.w	800976c <tcp_receive+0x11c>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800990c:	490e      	ldr	r1, [pc, #56]	; (8009948 <tcp_receive+0x2f8>)
 800990e:	6809      	ldr	r1, [r1, #0]
 8009910:	89c9      	ldrh	r1, [r1, #14]
 8009912:	e7a9      	b.n	8009868 <tcp_receive+0x218>
 8009914:	490c      	ldr	r1, [pc, #48]	; (8009948 <tcp_receive+0x2f8>)
 8009916:	6809      	ldr	r1, [r1, #0]
 8009918:	89c9      	ldrh	r1, [r1, #14]
 800991a:	458e      	cmp	lr, r1
 800991c:	f4bf af29 	bcs.w	8009772 <tcp_receive+0x122>
 8009920:	e7a2      	b.n	8009868 <tcp_receive+0x218>
 8009922:	bf00      	nop
 8009924:	24010568 	.word	0x24010568
 8009928:	24010588 	.word	0x24010588
 800992c:	240105a2 	.word	0x240105a2
 8009930:	2401056c 	.word	0x2401056c
 8009934:	24010564 	.word	0x24010564
 8009938:	2401057c 	.word	0x2401057c
 800993c:	08010750 	.word	0x08010750
 8009940:	08010838 	.word	0x08010838
 8009944:	0800ef30 	.word	0x0800ef30
 8009948:	24010594 	.word	0x24010594
 800994c:	24010558 	.word	0x24010558
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8009950:	1ad1      	subs	r1, r2, r3
 8009952:	2900      	cmp	r1, #0
 8009954:	f6bf aedc 	bge.w	8009710 <tcp_receive+0xc0>
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8009958:	48af      	ldr	r0, [pc, #700]	; (8009c18 <tcp_receive+0x5c8>)
 800995a:	f7fe fd47 	bl	80083ec <tcp_seg_copy>
                  if (cseg != NULL) {
 800995e:	2800      	cmp	r0, #0
 8009960:	f43f aef1 	beq.w	8009746 <tcp_receive+0xf6>
                    tcp_oos_insert_segment(cseg, next);
 8009964:	4629      	mov	r1, r5
                    pcb->ooseq = cseg;
 8009966:	6760      	str	r0, [r4, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8009968:	f7ff fd80 	bl	800946c <tcp_oos_insert_segment>
 800996c:	e6eb      	b.n	8009746 <tcp_receive+0xf6>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800996e:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8009970:	2b00      	cmp	r3, #0
 8009972:	f77f aee8 	ble.w	8009746 <tcp_receive+0xf6>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8009976:	8980      	ldrh	r0, [r0, #12]
 8009978:	f7fd f812 	bl	80069a0 <lwip_htons>
 800997c:	07c1      	lsls	r1, r0, #31
 800997e:	f53f aee2 	bmi.w	8009746 <tcp_receive+0xf6>
                next->next = tcp_seg_copy(&inseg);
 8009982:	48a5      	ldr	r0, [pc, #660]	; (8009c18 <tcp_receive+0x5c8>)
 8009984:	f7fe fd32 	bl	80083ec <tcp_seg_copy>
 8009988:	6028      	str	r0, [r5, #0]
                if (next->next != NULL) {
 800998a:	2800      	cmp	r0, #0
 800998c:	f43f aedb 	beq.w	8009746 <tcp_receive+0xf6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8009990:	68eb      	ldr	r3, [r5, #12]
 8009992:	892a      	ldrh	r2, [r5, #8]
 8009994:	6859      	ldr	r1, [r3, #4]
 8009996:	6833      	ldr	r3, [r6, #0]
 8009998:	440a      	add	r2, r1
 800999a:	1ad2      	subs	r2, r2, r3
 800999c:	2a00      	cmp	r2, #0
 800999e:	dd05      	ble.n	80099ac <tcp_receive+0x35c>
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80099a0:	1a5b      	subs	r3, r3, r1
                    pbuf_realloc(next->p, next->len);
 80099a2:	6868      	ldr	r0, [r5, #4]
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80099a4:	b299      	uxth	r1, r3
 80099a6:	8129      	strh	r1, [r5, #8]
                    pbuf_realloc(next->p, next->len);
 80099a8:	f7fe f8ba 	bl	8007b20 <pbuf_realloc>
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 80099ac:	6832      	ldr	r2, [r6, #0]
 80099ae:	883b      	ldrh	r3, [r7, #0]
 80099b0:	4413      	add	r3, r2
 80099b2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80099b4:	1a9b      	subs	r3, r3, r2
 80099b6:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 80099b8:	1a9b      	subs	r3, r3, r2
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	f77f aec3 	ble.w	8009746 <tcp_receive+0xf6>
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 80099c0:	682b      	ldr	r3, [r5, #0]
 80099c2:	68db      	ldr	r3, [r3, #12]
 80099c4:	8998      	ldrh	r0, [r3, #12]
 80099c6:	f7fc ffeb 	bl	80069a0 <lwip_htons>
 80099ca:	07c2      	lsls	r2, r0, #31
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 80099cc:	682b      	ldr	r3, [r5, #0]
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 80099ce:	f100 82c3 	bmi.w	8009f58 <tcp_receive+0x908>
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 80099d2:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 80099d4:	6832      	ldr	r2, [r6, #0]
                    pbuf_realloc(next->next->p, next->next->len);
 80099d6:	6858      	ldr	r0, [r3, #4]
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 80099d8:	1a89      	subs	r1, r1, r2
 80099da:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80099dc:	4411      	add	r1, r2
 80099de:	b289      	uxth	r1, r1
 80099e0:	8119      	strh	r1, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 80099e2:	f7fe f89d 	bl	8007b20 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 80099e6:	682b      	ldr	r3, [r5, #0]
 80099e8:	891d      	ldrh	r5, [r3, #8]
 80099ea:	68db      	ldr	r3, [r3, #12]
 80099ec:	8998      	ldrh	r0, [r3, #12]
 80099ee:	f7fc ffd7 	bl	80069a0 <lwip_htons>
 80099f2:	f010 0003 	ands.w	r0, r0, #3
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80099f6:	6831      	ldr	r1, [r6, #0]
                    tcplen = TCP_TCPLEN(next->next);
 80099f8:	bf18      	it	ne
 80099fa:	2001      	movne	r0, #1
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80099fc:	8d22      	ldrh	r2, [r4, #40]	; 0x28
                    tcplen = TCP_TCPLEN(next->next);
 80099fe:	182b      	adds	r3, r5, r0
 8009a00:	b29b      	uxth	r3, r3
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8009a02:	4419      	add	r1, r3
                    tcplen = TCP_TCPLEN(next->next);
 8009a04:	803b      	strh	r3, [r7, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8009a06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009a08:	4413      	add	r3, r2
 8009a0a:	4299      	cmp	r1, r3
 8009a0c:	f43f ae9b 	beq.w	8009746 <tcp_receive+0xf6>
 8009a10:	4b82      	ldr	r3, [pc, #520]	; (8009c1c <tcp_receive+0x5cc>)
 8009a12:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8009a16:	4982      	ldr	r1, [pc, #520]	; (8009c20 <tcp_receive+0x5d0>)
 8009a18:	4882      	ldr	r0, [pc, #520]	; (8009c24 <tcp_receive+0x5d4>)
 8009a1a:	f004 fb03 	bl	800e024 <iprintf>
 8009a1e:	e692      	b.n	8009746 <tcp_receive+0xf6>
  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8009a20:	4b7e      	ldr	r3, [pc, #504]	; (8009c1c <tcp_receive+0x5cc>)
 8009a22:	f240 427b 	movw	r2, #1147	; 0x47b
 8009a26:	4980      	ldr	r1, [pc, #512]	; (8009c28 <tcp_receive+0x5d8>)
 8009a28:	487e      	ldr	r0, [pc, #504]	; (8009c24 <tcp_receive+0x5d4>)
 8009a2a:	f004 fafb 	bl	800e024 <iprintf>
 8009a2e:	e615      	b.n	800965c <tcp_receive+0xc>
 8009a30:	4f7e      	ldr	r7, [pc, #504]	; (8009c2c <tcp_receive+0x5dc>)
 8009a32:	e73b      	b.n	80098ac <tcp_receive+0x25c>
        tcp_ack_now(pcb);
 8009a34:	8b63      	ldrh	r3, [r4, #26]
 8009a36:	f043 0302 	orr.w	r3, r3, #2
 8009a3a:	8363      	strh	r3, [r4, #26]
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8009a3c:	e683      	b.n	8009746 <tcp_receive+0xf6>
      struct pbuf *p = inseg.p;
 8009a3e:	f8df 91d8 	ldr.w	r9, [pc, #472]	; 8009c18 <tcp_receive+0x5c8>
 8009a42:	f8d9 5004 	ldr.w	r5, [r9, #4]
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8009a46:	2d00      	cmp	r5, #0
 8009a48:	f000 8186 	beq.w	8009d58 <tcp_receive+0x708>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8009a4c:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8009a50:	4598      	cmp	r8, r3
 8009a52:	f200 80d9 	bhi.w	8009c08 <tcp_receive+0x5b8>
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8009a56:	f8d9 3004 	ldr.w	r3, [r9, #4]
      off = (u16_t)off32;
 8009a5a:	fa1f f888 	uxth.w	r8, r8
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8009a5e:	891a      	ldrh	r2, [r3, #8]
 8009a60:	4542      	cmp	r2, r8
 8009a62:	f0c0 80c6 	bcc.w	8009bf2 <tcp_receive+0x5a2>
      inseg.len -= off;
 8009a66:	f8b9 3008 	ldrh.w	r3, [r9, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8009a6a:	eba2 0208 	sub.w	r2, r2, r8
      inseg.len -= off;
 8009a6e:	eba3 0308 	sub.w	r3, r3, r8
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8009a72:	b292      	uxth	r2, r2
      inseg.len -= off;
 8009a74:	f8a9 3008 	strh.w	r3, [r9, #8]
      while (p->len < off) {
 8009a78:	896b      	ldrh	r3, [r5, #10]
 8009a7a:	4543      	cmp	r3, r8
 8009a7c:	d20a      	bcs.n	8009a94 <tcp_receive+0x444>
        p->len = 0;
 8009a7e:	2100      	movs	r1, #0
        off -= p->len;
 8009a80:	eba8 0303 	sub.w	r3, r8, r3
        p->len = 0;
 8009a84:	8169      	strh	r1, [r5, #10]
        p->tot_len = new_tot_len;
 8009a86:	812a      	strh	r2, [r5, #8]
        p = p->next;
 8009a88:	682d      	ldr	r5, [r5, #0]
        off -= p->len;
 8009a8a:	fa1f f883 	uxth.w	r8, r3
      while (p->len < off) {
 8009a8e:	896b      	ldrh	r3, [r5, #10]
 8009a90:	4543      	cmp	r3, r8
 8009a92:	d3f5      	bcc.n	8009a80 <tcp_receive+0x430>
      pbuf_remove_header(p, off);
 8009a94:	4641      	mov	r1, r8
 8009a96:	4628      	mov	r0, r5
 8009a98:	f7fd feb8 	bl	800780c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8009a9c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009a9e:	f8d9 200c 	ldr.w	r2, [r9, #12]
 8009aa2:	6033      	str	r3, [r6, #0]
 8009aa4:	6053      	str	r3, [r2, #4]
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8009aa6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	f43f ae4c 	beq.w	8009746 <tcp_receive+0xf6>
        tcplen = TCP_TCPLEN(&inseg);
 8009aae:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8009ab2:	f8b9 5008 	ldrh.w	r5, [r9, #8]
 8009ab6:	8998      	ldrh	r0, [r3, #12]
 8009ab8:	f7fc ff72 	bl	80069a0 <lwip_htons>
 8009abc:	f010 0003 	ands.w	r0, r0, #3
        if (tcplen > pcb->rcv_wnd) {
 8009ac0:	8d22      	ldrh	r2, [r4, #40]	; 0x28
        tcplen = TCP_TCPLEN(&inseg);
 8009ac2:	bf18      	it	ne
 8009ac4:	2001      	movne	r0, #1
 8009ac6:	182b      	adds	r3, r5, r0
 8009ac8:	b29b      	uxth	r3, r3
        if (tcplen > pcb->rcv_wnd) {
 8009aca:	429a      	cmp	r2, r3
        tcplen = TCP_TCPLEN(&inseg);
 8009acc:	803b      	strh	r3, [r7, #0]
        if (tcplen > pcb->rcv_wnd) {
 8009ace:	f0c0 8197 	bcc.w	8009e00 <tcp_receive+0x7b0>
        if (pcb->ooseq != NULL) {
 8009ad2:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	f000 80b6 	beq.w	8009c46 <tcp_receive+0x5f6>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8009ada:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8009ade:	8998      	ldrh	r0, [r3, #12]
 8009ae0:	f7fc ff5e 	bl	80069a0 <lwip_htons>
 8009ae4:	07c2      	lsls	r2, r0, #31
 8009ae6:	f100 80ab 	bmi.w	8009c40 <tcp_receive+0x5f0>
            struct tcp_seg *next = pcb->ooseq;
 8009aea:	6f65      	ldr	r5, [r4, #116]	; 0x74
            while (next &&
 8009aec:	b955      	cbnz	r5, 8009b04 <tcp_receive+0x4b4>
 8009aee:	e208      	b.n	8009f02 <tcp_receive+0x8b2>
              next = next->next;
 8009af0:	f8d5 8000 	ldr.w	r8, [r5]
              tcp_seg_free(tmp);
 8009af4:	4628      	mov	r0, r5
 8009af6:	f7fe fc6b 	bl	80083d0 <tcp_seg_free>
            while (next &&
 8009afa:	4645      	mov	r5, r8
 8009afc:	f1b8 0f00 	cmp.w	r8, #0
 8009b00:	f000 81ff 	beq.w	8009f02 <tcp_receive+0x8b2>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8009b04:	68e8      	ldr	r0, [r5, #12]
 8009b06:	883a      	ldrh	r2, [r7, #0]
 8009b08:	f8d6 e000 	ldr.w	lr, [r6]
 8009b0c:	892b      	ldrh	r3, [r5, #8]
 8009b0e:	f8d0 c004 	ldr.w	ip, [r0, #4]
 8009b12:	eb02 010e 	add.w	r1, r2, lr
 8009b16:	4463      	add	r3, ip
 8009b18:	1acb      	subs	r3, r1, r3
            while (next &&
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	f2c0 81b9 	blt.w	8009e92 <tcp_receive+0x842>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8009b20:	8980      	ldrh	r0, [r0, #12]
 8009b22:	f7fc ff3d 	bl	80069a0 <lwip_htons>
 8009b26:	07c3      	lsls	r3, r0, #31
 8009b28:	d5e2      	bpl.n	8009af0 <tcp_receive+0x4a0>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8009b2a:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8009b2e:	8998      	ldrh	r0, [r3, #12]
 8009b30:	f7fc ff36 	bl	80069a0 <lwip_htons>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8009b34:	0780      	lsls	r0, r0, #30
 8009b36:	d4db      	bmi.n	8009af0 <tcp_receive+0x4a0>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8009b38:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8009b3c:	2001      	movs	r0, #1
 8009b3e:	f8b3 800c 	ldrh.w	r8, [r3, #12]
 8009b42:	f7fc ff2d 	bl	80069a0 <lwip_htons>
 8009b46:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8009b4a:	ea48 0000 	orr.w	r0, r8, r0
                tcplen = TCP_TCPLEN(&inseg);
 8009b4e:	f8b9 8008 	ldrh.w	r8, [r9, #8]
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8009b52:	8198      	strh	r0, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8009b54:	b280      	uxth	r0, r0
 8009b56:	f7fc ff23 	bl	80069a0 <lwip_htons>
 8009b5a:	f010 0003 	ands.w	r0, r0, #3
 8009b5e:	bf18      	it	ne
 8009b60:	2001      	movne	r0, #1
 8009b62:	4480      	add	r8, r0
 8009b64:	f8a7 8000 	strh.w	r8, [r7]
 8009b68:	e7c2      	b.n	8009af0 <tcp_receive+0x4a0>
        pcb->unsent_oversize = 0;
 8009b6a:	f8a4 0068 	strh.w	r0, [r4, #104]	; 0x68
 8009b6e:	e651      	b.n	8009814 <tcp_receive+0x1c4>
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8009b70:	8b62      	ldrh	r2, [r4, #26]
 8009b72:	f412 6f00 	tst.w	r2, #2048	; 0x800
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8009b76:	8e62      	ldrh	r2, [r4, #50]	; 0x32
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8009b78:	bf14      	ite	ne
 8009b7a:	2001      	movne	r0, #1
 8009b7c:	2002      	moveq	r0, #2
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8009b7e:	fb12 f200 	smulbb	r2, r2, r0
 8009b82:	b292      	uxth	r2, r2
          TCP_WND_INC(pcb->cwnd, increase);
 8009b84:	428a      	cmp	r2, r1
 8009b86:	bf94      	ite	ls
 8009b88:	1898      	addls	r0, r3, r2
 8009b8a:	1858      	addhi	r0, r3, r1
 8009b8c:	b282      	uxth	r2, r0
 8009b8e:	4293      	cmp	r3, r2
 8009b90:	f240 80f5 	bls.w	8009d7e <tcp_receive+0x72e>
 8009b94:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009b98:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
 8009b9c:	e623      	b.n	80097e6 <tcp_receive+0x196>
          if ((pcb->unsent == NULL) ||
 8009b9e:	b148      	cbz	r0, 8009bb4 <tcp_receive+0x564>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8009ba0:	68c3      	ldr	r3, [r0, #12]
 8009ba2:	6ce7      	ldr	r7, [r4, #76]	; 0x4c
 8009ba4:	6858      	ldr	r0, [r3, #4]
 8009ba6:	f7fc feff 	bl	80069a8 <lwip_htonl>
 8009baa:	1a38      	subs	r0, r7, r0
          if ((pcb->unsent == NULL) ||
 8009bac:	2800      	cmp	r0, #0
 8009bae:	f73f af3f 	bgt.w	8009a30 <tcp_receive+0x3e0>
            tcp_clear_flags(pcb, TF_RTO);
 8009bb2:	8b63      	ldrh	r3, [r4, #26]
 8009bb4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009bb8:	4f1c      	ldr	r7, [pc, #112]	; (8009c2c <tcp_receive+0x5dc>)
 8009bba:	8363      	strh	r3, [r4, #26]
 8009bbc:	e676      	b.n	80098ac <tcp_receive+0x25c>
          if (pcb->rtime >= 0) {
 8009bbe:	8e21      	ldrh	r1, [r4, #48]	; 0x30
            if (pcb->lastack == ackno) {
 8009bc0:	0409      	lsls	r1, r1, #16
 8009bc2:	f53f ae6b 	bmi.w	800989c <tcp_receive+0x24c>
 8009bc6:	4298      	cmp	r0, r3
 8009bc8:	f47f ae68 	bne.w	800989c <tcp_receive+0x24c>
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8009bcc:	f894 1043 	ldrb.w	r1, [r4, #67]	; 0x43
 8009bd0:	29ff      	cmp	r1, #255	; 0xff
 8009bd2:	f000 814e 	beq.w	8009e72 <tcp_receive+0x822>
                ++pcb->dupacks;
 8009bd6:	3101      	adds	r1, #1
 8009bd8:	b2c9      	uxtb	r1, r1
              if (pcb->dupacks > 3) {
 8009bda:	2903      	cmp	r1, #3
                ++pcb->dupacks;
 8009bdc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
              if (pcb->dupacks > 3) {
 8009be0:	f200 8147 	bhi.w	8009e72 <tcp_receive+0x822>
              if (pcb->dupacks >= 3) {
 8009be4:	f000 8151 	beq.w	8009e8a <tcp_receive+0x83a>
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8009be8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009bea:	2900      	cmp	r1, #0
 8009bec:	f47f ae63 	bne.w	80098b6 <tcp_receive+0x266>
 8009bf0:	e544      	b.n	800967c <tcp_receive+0x2c>
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8009bf2:	4b0a      	ldr	r3, [pc, #40]	; (8009c1c <tcp_receive+0x5cc>)
 8009bf4:	f240 5297 	movw	r2, #1431	; 0x597
 8009bf8:	490d      	ldr	r1, [pc, #52]	; (8009c30 <tcp_receive+0x5e0>)
 8009bfa:	480a      	ldr	r0, [pc, #40]	; (8009c24 <tcp_receive+0x5d4>)
 8009bfc:	f004 fa12 	bl	800e024 <iprintf>
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8009c00:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8009c04:	891a      	ldrh	r2, [r3, #8]
 8009c06:	e72e      	b.n	8009a66 <tcp_receive+0x416>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8009c08:	4b04      	ldr	r3, [pc, #16]	; (8009c1c <tcp_receive+0x5cc>)
 8009c0a:	f240 5295 	movw	r2, #1429	; 0x595
 8009c0e:	4909      	ldr	r1, [pc, #36]	; (8009c34 <tcp_receive+0x5e4>)
 8009c10:	4804      	ldr	r0, [pc, #16]	; (8009c24 <tcp_receive+0x5d4>)
 8009c12:	f004 fa07 	bl	800e024 <iprintf>
 8009c16:	e71e      	b.n	8009a56 <tcp_receive+0x406>
 8009c18:	2401056c 	.word	0x2401056c
 8009c1c:	08010750 	.word	0x08010750
 8009c20:	08010884 	.word	0x08010884
 8009c24:	0800ef30 	.word	0x0800ef30
 8009c28:	0801081c 	.word	0x0801081c
 8009c2c:	240105a2 	.word	0x240105a2
 8009c30:	08010874 	.word	0x08010874
 8009c34:	08010864 	.word	0x08010864
              pcb->ooseq = pcb->ooseq->next;
 8009c38:	6803      	ldr	r3, [r0, #0]
 8009c3a:	6763      	str	r3, [r4, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8009c3c:	f7fe fbc8 	bl	80083d0 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8009c40:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8009c42:	2800      	cmp	r0, #0
 8009c44:	d1f8      	bne.n	8009c38 <tcp_receive+0x5e8>
        pcb->rcv_nxt = seqno + tcplen;
 8009c46:	883a      	ldrh	r2, [r7, #0]
 8009c48:	6831      	ldr	r1, [r6, #0]
 8009c4a:	4411      	add	r1, r2
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8009c4c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        pcb->rcv_nxt = seqno + tcplen;
 8009c4e:	6261      	str	r1, [r4, #36]	; 0x24
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8009c50:	4293      	cmp	r3, r2
 8009c52:	f0c0 80cb 	bcc.w	8009dec <tcp_receive+0x79c>
        pcb->rcv_wnd -= tcplen;
 8009c56:	1a9b      	subs	r3, r3, r2
        tcp_update_rcv_ann_wnd(pcb);
 8009c58:	4620      	mov	r0, r4
        pcb->rcv_wnd -= tcplen;
 8009c5a:	8523      	strh	r3, [r4, #40]	; 0x28
        tcp_update_rcv_ann_wnd(pcb);
 8009c5c:	f7fe fa74 	bl	8008148 <tcp_update_rcv_ann_wnd>
        if (inseg.p->tot_len > 0) {
 8009c60:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8009c64:	891a      	ldrh	r2, [r3, #8]
 8009c66:	b122      	cbz	r2, 8009c72 <tcp_receive+0x622>
          recv_data = inseg.p;
 8009c68:	4ab1      	ldr	r2, [pc, #708]	; (8009f30 <tcp_receive+0x8e0>)
 8009c6a:	6013      	str	r3, [r2, #0]
          inseg.p = NULL;
 8009c6c:	2300      	movs	r3, #0
 8009c6e:	f8c9 3004 	str.w	r3, [r9, #4]
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8009c72:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8009c76:	8998      	ldrh	r0, [r3, #12]
 8009c78:	f7fc fe92 	bl	80069a0 <lwip_htons>
 8009c7c:	07c2      	lsls	r2, r0, #31
 8009c7e:	d504      	bpl.n	8009c8a <tcp_receive+0x63a>
          recv_flags |= TF_GOT_FIN;
 8009c80:	4aac      	ldr	r2, [pc, #688]	; (8009f34 <tcp_receive+0x8e4>)
 8009c82:	7813      	ldrb	r3, [r2, #0]
 8009c84:	f043 0320 	orr.w	r3, r3, #32
 8009c88:	7013      	strb	r3, [r2, #0]
        while (pcb->ooseq != NULL &&
 8009c8a:	6f65      	ldr	r5, [r4, #116]	; 0x74
 8009c8c:	2d00      	cmp	r5, #0
 8009c8e:	d07b      	beq.n	8009d88 <tcp_receive+0x738>
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8009c90:	f8df 92a8 	ldr.w	r9, [pc, #680]	; 8009f3c <tcp_receive+0x8ec>
 8009c94:	f8df 82bc 	ldr.w	r8, [pc, #700]	; 8009f54 <tcp_receive+0x904>
 8009c98:	4fa7      	ldr	r7, [pc, #668]	; (8009f38 <tcp_receive+0x8e8>)
 8009c9a:	e033      	b.n	8009d04 <tcp_receive+0x6b4>
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8009c9c:	68eb      	ldr	r3, [r5, #12]
 8009c9e:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 8009ca2:	8998      	ldrh	r0, [r3, #12]
 8009ca4:	f7fc fe7c 	bl	80069a0 <lwip_htons>
 8009ca8:	f010 0003 	ands.w	r0, r0, #3
 8009cac:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8009cae:	bf18      	it	ne
 8009cb0:	2001      	movne	r0, #1
 8009cb2:	4450      	add	r0, sl
 8009cb4:	1a1b      	subs	r3, r3, r0
          tcp_update_rcv_ann_wnd(pcb);
 8009cb6:	4620      	mov	r0, r4
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8009cb8:	8523      	strh	r3, [r4, #40]	; 0x28
          tcp_update_rcv_ann_wnd(pcb);
 8009cba:	f7fe fa45 	bl	8008148 <tcp_update_rcv_ann_wnd>
          if (cseg->p->tot_len > 0) {
 8009cbe:	6869      	ldr	r1, [r5, #4]
 8009cc0:	890b      	ldrh	r3, [r1, #8]
 8009cc2:	b13b      	cbz	r3, 8009cd4 <tcp_receive+0x684>
            if (recv_data) {
 8009cc4:	4b9a      	ldr	r3, [pc, #616]	; (8009f30 <tcp_receive+0x8e0>)
 8009cc6:	6818      	ldr	r0, [r3, #0]
 8009cc8:	2800      	cmp	r0, #0
 8009cca:	d05b      	beq.n	8009d84 <tcp_receive+0x734>
              pbuf_cat(recv_data, cseg->p);
 8009ccc:	f7fd ffaa 	bl	8007c24 <pbuf_cat>
            cseg->p = NULL;
 8009cd0:	2300      	movs	r3, #0
 8009cd2:	606b      	str	r3, [r5, #4]
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8009cd4:	68eb      	ldr	r3, [r5, #12]
 8009cd6:	8998      	ldrh	r0, [r3, #12]
 8009cd8:	f7fc fe62 	bl	80069a0 <lwip_htons>
 8009cdc:	07c3      	lsls	r3, r0, #31
 8009cde:	d509      	bpl.n	8009cf4 <tcp_receive+0x6a4>
            recv_flags |= TF_GOT_FIN;
 8009ce0:	4a94      	ldr	r2, [pc, #592]	; (8009f34 <tcp_receive+0x8e4>)
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8009ce2:	7d21      	ldrb	r1, [r4, #20]
            recv_flags |= TF_GOT_FIN;
 8009ce4:	7813      	ldrb	r3, [r2, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8009ce6:	2904      	cmp	r1, #4
            recv_flags |= TF_GOT_FIN;
 8009ce8:	f043 0320 	orr.w	r3, r3, #32
 8009cec:	7013      	strb	r3, [r2, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8009cee:	d101      	bne.n	8009cf4 <tcp_receive+0x6a4>
              pcb->state = CLOSE_WAIT;
 8009cf0:	2307      	movs	r3, #7
 8009cf2:	7523      	strb	r3, [r4, #20]
          pcb->ooseq = cseg->next;
 8009cf4:	682b      	ldr	r3, [r5, #0]
          tcp_seg_free(cseg);
 8009cf6:	4628      	mov	r0, r5
          pcb->ooseq = cseg->next;
 8009cf8:	6763      	str	r3, [r4, #116]	; 0x74
          tcp_seg_free(cseg);
 8009cfa:	f7fe fb69 	bl	80083d0 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8009cfe:	6f65      	ldr	r5, [r4, #116]	; 0x74
 8009d00:	2d00      	cmp	r5, #0
 8009d02:	d041      	beq.n	8009d88 <tcp_receive+0x738>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8009d04:	68ea      	ldr	r2, [r5, #12]
        while (pcb->ooseq != NULL &&
 8009d06:	6a61      	ldr	r1, [r4, #36]	; 0x24
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8009d08:	6853      	ldr	r3, [r2, #4]
        while (pcb->ooseq != NULL &&
 8009d0a:	428b      	cmp	r3, r1
 8009d0c:	d13c      	bne.n	8009d88 <tcp_receive+0x738>
          seqno = pcb->ooseq->tcphdr->seqno;
 8009d0e:	6033      	str	r3, [r6, #0]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8009d10:	8990      	ldrh	r0, [r2, #12]
 8009d12:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 8009d16:	f7fc fe43 	bl	80069a0 <lwip_htons>
 8009d1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009d1c:	f010 0003 	ands.w	r0, r0, #3
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8009d20:	f8b5 b008 	ldrh.w	fp, [r5, #8]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8009d24:	bf18      	it	ne
 8009d26:	2001      	movne	r0, #1
 8009d28:	449a      	add	sl, r3
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8009d2a:	68eb      	ldr	r3, [r5, #12]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8009d2c:	4450      	add	r0, sl
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8009d2e:	f8b4 a028 	ldrh.w	sl, [r4, #40]	; 0x28
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8009d32:	6260      	str	r0, [r4, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8009d34:	8998      	ldrh	r0, [r3, #12]
 8009d36:	f7fc fe33 	bl	80069a0 <lwip_htons>
 8009d3a:	f010 0003 	ands.w	r0, r0, #3
 8009d3e:	bf18      	it	ne
 8009d40:	2001      	movne	r0, #1
 8009d42:	4458      	add	r0, fp
 8009d44:	4582      	cmp	sl, r0
 8009d46:	d2a9      	bcs.n	8009c9c <tcp_receive+0x64c>
 8009d48:	464b      	mov	r3, r9
 8009d4a:	f240 622b 	movw	r2, #1579	; 0x62b
 8009d4e:	4641      	mov	r1, r8
 8009d50:	4638      	mov	r0, r7
 8009d52:	f004 f967 	bl	800e024 <iprintf>
 8009d56:	e7a1      	b.n	8009c9c <tcp_receive+0x64c>
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8009d58:	4b78      	ldr	r3, [pc, #480]	; (8009f3c <tcp_receive+0x8ec>)
 8009d5a:	f240 5294 	movw	r2, #1428	; 0x594
 8009d5e:	4978      	ldr	r1, [pc, #480]	; (8009f40 <tcp_receive+0x8f0>)
 8009d60:	4875      	ldr	r0, [pc, #468]	; (8009f38 <tcp_receive+0x8e8>)
 8009d62:	f004 f95f 	bl	800e024 <iprintf>
 8009d66:	e671      	b.n	8009a4c <tcp_receive+0x3fc>
          TCP_WND_INC(pcb->bytes_acked, acked);
 8009d68:	f64f 71ff 	movw	r1, #65535	; 0xffff
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8009d6c:	8e62      	ldrh	r2, [r4, #50]	; 0x32
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8009d6e:	1ac9      	subs	r1, r1, r3
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8009d70:	441a      	add	r2, r3
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8009d72:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8009d76:	b292      	uxth	r2, r2
 8009d78:	4293      	cmp	r3, r2
 8009d7a:	f63f af0b 	bhi.w	8009b94 <tcp_receive+0x544>
 8009d7e:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
 8009d82:	e530      	b.n	80097e6 <tcp_receive+0x196>
              recv_data = cseg->p;
 8009d84:	6019      	str	r1, [r3, #0]
 8009d86:	e7a3      	b.n	8009cd0 <tcp_receive+0x680>
        tcp_ack(pcb);
 8009d88:	8b63      	ldrh	r3, [r4, #26]
 8009d8a:	07d8      	lsls	r0, r3, #31
 8009d8c:	d50a      	bpl.n	8009da4 <tcp_receive+0x754>
 8009d8e:	f023 0301 	bic.w	r3, r3, #1
 8009d92:	f043 0302 	orr.w	r3, r3, #2
 8009d96:	8363      	strh	r3, [r4, #26]
 8009d98:	e47f      	b.n	800969a <tcp_receive+0x4a>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8009d9a:	486a      	ldr	r0, [pc, #424]	; (8009f44 <tcp_receive+0x8f4>)
 8009d9c:	f7fe fb26 	bl	80083ec <tcp_seg_copy>
 8009da0:	6760      	str	r0, [r4, #116]	; 0x74
 8009da2:	e4d0      	b.n	8009746 <tcp_receive+0xf6>
        tcp_ack(pcb);
 8009da4:	f043 0301 	orr.w	r3, r3, #1
 8009da8:	8363      	strh	r3, [r4, #26]
 8009daa:	e476      	b.n	800969a <tcp_receive+0x4a>
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8009dac:	4865      	ldr	r0, [pc, #404]	; (8009f44 <tcp_receive+0x8f4>)
 8009dae:	f7fe fb1d 	bl	80083ec <tcp_seg_copy>
                  if (cseg != NULL) {
 8009db2:	4607      	mov	r7, r0
 8009db4:	2800      	cmp	r0, #0
 8009db6:	f43f acc6 	beq.w	8009746 <tcp_receive+0xf6>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8009dba:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009dbe:	6832      	ldr	r2, [r6, #0]
 8009dc0:	6859      	ldr	r1, [r3, #4]
 8009dc2:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 8009dc6:	440b      	add	r3, r1
 8009dc8:	1a9b      	subs	r3, r3, r2
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	dd07      	ble.n	8009dde <tcp_receive+0x78e>
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8009dce:	1a52      	subs	r2, r2, r1
                      pbuf_realloc(prev->p, prev->len);
 8009dd0:	f8d8 0004 	ldr.w	r0, [r8, #4]
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8009dd4:	b291      	uxth	r1, r2
 8009dd6:	f8a8 1008 	strh.w	r1, [r8, #8]
                      pbuf_realloc(prev->p, prev->len);
 8009dda:	f7fd fea1 	bl	8007b20 <pbuf_realloc>
                    tcp_oos_insert_segment(cseg, next);
 8009dde:	4629      	mov	r1, r5
 8009de0:	4638      	mov	r0, r7
                    prev->next = cseg;
 8009de2:	f8c8 7000 	str.w	r7, [r8]
                    tcp_oos_insert_segment(cseg, next);
 8009de6:	f7ff fb41 	bl	800946c <tcp_oos_insert_segment>
 8009dea:	e4ac      	b.n	8009746 <tcp_receive+0xf6>
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8009dec:	4b53      	ldr	r3, [pc, #332]	; (8009f3c <tcp_receive+0x8ec>)
 8009dee:	f240 6207 	movw	r2, #1543	; 0x607
 8009df2:	4955      	ldr	r1, [pc, #340]	; (8009f48 <tcp_receive+0x8f8>)
 8009df4:	4850      	ldr	r0, [pc, #320]	; (8009f38 <tcp_receive+0x8e8>)
 8009df6:	f004 f915 	bl	800e024 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8009dfa:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8009dfc:	883a      	ldrh	r2, [r7, #0]
 8009dfe:	e72a      	b.n	8009c56 <tcp_receive+0x606>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8009e00:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8009e04:	8998      	ldrh	r0, [r3, #12]
 8009e06:	f7fc fdcb 	bl	80069a0 <lwip_htons>
 8009e0a:	07c5      	lsls	r5, r0, #31
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8009e0c:	f8d9 300c 	ldr.w	r3, [r9, #12]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8009e10:	d47b      	bmi.n	8009f0a <tcp_receive+0x8ba>
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8009e12:	8998      	ldrh	r0, [r3, #12]
          inseg.len = (u16_t)pcb->rcv_wnd;
 8009e14:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8009e16:	f8a9 3008 	strh.w	r3, [r9, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8009e1a:	f7fc fdc1 	bl	80069a0 <lwip_htons>
 8009e1e:	0780      	lsls	r0, r0, #30
            inseg.len -= 1;
 8009e20:	f8b9 1008 	ldrh.w	r1, [r9, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8009e24:	d503      	bpl.n	8009e2e <tcp_receive+0x7de>
            inseg.len -= 1;
 8009e26:	3901      	subs	r1, #1
 8009e28:	b289      	uxth	r1, r1
 8009e2a:	f8a9 1008 	strh.w	r1, [r9, #8]
          pbuf_realloc(inseg.p, inseg.len);
 8009e2e:	f8d9 0004 	ldr.w	r0, [r9, #4]
 8009e32:	f7fd fe75 	bl	8007b20 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8009e36:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8009e3a:	f8b9 5008 	ldrh.w	r5, [r9, #8]
 8009e3e:	8998      	ldrh	r0, [r3, #12]
 8009e40:	f7fc fdae 	bl	80069a0 <lwip_htons>
 8009e44:	f010 0003 	ands.w	r0, r0, #3
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8009e48:	6832      	ldr	r2, [r6, #0]
          tcplen = TCP_TCPLEN(&inseg);
 8009e4a:	bf18      	it	ne
 8009e4c:	2001      	movne	r0, #1
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8009e4e:	6a61      	ldr	r1, [r4, #36]	; 0x24
          tcplen = TCP_TCPLEN(&inseg);
 8009e50:	182b      	adds	r3, r5, r0
 8009e52:	b29b      	uxth	r3, r3
 8009e54:	803b      	strh	r3, [r7, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8009e56:	4413      	add	r3, r2
 8009e58:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8009e5a:	440a      	add	r2, r1
 8009e5c:	4293      	cmp	r3, r2
 8009e5e:	f43f ae38 	beq.w	8009ad2 <tcp_receive+0x482>
 8009e62:	4b36      	ldr	r3, [pc, #216]	; (8009f3c <tcp_receive+0x8ec>)
 8009e64:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8009e68:	4938      	ldr	r1, [pc, #224]	; (8009f4c <tcp_receive+0x8fc>)
 8009e6a:	4833      	ldr	r0, [pc, #204]	; (8009f38 <tcp_receive+0x8e8>)
 8009e6c:	f004 f8da 	bl	800e024 <iprintf>
 8009e70:	e62f      	b.n	8009ad2 <tcp_receive+0x482>
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8009e72:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 8009e76:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8009e7a:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8009e7c:	4413      	add	r3, r2
 8009e7e:	b29b      	uxth	r3, r3
 8009e80:	429a      	cmp	r2, r3
 8009e82:	bf88      	it	hi
 8009e84:	460b      	movhi	r3, r1
 8009e86:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
                tcp_rexmit_fast(pcb);
 8009e8a:	4620      	mov	r0, r4
 8009e8c:	f001 fdda 	bl	800ba44 <tcp_rexmit_fast>
      if (!found_dupack) {
 8009e90:	e50c      	b.n	80098ac <tcp_receive+0x25c>
                TCP_SEQ_GT(seqno + tcplen,
 8009e92:	eba1 030c 	sub.w	r3, r1, ip
            if (next &&
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	dc01      	bgt.n	8009e9e <tcp_receive+0x84e>
            pcb->ooseq = next;
 8009e9a:	6765      	str	r5, [r4, #116]	; 0x74
 8009e9c:	e6d6      	b.n	8009c4c <tcp_receive+0x5fc>
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8009e9e:	ebac 0c0e 	sub.w	ip, ip, lr
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8009ea2:	f8d9 300c 	ldr.w	r3, [r9, #12]
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8009ea6:	f8a9 c008 	strh.w	ip, [r9, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8009eaa:	8998      	ldrh	r0, [r3, #12]
 8009eac:	f7fc fd78 	bl	80069a0 <lwip_htons>
 8009eb0:	0781      	lsls	r1, r0, #30
 8009eb2:	d504      	bpl.n	8009ebe <tcp_receive+0x86e>
                inseg.len -= 1;
 8009eb4:	f8b9 3008 	ldrh.w	r3, [r9, #8]
 8009eb8:	3b01      	subs	r3, #1
 8009eba:	f8a9 3008 	strh.w	r3, [r9, #8]
              pbuf_realloc(inseg.p, inseg.len);
 8009ebe:	f8b9 1008 	ldrh.w	r1, [r9, #8]
 8009ec2:	f8d9 0004 	ldr.w	r0, [r9, #4]
 8009ec6:	f7fd fe2b 	bl	8007b20 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8009eca:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8009ece:	f8b9 8008 	ldrh.w	r8, [r9, #8]
 8009ed2:	8998      	ldrh	r0, [r3, #12]
 8009ed4:	f7fc fd64 	bl	80069a0 <lwip_htons>
 8009ed8:	f010 0003 	ands.w	r0, r0, #3
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8009edc:	68eb      	ldr	r3, [r5, #12]
              tcplen = TCP_TCPLEN(&inseg);
 8009ede:	bf18      	it	ne
 8009ee0:	2001      	movne	r0, #1
 8009ee2:	eb08 0200 	add.w	r2, r8, r0
 8009ee6:	b292      	uxth	r2, r2
 8009ee8:	803a      	strh	r2, [r7, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8009eea:	6859      	ldr	r1, [r3, #4]
 8009eec:	6833      	ldr	r3, [r6, #0]
 8009eee:	4413      	add	r3, r2
 8009ef0:	428b      	cmp	r3, r1
 8009ef2:	d0d2      	beq.n	8009e9a <tcp_receive+0x84a>
 8009ef4:	4b11      	ldr	r3, [pc, #68]	; (8009f3c <tcp_receive+0x8ec>)
 8009ef6:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8009efa:	4915      	ldr	r1, [pc, #84]	; (8009f50 <tcp_receive+0x900>)
 8009efc:	480e      	ldr	r0, [pc, #56]	; (8009f38 <tcp_receive+0x8e8>)
 8009efe:	f004 f891 	bl	800e024 <iprintf>
        pcb->rcv_nxt = seqno + tcplen;
 8009f02:	883a      	ldrh	r2, [r7, #0]
 8009f04:	6831      	ldr	r1, [r6, #0]
 8009f06:	4411      	add	r1, r2
 8009f08:	e7c7      	b.n	8009e9a <tcp_receive+0x84a>
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8009f0a:	899d      	ldrh	r5, [r3, #12]
 8009f0c:	4628      	mov	r0, r5
 8009f0e:	f425 557c 	bic.w	r5, r5, #16128	; 0x3f00
 8009f12:	f7fc fd45 	bl	80069a0 <lwip_htons>
 8009f16:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 8009f1a:	f7fc fd41 	bl	80069a0 <lwip_htons>
 8009f1e:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8009f22:	4328      	orrs	r0, r5
 8009f24:	8198      	strh	r0, [r3, #12]
 8009f26:	b280      	uxth	r0, r0
 8009f28:	e774      	b.n	8009e14 <tcp_receive+0x7c4>
                    pcb->ooseq = cseg;
 8009f2a:	6760      	str	r0, [r4, #116]	; 0x74
 8009f2c:	e408      	b.n	8009740 <tcp_receive+0xf0>
 8009f2e:	bf00      	nop
 8009f30:	24010580 	.word	0x24010580
 8009f34:	24010584 	.word	0x24010584
 8009f38:	0800ef30 	.word	0x0800ef30
 8009f3c:	08010750 	.word	0x08010750
 8009f40:	08010854 	.word	0x08010854
 8009f44:	2401056c 	.word	0x2401056c
 8009f48:	080108f8 	.word	0x080108f8
 8009f4c:	08010884 	.word	0x08010884
 8009f50:	080108bc 	.word	0x080108bc
 8009f54:	08010918 	.word	0x08010918
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8009f58:	68db      	ldr	r3, [r3, #12]
 8009f5a:	f8b3 800c 	ldrh.w	r8, [r3, #12]
 8009f5e:	4640      	mov	r0, r8
 8009f60:	f428 587c 	bic.w	r8, r8, #16128	; 0x3f00
 8009f64:	f7fc fd1c 	bl	80069a0 <lwip_htons>
 8009f68:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 8009f6c:	f7fc fd18 	bl	80069a0 <lwip_htons>
 8009f70:	682b      	ldr	r3, [r5, #0]
 8009f72:	ea40 0008 	orr.w	r0, r0, r8
 8009f76:	68da      	ldr	r2, [r3, #12]
 8009f78:	8190      	strh	r0, [r2, #12]
 8009f7a:	e52a      	b.n	80099d2 <tcp_receive+0x382>
 8009f7c:	f8df 9004 	ldr.w	r9, [pc, #4]	; 8009f84 <tcp_receive+0x934>
 8009f80:	e595      	b.n	8009aae <tcp_receive+0x45e>
 8009f82:	bf00      	nop
 8009f84:	2401056c 	.word	0x2401056c

08009f88 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8009f88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8009f8c:	4605      	mov	r5, r0
 8009f8e:	2800      	cmp	r0, #0
 8009f90:	d07b      	beq.n	800a08a <tcp_parseopt+0x102>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8009f92:	4b4b      	ldr	r3, [pc, #300]	; (800a0c0 <tcp_parseopt+0x138>)
 8009f94:	8818      	ldrh	r0, [r3, #0]
 8009f96:	2800      	cmp	r0, #0
 8009f98:	d03c      	beq.n	800a014 <tcp_parseopt+0x8c>
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8009f9a:	4b4a      	ldr	r3, [pc, #296]	; (800a0c4 <tcp_parseopt+0x13c>)
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8009f9c:	2200      	movs	r2, #0
 8009f9e:	f8df 813c 	ldr.w	r8, [pc, #316]	; 800a0dc <tcp_parseopt+0x154>
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
          mss |= tcp_get_next_optbyte();
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8009fa2:	f240 5ab3 	movw	sl, #1459	; 0x5b3
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8009fa6:	f8b3 e000 	ldrh.w	lr, [r3]
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8009faa:	4611      	mov	r1, r2
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8009fac:	4b46      	ldr	r3, [pc, #280]	; (800a0c8 <tcp_parseopt+0x140>)
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8009fae:	f240 59b4 	movw	r9, #1460	; 0x5b4
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8009fb2:	fa5f f78e 	uxtb.w	r7, lr
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8009fb6:	f8a8 2000 	strh.w	r2, [r8]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8009fba:	681c      	ldr	r4, [r3, #0]
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8009fbc:	4b43      	ldr	r3, [pc, #268]	; (800a0cc <tcp_parseopt+0x144>)
 8009fbe:	681e      	ldr	r6, [r3, #0]
 8009fc0:	f101 0c14 	add.w	ip, r1, #20
 8009fc4:	44b4      	add	ip, r6
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8009fc6:	4288      	cmp	r0, r1
  u16_t optidx = tcp_optidx++;
 8009fc8:	f101 0301 	add.w	r3, r1, #1
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8009fcc:	d96b      	bls.n	800a0a6 <tcp_parseopt+0x11e>
  u16_t optidx = tcp_optidx++;
 8009fce:	b29b      	uxth	r3, r3
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8009fd0:	b1b4      	cbz	r4, 800a000 <tcp_parseopt+0x78>
 8009fd2:	458e      	cmp	lr, r1
    return tcphdr_opt2[idx];
 8009fd4:	eba3 0207 	sub.w	r2, r3, r7
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8009fd8:	d812      	bhi.n	800a000 <tcp_parseopt+0x78>
    return tcphdr_opt2[idx];
 8009fda:	3a01      	subs	r2, #1
 8009fdc:	b2d2      	uxtb	r2, r2
 8009fde:	5ca2      	ldrb	r2, [r4, r2]
      switch (opt) {
 8009fe0:	2a01      	cmp	r2, #1
 8009fe2:	d011      	beq.n	800a008 <tcp_parseopt+0x80>
 8009fe4:	2a02      	cmp	r2, #2
 8009fe6:	d017      	beq.n	800a018 <tcp_parseopt+0x90>
 8009fe8:	b192      	cbz	r2, 800a010 <tcp_parseopt+0x88>
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8009fea:	b10c      	cbz	r4, 8009ff0 <tcp_parseopt+0x68>
 8009fec:	4573      	cmp	r3, lr
 8009fee:	d23d      	bcs.n	800a06c <tcp_parseopt+0xe4>
    return opts[optidx];
 8009ff0:	4433      	add	r3, r6
 8009ff2:	7d1b      	ldrb	r3, [r3, #20]
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
          if (data < 2) {
 8009ff4:	2b01      	cmp	r3, #1
 8009ff6:	d95e      	bls.n	800a0b6 <tcp_parseopt+0x12e>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8009ff8:	440b      	add	r3, r1
 8009ffa:	b299      	uxth	r1, r3
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8009ffc:	2201      	movs	r2, #1
 8009ffe:	e7df      	b.n	8009fc0 <tcp_parseopt+0x38>
    return opts[optidx];
 800a000:	f89c 2000 	ldrb.w	r2, [ip]
      switch (opt) {
 800a004:	2a01      	cmp	r2, #1
 800a006:	d1ed      	bne.n	8009fe4 <tcp_parseopt+0x5c>
 800a008:	f10c 0c01 	add.w	ip, ip, #1
  u16_t optidx = tcp_optidx++;
 800a00c:	4619      	mov	r1, r3
 800a00e:	e7da      	b.n	8009fc6 <tcp_parseopt+0x3e>
 800a010:	f8a8 3000 	strh.w	r3, [r8]
      }
    }
  }
}
 800a014:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  u16_t optidx = tcp_optidx++;
 800a018:	1c8a      	adds	r2, r1, #2
 800a01a:	b292      	uxth	r2, r2
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800a01c:	b10c      	cbz	r4, 800a022 <tcp_parseopt+0x9a>
 800a01e:	4573      	cmp	r3, lr
 800a020:	d220      	bcs.n	800a064 <tcp_parseopt+0xdc>
    return opts[optidx];
 800a022:	4433      	add	r3, r6
 800a024:	7d1b      	ldrb	r3, [r3, #20]
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800a026:	2b04      	cmp	r3, #4
 800a028:	d142      	bne.n	800a0b0 <tcp_parseopt+0x128>
 800a02a:	1c53      	adds	r3, r2, #1
 800a02c:	4283      	cmp	r3, r0
 800a02e:	da3f      	bge.n	800a0b0 <tcp_parseopt+0x128>
  u16_t optidx = tcp_optidx++;
 800a030:	1ccb      	adds	r3, r1, #3
 800a032:	b29b      	uxth	r3, r3
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800a034:	2c00      	cmp	r4, #0
 800a036:	d030      	beq.n	800a09a <tcp_parseopt+0x112>
 800a038:	4596      	cmp	lr, r2
 800a03a:	d81b      	bhi.n	800a074 <tcp_parseopt+0xec>
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800a03c:	1bd2      	subs	r2, r2, r7
  u16_t optidx = tcp_optidx++;
 800a03e:	3104      	adds	r1, #4
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800a040:	459e      	cmp	lr, r3
    return tcphdr_opt2[idx];
 800a042:	b2d2      	uxtb	r2, r2
  u16_t optidx = tcp_optidx++;
 800a044:	b289      	uxth	r1, r1
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800a046:	5ca2      	ldrb	r2, [r4, r2]
 800a048:	ea4f 2202 	mov.w	r2, r2, lsl #8
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800a04c:	d81a      	bhi.n	800a084 <tcp_parseopt+0xfc>
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800a04e:	1bdb      	subs	r3, r3, r7
    return tcphdr_opt2[idx];
 800a050:	b2db      	uxtb	r3, r3
 800a052:	5ce3      	ldrb	r3, [r4, r3]
          mss |= tcp_get_next_optbyte();
 800a054:	4313      	orrs	r3, r2
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800a056:	1e5a      	subs	r2, r3, #1
 800a058:	b292      	uxth	r2, r2
 800a05a:	4552      	cmp	r2, sl
 800a05c:	bf88      	it	hi
 800a05e:	464b      	movhi	r3, r9
 800a060:	866b      	strh	r3, [r5, #50]	; 0x32
          break;
 800a062:	e7cb      	b.n	8009ffc <tcp_parseopt+0x74>
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800a064:	1bdb      	subs	r3, r3, r7
    return tcphdr_opt2[idx];
 800a066:	b2db      	uxtb	r3, r3
 800a068:	5ce3      	ldrb	r3, [r4, r3]
 800a06a:	e7dc      	b.n	800a026 <tcp_parseopt+0x9e>
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800a06c:	1bdb      	subs	r3, r3, r7
    return tcphdr_opt2[idx];
 800a06e:	b2db      	uxtb	r3, r3
 800a070:	5ce3      	ldrb	r3, [r4, r3]
 800a072:	e7bf      	b.n	8009ff4 <tcp_parseopt+0x6c>
    return opts[optidx];
 800a074:	4432      	add	r2, r6
  u16_t optidx = tcp_optidx++;
 800a076:	3104      	adds	r1, #4
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800a078:	459e      	cmp	lr, r3
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800a07a:	7d12      	ldrb	r2, [r2, #20]
  u16_t optidx = tcp_optidx++;
 800a07c:	b289      	uxth	r1, r1
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800a07e:	ea4f 2202 	mov.w	r2, r2, lsl #8
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800a082:	d9e4      	bls.n	800a04e <tcp_parseopt+0xc6>
    return opts[optidx];
 800a084:	4433      	add	r3, r6
 800a086:	7d1b      	ldrb	r3, [r3, #20]
 800a088:	e7e4      	b.n	800a054 <tcp_parseopt+0xcc>
  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800a08a:	4b11      	ldr	r3, [pc, #68]	; (800a0d0 <tcp_parseopt+0x148>)
 800a08c:	f240 727d 	movw	r2, #1917	; 0x77d
 800a090:	4910      	ldr	r1, [pc, #64]	; (800a0d4 <tcp_parseopt+0x14c>)
 800a092:	4811      	ldr	r0, [pc, #68]	; (800a0d8 <tcp_parseopt+0x150>)
 800a094:	f003 ffc6 	bl	800e024 <iprintf>
 800a098:	e77b      	b.n	8009f92 <tcp_parseopt+0xa>
    return opts[optidx];
 800a09a:	4432      	add	r2, r6
  u16_t optidx = tcp_optidx++;
 800a09c:	3104      	adds	r1, #4
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800a09e:	7d12      	ldrb	r2, [r2, #20]
  u16_t optidx = tcp_optidx++;
 800a0a0:	b289      	uxth	r1, r1
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800a0a2:	0212      	lsls	r2, r2, #8
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800a0a4:	e7ee      	b.n	800a084 <tcp_parseopt+0xfc>
 800a0a6:	2a00      	cmp	r2, #0
 800a0a8:	d0b4      	beq.n	800a014 <tcp_parseopt+0x8c>
 800a0aa:	f8a8 1000 	strh.w	r1, [r8]
 800a0ae:	e7b1      	b.n	800a014 <tcp_parseopt+0x8c>
 800a0b0:	f8a8 2000 	strh.w	r2, [r8]
 800a0b4:	e7ae      	b.n	800a014 <tcp_parseopt+0x8c>
  u16_t optidx = tcp_optidx++;
 800a0b6:	3102      	adds	r1, #2
 800a0b8:	f8a8 1000 	strh.w	r1, [r8]
 800a0bc:	e7aa      	b.n	800a014 <tcp_parseopt+0x8c>
 800a0be:	bf00      	nop
 800a0c0:	240105a0 	.word	0x240105a0
 800a0c4:	24010598 	.word	0x24010598
 800a0c8:	2401059c 	.word	0x2401059c
 800a0cc:	24010594 	.word	0x24010594
 800a0d0:	08010750 	.word	0x08010750
 800a0d4:	08010940 	.word	0x08010940
 800a0d8:	0800ef30 	.word	0x0800ef30
 800a0dc:	24010590 	.word	0x24010590

0800a0e0 <tcp_input>:
{
 800a0e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0e4:	4604      	mov	r4, r0
 800a0e6:	b087      	sub	sp, #28
  LWIP_ASSERT_CORE_LOCKED();
 800a0e8:	f7f9 ff26 	bl	8003f38 <sys_check_core_locking>
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800a0ec:	2c00      	cmp	r4, #0
 800a0ee:	f000 80d6 	beq.w	800a29e <tcp_input+0x1be>
  if (p->len < TCP_HLEN) {
 800a0f2:	8963      	ldrh	r3, [r4, #10]
  tcphdr = (struct tcp_hdr *)p->payload;
 800a0f4:	4e6d      	ldr	r6, [pc, #436]	; (800a2ac <tcp_input+0x1cc>)
 800a0f6:	6862      	ldr	r2, [r4, #4]
  if (p->len < TCP_HLEN) {
 800a0f8:	2b13      	cmp	r3, #19
  tcphdr = (struct tcp_hdr *)p->payload;
 800a0fa:	6032      	str	r2, [r6, #0]
  if (p->len < TCP_HLEN) {
 800a0fc:	d805      	bhi.n	800a10a <tcp_input+0x2a>
  pbuf_free(p);
 800a0fe:	4620      	mov	r0, r4
}
 800a100:	b007      	add	sp, #28
 800a102:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 800a106:	f7fd bbed 	b.w	80078e4 <pbuf_free>
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800a10a:	4f69      	ldr	r7, [pc, #420]	; (800a2b0 <tcp_input+0x1d0>)
 800a10c:	6839      	ldr	r1, [r7, #0]
 800a10e:	6978      	ldr	r0, [r7, #20]
 800a110:	f003 f90a 	bl	800d328 <ip4_addr_isbroadcast_u32>
 800a114:	4605      	mov	r5, r0
 800a116:	2800      	cmp	r0, #0
 800a118:	d1f1      	bne.n	800a0fe <tcp_input+0x1e>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800a11a:	697b      	ldr	r3, [r7, #20]
 800a11c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800a120:	2be0      	cmp	r3, #224	; 0xe0
 800a122:	d0ec      	beq.n	800a0fe <tcp_input+0x1e>
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800a124:	6833      	ldr	r3, [r6, #0]
 800a126:	8998      	ldrh	r0, [r3, #12]
 800a128:	f7fc fc3a 	bl	80069a0 <lwip_htons>
 800a12c:	0a80      	lsrs	r0, r0, #10
 800a12e:	f000 01fc 	and.w	r1, r0, #252	; 0xfc
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800a132:	2913      	cmp	r1, #19
 800a134:	d9e3      	bls.n	800a0fe <tcp_input+0x1e>
 800a136:	8923      	ldrh	r3, [r4, #8]
 800a138:	b28a      	uxth	r2, r1
 800a13a:	428b      	cmp	r3, r1
 800a13c:	d3df      	bcc.n	800a0fe <tcp_input+0x1e>
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800a13e:	f1a2 0314 	sub.w	r3, r2, #20
  if (p->len >= hdrlen_bytes) {
 800a142:	8960      	ldrh	r0, [r4, #10]
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800a144:	f8df 919c 	ldr.w	r9, [pc, #412]	; 800a2e4 <tcp_input+0x204>
 800a148:	b29b      	uxth	r3, r3
  tcphdr_opt2 = NULL;
 800a14a:	f8df 819c 	ldr.w	r8, [pc, #412]	; 800a2e8 <tcp_input+0x208>
  if (p->len >= hdrlen_bytes) {
 800a14e:	4290      	cmp	r0, r2
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800a150:	f8a9 3000 	strh.w	r3, [r9]
  tcphdr_opt2 = NULL;
 800a154:	f8c8 5000 	str.w	r5, [r8]
  if (p->len >= hdrlen_bytes) {
 800a158:	f080 819a 	bcs.w	800a490 <tcp_input+0x3b0>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800a15c:	6823      	ldr	r3, [r4, #0]
 800a15e:	2b00      	cmp	r3, #0
 800a160:	f000 836e 	beq.w	800a840 <tcp_input+0x760>
    pbuf_remove_header(p, TCP_HLEN);
 800a164:	2114      	movs	r1, #20
 800a166:	4620      	mov	r0, r4
 800a168:	f7fd fb50 	bl	800780c <pbuf_remove_header>
    tcphdr_opt1len = p->len;
 800a16c:	8965      	ldrh	r5, [r4, #10]
 800a16e:	4b51      	ldr	r3, [pc, #324]	; (800a2b4 <tcp_input+0x1d4>)
    pbuf_remove_header(p, tcphdr_opt1len);
 800a170:	4620      	mov	r0, r4
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800a172:	f8b9 a000 	ldrh.w	sl, [r9]
    pbuf_remove_header(p, tcphdr_opt1len);
 800a176:	4629      	mov	r1, r5
    tcphdr_opt1len = p->len;
 800a178:	801d      	strh	r5, [r3, #0]
    pbuf_remove_header(p, tcphdr_opt1len);
 800a17a:	f7fd fb47 	bl	800780c <pbuf_remove_header>
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800a17e:	ebaa 0905 	sub.w	r9, sl, r5
    if (opt2len > p->next->len) {
 800a182:	6820      	ldr	r0, [r4, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800a184:	fa1f f989 	uxth.w	r9, r9
    if (opt2len > p->next->len) {
 800a188:	8943      	ldrh	r3, [r0, #10]
 800a18a:	454b      	cmp	r3, r9
 800a18c:	d3b7      	bcc.n	800a0fe <tcp_input+0x1e>
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800a18e:	6843      	ldr	r3, [r0, #4]
    pbuf_remove_header(p->next, opt2len);
 800a190:	4649      	mov	r1, r9
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800a192:	f8c8 3000 	str.w	r3, [r8]
    pbuf_remove_header(p->next, opt2len);
 800a196:	f7fd fb39 	bl	800780c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800a19a:	8923      	ldrh	r3, [r4, #8]
    LWIP_ASSERT("p->len == 0", p->len == 0);
 800a19c:	8962      	ldrh	r2, [r4, #10]
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800a19e:	442b      	add	r3, r5
 800a1a0:	eba3 030a 	sub.w	r3, r3, sl
 800a1a4:	b29b      	uxth	r3, r3
 800a1a6:	8123      	strh	r3, [r4, #8]
    LWIP_ASSERT("p->len == 0", p->len == 0);
 800a1a8:	2a00      	cmp	r2, #0
 800a1aa:	f040 8350 	bne.w	800a84e <tcp_input+0x76e>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800a1ae:	6822      	ldr	r2, [r4, #0]
 800a1b0:	8912      	ldrh	r2, [r2, #8]
 800a1b2:	429a      	cmp	r2, r3
 800a1b4:	d005      	beq.n	800a1c2 <tcp_input+0xe2>
 800a1b6:	4b40      	ldr	r3, [pc, #256]	; (800a2b8 <tcp_input+0x1d8>)
 800a1b8:	22e0      	movs	r2, #224	; 0xe0
 800a1ba:	4940      	ldr	r1, [pc, #256]	; (800a2bc <tcp_input+0x1dc>)
 800a1bc:	4840      	ldr	r0, [pc, #256]	; (800a2c0 <tcp_input+0x1e0>)
 800a1be:	f003 ff31 	bl	800e024 <iprintf>
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800a1c2:	6835      	ldr	r5, [r6, #0]
 800a1c4:	8828      	ldrh	r0, [r5, #0]
 800a1c6:	f7fc fbeb 	bl	80069a0 <lwip_htons>
 800a1ca:	8028      	strh	r0, [r5, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800a1cc:	6835      	ldr	r5, [r6, #0]
 800a1ce:	8868      	ldrh	r0, [r5, #2]
 800a1d0:	f7fc fbe6 	bl	80069a0 <lwip_htons>
 800a1d4:	8068      	strh	r0, [r5, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800a1d6:	6835      	ldr	r5, [r6, #0]
 800a1d8:	6868      	ldr	r0, [r5, #4]
 800a1da:	f7fc fbe5 	bl	80069a8 <lwip_htonl>
 800a1de:	4b39      	ldr	r3, [pc, #228]	; (800a2c4 <tcp_input+0x1e4>)
 800a1e0:	6068      	str	r0, [r5, #4]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800a1e2:	6835      	ldr	r5, [r6, #0]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800a1e4:	6018      	str	r0, [r3, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800a1e6:	68a8      	ldr	r0, [r5, #8]
 800a1e8:	f7fc fbde 	bl	80069a8 <lwip_htonl>
 800a1ec:	4b36      	ldr	r3, [pc, #216]	; (800a2c8 <tcp_input+0x1e8>)
 800a1ee:	60a8      	str	r0, [r5, #8]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800a1f0:	6835      	ldr	r5, [r6, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800a1f2:	6018      	str	r0, [r3, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800a1f4:	89e8      	ldrh	r0, [r5, #14]
 800a1f6:	f7fc fbd3 	bl	80069a0 <lwip_htons>
  flags = TCPH_FLAGS(tcphdr);
 800a1fa:	6833      	ldr	r3, [r6, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800a1fc:	81e8      	strh	r0, [r5, #14]
  flags = TCPH_FLAGS(tcphdr);
 800a1fe:	8998      	ldrh	r0, [r3, #12]
 800a200:	f7fc fbce 	bl	80069a0 <lwip_htons>
 800a204:	4931      	ldr	r1, [pc, #196]	; (800a2cc <tcp_input+0x1ec>)
 800a206:	f000 033f 	and.w	r3, r0, #63	; 0x3f
  tcplen = p->tot_len;
 800a20a:	8922      	ldrh	r2, [r4, #8]
  flags = TCPH_FLAGS(tcphdr);
 800a20c:	700b      	strb	r3, [r1, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800a20e:	0783      	lsls	r3, r0, #30
 800a210:	f040 8144 	bne.w	800a49c <tcp_input+0x3bc>
  tcplen = p->tot_len;
 800a214:	4b2e      	ldr	r3, [pc, #184]	; (800a2d0 <tcp_input+0x1f0>)
 800a216:	9305      	str	r3, [sp, #20]
 800a218:	801a      	strh	r2, [r3, #0]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a21a:	4b2e      	ldr	r3, [pc, #184]	; (800a2d4 <tcp_input+0x1f4>)
 800a21c:	681d      	ldr	r5, [r3, #0]
 800a21e:	2d00      	cmp	r5, #0
 800a220:	f000 80e5 	beq.w	800a3ee <tcp_input+0x30e>
  prev = NULL;
 800a224:	f04f 0800 	mov.w	r8, #0
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800a228:	f8df a08c 	ldr.w	sl, [pc, #140]	; 800a2b8 <tcp_input+0x1d8>
 800a22c:	f8df b0bc 	ldr.w	fp, [pc, #188]	; 800a2ec <tcp_input+0x20c>
 800a230:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800a2c0 <tcp_input+0x1e0>
 800a234:	e017      	b.n	800a266 <tcp_input+0x186>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800a236:	2b0a      	cmp	r3, #10
 800a238:	d021      	beq.n	800a27e <tcp_input+0x19e>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800a23a:	2b01      	cmp	r3, #1
 800a23c:	d028      	beq.n	800a290 <tcp_input+0x1b0>
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a23e:	7a2a      	ldrb	r2, [r5, #8]
 800a240:	b132      	cbz	r2, 800a250 <tcp_input+0x170>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a248:	3301      	adds	r3, #1
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a24a:	b2db      	uxtb	r3, r3
 800a24c:	429a      	cmp	r2, r3
 800a24e:	d104      	bne.n	800a25a <tcp_input+0x17a>
    if (pcb->remote_port == tcphdr->src &&
 800a250:	6833      	ldr	r3, [r6, #0]
 800a252:	8b29      	ldrh	r1, [r5, #24]
 800a254:	881a      	ldrh	r2, [r3, #0]
 800a256:	4291      	cmp	r1, r2
 800a258:	d04a      	beq.n	800a2f0 <tcp_input+0x210>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a25a:	68eb      	ldr	r3, [r5, #12]
 800a25c:	46a8      	mov	r8, r5
 800a25e:	2b00      	cmp	r3, #0
 800a260:	f000 80c5 	beq.w	800a3ee <tcp_input+0x30e>
 800a264:	461d      	mov	r5, r3
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800a266:	7d2b      	ldrb	r3, [r5, #20]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d1e4      	bne.n	800a236 <tcp_input+0x156>
 800a26c:	4653      	mov	r3, sl
 800a26e:	22fb      	movs	r2, #251	; 0xfb
 800a270:	4659      	mov	r1, fp
 800a272:	4648      	mov	r0, r9
 800a274:	f003 fed6 	bl	800e024 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800a278:	7d2b      	ldrb	r3, [r5, #20]
 800a27a:	2b0a      	cmp	r3, #10
 800a27c:	d1dd      	bne.n	800a23a <tcp_input+0x15a>
 800a27e:	4653      	mov	r3, sl
 800a280:	22fc      	movs	r2, #252	; 0xfc
 800a282:	4915      	ldr	r1, [pc, #84]	; (800a2d8 <tcp_input+0x1f8>)
 800a284:	4648      	mov	r0, r9
 800a286:	f003 fecd 	bl	800e024 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800a28a:	7d2b      	ldrb	r3, [r5, #20]
 800a28c:	2b01      	cmp	r3, #1
 800a28e:	d1d6      	bne.n	800a23e <tcp_input+0x15e>
 800a290:	4653      	mov	r3, sl
 800a292:	22fd      	movs	r2, #253	; 0xfd
 800a294:	4911      	ldr	r1, [pc, #68]	; (800a2dc <tcp_input+0x1fc>)
 800a296:	4648      	mov	r0, r9
 800a298:	f003 fec4 	bl	800e024 <iprintf>
 800a29c:	e7cf      	b.n	800a23e <tcp_input+0x15e>
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800a29e:	4b06      	ldr	r3, [pc, #24]	; (800a2b8 <tcp_input+0x1d8>)
 800a2a0:	2283      	movs	r2, #131	; 0x83
 800a2a2:	490f      	ldr	r1, [pc, #60]	; (800a2e0 <tcp_input+0x200>)
 800a2a4:	4806      	ldr	r0, [pc, #24]	; (800a2c0 <tcp_input+0x1e0>)
 800a2a6:	f003 febd 	bl	800e024 <iprintf>
 800a2aa:	e722      	b.n	800a0f2 <tcp_input+0x12>
 800a2ac:	24010594 	.word	0x24010594
 800a2b0:	24009a88 	.word	0x24009a88
 800a2b4:	24010598 	.word	0x24010598
 800a2b8:	08010750 	.word	0x08010750
 800a2bc:	08010990 	.word	0x08010990
 800a2c0:	0800ef30 	.word	0x0800ef30
 800a2c4:	24010588 	.word	0x24010588
 800a2c8:	24010564 	.word	0x24010564
 800a2cc:	24010568 	.word	0x24010568
 800a2d0:	240105a2 	.word	0x240105a2
 800a2d4:	24010548 	.word	0x24010548
 800a2d8:	080109d8 	.word	0x080109d8
 800a2dc:	08010a04 	.word	0x08010a04
 800a2e0:	0801095c 	.word	0x0801095c
 800a2e4:	240105a0 	.word	0x240105a0
 800a2e8:	2401059c 	.word	0x2401059c
 800a2ec:	080109b0 	.word	0x080109b0
    if (pcb->remote_port == tcphdr->src &&
 800a2f0:	885b      	ldrh	r3, [r3, #2]
 800a2f2:	8aea      	ldrh	r2, [r5, #22]
 800a2f4:	429a      	cmp	r2, r3
 800a2f6:	d1b0      	bne.n	800a25a <tcp_input+0x17a>
        pcb->local_port == tcphdr->dest &&
 800a2f8:	686a      	ldr	r2, [r5, #4]
 800a2fa:	693b      	ldr	r3, [r7, #16]
 800a2fc:	429a      	cmp	r2, r3
 800a2fe:	d1ac      	bne.n	800a25a <tcp_input+0x17a>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a300:	682a      	ldr	r2, [r5, #0]
 800a302:	697b      	ldr	r3, [r7, #20]
 800a304:	429a      	cmp	r2, r3
 800a306:	d1a8      	bne.n	800a25a <tcp_input+0x17a>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800a308:	68eb      	ldr	r3, [r5, #12]
 800a30a:	42ab      	cmp	r3, r5
 800a30c:	f000 8405 	beq.w	800ab1a <tcp_input+0xa3a>
      if (prev != NULL) {
 800a310:	f1b8 0f00 	cmp.w	r8, #0
 800a314:	d009      	beq.n	800a32a <tcp_input+0x24a>
        pcb->next = tcp_active_pcbs;
 800a316:	4a6e      	ldr	r2, [pc, #440]	; (800a4d0 <tcp_input+0x3f0>)
        prev->next = pcb->next;
 800a318:	f8c8 300c 	str.w	r3, [r8, #12]
        pcb->next = tcp_active_pcbs;
 800a31c:	6813      	ldr	r3, [r2, #0]
        tcp_active_pcbs = pcb;
 800a31e:	6015      	str	r5, [r2, #0]
        pcb->next = tcp_active_pcbs;
 800a320:	60eb      	str	r3, [r5, #12]
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800a322:	68eb      	ldr	r3, [r5, #12]
 800a324:	42ab      	cmp	r3, r5
 800a326:	f000 8432 	beq.w	800ab8e <tcp_input+0xaae>
    inseg.next = NULL;
 800a32a:	2300      	movs	r3, #0
 800a32c:	4f69      	ldr	r7, [pc, #420]	; (800a4d4 <tcp_input+0x3f4>)
    recv_data = NULL;
 800a32e:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a4f0 <tcp_input+0x410>
    recv_flags = 0;
 800a332:	f8df 91c0 	ldr.w	r9, [pc, #448]	; 800a4f4 <tcp_input+0x414>
    recv_acked = 0;
 800a336:	f8df b1c0 	ldr.w	fp, [pc, #448]	; 800a4f8 <tcp_input+0x418>
    inseg.len = p->tot_len;
 800a33a:	8922      	ldrh	r2, [r4, #8]
    inseg.next = NULL;
 800a33c:	603b      	str	r3, [r7, #0]
    recv_data = NULL;
 800a33e:	f8c8 3000 	str.w	r3, [r8]
    recv_flags = 0;
 800a342:	f889 3000 	strb.w	r3, [r9]
    recv_acked = 0;
 800a346:	f8ab 3000 	strh.w	r3, [fp]
    if (flags & TCP_PSH) {
 800a34a:	4b63      	ldr	r3, [pc, #396]	; (800a4d8 <tcp_input+0x3f8>)
    inseg.len = p->tot_len;
 800a34c:	813a      	strh	r2, [r7, #8]
    if (flags & TCP_PSH) {
 800a34e:	781b      	ldrb	r3, [r3, #0]
    inseg.tcphdr = tcphdr;
 800a350:	6832      	ldr	r2, [r6, #0]
    inseg.p = p;
 800a352:	607c      	str	r4, [r7, #4]
    inseg.tcphdr = tcphdr;
 800a354:	60fa      	str	r2, [r7, #12]
    if (flags & TCP_PSH) {
 800a356:	071a      	lsls	r2, r3, #28
 800a358:	d503      	bpl.n	800a362 <tcp_input+0x282>
      p->flags |= PBUF_FLAG_PUSH;
 800a35a:	7b62      	ldrb	r2, [r4, #13]
 800a35c:	f042 0201 	orr.w	r2, r2, #1
 800a360:	7362      	strb	r2, [r4, #13]
    if (pcb->refused_data != NULL) {
 800a362:	6faa      	ldr	r2, [r5, #120]	; 0x78
 800a364:	b172      	cbz	r2, 800a384 <tcp_input+0x2a4>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800a366:	4628      	mov	r0, r5
 800a368:	f7fe ff6e 	bl	8009248 <tcp_process_refused_data>
 800a36c:	300d      	adds	r0, #13
 800a36e:	f000 8276 	beq.w	800a85e <tcp_input+0x77e>
 800a372:	6fab      	ldr	r3, [r5, #120]	; 0x78
 800a374:	b123      	cbz	r3, 800a380 <tcp_input+0x2a0>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800a376:	9b05      	ldr	r3, [sp, #20]
 800a378:	881b      	ldrh	r3, [r3, #0]
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	f040 826f 	bne.w	800a85e <tcp_input+0x77e>
  if (flags & TCP_RST) {
 800a380:	4b55      	ldr	r3, [pc, #340]	; (800a4d8 <tcp_input+0x3f8>)
 800a382:	781b      	ldrb	r3, [r3, #0]
    tcp_input_pcb = pcb;
 800a384:	4c55      	ldr	r4, [pc, #340]	; (800a4dc <tcp_input+0x3fc>)
  if (flags & TCP_RST) {
 800a386:	0759      	lsls	r1, r3, #29
    tcp_input_pcb = pcb;
 800a388:	6025      	str	r5, [r4, #0]
  if (flags & TCP_RST) {
 800a38a:	f140 814a 	bpl.w	800a622 <tcp_input+0x542>
    if (pcb->state == SYN_SENT) {
 800a38e:	7d29      	ldrb	r1, [r5, #20]
 800a390:	2902      	cmp	r1, #2
 800a392:	f000 8331 	beq.w	800a9f8 <tcp_input+0x918>
      if (seqno == pcb->rcv_nxt) {
 800a396:	4b52      	ldr	r3, [pc, #328]	; (800a4e0 <tcp_input+0x400>)
 800a398:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	429a      	cmp	r2, r3
 800a39e:	f000 8415 	beq.w	800abcc <tcp_input+0xaec>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800a3a2:	1a9b      	subs	r3, r3, r2
 800a3a4:	d404      	bmi.n	800a3b0 <tcp_input+0x2d0>
 800a3a6:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
 800a3a8:	1a9b      	subs	r3, r3, r2
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	f340 831f 	ble.w	800a9ee <tcp_input+0x90e>
      if (recv_flags & TF_RESET) {
 800a3b0:	f899 3000 	ldrb.w	r3, [r9]
 800a3b4:	0718      	lsls	r0, r3, #28
 800a3b6:	f140 8258 	bpl.w	800a86a <tcp_input+0x78a>
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800a3ba:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 800a3be:	b11b      	cbz	r3, 800a3c8 <tcp_input+0x2e8>
 800a3c0:	f06f 010d 	mvn.w	r1, #13
 800a3c4:	6928      	ldr	r0, [r5, #16]
 800a3c6:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800a3c8:	4841      	ldr	r0, [pc, #260]	; (800a4d0 <tcp_input+0x3f0>)
 800a3ca:	4629      	mov	r1, r5
 800a3cc:	f7fe fbba 	bl	8008b44 <tcp_pcb_remove>
        tcp_free(pcb);
 800a3d0:	4628      	mov	r0, r5
 800a3d2:	f7fd fda3 	bl	8007f1c <tcp_free>
    tcp_input_pcb = NULL;
 800a3d6:	2500      	movs	r5, #0
    if (inseg.p != NULL) {
 800a3d8:	6878      	ldr	r0, [r7, #4]
    tcp_input_pcb = NULL;
 800a3da:	6025      	str	r5, [r4, #0]
    recv_data = NULL;
 800a3dc:	f8c8 5000 	str.w	r5, [r8]
    if (inseg.p != NULL) {
 800a3e0:	b110      	cbz	r0, 800a3e8 <tcp_input+0x308>
      pbuf_free(inseg.p);
 800a3e2:	f7fd fa7f 	bl	80078e4 <pbuf_free>
      inseg.p = NULL;
 800a3e6:	607d      	str	r5, [r7, #4]
}
 800a3e8:	b007      	add	sp, #28
 800a3ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a3ee:	4b3d      	ldr	r3, [pc, #244]	; (800a4e4 <tcp_input+0x404>)
 800a3f0:	681d      	ldr	r5, [r3, #0]
 800a3f2:	2d00      	cmp	r5, #0
 800a3f4:	d05b      	beq.n	800a4ae <tcp_input+0x3ce>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800a3f6:	f8df 8104 	ldr.w	r8, [pc, #260]	; 800a4fc <tcp_input+0x41c>
 800a3fa:	f8df b104 	ldr.w	fp, [pc, #260]	; 800a500 <tcp_input+0x420>
 800a3fe:	f8df 9104 	ldr.w	r9, [pc, #260]	; 800a504 <tcp_input+0x424>
 800a402:	e002      	b.n	800a40a <tcp_input+0x32a>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a404:	68ed      	ldr	r5, [r5, #12]
 800a406:	2d00      	cmp	r5, #0
 800a408:	d051      	beq.n	800a4ae <tcp_input+0x3ce>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800a40a:	7d2b      	ldrb	r3, [r5, #20]
 800a40c:	2b0a      	cmp	r3, #10
 800a40e:	4643      	mov	r3, r8
 800a410:	d005      	beq.n	800a41e <tcp_input+0x33e>
 800a412:	f240 121f 	movw	r2, #287	; 0x11f
 800a416:	4659      	mov	r1, fp
 800a418:	4648      	mov	r0, r9
 800a41a:	f003 fe03 	bl	800e024 <iprintf>
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a41e:	7a2a      	ldrb	r2, [r5, #8]
 800a420:	b132      	cbz	r2, 800a430 <tcp_input+0x350>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a428:	3301      	adds	r3, #1
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a42a:	b2db      	uxtb	r3, r3
 800a42c:	429a      	cmp	r2, r3
 800a42e:	d1e9      	bne.n	800a404 <tcp_input+0x324>
      if (pcb->remote_port == tcphdr->src &&
 800a430:	6832      	ldr	r2, [r6, #0]
 800a432:	8b2b      	ldrh	r3, [r5, #24]
 800a434:	8811      	ldrh	r1, [r2, #0]
 800a436:	428b      	cmp	r3, r1
 800a438:	d1e4      	bne.n	800a404 <tcp_input+0x324>
          pcb->local_port == tcphdr->dest &&
 800a43a:	8852      	ldrh	r2, [r2, #2]
      if (pcb->remote_port == tcphdr->src &&
 800a43c:	8ae8      	ldrh	r0, [r5, #22]
 800a43e:	4290      	cmp	r0, r2
 800a440:	d1e0      	bne.n	800a404 <tcp_input+0x324>
          pcb->local_port == tcphdr->dest &&
 800a442:	6869      	ldr	r1, [r5, #4]
 800a444:	693a      	ldr	r2, [r7, #16]
 800a446:	4291      	cmp	r1, r2
 800a448:	d1dc      	bne.n	800a404 <tcp_input+0x324>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a44a:	6829      	ldr	r1, [r5, #0]
 800a44c:	697a      	ldr	r2, [r7, #20]
 800a44e:	4291      	cmp	r1, r2
 800a450:	d1d8      	bne.n	800a404 <tcp_input+0x324>
  if (flags & TCP_RST) {
 800a452:	4a21      	ldr	r2, [pc, #132]	; (800a4d8 <tcp_input+0x3f8>)
 800a454:	7812      	ldrb	r2, [r2, #0]
 800a456:	0757      	lsls	r7, r2, #29
 800a458:	f53f ae51 	bmi.w	800a0fe <tcp_input+0x1e>
  if (flags & TCP_SYN) {
 800a45c:	0796      	lsls	r6, r2, #30
 800a45e:	f140 83aa 	bpl.w	800abb6 <tcp_input+0xad6>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800a462:	4a1f      	ldr	r2, [pc, #124]	; (800a4e0 <tcp_input+0x400>)
 800a464:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800a466:	6812      	ldr	r2, [r2, #0]
 800a468:	1a51      	subs	r1, r2, r1
 800a46a:	d404      	bmi.n	800a476 <tcp_input+0x396>
 800a46c:	8d2e      	ldrh	r6, [r5, #40]	; 0x28
 800a46e:	1b89      	subs	r1, r1, r6
 800a470:	2900      	cmp	r1, #0
 800a472:	f340 83b6 	ble.w	800abe2 <tcp_input+0xb02>
  if ((tcplen > 0)) {
 800a476:	9b05      	ldr	r3, [sp, #20]
 800a478:	881b      	ldrh	r3, [r3, #0]
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	f43f ae3f 	beq.w	800a0fe <tcp_input+0x1e>
    tcp_ack_now(pcb);
 800a480:	8b6b      	ldrh	r3, [r5, #26]
    tcp_output(pcb);
 800a482:	4628      	mov	r0, r5
    tcp_ack_now(pcb);
 800a484:	f043 0302 	orr.w	r3, r3, #2
 800a488:	836b      	strh	r3, [r5, #26]
    tcp_output(pcb);
 800a48a:	f001 fb8f 	bl	800bbac <tcp_output>
        pbuf_free(p);
 800a48e:	e636      	b.n	800a0fe <tcp_input+0x1e>
    tcphdr_opt1len = tcphdr_optlen;
 800a490:	4a15      	ldr	r2, [pc, #84]	; (800a4e8 <tcp_input+0x408>)
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800a492:	4620      	mov	r0, r4
    tcphdr_opt1len = tcphdr_optlen;
 800a494:	8013      	strh	r3, [r2, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800a496:	f7fd f9b9 	bl	800780c <pbuf_remove_header>
 800a49a:	e692      	b.n	800a1c2 <tcp_input+0xe2>
    tcplen++;
 800a49c:	1c53      	adds	r3, r2, #1
 800a49e:	4913      	ldr	r1, [pc, #76]	; (800a4ec <tcp_input+0x40c>)
 800a4a0:	b29b      	uxth	r3, r3
 800a4a2:	9105      	str	r1, [sp, #20]
    if (tcplen < p->tot_len) {
 800a4a4:	429a      	cmp	r2, r3
    tcplen++;
 800a4a6:	800b      	strh	r3, [r1, #0]
    if (tcplen < p->tot_len) {
 800a4a8:	f67f aeb7 	bls.w	800a21a <tcp_input+0x13a>
 800a4ac:	e627      	b.n	800a0fe <tcp_input+0x1e>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a4ae:	f8df 9058 	ldr.w	r9, [pc, #88]	; 800a508 <tcp_input+0x428>
 800a4b2:	f8d9 8000 	ldr.w	r8, [r9]
 800a4b6:	f1b8 0f00 	cmp.w	r8, #0
 800a4ba:	f000 8226 	beq.w	800a90a <tcp_input+0x82a>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800a4be:	f8d7 c004 	ldr.w	ip, [r7, #4]
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800a4c2:	4645      	mov	r5, r8
      if (lpcb->local_port == tcphdr->dest) {
 800a4c4:	6830      	ldr	r0, [r6, #0]
    prev = NULL;
 800a4c6:	2100      	movs	r1, #0
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800a4c8:	f8d7 e014 	ldr.w	lr, [r7, #20]
 800a4cc:	e024      	b.n	800a518 <tcp_input+0x438>
 800a4ce:	bf00      	nop
 800a4d0:	24010548 	.word	0x24010548
 800a4d4:	2401056c 	.word	0x2401056c
 800a4d8:	24010568 	.word	0x24010568
 800a4dc:	2401058c 	.word	0x2401058c
 800a4e0:	24010588 	.word	0x24010588
 800a4e4:	24010560 	.word	0x24010560
 800a4e8:	24010598 	.word	0x24010598
 800a4ec:	240105a2 	.word	0x240105a2
 800a4f0:	24010580 	.word	0x24010580
 800a4f4:	24010584 	.word	0x24010584
 800a4f8:	2401057c 	.word	0x2401057c
 800a4fc:	08010750 	.word	0x08010750
 800a500:	08010a84 	.word	0x08010a84
 800a504:	0800ef30 	.word	0x0800ef30
 800a508:	24010554 	.word	0x24010554
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a50c:	68eb      	ldr	r3, [r5, #12]
 800a50e:	4629      	mov	r1, r5
 800a510:	461d      	mov	r5, r3
 800a512:	2b00      	cmp	r3, #0
 800a514:	f000 81fa 	beq.w	800a90c <tcp_input+0x82c>
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800a518:	7a2a      	ldrb	r2, [r5, #8]
 800a51a:	b12a      	cbz	r2, 800a528 <tcp_input+0x448>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800a51c:	f89c 3030 	ldrb.w	r3, [ip, #48]	; 0x30
 800a520:	3301      	adds	r3, #1
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800a522:	b2db      	uxtb	r3, r3
 800a524:	429a      	cmp	r2, r3
 800a526:	d1f1      	bne.n	800a50c <tcp_input+0x42c>
      if (lpcb->local_port == tcphdr->dest) {
 800a528:	8aea      	ldrh	r2, [r5, #22]
 800a52a:	8843      	ldrh	r3, [r0, #2]
 800a52c:	429a      	cmp	r2, r3
 800a52e:	d1ed      	bne.n	800a50c <tcp_input+0x42c>
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800a530:	682a      	ldr	r2, [r5, #0]
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800a532:	b10a      	cbz	r2, 800a538 <tcp_input+0x458>
 800a534:	4572      	cmp	r2, lr
 800a536:	d1e9      	bne.n	800a50c <tcp_input+0x42c>
      if (prev != NULL) {
 800a538:	b129      	cbz	r1, 800a546 <tcp_input+0x466>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800a53a:	68ea      	ldr	r2, [r5, #12]
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800a53c:	f8c9 5000 	str.w	r5, [r9]
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800a540:	60ca      	str	r2, [r1, #12]
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800a542:	f8c5 800c 	str.w	r8, [r5, #12]
  if (flags & TCP_RST) {
 800a546:	4aa8      	ldr	r2, [pc, #672]	; (800a7e8 <tcp_input+0x708>)
 800a548:	7812      	ldrb	r2, [r2, #0]
 800a54a:	0751      	lsls	r1, r2, #29
 800a54c:	f53f add7 	bmi.w	800a0fe <tcp_input+0x1e>
  if (flags & TCP_ACK) {
 800a550:	f012 0810 	ands.w	r8, r2, #16
 800a554:	f040 8266 	bne.w	800aa24 <tcp_input+0x944>
  } else if (flags & TCP_SYN) {
 800a558:	0790      	lsls	r0, r2, #30
 800a55a:	f57f add0 	bpl.w	800a0fe <tcp_input+0x1e>
    npcb = tcp_alloc(pcb->prio);
 800a55e:	7d68      	ldrb	r0, [r5, #21]
 800a560:	f7fe fc9e 	bl	8008ea0 <tcp_alloc>
    if (npcb == NULL) {
 800a564:	4681      	mov	r9, r0
 800a566:	2800      	cmp	r0, #0
 800a568:	f000 82c6 	beq.w	800aaf8 <tcp_input+0xa18>
    npcb->rcv_nxt = seqno + 1;
 800a56c:	4b9f      	ldr	r3, [pc, #636]	; (800a7ec <tcp_input+0x70c>)
    npcb->remote_port = tcphdr->src;
 800a56e:	6831      	ldr	r1, [r6, #0]
    npcb->rcv_nxt = seqno + 1;
 800a570:	681b      	ldr	r3, [r3, #0]
    npcb->remote_port = tcphdr->src;
 800a572:	780a      	ldrb	r2, [r1, #0]
    npcb->rcv_nxt = seqno + 1;
 800a574:	3301      	adds	r3, #1
    npcb->remote_port = tcphdr->src;
 800a576:	7849      	ldrb	r1, [r1, #1]
 800a578:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    npcb->local_port = pcb->local_port;
 800a57c:	8ae9      	ldrh	r1, [r5, #22]
    npcb->rcv_nxt = seqno + 1;
 800a57e:	6243      	str	r3, [r0, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800a580:	62c3      	str	r3, [r0, #44]	; 0x2c
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800a582:	697b      	ldr	r3, [r7, #20]
    npcb->remote_port = tcphdr->src;
 800a584:	8302      	strh	r2, [r0, #24]
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800a586:	6003      	str	r3, [r0, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800a588:	693b      	ldr	r3, [r7, #16]
    npcb->local_port = pcb->local_port;
 800a58a:	82c1      	strh	r1, [r0, #22]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800a58c:	6043      	str	r3, [r0, #4]
    npcb->state = SYN_RCVD;
 800a58e:	2303      	movs	r3, #3
 800a590:	7503      	strb	r3, [r0, #20]
    iss = tcp_next_iss(npcb);
 800a592:	f7fe fef1 	bl	8009378 <tcp_next_iss>
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800a596:	4b95      	ldr	r3, [pc, #596]	; (800a7ec <tcp_input+0x70c>)
    npcb->snd_nxt = iss;
 800a598:	f8c9 0050 	str.w	r0, [r9, #80]	; 0x50
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800a59c:	681b      	ldr	r3, [r3, #0]
    npcb->lastack = iss;
 800a59e:	f8c9 0044 	str.w	r0, [r9, #68]	; 0x44
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800a5a2:	3b01      	subs	r3, #1
    npcb->snd_lbb = iss;
 800a5a4:	f8c9 005c 	str.w	r0, [r9, #92]	; 0x5c
    TCP_REG_ACTIVE(npcb);
 800a5a8:	4a91      	ldr	r2, [pc, #580]	; (800a7f0 <tcp_input+0x710>)
    npcb->snd_wl2 = iss;
 800a5aa:	e9c9 3015 	strd	r3, r0, [r9, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800a5ae:	692b      	ldr	r3, [r5, #16]
    npcb->listener = pcb;
 800a5b0:	f8c9 507c 	str.w	r5, [r9, #124]	; 0x7c
    npcb->callback_arg = pcb->callback_arg;
 800a5b4:	f8c9 3010 	str.w	r3, [r9, #16]
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800a5b8:	7a6b      	ldrb	r3, [r5, #9]
 800a5ba:	f003 030c 	and.w	r3, r3, #12
 800a5be:	f889 3009 	strb.w	r3, [r9, #9]
    npcb->netif_idx = pcb->netif_idx;
 800a5c2:	7a2b      	ldrb	r3, [r5, #8]
 800a5c4:	f889 3008 	strb.w	r3, [r9, #8]
    TCP_REG_ACTIVE(npcb);
 800a5c8:	6813      	ldr	r3, [r2, #0]
 800a5ca:	f8c2 9000 	str.w	r9, [r2]
 800a5ce:	f8c9 300c 	str.w	r3, [r9, #12]
 800a5d2:	f001 fe0f 	bl	800c1f4 <tcp_timer_needed>
 800a5d6:	4b87      	ldr	r3, [pc, #540]	; (800a7f4 <tcp_input+0x714>)
 800a5d8:	2201      	movs	r2, #1
    tcp_parseopt(npcb);
 800a5da:	4648      	mov	r0, r9
    TCP_REG_ACTIVE(npcb);
 800a5dc:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800a5de:	f7ff fcd3 	bl	8009f88 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800a5e2:	6833      	ldr	r3, [r6, #0]
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800a5e4:	f109 0204 	add.w	r2, r9, #4
 800a5e8:	f8b9 5032 	ldrh.w	r5, [r9, #50]	; 0x32
    npcb->snd_wnd = tcphdr->wnd;
 800a5ec:	89db      	ldrh	r3, [r3, #14]
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800a5ee:	4610      	mov	r0, r2
 800a5f0:	9205      	str	r2, [sp, #20]
    npcb->snd_wnd = tcphdr->wnd;
 800a5f2:	f8a9 3060 	strh.w	r3, [r9, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800a5f6:	f8a9 3062 	strh.w	r3, [r9, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800a5fa:	f002 fced 	bl	800cfd8 <ip4_route>
 800a5fe:	9a05      	ldr	r2, [sp, #20]
 800a600:	4601      	mov	r1, r0
 800a602:	4628      	mov	r0, r5
 800a604:	f7fe fed4 	bl	80093b0 <tcp_eff_send_mss_netif>
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800a608:	2112      	movs	r1, #18
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800a60a:	f8a9 0032 	strh.w	r0, [r9, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800a60e:	4648      	mov	r0, r9
 800a610:	f001 f8b0 	bl	800b774 <tcp_enqueue_flags>
    if (rc != ERR_OK) {
 800a614:	2800      	cmp	r0, #0
 800a616:	f040 827a 	bne.w	800ab0e <tcp_input+0xa2e>
    tcp_output(npcb);
 800a61a:	4648      	mov	r0, r9
 800a61c:	f001 fac6 	bl	800bbac <tcp_output>
 800a620:	e56d      	b.n	800a0fe <tcp_input+0x1e>
  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800a622:	079a      	lsls	r2, r3, #30
 800a624:	d504      	bpl.n	800a630 <tcp_input+0x550>
 800a626:	7d2b      	ldrb	r3, [r5, #20]
 800a628:	3b02      	subs	r3, #2
 800a62a:	2b01      	cmp	r3, #1
 800a62c:	f200 81df 	bhi.w	800a9ee <tcp_input+0x90e>
  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800a630:	8b6b      	ldrh	r3, [r5, #26]
 800a632:	06db      	lsls	r3, r3, #27
 800a634:	d402      	bmi.n	800a63c <tcp_input+0x55c>
    pcb->tmr = tcp_ticks;
 800a636:	4b70      	ldr	r3, [pc, #448]	; (800a7f8 <tcp_input+0x718>)
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	622b      	str	r3, [r5, #32]
  pcb->persist_probe = 0;
 800a63c:	2300      	movs	r3, #0
  tcp_parseopt(pcb);
 800a63e:	4628      	mov	r0, r5
  pcb->persist_probe = 0;
 800a640:	f8a5 309a 	strh.w	r3, [r5, #154]	; 0x9a
  tcp_parseopt(pcb);
 800a644:	f7ff fca0 	bl	8009f88 <tcp_parseopt>
  switch (pcb->state) {
 800a648:	7d2b      	ldrb	r3, [r5, #20]
 800a64a:	3b02      	subs	r3, #2
 800a64c:	2b07      	cmp	r3, #7
 800a64e:	f63f aeaf 	bhi.w	800a3b0 <tcp_input+0x2d0>
 800a652:	e8df f003 	tbb	[pc, r3]
 800a656:	1334      	.short	0x1334
 800a658:	04748f04 	.word	0x04748f04
 800a65c:	5ba8      	.short	0x5ba8
      tcp_receive(pcb);
 800a65e:	4628      	mov	r0, r5
 800a660:	f7fe fff6 	bl	8009650 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800a664:	f899 3000 	ldrb.w	r3, [r9]
 800a668:	069e      	lsls	r6, r3, #26
 800a66a:	f57f aea1 	bpl.w	800a3b0 <tcp_input+0x2d0>
        tcp_ack_now(pcb);
 800a66e:	8b6b      	ldrh	r3, [r5, #26]
 800a670:	f043 0302 	orr.w	r3, r3, #2
 800a674:	836b      	strh	r3, [r5, #26]
        pcb->state = CLOSE_WAIT;
 800a676:	2307      	movs	r3, #7
 800a678:	752b      	strb	r3, [r5, #20]
    if (err != ERR_ABRT) {
 800a67a:	e699      	b.n	800a3b0 <tcp_input+0x2d0>
      if (flags & TCP_ACK) {
 800a67c:	4b5a      	ldr	r3, [pc, #360]	; (800a7e8 <tcp_input+0x708>)
 800a67e:	781b      	ldrb	r3, [r3, #0]
 800a680:	06d9      	lsls	r1, r3, #27
 800a682:	f140 820d 	bpl.w	800aaa0 <tcp_input+0x9c0>
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a686:	4b5d      	ldr	r3, [pc, #372]	; (800a7fc <tcp_input+0x71c>)
 800a688:	6819      	ldr	r1, [r3, #0]
 800a68a:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800a68c:	43db      	mvns	r3, r3
 800a68e:	42cb      	cmn	r3, r1
 800a690:	d404      	bmi.n	800a69c <tcp_input+0x5bc>
 800a692:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800a694:	1acb      	subs	r3, r1, r3
 800a696:	2b00      	cmp	r3, #0
 800a698:	f340 824d 	ble.w	800ab36 <tcp_input+0xa56>
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a69c:	9a05      	ldr	r2, [sp, #20]
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a69e:	6833      	ldr	r3, [r6, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a6a0:	8810      	ldrh	r0, [r2, #0]
 800a6a2:	4a52      	ldr	r2, [pc, #328]	; (800a7ec <tcp_input+0x70c>)
 800a6a4:	6812      	ldr	r2, [r2, #0]
 800a6a6:	4402      	add	r2, r0
 800a6a8:	8818      	ldrh	r0, [r3, #0]
 800a6aa:	9002      	str	r0, [sp, #8]
 800a6ac:	4628      	mov	r0, r5
 800a6ae:	885b      	ldrh	r3, [r3, #2]
 800a6b0:	9301      	str	r3, [sp, #4]
 800a6b2:	4b53      	ldr	r3, [pc, #332]	; (800a800 <tcp_input+0x720>)
 800a6b4:	9300      	str	r3, [sp, #0]
 800a6b6:	3304      	adds	r3, #4
 800a6b8:	f001 f9fe 	bl	800bab8 <tcp_rst>
    if (err != ERR_ABRT) {
 800a6bc:	e678      	b.n	800a3b0 <tcp_input+0x2d0>
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800a6be:	4b4a      	ldr	r3, [pc, #296]	; (800a7e8 <tcp_input+0x708>)
 800a6c0:	781a      	ldrb	r2, [r3, #0]
 800a6c2:	f002 0312 	and.w	r3, r2, #18
 800a6c6:	2b12      	cmp	r3, #18
 800a6c8:	f000 813a 	beq.w	800a940 <tcp_input+0x860>
      else if (flags & TCP_ACK) {
 800a6cc:	06d0      	lsls	r0, r2, #27
 800a6ce:	f57f ae6f 	bpl.w	800a3b0 <tcp_input+0x2d0>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a6d2:	9a05      	ldr	r2, [sp, #20]
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a6d4:	6833      	ldr	r3, [r6, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a6d6:	8811      	ldrh	r1, [r2, #0]
 800a6d8:	4a44      	ldr	r2, [pc, #272]	; (800a7ec <tcp_input+0x70c>)
 800a6da:	8818      	ldrh	r0, [r3, #0]
 800a6dc:	6812      	ldr	r2, [r2, #0]
 800a6de:	440a      	add	r2, r1
 800a6e0:	4946      	ldr	r1, [pc, #280]	; (800a7fc <tcp_input+0x71c>)
 800a6e2:	6809      	ldr	r1, [r1, #0]
 800a6e4:	9002      	str	r0, [sp, #8]
 800a6e6:	4628      	mov	r0, r5
 800a6e8:	885b      	ldrh	r3, [r3, #2]
 800a6ea:	9301      	str	r3, [sp, #4]
 800a6ec:	4b44      	ldr	r3, [pc, #272]	; (800a800 <tcp_input+0x720>)
 800a6ee:	9300      	str	r3, [sp, #0]
 800a6f0:	3304      	adds	r3, #4
 800a6f2:	f001 f9e1 	bl	800bab8 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800a6f6:	f895 3042 	ldrb.w	r3, [r5, #66]	; 0x42
 800a6fa:	2b05      	cmp	r3, #5
 800a6fc:	f63f ae58 	bhi.w	800a3b0 <tcp_input+0x2d0>
          pcb->rtime = 0;
 800a700:	2300      	movs	r3, #0
          tcp_rexmit_rto(pcb);
 800a702:	4628      	mov	r0, r5
          pcb->rtime = 0;
 800a704:	862b      	strh	r3, [r5, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800a706:	f001 fc51 	bl	800bfac <tcp_rexmit_rto>
    if (err != ERR_ABRT) {
 800a70a:	e651      	b.n	800a3b0 <tcp_input+0x2d0>
      tcp_receive(pcb);
 800a70c:	4628      	mov	r0, r5
 800a70e:	f7fe ff9f 	bl	8009650 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800a712:	4b35      	ldr	r3, [pc, #212]	; (800a7e8 <tcp_input+0x708>)
 800a714:	781b      	ldrb	r3, [r3, #0]
 800a716:	06de      	lsls	r6, r3, #27
 800a718:	f57f ae4a 	bpl.w	800a3b0 <tcp_input+0x2d0>
 800a71c:	4b37      	ldr	r3, [pc, #220]	; (800a7fc <tcp_input+0x71c>)
 800a71e:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	429a      	cmp	r2, r3
 800a724:	f47f ae44 	bne.w	800a3b0 <tcp_input+0x2d0>
 800a728:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	f47f ae40 	bne.w	800a3b0 <tcp_input+0x2d0>
        recv_flags |= TF_CLOSED;
 800a730:	f899 3000 	ldrb.w	r3, [r9]
 800a734:	f043 0310 	orr.w	r3, r3, #16
 800a738:	f889 3000 	strb.w	r3, [r9]
    if (err != ERR_ABRT) {
 800a73c:	e638      	b.n	800a3b0 <tcp_input+0x2d0>
      tcp_receive(pcb);
 800a73e:	4628      	mov	r0, r5
 800a740:	f7fe ff86 	bl	8009650 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800a744:	f899 3000 	ldrb.w	r3, [r9]
 800a748:	069a      	lsls	r2, r3, #26
 800a74a:	f57f ae31 	bpl.w	800a3b0 <tcp_input+0x2d0>
        tcp_ack_now(pcb);
 800a74e:	8b6b      	ldrh	r3, [r5, #26]
        tcp_pcb_purge(pcb);
 800a750:	4628      	mov	r0, r5
        tcp_ack_now(pcb);
 800a752:	f043 0302 	orr.w	r3, r3, #2
 800a756:	836b      	strh	r3, [r5, #26]
        tcp_pcb_purge(pcb);
 800a758:	f7fd fef8 	bl	800854c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800a75c:	4b24      	ldr	r3, [pc, #144]	; (800a7f0 <tcp_input+0x710>)
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	42ab      	cmp	r3, r5
 800a762:	d05e      	beq.n	800a822 <tcp_input+0x742>
 800a764:	2b00      	cmp	r3, #0
 800a766:	d05f      	beq.n	800a828 <tcp_input+0x748>
 800a768:	68da      	ldr	r2, [r3, #12]
 800a76a:	42aa      	cmp	r2, r5
 800a76c:	f000 8218 	beq.w	800aba0 <tcp_input+0xac0>
 800a770:	4613      	mov	r3, r2
 800a772:	e7f7      	b.n	800a764 <tcp_input+0x684>
      tcp_receive(pcb);
 800a774:	4628      	mov	r0, r5
 800a776:	f7fe ff6b 	bl	8009650 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800a77a:	f899 3000 	ldrb.w	r3, [r9]
 800a77e:	f013 0f20 	tst.w	r3, #32
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800a782:	4b19      	ldr	r3, [pc, #100]	; (800a7e8 <tcp_input+0x708>)
 800a784:	781b      	ldrb	r3, [r3, #0]
      if (recv_flags & TF_GOT_FIN) {
 800a786:	f000 817b 	beq.w	800aa80 <tcp_input+0x9a0>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800a78a:	06d8      	lsls	r0, r3, #27
 800a78c:	d504      	bpl.n	800a798 <tcp_input+0x6b8>
 800a78e:	4b1b      	ldr	r3, [pc, #108]	; (800a7fc <tcp_input+0x71c>)
 800a790:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	429a      	cmp	r2, r3
 800a796:	d035      	beq.n	800a804 <tcp_input+0x724>
          tcp_ack_now(pcb);
 800a798:	8b6b      	ldrh	r3, [r5, #26]
 800a79a:	f043 0302 	orr.w	r3, r3, #2
 800a79e:	836b      	strh	r3, [r5, #26]
          pcb->state = CLOSING;
 800a7a0:	2308      	movs	r3, #8
 800a7a2:	752b      	strb	r3, [r5, #20]
    if (err != ERR_ABRT) {
 800a7a4:	e604      	b.n	800a3b0 <tcp_input+0x2d0>
      tcp_receive(pcb);
 800a7a6:	4628      	mov	r0, r5
 800a7a8:	f7fe ff52 	bl	8009650 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800a7ac:	4b0e      	ldr	r3, [pc, #56]	; (800a7e8 <tcp_input+0x708>)
 800a7ae:	781b      	ldrb	r3, [r3, #0]
 800a7b0:	06db      	lsls	r3, r3, #27
 800a7b2:	f57f adfd 	bpl.w	800a3b0 <tcp_input+0x2d0>
 800a7b6:	4b11      	ldr	r3, [pc, #68]	; (800a7fc <tcp_input+0x71c>)
 800a7b8:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	429a      	cmp	r2, r3
 800a7be:	f47f adf7 	bne.w	800a3b0 <tcp_input+0x2d0>
 800a7c2:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	f47f adf3 	bne.w	800a3b0 <tcp_input+0x2d0>
        tcp_pcb_purge(pcb);
 800a7ca:	4628      	mov	r0, r5
 800a7cc:	f7fd febe 	bl	800854c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800a7d0:	4b07      	ldr	r3, [pc, #28]	; (800a7f0 <tcp_input+0x710>)
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	42ab      	cmp	r3, r5
 800a7d6:	d024      	beq.n	800a822 <tcp_input+0x742>
 800a7d8:	b333      	cbz	r3, 800a828 <tcp_input+0x748>
 800a7da:	68da      	ldr	r2, [r3, #12]
 800a7dc:	42aa      	cmp	r2, r5
 800a7de:	f000 81df 	beq.w	800aba0 <tcp_input+0xac0>
 800a7e2:	4613      	mov	r3, r2
 800a7e4:	e7f8      	b.n	800a7d8 <tcp_input+0x6f8>
 800a7e6:	bf00      	nop
 800a7e8:	24010568 	.word	0x24010568
 800a7ec:	24010588 	.word	0x24010588
 800a7f0:	24010548 	.word	0x24010548
 800a7f4:	2401054c 	.word	0x2401054c
 800a7f8:	24010558 	.word	0x24010558
 800a7fc:	24010564 	.word	0x24010564
 800a800:	24009a98 	.word	0x24009a98
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800a804:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 800a806:	2b00      	cmp	r3, #0
 800a808:	d1c6      	bne.n	800a798 <tcp_input+0x6b8>
          tcp_ack_now(pcb);
 800a80a:	8b6b      	ldrh	r3, [r5, #26]
          tcp_pcb_purge(pcb);
 800a80c:	4628      	mov	r0, r5
          tcp_ack_now(pcb);
 800a80e:	f043 0302 	orr.w	r3, r3, #2
 800a812:	836b      	strh	r3, [r5, #26]
          tcp_pcb_purge(pcb);
 800a814:	f7fd fe9a 	bl	800854c <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800a818:	4bab      	ldr	r3, [pc, #684]	; (800aac8 <tcp_input+0x9e8>)
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	42ab      	cmp	r3, r5
 800a81e:	f040 81c2 	bne.w	800aba6 <tcp_input+0xac6>
        TCP_RMV_ACTIVE(pcb);
 800a822:	68eb      	ldr	r3, [r5, #12]
 800a824:	4aa8      	ldr	r2, [pc, #672]	; (800aac8 <tcp_input+0x9e8>)
 800a826:	6013      	str	r3, [r2, #0]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800a828:	4ba8      	ldr	r3, [pc, #672]	; (800aacc <tcp_input+0x9ec>)
        pcb->state = TIME_WAIT;
 800a82a:	220a      	movs	r2, #10
 800a82c:	752a      	strb	r2, [r5, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800a82e:	681a      	ldr	r2, [r3, #0]
 800a830:	601d      	str	r5, [r3, #0]
 800a832:	60ea      	str	r2, [r5, #12]
        TCP_RMV_ACTIVE(pcb);
 800a834:	2201      	movs	r2, #1
 800a836:	4ba6      	ldr	r3, [pc, #664]	; (800aad0 <tcp_input+0x9f0>)
 800a838:	701a      	strb	r2, [r3, #0]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800a83a:	f001 fcdb 	bl	800c1f4 <tcp_timer_needed>
    if (err != ERR_ABRT) {
 800a83e:	e5b7      	b.n	800a3b0 <tcp_input+0x2d0>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800a840:	4ba4      	ldr	r3, [pc, #656]	; (800aad4 <tcp_input+0x9f4>)
 800a842:	22c2      	movs	r2, #194	; 0xc2
 800a844:	49a4      	ldr	r1, [pc, #656]	; (800aad8 <tcp_input+0x9f8>)
 800a846:	48a5      	ldr	r0, [pc, #660]	; (800aadc <tcp_input+0x9fc>)
 800a848:	f003 fbec 	bl	800e024 <iprintf>
 800a84c:	e48a      	b.n	800a164 <tcp_input+0x84>
    LWIP_ASSERT("p->len == 0", p->len == 0);
 800a84e:	4ba1      	ldr	r3, [pc, #644]	; (800aad4 <tcp_input+0x9f4>)
 800a850:	22df      	movs	r2, #223	; 0xdf
 800a852:	49a3      	ldr	r1, [pc, #652]	; (800aae0 <tcp_input+0xa00>)
 800a854:	48a1      	ldr	r0, [pc, #644]	; (800aadc <tcp_input+0x9fc>)
 800a856:	f003 fbe5 	bl	800e024 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800a85a:	8923      	ldrh	r3, [r4, #8]
 800a85c:	e4a7      	b.n	800a1ae <tcp_input+0xce>
        if (pcb->rcv_ann_wnd == 0) {
 800a85e:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 800a860:	2b00      	cmp	r3, #0
 800a862:	f000 80da 	beq.w	800aa1a <tcp_input+0x93a>
 800a866:	4c9f      	ldr	r4, [pc, #636]	; (800aae4 <tcp_input+0xa04>)
 800a868:	e5b5      	b.n	800a3d6 <tcp_input+0x2f6>
        if (recv_acked > 0) {
 800a86a:	f8bb 2000 	ldrh.w	r2, [fp]
 800a86e:	b15a      	cbz	r2, 800a888 <tcp_input+0x7a8>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800a870:	f8d5 3080 	ldr.w	r3, [r5, #128]	; 0x80
 800a874:	b12b      	cbz	r3, 800a882 <tcp_input+0x7a2>
 800a876:	4629      	mov	r1, r5
 800a878:	6928      	ldr	r0, [r5, #16]
 800a87a:	4798      	blx	r3
            if (err == ERR_ABRT) {
 800a87c:	300d      	adds	r0, #13
 800a87e:	f43f adaa 	beq.w	800a3d6 <tcp_input+0x2f6>
          recv_acked = 0;
 800a882:	2300      	movs	r3, #0
 800a884:	f8ab 3000 	strh.w	r3, [fp]
        if (tcp_input_delayed_close(pcb)) {
 800a888:	4628      	mov	r0, r5
 800a88a:	f7fe fe43 	bl	8009514 <tcp_input_delayed_close>
 800a88e:	2800      	cmp	r0, #0
 800a890:	f47f ada1 	bne.w	800a3d6 <tcp_input+0x2f6>
        if (recv_data != NULL) {
 800a894:	f8d8 2000 	ldr.w	r2, [r8]
 800a898:	b1fa      	cbz	r2, 800a8da <tcp_input+0x7fa>
          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800a89a:	6fab      	ldr	r3, [r5, #120]	; 0x78
 800a89c:	b143      	cbz	r3, 800a8b0 <tcp_input+0x7d0>
 800a89e:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800a8a2:	4b8c      	ldr	r3, [pc, #560]	; (800aad4 <tcp_input+0x9f4>)
 800a8a4:	4990      	ldr	r1, [pc, #576]	; (800aae8 <tcp_input+0xa08>)
 800a8a6:	488d      	ldr	r0, [pc, #564]	; (800aadc <tcp_input+0x9fc>)
 800a8a8:	f003 fbbc 	bl	800e024 <iprintf>
            pbuf_free(recv_data);
 800a8ac:	f8d8 2000 	ldr.w	r2, [r8]
          if (pcb->flags & TF_RXCLOSED) {
 800a8b0:	8b6b      	ldrh	r3, [r5, #26]
 800a8b2:	f013 0310 	ands.w	r3, r3, #16
 800a8b6:	f040 80dc 	bne.w	800aa72 <tcp_input+0x992>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800a8ba:	f8d5 6084 	ldr.w	r6, [r5, #132]	; 0x84
 800a8be:	2e00      	cmp	r6, #0
 800a8c0:	f000 80fc 	beq.w	800aabc <tcp_input+0x9dc>
 800a8c4:	4629      	mov	r1, r5
 800a8c6:	6928      	ldr	r0, [r5, #16]
 800a8c8:	47b0      	blx	r6
          if (err == ERR_ABRT) {
 800a8ca:	f110 0f0d 	cmn.w	r0, #13
 800a8ce:	f43f ad82 	beq.w	800a3d6 <tcp_input+0x2f6>
          if (err != ERR_OK) {
 800a8d2:	b110      	cbz	r0, 800a8da <tcp_input+0x7fa>
            pcb->refused_data = recv_data;
 800a8d4:	f8d8 3000 	ldr.w	r3, [r8]
 800a8d8:	67ab      	str	r3, [r5, #120]	; 0x78
        if (recv_flags & TF_GOT_FIN) {
 800a8da:	f899 3000 	ldrb.w	r3, [r9]
 800a8de:	0699      	lsls	r1, r3, #26
 800a8e0:	d507      	bpl.n	800a8f2 <tcp_input+0x812>
          if (pcb->refused_data != NULL) {
 800a8e2:	6fab      	ldr	r3, [r5, #120]	; 0x78
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	f000 80af 	beq.w	800aa48 <tcp_input+0x968>
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800a8ea:	7b5a      	ldrb	r2, [r3, #13]
 800a8ec:	f042 0220 	orr.w	r2, r2, #32
 800a8f0:	735a      	strb	r2, [r3, #13]
        tcp_input_pcb = NULL;
 800a8f2:	2300      	movs	r3, #0
        if (tcp_input_delayed_close(pcb)) {
 800a8f4:	4628      	mov	r0, r5
        tcp_input_pcb = NULL;
 800a8f6:	6023      	str	r3, [r4, #0]
        if (tcp_input_delayed_close(pcb)) {
 800a8f8:	f7fe fe0c 	bl	8009514 <tcp_input_delayed_close>
 800a8fc:	2800      	cmp	r0, #0
 800a8fe:	f47f ad6a 	bne.w	800a3d6 <tcp_input+0x2f6>
        tcp_output(pcb);
 800a902:	4628      	mov	r0, r5
 800a904:	f001 f952 	bl	800bbac <tcp_output>
 800a908:	e565      	b.n	800a3d6 <tcp_input+0x2f6>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800a90a:	6830      	ldr	r0, [r6, #0]
 800a90c:	8980      	ldrh	r0, [r0, #12]
 800a90e:	f7fc f847 	bl	80069a0 <lwip_htons>
 800a912:	f010 0004 	ands.w	r0, r0, #4
 800a916:	f47f abf2 	bne.w	800a0fe <tcp_input+0x1e>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a91a:	9a05      	ldr	r2, [sp, #20]
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a91c:	6833      	ldr	r3, [r6, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a91e:	8811      	ldrh	r1, [r2, #0]
 800a920:	4a72      	ldr	r2, [pc, #456]	; (800aaec <tcp_input+0xa0c>)
 800a922:	881d      	ldrh	r5, [r3, #0]
 800a924:	6812      	ldr	r2, [r2, #0]
 800a926:	440a      	add	r2, r1
 800a928:	4971      	ldr	r1, [pc, #452]	; (800aaf0 <tcp_input+0xa10>)
 800a92a:	6809      	ldr	r1, [r1, #0]
 800a92c:	9502      	str	r5, [sp, #8]
 800a92e:	885b      	ldrh	r3, [r3, #2]
 800a930:	9301      	str	r3, [sp, #4]
 800a932:	4b70      	ldr	r3, [pc, #448]	; (800aaf4 <tcp_input+0xa14>)
 800a934:	9300      	str	r3, [sp, #0]
 800a936:	3304      	adds	r3, #4
 800a938:	f001 f8be 	bl	800bab8 <tcp_rst>
 800a93c:	f7ff bbdf 	b.w	800a0fe <tcp_input+0x1e>
          && (ackno == pcb->lastack + 1)) {
 800a940:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800a942:	496b      	ldr	r1, [pc, #428]	; (800aaf0 <tcp_input+0xa10>)
 800a944:	3301      	adds	r3, #1
 800a946:	6809      	ldr	r1, [r1, #0]
 800a948:	428b      	cmp	r3, r1
 800a94a:	f47f aebf 	bne.w	800a6cc <tcp_input+0x5ec>
        pcb->lastack = ackno;
 800a94e:	646b      	str	r3, [r5, #68]	; 0x44
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800a950:	1d2a      	adds	r2, r5, #4
        pcb->rcv_nxt = seqno + 1;
 800a952:	4b66      	ldr	r3, [pc, #408]	; (800aaec <tcp_input+0xa0c>)
        pcb->snd_wnd = tcphdr->wnd;
 800a954:	6830      	ldr	r0, [r6, #0]
        pcb->rcv_nxt = seqno + 1;
 800a956:	681b      	ldr	r3, [r3, #0]
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800a958:	8e6e      	ldrh	r6, [r5, #50]	; 0x32
        pcb->rcv_nxt = seqno + 1;
 800a95a:	1c59      	adds	r1, r3, #1
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800a95c:	3b01      	subs	r3, #1
        pcb->rcv_nxt = seqno + 1;
 800a95e:	6269      	str	r1, [r5, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800a960:	62e9      	str	r1, [r5, #44]	; 0x2c
        pcb->snd_wnd = tcphdr->wnd;
 800a962:	89c1      	ldrh	r1, [r0, #14]
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800a964:	4610      	mov	r0, r2
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800a966:	656b      	str	r3, [r5, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800a968:	2304      	movs	r3, #4
        pcb->snd_wnd = tcphdr->wnd;
 800a96a:	f8a5 1060 	strh.w	r1, [r5, #96]	; 0x60
        pcb->state = ESTABLISHED;
 800a96e:	752b      	strb	r3, [r5, #20]
        pcb->snd_wnd_max = pcb->snd_wnd;
 800a970:	f8a5 1062 	strh.w	r1, [r5, #98]	; 0x62
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800a974:	9205      	str	r2, [sp, #20]
 800a976:	f002 fb2f 	bl	800cfd8 <ip4_route>
 800a97a:	9a05      	ldr	r2, [sp, #20]
 800a97c:	4601      	mov	r1, r0
 800a97e:	4630      	mov	r0, r6
 800a980:	f7fe fd16 	bl	80093b0 <tcp_eff_send_mss_netif>
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800a984:	f241 131c 	movw	r3, #4380	; 0x111c
 800a988:	0042      	lsls	r2, r0, #1
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800a98a:	8668      	strh	r0, [r5, #50]	; 0x32
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800a98c:	0081      	lsls	r1, r0, #2
 800a98e:	429a      	cmp	r2, r3
 800a990:	4616      	mov	r6, r2
 800a992:	bf38      	it	cc
 800a994:	461e      	movcc	r6, r3
 800a996:	ebb6 0f80 	cmp.w	r6, r0, lsl #2
 800a99a:	f240 8148 	bls.w	800ac2e <tcp_input+0xb4e>
 800a99e:	b28b      	uxth	r3, r1
 800a9a0:	f8a5 3048 	strh.w	r3, [r5, #72]	; 0x48
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800a9a4:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	f000 8138 	beq.w	800ac1e <tcp_input+0xb3e>
        --pcb->snd_queuelen;
 800a9ae:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
        rseg = pcb->unacked;
 800a9b2:	6f2e      	ldr	r6, [r5, #112]	; 0x70
        --pcb->snd_queuelen;
 800a9b4:	3b01      	subs	r3, #1
 800a9b6:	f8a5 3066 	strh.w	r3, [r5, #102]	; 0x66
        if (rseg == NULL) {
 800a9ba:	2e00      	cmp	r6, #0
 800a9bc:	f000 812a 	beq.w	800ac14 <tcp_input+0xb34>
          pcb->unacked = rseg->next;
 800a9c0:	6833      	ldr	r3, [r6, #0]
 800a9c2:	672b      	str	r3, [r5, #112]	; 0x70
        tcp_seg_free(rseg);
 800a9c4:	4630      	mov	r0, r6
 800a9c6:	f7fd fd03 	bl	80083d0 <tcp_seg_free>
        if (pcb->unacked == NULL) {
 800a9ca:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	f000 811d 	beq.w	800ac0c <tcp_input+0xb2c>
          pcb->rtime = 0;
 800a9d2:	2300      	movs	r3, #0
 800a9d4:	862b      	strh	r3, [r5, #48]	; 0x30
          pcb->nrtx = 0;
 800a9d6:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800a9da:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
 800a9de:	b133      	cbz	r3, 800a9ee <tcp_input+0x90e>
 800a9e0:	2200      	movs	r2, #0
 800a9e2:	4629      	mov	r1, r5
 800a9e4:	6928      	ldr	r0, [r5, #16]
 800a9e6:	4798      	blx	r3
        if (err == ERR_ABRT) {
 800a9e8:	300d      	adds	r0, #13
 800a9ea:	f43f acf4 	beq.w	800a3d6 <tcp_input+0x2f6>
        tcp_ack_now(pcb);
 800a9ee:	8b6b      	ldrh	r3, [r5, #26]
 800a9f0:	f043 0302 	orr.w	r3, r3, #2
 800a9f4:	836b      	strh	r3, [r5, #26]
    if (err != ERR_ABRT) {
 800a9f6:	e4db      	b.n	800a3b0 <tcp_input+0x2d0>
      if (ackno == pcb->snd_nxt) {
 800a9f8:	4b3d      	ldr	r3, [pc, #244]	; (800aaf0 <tcp_input+0xa10>)
 800a9fa:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	429a      	cmp	r2, r3
 800aa00:	f47f acd6 	bne.w	800a3b0 <tcp_input+0x2d0>
      recv_flags |= TF_RESET;
 800aa04:	f899 3000 	ldrb.w	r3, [r9]
 800aa08:	f043 0308 	orr.w	r3, r3, #8
 800aa0c:	f889 3000 	strb.w	r3, [r9]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800aa10:	8b6b      	ldrh	r3, [r5, #26]
 800aa12:	f023 0301 	bic.w	r3, r3, #1
 800aa16:	836b      	strh	r3, [r5, #26]
    if (err != ERR_ABRT) {
 800aa18:	e4ca      	b.n	800a3b0 <tcp_input+0x2d0>
          tcp_send_empty_ack(pcb);
 800aa1a:	4628      	mov	r0, r5
 800aa1c:	4c31      	ldr	r4, [pc, #196]	; (800aae4 <tcp_input+0xa04>)
 800aa1e:	f001 f893 	bl	800bb48 <tcp_send_empty_ack>
 800aa22:	e4d8      	b.n	800a3d6 <tcp_input+0x2f6>
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800aa24:	8802      	ldrh	r2, [r0, #0]
 800aa26:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800aa2a:	9b05      	ldr	r3, [sp, #20]
 800aa2c:	881a      	ldrh	r2, [r3, #0]
 800aa2e:	4b2f      	ldr	r3, [pc, #188]	; (800aaec <tcp_input+0xa0c>)
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	441a      	add	r2, r3
 800aa34:	4b2e      	ldr	r3, [pc, #184]	; (800aaf0 <tcp_input+0xa10>)
 800aa36:	4628      	mov	r0, r5
 800aa38:	6819      	ldr	r1, [r3, #0]
 800aa3a:	4b2e      	ldr	r3, [pc, #184]	; (800aaf4 <tcp_input+0xa14>)
 800aa3c:	9300      	str	r3, [sp, #0]
 800aa3e:	3304      	adds	r3, #4
 800aa40:	f001 f83a 	bl	800bab8 <tcp_rst>
 800aa44:	f7ff bb5b 	b.w	800a0fe <tcp_input+0x1e>
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800aa48:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
 800aa4a:	f241 62d0 	movw	r2, #5840	; 0x16d0
 800aa4e:	4293      	cmp	r3, r2
 800aa50:	d001      	beq.n	800aa56 <tcp_input+0x976>
              pcb->rcv_wnd++;
 800aa52:	3301      	adds	r3, #1
 800aa54:	852b      	strh	r3, [r5, #40]	; 0x28
            TCP_EVENT_CLOSED(pcb, err);
 800aa56:	f8d5 6084 	ldr.w	r6, [r5, #132]	; 0x84
 800aa5a:	2e00      	cmp	r6, #0
 800aa5c:	f43f af49 	beq.w	800a8f2 <tcp_input+0x812>
 800aa60:	2300      	movs	r3, #0
 800aa62:	4629      	mov	r1, r5
 800aa64:	6928      	ldr	r0, [r5, #16]
 800aa66:	461a      	mov	r2, r3
 800aa68:	47b0      	blx	r6
            if (err == ERR_ABRT) {
 800aa6a:	300d      	adds	r0, #13
 800aa6c:	f47f af41 	bne.w	800a8f2 <tcp_input+0x812>
 800aa70:	e4b1      	b.n	800a3d6 <tcp_input+0x2f6>
            pbuf_free(recv_data);
 800aa72:	4610      	mov	r0, r2
 800aa74:	f7fc ff36 	bl	80078e4 <pbuf_free>
            tcp_abort(pcb);
 800aa78:	4628      	mov	r0, r5
 800aa7a:	f7fe f9a9 	bl	8008dd0 <tcp_abort>
            goto aborted;
 800aa7e:	e4aa      	b.n	800a3d6 <tcp_input+0x2f6>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800aa80:	06d9      	lsls	r1, r3, #27
 800aa82:	f57f ac95 	bpl.w	800a3b0 <tcp_input+0x2d0>
 800aa86:	4b1a      	ldr	r3, [pc, #104]	; (800aaf0 <tcp_input+0xa10>)
 800aa88:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	429a      	cmp	r2, r3
 800aa8e:	f47f ac8f 	bne.w	800a3b0 <tcp_input+0x2d0>
 800aa92:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	f47f ac8b 	bne.w	800a3b0 <tcp_input+0x2d0>
        pcb->state = FIN_WAIT_2;
 800aa9a:	2306      	movs	r3, #6
 800aa9c:	752b      	strb	r3, [r5, #20]
    if (err != ERR_ABRT) {
 800aa9e:	e487      	b.n	800a3b0 <tcp_input+0x2d0>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800aaa0:	079b      	lsls	r3, r3, #30
 800aaa2:	f57f ac85 	bpl.w	800a3b0 <tcp_input+0x2d0>
 800aaa6:	4b11      	ldr	r3, [pc, #68]	; (800aaec <tcp_input+0xa0c>)
 800aaa8:	681a      	ldr	r2, [r3, #0]
 800aaaa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800aaac:	3b01      	subs	r3, #1
 800aaae:	4293      	cmp	r3, r2
 800aab0:	f47f ac7e 	bne.w	800a3b0 <tcp_input+0x2d0>
        tcp_rexmit(pcb);
 800aab4:	4628      	mov	r0, r5
 800aab6:	f000 ff81 	bl	800b9bc <tcp_rexmit>
    if (err != ERR_ABRT) {
 800aaba:	e479      	b.n	800a3b0 <tcp_input+0x2d0>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800aabc:	4633      	mov	r3, r6
 800aabe:	4630      	mov	r0, r6
 800aac0:	4629      	mov	r1, r5
 800aac2:	f7fe fb8d 	bl	80091e0 <tcp_recv_null>
 800aac6:	e700      	b.n	800a8ca <tcp_input+0x7ea>
 800aac8:	24010548 	.word	0x24010548
 800aacc:	24010560 	.word	0x24010560
 800aad0:	2401054c 	.word	0x2401054c
 800aad4:	08010750 	.word	0x08010750
 800aad8:	08010974 	.word	0x08010974
 800aadc:	0800ef30 	.word	0x0800ef30
 800aae0:	08010984 	.word	0x08010984
 800aae4:	2401058c 	.word	0x2401058c
 800aae8:	08010b20 	.word	0x08010b20
 800aaec:	24010588 	.word	0x24010588
 800aaf0:	24010564 	.word	0x24010564
 800aaf4:	24009a98 	.word	0x24009a98
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800aaf8:	69ab      	ldr	r3, [r5, #24]
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	f43f aaff 	beq.w	800a0fe <tcp_input+0x1e>
 800ab00:	4601      	mov	r1, r0
 800ab02:	f04f 32ff 	mov.w	r2, #4294967295
 800ab06:	6928      	ldr	r0, [r5, #16]
 800ab08:	4798      	blx	r3
 800ab0a:	f7ff baf8 	b.w	800a0fe <tcp_input+0x1e>
      tcp_abandon(npcb, 0);
 800ab0e:	4641      	mov	r1, r8
 800ab10:	4648      	mov	r0, r9
 800ab12:	f7fe f887 	bl	8008c24 <tcp_abandon>
      return;
 800ab16:	f7ff baf2 	b.w	800a0fe <tcp_input+0x1e>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800ab1a:	4b4b      	ldr	r3, [pc, #300]	; (800ac48 <tcp_input+0xb68>)
 800ab1c:	f240 120d 	movw	r2, #269	; 0x10d
 800ab20:	494a      	ldr	r1, [pc, #296]	; (800ac4c <tcp_input+0xb6c>)
 800ab22:	484b      	ldr	r0, [pc, #300]	; (800ac50 <tcp_input+0xb70>)
 800ab24:	f003 fa7e 	bl	800e024 <iprintf>
      if (prev != NULL) {
 800ab28:	f1b8 0f00 	cmp.w	r8, #0
 800ab2c:	f43f abf9 	beq.w	800a322 <tcp_input+0x242>
 800ab30:	68eb      	ldr	r3, [r5, #12]
 800ab32:	f7ff bbf0 	b.w	800a316 <tcp_input+0x236>
          pcb->state = ESTABLISHED;
 800ab36:	2304      	movs	r3, #4
 800ab38:	752b      	strb	r3, [r5, #20]
          if (pcb->listener == NULL) {
 800ab3a:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d09b      	beq.n	800aa78 <tcp_input+0x998>
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800ab40:	699b      	ldr	r3, [r3, #24]
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d056      	beq.n	800abf4 <tcp_input+0xb14>
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800ab46:	2200      	movs	r2, #0
 800ab48:	4629      	mov	r1, r5
 800ab4a:	6928      	ldr	r0, [r5, #16]
 800ab4c:	4798      	blx	r3
          if (err != ERR_OK) {
 800ab4e:	2800      	cmp	r0, #0
 800ab50:	d14c      	bne.n	800abec <tcp_input+0xb0c>
          tcp_receive(pcb);
 800ab52:	4628      	mov	r0, r5
 800ab54:	f7fe fd7c 	bl	8009650 <tcp_receive>
          if (recv_acked != 0) {
 800ab58:	f8bb 3000 	ldrh.w	r3, [fp]
 800ab5c:	b113      	cbz	r3, 800ab64 <tcp_input+0xa84>
            recv_acked--;
 800ab5e:	3b01      	subs	r3, #1
 800ab60:	f8ab 3000 	strh.w	r3, [fp]
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800ab64:	8e69      	ldrh	r1, [r5, #50]	; 0x32
 800ab66:	f241 131c 	movw	r3, #4380	; 0x111c
 800ab6a:	004a      	lsls	r2, r1, #1
 800ab6c:	0088      	lsls	r0, r1, #2
 800ab6e:	429a      	cmp	r2, r3
 800ab70:	4616      	mov	r6, r2
 800ab72:	bf38      	it	cc
 800ab74:	461e      	movcc	r6, r3
 800ab76:	ebb6 0f81 	cmp.w	r6, r1, lsl #2
 800ab7a:	d923      	bls.n	800abc4 <tcp_input+0xae4>
 800ab7c:	b283      	uxth	r3, r0
 800ab7e:	f8a5 3048 	strh.w	r3, [r5, #72]	; 0x48
          if (recv_flags & TF_GOT_FIN) {
 800ab82:	f899 3000 	ldrb.w	r3, [r9]
 800ab86:	069a      	lsls	r2, r3, #26
 800ab88:	f57f ac12 	bpl.w	800a3b0 <tcp_input+0x2d0>
 800ab8c:	e56f      	b.n	800a66e <tcp_input+0x58e>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800ab8e:	4b2e      	ldr	r3, [pc, #184]	; (800ac48 <tcp_input+0xb68>)
 800ab90:	f240 1215 	movw	r2, #277	; 0x115
 800ab94:	492f      	ldr	r1, [pc, #188]	; (800ac54 <tcp_input+0xb74>)
 800ab96:	482e      	ldr	r0, [pc, #184]	; (800ac50 <tcp_input+0xb70>)
 800ab98:	f003 fa44 	bl	800e024 <iprintf>
 800ab9c:	f7ff bbc5 	b.w	800a32a <tcp_input+0x24a>
        TCP_RMV_ACTIVE(pcb);
 800aba0:	68ea      	ldr	r2, [r5, #12]
 800aba2:	60da      	str	r2, [r3, #12]
 800aba4:	e640      	b.n	800a828 <tcp_input+0x748>
          TCP_RMV_ACTIVE(pcb);
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	f43f ae3e 	beq.w	800a828 <tcp_input+0x748>
 800abac:	68da      	ldr	r2, [r3, #12]
 800abae:	42aa      	cmp	r2, r5
 800abb0:	d0f6      	beq.n	800aba0 <tcp_input+0xac0>
 800abb2:	4613      	mov	r3, r2
 800abb4:	e7f7      	b.n	800aba6 <tcp_input+0xac6>
  } else if (flags & TCP_FIN) {
 800abb6:	07d0      	lsls	r0, r2, #31
 800abb8:	f57f ac5d 	bpl.w	800a476 <tcp_input+0x396>
    pcb->tmr = tcp_ticks;
 800abbc:	4b26      	ldr	r3, [pc, #152]	; (800ac58 <tcp_input+0xb78>)
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	622b      	str	r3, [r5, #32]
 800abc2:	e458      	b.n	800a476 <tcp_input+0x396>
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800abc4:	429a      	cmp	r2, r3
 800abc6:	bf88      	it	hi
 800abc8:	b293      	uxthhi	r3, r2
 800abca:	e7d8      	b.n	800ab7e <tcp_input+0xa9e>
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800abcc:	2900      	cmp	r1, #0
 800abce:	f47f af19 	bne.w	800aa04 <tcp_input+0x924>
 800abd2:	4b1d      	ldr	r3, [pc, #116]	; (800ac48 <tcp_input+0xb68>)
 800abd4:	f44f 724e 	mov.w	r2, #824	; 0x338
 800abd8:	4920      	ldr	r1, [pc, #128]	; (800ac5c <tcp_input+0xb7c>)
 800abda:	481d      	ldr	r0, [pc, #116]	; (800ac50 <tcp_input+0xb70>)
 800abdc:	f003 fa22 	bl	800e024 <iprintf>
 800abe0:	e710      	b.n	800aa04 <tcp_input+0x924>
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800abe2:	e9cd 0301 	strd	r0, r3, [sp, #4]
 800abe6:	9b05      	ldr	r3, [sp, #20]
 800abe8:	881b      	ldrh	r3, [r3, #0]
 800abea:	e722      	b.n	800aa32 <tcp_input+0x952>
            if (err != ERR_ABRT) {
 800abec:	300d      	adds	r0, #13
 800abee:	f43f abf2 	beq.w	800a3d6 <tcp_input+0x2f6>
 800abf2:	e741      	b.n	800aa78 <tcp_input+0x998>
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800abf4:	4b14      	ldr	r3, [pc, #80]	; (800ac48 <tcp_input+0xb68>)
 800abf6:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800abfa:	4919      	ldr	r1, [pc, #100]	; (800ac60 <tcp_input+0xb80>)
 800abfc:	4814      	ldr	r0, [pc, #80]	; (800ac50 <tcp_input+0xb70>)
 800abfe:	f003 fa11 	bl	800e024 <iprintf>
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800ac02:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 800ac04:	699b      	ldr	r3, [r3, #24]
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d19d      	bne.n	800ab46 <tcp_input+0xa66>
 800ac0a:	e735      	b.n	800aa78 <tcp_input+0x998>
          pcb->rtime = -1;
 800ac0c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ac10:	862b      	strh	r3, [r5, #48]	; 0x30
 800ac12:	e6e2      	b.n	800a9da <tcp_input+0x8fa>
          rseg = pcb->unsent;
 800ac14:	6eee      	ldr	r6, [r5, #108]	; 0x6c
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800ac16:	b176      	cbz	r6, 800ac36 <tcp_input+0xb56>
          pcb->unsent = rseg->next;
 800ac18:	6833      	ldr	r3, [r6, #0]
 800ac1a:	66eb      	str	r3, [r5, #108]	; 0x6c
 800ac1c:	e6d2      	b.n	800a9c4 <tcp_input+0x8e4>
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800ac1e:	4b0a      	ldr	r3, [pc, #40]	; (800ac48 <tcp_input+0xb68>)
 800ac20:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800ac24:	490f      	ldr	r1, [pc, #60]	; (800ac64 <tcp_input+0xb84>)
 800ac26:	480a      	ldr	r0, [pc, #40]	; (800ac50 <tcp_input+0xb70>)
 800ac28:	f003 f9fc 	bl	800e024 <iprintf>
 800ac2c:	e6bf      	b.n	800a9ae <tcp_input+0x8ce>
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800ac2e:	429a      	cmp	r2, r3
 800ac30:	bf88      	it	hi
 800ac32:	b293      	uxthhi	r3, r2
 800ac34:	e6b4      	b.n	800a9a0 <tcp_input+0x8c0>
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800ac36:	4b04      	ldr	r3, [pc, #16]	; (800ac48 <tcp_input+0xb68>)
 800ac38:	f44f 725d 	mov.w	r2, #884	; 0x374
 800ac3c:	490a      	ldr	r1, [pc, #40]	; (800ac68 <tcp_input+0xb88>)
 800ac3e:	4804      	ldr	r0, [pc, #16]	; (800ac50 <tcp_input+0xb70>)
 800ac40:	f003 f9f0 	bl	800e024 <iprintf>
 800ac44:	e7e8      	b.n	800ac18 <tcp_input+0xb38>
 800ac46:	bf00      	nop
 800ac48:	08010750 	.word	0x08010750
 800ac4c:	08010a2c 	.word	0x08010a2c
 800ac50:	0800ef30 	.word	0x0800ef30
 800ac54:	08010a58 	.word	0x08010a58
 800ac58:	24010558 	.word	0x24010558
 800ac5c:	08010ab4 	.word	0x08010ab4
 800ac60:	08010b00 	.word	0x08010b00
 800ac64:	08010ad4 	.word	0x08010ad4
 800ac68:	08010aec 	.word	0x08010aec

0800ac6c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
  recv_flags |= TF_CLOSED;
 800ac6c:	4a02      	ldr	r2, [pc, #8]	; (800ac78 <tcp_trigger_input_pcb_close+0xc>)
 800ac6e:	7813      	ldrb	r3, [r2, #0]
 800ac70:	f043 0310 	orr.w	r3, r3, #16
 800ac74:	7013      	strb	r3, [r2, #0]
}
 800ac76:	4770      	bx	lr
 800ac78:	24010584 	.word	0x24010584

0800ac7c <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 800ac7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac80:	9f08      	ldr	r7, [sp, #32]
 800ac82:	4680      	mov	r8, r0
 800ac84:	460d      	mov	r5, r1
 800ac86:	4614      	mov	r4, r2
 800ac88:	461e      	mov	r6, r3
 800ac8a:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
 800ac8e:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
  struct pbuf *p;
  u16_t alloc = length;

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800ac92:	2f00      	cmp	r7, #0
 800ac94:	d033      	beq.n	800acfe <tcp_pbuf_prealloc+0x82>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 800ac96:	42a5      	cmp	r5, r4
 800ac98:	d20e      	bcs.n	800acb8 <tcp_pbuf_prealloc+0x3c>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800ac9a:	f019 0f02 	tst.w	r9, #2
 800ac9e:	d008      	beq.n	800acb2 <tcp_pbuf_prealloc+0x36>
        (!(pcb->flags & TF_NODELAY) &&
         (!first_seg ||
          pcb->unsent != NULL ||
          pcb->unacked != NULL))) {
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800aca0:	f205 51b7 	addw	r1, r5, #1463	; 0x5b7
 800aca4:	f021 0103 	bic.w	r1, r1, #3
 800aca8:	42a1      	cmp	r1, r4
 800acaa:	bf28      	it	cs
 800acac:	4621      	movcs	r1, r4
 800acae:	b289      	uxth	r1, r1
 800acb0:	e003      	b.n	800acba <tcp_pbuf_prealloc+0x3e>
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800acb2:	8b7b      	ldrh	r3, [r7, #26]
 800acb4:	065b      	lsls	r3, r3, #25
 800acb6:	d518      	bpl.n	800acea <tcp_pbuf_prealloc+0x6e>
 800acb8:	4629      	mov	r1, r5
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800acba:	f44f 7220 	mov.w	r2, #640	; 0x280
 800acbe:	4640      	mov	r0, r8
 800acc0:	f7fc fe80 	bl	80079c4 <pbuf_alloc>
  if (p == NULL) {
 800acc4:	4604      	mov	r4, r0
 800acc6:	b168      	cbz	r0, 800ace4 <tcp_pbuf_prealloc+0x68>
    return NULL;
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800acc8:	6803      	ldr	r3, [r0, #0]
 800acca:	b133      	cbz	r3, 800acda <tcp_pbuf_prealloc+0x5e>
 800accc:	4b0f      	ldr	r3, [pc, #60]	; (800ad0c <tcp_pbuf_prealloc+0x90>)
 800acce:	f240 120b 	movw	r2, #267	; 0x10b
 800acd2:	490f      	ldr	r1, [pc, #60]	; (800ad10 <tcp_pbuf_prealloc+0x94>)
 800acd4:	480f      	ldr	r0, [pc, #60]	; (800ad14 <tcp_pbuf_prealloc+0x98>)
 800acd6:	f003 f9a5 	bl	800e024 <iprintf>
  *oversize = p->len - length;
 800acda:	8963      	ldrh	r3, [r4, #10]
 800acdc:	1b5b      	subs	r3, r3, r5
 800acde:	8033      	strh	r3, [r6, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 800ace0:	8125      	strh	r5, [r4, #8]
 800ace2:	8165      	strh	r5, [r4, #10]
  return p;
}
 800ace4:	4620      	mov	r0, r4
 800ace6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        (!(pcb->flags & TF_NODELAY) &&
 800acea:	f1ba 0f00 	cmp.w	sl, #0
 800acee:	d0d7      	beq.n	800aca0 <tcp_pbuf_prealloc+0x24>
         (!first_seg ||
 800acf0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d1d4      	bne.n	800aca0 <tcp_pbuf_prealloc+0x24>
          pcb->unsent != NULL ||
 800acf6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d1d1      	bne.n	800aca0 <tcp_pbuf_prealloc+0x24>
 800acfc:	e7dc      	b.n	800acb8 <tcp_pbuf_prealloc+0x3c>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800acfe:	4b03      	ldr	r3, [pc, #12]	; (800ad0c <tcp_pbuf_prealloc+0x90>)
 800ad00:	22e9      	movs	r2, #233	; 0xe9
 800ad02:	4905      	ldr	r1, [pc, #20]	; (800ad18 <tcp_pbuf_prealloc+0x9c>)
 800ad04:	4803      	ldr	r0, [pc, #12]	; (800ad14 <tcp_pbuf_prealloc+0x98>)
 800ad06:	f003 f98d 	bl	800e024 <iprintf>
 800ad0a:	e7c4      	b.n	800ac96 <tcp_pbuf_prealloc+0x1a>
 800ad0c:	08010b3c 	.word	0x08010b3c
 800ad10:	08010b90 	.word	0x08010b90
 800ad14:	0800ef30 	.word	0x0800ef30
 800ad18:	08010b70 	.word	0x08010b70

0800ad1c <tcp_create_segment>:
{
 800ad1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad20:	460e      	mov	r6, r1
 800ad22:	f89d a020 	ldrb.w	sl, [sp, #32]
 800ad26:	4690      	mov	r8, r2
 800ad28:	4699      	mov	r9, r3
  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800ad2a:	4607      	mov	r7, r0
 800ad2c:	2800      	cmp	r0, #0
 800ad2e:	d04a      	beq.n	800adc6 <tcp_create_segment+0xaa>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800ad30:	2e00      	cmp	r6, #0
 800ad32:	d050      	beq.n	800add6 <tcp_create_segment+0xba>
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800ad34:	ea4f 058a 	mov.w	r5, sl, lsl #2
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800ad38:	2003      	movs	r0, #3
 800ad3a:	f7fc f9c7 	bl	80070cc <memp_malloc>
 800ad3e:	4604      	mov	r4, r0
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800ad40:	f005 0504 	and.w	r5, r5, #4
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800ad44:	2800      	cmp	r0, #0
 800ad46:	d054      	beq.n	800adf2 <tcp_create_segment+0xd6>
  seg->flags = optflags;
 800ad48:	f880 a00a 	strb.w	sl, [r0, #10]
  seg->next = NULL;
 800ad4c:	2300      	movs	r3, #0
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800ad4e:	8932      	ldrh	r2, [r6, #8]
 800ad50:	fa1f fa85 	uxth.w	sl, r5
  seg->p = p;
 800ad54:	6046      	str	r6, [r0, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800ad56:	42aa      	cmp	r2, r5
  seg->next = NULL;
 800ad58:	6003      	str	r3, [r0, #0]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800ad5a:	d32c      	bcc.n	800adb6 <tcp_create_segment+0x9a>
  seg->len = p->tot_len - optlen;
 800ad5c:	eba2 020a 	sub.w	r2, r2, sl
  if (pbuf_add_header(p, TCP_HLEN)) {
 800ad60:	4630      	mov	r0, r6
 800ad62:	2114      	movs	r1, #20
  seg->len = p->tot_len - optlen;
 800ad64:	8122      	strh	r2, [r4, #8]
  if (pbuf_add_header(p, TCP_HLEN)) {
 800ad66:	f7fc fd1d 	bl	80077a4 <pbuf_add_header>
 800ad6a:	4606      	mov	r6, r0
 800ad6c:	2800      	cmp	r0, #0
 800ad6e:	d139      	bne.n	800ade4 <tcp_create_segment+0xc8>
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800ad70:	6863      	ldr	r3, [r4, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800ad72:	02ad      	lsls	r5, r5, #10
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800ad74:	8af8      	ldrh	r0, [r7, #22]
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800ad76:	f8d3 a004 	ldr.w	sl, [r3, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800ad7a:	f505 45a0 	add.w	r5, r5, #20480	; 0x5000
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800ad7e:	f8c4 a00c 	str.w	sl, [r4, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800ad82:	f7fb fe0d 	bl	80069a0 <lwip_htons>
 800ad86:	f8aa 0000 	strh.w	r0, [sl]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800ad8a:	8b38      	ldrh	r0, [r7, #24]
 800ad8c:	68e7      	ldr	r7, [r4, #12]
 800ad8e:	f7fb fe07 	bl	80069a0 <lwip_htons>
 800ad92:	8078      	strh	r0, [r7, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800ad94:	4648      	mov	r0, r9
 800ad96:	68e7      	ldr	r7, [r4, #12]
 800ad98:	f7fb fe06 	bl	80069a8 <lwip_htonl>
 800ad9c:	6078      	str	r0, [r7, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800ad9e:	ea45 0008 	orr.w	r0, r5, r8
 800ada2:	68e7      	ldr	r7, [r4, #12]
 800ada4:	f7fb fdfc 	bl	80069a0 <lwip_htons>
  seg->tcphdr->urgp = 0;
 800ada8:	68e3      	ldr	r3, [r4, #12]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800adaa:	81b8      	strh	r0, [r7, #12]
  seg->tcphdr->urgp = 0;
 800adac:	749e      	strb	r6, [r3, #18]
 800adae:	74de      	strb	r6, [r3, #19]
}
 800adb0:	4620      	mov	r0, r4
 800adb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800adb6:	22b0      	movs	r2, #176	; 0xb0
 800adb8:	4b10      	ldr	r3, [pc, #64]	; (800adfc <tcp_create_segment+0xe0>)
 800adba:	4911      	ldr	r1, [pc, #68]	; (800ae00 <tcp_create_segment+0xe4>)
 800adbc:	4811      	ldr	r0, [pc, #68]	; (800ae04 <tcp_create_segment+0xe8>)
 800adbe:	f003 f931 	bl	800e024 <iprintf>
  seg->len = p->tot_len - optlen;
 800adc2:	8932      	ldrh	r2, [r6, #8]
 800adc4:	e7ca      	b.n	800ad5c <tcp_create_segment+0x40>
  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800adc6:	4b0d      	ldr	r3, [pc, #52]	; (800adfc <tcp_create_segment+0xe0>)
 800adc8:	22a3      	movs	r2, #163	; 0xa3
 800adca:	490f      	ldr	r1, [pc, #60]	; (800ae08 <tcp_create_segment+0xec>)
 800adcc:	480d      	ldr	r0, [pc, #52]	; (800ae04 <tcp_create_segment+0xe8>)
 800adce:	f003 f929 	bl	800e024 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800add2:	2e00      	cmp	r6, #0
 800add4:	d1ae      	bne.n	800ad34 <tcp_create_segment+0x18>
 800add6:	4b09      	ldr	r3, [pc, #36]	; (800adfc <tcp_create_segment+0xe0>)
 800add8:	22a4      	movs	r2, #164	; 0xa4
 800adda:	490c      	ldr	r1, [pc, #48]	; (800ae0c <tcp_create_segment+0xf0>)
 800addc:	4809      	ldr	r0, [pc, #36]	; (800ae04 <tcp_create_segment+0xe8>)
 800adde:	f003 f921 	bl	800e024 <iprintf>
 800ade2:	e7a7      	b.n	800ad34 <tcp_create_segment+0x18>
    tcp_seg_free(seg);
 800ade4:	4620      	mov	r0, r4
    return NULL;
 800ade6:	2400      	movs	r4, #0
    tcp_seg_free(seg);
 800ade8:	f7fd faf2 	bl	80083d0 <tcp_seg_free>
}
 800adec:	4620      	mov	r0, r4
 800adee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    pbuf_free(p);
 800adf2:	4630      	mov	r0, r6
 800adf4:	f7fc fd76 	bl	80078e4 <pbuf_free>
    return NULL;
 800adf8:	e7da      	b.n	800adb0 <tcp_create_segment+0x94>
 800adfa:	bf00      	nop
 800adfc:	08010b3c 	.word	0x08010b3c
 800ae00:	08010be8 	.word	0x08010be8
 800ae04:	0800ef30 	.word	0x0800ef30
 800ae08:	08010ba4 	.word	0x08010ba4
 800ae0c:	08010bc4 	.word	0x08010bc4

0800ae10 <tcp_output_alloc_header_common.constprop.0>:
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800ae10:	3114      	adds	r1, #20
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 800ae12:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800ae16:	b289      	uxth	r1, r1
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 800ae18:	4606      	mov	r6, r0
 800ae1a:	4617      	mov	r7, r2
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800ae1c:	2022      	movs	r0, #34	; 0x22
 800ae1e:	f44f 7220 	mov.w	r2, #640	; 0x280
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 800ae22:	461c      	mov	r4, r3
 800ae24:	f8bd a020 	ldrh.w	sl, [sp, #32]
 800ae28:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
 800ae2c:	f8bd 8028 	ldrh.w	r8, [sp, #40]	; 0x28
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800ae30:	f7fc fdc8 	bl	80079c4 <pbuf_alloc>
  if (p != NULL) {
 800ae34:	4605      	mov	r5, r0
 800ae36:	b300      	cbz	r0, 800ae7a <tcp_output_alloc_header_common.constprop.0+0x6a>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800ae38:	8943      	ldrh	r3, [r0, #10]
 800ae3a:	2b13      	cmp	r3, #19
 800ae3c:	d920      	bls.n	800ae80 <tcp_output_alloc_header_common.constprop.0+0x70>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
    tcphdr->src = lwip_htons(src_port);
 800ae3e:	4620      	mov	r0, r4
    tcphdr = (struct tcp_hdr *)p->payload;
 800ae40:	686c      	ldr	r4, [r5, #4]
    tcphdr->src = lwip_htons(src_port);
 800ae42:	f7fb fdad 	bl	80069a0 <lwip_htons>
 800ae46:	8020      	strh	r0, [r4, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800ae48:	4650      	mov	r0, sl
 800ae4a:	f7fb fda9 	bl	80069a0 <lwip_htons>
    tcphdr->seqno = seqno_be;
 800ae4e:	6067      	str	r7, [r4, #4]
    tcphdr->dest = lwip_htons(dst_port);
 800ae50:	8060      	strh	r0, [r4, #2]
    tcphdr->ackno = lwip_htonl(ackno);
 800ae52:	4630      	mov	r0, r6
 800ae54:	f7fb fda8 	bl	80069a8 <lwip_htonl>
 800ae58:	4603      	mov	r3, r0
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800ae5a:	f449 40a0 	orr.w	r0, r9, #20480	; 0x5000
    tcphdr->ackno = lwip_htonl(ackno);
 800ae5e:	60a3      	str	r3, [r4, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800ae60:	f7fb fd9e 	bl	80069a0 <lwip_htons>
 800ae64:	4603      	mov	r3, r0
    tcphdr->wnd = lwip_htons(wnd);
 800ae66:	4640      	mov	r0, r8
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800ae68:	81a3      	strh	r3, [r4, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800ae6a:	f7fb fd99 	bl	80069a0 <lwip_htons>
    tcphdr->chksum = 0;
 800ae6e:	2300      	movs	r3, #0
    tcphdr->wnd = lwip_htons(wnd);
 800ae70:	81e0      	strh	r0, [r4, #14]
    tcphdr->chksum = 0;
 800ae72:	7423      	strb	r3, [r4, #16]
 800ae74:	7463      	strb	r3, [r4, #17]
    tcphdr->urgp = 0;
 800ae76:	74a3      	strb	r3, [r4, #18]
 800ae78:	74e3      	strb	r3, [r4, #19]
  }
  return p;
}
 800ae7a:	4628      	mov	r0, r5
 800ae7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800ae80:	4b03      	ldr	r3, [pc, #12]	; (800ae90 <tcp_output_alloc_header_common.constprop.0+0x80>)
 800ae82:	f240 7223 	movw	r2, #1827	; 0x723
 800ae86:	4903      	ldr	r1, [pc, #12]	; (800ae94 <tcp_output_alloc_header_common.constprop.0+0x84>)
 800ae88:	4803      	ldr	r0, [pc, #12]	; (800ae98 <tcp_output_alloc_header_common.constprop.0+0x88>)
 800ae8a:	f003 f8cb 	bl	800e024 <iprintf>
 800ae8e:	e7d6      	b.n	800ae3e <tcp_output_alloc_header_common.constprop.0+0x2e>
 800ae90:	08010b3c 	.word	0x08010b3c
 800ae94:	08010c00 	.word	0x08010c00
 800ae98:	0800ef30 	.word	0x0800ef30

0800ae9c <tcp_output_alloc_header.constprop.0>:
 * @param datalen length of tcp data to reserve in pbuf
 * @param seqno_be seqno in network byte order (big-endian)
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
 800ae9c:	b570      	push	{r4, r5, r6, lr}
 800ae9e:	460d      	mov	r5, r1
 800aea0:	b084      	sub	sp, #16
                        u32_t seqno_be /* already in network byte order */)
{
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800aea2:	4604      	mov	r4, r0
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
 800aea4:	4616      	mov	r6, r2
  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800aea6:	b190      	cbz	r0, 800aece <tcp_output_alloc_header.constprop.0+0x32>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800aea8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800aeaa:	2210      	movs	r2, #16
 800aeac:	8b21      	ldrh	r1, [r4, #24]
 800aeae:	9302      	str	r3, [sp, #8]
 800aeb0:	e9cd 1200 	strd	r1, r2, [sp]
 800aeb4:	4632      	mov	r2, r6
 800aeb6:	4629      	mov	r1, r5
 800aeb8:	8ae3      	ldrh	r3, [r4, #22]
 800aeba:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800aebc:	f7ff ffa8 	bl	800ae10 <tcp_output_alloc_header_common.constprop.0>
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800aec0:	b118      	cbz	r0, 800aeca <tcp_output_alloc_header.constprop.0+0x2e>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800aec2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800aec4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aec6:	4413      	add	r3, r2
 800aec8:	62e3      	str	r3, [r4, #44]	; 0x2c
  }
  return p;
}
 800aeca:	b004      	add	sp, #16
 800aecc:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800aece:	4b04      	ldr	r3, [pc, #16]	; (800aee0 <tcp_output_alloc_header.constprop.0+0x44>)
 800aed0:	f240 7242 	movw	r2, #1858	; 0x742
 800aed4:	4903      	ldr	r1, [pc, #12]	; (800aee4 <tcp_output_alloc_header.constprop.0+0x48>)
 800aed6:	4804      	ldr	r0, [pc, #16]	; (800aee8 <tcp_output_alloc_header.constprop.0+0x4c>)
 800aed8:	f003 f8a4 	bl	800e024 <iprintf>
 800aedc:	e7e4      	b.n	800aea8 <tcp_output_alloc_header.constprop.0+0xc>
 800aede:	bf00      	nop
 800aee0:	08010b3c 	.word	0x08010b3c
 800aee4:	08010c30 	.word	0x08010c30
 800aee8:	0800ef30 	.word	0x0800ef30

0800aeec <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800aeec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aeee:	4604      	mov	r4, r0
 800aef0:	b085      	sub	sp, #20
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800aef2:	460d      	mov	r5, r1
{
 800aef4:	4617      	mov	r7, r2
 800aef6:	461e      	mov	r6, r3
  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800aef8:	b321      	cbz	r1, 800af44 <tcp_output_control_segment+0x58>
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800aefa:	b35c      	cbz	r4, 800af54 <tcp_output_control_segment+0x68>
 800aefc:	7a20      	ldrb	r0, [r4, #8]
 800aefe:	b9a8      	cbnz	r0, 800af2c <tcp_output_control_segment+0x40>
    return ip_route(src, dst);
 800af00:	4630      	mov	r0, r6
 800af02:	f002 f869 	bl	800cfd8 <ip4_route>

  netif = tcp_route(pcb, src, dst);
  if (netif == NULL) {
 800af06:	b1a8      	cbz	r0, 800af34 <tcp_output_control_segment+0x48>
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800af08:	7ae3      	ldrb	r3, [r4, #11]
      tos = pcb->tos;
 800af0a:	7aa4      	ldrb	r4, [r4, #10]
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
      tos = 0;
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800af0c:	9400      	str	r4, [sp, #0]
 800af0e:	2406      	movs	r4, #6
 800af10:	4632      	mov	r2, r6
 800af12:	4639      	mov	r1, r7
 800af14:	9002      	str	r0, [sp, #8]
 800af16:	4628      	mov	r0, r5
 800af18:	9401      	str	r4, [sp, #4]
 800af1a:	f002 f9f3 	bl	800d304 <ip4_output_if>
 800af1e:	4604      	mov	r4, r0
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800af20:	4628      	mov	r0, r5
 800af22:	f7fc fcdf 	bl	80078e4 <pbuf_free>
  return err;
}
 800af26:	4620      	mov	r0, r4
 800af28:	b005      	add	sp, #20
 800af2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return netif_get_by_index(pcb->netif_idx);
 800af2c:	f7fc fb28 	bl	8007580 <netif_get_by_index>
  if (netif == NULL) {
 800af30:	2800      	cmp	r0, #0
 800af32:	d1e9      	bne.n	800af08 <tcp_output_control_segment+0x1c>
    err = ERR_RTE;
 800af34:	f06f 0403 	mvn.w	r4, #3
  pbuf_free(p);
 800af38:	4628      	mov	r0, r5
 800af3a:	f7fc fcd3 	bl	80078e4 <pbuf_free>
}
 800af3e:	4620      	mov	r0, r4
 800af40:	b005      	add	sp, #20
 800af42:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800af44:	4b07      	ldr	r3, [pc, #28]	; (800af64 <tcp_output_control_segment+0x78>)
 800af46:	f240 7287 	movw	r2, #1927	; 0x787
 800af4a:	4907      	ldr	r1, [pc, #28]	; (800af68 <tcp_output_control_segment+0x7c>)
 800af4c:	4807      	ldr	r0, [pc, #28]	; (800af6c <tcp_output_control_segment+0x80>)
 800af4e:	f003 f869 	bl	800e024 <iprintf>
 800af52:	e7d2      	b.n	800aefa <tcp_output_control_segment+0xe>
    return ip_route(src, dst);
 800af54:	4630      	mov	r0, r6
 800af56:	f002 f83f 	bl	800cfd8 <ip4_route>
  if (netif == NULL) {
 800af5a:	2800      	cmp	r0, #0
 800af5c:	d0ea      	beq.n	800af34 <tcp_output_control_segment+0x48>
      ttl = TCP_TTL;
 800af5e:	23ff      	movs	r3, #255	; 0xff
 800af60:	e7d4      	b.n	800af0c <tcp_output_control_segment+0x20>
 800af62:	bf00      	nop
 800af64:	08010b3c 	.word	0x08010b3c
 800af68:	08010c58 	.word	0x08010c58
 800af6c:	0800ef30 	.word	0x0800ef30

0800af70 <tcp_write>:
{
 800af70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  u16_t oversize = 0;
 800af74:	2400      	movs	r4, #0
{
 800af76:	b091      	sub	sp, #68	; 0x44
 800af78:	9107      	str	r1, [sp, #28]
 800af7a:	9309      	str	r3, [sp, #36]	; 0x24
  u16_t oversize = 0;
 800af7c:	f8ad 403e 	strh.w	r4, [sp, #62]	; 0x3e
  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800af80:	2800      	cmp	r0, #0
 800af82:	f000 8300 	beq.w	800b586 <tcp_write+0x616>
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 800af86:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 800af8a:	4692      	mov	sl, r2
 800af8c:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 800af8e:	4681      	mov	r9, r0
 800af90:	085b      	lsrs	r3, r3, #1
 800af92:	4293      	cmp	r3, r2
 800af94:	bf28      	it	cs
 800af96:	4613      	movcs	r3, r2
 800af98:	469b      	mov	fp, r3
  mss_local = mss_local ? mss_local : pcb->mss;
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	bf08      	it	eq
 800af9e:	4693      	moveq	fp, r2
  LWIP_ASSERT_CORE_LOCKED();
 800afa0:	f7f8 ffca 	bl	8003f38 <sys_check_core_locking>
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800afa4:	9b07      	ldr	r3, [sp, #28]
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	f000 82e1 	beq.w	800b56e <tcp_write+0x5fe>
  if ((pcb->state != ESTABLISHED) &&
 800afac:	f899 3014 	ldrb.w	r3, [r9, #20]
      (pcb->state != CLOSE_WAIT) &&
 800afb0:	1e9a      	subs	r2, r3, #2
      (pcb->state != SYN_SENT) &&
 800afb2:	2a02      	cmp	r2, #2
 800afb4:	d902      	bls.n	800afbc <tcp_write+0x4c>
 800afb6:	2b07      	cmp	r3, #7
 800afb8:	f040 829d 	bne.w	800b4f6 <tcp_write+0x586>
  } else if (len == 0) {
 800afbc:	f1ba 0f00 	cmp.w	sl, #0
 800afc0:	f000 80ec 	beq.w	800b19c <tcp_write+0x22c>
  if (len > pcb->snd_buf) {
 800afc4:	f8b9 3064 	ldrh.w	r3, [r9, #100]	; 0x64
 800afc8:	4553      	cmp	r3, sl
 800afca:	f0c0 82b7 	bcc.w	800b53c <tcp_write+0x5cc>
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 800afce:	f8b9 6066 	ldrh.w	r6, [r9, #102]	; 0x66
 800afd2:	2e0f      	cmp	r6, #15
 800afd4:	f200 82b2 	bhi.w	800b53c <tcp_write+0x5cc>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800afd8:	f8d9 3070 	ldr.w	r3, [r9, #112]	; 0x70
  if (pcb->snd_queuelen != 0) {
 800afdc:	2e00      	cmp	r6, #0
 800afde:	f000 80d3 	beq.w	800b188 <tcp_write+0x218>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	f040 80dc 	bne.w	800b1a0 <tcp_write+0x230>
 800afe8:	f8d9 806c 	ldr.w	r8, [r9, #108]	; 0x6c
 800afec:	f1b8 0f00 	cmp.w	r8, #0
 800aff0:	f000 8264 	beq.w	800b4bc <tcp_write+0x54c>
 800aff4:	4643      	mov	r3, r8
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800aff6:	461a      	mov	r2, r3
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	2b00      	cmp	r3, #0
 800affc:	d1fb      	bne.n	800aff6 <tcp_write+0x86>
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800affe:	7a94      	ldrb	r4, [r2, #10]
 800b000:	4698      	mov	r8, r3
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800b002:	8913      	ldrh	r3, [r2, #8]
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800b004:	00a4      	lsls	r4, r4, #2
 800b006:	920b      	str	r2, [sp, #44]	; 0x2c
 800b008:	f004 0404 	and.w	r4, r4, #4
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800b00c:	191a      	adds	r2, r3, r4
 800b00e:	4593      	cmp	fp, r2
 800b010:	f2c0 81a7 	blt.w	800b362 <tcp_write+0x3f2>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800b014:	ebab 0404 	sub.w	r4, fp, r4
 800b018:	1ae4      	subs	r4, r4, r3
    oversize = pcb->unsent_oversize;
 800b01a:	f8b9 3068 	ldrh.w	r3, [r9, #104]	; 0x68
    space = mss_local - (last_unsent->len + unsent_optlen);
 800b01e:	b2a4      	uxth	r4, r4
    oversize = pcb->unsent_oversize;
 800b020:	930a      	str	r3, [sp, #40]	; 0x28
 800b022:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
    if (oversize > 0) {
 800b026:	2b00      	cmp	r3, #0
 800b028:	f000 80cf 	beq.w	800b1ca <tcp_write+0x25a>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800b02c:	42a3      	cmp	r3, r4
 800b02e:	f200 818b 	bhi.w	800b348 <tcp_write+0x3d8>
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800b032:	45a2      	cmp	sl, r4
 800b034:	4653      	mov	r3, sl
 800b036:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b038:	bf28      	it	cs
 800b03a:	4623      	movcs	r3, r4
 800b03c:	4293      	cmp	r3, r2
 800b03e:	bf28      	it	cs
 800b040:	4613      	movcs	r3, r2
      oversize -= oversize_used;
 800b042:	1ad2      	subs	r2, r2, r3
      space -= oversize_used;
 800b044:	1ae4      	subs	r4, r4, r3
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800b046:	930a      	str	r3, [sp, #40]	; 0x28
      oversize -= oversize_used;
 800b048:	b292      	uxth	r2, r2
      space -= oversize_used;
 800b04a:	b2a4      	uxth	r4, r4
      oversize -= oversize_used;
 800b04c:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800b050:	2a00      	cmp	r2, #0
 800b052:	f000 8184 	beq.w	800b35e <tcp_write+0x3ee>
 800b056:	459a      	cmp	sl, r3
 800b058:	f000 8181 	beq.w	800b35e <tcp_write+0x3ee>
 800b05c:	4bb2      	ldr	r3, [pc, #712]	; (800b328 <tcp_write+0x3b8>)
 800b05e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b062:	49b2      	ldr	r1, [pc, #712]	; (800b32c <tcp_write+0x3bc>)
 800b064:	48b2      	ldr	r0, [pc, #712]	; (800b330 <tcp_write+0x3c0>)
 800b066:	f002 ffdd 	bl	800e024 <iprintf>
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800b06a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800b06c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800b06e:	459a      	cmp	sl, r3
 800b070:	f200 80b0 	bhi.w	800b1d4 <tcp_write+0x264>
  struct pbuf *concat_p = NULL;
 800b074:	2300      	movs	r3, #0
 800b076:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b078:	930c      	str	r3, [sp, #48]	; 0x30
  u16_t extendlen = 0;
 800b07a:	930d      	str	r3, [sp, #52]	; 0x34
  while (pos < len) {
 800b07c:	45a2      	cmp	sl, r4
 800b07e:	f240 80ee 	bls.w	800b25e <tcp_write+0x2ee>
 800b082:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b084:	f04f 0800 	mov.w	r8, #0
 800b088:	f003 0301 	and.w	r3, r3, #1
 800b08c:	f8cd 8014 	str.w	r8, [sp, #20]
 800b090:	9308      	str	r3, [sp, #32]
 800b092:	4643      	mov	r3, r8
 800b094:	46d8      	mov	r8, fp
 800b096:	469b      	mov	fp, r3
 800b098:	e042      	b.n	800b120 <tcp_write+0x1b0>
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800b09a:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	f040 80f0 	bne.w	800b284 <tcp_write+0x314>
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800b0a4:	2201      	movs	r2, #1
 800b0a6:	4629      	mov	r1, r5
 800b0a8:	2036      	movs	r0, #54	; 0x36
 800b0aa:	f7fc fc8b 	bl	80079c4 <pbuf_alloc>
 800b0ae:	2800      	cmp	r0, #0
 800b0b0:	f000 8100 	beq.w	800b2b4 <tcp_write+0x344>
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800b0b4:	9a07      	ldr	r2, [sp, #28]
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800b0b6:	2100      	movs	r1, #0
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800b0b8:	9006      	str	r0, [sp, #24]
 800b0ba:	4422      	add	r2, r4
 800b0bc:	6042      	str	r2, [r0, #4]
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800b0be:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b0c2:	2036      	movs	r0, #54	; 0x36
 800b0c4:	f7fc fc7e 	bl	80079c4 <pbuf_alloc>
 800b0c8:	9b06      	ldr	r3, [sp, #24]
 800b0ca:	4607      	mov	r7, r0
 800b0cc:	2800      	cmp	r0, #0
 800b0ce:	f000 8196 	beq.w	800b3fe <tcp_write+0x48e>
      pbuf_cat(p/*header*/, p2/*data*/);
 800b0d2:	4619      	mov	r1, r3
 800b0d4:	f7fc fda6 	bl	8007c24 <pbuf_cat>
    queuelen += pbuf_clen(p);
 800b0d8:	4638      	mov	r0, r7
 800b0da:	f7fc fd79 	bl	8007bd0 <pbuf_clen>
 800b0de:	4430      	add	r0, r6
 800b0e0:	b286      	uxth	r6, r0
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800b0e2:	2e10      	cmp	r6, #16
 800b0e4:	d84a      	bhi.n	800b17c <tcp_write+0x20c>
    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800b0e6:	f8d9 305c 	ldr.w	r3, [r9, #92]	; 0x5c
 800b0ea:	2200      	movs	r2, #0
 800b0ec:	4639      	mov	r1, r7
 800b0ee:	4648      	mov	r0, r9
 800b0f0:	4423      	add	r3, r4
 800b0f2:	9200      	str	r2, [sp, #0]
 800b0f4:	f7ff fe12 	bl	800ad1c <tcp_create_segment>
 800b0f8:	4607      	mov	r7, r0
 800b0fa:	2800      	cmp	r0, #0
 800b0fc:	f000 80da 	beq.w	800b2b4 <tcp_write+0x344>
    if (queue == NULL) {
 800b100:	9b05      	ldr	r3, [sp, #20]
 800b102:	2b00      	cmp	r3, #0
 800b104:	f000 80a3 	beq.w	800b24e <tcp_write+0x2de>
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800b108:	f1bb 0f00 	cmp.w	fp, #0
 800b10c:	f000 80c2 	beq.w	800b294 <tcp_write+0x324>
    pos += seglen;
 800b110:	4425      	add	r5, r4
      prev_seg->next = seg;
 800b112:	f8cb 7000 	str.w	r7, [fp]
    pos += seglen;
 800b116:	b2ac      	uxth	r4, r5
  while (pos < len) {
 800b118:	45a2      	cmp	sl, r4
 800b11a:	f240 809e 	bls.w	800b25a <tcp_write+0x2ea>
 800b11e:	46bb      	mov	fp, r7
    u16_t left = len - pos;
 800b120:	ebaa 0504 	sub.w	r5, sl, r4
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800b124:	9b08      	ldr	r3, [sp, #32]
    u16_t seglen = LWIP_MIN(left, max_len);
 800b126:	b2ad      	uxth	r5, r5
 800b128:	4545      	cmp	r5, r8
 800b12a:	bf28      	it	cs
 800b12c:	4645      	movcs	r5, r8
 800b12e:	b2ad      	uxth	r5, r5
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800b130:	2b00      	cmp	r3, #0
 800b132:	d0b2      	beq.n	800b09a <tcp_write+0x12a>
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800b134:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b136:	4642      	mov	r2, r8
 800b138:	4629      	mov	r1, r5
 800b13a:	2036      	movs	r0, #54	; 0x36
 800b13c:	e9cd 9300 	strd	r9, r3, [sp]
 800b140:	9b05      	ldr	r3, [sp, #20]
 800b142:	fab3 f383 	clz	r3, r3
 800b146:	095b      	lsrs	r3, r3, #5
 800b148:	9302      	str	r3, [sp, #8]
 800b14a:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 800b14e:	f7ff fd95 	bl	800ac7c <tcp_pbuf_prealloc>
 800b152:	4607      	mov	r7, r0
 800b154:	2800      	cmp	r0, #0
 800b156:	f000 80ad 	beq.w	800b2b4 <tcp_write+0x344>
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800b15a:	8943      	ldrh	r3, [r0, #10]
 800b15c:	42ab      	cmp	r3, r5
 800b15e:	f0c0 80a1 	bcc.w	800b2a4 <tcp_write+0x334>
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 800b162:	9b07      	ldr	r3, [sp, #28]
 800b164:	462a      	mov	r2, r5
 800b166:	6878      	ldr	r0, [r7, #4]
 800b168:	1919      	adds	r1, r3, r4
 800b16a:	f003 f88b 	bl	800e284 <memcpy>
    queuelen += pbuf_clen(p);
 800b16e:	4638      	mov	r0, r7
 800b170:	f7fc fd2e 	bl	8007bd0 <pbuf_clen>
 800b174:	4430      	add	r0, r6
 800b176:	b286      	uxth	r6, r0
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800b178:	2e10      	cmp	r6, #16
 800b17a:	d9b4      	bls.n	800b0e6 <tcp_write+0x176>
      pbuf_free(p);
 800b17c:	4638      	mov	r0, r7
 800b17e:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800b182:	f7fc fbaf 	bl	80078e4 <pbuf_free>
      goto memerr;
 800b186:	e097      	b.n	800b2b8 <tcp_write+0x348>
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800b188:	2b00      	cmp	r3, #0
 800b18a:	f000 80b6 	beq.w	800b2fa <tcp_write+0x38a>
 800b18e:	4b66      	ldr	r3, [pc, #408]	; (800b328 <tcp_write+0x3b8>)
 800b190:	f44f 72ac 	mov.w	r2, #344	; 0x158
 800b194:	4967      	ldr	r1, [pc, #412]	; (800b334 <tcp_write+0x3c4>)
 800b196:	4866      	ldr	r0, [pc, #408]	; (800b330 <tcp_write+0x3c0>)
 800b198:	f002 ff44 	bl	800e024 <iprintf>
  queuelen = pcb->snd_queuelen;
 800b19c:	f8b9 6066 	ldrh.w	r6, [r9, #102]	; 0x66
  if (pcb->unsent != NULL) {
 800b1a0:	f8d9 806c 	ldr.w	r8, [r9, #108]	; 0x6c
 800b1a4:	f1b8 0f00 	cmp.w	r8, #0
 800b1a8:	f47f af24 	bne.w	800aff4 <tcp_write+0x84>
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800b1ac:	f8b9 3068 	ldrh.w	r3, [r9, #104]	; 0x68
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	f040 80ac 	bne.w	800b30e <tcp_write+0x39e>
  while (pos < len) {
 800b1b6:	f1ba 0f00 	cmp.w	sl, #0
 800b1ba:	f000 81c8 	beq.w	800b54e <tcp_write+0x5de>
 800b1be:	2400      	movs	r4, #0
 800b1c0:	940d      	str	r4, [sp, #52]	; 0x34
 800b1c2:	940c      	str	r4, [sp, #48]	; 0x30
 800b1c4:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
 800b1c8:	e75b      	b.n	800b082 <tcp_write+0x112>
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800b1ca:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800b1cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b1ce:	459a      	cmp	sl, r3
 800b1d0:	f67f af50 	bls.w	800b074 <tcp_write+0x104>
 800b1d4:	2c00      	cmp	r4, #0
 800b1d6:	f43f af4d 	beq.w	800b074 <tcp_write+0x104>
 800b1da:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b1dc:	8912      	ldrh	r2, [r2, #8]
 800b1de:	920d      	str	r2, [sp, #52]	; 0x34
 800b1e0:	2a00      	cmp	r2, #0
 800b1e2:	f000 809c 	beq.w	800b31e <tcp_write+0x3ae>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800b1e6:	ebaa 0703 	sub.w	r7, sl, r3
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800b1ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
      u16_t seglen = LWIP_MIN(space, len - pos);
 800b1ec:	42a7      	cmp	r7, r4
 800b1ee:	bfa8      	it	ge
 800b1f0:	4627      	movge	r7, r4
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800b1f2:	07da      	lsls	r2, r3, #31
      u16_t seglen = LWIP_MIN(space, len - pos);
 800b1f4:	b2bd      	uxth	r5, r7
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800b1f6:	f100 8188 	bmi.w	800b50a <tcp_write+0x59a>
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800b1fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b1fc:	685a      	ldr	r2, [r3, #4]
 800b1fe:	4613      	mov	r3, r2
 800b200:	6812      	ldr	r2, [r2, #0]
 800b202:	2a00      	cmp	r2, #0
 800b204:	d1fb      	bne.n	800b1fe <tcp_write+0x28e>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800b206:	920c      	str	r2, [sp, #48]	; 0x30
 800b208:	7b1a      	ldrb	r2, [r3, #12]
 800b20a:	f012 0fc0 	tst.w	r2, #192	; 0xc0
 800b20e:	d106      	bne.n	800b21e <tcp_write+0x2ae>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800b210:	895a      	ldrh	r2, [r3, #10]
 800b212:	685b      	ldr	r3, [r3, #4]
 800b214:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800b216:	9a07      	ldr	r2, [sp, #28]
 800b218:	429a      	cmp	r2, r3
 800b21a:	f000 8168 	beq.w	800b4ee <tcp_write+0x57e>
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800b21e:	2201      	movs	r2, #1
 800b220:	4629      	mov	r1, r5
 800b222:	2000      	movs	r0, #0
 800b224:	f7fc fbce 	bl	80079c4 <pbuf_alloc>
 800b228:	900c      	str	r0, [sp, #48]	; 0x30
 800b22a:	2800      	cmp	r0, #0
 800b22c:	f000 813f 	beq.w	800b4ae <tcp_write+0x53e>
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 800b230:	9b07      	ldr	r3, [sp, #28]
 800b232:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b234:	440b      	add	r3, r1
 800b236:	6043      	str	r3, [r0, #4]
          queuelen += pbuf_clen(concat_p);
 800b238:	f7fc fcca 	bl	8007bd0 <pbuf_clen>
 800b23c:	4430      	add	r0, r6
  u16_t extendlen = 0;
 800b23e:	2300      	movs	r3, #0
          queuelen += pbuf_clen(concat_p);
 800b240:	b286      	uxth	r6, r0
  u16_t extendlen = 0;
 800b242:	930d      	str	r3, [sp, #52]	; 0x34
      pos += seglen;
 800b244:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b246:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800b248:	18ec      	adds	r4, r5, r3
 800b24a:	b2a4      	uxth	r4, r4
 800b24c:	e716      	b.n	800b07c <tcp_write+0x10c>
    pos += seglen;
 800b24e:	4425      	add	r5, r4
 800b250:	9005      	str	r0, [sp, #20]
 800b252:	b2ac      	uxth	r4, r5
  while (pos < len) {
 800b254:	45a2      	cmp	sl, r4
 800b256:	f63f af62 	bhi.w	800b11e <tcp_write+0x1ae>
 800b25a:	f8dd 8014 	ldr.w	r8, [sp, #20]
  if (oversize_used > 0) {
 800b25e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b260:	2b00      	cmp	r3, #0
 800b262:	f000 80dc 	beq.w	800b41e <tcp_write+0x4ae>
    for (p = last_unsent->p; p; p = p->next) {
 800b266:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b268:	6854      	ldr	r4, [r2, #4]
 800b26a:	2c00      	cmp	r4, #0
 800b26c:	f000 8091 	beq.w	800b392 <tcp_write+0x422>
 800b270:	469b      	mov	fp, r3
 800b272:	9d07      	ldr	r5, [sp, #28]
      p->tot_len += oversize_used;
 800b274:	8923      	ldrh	r3, [r4, #8]
      if (p->next == NULL) {
 800b276:	6822      	ldr	r2, [r4, #0]
      p->tot_len += oversize_used;
 800b278:	445b      	add	r3, fp
 800b27a:	8123      	strh	r3, [r4, #8]
      if (p->next == NULL) {
 800b27c:	2a00      	cmp	r2, #0
 800b27e:	d07a      	beq.n	800b376 <tcp_write+0x406>
      pos += seglen;
 800b280:	4614      	mov	r4, r2
 800b282:	e7f7      	b.n	800b274 <tcp_write+0x304>
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800b284:	4b28      	ldr	r3, [pc, #160]	; (800b328 <tcp_write+0x3b8>)
 800b286:	f240 2271 	movw	r2, #625	; 0x271
 800b28a:	492b      	ldr	r1, [pc, #172]	; (800b338 <tcp_write+0x3c8>)
 800b28c:	4828      	ldr	r0, [pc, #160]	; (800b330 <tcp_write+0x3c0>)
 800b28e:	f002 fec9 	bl	800e024 <iprintf>
 800b292:	e707      	b.n	800b0a4 <tcp_write+0x134>
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800b294:	4b24      	ldr	r3, [pc, #144]	; (800b328 <tcp_write+0x3b8>)
 800b296:	f240 22ab 	movw	r2, #683	; 0x2ab
 800b29a:	4928      	ldr	r1, [pc, #160]	; (800b33c <tcp_write+0x3cc>)
 800b29c:	4824      	ldr	r0, [pc, #144]	; (800b330 <tcp_write+0x3c0>)
 800b29e:	f002 fec1 	bl	800e024 <iprintf>
 800b2a2:	e735      	b.n	800b110 <tcp_write+0x1a0>
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800b2a4:	4b20      	ldr	r3, [pc, #128]	; (800b328 <tcp_write+0x3b8>)
 800b2a6:	f240 2266 	movw	r2, #614	; 0x266
 800b2aa:	4925      	ldr	r1, [pc, #148]	; (800b340 <tcp_write+0x3d0>)
 800b2ac:	4820      	ldr	r0, [pc, #128]	; (800b330 <tcp_write+0x3c0>)
 800b2ae:	f002 feb9 	bl	800e024 <iprintf>
 800b2b2:	e756      	b.n	800b162 <tcp_write+0x1f2>
 800b2b4:	f8dd 8014 	ldr.w	r8, [sp, #20]
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b2b8:	f8b9 301a 	ldrh.w	r3, [r9, #26]
 800b2bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b2c0:	f8a9 301a 	strh.w	r3, [r9, #26]
  if (concat_p != NULL) {
 800b2c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b2c6:	b113      	cbz	r3, 800b2ce <tcp_write+0x35e>
    pbuf_free(concat_p);
 800b2c8:	4618      	mov	r0, r3
 800b2ca:	f7fc fb0b 	bl	80078e4 <pbuf_free>
  if (queue != NULL) {
 800b2ce:	f1b8 0f00 	cmp.w	r8, #0
 800b2d2:	d002      	beq.n	800b2da <tcp_write+0x36a>
    tcp_segs_free(queue);
 800b2d4:	4640      	mov	r0, r8
 800b2d6:	f7fd f869 	bl	80083ac <tcp_segs_free>
  if (pcb->snd_queuelen != 0) {
 800b2da:	f8b9 3066 	ldrh.w	r3, [r9, #102]	; 0x66
 800b2de:	b13b      	cbz	r3, 800b2f0 <tcp_write+0x380>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800b2e0:	f8d9 3070 	ldr.w	r3, [r9, #112]	; 0x70
 800b2e4:	b923      	cbnz	r3, 800b2f0 <tcp_write+0x380>
 800b2e6:	f8d9 306c 	ldr.w	r3, [r9, #108]	; 0x6c
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	f000 808d 	beq.w	800b40a <tcp_write+0x49a>
  return ERR_MEM;
 800b2f0:	f04f 30ff 	mov.w	r0, #4294967295
}
 800b2f4:	b011      	add	sp, #68	; 0x44
 800b2f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800b2fa:	f8d9 306c 	ldr.w	r3, [r9, #108]	; 0x6c
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	f47f af45 	bne.w	800b18e <tcp_write+0x21e>
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800b304:	f8b9 3068 	ldrh.w	r3, [r9, #104]	; 0x68
 800b308:	2b00      	cmp	r3, #0
 800b30a:	f43f af58 	beq.w	800b1be <tcp_write+0x24e>
 800b30e:	4b06      	ldr	r3, [pc, #24]	; (800b328 <tcp_write+0x3b8>)
 800b310:	f240 224a 	movw	r2, #586	; 0x24a
 800b314:	490b      	ldr	r1, [pc, #44]	; (800b344 <tcp_write+0x3d4>)
 800b316:	4806      	ldr	r0, [pc, #24]	; (800b330 <tcp_write+0x3c0>)
 800b318:	f002 fe84 	bl	800e024 <iprintf>
 800b31c:	e74b      	b.n	800b1b6 <tcp_write+0x246>
  struct pbuf *concat_p = NULL;
 800b31e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b320:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b322:	930c      	str	r3, [sp, #48]	; 0x30
 800b324:	e6ad      	b.n	800b082 <tcp_write+0x112>
 800b326:	bf00      	nop
 800b328:	08010b3c 	.word	0x08010b3c
 800b32c:	08010d78 	.word	0x08010d78
 800b330:	0800ef30 	.word	0x0800ef30
 800b334:	08010d0c 	.word	0x08010d0c
 800b338:	08010e34 	.word	0x08010e34
 800b33c:	08010e44 	.word	0x08010e44
 800b340:	08010df4 	.word	0x08010df4
 800b344:	08010dc4 	.word	0x08010dc4
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800b348:	4b94      	ldr	r3, [pc, #592]	; (800b59c <tcp_write+0x62c>)
 800b34a:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 800b34e:	4994      	ldr	r1, [pc, #592]	; (800b5a0 <tcp_write+0x630>)
 800b350:	4894      	ldr	r0, [pc, #592]	; (800b5a4 <tcp_write+0x634>)
 800b352:	f002 fe67 	bl	800e024 <iprintf>
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800b356:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 800b35a:	930a      	str	r3, [sp, #40]	; 0x28
 800b35c:	e669      	b.n	800b032 <tcp_write+0xc2>
 800b35e:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800b360:	e734      	b.n	800b1cc <tcp_write+0x25c>
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800b362:	4b8e      	ldr	r3, [pc, #568]	; (800b59c <tcp_write+0x62c>)
 800b364:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800b368:	498f      	ldr	r1, [pc, #572]	; (800b5a8 <tcp_write+0x638>)
 800b36a:	488e      	ldr	r0, [pc, #568]	; (800b5a4 <tcp_write+0x634>)
 800b36c:	f002 fe5a 	bl	800e024 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800b370:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b372:	891b      	ldrh	r3, [r3, #8]
 800b374:	e64e      	b.n	800b014 <tcp_write+0xa4>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800b376:	8963      	ldrh	r3, [r4, #10]
 800b378:	465a      	mov	r2, fp
 800b37a:	6860      	ldr	r0, [r4, #4]
 800b37c:	4629      	mov	r1, r5
 800b37e:	4418      	add	r0, r3
 800b380:	f002 ff80 	bl	800e284 <memcpy>
        p->len += oversize_used;
 800b384:	8963      	ldrh	r3, [r4, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800b386:	6822      	ldr	r2, [r4, #0]
        p->len += oversize_used;
 800b388:	445b      	add	r3, fp
 800b38a:	8163      	strh	r3, [r4, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800b38c:	2a00      	cmp	r2, #0
 800b38e:	f47f af77 	bne.w	800b280 <tcp_write+0x310>
    last_unsent->len += oversize_used;
 800b392:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b394:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b396:	8913      	ldrh	r3, [r2, #8]
 800b398:	4419      	add	r1, r3
  pcb->unsent_oversize = oversize;
 800b39a:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
    last_unsent->len += oversize_used;
 800b39e:	8111      	strh	r1, [r2, #8]
  pcb->unsent_oversize = oversize;
 800b3a0:	f8a9 3068 	strh.w	r3, [r9, #104]	; 0x68
  if (concat_p != NULL) {
 800b3a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d061      	beq.n	800b46e <tcp_write+0x4fe>
    pbuf_cat(last_unsent->p, concat_p);
 800b3aa:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800b3ac:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b3ae:	6860      	ldr	r0, [r4, #4]
 800b3b0:	4629      	mov	r1, r5
 800b3b2:	f7fc fc37 	bl	8007c24 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800b3b6:	892a      	ldrh	r2, [r5, #8]
 800b3b8:	8923      	ldrh	r3, [r4, #8]
 800b3ba:	4413      	add	r3, r2
 800b3bc:	8123      	strh	r3, [r4, #8]
    last_unsent->next = queue;
 800b3be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b3c0:	f8c3 8000 	str.w	r8, [r3]
  pcb->snd_lbb += len;
 800b3c4:	f8d9 305c 	ldr.w	r3, [r9, #92]	; 0x5c
  pcb->snd_queuelen = queuelen;
 800b3c8:	f8a9 6066 	strh.w	r6, [r9, #102]	; 0x66
  pcb->snd_lbb += len;
 800b3cc:	4453      	add	r3, sl
 800b3ce:	f8c9 305c 	str.w	r3, [r9, #92]	; 0x5c
  pcb->snd_buf -= len;
 800b3d2:	f8b9 3064 	ldrh.w	r3, [r9, #100]	; 0x64
 800b3d6:	eba3 030a 	sub.w	r3, r3, sl
 800b3da:	f8a9 3064 	strh.w	r3, [r9, #100]	; 0x64
  if (pcb->snd_queuelen != 0) {
 800b3de:	b11e      	cbz	r6, 800b3e8 <tcp_write+0x478>
    LWIP_ASSERT("tcp_write: valid queue length",
 800b3e0:	f8d9 3070 	ldr.w	r3, [r9, #112]	; 0x70
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d036      	beq.n	800b456 <tcp_write+0x4e6>
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 800b3e8:	b12f      	cbz	r7, 800b3f6 <tcp_write+0x486>
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	b11b      	cbz	r3, 800b3f6 <tcp_write+0x486>
 800b3ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b3f0:	f012 0502 	ands.w	r5, r2, #2
 800b3f4:	d025      	beq.n	800b442 <tcp_write+0x4d2>
  return ERR_OK;
 800b3f6:	2000      	movs	r0, #0
}
 800b3f8:	b011      	add	sp, #68	; 0x44
 800b3fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        pbuf_free(p2);
 800b3fe:	4618      	mov	r0, r3
 800b400:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800b404:	f7fc fa6e 	bl	80078e4 <pbuf_free>
        goto memerr;
 800b408:	e756      	b.n	800b2b8 <tcp_write+0x348>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800b40a:	4b64      	ldr	r3, [pc, #400]	; (800b59c <tcp_write+0x62c>)
 800b40c:	f240 3227 	movw	r2, #807	; 0x327
 800b410:	4966      	ldr	r1, [pc, #408]	; (800b5ac <tcp_write+0x63c>)
 800b412:	4864      	ldr	r0, [pc, #400]	; (800b5a4 <tcp_write+0x634>)
 800b414:	f002 fe06 	bl	800e024 <iprintf>
  return ERR_MEM;
 800b418:	f04f 30ff 	mov.w	r0, #4294967295
 800b41c:	e76a      	b.n	800b2f4 <tcp_write+0x384>
  pcb->unsent_oversize = oversize;
 800b41e:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 800b422:	f8a9 3068 	strh.w	r3, [r9, #104]	; 0x68
  if (concat_p != NULL) {
 800b426:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d051      	beq.n	800b4d0 <tcp_write+0x560>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800b42c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d1bb      	bne.n	800b3aa <tcp_write+0x43a>
 800b432:	4b5a      	ldr	r3, [pc, #360]	; (800b59c <tcp_write+0x62c>)
 800b434:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 800b438:	495d      	ldr	r1, [pc, #372]	; (800b5b0 <tcp_write+0x640>)
 800b43a:	485a      	ldr	r0, [pc, #360]	; (800b5a4 <tcp_write+0x634>)
 800b43c:	f002 fdf2 	bl	800e024 <iprintf>
 800b440:	e7b3      	b.n	800b3aa <tcp_write+0x43a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800b442:	2008      	movs	r0, #8
 800b444:	899c      	ldrh	r4, [r3, #12]
 800b446:	f7fb faab 	bl	80069a0 <lwip_htons>
 800b44a:	4602      	mov	r2, r0
 800b44c:	68fb      	ldr	r3, [r7, #12]
  return ERR_OK;
 800b44e:	4628      	mov	r0, r5
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800b450:	4314      	orrs	r4, r2
 800b452:	819c      	strh	r4, [r3, #12]
 800b454:	e74e      	b.n	800b2f4 <tcp_write+0x384>
    LWIP_ASSERT("tcp_write: valid queue length",
 800b456:	f8d9 306c 	ldr.w	r3, [r9, #108]	; 0x6c
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d1c4      	bne.n	800b3e8 <tcp_write+0x478>
 800b45e:	4b4f      	ldr	r3, [pc, #316]	; (800b59c <tcp_write+0x62c>)
 800b460:	f240 3212 	movw	r2, #786	; 0x312
 800b464:	4951      	ldr	r1, [pc, #324]	; (800b5ac <tcp_write+0x63c>)
 800b466:	484f      	ldr	r0, [pc, #316]	; (800b5a4 <tcp_write+0x634>)
 800b468:	f002 fddc 	bl	800e024 <iprintf>
 800b46c:	e7bc      	b.n	800b3e8 <tcp_write+0x478>
  } else if (extendlen > 0) {
 800b46e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b470:	2b00      	cmp	r3, #0
 800b472:	d0a4      	beq.n	800b3be <tcp_write+0x44e>
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800b474:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b476:	6859      	ldr	r1, [r3, #4]
 800b478:	2900      	cmp	r1, #0
 800b47a:	d02e      	beq.n	800b4da <tcp_write+0x56a>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800b47c:	680a      	ldr	r2, [r1, #0]
 800b47e:	2a00      	cmp	r2, #0
 800b480:	d07f      	beq.n	800b582 <tcp_write+0x612>
 800b482:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800b484:	e000      	b.n	800b488 <tcp_write+0x518>
 800b486:	4602      	mov	r2, r0
      p->tot_len += extendlen;
 800b488:	890b      	ldrh	r3, [r1, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800b48a:	6810      	ldr	r0, [r2, #0]
      p->tot_len += extendlen;
 800b48c:	4423      	add	r3, r4
 800b48e:	810b      	strh	r3, [r1, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800b490:	4611      	mov	r1, r2
 800b492:	2800      	cmp	r0, #0
 800b494:	d1f7      	bne.n	800b486 <tcp_write+0x516>
    p->tot_len += extendlen;
 800b496:	8913      	ldrh	r3, [r2, #8]
 800b498:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b49a:	440b      	add	r3, r1
 800b49c:	8113      	strh	r3, [r2, #8]
    p->len += extendlen;
 800b49e:	8953      	ldrh	r3, [r2, #10]
 800b4a0:	440b      	add	r3, r1
 800b4a2:	8153      	strh	r3, [r2, #10]
    last_unsent->len += extendlen;
 800b4a4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b4a6:	8913      	ldrh	r3, [r2, #8]
 800b4a8:	440b      	add	r3, r1
 800b4aa:	8113      	strh	r3, [r2, #8]
 800b4ac:	e787      	b.n	800b3be <tcp_write+0x44e>
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b4ae:	f8b9 301a 	ldrh.w	r3, [r9, #26]
 800b4b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b4b6:	f8a9 301a 	strh.w	r3, [r9, #26]
  if (concat_p != NULL) {
 800b4ba:	e70e      	b.n	800b2da <tcp_write+0x36a>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800b4bc:	4b37      	ldr	r3, [pc, #220]	; (800b59c <tcp_write+0x62c>)
 800b4be:	f240 1255 	movw	r2, #341	; 0x155
 800b4c2:	493c      	ldr	r1, [pc, #240]	; (800b5b4 <tcp_write+0x644>)
 800b4c4:	4837      	ldr	r0, [pc, #220]	; (800b5a4 <tcp_write+0x634>)
 800b4c6:	f002 fdad 	bl	800e024 <iprintf>
  queuelen = pcb->snd_queuelen;
 800b4ca:	f8b9 6066 	ldrh.w	r6, [r9, #102]	; 0x66
 800b4ce:	e667      	b.n	800b1a0 <tcp_write+0x230>
  } else if (extendlen > 0) {
 800b4d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b4d2:	b19b      	cbz	r3, 800b4fc <tcp_write+0x58c>
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800b4d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d1cc      	bne.n	800b474 <tcp_write+0x504>
 800b4da:	4b30      	ldr	r3, [pc, #192]	; (800b59c <tcp_write+0x62c>)
 800b4dc:	f240 22e6 	movw	r2, #742	; 0x2e6
 800b4e0:	4935      	ldr	r1, [pc, #212]	; (800b5b8 <tcp_write+0x648>)
 800b4e2:	4830      	ldr	r0, [pc, #192]	; (800b5a4 <tcp_write+0x634>)
 800b4e4:	f002 fd9e 	bl	800e024 <iprintf>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800b4e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b4ea:	6859      	ldr	r1, [r3, #4]
 800b4ec:	e7c6      	b.n	800b47c <tcp_write+0x50c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800b4ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b4f0:	bba3      	cbnz	r3, 800b55c <tcp_write+0x5ec>
          extendlen = seglen;
 800b4f2:	950d      	str	r5, [sp, #52]	; 0x34
 800b4f4:	e6a6      	b.n	800b244 <tcp_write+0x2d4>
    return ERR_CONN;
 800b4f6:	f06f 000a 	mvn.w	r0, #10
 800b4fa:	e6fb      	b.n	800b2f4 <tcp_write+0x384>
  if (last_unsent == NULL) {
 800b4fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	f47f af5d 	bne.w	800b3be <tcp_write+0x44e>
    pcb->unsent = queue;
 800b504:	f8c9 806c 	str.w	r8, [r9, #108]	; 0x6c
 800b508:	e75c      	b.n	800b3c4 <tcp_write+0x454>
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800b50a:	e9cd 9300 	strd	r9, r3, [sp]
 800b50e:	2301      	movs	r3, #1
 800b510:	4622      	mov	r2, r4
 800b512:	4629      	mov	r1, r5
 800b514:	2000      	movs	r0, #0
 800b516:	9302      	str	r3, [sp, #8]
 800b518:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 800b51c:	f7ff fbae 	bl	800ac7c <tcp_pbuf_prealloc>
 800b520:	4603      	mov	r3, r0
 800b522:	4604      	mov	r4, r0
 800b524:	900c      	str	r0, [sp, #48]	; 0x30
 800b526:	2800      	cmp	r0, #0
 800b528:	d0c1      	beq.n	800b4ae <tcp_write+0x53e>
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800b52a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b52c:	462a      	mov	r2, r5
 800b52e:	9907      	ldr	r1, [sp, #28]
 800b530:	4401      	add	r1, r0
 800b532:	6858      	ldr	r0, [r3, #4]
 800b534:	f002 fea6 	bl	800e284 <memcpy>
        queuelen += pbuf_clen(concat_p);
 800b538:	4620      	mov	r0, r4
 800b53a:	e67d      	b.n	800b238 <tcp_write+0x2c8>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b53c:	f8b9 301a 	ldrh.w	r3, [r9, #26]
    return ERR_MEM;
 800b540:	f04f 30ff 	mov.w	r0, #4294967295
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b544:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b548:	f8a9 301a 	strh.w	r3, [r9, #26]
  if (err != ERR_OK) {
 800b54c:	e6d2      	b.n	800b2f4 <tcp_write+0x384>
  pcb->unsent_oversize = oversize;
 800b54e:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 800b552:	46d0      	mov	r8, sl
 800b554:	4657      	mov	r7, sl
 800b556:	f8a9 3068 	strh.w	r3, [r9, #104]	; 0x68
  if (concat_p != NULL) {
 800b55a:	e7d3      	b.n	800b504 <tcp_write+0x594>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800b55c:	4b0f      	ldr	r3, [pc, #60]	; (800b59c <tcp_write+0x62c>)
 800b55e:	f240 2231 	movw	r2, #561	; 0x231
 800b562:	4916      	ldr	r1, [pc, #88]	; (800b5bc <tcp_write+0x64c>)
 800b564:	480f      	ldr	r0, [pc, #60]	; (800b5a4 <tcp_write+0x634>)
 800b566:	f002 fd5d 	bl	800e024 <iprintf>
          extendlen = seglen;
 800b56a:	950d      	str	r5, [sp, #52]	; 0x34
 800b56c:	e66a      	b.n	800b244 <tcp_write+0x2d4>
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800b56e:	4b0b      	ldr	r3, [pc, #44]	; (800b59c <tcp_write+0x62c>)
 800b570:	f240 12ad 	movw	r2, #429	; 0x1ad
 800b574:	4912      	ldr	r1, [pc, #72]	; (800b5c0 <tcp_write+0x650>)
 800b576:	480b      	ldr	r0, [pc, #44]	; (800b5a4 <tcp_write+0x634>)
 800b578:	f002 fd54 	bl	800e024 <iprintf>
 800b57c:	f06f 000f 	mvn.w	r0, #15
 800b580:	e6b8      	b.n	800b2f4 <tcp_write+0x384>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800b582:	460a      	mov	r2, r1
 800b584:	e787      	b.n	800b496 <tcp_write+0x526>
  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800b586:	4b05      	ldr	r3, [pc, #20]	; (800b59c <tcp_write+0x62c>)
 800b588:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 800b58c:	490d      	ldr	r1, [pc, #52]	; (800b5c4 <tcp_write+0x654>)
 800b58e:	4805      	ldr	r0, [pc, #20]	; (800b5a4 <tcp_write+0x634>)
 800b590:	f002 fd48 	bl	800e024 <iprintf>
 800b594:	f06f 000f 	mvn.w	r0, #15
 800b598:	e6ac      	b.n	800b2f4 <tcp_write+0x384>
 800b59a:	bf00      	nop
 800b59c:	08010b3c 	.word	0x08010b3c
 800b5a0:	08010d58 	.word	0x08010d58
 800b5a4:	0800ef30 	.word	0x0800ef30
 800b5a8:	08010d40 	.word	0x08010d40
 800b5ac:	08010ec8 	.word	0x08010ec8
 800b5b0:	08010e58 	.word	0x08010e58
 800b5b4:	08010cd0 	.word	0x08010cd0
 800b5b8:	08010e90 	.word	0x08010e90
 800b5bc:	08010d98 	.word	0x08010d98
 800b5c0:	08010c9c 	.word	0x08010c9c
 800b5c4:	08010c84 	.word	0x08010c84

0800b5c8 <tcp_split_unsent_seg>:
{
 800b5c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800b5cc:	4605      	mov	r5, r0
{
 800b5ce:	b083      	sub	sp, #12
 800b5d0:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800b5d2:	2800      	cmp	r0, #0
 800b5d4:	f000 80a7 	beq.w	800b726 <tcp_split_unsent_seg+0x15e>
  useg = pcb->unsent;
 800b5d8:	6eee      	ldr	r6, [r5, #108]	; 0x6c
  if (useg == NULL) {
 800b5da:	b376      	cbz	r6, 800b63a <tcp_split_unsent_seg+0x72>
  if (split == 0) {
 800b5dc:	2c00      	cmp	r4, #0
 800b5de:	f000 80b3 	beq.w	800b748 <tcp_split_unsent_seg+0x180>
  if (useg->len <= split) {
 800b5e2:	f8b6 9008 	ldrh.w	r9, [r6, #8]
 800b5e6:	45a1      	cmp	r9, r4
 800b5e8:	f240 8099 	bls.w	800b71e <tcp_split_unsent_seg+0x156>
  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800b5ec:	8e6b      	ldrh	r3, [r5, #50]	; 0x32
 800b5ee:	42a3      	cmp	r3, r4
 800b5f0:	d328      	bcc.n	800b644 <tcp_split_unsent_seg+0x7c>
  optflags = useg->flags;
 800b5f2:	f896 a00a 	ldrb.w	sl, [r6, #10]
  remainder = useg->len - split;
 800b5f6:	eba9 0804 	sub.w	r8, r9, r4
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800b5fa:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b5fe:	2036      	movs	r0, #54	; 0x36
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800b600:	ea4f 0b8a 	mov.w	fp, sl, lsl #2
  remainder = useg->len - split;
 800b604:	fa1f f888 	uxth.w	r8, r8
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800b608:	f00b 0b04 	and.w	fp, fp, #4
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800b60c:	eb08 010b 	add.w	r1, r8, fp
 800b610:	b289      	uxth	r1, r1
 800b612:	f7fc f9d7 	bl	80079c4 <pbuf_alloc>
  if (p == NULL) {
 800b616:	4607      	mov	r7, r0
 800b618:	b178      	cbz	r0, 800b63a <tcp_split_unsent_seg+0x72>
  offset = useg->p->tot_len - useg->len + split;
 800b61a:	6870      	ldr	r0, [r6, #4]
 800b61c:	8932      	ldrh	r2, [r6, #8]
 800b61e:	8903      	ldrh	r3, [r0, #8]
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800b620:	6879      	ldr	r1, [r7, #4]
  offset = useg->p->tot_len - useg->len + split;
 800b622:	1a9b      	subs	r3, r3, r2
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800b624:	4642      	mov	r2, r8
 800b626:	4459      	add	r1, fp
  offset = useg->p->tot_len - useg->len + split;
 800b628:	4423      	add	r3, r4
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800b62a:	b29b      	uxth	r3, r3
 800b62c:	f7fc fb52 	bl	8007cd4 <pbuf_copy_partial>
 800b630:	4540      	cmp	r0, r8
 800b632:	d01d      	beq.n	800b670 <tcp_split_unsent_seg+0xa8>
    pbuf_free(p);
 800b634:	4638      	mov	r0, r7
 800b636:	f7fc f955 	bl	80078e4 <pbuf_free>
  return ERR_MEM;
 800b63a:	f04f 30ff 	mov.w	r0, #4294967295
}
 800b63e:	b003      	add	sp, #12
 800b640:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800b644:	4b45      	ldr	r3, [pc, #276]	; (800b75c <tcp_split_unsent_seg+0x194>)
 800b646:	f240 325b 	movw	r2, #859	; 0x35b
 800b64a:	4945      	ldr	r1, [pc, #276]	; (800b760 <tcp_split_unsent_seg+0x198>)
 800b64c:	4845      	ldr	r0, [pc, #276]	; (800b764 <tcp_split_unsent_seg+0x19c>)
 800b64e:	f002 fce9 	bl	800e024 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800b652:	f8b6 9008 	ldrh.w	r9, [r6, #8]
 800b656:	f1b9 0f00 	cmp.w	r9, #0
 800b65a:	d1ca      	bne.n	800b5f2 <tcp_split_unsent_seg+0x2a>
 800b65c:	4b3f      	ldr	r3, [pc, #252]	; (800b75c <tcp_split_unsent_seg+0x194>)
 800b65e:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800b662:	4941      	ldr	r1, [pc, #260]	; (800b768 <tcp_split_unsent_seg+0x1a0>)
 800b664:	483f      	ldr	r0, [pc, #252]	; (800b764 <tcp_split_unsent_seg+0x19c>)
 800b666:	f002 fcdd 	bl	800e024 <iprintf>
  remainder = useg->len - split;
 800b66a:	f8b6 9008 	ldrh.w	r9, [r6, #8]
 800b66e:	e7c0      	b.n	800b5f2 <tcp_split_unsent_seg+0x2a>
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800b670:	68f3      	ldr	r3, [r6, #12]
 800b672:	8998      	ldrh	r0, [r3, #12]
 800b674:	f7fb f994 	bl	80069a0 <lwip_htons>
  if (split_flags & TCP_PSH) {
 800b678:	f010 0b08 	ands.w	fp, r0, #8
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800b67c:	fa5f f880 	uxtb.w	r8, r0
  if (split_flags & TCP_PSH) {
 800b680:	d159      	bne.n	800b736 <tcp_split_unsent_seg+0x16e>
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800b682:	f008 083f 	and.w	r8, r8, #63	; 0x3f
  if (split_flags & TCP_FIN) {
 800b686:	f018 0f01 	tst.w	r8, #1
 800b68a:	d003      	beq.n	800b694 <tcp_split_unsent_seg+0xcc>
    split_flags &= ~TCP_FIN;
 800b68c:	f008 08fe 	and.w	r8, r8, #254	; 0xfe
    remainder_flags |= TCP_FIN;
 800b690:	f04b 0b01 	orr.w	fp, fp, #1
  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800b694:	68f3      	ldr	r3, [r6, #12]
 800b696:	6858      	ldr	r0, [r3, #4]
 800b698:	f7fb f986 	bl	80069a8 <lwip_htonl>
 800b69c:	f8cd a000 	str.w	sl, [sp]
 800b6a0:	1823      	adds	r3, r4, r0
 800b6a2:	465a      	mov	r2, fp
 800b6a4:	4639      	mov	r1, r7
 800b6a6:	4628      	mov	r0, r5
 800b6a8:	f7ff fb38 	bl	800ad1c <tcp_create_segment>
  if (seg == NULL) {
 800b6ac:	4682      	mov	sl, r0
 800b6ae:	2800      	cmp	r0, #0
 800b6b0:	d0c0      	beq.n	800b634 <tcp_split_unsent_seg+0x6c>
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800b6b2:	6870      	ldr	r0, [r6, #4]
 800b6b4:	eba4 0409 	sub.w	r4, r4, r9
 800b6b8:	f7fc fa8a 	bl	8007bd0 <pbuf_clen>
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800b6bc:	6872      	ldr	r2, [r6, #4]
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800b6be:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
 800b6c2:	b2a4      	uxth	r4, r4
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800b6c4:	8911      	ldrh	r1, [r2, #8]
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800b6c6:	1a1b      	subs	r3, r3, r0
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800b6c8:	4610      	mov	r0, r2
 800b6ca:	4421      	add	r1, r4
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800b6cc:	f8a5 3066 	strh.w	r3, [r5, #102]	; 0x66
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800b6d0:	b289      	uxth	r1, r1
 800b6d2:	f7fc fa25 	bl	8007b20 <pbuf_realloc>
  useg->len -= remainder;
 800b6d6:	8933      	ldrh	r3, [r6, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800b6d8:	4640      	mov	r0, r8
  useg->len -= remainder;
 800b6da:	441c      	add	r4, r3
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800b6dc:	68f3      	ldr	r3, [r6, #12]
  useg->len -= remainder;
 800b6de:	8134      	strh	r4, [r6, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800b6e0:	899c      	ldrh	r4, [r3, #12]
 800b6e2:	f7fb f95d 	bl	80069a0 <lwip_htons>
 800b6e6:	68f3      	ldr	r3, [r6, #12]
 800b6e8:	4304      	orrs	r4, r0
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800b6ea:	6870      	ldr	r0, [r6, #4]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800b6ec:	819c      	strh	r4, [r3, #12]
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800b6ee:	f7fc fa6f 	bl	8007bd0 <pbuf_clen>
 800b6f2:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
 800b6f6:	4403      	add	r3, r0
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800b6f8:	f8da 0004 	ldr.w	r0, [sl, #4]
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800b6fc:	f8a5 3066 	strh.w	r3, [r5, #102]	; 0x66
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800b700:	f7fc fa66 	bl	8007bd0 <pbuf_clen>
 800b704:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
 800b708:	4418      	add	r0, r3
  seg->next = useg->next;
 800b70a:	6833      	ldr	r3, [r6, #0]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800b70c:	f8a5 0066 	strh.w	r0, [r5, #102]	; 0x66
  seg->next = useg->next;
 800b710:	f8ca 3000 	str.w	r3, [sl]
  useg->next = seg;
 800b714:	f8c6 a000 	str.w	sl, [r6]
  if (seg->next == NULL) {
 800b718:	f8da 3000 	ldr.w	r3, [sl]
 800b71c:	b183      	cbz	r3, 800b740 <tcp_split_unsent_seg+0x178>
    return ERR_OK;
 800b71e:	2000      	movs	r0, #0
}
 800b720:	b003      	add	sp, #12
 800b722:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800b726:	4b0d      	ldr	r3, [pc, #52]	; (800b75c <tcp_split_unsent_seg+0x194>)
 800b728:	f240 324b 	movw	r2, #843	; 0x34b
 800b72c:	490f      	ldr	r1, [pc, #60]	; (800b76c <tcp_split_unsent_seg+0x1a4>)
 800b72e:	480d      	ldr	r0, [pc, #52]	; (800b764 <tcp_split_unsent_seg+0x19c>)
 800b730:	f002 fc78 	bl	800e024 <iprintf>
 800b734:	e750      	b.n	800b5d8 <tcp_split_unsent_seg+0x10>
    split_flags &= ~TCP_PSH;
 800b736:	f008 0837 	and.w	r8, r8, #55	; 0x37
    remainder_flags |= TCP_PSH;
 800b73a:	f04f 0b08 	mov.w	fp, #8
 800b73e:	e7a2      	b.n	800b686 <tcp_split_unsent_seg+0xbe>
  return ERR_OK;
 800b740:	4618      	mov	r0, r3
    pcb->unsent_oversize = 0;
 800b742:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
 800b746:	e77a      	b.n	800b63e <tcp_split_unsent_seg+0x76>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800b748:	4b04      	ldr	r3, [pc, #16]	; (800b75c <tcp_split_unsent_seg+0x194>)
 800b74a:	f240 3253 	movw	r2, #851	; 0x353
 800b74e:	4908      	ldr	r1, [pc, #32]	; (800b770 <tcp_split_unsent_seg+0x1a8>)
 800b750:	4804      	ldr	r0, [pc, #16]	; (800b764 <tcp_split_unsent_seg+0x19c>)
 800b752:	f002 fc67 	bl	800e024 <iprintf>
    return ERR_VAL;
 800b756:	f06f 0005 	mvn.w	r0, #5
 800b75a:	e770      	b.n	800b63e <tcp_split_unsent_seg+0x76>
 800b75c:	08010b3c 	.word	0x08010b3c
 800b760:	08010f30 	.word	0x08010f30
 800b764:	0800ef30 	.word	0x0800ef30
 800b768:	08010f40 	.word	0x08010f40
 800b76c:	08010ee8 	.word	0x08010ee8
 800b770:	08010f0c 	.word	0x08010f0c

0800b774 <tcp_enqueue_flags>:
{
 800b774:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800b778:	f011 0703 	ands.w	r7, r1, #3
{
 800b77c:	b082      	sub	sp, #8
 800b77e:	460d      	mov	r5, r1
 800b780:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800b782:	d05e      	beq.n	800b842 <tcp_enqueue_flags+0xce>
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800b784:	2c00      	cmp	r4, #0
 800b786:	d065      	beq.n	800b854 <tcp_enqueue_flags+0xe0>
  if (flags & TCP_SYN) {
 800b788:	f015 0802 	ands.w	r8, r5, #2
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800b78c:	f44f 7220 	mov.w	r2, #640	; 0x280
  if (flags & TCP_SYN) {
 800b790:	d049      	beq.n	800b826 <tcp_enqueue_flags+0xb2>
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800b792:	2104      	movs	r1, #4
 800b794:	2036      	movs	r0, #54	; 0x36
 800b796:	f7fc f915 	bl	80079c4 <pbuf_alloc>
 800b79a:	4606      	mov	r6, r0
 800b79c:	2800      	cmp	r0, #0
 800b79e:	d049      	beq.n	800b834 <tcp_enqueue_flags+0xc0>
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800b7a0:	8943      	ldrh	r3, [r0, #10]
 800b7a2:	2b03      	cmp	r3, #3
 800b7a4:	d872      	bhi.n	800b88c <tcp_enqueue_flags+0x118>
    optflags = TF_SEG_OPTS_MSS;
 800b7a6:	f04f 0801 	mov.w	r8, #1
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800b7aa:	4b40      	ldr	r3, [pc, #256]	; (800b8ac <tcp_enqueue_flags+0x138>)
 800b7ac:	f240 4239 	movw	r2, #1081	; 0x439
 800b7b0:	493f      	ldr	r1, [pc, #252]	; (800b8b0 <tcp_enqueue_flags+0x13c>)
 800b7b2:	4840      	ldr	r0, [pc, #256]	; (800b8b4 <tcp_enqueue_flags+0x140>)
 800b7b4:	f002 fc36 	bl	800e024 <iprintf>
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800b7b8:	4631      	mov	r1, r6
 800b7ba:	f8cd 8000 	str.w	r8, [sp]
 800b7be:	462a      	mov	r2, r5
 800b7c0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800b7c2:	4620      	mov	r0, r4
 800b7c4:	f7ff faaa 	bl	800ad1c <tcp_create_segment>
 800b7c8:	4606      	mov	r6, r0
 800b7ca:	2800      	cmp	r0, #0
 800b7cc:	d032      	beq.n	800b834 <tcp_enqueue_flags+0xc0>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800b7ce:	68c3      	ldr	r3, [r0, #12]
 800b7d0:	079a      	lsls	r2, r3, #30
 800b7d2:	d153      	bne.n	800b87c <tcp_enqueue_flags+0x108>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800b7d4:	8933      	ldrh	r3, [r6, #8]
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d144      	bne.n	800b864 <tcp_enqueue_flags+0xf0>
  if (pcb->unsent == NULL) {
 800b7da:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d04b      	beq.n	800b878 <tcp_enqueue_flags+0x104>
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800b7e0:	461a      	mov	r2, r3
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d1fb      	bne.n	800b7e0 <tcp_enqueue_flags+0x6c>
    useg->next = seg;
 800b7e8:	6016      	str	r6, [r2, #0]
  pcb->unsent_oversize = 0;
 800b7ea:	2300      	movs	r3, #0
 800b7ec:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800b7f0:	b117      	cbz	r7, 800b7f8 <tcp_enqueue_flags+0x84>
    pcb->snd_lbb++;
 800b7f2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800b7f4:	3301      	adds	r3, #1
 800b7f6:	65e3      	str	r3, [r4, #92]	; 0x5c
  if (flags & TCP_FIN) {
 800b7f8:	07eb      	lsls	r3, r5, #31
 800b7fa:	d503      	bpl.n	800b804 <tcp_enqueue_flags+0x90>
    tcp_set_flags(pcb, TF_FIN);
 800b7fc:	8b63      	ldrh	r3, [r4, #26]
 800b7fe:	f043 0320 	orr.w	r3, r3, #32
 800b802:	8363      	strh	r3, [r4, #26]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800b804:	6870      	ldr	r0, [r6, #4]
 800b806:	f7fc f9e3 	bl	8007bd0 <pbuf_clen>
 800b80a:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
 800b80e:	4418      	add	r0, r3
 800b810:	b280      	uxth	r0, r0
 800b812:	f8a4 0066 	strh.w	r0, [r4, #102]	; 0x66
  if (pcb->snd_queuelen != 0) {
 800b816:	b118      	cbz	r0, 800b820 <tcp_enqueue_flags+0xac>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800b818:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800b81a:	2800      	cmp	r0, #0
 800b81c:	d039      	beq.n	800b892 <tcp_enqueue_flags+0x11e>
  return ERR_OK;
 800b81e:	2000      	movs	r0, #0
}
 800b820:	b002      	add	sp, #8
 800b822:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800b826:	4641      	mov	r1, r8
 800b828:	2036      	movs	r0, #54	; 0x36
 800b82a:	f7fc f8cb 	bl	80079c4 <pbuf_alloc>
 800b82e:	4606      	mov	r6, r0
 800b830:	2800      	cmp	r0, #0
 800b832:	d1c1      	bne.n	800b7b8 <tcp_enqueue_flags+0x44>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b834:	8b63      	ldrh	r3, [r4, #26]
    return ERR_MEM;
 800b836:	f04f 30ff 	mov.w	r0, #4294967295
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b83a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b83e:	8363      	strh	r3, [r4, #26]
    return ERR_MEM;
 800b840:	e7ee      	b.n	800b820 <tcp_enqueue_flags+0xac>
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800b842:	4b1a      	ldr	r3, [pc, #104]	; (800b8ac <tcp_enqueue_flags+0x138>)
 800b844:	f240 4211 	movw	r2, #1041	; 0x411
 800b848:	491b      	ldr	r1, [pc, #108]	; (800b8b8 <tcp_enqueue_flags+0x144>)
 800b84a:	481a      	ldr	r0, [pc, #104]	; (800b8b4 <tcp_enqueue_flags+0x140>)
 800b84c:	f002 fbea 	bl	800e024 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800b850:	2c00      	cmp	r4, #0
 800b852:	d199      	bne.n	800b788 <tcp_enqueue_flags+0x14>
 800b854:	4b15      	ldr	r3, [pc, #84]	; (800b8ac <tcp_enqueue_flags+0x138>)
 800b856:	f240 4213 	movw	r2, #1043	; 0x413
 800b85a:	4918      	ldr	r1, [pc, #96]	; (800b8bc <tcp_enqueue_flags+0x148>)
 800b85c:	4815      	ldr	r0, [pc, #84]	; (800b8b4 <tcp_enqueue_flags+0x140>)
 800b85e:	f002 fbe1 	bl	800e024 <iprintf>
 800b862:	e791      	b.n	800b788 <tcp_enqueue_flags+0x14>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800b864:	4b11      	ldr	r3, [pc, #68]	; (800b8ac <tcp_enqueue_flags+0x138>)
 800b866:	f240 4243 	movw	r2, #1091	; 0x443
 800b86a:	4915      	ldr	r1, [pc, #84]	; (800b8c0 <tcp_enqueue_flags+0x14c>)
 800b86c:	4811      	ldr	r0, [pc, #68]	; (800b8b4 <tcp_enqueue_flags+0x140>)
 800b86e:	f002 fbd9 	bl	800e024 <iprintf>
  if (pcb->unsent == NULL) {
 800b872:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800b874:	2b00      	cmp	r3, #0
 800b876:	d1b3      	bne.n	800b7e0 <tcp_enqueue_flags+0x6c>
    pcb->unsent = seg;
 800b878:	66e6      	str	r6, [r4, #108]	; 0x6c
 800b87a:	e7b6      	b.n	800b7ea <tcp_enqueue_flags+0x76>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800b87c:	4b0b      	ldr	r3, [pc, #44]	; (800b8ac <tcp_enqueue_flags+0x138>)
 800b87e:	f240 4242 	movw	r2, #1090	; 0x442
 800b882:	4910      	ldr	r1, [pc, #64]	; (800b8c4 <tcp_enqueue_flags+0x150>)
 800b884:	480b      	ldr	r0, [pc, #44]	; (800b8b4 <tcp_enqueue_flags+0x140>)
 800b886:	f002 fbcd 	bl	800e024 <iprintf>
 800b88a:	e7a3      	b.n	800b7d4 <tcp_enqueue_flags+0x60>
    optflags = TF_SEG_OPTS_MSS;
 800b88c:	f04f 0801 	mov.w	r8, #1
 800b890:	e792      	b.n	800b7b8 <tcp_enqueue_flags+0x44>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800b892:	6ee4      	ldr	r4, [r4, #108]	; 0x6c
 800b894:	2c00      	cmp	r4, #0
 800b896:	d1c3      	bne.n	800b820 <tcp_enqueue_flags+0xac>
 800b898:	4b04      	ldr	r3, [pc, #16]	; (800b8ac <tcp_enqueue_flags+0x138>)
 800b89a:	f240 4265 	movw	r2, #1125	; 0x465
 800b89e:	490a      	ldr	r1, [pc, #40]	; (800b8c8 <tcp_enqueue_flags+0x154>)
 800b8a0:	4804      	ldr	r0, [pc, #16]	; (800b8b4 <tcp_enqueue_flags+0x140>)
 800b8a2:	f002 fbbf 	bl	800e024 <iprintf>
  return ERR_OK;
 800b8a6:	4620      	mov	r0, r4
 800b8a8:	e7ba      	b.n	800b820 <tcp_enqueue_flags+0xac>
 800b8aa:	bf00      	nop
 800b8ac:	08010b3c 	.word	0x08010b3c
 800b8b0:	08010fc8 	.word	0x08010fc8
 800b8b4:	0800ef30 	.word	0x0800ef30
 800b8b8:	08010f50 	.word	0x08010f50
 800b8bc:	08010fa8 	.word	0x08010fa8
 800b8c0:	0801101c 	.word	0x0801101c
 800b8c4:	08011004 	.word	0x08011004
 800b8c8:	08011048 	.word	0x08011048

0800b8cc <tcp_send_fin>:
{
 800b8cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800b8ce:	4606      	mov	r6, r0
 800b8d0:	b188      	cbz	r0, 800b8f6 <tcp_send_fin+0x2a>
  if (pcb->unsent != NULL) {
 800b8d2:	6ef4      	ldr	r4, [r6, #108]	; 0x6c
 800b8d4:	b14c      	cbz	r4, 800b8ea <tcp_send_fin+0x1e>
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800b8d6:	4625      	mov	r5, r4
 800b8d8:	6824      	ldr	r4, [r4, #0]
 800b8da:	2c00      	cmp	r4, #0
 800b8dc:	d1fb      	bne.n	800b8d6 <tcp_send_fin+0xa>
    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800b8de:	68eb      	ldr	r3, [r5, #12]
 800b8e0:	8998      	ldrh	r0, [r3, #12]
 800b8e2:	f7fb f85d 	bl	80069a0 <lwip_htons>
 800b8e6:	0743      	lsls	r3, r0, #29
 800b8e8:	d00d      	beq.n	800b906 <tcp_send_fin+0x3a>
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800b8ea:	4630      	mov	r0, r6
 800b8ec:	2101      	movs	r1, #1
}
 800b8ee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800b8f2:	f7ff bf3f 	b.w	800b774 <tcp_enqueue_flags>
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800b8f6:	4b0b      	ldr	r3, [pc, #44]	; (800b924 <tcp_send_fin+0x58>)
 800b8f8:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800b8fc:	490a      	ldr	r1, [pc, #40]	; (800b928 <tcp_send_fin+0x5c>)
 800b8fe:	480b      	ldr	r0, [pc, #44]	; (800b92c <tcp_send_fin+0x60>)
 800b900:	f002 fb90 	bl	800e024 <iprintf>
 800b904:	e7e5      	b.n	800b8d2 <tcp_send_fin+0x6>
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800b906:	68eb      	ldr	r3, [r5, #12]
 800b908:	2001      	movs	r0, #1
 800b90a:	899f      	ldrh	r7, [r3, #12]
 800b90c:	f7fb f848 	bl	80069a0 <lwip_htons>
      tcp_set_flags(pcb, TF_FIN);
 800b910:	8b73      	ldrh	r3, [r6, #26]
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800b912:	4338      	orrs	r0, r7
 800b914:	68ea      	ldr	r2, [r5, #12]
      tcp_set_flags(pcb, TF_FIN);
 800b916:	f043 0320 	orr.w	r3, r3, #32
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800b91a:	8190      	strh	r0, [r2, #12]
}
 800b91c:	4620      	mov	r0, r4
      tcp_set_flags(pcb, TF_FIN);
 800b91e:	8373      	strh	r3, [r6, #26]
}
 800b920:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b922:	bf00      	nop
 800b924:	08010b3c 	.word	0x08010b3c
 800b928:	08011070 	.word	0x08011070
 800b92c:	0800ef30 	.word	0x0800ef30

0800b930 <tcp_rexmit_rto_prepare>:
{
 800b930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800b932:	4605      	mov	r5, r0
 800b934:	2800      	cmp	r0, #0
 800b936:	d032      	beq.n	800b99e <tcp_rexmit_rto_prepare+0x6e>
  if (pcb->unacked == NULL) {
 800b938:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 800b93a:	b132      	cbz	r2, 800b94a <tcp_rexmit_rto_prepare+0x1a>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800b93c:	6813      	ldr	r3, [r2, #0]
 800b93e:	4614      	mov	r4, r2
 800b940:	b15b      	cbz	r3, 800b95a <tcp_rexmit_rto_prepare+0x2a>
  if (seg->p->ref != 1) {
 800b942:	6863      	ldr	r3, [r4, #4]
 800b944:	7b9b      	ldrb	r3, [r3, #14]
 800b946:	2b01      	cmp	r3, #1
 800b948:	d003      	beq.n	800b952 <tcp_rexmit_rto_prepare+0x22>
    return ERR_VAL;
 800b94a:	f06f 0305 	mvn.w	r3, #5
}
 800b94e:	4618      	mov	r0, r3
 800b950:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800b952:	6824      	ldr	r4, [r4, #0]
 800b954:	6823      	ldr	r3, [r4, #0]
 800b956:	2b00      	cmp	r3, #0
 800b958:	d1f3      	bne.n	800b942 <tcp_rexmit_rto_prepare+0x12>
  if (seg->p->ref != 1) {
 800b95a:	6863      	ldr	r3, [r4, #4]
 800b95c:	7b9b      	ldrb	r3, [r3, #14]
 800b95e:	2b01      	cmp	r3, #1
 800b960:	d1f3      	bne.n	800b94a <tcp_rexmit_rto_prepare+0x1a>
  tcp_set_flags(pcb, TF_RTO);
 800b962:	8b6b      	ldrh	r3, [r5, #26]
  pcb->unacked = NULL;
 800b964:	2700      	movs	r7, #0
  seg->next = pcb->unsent;
 800b966:	6ee9      	ldr	r1, [r5, #108]	; 0x6c
  tcp_set_flags(pcb, TF_RTO);
 800b968:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  seg->next = pcb->unsent;
 800b96c:	6021      	str	r1, [r4, #0]
  tcp_set_flags(pcb, TF_RTO);
 800b96e:	836b      	strh	r3, [r5, #26]
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800b970:	68e3      	ldr	r3, [r4, #12]
  pcb->unacked = NULL;
 800b972:	e9c5 271b 	strd	r2, r7, [r5, #108]	; 0x6c
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800b976:	6858      	ldr	r0, [r3, #4]
 800b978:	f7fb f816 	bl	80069a8 <lwip_htonl>
 800b97c:	68e3      	ldr	r3, [r4, #12]
 800b97e:	4606      	mov	r6, r0
 800b980:	8924      	ldrh	r4, [r4, #8]
 800b982:	8998      	ldrh	r0, [r3, #12]
 800b984:	f7fb f80c 	bl	80069a0 <lwip_htons>
 800b988:	f010 0003 	ands.w	r0, r0, #3
 800b98c:	4426      	add	r6, r4
  return ERR_OK;
 800b98e:	463b      	mov	r3, r7
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800b990:	bf18      	it	ne
 800b992:	2001      	movne	r0, #1
  pcb->rttest = 0;
 800b994:	636f      	str	r7, [r5, #52]	; 0x34
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800b996:	4430      	add	r0, r6
 800b998:	64e8      	str	r0, [r5, #76]	; 0x4c
}
 800b99a:	4618      	mov	r0, r3
 800b99c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800b99e:	4b04      	ldr	r3, [pc, #16]	; (800b9b0 <tcp_rexmit_rto_prepare+0x80>)
 800b9a0:	f240 6263 	movw	r2, #1635	; 0x663
 800b9a4:	4903      	ldr	r1, [pc, #12]	; (800b9b4 <tcp_rexmit_rto_prepare+0x84>)
 800b9a6:	4804      	ldr	r0, [pc, #16]	; (800b9b8 <tcp_rexmit_rto_prepare+0x88>)
 800b9a8:	f002 fb3c 	bl	800e024 <iprintf>
 800b9ac:	e7c4      	b.n	800b938 <tcp_rexmit_rto_prepare+0x8>
 800b9ae:	bf00      	nop
 800b9b0:	08010b3c 	.word	0x08010b3c
 800b9b4:	0801108c 	.word	0x0801108c
 800b9b8:	0800ef30 	.word	0x0800ef30

0800b9bc <tcp_rexmit>:
{
 800b9bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800b9be:	4607      	mov	r7, r0
 800b9c0:	2800      	cmp	r0, #0
 800b9c2:	d031      	beq.n	800ba28 <tcp_rexmit+0x6c>
  if (pcb->unacked == NULL) {
 800b9c4:	6f3e      	ldr	r6, [r7, #112]	; 0x70
 800b9c6:	b34e      	cbz	r6, 800ba1c <tcp_rexmit+0x60>
  if (seg->p->ref != 1) {
 800b9c8:	6873      	ldr	r3, [r6, #4]
 800b9ca:	7b9b      	ldrb	r3, [r3, #14]
 800b9cc:	2b01      	cmp	r3, #1
 800b9ce:	d125      	bne.n	800ba1c <tcp_rexmit+0x60>
  pcb->unacked = seg->next;
 800b9d0:	6832      	ldr	r2, [r6, #0]
  cur_seg = &(pcb->unsent);
 800b9d2:	f107 056c 	add.w	r5, r7, #108	; 0x6c
  while (*cur_seg &&
 800b9d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
  pcb->unacked = seg->next;
 800b9d8:	673a      	str	r2, [r7, #112]	; 0x70
  while (*cur_seg &&
 800b9da:	b91b      	cbnz	r3, 800b9e4 <tcp_rexmit+0x28>
 800b9dc:	e00f      	b.n	800b9fe <tcp_rexmit+0x42>
    cur_seg = &((*cur_seg)->next );
 800b9de:	682d      	ldr	r5, [r5, #0]
  while (*cur_seg &&
 800b9e0:	682b      	ldr	r3, [r5, #0]
 800b9e2:	b163      	cbz	r3, 800b9fe <tcp_rexmit+0x42>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800b9e4:	68db      	ldr	r3, [r3, #12]
 800b9e6:	6858      	ldr	r0, [r3, #4]
 800b9e8:	f7fa ffde 	bl	80069a8 <lwip_htonl>
 800b9ec:	68f3      	ldr	r3, [r6, #12]
 800b9ee:	4604      	mov	r4, r0
 800b9f0:	6858      	ldr	r0, [r3, #4]
 800b9f2:	f7fa ffd9 	bl	80069a8 <lwip_htonl>
 800b9f6:	1a24      	subs	r4, r4, r0
  while (*cur_seg &&
 800b9f8:	2c00      	cmp	r4, #0
 800b9fa:	dbf0      	blt.n	800b9de <tcp_rexmit+0x22>
    cur_seg = &((*cur_seg)->next );
 800b9fc:	682b      	ldr	r3, [r5, #0]
  seg->next = *cur_seg;
 800b9fe:	6033      	str	r3, [r6, #0]
  *cur_seg = seg;
 800ba00:	602e      	str	r6, [r5, #0]
  if (seg->next == NULL) {
 800ba02:	6833      	ldr	r3, [r6, #0]
 800ba04:	b16b      	cbz	r3, 800ba22 <tcp_rexmit+0x66>
  if (pcb->nrtx < 0xFF) {
 800ba06:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 800ba0a:	2bff      	cmp	r3, #255	; 0xff
 800ba0c:	d002      	beq.n	800ba14 <tcp_rexmit+0x58>
    ++pcb->nrtx;
 800ba0e:	3301      	adds	r3, #1
 800ba10:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  pcb->rttest = 0;
 800ba14:	2300      	movs	r3, #0
  return ERR_OK;
 800ba16:	4618      	mov	r0, r3
  pcb->rttest = 0;
 800ba18:	637b      	str	r3, [r7, #52]	; 0x34
}
 800ba1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return ERR_VAL;
 800ba1c:	f06f 0005 	mvn.w	r0, #5
}
 800ba20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    pcb->unsent_oversize = 0;
 800ba22:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 800ba26:	e7ee      	b.n	800ba06 <tcp_rexmit+0x4a>
  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800ba28:	4b03      	ldr	r3, [pc, #12]	; (800ba38 <tcp_rexmit+0x7c>)
 800ba2a:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800ba2e:	4903      	ldr	r1, [pc, #12]	; (800ba3c <tcp_rexmit+0x80>)
 800ba30:	4803      	ldr	r0, [pc, #12]	; (800ba40 <tcp_rexmit+0x84>)
 800ba32:	f002 faf7 	bl	800e024 <iprintf>
 800ba36:	e7c5      	b.n	800b9c4 <tcp_rexmit+0x8>
 800ba38:	08010b3c 	.word	0x08010b3c
 800ba3c:	080110b0 	.word	0x080110b0
 800ba40:	0800ef30 	.word	0x0800ef30

0800ba44 <tcp_rexmit_fast>:
{
 800ba44:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800ba46:	4604      	mov	r4, r0
 800ba48:	b340      	cbz	r0, 800ba9c <tcp_rexmit_fast+0x58>
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800ba4a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800ba4c:	b113      	cbz	r3, 800ba54 <tcp_rexmit_fast+0x10>
 800ba4e:	8b63      	ldrh	r3, [r4, #26]
 800ba50:	075b      	lsls	r3, r3, #29
 800ba52:	d500      	bpl.n	800ba56 <tcp_rexmit_fast+0x12>
}
 800ba54:	bd10      	pop	{r4, pc}
    if (tcp_rexmit(pcb) == ERR_OK) {
 800ba56:	4620      	mov	r0, r4
 800ba58:	f7ff ffb0 	bl	800b9bc <tcp_rexmit>
 800ba5c:	2800      	cmp	r0, #0
 800ba5e:	d1f9      	bne.n	800ba54 <tcp_rexmit_fast+0x10>
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800ba60:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
 800ba64:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800ba68:	8e62      	ldrh	r2, [r4, #50]	; 0x32
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800ba6a:	4299      	cmp	r1, r3
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800ba6c:	ea4f 0042 	mov.w	r0, r2, lsl #1
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800ba70:	bf28      	it	cs
 800ba72:	4619      	movcs	r1, r3
 800ba74:	084b      	lsrs	r3, r1, #1
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800ba76:	ebb0 0f51 	cmp.w	r0, r1, lsr #1
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800ba7a:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800ba7e:	d902      	bls.n	800ba86 <tcp_rexmit_fast+0x42>
        pcb->ssthresh = 2 * pcb->mss;
 800ba80:	b283      	uxth	r3, r0
 800ba82:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
      tcp_set_flags(pcb, TF_INFR);
 800ba86:	8b61      	ldrh	r1, [r4, #26]
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800ba88:	4402      	add	r2, r0
      tcp_set_flags(pcb, TF_INFR);
 800ba8a:	f041 0104 	orr.w	r1, r1, #4
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800ba8e:	4413      	add	r3, r2
      pcb->rtime = 0;
 800ba90:	2200      	movs	r2, #0
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800ba92:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800ba96:	8361      	strh	r1, [r4, #26]
      pcb->rtime = 0;
 800ba98:	8622      	strh	r2, [r4, #48]	; 0x30
}
 800ba9a:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800ba9c:	4b03      	ldr	r3, [pc, #12]	; (800baac <tcp_rexmit_fast+0x68>)
 800ba9e:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800baa2:	4903      	ldr	r1, [pc, #12]	; (800bab0 <tcp_rexmit_fast+0x6c>)
 800baa4:	4803      	ldr	r0, [pc, #12]	; (800bab4 <tcp_rexmit_fast+0x70>)
 800baa6:	f002 fabd 	bl	800e024 <iprintf>
 800baaa:	e7ce      	b.n	800ba4a <tcp_rexmit_fast+0x6>
 800baac:	08010b3c 	.word	0x08010b3c
 800bab0:	080110c8 	.word	0x080110c8
 800bab4:	0800ef30 	.word	0x0800ef30

0800bab8 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800bab8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800babc:	b084      	sub	sp, #16
 800babe:	4607      	mov	r7, r0
 800bac0:	460e      	mov	r6, r1
 800bac2:	4615      	mov	r5, r2
 800bac4:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800bac8:	461c      	mov	r4, r3
{
 800baca:	f8bd 9034 	ldrh.w	r9, [sp, #52]	; 0x34
 800bace:	f8bd a038 	ldrh.w	sl, [sp, #56]	; 0x38
  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800bad2:	b1fb      	cbz	r3, 800bb14 <tcp_rst+0x5c>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800bad4:	f1b8 0f00 	cmp.w	r8, #0
 800bad8:	d026      	beq.n	800bb28 <tcp_rst+0x70>
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800bada:	4630      	mov	r0, r6
 800badc:	f7fa ff64 	bl	80069a8 <lwip_htonl>
 800bae0:	2114      	movs	r1, #20
 800bae2:	4602      	mov	r2, r0
 800bae4:	4628      	mov	r0, r5
 800bae6:	f24d 0516 	movw	r5, #53270	; 0xd016
 800baea:	464b      	mov	r3, r9
 800baec:	f8cd a000 	str.w	sl, [sp]
 800baf0:	e9cd 1501 	strd	r1, r5, [sp, #4]
 800baf4:	2100      	movs	r1, #0
 800baf6:	f7ff f98b 	bl	800ae10 <tcp_output_alloc_header_common.constprop.0>
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800bafa:	4601      	mov	r1, r0
 800bafc:	b138      	cbz	r0, 800bb0e <tcp_rst+0x56>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800bafe:	4643      	mov	r3, r8
 800bb00:	4622      	mov	r2, r4
 800bb02:	4638      	mov	r0, r7
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800bb04:	b004      	add	sp, #16
 800bb06:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800bb0a:	f7ff b9ef 	b.w	800aeec <tcp_output_control_segment>
}
 800bb0e:	b004      	add	sp, #16
 800bb10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800bb14:	4b08      	ldr	r3, [pc, #32]	; (800bb38 <tcp_rst+0x80>)
 800bb16:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800bb1a:	4908      	ldr	r1, [pc, #32]	; (800bb3c <tcp_rst+0x84>)
 800bb1c:	4808      	ldr	r0, [pc, #32]	; (800bb40 <tcp_rst+0x88>)
 800bb1e:	f002 fa81 	bl	800e024 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800bb22:	f1b8 0f00 	cmp.w	r8, #0
 800bb26:	d1d8      	bne.n	800bada <tcp_rst+0x22>
 800bb28:	4b03      	ldr	r3, [pc, #12]	; (800bb38 <tcp_rst+0x80>)
 800bb2a:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800bb2e:	4905      	ldr	r1, [pc, #20]	; (800bb44 <tcp_rst+0x8c>)
 800bb30:	4803      	ldr	r0, [pc, #12]	; (800bb40 <tcp_rst+0x88>)
 800bb32:	f002 fa77 	bl	800e024 <iprintf>
 800bb36:	e7d0      	b.n	800bada <tcp_rst+0x22>
 800bb38:	08010b3c 	.word	0x08010b3c
 800bb3c:	080110e8 	.word	0x080110e8
 800bb40:	0800ef30 	.word	0x0800ef30
 800bb44:	08011104 	.word	0x08011104

0800bb48 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800bb48:	b510      	push	{r4, lr}
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
  u8_t num_sacks = 0;

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800bb4a:	4604      	mov	r4, r0
 800bb4c:	b1c8      	cbz	r0, 800bb82 <tcp_send_empty_ack+0x3a>
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800bb4e:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800bb50:	f7fa ff2a 	bl	80069a8 <lwip_htonl>
 800bb54:	2100      	movs	r1, #0
 800bb56:	4602      	mov	r2, r0
 800bb58:	4620      	mov	r0, r4
 800bb5a:	f7ff f99f 	bl	800ae9c <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 800bb5e:	4601      	mov	r1, r0
 800bb60:	b1b8      	cbz	r0, 800bb92 <tcp_send_empty_ack+0x4a>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800bb62:	1d23      	adds	r3, r4, #4
 800bb64:	4622      	mov	r2, r4
 800bb66:	4620      	mov	r0, r4
 800bb68:	f7ff f9c0 	bl	800aeec <tcp_output_control_segment>
  if (err != ERR_OK) {
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800bb6c:	8b63      	ldrh	r3, [r4, #26]
  if (err != ERR_OK) {
 800bb6e:	b920      	cbnz	r0, 800bb7a <tcp_send_empty_ack+0x32>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800bb70:	f023 0303 	bic.w	r3, r3, #3
 800bb74:	b29b      	uxth	r3, r3
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800bb76:	8363      	strh	r3, [r4, #26]
  }

  return err;
}
 800bb78:	bd10      	pop	{r4, pc}
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800bb7a:	f043 0303 	orr.w	r3, r3, #3
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800bb7e:	8363      	strh	r3, [r4, #26]
}
 800bb80:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800bb82:	4b07      	ldr	r3, [pc, #28]	; (800bba0 <tcp_send_empty_ack+0x58>)
 800bb84:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800bb88:	4906      	ldr	r1, [pc, #24]	; (800bba4 <tcp_send_empty_ack+0x5c>)
 800bb8a:	4807      	ldr	r0, [pc, #28]	; (800bba8 <tcp_send_empty_ack+0x60>)
 800bb8c:	f002 fa4a 	bl	800e024 <iprintf>
 800bb90:	e7dd      	b.n	800bb4e <tcp_send_empty_ack+0x6>
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800bb92:	8b63      	ldrh	r3, [r4, #26]
    return ERR_BUF;
 800bb94:	f06f 0001 	mvn.w	r0, #1
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800bb98:	f043 0303 	orr.w	r3, r3, #3
    return ERR_BUF;
 800bb9c:	e7eb      	b.n	800bb76 <tcp_send_empty_ack+0x2e>
 800bb9e:	bf00      	nop
 800bba0:	08010b3c 	.word	0x08010b3c
 800bba4:	08011120 	.word	0x08011120
 800bba8:	0800ef30 	.word	0x0800ef30

0800bbac <tcp_output>:
{
 800bbac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbb0:	4604      	mov	r4, r0
 800bbb2:	b085      	sub	sp, #20
  LWIP_ASSERT_CORE_LOCKED();
 800bbb4:	f7f8 f9c0 	bl	8003f38 <sys_check_core_locking>
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800bbb8:	2c00      	cmp	r4, #0
 800bbba:	f000 81b2 	beq.w	800bf22 <tcp_output+0x376>
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800bbbe:	7d23      	ldrb	r3, [r4, #20]
 800bbc0:	2b01      	cmp	r3, #1
 800bbc2:	f000 8169 	beq.w	800be98 <tcp_output+0x2ec>
  if (tcp_input_pcb == pcb) {
 800bbc6:	4bae      	ldr	r3, [pc, #696]	; (800be80 <tcp_output+0x2d4>)
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	42a3      	cmp	r3, r4
 800bbcc:	f000 8170 	beq.w	800beb0 <tcp_output+0x304>
  seg = pcb->unsent;
 800bbd0:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800bbd2:	f8b4 6048 	ldrh.w	r6, [r4, #72]	; 0x48
 800bbd6:	f8b4 7060 	ldrh.w	r7, [r4, #96]	; 0x60
  if (seg == NULL) {
 800bbda:	b325      	cbz	r5, 800bc26 <tcp_output+0x7a>
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800bbdc:	7a20      	ldrb	r0, [r4, #8]
  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800bbde:	f104 0904 	add.w	r9, r4, #4
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800bbe2:	2800      	cmp	r0, #0
 800bbe4:	f040 81a5 	bne.w	800bf32 <tcp_output+0x386>
    return ip_route(src, dst);
 800bbe8:	4648      	mov	r0, r9
 800bbea:	f001 f9f5 	bl	800cfd8 <ip4_route>
 800bbee:	4680      	mov	r8, r0
  if (netif == NULL) {
 800bbf0:	f1b8 0f00 	cmp.w	r8, #0
 800bbf4:	f000 81af 	beq.w	800bf56 <tcp_output+0x3aa>
  if (ip_addr_isany(&pcb->local_ip)) {
 800bbf8:	6823      	ldr	r3, [r4, #0]
 800bbfa:	b913      	cbnz	r3, 800bc02 <tcp_output+0x56>
    ip_addr_copy(pcb->local_ip, *local_ip);
 800bbfc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800bc00:	6023      	str	r3, [r4, #0]
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800bc02:	68eb      	ldr	r3, [r5, #12]
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800bc04:	42be      	cmp	r6, r7
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800bc06:	6858      	ldr	r0, [r3, #4]
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800bc08:	bf28      	it	cs
 800bc0a:	463e      	movcs	r6, r7
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800bc0c:	f7fa fecc 	bl	80069a8 <lwip_htonl>
 800bc10:	892b      	ldrh	r3, [r5, #8]
 800bc12:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800bc14:	1a9b      	subs	r3, r3, r2
 800bc16:	4418      	add	r0, r3
 800bc18:	42b0      	cmp	r0, r6
 800bc1a:	d90f      	bls.n	800bc3c <tcp_output+0x90>
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800bc1c:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 800bc20:	42b3      	cmp	r3, r6
 800bc22:	f000 814f 	beq.w	800bec4 <tcp_output+0x318>
    if (pcb->flags & TF_ACK_NOW) {
 800bc26:	8b62      	ldrh	r2, [r4, #26]
 800bc28:	0791      	lsls	r1, r2, #30
 800bc2a:	f100 8145 	bmi.w	800beb8 <tcp_output+0x30c>
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800bc2e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  return ERR_OK;
 800bc32:	2000      	movs	r0, #0
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800bc34:	8362      	strh	r2, [r4, #26]
}
 800bc36:	b005      	add	sp, #20
 800bc38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  pcb->persist_backoff = 0;
 800bc3c:	2300      	movs	r3, #0
 800bc3e:	f884 3099 	strb.w	r3, [r4, #153]	; 0x99
  useg = pcb->unacked;
 800bc42:	6f23      	ldr	r3, [r4, #112]	; 0x70
  if (useg != NULL) {
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	f000 814d 	beq.w	800bee4 <tcp_output+0x338>
    for (; useg->next != NULL; useg = useg->next);
 800bc4a:	461f      	mov	r7, r3
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	f000 80af 	beq.w	800bdb2 <tcp_output+0x206>
 800bc54:	461f      	mov	r7, r3
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d1f6      	bne.n	800bc4a <tcp_output+0x9e>
 800bc5c:	e0a9      	b.n	800bdb2 <tcp_output+0x206>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800bc5e:	68eb      	ldr	r3, [r5, #12]
 800bc60:	2010      	movs	r0, #16
 800bc62:	f8b3 a00c 	ldrh.w	sl, [r3, #12]
 800bc66:	f7fa fe9b 	bl	80069a0 <lwip_htons>
 800bc6a:	ea4a 0000 	orr.w	r0, sl, r0
 800bc6e:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 800bc72:	f8aa 000c 	strh.w	r0, [sl, #12]
  if (seg->p->ref != 1) {
 800bc76:	686b      	ldr	r3, [r5, #4]
 800bc78:	7b9b      	ldrb	r3, [r3, #14]
 800bc7a:	2b01      	cmp	r3, #1
 800bc7c:	d154      	bne.n	800bd28 <tcp_output+0x17c>
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800bc7e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800bc80:	f7fa fe92 	bl	80069a8 <lwip_htonl>
 800bc84:	f8ca 0008 	str.w	r0, [sl, #8]
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800bc88:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 800bc8a:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 800bc8e:	f7fa fe87 	bl	80069a0 <lwip_htons>
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800bc92:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800bc94:	6a63      	ldr	r3, [r4, #36]	; 0x24
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800bc96:	f8aa 000e 	strh.w	r0, [sl, #14]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800bc9a:	4413      	add	r3, r2
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800bc9c:	f8d5 a00c 	ldr.w	sl, [r5, #12]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800bca0:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800bca2:	7aab      	ldrb	r3, [r5, #10]
 800bca4:	07db      	lsls	r3, r3, #31
 800bca6:	f100 80c2 	bmi.w	800be2e <tcp_output+0x282>
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800bcaa:	f10a 0b14 	add.w	fp, sl, #20
  if (pcb->rtime < 0) {
 800bcae:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	da01      	bge.n	800bcba <tcp_output+0x10e>
    pcb->rtime = 0;
 800bcb6:	2300      	movs	r3, #0
 800bcb8:	8623      	strh	r3, [r4, #48]	; 0x30
  if (pcb->rttest == 0) {
 800bcba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	f000 80ab 	beq.w	800be18 <tcp_output+0x26c>
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800bcc2:	6868      	ldr	r0, [r5, #4]
  seg->tcphdr->chksum = 0;
 800bcc4:	2200      	movs	r2, #0
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800bcc6:	6843      	ldr	r3, [r0, #4]
  seg->p->len -= len;
 800bcc8:	8941      	ldrh	r1, [r0, #10]
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800bcca:	ebaa 0303 	sub.w	r3, sl, r3
  seg->p->payload = seg->tcphdr;
 800bcce:	f8c0 a004 	str.w	sl, [r0, #4]
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800bcd2:	b29b      	uxth	r3, r3
  seg->p->len -= len;
 800bcd4:	1ac9      	subs	r1, r1, r3
 800bcd6:	8141      	strh	r1, [r0, #10]
  seg->p->tot_len -= len;
 800bcd8:	8901      	ldrh	r1, [r0, #8]
 800bcda:	1acb      	subs	r3, r1, r3
 800bcdc:	8103      	strh	r3, [r0, #8]
  seg->tcphdr->chksum = 0;
 800bcde:	f88a 2010 	strb.w	r2, [sl, #16]
 800bce2:	f88a 2011 	strb.w	r2, [sl, #17]
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800bce6:	7aab      	ldrb	r3, [r5, #10]
 800bce8:	f013 0f01 	tst.w	r3, #1
 800bcec:	bf14      	ite	ne
 800bcee:	2318      	movne	r3, #24
 800bcf0:	2314      	moveq	r3, #20
 800bcf2:	449a      	add	sl, r3
 800bcf4:	45d3      	cmp	fp, sl
 800bcf6:	d007      	beq.n	800bd08 <tcp_output+0x15c>
 800bcf8:	4b62      	ldr	r3, [pc, #392]	; (800be84 <tcp_output+0x2d8>)
 800bcfa:	f240 621c 	movw	r2, #1564	; 0x61c
 800bcfe:	4962      	ldr	r1, [pc, #392]	; (800be88 <tcp_output+0x2dc>)
 800bd00:	4862      	ldr	r0, [pc, #392]	; (800be8c <tcp_output+0x2e0>)
 800bd02:	f002 f98f 	bl	800e024 <iprintf>
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800bd06:	6868      	ldr	r0, [r5, #4]
 800bd08:	f8cd 8008 	str.w	r8, [sp, #8]
 800bd0c:	464a      	mov	r2, r9
 800bd0e:	7aa3      	ldrb	r3, [r4, #10]
 800bd10:	4621      	mov	r1, r4
 800bd12:	9300      	str	r3, [sp, #0]
 800bd14:	2306      	movs	r3, #6
 800bd16:	9301      	str	r3, [sp, #4]
 800bd18:	7ae3      	ldrb	r3, [r4, #11]
 800bd1a:	f001 faf3 	bl	800d304 <ip4_output_if>
    if (err != ERR_OK) {
 800bd1e:	2800      	cmp	r0, #0
 800bd20:	f040 8114 	bne.w	800bf4c <tcp_output+0x3a0>
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800bd24:	f8d5 a00c 	ldr.w	sl, [r5, #12]
    pcb->unsent = seg->next;
 800bd28:	682b      	ldr	r3, [r5, #0]
 800bd2a:	66e3      	str	r3, [r4, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800bd2c:	7d23      	ldrb	r3, [r4, #20]
 800bd2e:	2b02      	cmp	r3, #2
 800bd30:	d003      	beq.n	800bd3a <tcp_output+0x18e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800bd32:	8b63      	ldrh	r3, [r4, #26]
 800bd34:	f023 0303 	bic.w	r3, r3, #3
 800bd38:	8363      	strh	r3, [r4, #26]
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800bd3a:	f8da 0004 	ldr.w	r0, [sl, #4]
 800bd3e:	f7fa fe33 	bl	80069a8 <lwip_htonl>
 800bd42:	68eb      	ldr	r3, [r5, #12]
 800bd44:	4682      	mov	sl, r0
 800bd46:	f8b5 b008 	ldrh.w	fp, [r5, #8]
 800bd4a:	8998      	ldrh	r0, [r3, #12]
 800bd4c:	f7fa fe28 	bl	80069a0 <lwip_htons>
 800bd50:	f010 0303 	ands.w	r3, r0, #3
 800bd54:	44da      	add	sl, fp
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800bd56:	6d22      	ldr	r2, [r4, #80]	; 0x50
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800bd58:	bf18      	it	ne
 800bd5a:	2301      	movne	r3, #1
 800bd5c:	4453      	add	r3, sl
    if (TCP_TCPLEN(seg) > 0) {
 800bd5e:	f8b5 a008 	ldrh.w	sl, [r5, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800bd62:	1ad2      	subs	r2, r2, r3
 800bd64:	2a00      	cmp	r2, #0
      pcb->snd_nxt = snd_nxt;
 800bd66:	bfb8      	it	lt
 800bd68:	6523      	strlt	r3, [r4, #80]	; 0x50
    if (TCP_TCPLEN(seg) > 0) {
 800bd6a:	68eb      	ldr	r3, [r5, #12]
 800bd6c:	8998      	ldrh	r0, [r3, #12]
 800bd6e:	f7fa fe17 	bl	80069a0 <lwip_htons>
 800bd72:	f010 0003 	ands.w	r0, r0, #3
 800bd76:	bf18      	it	ne
 800bd78:	2001      	movne	r0, #1
 800bd7a:	eb10 0f0a 	cmn.w	r0, sl
 800bd7e:	d044      	beq.n	800be0a <tcp_output+0x25e>
      seg->next = NULL;
 800bd80:	2300      	movs	r3, #0
 800bd82:	602b      	str	r3, [r5, #0]
      if (pcb->unacked == NULL) {
 800bd84:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d043      	beq.n	800be12 <tcp_output+0x266>
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800bd8a:	68eb      	ldr	r3, [r5, #12]
 800bd8c:	6858      	ldr	r0, [r3, #4]
 800bd8e:	f7fa fe0b 	bl	80069a8 <lwip_htonl>
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	4682      	mov	sl, r0
 800bd96:	6858      	ldr	r0, [r3, #4]
 800bd98:	f7fa fe06 	bl	80069a8 <lwip_htonl>
 800bd9c:	ebaa 0000 	sub.w	r0, sl, r0
 800bda0:	2800      	cmp	r0, #0
 800bda2:	f2c0 80a1 	blt.w	800bee8 <tcp_output+0x33c>
          useg->next = seg;
 800bda6:	603d      	str	r5, [r7, #0]
 800bda8:	462f      	mov	r7, r5
    seg = pcb->unsent;
 800bdaa:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
  while (seg != NULL &&
 800bdac:	2d00      	cmp	r5, #0
 800bdae:	f000 80c4 	beq.w	800bf3a <tcp_output+0x38e>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800bdb2:	68eb      	ldr	r3, [r5, #12]
 800bdb4:	6858      	ldr	r0, [r3, #4]
 800bdb6:	f7fa fdf7 	bl	80069a8 <lwip_htonl>
 800bdba:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800bdbc:	1ac0      	subs	r0, r0, r3
 800bdbe:	892b      	ldrh	r3, [r5, #8]
 800bdc0:	4418      	add	r0, r3
  while (seg != NULL &&
 800bdc2:	42b0      	cmp	r0, r6
 800bdc4:	f200 80bb 	bhi.w	800bf3e <tcp_output+0x392>
    LWIP_ASSERT("RST not expected here!",
 800bdc8:	68eb      	ldr	r3, [r5, #12]
 800bdca:	8998      	ldrh	r0, [r3, #12]
 800bdcc:	f7fa fde8 	bl	80069a0 <lwip_htons>
 800bdd0:	0742      	lsls	r2, r0, #29
 800bdd2:	d412      	bmi.n	800bdfa <tcp_output+0x24e>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800bdd4:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800bdd6:	b14b      	cbz	r3, 800bdec <tcp_output+0x240>
 800bdd8:	8b63      	ldrh	r3, [r4, #26]
 800bdda:	f013 0f44 	tst.w	r3, #68	; 0x44
 800bdde:	461a      	mov	r2, r3
 800bde0:	d104      	bne.n	800bdec <tcp_output+0x240>
 800bde2:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800bde4:	2900      	cmp	r1, #0
 800bde6:	d038      	beq.n	800be5a <tcp_output+0x2ae>
 800bde8:	6808      	ldr	r0, [r1, #0]
 800bdea:	b388      	cbz	r0, 800be50 <tcp_output+0x2a4>
    if (pcb->state != SYN_SENT) {
 800bdec:	7d23      	ldrb	r3, [r4, #20]
 800bdee:	2b02      	cmp	r3, #2
 800bdf0:	f47f af35 	bne.w	800bc5e <tcp_output+0xb2>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800bdf4:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 800bdf8:	e73d      	b.n	800bc76 <tcp_output+0xca>
    LWIP_ASSERT("RST not expected here!",
 800bdfa:	4b22      	ldr	r3, [pc, #136]	; (800be84 <tcp_output+0x2d8>)
 800bdfc:	f240 5236 	movw	r2, #1334	; 0x536
 800be00:	4923      	ldr	r1, [pc, #140]	; (800be90 <tcp_output+0x2e4>)
 800be02:	4822      	ldr	r0, [pc, #136]	; (800be8c <tcp_output+0x2e0>)
 800be04:	f002 f90e 	bl	800e024 <iprintf>
 800be08:	e7e4      	b.n	800bdd4 <tcp_output+0x228>
      tcp_seg_free(seg);
 800be0a:	4628      	mov	r0, r5
 800be0c:	f7fc fae0 	bl	80083d0 <tcp_seg_free>
 800be10:	e7cb      	b.n	800bdaa <tcp_output+0x1fe>
        pcb->unacked = seg;
 800be12:	462f      	mov	r7, r5
 800be14:	6725      	str	r5, [r4, #112]	; 0x70
        useg = seg;
 800be16:	e7c8      	b.n	800bdaa <tcp_output+0x1fe>
    pcb->rttest = tcp_ticks;
 800be18:	4b1e      	ldr	r3, [pc, #120]	; (800be94 <tcp_output+0x2e8>)
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	6363      	str	r3, [r4, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800be1e:	f8da 0004 	ldr.w	r0, [sl, #4]
 800be22:	f7fa fdc1 	bl	80069a8 <lwip_htonl>
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800be26:	f8d5 a00c 	ldr.w	sl, [r5, #12]
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800be2a:	63a0      	str	r0, [r4, #56]	; 0x38
 800be2c:	e749      	b.n	800bcc2 <tcp_output+0x116>
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800be2e:	464a      	mov	r2, r9
 800be30:	4641      	mov	r1, r8
 800be32:	f240 50b4 	movw	r0, #1460	; 0x5b4
    opts += 1;
 800be36:	f10a 0b18 	add.w	fp, sl, #24
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800be3a:	f7fd fab9 	bl	80093b0 <tcp_eff_send_mss_netif>
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800be3e:	f040 7001 	orr.w	r0, r0, #33816576	; 0x2040000
 800be42:	f7fa fdb1 	bl	80069a8 <lwip_htonl>
 800be46:	f8ca 0014 	str.w	r0, [sl, #20]
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800be4a:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 800be4e:	e72e      	b.n	800bcae <tcp_output+0x102>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800be50:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 800be54:	8e60      	ldrh	r0, [r4, #50]	; 0x32
 800be56:	4584      	cmp	ip, r0
 800be58:	d2c8      	bcs.n	800bdec <tcp_output+0x240>
 800be5a:	f8b4 0064 	ldrh.w	r0, [r4, #100]	; 0x64
 800be5e:	2800      	cmp	r0, #0
 800be60:	d0c4      	beq.n	800bdec <tcp_output+0x240>
 800be62:	f8b4 0066 	ldrh.w	r0, [r4, #102]	; 0x66
 800be66:	280f      	cmp	r0, #15
 800be68:	d8c0      	bhi.n	800bdec <tcp_output+0x240>
 800be6a:	f013 0fa0 	tst.w	r3, #160	; 0xa0
 800be6e:	d1bd      	bne.n	800bdec <tcp_output+0x240>
  if (pcb->unsent == NULL) {
 800be70:	2900      	cmp	r1, #0
 800be72:	f47f aedc 	bne.w	800bc2e <tcp_output+0x82>
    pcb->unsent_oversize = 0;
 800be76:	2100      	movs	r1, #0
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800be78:	461a      	mov	r2, r3
    pcb->unsent_oversize = 0;
 800be7a:	f8a4 1068 	strh.w	r1, [r4, #104]	; 0x68
 800be7e:	e6d6      	b.n	800bc2e <tcp_output+0x82>
 800be80:	2401058c 	.word	0x2401058c
 800be84:	08010b3c 	.word	0x08010b3c
 800be88:	08011198 	.word	0x08011198
 800be8c:	0800ef30 	.word	0x0800ef30
 800be90:	08011180 	.word	0x08011180
 800be94:	24010558 	.word	0x24010558
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800be98:	4b30      	ldr	r3, [pc, #192]	; (800bf5c <tcp_output+0x3b0>)
 800be9a:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800be9e:	4930      	ldr	r1, [pc, #192]	; (800bf60 <tcp_output+0x3b4>)
 800bea0:	4830      	ldr	r0, [pc, #192]	; (800bf64 <tcp_output+0x3b8>)
 800bea2:	f002 f8bf 	bl	800e024 <iprintf>
  if (tcp_input_pcb == pcb) {
 800bea6:	4b30      	ldr	r3, [pc, #192]	; (800bf68 <tcp_output+0x3bc>)
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	42a3      	cmp	r3, r4
 800beac:	f47f ae90 	bne.w	800bbd0 <tcp_output+0x24>
    return ERR_OK;
 800beb0:	2000      	movs	r0, #0
}
 800beb2:	b005      	add	sp, #20
 800beb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      return tcp_send_empty_ack(pcb);
 800beb8:	4620      	mov	r0, r4
}
 800beba:	b005      	add	sp, #20
 800bebc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      return tcp_send_empty_ack(pcb);
 800bec0:	f7ff be42 	b.w	800bb48 <tcp_send_empty_ack>
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800bec4:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	f47f aead 	bne.w	800bc26 <tcp_output+0x7a>
 800becc:	f894 3099 	ldrb.w	r3, [r4, #153]	; 0x99
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	f47f aea8 	bne.w	800bc26 <tcp_output+0x7a>
      pcb->persist_cnt = 0;
 800bed6:	f44f 7280 	mov.w	r2, #256	; 0x100
      pcb->persist_probe = 0;
 800beda:	f884 309a 	strb.w	r3, [r4, #154]	; 0x9a
      pcb->persist_cnt = 0;
 800bede:	f8a4 2098 	strh.w	r2, [r4, #152]	; 0x98
 800bee2:	e6a0      	b.n	800bc26 <tcp_output+0x7a>
  useg = pcb->unacked;
 800bee4:	461f      	mov	r7, r3
 800bee6:	e764      	b.n	800bdb2 <tcp_output+0x206>
          while (*cur_seg &&
 800bee8:	6f23      	ldr	r3, [r4, #112]	; 0x70
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800beea:	f104 0b70 	add.w	fp, r4, #112	; 0x70
          while (*cur_seg &&
 800beee:	b92b      	cbnz	r3, 800befc <tcp_output+0x350>
 800bef0:	e013      	b.n	800bf1a <tcp_output+0x36e>
            cur_seg = &((*cur_seg)->next );
 800bef2:	f8db b000 	ldr.w	fp, [fp]
          while (*cur_seg &&
 800bef6:	f8db 3000 	ldr.w	r3, [fp]
 800befa:	b173      	cbz	r3, 800bf1a <tcp_output+0x36e>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800befc:	68db      	ldr	r3, [r3, #12]
 800befe:	6858      	ldr	r0, [r3, #4]
 800bf00:	f7fa fd52 	bl	80069a8 <lwip_htonl>
 800bf04:	68eb      	ldr	r3, [r5, #12]
 800bf06:	4682      	mov	sl, r0
 800bf08:	6858      	ldr	r0, [r3, #4]
 800bf0a:	f7fa fd4d 	bl	80069a8 <lwip_htonl>
 800bf0e:	ebaa 0000 	sub.w	r0, sl, r0
          while (*cur_seg &&
 800bf12:	2800      	cmp	r0, #0
 800bf14:	dbed      	blt.n	800bef2 <tcp_output+0x346>
            cur_seg = &((*cur_seg)->next );
 800bf16:	f8db 3000 	ldr.w	r3, [fp]
          seg->next = (*cur_seg);
 800bf1a:	602b      	str	r3, [r5, #0]
          (*cur_seg) = seg;
 800bf1c:	f8cb 5000 	str.w	r5, [fp]
 800bf20:	e743      	b.n	800bdaa <tcp_output+0x1fe>
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800bf22:	4b0e      	ldr	r3, [pc, #56]	; (800bf5c <tcp_output+0x3b0>)
 800bf24:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800bf28:	4910      	ldr	r1, [pc, #64]	; (800bf6c <tcp_output+0x3c0>)
 800bf2a:	480e      	ldr	r0, [pc, #56]	; (800bf64 <tcp_output+0x3b8>)
 800bf2c:	f002 f87a 	bl	800e024 <iprintf>
 800bf30:	e645      	b.n	800bbbe <tcp_output+0x12>
    return netif_get_by_index(pcb->netif_idx);
 800bf32:	f7fb fb25 	bl	8007580 <netif_get_by_index>
 800bf36:	4680      	mov	r8, r0
 800bf38:	e65a      	b.n	800bbf0 <tcp_output+0x44>
 800bf3a:	8b63      	ldrh	r3, [r4, #26]
 800bf3c:	e79b      	b.n	800be76 <tcp_output+0x2ca>
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800bf3e:	8b63      	ldrh	r3, [r4, #26]
  if (pcb->unsent == NULL) {
 800bf40:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800bf42:	461a      	mov	r2, r3
  if (pcb->unsent == NULL) {
 800bf44:	2900      	cmp	r1, #0
 800bf46:	f47f ae72 	bne.w	800bc2e <tcp_output+0x82>
 800bf4a:	e794      	b.n	800be76 <tcp_output+0x2ca>
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800bf4c:	8b63      	ldrh	r3, [r4, #26]
 800bf4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bf52:	8363      	strh	r3, [r4, #26]
      return err;
 800bf54:	e66f      	b.n	800bc36 <tcp_output+0x8a>
    return ERR_RTE;
 800bf56:	f06f 0003 	mvn.w	r0, #3
 800bf5a:	e66c      	b.n	800bc36 <tcp_output+0x8a>
 800bf5c:	08010b3c 	.word	0x08010b3c
 800bf60:	08011158 	.word	0x08011158
 800bf64:	0800ef30 	.word	0x0800ef30
 800bf68:	2401058c 	.word	0x2401058c
 800bf6c:	08011140 	.word	0x08011140

0800bf70 <tcp_rexmit_rto_commit>:
{
 800bf70:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800bf72:	4604      	mov	r4, r0
 800bf74:	b158      	cbz	r0, 800bf8e <tcp_rexmit_rto_commit+0x1e>
  if (pcb->nrtx < 0xFF) {
 800bf76:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 800bf7a:	2bff      	cmp	r3, #255	; 0xff
 800bf7c:	d002      	beq.n	800bf84 <tcp_rexmit_rto_commit+0x14>
    ++pcb->nrtx;
 800bf7e:	3301      	adds	r3, #1
 800bf80:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  tcp_output(pcb);
 800bf84:	4620      	mov	r0, r4
}
 800bf86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  tcp_output(pcb);
 800bf8a:	f7ff be0f 	b.w	800bbac <tcp_output>
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800bf8e:	4b04      	ldr	r3, [pc, #16]	; (800bfa0 <tcp_rexmit_rto_commit+0x30>)
 800bf90:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800bf94:	4903      	ldr	r1, [pc, #12]	; (800bfa4 <tcp_rexmit_rto_commit+0x34>)
 800bf96:	4804      	ldr	r0, [pc, #16]	; (800bfa8 <tcp_rexmit_rto_commit+0x38>)
 800bf98:	f002 f844 	bl	800e024 <iprintf>
 800bf9c:	e7eb      	b.n	800bf76 <tcp_rexmit_rto_commit+0x6>
 800bf9e:	bf00      	nop
 800bfa0:	08010b3c 	.word	0x08010b3c
 800bfa4:	080111ac 	.word	0x080111ac
 800bfa8:	0800ef30 	.word	0x0800ef30

0800bfac <tcp_rexmit_rto>:
{
 800bfac:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800bfae:	4604      	mov	r4, r0
 800bfb0:	b118      	cbz	r0, 800bfba <tcp_rexmit_rto+0xe>
  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800bfb2:	f7ff fcbd 	bl	800b930 <tcp_rexmit_rto_prepare>
 800bfb6:	b198      	cbz	r0, 800bfe0 <tcp_rexmit_rto+0x34>
}
 800bfb8:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800bfba:	4b0f      	ldr	r3, [pc, #60]	; (800bff8 <tcp_rexmit_rto+0x4c>)
 800bfbc:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800bfc0:	490e      	ldr	r1, [pc, #56]	; (800bffc <tcp_rexmit_rto+0x50>)
 800bfc2:	480f      	ldr	r0, [pc, #60]	; (800c000 <tcp_rexmit_rto+0x54>)
 800bfc4:	f002 f82e 	bl	800e024 <iprintf>
  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800bfc8:	4620      	mov	r0, r4
 800bfca:	f7ff fcb1 	bl	800b930 <tcp_rexmit_rto_prepare>
 800bfce:	2800      	cmp	r0, #0
 800bfd0:	d1f2      	bne.n	800bfb8 <tcp_rexmit_rto+0xc>
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800bfd2:	4b09      	ldr	r3, [pc, #36]	; (800bff8 <tcp_rexmit_rto+0x4c>)
 800bfd4:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800bfd8:	490a      	ldr	r1, [pc, #40]	; (800c004 <tcp_rexmit_rto+0x58>)
 800bfda:	4809      	ldr	r0, [pc, #36]	; (800c000 <tcp_rexmit_rto+0x54>)
 800bfdc:	f002 f822 	bl	800e024 <iprintf>
  if (pcb->nrtx < 0xFF) {
 800bfe0:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 800bfe4:	2bff      	cmp	r3, #255	; 0xff
 800bfe6:	d002      	beq.n	800bfee <tcp_rexmit_rto+0x42>
    ++pcb->nrtx;
 800bfe8:	3301      	adds	r3, #1
 800bfea:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  tcp_output(pcb);
 800bfee:	4620      	mov	r0, r4
}
 800bff0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  tcp_output(pcb);
 800bff4:	f7ff bdda 	b.w	800bbac <tcp_output>
 800bff8:	08010b3c 	.word	0x08010b3c
 800bffc:	080111d0 	.word	0x080111d0
 800c000:	0800ef30 	.word	0x0800ef30
 800c004:	080111ac 	.word	0x080111ac

0800c008 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800c008:	b510      	push	{r4, lr}
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800c00a:	4604      	mov	r4, r0
 800c00c:	b188      	cbz	r0, 800c032 <tcp_keepalive+0x2a>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800c00e:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800c010:	3801      	subs	r0, #1
 800c012:	f7fa fcc9 	bl	80069a8 <lwip_htonl>
 800c016:	2100      	movs	r1, #0
 800c018:	4602      	mov	r2, r0
 800c01a:	4620      	mov	r0, r4
 800c01c:	f7fe ff3e 	bl	800ae9c <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 800c020:	4601      	mov	r1, r0
 800c022:	b170      	cbz	r0, 800c042 <tcp_keepalive+0x3a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800c024:	1d23      	adds	r3, r4, #4
 800c026:	4622      	mov	r2, r4
 800c028:	4620      	mov	r0, r4

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 800c02a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800c02e:	f7fe bf5d 	b.w	800aeec <tcp_output_control_segment>
  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800c032:	4b05      	ldr	r3, [pc, #20]	; (800c048 <tcp_keepalive+0x40>)
 800c034:	f640 0224 	movw	r2, #2084	; 0x824
 800c038:	4904      	ldr	r1, [pc, #16]	; (800c04c <tcp_keepalive+0x44>)
 800c03a:	4805      	ldr	r0, [pc, #20]	; (800c050 <tcp_keepalive+0x48>)
 800c03c:	f001 fff2 	bl	800e024 <iprintf>
 800c040:	e7e5      	b.n	800c00e <tcp_keepalive+0x6>
}
 800c042:	f04f 30ff 	mov.w	r0, #4294967295
 800c046:	bd10      	pop	{r4, pc}
 800c048:	08010b3c 	.word	0x08010b3c
 800c04c:	080111ec 	.word	0x080111ec
 800c050:	0800ef30 	.word	0x0800ef30

0800c054 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800c054:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800c058:	4604      	mov	r4, r0
 800c05a:	2800      	cmp	r0, #0
 800c05c:	d051      	beq.n	800c102 <tcp_zero_window_probe+0xae>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800c05e:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
  if (seg == NULL) {
 800c060:	2d00      	cmp	r5, #0
 800c062:	d04b      	beq.n	800c0fc <tcp_zero_window_probe+0xa8>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800c064:	f894 309a 	ldrb.w	r3, [r4, #154]	; 0x9a
 800c068:	2bff      	cmp	r3, #255	; 0xff
 800c06a:	d002      	beq.n	800c072 <tcp_zero_window_probe+0x1e>
    ++pcb->persist_probe;
 800c06c:	3301      	adds	r3, #1
 800c06e:	f884 309a 	strb.w	r3, [r4, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800c072:	68eb      	ldr	r3, [r5, #12]
 800c074:	8998      	ldrh	r0, [r3, #12]
 800c076:	f7fa fc93 	bl	80069a0 <lwip_htons>
 800c07a:	07c3      	lsls	r3, r0, #31
 800c07c:	d527      	bpl.n	800c0ce <tcp_zero_window_probe+0x7a>
 800c07e:	8929      	ldrh	r1, [r5, #8]
 800c080:	bb29      	cbnz	r1, 800c0ce <tcp_zero_window_probe+0x7a>
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800c082:	68eb      	ldr	r3, [r5, #12]
 800c084:	4620      	mov	r0, r4
 800c086:	685a      	ldr	r2, [r3, #4]
 800c088:	f7fe ff08 	bl	800ae9c <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 800c08c:	4606      	mov	r6, r0
 800c08e:	b388      	cbz	r0, 800c0f4 <tcp_zero_window_probe+0xa0>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800c090:	f8d6 8004 	ldr.w	r8, [r6, #4]

  if (is_fin) {
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800c094:	2011      	movs	r0, #17
 800c096:	f9b8 700c 	ldrsh.w	r7, [r8, #12]
 800c09a:	f7fa fc81 	bl	80069a0 <lwip_htons>
 800c09e:	f427 577c 	bic.w	r7, r7, #16128	; 0x3f00
 800c0a2:	4338      	orrs	r0, r7
 800c0a4:	f8a8 000c 	strh.w	r0, [r8, #12]
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800c0a8:	68eb      	ldr	r3, [r5, #12]
 800c0aa:	6858      	ldr	r0, [r3, #4]
 800c0ac:	f7fa fc7c 	bl	80069a8 <lwip_htonl>
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800c0b0:	6d23      	ldr	r3, [r4, #80]	; 0x50
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800c0b2:	3001      	adds	r0, #1
    pcb->snd_nxt = snd_nxt;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800c0b4:	4622      	mov	r2, r4
 800c0b6:	4631      	mov	r1, r6
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800c0b8:	1a1b      	subs	r3, r3, r0
 800c0ba:	2b00      	cmp	r3, #0
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800c0bc:	f104 0304 	add.w	r3, r4, #4
    pcb->snd_nxt = snd_nxt;
 800c0c0:	bfb8      	it	lt
 800c0c2:	6520      	strlt	r0, [r4, #80]	; 0x50
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800c0c4:	4620      	mov	r0, r4

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 800c0c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800c0ca:	f7fe bf0f 	b.w	800aeec <tcp_output_control_segment>
  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800c0ce:	68eb      	ldr	r3, [r5, #12]
 800c0d0:	2101      	movs	r1, #1
 800c0d2:	4620      	mov	r0, r4
 800c0d4:	685a      	ldr	r2, [r3, #4]
 800c0d6:	f7fe fee1 	bl	800ae9c <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 800c0da:	4606      	mov	r6, r0
 800c0dc:	b150      	cbz	r0, 800c0f4 <tcp_zero_window_probe+0xa0>
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800c0de:	6868      	ldr	r0, [r5, #4]
 800c0e0:	892a      	ldrh	r2, [r5, #8]
 800c0e2:	8903      	ldrh	r3, [r0, #8]
    char *d = ((char *)p->payload + TCP_HLEN);
 800c0e4:	6871      	ldr	r1, [r6, #4]
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800c0e6:	1a9b      	subs	r3, r3, r2
 800c0e8:	2201      	movs	r2, #1
 800c0ea:	3114      	adds	r1, #20
 800c0ec:	b29b      	uxth	r3, r3
 800c0ee:	f7fb fdf1 	bl	8007cd4 <pbuf_copy_partial>
 800c0f2:	e7d9      	b.n	800c0a8 <tcp_zero_window_probe+0x54>
    return ERR_MEM;
 800c0f4:	f04f 30ff 	mov.w	r0, #4294967295
}
 800c0f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return ERR_OK;
 800c0fc:	4628      	mov	r0, r5
}
 800c0fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800c102:	4b04      	ldr	r3, [pc, #16]	; (800c114 <tcp_zero_window_probe+0xc0>)
 800c104:	f640 024f 	movw	r2, #2127	; 0x84f
 800c108:	4903      	ldr	r1, [pc, #12]	; (800c118 <tcp_zero_window_probe+0xc4>)
 800c10a:	4804      	ldr	r0, [pc, #16]	; (800c11c <tcp_zero_window_probe+0xc8>)
 800c10c:	f001 ff8a 	bl	800e024 <iprintf>
 800c110:	e7a5      	b.n	800c05e <tcp_zero_window_probe+0xa>
 800c112:	bf00      	nop
 800c114:	08010b3c 	.word	0x08010b3c
 800c118:	08011208 	.word	0x08011208
 800c11c:	0800ef30 	.word	0x0800ef30

0800c120 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800c120:	b570      	push	{r4, r5, r6, lr}
 800c122:	4604      	mov	r4, r0
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800c124:	200a      	movs	r0, #10
{
 800c126:	460e      	mov	r6, r1
 800c128:	4615      	mov	r5, r2
  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800c12a:	f7fa ffcf 	bl	80070cc <memp_malloc>
  if (timeout == NULL) {
 800c12e:	b190      	cbz	r0, 800c156 <sys_timeout_abs+0x36>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
    return;
  }

  timeout->next = NULL;
 800c130:	2300      	movs	r3, #0
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800c132:	490d      	ldr	r1, [pc, #52]	; (800c168 <sys_timeout_abs+0x48>)
  timeout->h = handler;
 800c134:	6086      	str	r6, [r0, #8]
  timeout->arg = arg;
 800c136:	60c5      	str	r5, [r0, #12]
  timeout->time = abs_time;
 800c138:	e9c0 3400 	strd	r3, r4, [r0]
  if (next_timeout == NULL) {
 800c13c:	680b      	ldr	r3, [r1, #0]
 800c13e:	b91b      	cbnz	r3, 800c148 <sys_timeout_abs+0x28>
 800c140:	e007      	b.n	800c152 <sys_timeout_abs+0x32>
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
    timeout->next = next_timeout;
    next_timeout = timeout;
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800c142:	4619      	mov	r1, r3
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	b11b      	cbz	r3, 800c150 <sys_timeout_abs+0x30>
 800c148:	685a      	ldr	r2, [r3, #4]
 800c14a:	1aa2      	subs	r2, r4, r2
 800c14c:	2a00      	cmp	r2, #0
 800c14e:	daf8      	bge.n	800c142 <sys_timeout_abs+0x22>
        timeout->next = t->next;
 800c150:	6003      	str	r3, [r0, #0]
        t->next = timeout;
 800c152:	6008      	str	r0, [r1, #0]
        break;
      }
    }
  }
}
 800c154:	bd70      	pop	{r4, r5, r6, pc}
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800c156:	4b05      	ldr	r3, [pc, #20]	; (800c16c <sys_timeout_abs+0x4c>)
 800c158:	22be      	movs	r2, #190	; 0xbe
 800c15a:	4905      	ldr	r1, [pc, #20]	; (800c170 <sys_timeout_abs+0x50>)
 800c15c:	4805      	ldr	r0, [pc, #20]	; (800c174 <sys_timeout_abs+0x54>)
}
 800c15e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800c162:	f001 bf5f 	b.w	800e024 <iprintf>
 800c166:	bf00      	nop
 800c168:	240105a8 	.word	0x240105a8
 800c16c:	0801122c 	.word	0x0801122c
 800c170:	08011260 	.word	0x08011260
 800c174:	0800ef30 	.word	0x0800ef30

0800c178 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800c178:	b538      	push	{r3, r4, r5, lr}
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800c17a:	6843      	ldr	r3, [r0, #4]
{
 800c17c:	4604      	mov	r4, r0
  cyclic->handler();
 800c17e:	4798      	blx	r3

  now = sys_now();
 800c180:	f7f7 fd56 	bl	8003c30 <sys_now>
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800c184:	4b09      	ldr	r3, [pc, #36]	; (800c1ac <lwip_cyclic_timer+0x34>)
 800c186:	6825      	ldr	r5, [r4, #0]
 800c188:	681b      	ldr	r3, [r3, #0]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800c18a:	4909      	ldr	r1, [pc, #36]	; (800c1b0 <lwip_cyclic_timer+0x38>)
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800c18c:	442b      	add	r3, r5
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800c18e:	1a1a      	subs	r2, r3, r0
 800c190:	2a00      	cmp	r2, #0
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800c192:	4622      	mov	r2, r4
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800c194:	da04      	bge.n	800c1a0 <lwip_cyclic_timer+0x28>
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800c196:	4428      	add	r0, r5
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800c198:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800c19c:	f7ff bfc0 	b.w	800c120 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800c1a0:	4618      	mov	r0, r3
}
 800c1a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800c1a6:	f7ff bfbb 	b.w	800c120 <sys_timeout_abs>
 800c1aa:	bf00      	nop
 800c1ac:	240105a4 	.word	0x240105a4
 800c1b0:	0800c179 	.word	0x0800c179

0800c1b4 <tcpip_tcp_timer>:
{
 800c1b4:	b508      	push	{r3, lr}
  tcp_tmr();
 800c1b6:	f7fd f8cd 	bl	8009354 <tcp_tmr>
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800c1ba:	4b0a      	ldr	r3, [pc, #40]	; (800c1e4 <tcpip_tcp_timer+0x30>)
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	b153      	cbz	r3, 800c1d6 <tcpip_tcp_timer+0x22>
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();
 800c1c0:	f7f7 feba 	bl	8003f38 <sys_check_core_locking>

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800c1c4:	f7f7 fd34 	bl	8003c30 <sys_now>

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800c1c8:	2200      	movs	r2, #0
 800c1ca:	4907      	ldr	r1, [pc, #28]	; (800c1e8 <tcpip_tcp_timer+0x34>)
 800c1cc:	30fa      	adds	r0, #250	; 0xfa
}
 800c1ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_timeout_abs(next_timeout_time, handler, arg);
 800c1d2:	f7ff bfa5 	b.w	800c120 <sys_timeout_abs>
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800c1d6:	4b05      	ldr	r3, [pc, #20]	; (800c1ec <tcpip_tcp_timer+0x38>)
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d1f0      	bne.n	800c1c0 <tcpip_tcp_timer+0xc>
    tcpip_tcp_timer_active = 0;
 800c1de:	4a04      	ldr	r2, [pc, #16]	; (800c1f0 <tcpip_tcp_timer+0x3c>)
 800c1e0:	6013      	str	r3, [r2, #0]
}
 800c1e2:	bd08      	pop	{r3, pc}
 800c1e4:	24010548 	.word	0x24010548
 800c1e8:	0800c1b5 	.word	0x0800c1b5
 800c1ec:	24010560 	.word	0x24010560
 800c1f0:	240105ac 	.word	0x240105ac

0800c1f4 <tcp_timer_needed>:
{
 800c1f4:	b508      	push	{r3, lr}
  LWIP_ASSERT_CORE_LOCKED();
 800c1f6:	f7f7 fe9f 	bl	8003f38 <sys_check_core_locking>
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800c1fa:	4b0c      	ldr	r3, [pc, #48]	; (800c22c <tcp_timer_needed+0x38>)
 800c1fc:	681a      	ldr	r2, [r3, #0]
 800c1fe:	b99a      	cbnz	r2, 800c228 <tcp_timer_needed+0x34>
 800c200:	4a0b      	ldr	r2, [pc, #44]	; (800c230 <tcp_timer_needed+0x3c>)
 800c202:	6812      	ldr	r2, [r2, #0]
 800c204:	b162      	cbz	r2, 800c220 <tcp_timer_needed+0x2c>
    tcpip_tcp_timer_active = 1;
 800c206:	2201      	movs	r2, #1
 800c208:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT_CORE_LOCKED();
 800c20a:	f7f7 fe95 	bl	8003f38 <sys_check_core_locking>
  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800c20e:	f7f7 fd0f 	bl	8003c30 <sys_now>
  sys_timeout_abs(next_timeout_time, handler, arg);
 800c212:	2200      	movs	r2, #0
 800c214:	4907      	ldr	r1, [pc, #28]	; (800c234 <tcp_timer_needed+0x40>)
 800c216:	30fa      	adds	r0, #250	; 0xfa
}
 800c218:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_timeout_abs(next_timeout_time, handler, arg);
 800c21c:	f7ff bf80 	b.w	800c120 <sys_timeout_abs>
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800c220:	4a05      	ldr	r2, [pc, #20]	; (800c238 <tcp_timer_needed+0x44>)
 800c222:	6812      	ldr	r2, [r2, #0]
 800c224:	2a00      	cmp	r2, #0
 800c226:	d1ee      	bne.n	800c206 <tcp_timer_needed+0x12>
}
 800c228:	bd08      	pop	{r3, pc}
 800c22a:	bf00      	nop
 800c22c:	240105ac 	.word	0x240105ac
 800c230:	24010548 	.word	0x24010548
 800c234:	0800c1b5 	.word	0x0800c1b5
 800c238:	24010560 	.word	0x24010560

0800c23c <sys_timeouts_init>:
{
 800c23c:	b510      	push	{r4, lr}
  sys_timeout_abs(next_timeout_time, handler, arg);
 800c23e:	4c0c      	ldr	r4, [pc, #48]	; (800c270 <sys_timeouts_init+0x34>)
  LWIP_ASSERT_CORE_LOCKED();
 800c240:	f7f7 fe7a 	bl	8003f38 <sys_check_core_locking>
  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800c244:	f7f7 fcf4 	bl	8003c30 <sys_now>
  sys_timeout_abs(next_timeout_time, handler, arg);
 800c248:	490a      	ldr	r1, [pc, #40]	; (800c274 <sys_timeouts_init+0x38>)
 800c24a:	f104 0208 	add.w	r2, r4, #8
 800c24e:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
 800c252:	f7ff ff65 	bl	800c120 <sys_timeout_abs>
  LWIP_ASSERT_CORE_LOCKED();
 800c256:	f7f7 fe6f 	bl	8003f38 <sys_check_core_locking>
  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800c25a:	f7f7 fce9 	bl	8003c30 <sys_now>
  sys_timeout_abs(next_timeout_time, handler, arg);
 800c25e:	f104 0210 	add.w	r2, r4, #16
 800c262:	4904      	ldr	r1, [pc, #16]	; (800c274 <sys_timeouts_init+0x38>)
 800c264:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
}
 800c268:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  sys_timeout_abs(next_timeout_time, handler, arg);
 800c26c:	f7ff bf58 	b.w	800c120 <sys_timeout_abs>
 800c270:	080112a0 	.word	0x080112a0
 800c274:	0800c179 	.word	0x0800c179

0800c278 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800c278:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();
 800c27c:	f7f7 fe5c 	bl	8003f38 <sys_check_core_locking>

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800c280:	4c10      	ldr	r4, [pc, #64]	; (800c2c4 <sys_check_timeouts+0x4c>)
 800c282:	f7f7 fcd5 	bl	8003c30 <sys_now>

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
    handler = tmptimeout->h;
    arg = tmptimeout->arg;
    current_timeout_due_time = tmptimeout->time;
 800c286:	f8df 8040 	ldr.w	r8, [pc, #64]	; 800c2c8 <sys_check_timeouts+0x50>
  now = sys_now();
 800c28a:	4607      	mov	r7, r0
 800c28c:	e00f      	b.n	800c2ae <sys_check_timeouts+0x36>
    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800c28e:	685a      	ldr	r2, [r3, #4]
 800c290:	eba7 0c02 	sub.w	ip, r7, r2
 800c294:	f1bc 0f00 	cmp.w	ip, #0
 800c298:	db0e      	blt.n	800c2b8 <sys_check_timeouts+0x40>
    handler = tmptimeout->h;
 800c29a:	689d      	ldr	r5, [r3, #8]
    next_timeout = tmptimeout->next;
 800c29c:	681e      	ldr	r6, [r3, #0]
    arg = tmptimeout->arg;
 800c29e:	f8d3 900c 	ldr.w	r9, [r3, #12]
    current_timeout_due_time = tmptimeout->time;
 800c2a2:	f8c8 2000 	str.w	r2, [r8]
    next_timeout = tmptimeout->next;
 800c2a6:	6026      	str	r6, [r4, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800c2a8:	f7fa ff56 	bl	8007158 <memp_free>
    if (handler != NULL) {
 800c2ac:	b935      	cbnz	r5, 800c2bc <sys_check_timeouts+0x44>
    tmptimeout = next_timeout;
 800c2ae:	6823      	ldr	r3, [r4, #0]
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800c2b0:	200a      	movs	r0, #10
 800c2b2:	4619      	mov	r1, r3
    if (tmptimeout == NULL) {
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d1ea      	bne.n	800c28e <sys_check_timeouts+0x16>
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800c2b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      handler(arg);
 800c2bc:	4648      	mov	r0, r9
 800c2be:	47a8      	blx	r5
 800c2c0:	e7f5      	b.n	800c2ae <sys_check_timeouts+0x36>
 800c2c2:	bf00      	nop
 800c2c4:	240105a8 	.word	0x240105a8
 800c2c8:	240105a4 	.word	0x240105a4

0800c2cc <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 800c2cc:	b510      	push	{r4, lr}
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 800c2ce:	4c08      	ldr	r4, [pc, #32]	; (800c2f0 <sys_timeouts_sleeptime+0x24>)
  LWIP_ASSERT_CORE_LOCKED();
 800c2d0:	f7f7 fe32 	bl	8003f38 <sys_check_core_locking>
  if (next_timeout == NULL) {
 800c2d4:	6823      	ldr	r3, [r4, #0]
 800c2d6:	b13b      	cbz	r3, 800c2e8 <sys_timeouts_sleeptime+0x1c>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
  }
  now = sys_now();
 800c2d8:	f7f7 fcaa 	bl	8003c30 <sys_now>
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 800c2dc:	6823      	ldr	r3, [r4, #0]
 800c2de:	685b      	ldr	r3, [r3, #4]
    return 0;
 800c2e0:	1a18      	subs	r0, r3, r0
 800c2e2:	bf48      	it	mi
 800c2e4:	2000      	movmi	r0, #0
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
    return ret;
  }
}
 800c2e6:	bd10      	pop	{r4, pc}
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 800c2e8:	f04f 30ff 	mov.w	r0, #4294967295
}
 800c2ec:	bd10      	pop	{r4, pc}
 800c2ee:	bf00      	nop
 800c2f0:	240105a8 	.word	0x240105a8

0800c2f4 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800c2f4:	b508      	push	{r3, lr}
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800c2f6:	f001 fda7 	bl	800de48 <rand>
 800c2fa:	4b02      	ldr	r3, [pc, #8]	; (800c304 <udp_init+0x10>)
 800c2fc:	4a02      	ldr	r2, [pc, #8]	; (800c308 <udp_init+0x14>)
 800c2fe:	4303      	orrs	r3, r0
 800c300:	8013      	strh	r3, [r2, #0]
#endif /* LWIP_RAND */
}
 800c302:	bd08      	pop	{r3, pc}
 800c304:	ffffc000 	.word	0xffffc000
 800c308:	2400002e 	.word	0x2400002e

0800c30c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800c30c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c310:	4680      	mov	r8, r0
 800c312:	b085      	sub	sp, #20
 800c314:	460f      	mov	r7, r1
  u8_t broadcast;
  u8_t for_us = 0;

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();
 800c316:	f7f7 fe0f 	bl	8003f38 <sys_check_core_locking>

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800c31a:	f1b8 0f00 	cmp.w	r8, #0
 800c31e:	f000 80af 	beq.w	800c480 <udp_input+0x174>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800c322:	2f00      	cmp	r7, #0
 800c324:	f000 80b5 	beq.w	800c492 <udp_input+0x186>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800c328:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 800c32c:	2b07      	cmp	r3, #7
 800c32e:	f240 8091 	bls.w	800c454 <udp_input+0x148>
  }

  udphdr = (struct udp_hdr *)p->payload;

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800c332:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 800c508 <udp_input+0x1fc>
  udphdr = (struct udp_hdr *)p->payload;
 800c336:	f8d8 4004 	ldr.w	r4, [r8, #4]
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800c33a:	f8d9 1000 	ldr.w	r1, [r9]
 800c33e:	f8d9 0014 	ldr.w	r0, [r9, #20]
 800c342:	f000 fff1 	bl	800d328 <ip4_addr_isbroadcast_u32>
 800c346:	4682      	mov	sl, r0

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800c348:	8820      	ldrh	r0, [r4, #0]
 800c34a:	f7fa fb29 	bl	80069a0 <lwip_htons>
 800c34e:	4603      	mov	r3, r0
  dest = lwip_ntohs(udphdr->dest);
 800c350:	8860      	ldrh	r0, [r4, #2]
  src = lwip_ntohs(udphdr->src);
 800c352:	9303      	str	r3, [sp, #12]
  dest = lwip_ntohs(udphdr->dest);
 800c354:	f7fa fb24 	bl	80069a0 <lwip_htons>
  uncon_pcb = NULL;
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800c358:	4b63      	ldr	r3, [pc, #396]	; (800c4e8 <udp_input+0x1dc>)
  dest = lwip_ntohs(udphdr->dest);
 800c35a:	4605      	mov	r5, r0
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800c35c:	681c      	ldr	r4, [r3, #0]
 800c35e:	2c00      	cmp	r4, #0
 800c360:	d064      	beq.n	800c42c <udp_input+0x120>
  uncon_pcb = NULL;
 800c362:	f04f 0b00 	mov.w	fp, #0
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800c366:	f8df c190 	ldr.w	ip, [pc, #400]	; 800c4f8 <udp_input+0x1ec>
 800c36a:	4960      	ldr	r1, [pc, #384]	; (800c4ec <udp_input+0x1e0>)
  prev = NULL;
 800c36c:	465e      	mov	r6, fp
 800c36e:	e004      	b.n	800c37a <udp_input+0x6e>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800c370:	68e2      	ldr	r2, [r4, #12]
 800c372:	4626      	mov	r6, r4
 800c374:	2a00      	cmp	r2, #0
 800c376:	d056      	beq.n	800c426 <udp_input+0x11a>
 800c378:	4614      	mov	r4, r2
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800c37a:	8a62      	ldrh	r2, [r4, #18]
 800c37c:	42aa      	cmp	r2, r5
 800c37e:	d1f7      	bne.n	800c370 <udp_input+0x64>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800c380:	2f00      	cmp	r7, #0
 800c382:	d06d      	beq.n	800c460 <udp_input+0x154>
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c384:	7a20      	ldrb	r0, [r4, #8]
 800c386:	b138      	cbz	r0, 800c398 <udp_input+0x8c>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800c388:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800c38c:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 800c390:	3201      	adds	r2, #1
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c392:	b2d2      	uxtb	r2, r2
 800c394:	4290      	cmp	r0, r2
 800c396:	d1eb      	bne.n	800c370 <udp_input+0x64>
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800c398:	6822      	ldr	r2, [r4, #0]
    if (broadcast != 0) {
 800c39a:	f1ba 0f00 	cmp.w	sl, #0
 800c39e:	d038      	beq.n	800c412 <udp_input+0x106>
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800c3a0:	b13a      	cbz	r2, 800c3b2 <udp_input+0xa6>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800c3a2:	f8d9 0014 	ldr.w	r0, [r9, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800c3a6:	1c43      	adds	r3, r0, #1
 800c3a8:	d003      	beq.n	800c3b2 <udp_input+0xa6>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800c3aa:	4050      	eors	r0, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800c3ac:	68bb      	ldr	r3, [r7, #8]
 800c3ae:	4218      	tst	r0, r3
 800c3b0:	d1de      	bne.n	800c370 <udp_input+0x64>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800c3b2:	7c20      	ldrb	r0, [r4, #16]
 800c3b4:	0743      	lsls	r3, r0, #29
 800c3b6:	d409      	bmi.n	800c3cc <udp_input+0xc0>
        if (uncon_pcb == NULL) {
 800c3b8:	f1bb 0f00 	cmp.w	fp, #0
 800c3bc:	d059      	beq.n	800c472 <udp_input+0x166>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800c3be:	f1ba 0f00 	cmp.w	sl, #0
 800c3c2:	d003      	beq.n	800c3cc <udp_input+0xc0>
 800c3c4:	f8d9 0014 	ldr.w	r0, [r9, #20]
 800c3c8:	3001      	adds	r0, #1
 800c3ca:	d069      	beq.n	800c4a0 <udp_input+0x194>
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800c3cc:	8aa2      	ldrh	r2, [r4, #20]
 800c3ce:	9803      	ldr	r0, [sp, #12]
 800c3d0:	4282      	cmp	r2, r0
 800c3d2:	d1cd      	bne.n	800c370 <udp_input+0x64>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800c3d4:	6862      	ldr	r2, [r4, #4]
      if ((pcb->remote_port == src) &&
 800c3d6:	b11a      	cbz	r2, 800c3e0 <udp_input+0xd4>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800c3d8:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800c3dc:	4282      	cmp	r2, r0
 800c3de:	d1c7      	bne.n	800c370 <udp_input+0x64>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
        /* the first fully matching PCB */
        if (prev != NULL) {
 800c3e0:	b12e      	cbz	r6, 800c3ee <udp_input+0xe2>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800c3e2:	68e3      	ldr	r3, [r4, #12]
          pcb->next = udp_pcbs;
 800c3e4:	4a40      	ldr	r2, [pc, #256]	; (800c4e8 <udp_input+0x1dc>)
          prev->next = pcb->next;
 800c3e6:	60f3      	str	r3, [r6, #12]
          pcb->next = udp_pcbs;
 800c3e8:	6813      	ldr	r3, [r2, #0]
          udp_pcbs = pcb;
 800c3ea:	6014      	str	r4, [r2, #0]
          pcb->next = udp_pcbs;
 800c3ec:	60e3      	str	r3, [r4, #12]
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800c3ee:	2108      	movs	r1, #8
 800c3f0:	4640      	mov	r0, r8
 800c3f2:	f7fb fa0b 	bl	800780c <pbuf_remove_header>
 800c3f6:	2800      	cmp	r0, #0
 800c3f8:	d15b      	bne.n	800c4b2 <udp_input+0x1a6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800c3fa:	69a5      	ldr	r5, [r4, #24]
 800c3fc:	b355      	cbz	r5, 800c454 <udp_input+0x148>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800c3fe:	9b03      	ldr	r3, [sp, #12]
 800c400:	4642      	mov	r2, r8
 800c402:	69e0      	ldr	r0, [r4, #28]
 800c404:	4621      	mov	r1, r4
 800c406:	9300      	str	r3, [sp, #0]
 800c408:	4b39      	ldr	r3, [pc, #228]	; (800c4f0 <udp_input+0x1e4>)
 800c40a:	47a8      	blx	r5
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800c40c:	b005      	add	sp, #20
 800c40e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800c412:	2a00      	cmp	r2, #0
 800c414:	d0cd      	beq.n	800c3b2 <udp_input+0xa6>
 800c416:	f8d9 0014 	ldr.w	r0, [r9, #20]
 800c41a:	4282      	cmp	r2, r0
 800c41c:	d0c9      	beq.n	800c3b2 <udp_input+0xa6>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800c41e:	68e2      	ldr	r2, [r4, #12]
 800c420:	4626      	mov	r6, r4
 800c422:	2a00      	cmp	r2, #0
 800c424:	d1a8      	bne.n	800c378 <udp_input+0x6c>
  if (pcb != NULL) {
 800c426:	f1bb 0f00 	cmp.w	fp, #0
 800c42a:	d15b      	bne.n	800c4e4 <udp_input+0x1d8>
  if (for_us) {
 800c42c:	687a      	ldr	r2, [r7, #4]
 800c42e:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800c432:	429a      	cmp	r2, r3
 800c434:	d10e      	bne.n	800c454 <udp_input+0x148>
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800c436:	2108      	movs	r1, #8
 800c438:	4640      	mov	r0, r8
 800c43a:	f7fb f9e7 	bl	800780c <pbuf_remove_header>
 800c43e:	2800      	cmp	r0, #0
 800c440:	d137      	bne.n	800c4b2 <udp_input+0x1a6>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800c442:	f1ba 0f00 	cmp.w	sl, #0
 800c446:	d105      	bne.n	800c454 <udp_input+0x148>
 800c448:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800c44c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c450:	2be0      	cmp	r3, #224	; 0xe0
 800c452:	d13b      	bne.n	800c4cc <udp_input+0x1c0>
      pbuf_free(p);
 800c454:	4640      	mov	r0, r8
}
 800c456:	b005      	add	sp, #20
 800c458:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      pbuf_free(p);
 800c45c:	f7fb ba42 	b.w	80078e4 <pbuf_free>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800c460:	4663      	mov	r3, ip
 800c462:	2288      	movs	r2, #136	; 0x88
 800c464:	4823      	ldr	r0, [pc, #140]	; (800c4f4 <udp_input+0x1e8>)
 800c466:	f001 fddd 	bl	800e024 <iprintf>
 800c46a:	f8df c08c 	ldr.w	ip, [pc, #140]	; 800c4f8 <udp_input+0x1ec>
 800c46e:	491f      	ldr	r1, [pc, #124]	; (800c4ec <udp_input+0x1e0>)
 800c470:	e788      	b.n	800c384 <udp_input+0x78>
      if ((pcb->remote_port == src) &&
 800c472:	8aa2      	ldrh	r2, [r4, #20]
 800c474:	46a3      	mov	fp, r4
 800c476:	9803      	ldr	r0, [sp, #12]
 800c478:	4282      	cmp	r2, r0
 800c47a:	f47f af79 	bne.w	800c370 <udp_input+0x64>
 800c47e:	e7a9      	b.n	800c3d4 <udp_input+0xc8>
  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800c480:	4b1d      	ldr	r3, [pc, #116]	; (800c4f8 <udp_input+0x1ec>)
 800c482:	22cf      	movs	r2, #207	; 0xcf
 800c484:	491d      	ldr	r1, [pc, #116]	; (800c4fc <udp_input+0x1f0>)
 800c486:	481b      	ldr	r0, [pc, #108]	; (800c4f4 <udp_input+0x1e8>)
 800c488:	f001 fdcc 	bl	800e024 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800c48c:	2f00      	cmp	r7, #0
 800c48e:	f47f af4b 	bne.w	800c328 <udp_input+0x1c>
 800c492:	4b19      	ldr	r3, [pc, #100]	; (800c4f8 <udp_input+0x1ec>)
 800c494:	22d0      	movs	r2, #208	; 0xd0
 800c496:	491a      	ldr	r1, [pc, #104]	; (800c500 <udp_input+0x1f4>)
 800c498:	4816      	ldr	r0, [pc, #88]	; (800c4f4 <udp_input+0x1e8>)
 800c49a:	f001 fdc3 	bl	800e024 <iprintf>
 800c49e:	e743      	b.n	800c328 <udp_input+0x1c>
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800c4a0:	6878      	ldr	r0, [r7, #4]
 800c4a2:	f8db 3000 	ldr.w	r3, [fp]
 800c4a6:	4283      	cmp	r3, r0
 800c4a8:	d090      	beq.n	800c3cc <udp_input+0xc0>
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800c4aa:	4290      	cmp	r0, r2
 800c4ac:	bf08      	it	eq
 800c4ae:	46a3      	moveq	fp, r4
 800c4b0:	e78c      	b.n	800c3cc <udp_input+0xc0>
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800c4b2:	4b11      	ldr	r3, [pc, #68]	; (800c4f8 <udp_input+0x1ec>)
 800c4b4:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800c4b8:	4912      	ldr	r1, [pc, #72]	; (800c504 <udp_input+0x1f8>)
 800c4ba:	480e      	ldr	r0, [pc, #56]	; (800c4f4 <udp_input+0x1e8>)
 800c4bc:	f001 fdb2 	bl	800e024 <iprintf>
      pbuf_free(p);
 800c4c0:	4640      	mov	r0, r8
}
 800c4c2:	b005      	add	sp, #20
 800c4c4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      pbuf_free(p);
 800c4c8:	f7fb ba0c 	b.w	80078e4 <pbuf_free>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800c4cc:	f8b9 100c 	ldrh.w	r1, [r9, #12]
 800c4d0:	4640      	mov	r0, r8
 800c4d2:	3108      	adds	r1, #8
 800c4d4:	b209      	sxth	r1, r1
 800c4d6:	f7fb f9cd 	bl	8007874 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800c4da:	2103      	movs	r1, #3
 800c4dc:	4640      	mov	r0, r8
 800c4de:	f000 fd73 	bl	800cfc8 <icmp_dest_unreach>
 800c4e2:	e7b7      	b.n	800c454 <udp_input+0x148>
 800c4e4:	465c      	mov	r4, fp
 800c4e6:	e782      	b.n	800c3ee <udp_input+0xe2>
 800c4e8:	240105b0 	.word	0x240105b0
 800c4ec:	0801131c 	.word	0x0801131c
 800c4f0:	24009a98 	.word	0x24009a98
 800c4f4:	0800ef30 	.word	0x0800ef30
 800c4f8:	080112b8 	.word	0x080112b8
 800c4fc:	080112e8 	.word	0x080112e8
 800c500:	08011300 	.word	0x08011300
 800c504:	08011344 	.word	0x08011344
 800c508:	24009a88 	.word	0x24009a88

0800c50c <udp_netif_ip_addr_changed>:
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800c50c:	b110      	cbz	r0, 800c514 <udp_netif_ip_addr_changed+0x8>
 800c50e:	6802      	ldr	r2, [r0, #0]
 800c510:	b101      	cbz	r1, 800c514 <udp_netif_ip_addr_changed+0x8>
 800c512:	b902      	cbnz	r2, 800c516 <udp_netif_ip_addr_changed+0xa>
 800c514:	4770      	bx	lr
 800c516:	680b      	ldr	r3, [r1, #0]
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d0fb      	beq.n	800c514 <udp_netif_ip_addr_changed+0x8>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800c51c:	4b08      	ldr	r3, [pc, #32]	; (800c540 <udp_netif_ip_addr_changed+0x34>)
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	2b00      	cmp	r3, #0
 800c522:	d0f7      	beq.n	800c514 <udp_netif_ip_addr_changed+0x8>
{
 800c524:	b410      	push	{r4}
 800c526:	e000      	b.n	800c52a <udp_netif_ip_addr_changed+0x1e>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800c528:	6802      	ldr	r2, [r0, #0]
 800c52a:	681c      	ldr	r4, [r3, #0]
 800c52c:	4294      	cmp	r4, r2
 800c52e:	d101      	bne.n	800c534 <udp_netif_ip_addr_changed+0x28>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800c530:	680a      	ldr	r2, [r1, #0]
 800c532:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800c534:	68db      	ldr	r3, [r3, #12]
 800c536:	2b00      	cmp	r3, #0
 800c538:	d1f6      	bne.n	800c528 <udp_netif_ip_addr_changed+0x1c>
      }
    }
  }
}
 800c53a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c53e:	4770      	bx	lr
 800c540:	240105b0 	.word	0x240105b0

0800c544 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800c544:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c548:	468b      	mov	fp, r1
 800c54a:	2300      	movs	r3, #0
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
  s16_t empty = ARP_TABLE_SIZE;
  s16_t i = 0;
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800c54c:	f04f 080a 	mov.w	r8, #10
{
 800c550:	b085      	sub	sp, #20
 800c552:	4617      	mov	r7, r2
 800c554:	4e52      	ldr	r6, [pc, #328]	; (800c6a0 <etharp_find_entry+0x15c>)
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800c556:	465a      	mov	r2, fp
{
 800c558:	4605      	mov	r5, r0
 800c55a:	4631      	mov	r1, r6
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800c55c:	4699      	mov	r9, r3
  s16_t empty = ARP_TABLE_SIZE;
 800c55e:	4644      	mov	r4, r8
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800c560:	46c6      	mov	lr, r8
 800c562:	46c3      	mov	fp, r8
 800c564:	469a      	mov	sl, r3
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800c566:	9303      	str	r3, [sp, #12]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800c568:	e9cd 7201 	strd	r7, r2, [sp, #4]
 800c56c:	e004      	b.n	800c578 <etharp_find_entry+0x34>
 800c56e:	4664      	mov	r4, ip
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c570:	3301      	adds	r3, #1
 800c572:	3118      	adds	r1, #24
 800c574:	2b0a      	cmp	r3, #10
 800c576:	d016      	beq.n	800c5a6 <etharp_find_entry+0x62>
    u8_t state = arp_table[i].state;
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800c578:	2c0a      	cmp	r4, #10
 800c57a:	fa0f fc83 	sxth.w	ip, r3
    u8_t state = arp_table[i].state;
 800c57e:	7d0a      	ldrb	r2, [r1, #20]
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800c580:	d13a      	bne.n	800c5f8 <etharp_find_entry+0xb4>
 800c582:	2a00      	cmp	r2, #0
 800c584:	d0f3      	beq.n	800c56e <etharp_find_entry+0x2a>
      empty = i;
    } else if (state != ETHARP_STATE_EMPTY) {
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800c586:	b11d      	cbz	r5, 800c590 <etharp_find_entry+0x4c>
 800c588:	6828      	ldr	r0, [r5, #0]
 800c58a:	684f      	ldr	r7, [r1, #4]
 800c58c:	42b8      	cmp	r0, r7
 800c58e:	d03e      	beq.n	800c60e <etharp_find_entry+0xca>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800c590:	2a01      	cmp	r2, #1
 800c592:	d034      	beq.n	800c5fe <etharp_find_entry+0xba>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800c594:	8a4a      	ldrh	r2, [r1, #18]
 800c596:	454a      	cmp	r2, r9
 800c598:	d3ea      	bcc.n	800c570 <etharp_find_entry+0x2c>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c59a:	3301      	adds	r3, #1
          if (arp_table[i].ctime >= age_stable) {
 800c59c:	4691      	mov	r9, r2
 800c59e:	46e6      	mov	lr, ip
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c5a0:	3118      	adds	r1, #24
 800c5a2:	2b0a      	cmp	r3, #10
 800c5a4:	d1e8      	bne.n	800c578 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800c5a6:	46da      	mov	sl, fp
 800c5a8:	e9dd 7b01 	ldrd	r7, fp, [sp, #4]
 800c5ac:	f1bb 0f01 	cmp.w	fp, #1
 800c5b0:	d172      	bne.n	800c698 <etharp_find_entry+0x154>
 800c5b2:	2c0a      	cmp	r4, #10
 800c5b4:	d032      	beq.n	800c61c <etharp_find_entry+0xd8>
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
    etharp_free_entry(i);
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800c5b6:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800c5ba:	46a1      	mov	r9, r4
 800c5bc:	ea4f 0844 	mov.w	r8, r4, lsl #1
 800c5c0:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 800c5c4:	7d1b      	ldrb	r3, [r3, #20]
 800c5c6:	b133      	cbz	r3, 800c5d6 <etharp_find_entry+0x92>
 800c5c8:	4b36      	ldr	r3, [pc, #216]	; (800c6a4 <etharp_find_entry+0x160>)
 800c5ca:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800c5ce:	4936      	ldr	r1, [pc, #216]	; (800c6a8 <etharp_find_entry+0x164>)
 800c5d0:	4836      	ldr	r0, [pc, #216]	; (800c6ac <etharp_find_entry+0x168>)
 800c5d2:	f001 fd27 	bl	800e024 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800c5d6:	b12d      	cbz	r5, 800c5e4 <etharp_find_entry+0xa0>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800c5d8:	eb08 0309 	add.w	r3, r8, r9
 800c5dc:	682a      	ldr	r2, [r5, #0]
 800c5de:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 800c5e2:	605a      	str	r2, [r3, #4]
  }
  arp_table[i].ctime = 0;
 800c5e4:	44c8      	add	r8, r9
 800c5e6:	2300      	movs	r3, #0
 800c5e8:	eb06 06c8 	add.w	r6, r6, r8, lsl #3
 800c5ec:	8273      	strh	r3, [r6, #18]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800c5ee:	60b7      	str	r7, [r6, #8]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
}
 800c5f0:	4620      	mov	r0, r4
 800c5f2:	b005      	add	sp, #20
 800c5f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    } else if (state != ETHARP_STATE_EMPTY) {
 800c5f8:	2a00      	cmp	r2, #0
 800c5fa:	d0b9      	beq.n	800c570 <etharp_find_entry+0x2c>
 800c5fc:	e7c3      	b.n	800c586 <etharp_find_entry+0x42>
        if (arp_table[i].q != NULL) {
 800c5fe:	680a      	ldr	r2, [r1, #0]
 800c600:	b3a2      	cbz	r2, 800c66c <etharp_find_entry+0x128>
          if (arp_table[i].ctime >= age_queue) {
 800c602:	8a4a      	ldrh	r2, [r1, #18]
 800c604:	4552      	cmp	r2, sl
 800c606:	d3b3      	bcc.n	800c570 <etharp_find_entry+0x2c>
 800c608:	4692      	mov	sl, r2
 800c60a:	46e0      	mov	r8, ip
 800c60c:	e7b0      	b.n	800c570 <etharp_find_entry+0x2c>
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800c60e:	9f01      	ldr	r7, [sp, #4]
 800c610:	b117      	cbz	r7, 800c618 <etharp_find_entry+0xd4>
 800c612:	6888      	ldr	r0, [r1, #8]
 800c614:	42b8      	cmp	r0, r7
 800c616:	d1bb      	bne.n	800c590 <etharp_find_entry+0x4c>
 800c618:	4664      	mov	r4, ip
 800c61a:	e7e9      	b.n	800c5f0 <etharp_find_entry+0xac>
    if (old_stable < ARP_TABLE_SIZE) {
 800c61c:	f1be 0f0a 	cmp.w	lr, #10
 800c620:	d02c      	beq.n	800c67c <etharp_find_entry+0x138>
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800c622:	eb0e 034e 	add.w	r3, lr, lr, lsl #1
 800c626:	46f1      	mov	r9, lr
 800c628:	ea4f 084e 	mov.w	r8, lr, lsl #1
 800c62c:	f856 3033 	ldr.w	r3, [r6, r3, lsl #3]
 800c630:	b383      	cbz	r3, 800c694 <etharp_find_entry+0x150>
 800c632:	464c      	mov	r4, r9
 800c634:	4b1b      	ldr	r3, [pc, #108]	; (800c6a4 <etharp_find_entry+0x160>)
 800c636:	f240 126d 	movw	r2, #365	; 0x16d
 800c63a:	491d      	ldr	r1, [pc, #116]	; (800c6b0 <etharp_find_entry+0x16c>)
 800c63c:	481b      	ldr	r0, [pc, #108]	; (800c6ac <etharp_find_entry+0x168>)
 800c63e:	f001 fcf1 	bl	800e024 <iprintf>
  if (arp_table[i].q != NULL) {
 800c642:	eb09 0a49 	add.w	sl, r9, r9, lsl #1
 800c646:	ea4f 0849 	mov.w	r8, r9, lsl #1
 800c64a:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 800c64e:	f856 000a 	ldr.w	r0, [r6, sl]
 800c652:	b120      	cbz	r0, 800c65e <etharp_find_entry+0x11a>
    free_etharp_q(arp_table[i].q);
 800c654:	f7fb f946 	bl	80078e4 <pbuf_free>
    arp_table[i].q = NULL;
 800c658:	2300      	movs	r3, #0
 800c65a:	f846 300a 	str.w	r3, [r6, sl]
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800c65e:	eb08 0309 	add.w	r3, r8, r9
 800c662:	2200      	movs	r2, #0
 800c664:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 800c668:	751a      	strb	r2, [r3, #20]
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800c66a:	e7b4      	b.n	800c5d6 <etharp_find_entry+0x92>
          if (arp_table[i].ctime >= age_pending) {
 800c66c:	8a4a      	ldrh	r2, [r1, #18]
 800c66e:	9803      	ldr	r0, [sp, #12]
 800c670:	4282      	cmp	r2, r0
 800c672:	f4ff af7d 	bcc.w	800c570 <etharp_find_entry+0x2c>
 800c676:	46e3      	mov	fp, ip
 800c678:	9203      	str	r2, [sp, #12]
 800c67a:	e779      	b.n	800c570 <etharp_find_entry+0x2c>
    } else if (old_pending < ARP_TABLE_SIZE) {
 800c67c:	f1ba 0f0a 	cmp.w	sl, #10
 800c680:	d105      	bne.n	800c68e <etharp_find_entry+0x14a>
    } else if (old_queue < ARP_TABLE_SIZE) {
 800c682:	f1b8 0f0a 	cmp.w	r8, #10
 800c686:	d007      	beq.n	800c698 <etharp_find_entry+0x154>
    etharp_free_entry(i);
 800c688:	4644      	mov	r4, r8
 800c68a:	46c1      	mov	r9, r8
 800c68c:	e7d9      	b.n	800c642 <etharp_find_entry+0xfe>
 800c68e:	4654      	mov	r4, sl
 800c690:	46d1      	mov	r9, sl
 800c692:	e7d6      	b.n	800c642 <etharp_find_entry+0xfe>
 800c694:	4674      	mov	r4, lr
 800c696:	e7e2      	b.n	800c65e <etharp_find_entry+0x11a>
    return (s16_t)ERR_MEM;
 800c698:	f04f 34ff 	mov.w	r4, #4294967295
 800c69c:	e7a8      	b.n	800c5f0 <etharp_find_entry+0xac>
 800c69e:	bf00      	nop
 800c6a0:	240105b4 	.word	0x240105b4
 800c6a4:	08011360 	.word	0x08011360
 800c6a8:	080113b0 	.word	0x080113b0
 800c6ac:	0800ef30 	.word	0x0800ef30
 800c6b0:	08011398 	.word	0x08011398

0800c6b4 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800c6b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c6b8:	b082      	sub	sp, #8
 800c6ba:	4688      	mov	r8, r1
 800c6bc:	4691      	mov	r9, r2
 800c6be:	461f      	mov	r7, r3
 800c6c0:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
  struct pbuf *p;
  err_t result = ERR_OK;
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800c6c4:	4606      	mov	r6, r0
{
 800c6c6:	f8bd 4034 	ldrh.w	r4, [sp, #52]	; 0x34
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800c6ca:	2800      	cmp	r0, #0
 800c6cc:	d050      	beq.n	800c770 <etharp_raw+0xbc>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800c6ce:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c6d2:	211c      	movs	r1, #28
 800c6d4:	200e      	movs	r0, #14
 800c6d6:	f7fb f975 	bl	80079c4 <pbuf_alloc>
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800c6da:	4605      	mov	r5, r0
 800c6dc:	2800      	cmp	r0, #0
 800c6de:	d04f      	beq.n	800c780 <etharp_raw+0xcc>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800c6e0:	8943      	ldrh	r3, [r0, #10]
 800c6e2:	2b1b      	cmp	r3, #27
 800c6e4:	d93c      	bls.n	800c760 <etharp_raw+0xac>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800c6e6:	4620      	mov	r0, r4
  hdr = (struct etharp_hdr *)p->payload;
 800c6e8:	686c      	ldr	r4, [r5, #4]
  hdr->opcode = lwip_htons(opcode);
 800c6ea:	f7fa f959 	bl	80069a0 <lwip_htons>
 800c6ee:	80e0      	strh	r0, [r4, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800c6f0:	f896 302c 	ldrb.w	r3, [r6, #44]	; 0x2c
 800c6f4:	2b06      	cmp	r3, #6
 800c6f6:	d006      	beq.n	800c706 <etharp_raw+0x52>
 800c6f8:	4b23      	ldr	r3, [pc, #140]	; (800c788 <etharp_raw+0xd4>)
 800c6fa:	f240 4269 	movw	r2, #1129	; 0x469
 800c6fe:	4923      	ldr	r1, [pc, #140]	; (800c78c <etharp_raw+0xd8>)
 800c700:	4823      	ldr	r0, [pc, #140]	; (800c790 <etharp_raw+0xdc>)
 800c702:	f001 fc8f 	bl	800e024 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800c706:	6839      	ldr	r1, [r7, #0]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800c708:	4630      	mov	r0, r6
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800c70a:	2600      	movs	r6, #0
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800c70c:	464b      	mov	r3, r9
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800c70e:	60a1      	str	r1, [r4, #8]
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800c710:	4642      	mov	r2, r8
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800c712:	88b9      	ldrh	r1, [r7, #4]
 800c714:	81a1      	strh	r1, [r4, #12]
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800c716:	f8da 1000 	ldr.w	r1, [sl]
 800c71a:	f8c4 1012 	str.w	r1, [r4, #18]
 800c71e:	f8ba 1004 	ldrh.w	r1, [sl, #4]
 800c722:	82e1      	strh	r1, [r4, #22]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800c724:	990a      	ldr	r1, [sp, #40]	; 0x28
 800c726:	6809      	ldr	r1, [r1, #0]
 800c728:	f8c4 100e 	str.w	r1, [r4, #14]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800c72c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c72e:	6809      	ldr	r1, [r1, #0]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800c730:	7026      	strb	r6, [r4, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800c732:	61a1      	str	r1, [r4, #24]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800c734:	2101      	movs	r1, #1
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800c736:	70e6      	strb	r6, [r4, #3]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800c738:	7061      	strb	r1, [r4, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800c73a:	2108      	movs	r1, #8
 800c73c:	70a1      	strb	r1, [r4, #2]
  hdr->hwlen = ETH_HWADDR_LEN;
 800c73e:	2106      	movs	r1, #6
 800c740:	7121      	strb	r1, [r4, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800c742:	2104      	movs	r1, #4
 800c744:	7161      	strb	r1, [r4, #5]
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800c746:	f640 0106 	movw	r1, #2054	; 0x806
 800c74a:	9100      	str	r1, [sp, #0]
 800c74c:	4629      	mov	r1, r5
 800c74e:	f001 fab5 	bl	800dcbc <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800c752:	4628      	mov	r0, r5
 800c754:	f7fb f8c6 	bl	80078e4 <pbuf_free>
  p = NULL;
  /* could not allocate pbuf for ARP request */

  return result;
 800c758:	4630      	mov	r0, r6
}
 800c75a:	b002      	add	sp, #8
 800c75c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800c760:	4b09      	ldr	r3, [pc, #36]	; (800c788 <etharp_raw+0xd4>)
 800c762:	f240 4262 	movw	r2, #1122	; 0x462
 800c766:	490b      	ldr	r1, [pc, #44]	; (800c794 <etharp_raw+0xe0>)
 800c768:	4809      	ldr	r0, [pc, #36]	; (800c790 <etharp_raw+0xdc>)
 800c76a:	f001 fc5b 	bl	800e024 <iprintf>
 800c76e:	e7ba      	b.n	800c6e6 <etharp_raw+0x32>
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800c770:	4b05      	ldr	r3, [pc, #20]	; (800c788 <etharp_raw+0xd4>)
 800c772:	f240 4257 	movw	r2, #1111	; 0x457
 800c776:	4908      	ldr	r1, [pc, #32]	; (800c798 <etharp_raw+0xe4>)
 800c778:	4805      	ldr	r0, [pc, #20]	; (800c790 <etharp_raw+0xdc>)
 800c77a:	f001 fc53 	bl	800e024 <iprintf>
 800c77e:	e7a6      	b.n	800c6ce <etharp_raw+0x1a>
    return ERR_MEM;
 800c780:	f04f 30ff 	mov.w	r0, #4294967295
 800c784:	e7e9      	b.n	800c75a <etharp_raw+0xa6>
 800c786:	bf00      	nop
 800c788:	08011360 	.word	0x08011360
 800c78c:	08011410 	.word	0x08011410
 800c790:	0800ef30 	.word	0x0800ef30
 800c794:	080113dc 	.word	0x080113dc
 800c798:	0800f720 	.word	0x0800f720

0800c79c <etharp_output_to_arp_index>:
{
 800c79c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800c7a0:	4f39      	ldr	r7, [pc, #228]	; (800c888 <etharp_output_to_arp_index+0xec>)
 800c7a2:	eb02 0942 	add.w	r9, r2, r2, lsl #1
{
 800c7a6:	b084      	sub	sp, #16
 800c7a8:	4614      	mov	r4, r2
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800c7aa:	eb07 09c9 	add.w	r9, r7, r9, lsl #3
{
 800c7ae:	4605      	mov	r5, r0
 800c7b0:	460e      	mov	r6, r1
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800c7b2:	ea4f 0842 	mov.w	r8, r2, lsl #1
 800c7b6:	f899 3014 	ldrb.w	r3, [r9, #20]
 800c7ba:	2b01      	cmp	r3, #1
 800c7bc:	d93d      	bls.n	800c83a <etharp_output_to_arp_index+0x9e>
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800c7be:	2b02      	cmp	r3, #2
 800c7c0:	d013      	beq.n	800c7ea <etharp_output_to_arp_index+0x4e>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800c7c2:	f04f 0918 	mov.w	r9, #24
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800c7c6:	f105 0a26 	add.w	sl, r5, #38	; 0x26
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800c7ca:	fb09 7904 	mla	r9, r9, r4, r7
 800c7ce:	f109 090c 	add.w	r9, r9, #12
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800c7d2:	f44f 6400 	mov.w	r4, #2048	; 0x800
 800c7d6:	464b      	mov	r3, r9
 800c7d8:	4652      	mov	r2, sl
 800c7da:	4631      	mov	r1, r6
 800c7dc:	4628      	mov	r0, r5
 800c7de:	9400      	str	r4, [sp, #0]
 800c7e0:	f001 fa6c 	bl	800dcbc <ethernet_output>
}
 800c7e4:	b004      	add	sp, #16
 800c7e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800c7ea:	44a0      	add	r8, r4
 800c7ec:	eb07 08c8 	add.w	r8, r7, r8, lsl #3
 800c7f0:	f8b8 3012 	ldrh.w	r3, [r8, #18]
 800c7f4:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800c7f8:	d829      	bhi.n	800c84e <etharp_output_to_arp_index+0xb2>
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800c7fa:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800c7fe:	d3e0      	bcc.n	800c7c2 <etharp_output_to_arp_index+0x26>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800c800:	eb04 0444 	add.w	r4, r4, r4, lsl #1
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800c804:	2301      	movs	r3, #1
 800c806:	f105 0a26 	add.w	sl, r5, #38	; 0x26
 800c80a:	4628      	mov	r0, r5
 800c80c:	00e4      	lsls	r4, r4, #3
 800c80e:	9303      	str	r3, [sp, #12]
 800c810:	4b1e      	ldr	r3, [pc, #120]	; (800c88c <etharp_output_to_arp_index+0xf0>)
 800c812:	4651      	mov	r1, sl
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800c814:	f104 090c 	add.w	r9, r4, #12
 800c818:	3404      	adds	r4, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800c81a:	9301      	str	r3, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800c81c:	1d2b      	adds	r3, r5, #4
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800c81e:	44b9      	add	r9, r7
 800c820:	4427      	add	r7, r4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800c822:	9300      	str	r3, [sp, #0]
 800c824:	4653      	mov	r3, sl
 800c826:	464a      	mov	r2, r9
 800c828:	9702      	str	r7, [sp, #8]
 800c82a:	f7ff ff43 	bl	800c6b4 <etharp_raw>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800c82e:	2800      	cmp	r0, #0
 800c830:	d1cf      	bne.n	800c7d2 <etharp_output_to_arp_index+0x36>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800c832:	2303      	movs	r3, #3
 800c834:	f888 3014 	strb.w	r3, [r8, #20]
 800c838:	e7cb      	b.n	800c7d2 <etharp_output_to_arp_index+0x36>
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800c83a:	4b15      	ldr	r3, [pc, #84]	; (800c890 <etharp_output_to_arp_index+0xf4>)
 800c83c:	f240 22ee 	movw	r2, #750	; 0x2ee
 800c840:	4914      	ldr	r1, [pc, #80]	; (800c894 <etharp_output_to_arp_index+0xf8>)
 800c842:	4815      	ldr	r0, [pc, #84]	; (800c898 <etharp_output_to_arp_index+0xfc>)
 800c844:	f001 fbee 	bl	800e024 <iprintf>
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800c848:	f899 3014 	ldrb.w	r3, [r9, #20]
 800c84c:	e7b7      	b.n	800c7be <etharp_output_to_arp_index+0x22>
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800c84e:	eb04 0944 	add.w	r9, r4, r4, lsl #1
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800c852:	2301      	movs	r3, #1
 800c854:	f105 0a26 	add.w	sl, r5, #38	; 0x26
 800c858:	4a10      	ldr	r2, [pc, #64]	; (800c89c <etharp_output_to_arp_index+0x100>)
 800c85a:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 800c85e:	9303      	str	r3, [sp, #12]
 800c860:	4651      	mov	r1, sl
 800c862:	4628      	mov	r0, r5
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800c864:	f109 0304 	add.w	r3, r9, #4
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800c868:	f109 090c 	add.w	r9, r9, #12
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800c86c:	443b      	add	r3, r7
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800c86e:	44b9      	add	r9, r7
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800c870:	9302      	str	r3, [sp, #8]
 800c872:	4b06      	ldr	r3, [pc, #24]	; (800c88c <etharp_output_to_arp_index+0xf0>)
 800c874:	9301      	str	r3, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800c876:	1d2b      	adds	r3, r5, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800c878:	9300      	str	r3, [sp, #0]
 800c87a:	4653      	mov	r3, sl
 800c87c:	f7ff ff1a 	bl	800c6b4 <etharp_raw>
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800c880:	2800      	cmp	r0, #0
 800c882:	d0d6      	beq.n	800c832 <etharp_output_to_arp_index+0x96>
 800c884:	e7a5      	b.n	800c7d2 <etharp_output_to_arp_index+0x36>
 800c886:	bf00      	nop
 800c888:	240105b4 	.word	0x240105b4
 800c88c:	0801183c 	.word	0x0801183c
 800c890:	08011360 	.word	0x08011360
 800c894:	08011454 	.word	0x08011454
 800c898:	0800ef30 	.word	0x0800ef30
 800c89c:	08011834 	.word	0x08011834

0800c8a0 <etharp_tmr>:
{
 800c8a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c8a4:	4c20      	ldr	r4, [pc, #128]	; (800c928 <etharp_tmr+0x88>)
 800c8a6:	b084      	sub	sp, #16
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800c8a8:	2600      	movs	r6, #0
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800c8aa:	f8df 8084 	ldr.w	r8, [pc, #132]	; 800c930 <etharp_tmr+0x90>
 800c8ae:	4f1f      	ldr	r7, [pc, #124]	; (800c92c <etharp_tmr+0x8c>)
 800c8b0:	f104 05f0 	add.w	r5, r4, #240	; 0xf0
 800c8b4:	e00c      	b.n	800c8d0 <etharp_tmr+0x30>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800c8b6:	2a01      	cmp	r2, #1
 800c8b8:	d101      	bne.n	800c8be <etharp_tmr+0x1e>
 800c8ba:	2b04      	cmp	r3, #4
 800c8bc:	d812      	bhi.n	800c8e4 <etharp_tmr+0x44>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800c8be:	2a03      	cmp	r2, #3
 800c8c0:	d01e      	beq.n	800c900 <etharp_tmr+0x60>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800c8c2:	2a04      	cmp	r2, #4
 800c8c4:	d01f      	beq.n	800c906 <etharp_tmr+0x66>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800c8c6:	2a01      	cmp	r2, #1
 800c8c8:	d020      	beq.n	800c90c <etharp_tmr+0x6c>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c8ca:	3418      	adds	r4, #24
 800c8cc:	42ac      	cmp	r4, r5
 800c8ce:	d014      	beq.n	800c8fa <etharp_tmr+0x5a>
    u8_t state = arp_table[i].state;
 800c8d0:	7c22      	ldrb	r2, [r4, #16]
    if (state != ETHARP_STATE_EMPTY
 800c8d2:	2a00      	cmp	r2, #0
 800c8d4:	d0f9      	beq.n	800c8ca <etharp_tmr+0x2a>
      arp_table[i].ctime++;
 800c8d6:	89e3      	ldrh	r3, [r4, #14]
 800c8d8:	3301      	adds	r3, #1
 800c8da:	b29b      	uxth	r3, r3
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800c8dc:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
      arp_table[i].ctime++;
 800c8e0:	81e3      	strh	r3, [r4, #14]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800c8e2:	d3e8      	bcc.n	800c8b6 <etharp_tmr+0x16>
  if (arp_table[i].q != NULL) {
 800c8e4:	f854 0c04 	ldr.w	r0, [r4, #-4]
 800c8e8:	b118      	cbz	r0, 800c8f2 <etharp_tmr+0x52>
    free_etharp_q(arp_table[i].q);
 800c8ea:	f7fa fffb 	bl	80078e4 <pbuf_free>
    arp_table[i].q = NULL;
 800c8ee:	f844 6c04 	str.w	r6, [r4, #-4]
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800c8f2:	7426      	strb	r6, [r4, #16]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c8f4:	3418      	adds	r4, #24
 800c8f6:	42ac      	cmp	r4, r5
 800c8f8:	d1ea      	bne.n	800c8d0 <etharp_tmr+0x30>
}
 800c8fa:	b004      	add	sp, #16
 800c8fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800c900:	2304      	movs	r3, #4
 800c902:	7423      	strb	r3, [r4, #16]
 800c904:	e7e1      	b.n	800c8ca <etharp_tmr+0x2a>
        arp_table[i].state = ETHARP_STATE_STABLE;
 800c906:	2302      	movs	r3, #2
 800c908:	7423      	strb	r3, [r4, #16]
 800c90a:	e7de      	b.n	800c8ca <etharp_tmr+0x2a>
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800c90c:	6860      	ldr	r0, [r4, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800c90e:	f8cd 8004 	str.w	r8, [sp, #4]
 800c912:	f100 0326 	add.w	r3, r0, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800c916:	1d01      	adds	r1, r0, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800c918:	e9cd 4202 	strd	r4, r2, [sp, #8]
 800c91c:	9100      	str	r1, [sp, #0]
 800c91e:	463a      	mov	r2, r7
 800c920:	4619      	mov	r1, r3
 800c922:	f7ff fec7 	bl	800c6b4 <etharp_raw>
 800c926:	e7d0      	b.n	800c8ca <etharp_tmr+0x2a>
 800c928:	240105b8 	.word	0x240105b8
 800c92c:	08011834 	.word	0x08011834
 800c930:	0801183c 	.word	0x0801183c

0800c934 <etharp_cleanup_netif>:
{
 800c934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c936:	4c0a      	ldr	r4, [pc, #40]	; (800c960 <etharp_cleanup_netif+0x2c>)
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800c938:	2700      	movs	r7, #0
{
 800c93a:	4606      	mov	r6, r0
 800c93c:	f104 05f0 	add.w	r5, r4, #240	; 0xf0
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800c940:	7d23      	ldrb	r3, [r4, #20]
 800c942:	b113      	cbz	r3, 800c94a <etharp_cleanup_netif+0x16>
 800c944:	68a3      	ldr	r3, [r4, #8]
 800c946:	42b3      	cmp	r3, r6
 800c948:	d003      	beq.n	800c952 <etharp_cleanup_netif+0x1e>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c94a:	3418      	adds	r4, #24
 800c94c:	42ac      	cmp	r4, r5
 800c94e:	d1f7      	bne.n	800c940 <etharp_cleanup_netif+0xc>
}
 800c950:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (arp_table[i].q != NULL) {
 800c952:	6820      	ldr	r0, [r4, #0]
 800c954:	b110      	cbz	r0, 800c95c <etharp_cleanup_netif+0x28>
    free_etharp_q(arp_table[i].q);
 800c956:	f7fa ffc5 	bl	80078e4 <pbuf_free>
    arp_table[i].q = NULL;
 800c95a:	6027      	str	r7, [r4, #0]
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800c95c:	7527      	strb	r7, [r4, #20]
}
 800c95e:	e7f4      	b.n	800c94a <etharp_cleanup_netif+0x16>
 800c960:	240105b4 	.word	0x240105b4

0800c964 <etharp_input>:
{
 800c964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c968:	460d      	mov	r5, r1
 800c96a:	b087      	sub	sp, #28
 800c96c:	4604      	mov	r4, r0
  LWIP_ASSERT_CORE_LOCKED();
 800c96e:	f7f7 fae3 	bl	8003f38 <sys_check_core_locking>
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800c972:	2d00      	cmp	r5, #0
 800c974:	d07b      	beq.n	800ca6e <etharp_input+0x10a>
  hdr = (struct etharp_hdr *)p->payload;
 800c976:	6866      	ldr	r6, [r4, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800c978:	8833      	ldrh	r3, [r6, #0]
 800c97a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c97e:	d102      	bne.n	800c986 <etharp_input+0x22>
 800c980:	7933      	ldrb	r3, [r6, #4]
 800c982:	2b06      	cmp	r3, #6
 800c984:	d005      	beq.n	800c992 <etharp_input+0x2e>
  pbuf_free(p);
 800c986:	4620      	mov	r0, r4
}
 800c988:	b007      	add	sp, #28
 800c98a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 800c98e:	f7fa bfa9 	b.w	80078e4 <pbuf_free>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800c992:	7973      	ldrb	r3, [r6, #5]
 800c994:	2b04      	cmp	r3, #4
 800c996:	d1f6      	bne.n	800c986 <etharp_input+0x22>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800c998:	8873      	ldrh	r3, [r6, #2]
 800c99a:	2b08      	cmp	r3, #8
 800c99c:	d1f3      	bne.n	800c986 <etharp_input+0x22>
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800c99e:	f8d6 a00e 	ldr.w	sl, [r6, #14]
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800c9a2:	f106 0808 	add.w	r8, r6, #8
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800c9a6:	686f      	ldr	r7, [r5, #4]
 800c9a8:	69b3      	ldr	r3, [r6, #24]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800c9aa:	f8cd a014 	str.w	sl, [sp, #20]
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800c9ae:	2f00      	cmp	r7, #0
 800c9b0:	d167      	bne.n	800ca82 <etharp_input+0x11e>
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800c9b2:	f04f 0b02 	mov.w	fp, #2
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800c9b6:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 800c9ba:	2b06      	cmp	r3, #6
 800c9bc:	d165      	bne.n	800ca8a <etharp_input+0x126>
  if (ip4_addr_isany(ipaddr) ||
 800c9be:	f1ba 0f00 	cmp.w	sl, #0
 800c9c2:	d03e      	beq.n	800ca42 <etharp_input+0xde>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800c9c4:	4629      	mov	r1, r5
 800c9c6:	4650      	mov	r0, sl
 800c9c8:	f000 fcae 	bl	800d328 <ip4_addr_isbroadcast_u32>
  if (ip4_addr_isany(ipaddr) ||
 800c9cc:	4681      	mov	r9, r0
 800c9ce:	bbc0      	cbnz	r0, 800ca42 <etharp_input+0xde>
      ip4_addr_ismulticast(ipaddr)) {
 800c9d0:	f00a 0af0 	and.w	sl, sl, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800c9d4:	f1ba 0fe0 	cmp.w	sl, #224	; 0xe0
 800c9d8:	d033      	beq.n	800ca42 <etharp_input+0xde>
  i = etharp_find_entry(ipaddr, flags, netif);
 800c9da:	4659      	mov	r1, fp
 800c9dc:	462a      	mov	r2, r5
 800c9de:	a805      	add	r0, sp, #20
 800c9e0:	f7ff fdb0 	bl	800c544 <etharp_find_entry>
  if (i < 0) {
 800c9e4:	1e03      	subs	r3, r0, #0
 800c9e6:	db2c      	blt.n	800ca42 <etharp_input+0xde>
    arp_table[i].state = ETHARP_STATE_STABLE;
 800c9e8:	492d      	ldr	r1, [pc, #180]	; (800caa0 <etharp_input+0x13c>)
 800c9ea:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800c9ee:	2002      	movs	r0, #2
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800c9f0:	f04f 0e18 	mov.w	lr, #24
    arp_table[i].state = ETHARP_STATE_STABLE;
 800c9f4:	eb01 0cc2 	add.w	ip, r1, r2, lsl #3
 800c9f8:	00d2      	lsls	r2, r2, #3
 800c9fa:	f88c 0014 	strb.w	r0, [ip, #20]
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800c9fe:	200c      	movs	r0, #12
  arp_table[i].netif = netif;
 800ca00:	f8cc 5008 	str.w	r5, [ip, #8]
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800ca04:	fb13 030e 	smlabb	r3, r3, lr, r0
 800ca08:	f8d8 0000 	ldr.w	r0, [r8]
 800ca0c:	50c8      	str	r0, [r1, r3]
 800ca0e:	440b      	add	r3, r1
 800ca10:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 800ca14:	8098      	strh	r0, [r3, #4]
  if (arp_table[i].q != NULL) {
 800ca16:	f851 a002 	ldr.w	sl, [r1, r2]
  arp_table[i].ctime = 0;
 800ca1a:	f8ac 9012 	strh.w	r9, [ip, #18]
  if (arp_table[i].q != NULL) {
 800ca1e:	f1ba 0f00 	cmp.w	sl, #0
 800ca22:	d00e      	beq.n	800ca42 <etharp_input+0xde>
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800ca24:	f44f 6300 	mov.w	r3, #2048	; 0x800
    arp_table[i].q = NULL;
 800ca28:	f841 9002 	str.w	r9, [r1, r2]
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800ca2c:	4628      	mov	r0, r5
 800ca2e:	f105 0226 	add.w	r2, r5, #38	; 0x26
 800ca32:	9300      	str	r3, [sp, #0]
 800ca34:	4651      	mov	r1, sl
 800ca36:	4643      	mov	r3, r8
 800ca38:	f001 f940 	bl	800dcbc <ethernet_output>
    pbuf_free(p);
 800ca3c:	4650      	mov	r0, sl
 800ca3e:	f7fa ff51 	bl	80078e4 <pbuf_free>
  switch (hdr->opcode) {
 800ca42:	88f3      	ldrh	r3, [r6, #6]
      if (for_us) {
 800ca44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ca48:	d19d      	bne.n	800c986 <etharp_input+0x22>
 800ca4a:	2f00      	cmp	r7, #0
 800ca4c:	d09b      	beq.n	800c986 <etharp_input+0x22>
        etharp_raw(netif,
 800ca4e:	2102      	movs	r1, #2
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800ca50:	f105 0326 	add.w	r3, r5, #38	; 0x26
        etharp_raw(netif,
 800ca54:	4642      	mov	r2, r8
 800ca56:	4628      	mov	r0, r5
 800ca58:	9103      	str	r1, [sp, #12]
 800ca5a:	a905      	add	r1, sp, #20
 800ca5c:	f8cd 8004 	str.w	r8, [sp, #4]
 800ca60:	9102      	str	r1, [sp, #8]
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800ca62:	1d29      	adds	r1, r5, #4
        etharp_raw(netif,
 800ca64:	9100      	str	r1, [sp, #0]
 800ca66:	4619      	mov	r1, r3
 800ca68:	f7ff fe24 	bl	800c6b4 <etharp_raw>
 800ca6c:	e78b      	b.n	800c986 <etharp_input+0x22>
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800ca6e:	4b0d      	ldr	r3, [pc, #52]	; (800caa4 <etharp_input+0x140>)
 800ca70:	f240 228a 	movw	r2, #650	; 0x28a
 800ca74:	490c      	ldr	r1, [pc, #48]	; (800caa8 <etharp_input+0x144>)
 800ca76:	480d      	ldr	r0, [pc, #52]	; (800caac <etharp_input+0x148>)
}
 800ca78:	b007      	add	sp, #28
 800ca7a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800ca7e:	f001 bad1 	b.w	800e024 <iprintf>
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800ca82:	429f      	cmp	r7, r3
 800ca84:	d009      	beq.n	800ca9a <etharp_input+0x136>
 800ca86:	2700      	movs	r7, #0
 800ca88:	e793      	b.n	800c9b2 <etharp_input+0x4e>
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800ca8a:	4b06      	ldr	r3, [pc, #24]	; (800caa4 <etharp_input+0x140>)
 800ca8c:	f240 12a9 	movw	r2, #425	; 0x1a9
 800ca90:	4907      	ldr	r1, [pc, #28]	; (800cab0 <etharp_input+0x14c>)
 800ca92:	4806      	ldr	r0, [pc, #24]	; (800caac <etharp_input+0x148>)
 800ca94:	f001 fac6 	bl	800e024 <iprintf>
 800ca98:	e791      	b.n	800c9be <etharp_input+0x5a>
 800ca9a:	2701      	movs	r7, #1
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800ca9c:	46bb      	mov	fp, r7
 800ca9e:	e78a      	b.n	800c9b6 <etharp_input+0x52>
 800caa0:	240105b4 	.word	0x240105b4
 800caa4:	08011360 	.word	0x08011360
 800caa8:	0800f720 	.word	0x0800f720
 800caac:	0800ef30 	.word	0x0800ef30
 800cab0:	080114a4 	.word	0x080114a4

0800cab4 <etharp_query>:
{
 800cab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cab8:	460e      	mov	r6, r1
 800caba:	b085      	sub	sp, #20
 800cabc:	4605      	mov	r5, r0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800cabe:	4601      	mov	r1, r0
 800cac0:	6830      	ldr	r0, [r6, #0]
{
 800cac2:	4617      	mov	r7, r2
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800cac4:	f000 fc30 	bl	800d328 <ip4_addr_isbroadcast_u32>
 800cac8:	2800      	cmp	r0, #0
 800caca:	f040 8099 	bne.w	800cc00 <etharp_query+0x14c>
      ip4_addr_ismulticast(ipaddr) ||
 800cace:	6833      	ldr	r3, [r6, #0]
 800cad0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
      ip4_addr_isany(ipaddr)) {
 800cad4:	2ae0      	cmp	r2, #224	; 0xe0
 800cad6:	f000 8093 	beq.w	800cc00 <etharp_query+0x14c>
 800cada:	2b00      	cmp	r3, #0
 800cadc:	f000 8090 	beq.w	800cc00 <etharp_query+0x14c>
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800cae0:	462a      	mov	r2, r5
 800cae2:	2101      	movs	r1, #1
 800cae4:	4630      	mov	r0, r6
 800cae6:	f7ff fd2d 	bl	800c544 <etharp_find_entry>
  if (i_err < 0) {
 800caea:	f1b0 0800 	subs.w	r8, r0, #0
 800caee:	db4c      	blt.n	800cb8a <etharp_query+0xd6>
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800caf0:	f1b8 0f7e 	cmp.w	r8, #126	; 0x7e
 800caf4:	dc41      	bgt.n	800cb7a <etharp_query+0xc6>
  i = (netif_addr_idx_t)i_err;
 800caf6:	fa5f f888 	uxtb.w	r8, r8
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800cafa:	f8df a144 	ldr.w	sl, [pc, #324]	; 800cc40 <etharp_query+0x18c>
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800cafe:	f105 0426 	add.w	r4, r5, #38	; 0x26
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800cb02:	eb08 0948 	add.w	r9, r8, r8, lsl #1
 800cb06:	ea4f 0b48 	mov.w	fp, r8, lsl #1
 800cb0a:	eb0a 09c9 	add.w	r9, sl, r9, lsl #3
 800cb0e:	f899 3014 	ldrb.w	r3, [r9, #20]
 800cb12:	b14b      	cbz	r3, 800cb28 <etharp_query+0x74>
  if (is_new_entry || (q == NULL)) {
 800cb14:	2f00      	cmp	r7, #0
 800cb16:	d079      	beq.n	800cc0c <etharp_query+0x158>
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800cb18:	2b01      	cmp	r3, #1
  err_t result = ERR_MEM;
 800cb1a:	f04f 30ff 	mov.w	r0, #4294967295
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800cb1e:	d81a      	bhi.n	800cb56 <etharp_query+0xa2>
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800cb20:	d038      	beq.n	800cb94 <etharp_query+0xe0>
}
 800cb22:	b005      	add	sp, #20
 800cb24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    arp_table[i].state = ETHARP_STATE_PENDING;
 800cb28:	2301      	movs	r3, #1
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800cb2a:	9602      	str	r6, [sp, #8]
    arp_table[i].netif = netif;
 800cb2c:	f8c9 5008 	str.w	r5, [r9, #8]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800cb30:	4621      	mov	r1, r4
 800cb32:	9303      	str	r3, [sp, #12]
 800cb34:	4628      	mov	r0, r5
    arp_table[i].state = ETHARP_STATE_PENDING;
 800cb36:	f889 3014 	strb.w	r3, [r9, #20]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800cb3a:	4b3b      	ldr	r3, [pc, #236]	; (800cc28 <etharp_query+0x174>)
 800cb3c:	4a3b      	ldr	r2, [pc, #236]	; (800cc2c <etharp_query+0x178>)
 800cb3e:	9301      	str	r3, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800cb40:	1d2b      	adds	r3, r5, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800cb42:	9300      	str	r3, [sp, #0]
 800cb44:	4623      	mov	r3, r4
 800cb46:	f7ff fdb5 	bl	800c6b4 <etharp_raw>
    if (q == NULL) {
 800cb4a:	2f00      	cmp	r7, #0
 800cb4c:	d0e9      	beq.n	800cb22 <etharp_query+0x6e>
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800cb4e:	f899 3014 	ldrb.w	r3, [r9, #20]
 800cb52:	2b01      	cmp	r3, #1
 800cb54:	d9e4      	bls.n	800cb20 <etharp_query+0x6c>
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800cb56:	2318      	movs	r3, #24
 800cb58:	4622      	mov	r2, r4
 800cb5a:	f44f 6400 	mov.w	r4, #2048	; 0x800
 800cb5e:	4639      	mov	r1, r7
 800cb60:	fb03 a308 	mla	r3, r3, r8, sl
 800cb64:	4628      	mov	r0, r5
 800cb66:	9400      	str	r4, [sp, #0]
    ETHARP_SET_ADDRHINT(netif, i);
 800cb68:	4c31      	ldr	r4, [pc, #196]	; (800cc30 <etharp_query+0x17c>)
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800cb6a:	330c      	adds	r3, #12
    ETHARP_SET_ADDRHINT(netif, i);
 800cb6c:	f884 8000 	strb.w	r8, [r4]
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800cb70:	f001 f8a4 	bl	800dcbc <ethernet_output>
}
 800cb74:	b005      	add	sp, #20
 800cb76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800cb7a:	4b2e      	ldr	r3, [pc, #184]	; (800cc34 <etharp_query+0x180>)
 800cb7c:	f240 32c1 	movw	r2, #961	; 0x3c1
 800cb80:	492d      	ldr	r1, [pc, #180]	; (800cc38 <etharp_query+0x184>)
 800cb82:	482e      	ldr	r0, [pc, #184]	; (800cc3c <etharp_query+0x188>)
 800cb84:	f001 fa4e 	bl	800e024 <iprintf>
 800cb88:	e7b5      	b.n	800caf6 <etharp_query+0x42>
    return (err_t)i_err;
 800cb8a:	fa4f f088 	sxtb.w	r0, r8
}
 800cb8e:	b005      	add	sp, #20
 800cb90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb94:	463c      	mov	r4, r7
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800cb96:	4d27      	ldr	r5, [pc, #156]	; (800cc34 <etharp_query+0x180>)
 800cb98:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 800cc44 <etharp_query+0x190>
 800cb9c:	4e27      	ldr	r6, [pc, #156]	; (800cc3c <etharp_query+0x188>)
 800cb9e:	e004      	b.n	800cbaa <etharp_query+0xf6>
      if (PBUF_NEEDS_COPY(p)) {
 800cba0:	7b23      	ldrb	r3, [r4, #12]
 800cba2:	065a      	lsls	r2, r3, #25
 800cba4:	d412      	bmi.n	800cbcc <etharp_query+0x118>
      p = p->next;
 800cba6:	6824      	ldr	r4, [r4, #0]
    while (p) {
 800cba8:	b334      	cbz	r4, 800cbf8 <etharp_query+0x144>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800cbaa:	8962      	ldrh	r2, [r4, #10]
 800cbac:	8923      	ldrh	r3, [r4, #8]
 800cbae:	429a      	cmp	r2, r3
 800cbb0:	d1f6      	bne.n	800cba0 <etharp_query+0xec>
 800cbb2:	6822      	ldr	r2, [r4, #0]
 800cbb4:	462b      	mov	r3, r5
 800cbb6:	b132      	cbz	r2, 800cbc6 <etharp_query+0x112>
 800cbb8:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800cbbc:	4649      	mov	r1, r9
 800cbbe:	4630      	mov	r0, r6
 800cbc0:	f001 fa30 	bl	800e024 <iprintf>
 800cbc4:	e7ec      	b.n	800cba0 <etharp_query+0xec>
      if (PBUF_NEEDS_COPY(p)) {
 800cbc6:	7b23      	ldrb	r3, [r4, #12]
 800cbc8:	065b      	lsls	r3, r3, #25
 800cbca:	d515      	bpl.n	800cbf8 <etharp_query+0x144>
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800cbcc:	463a      	mov	r2, r7
 800cbce:	f44f 7120 	mov.w	r1, #640	; 0x280
 800cbd2:	200e      	movs	r0, #14
 800cbd4:	f7fb f8ce 	bl	8007d74 <pbuf_clone>
    if (p != NULL) {
 800cbd8:	4607      	mov	r7, r0
 800cbda:	b1a0      	cbz	r0, 800cc06 <etharp_query+0x152>
      if (arp_table[i].q != NULL) {
 800cbdc:	eb0b 0308 	add.w	r3, fp, r8
 800cbe0:	f85a 0033 	ldr.w	r0, [sl, r3, lsl #3]
 800cbe4:	b108      	cbz	r0, 800cbea <etharp_query+0x136>
        pbuf_free(arp_table[i].q);
 800cbe6:	f7fa fe7d 	bl	80078e4 <pbuf_free>
      arp_table[i].q = p;
 800cbea:	44d8      	add	r8, fp
      result = ERR_OK;
 800cbec:	2000      	movs	r0, #0
      arp_table[i].q = p;
 800cbee:	f84a 7038 	str.w	r7, [sl, r8, lsl #3]
}
 800cbf2:	b005      	add	sp, #20
 800cbf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      pbuf_ref(p);
 800cbf8:	4638      	mov	r0, r7
 800cbfa:	f7fa fff5 	bl	8007be8 <pbuf_ref>
    if (p != NULL) {
 800cbfe:	e7ed      	b.n	800cbdc <etharp_query+0x128>
    return ERR_ARG;
 800cc00:	f06f 000f 	mvn.w	r0, #15
 800cc04:	e78d      	b.n	800cb22 <etharp_query+0x6e>
      result = ERR_MEM;
 800cc06:	f04f 30ff 	mov.w	r0, #4294967295
 800cc0a:	e78a      	b.n	800cb22 <etharp_query+0x6e>
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800cc0c:	1d2a      	adds	r2, r5, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800cc0e:	2301      	movs	r3, #1
 800cc10:	4f05      	ldr	r7, [pc, #20]	; (800cc28 <etharp_query+0x174>)
 800cc12:	4621      	mov	r1, r4
 800cc14:	4628      	mov	r0, r5
 800cc16:	e9cd 6302 	strd	r6, r3, [sp, #8]
 800cc1a:	e9cd 2700 	strd	r2, r7, [sp]
 800cc1e:	4623      	mov	r3, r4
 800cc20:	4a02      	ldr	r2, [pc, #8]	; (800cc2c <etharp_query+0x178>)
 800cc22:	f7ff fd47 	bl	800c6b4 <etharp_raw>
    if (q == NULL) {
 800cc26:	e77c      	b.n	800cb22 <etharp_query+0x6e>
 800cc28:	0801183c 	.word	0x0801183c
 800cc2c:	08011834 	.word	0x08011834
 800cc30:	240106a4 	.word	0x240106a4
 800cc34:	08011360 	.word	0x08011360
 800cc38:	080114c8 	.word	0x080114c8
 800cc3c:	0800ef30 	.word	0x0800ef30
 800cc40:	240105b4 	.word	0x240105b4
 800cc44:	080114d8 	.word	0x080114d8

0800cc48 <etharp_output>:
{
 800cc48:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cc4a:	4605      	mov	r5, r0
 800cc4c:	b085      	sub	sp, #20
 800cc4e:	460f      	mov	r7, r1
 800cc50:	4616      	mov	r6, r2
  LWIP_ASSERT_CORE_LOCKED();
 800cc52:	f7f7 f971 	bl	8003f38 <sys_check_core_locking>
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800cc56:	2d00      	cmp	r5, #0
 800cc58:	f000 8081 	beq.w	800cd5e <etharp_output+0x116>
  LWIP_ASSERT("q != NULL", q != NULL);
 800cc5c:	2f00      	cmp	r7, #0
 800cc5e:	d06d      	beq.n	800cd3c <etharp_output+0xf4>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800cc60:	2e00      	cmp	r6, #0
 800cc62:	d074      	beq.n	800cd4e <etharp_output+0x106>
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800cc64:	4629      	mov	r1, r5
 800cc66:	6830      	ldr	r0, [r6, #0]
 800cc68:	f000 fb5e 	bl	800d328 <ip4_addr_isbroadcast_u32>
 800cc6c:	2800      	cmp	r0, #0
 800cc6e:	d163      	bne.n	800cd38 <etharp_output+0xf0>
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800cc70:	6833      	ldr	r3, [r6, #0]
 800cc72:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800cc76:	2ae0      	cmp	r2, #224	; 0xe0
 800cc78:	d039      	beq.n	800ccee <etharp_output+0xa6>
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800cc7a:	686a      	ldr	r2, [r5, #4]
 800cc7c:	68a9      	ldr	r1, [r5, #8]
 800cc7e:	405a      	eors	r2, r3
 800cc80:	420a      	tst	r2, r1
 800cc82:	d009      	beq.n	800cc98 <etharp_output+0x50>
        !ip4_addr_islinklocal(ipaddr)) {
 800cc84:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800cc86:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800cc8a:	4293      	cmp	r3, r2
 800cc8c:	d004      	beq.n	800cc98 <etharp_output+0x50>
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800cc8e:	68eb      	ldr	r3, [r5, #12]
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d076      	beq.n	800cd82 <etharp_output+0x13a>
            dst_addr = netif_ip4_gw(netif);
 800cc94:	f105 060c 	add.w	r6, r5, #12
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800cc98:	f8df c108 	ldr.w	ip, [pc, #264]	; 800cda4 <etharp_output+0x15c>
 800cc9c:	4b3a      	ldr	r3, [pc, #232]	; (800cd88 <etharp_output+0x140>)
 800cc9e:	f89c 2000 	ldrb.w	r2, [ip]
 800cca2:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 800cca6:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800ccaa:	7d19      	ldrb	r1, [r3, #20]
 800ccac:	2901      	cmp	r1, #1
 800ccae:	d902      	bls.n	800ccb6 <etharp_output+0x6e>
 800ccb0:	6899      	ldr	r1, [r3, #8]
 800ccb2:	42a9      	cmp	r1, r5
 800ccb4:	d05e      	beq.n	800cd74 <etharp_output+0x12c>
 800ccb6:	4c34      	ldr	r4, [pc, #208]	; (800cd88 <etharp_output+0x140>)
{
 800ccb8:	2300      	movs	r3, #0
 800ccba:	e003      	b.n	800ccc4 <etharp_output+0x7c>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800ccbc:	2b0a      	cmp	r3, #10
 800ccbe:	f104 0418 	add.w	r4, r4, #24
 800ccc2:	d031      	beq.n	800cd28 <etharp_output+0xe0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800ccc4:	7d20      	ldrb	r0, [r4, #20]
 800ccc6:	b2da      	uxtb	r2, r3
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800ccc8:	3301      	adds	r3, #1
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800ccca:	2801      	cmp	r0, #1
 800cccc:	d9f6      	bls.n	800ccbc <etharp_output+0x74>
 800ccce:	68a1      	ldr	r1, [r4, #8]
 800ccd0:	42a9      	cmp	r1, r5
 800ccd2:	d1f3      	bne.n	800ccbc <etharp_output+0x74>
          (arp_table[i].netif == netif) &&
 800ccd4:	6830      	ldr	r0, [r6, #0]
 800ccd6:	6861      	ldr	r1, [r4, #4]
 800ccd8:	4288      	cmp	r0, r1
 800ccda:	d1ef      	bne.n	800ccbc <etharp_output+0x74>
        return etharp_output_to_arp_index(netif, q, i);
 800ccdc:	4639      	mov	r1, r7
 800ccde:	4628      	mov	r0, r5
        ETHARP_SET_ADDRHINT(netif, i);
 800cce0:	f88c 2000 	strb.w	r2, [ip]
}
 800cce4:	b005      	add	sp, #20
 800cce6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        return etharp_output_to_arp_index(netif, q, i);
 800ccea:	f7ff bd57 	b.w	800c79c <etharp_output_to_arp_index>
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800ccee:	7873      	ldrb	r3, [r6, #1]
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800ccf0:	2201      	movs	r2, #1
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800ccf2:	215e      	movs	r1, #94	; 0x5e
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800ccf4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800ccf8:	f8ad 2008 	strh.w	r2, [sp, #8]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800ccfc:	78f2      	ldrb	r2, [r6, #3]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800ccfe:	f88d 300b 	strb.w	r3, [sp, #11]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800cd02:	78b3      	ldrb	r3, [r6, #2]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800cd04:	f88d 100a 	strb.w	r1, [sp, #10]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800cd08:	f88d 300c 	strb.w	r3, [sp, #12]
    dest = &mcastaddr;
 800cd0c:	ab02      	add	r3, sp, #8
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800cd0e:	f88d 200d 	strb.w	r2, [sp, #13]
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800cd12:	f44f 6400 	mov.w	r4, #2048	; 0x800
 800cd16:	f105 0226 	add.w	r2, r5, #38	; 0x26
 800cd1a:	4639      	mov	r1, r7
 800cd1c:	4628      	mov	r0, r5
 800cd1e:	9400      	str	r4, [sp, #0]
 800cd20:	f000 ffcc 	bl	800dcbc <ethernet_output>
}
 800cd24:	b005      	add	sp, #20
 800cd26:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return etharp_query(netif, dst_addr, q);
 800cd28:	463a      	mov	r2, r7
 800cd2a:	4631      	mov	r1, r6
 800cd2c:	4628      	mov	r0, r5
}
 800cd2e:	b005      	add	sp, #20
 800cd30:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    return etharp_query(netif, dst_addr, q);
 800cd34:	f7ff bebe 	b.w	800cab4 <etharp_query>
    dest = (const struct eth_addr *)&ethbroadcast;
 800cd38:	4b14      	ldr	r3, [pc, #80]	; (800cd8c <etharp_output+0x144>)
 800cd3a:	e7ea      	b.n	800cd12 <etharp_output+0xca>
  LWIP_ASSERT("q != NULL", q != NULL);
 800cd3c:	4b14      	ldr	r3, [pc, #80]	; (800cd90 <etharp_output+0x148>)
 800cd3e:	f240 321f 	movw	r2, #799	; 0x31f
 800cd42:	4914      	ldr	r1, [pc, #80]	; (800cd94 <etharp_output+0x14c>)
 800cd44:	4814      	ldr	r0, [pc, #80]	; (800cd98 <etharp_output+0x150>)
 800cd46:	f001 f96d 	bl	800e024 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800cd4a:	2e00      	cmp	r6, #0
 800cd4c:	d18a      	bne.n	800cc64 <etharp_output+0x1c>
 800cd4e:	4b10      	ldr	r3, [pc, #64]	; (800cd90 <etharp_output+0x148>)
 800cd50:	f44f 7248 	mov.w	r2, #800	; 0x320
 800cd54:	4911      	ldr	r1, [pc, #68]	; (800cd9c <etharp_output+0x154>)
 800cd56:	4810      	ldr	r0, [pc, #64]	; (800cd98 <etharp_output+0x150>)
 800cd58:	f001 f964 	bl	800e024 <iprintf>
 800cd5c:	e782      	b.n	800cc64 <etharp_output+0x1c>
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800cd5e:	4b0c      	ldr	r3, [pc, #48]	; (800cd90 <etharp_output+0x148>)
 800cd60:	f240 321e 	movw	r2, #798	; 0x31e
 800cd64:	490e      	ldr	r1, [pc, #56]	; (800cda0 <etharp_output+0x158>)
 800cd66:	480c      	ldr	r0, [pc, #48]	; (800cd98 <etharp_output+0x150>)
 800cd68:	f001 f95c 	bl	800e024 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800cd6c:	2f00      	cmp	r7, #0
 800cd6e:	f47f af77 	bne.w	800cc60 <etharp_output+0x18>
 800cd72:	e7e3      	b.n	800cd3c <etharp_output+0xf4>
            (arp_table[etharp_cached_entry].netif == netif) &&
 800cd74:	685b      	ldr	r3, [r3, #4]
 800cd76:	6831      	ldr	r1, [r6, #0]
 800cd78:	4299      	cmp	r1, r3
 800cd7a:	d19c      	bne.n	800ccb6 <etharp_output+0x6e>
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800cd7c:	4639      	mov	r1, r7
 800cd7e:	4628      	mov	r0, r5
 800cd80:	e7b0      	b.n	800cce4 <etharp_output+0x9c>
            return ERR_RTE;
 800cd82:	f06f 0003 	mvn.w	r0, #3
 800cd86:	e7cd      	b.n	800cd24 <etharp_output+0xdc>
 800cd88:	240105b4 	.word	0x240105b4
 800cd8c:	08011834 	.word	0x08011834
 800cd90:	08011360 	.word	0x08011360
 800cd94:	080114f4 	.word	0x080114f4
 800cd98:	0800ef30 	.word	0x0800ef30
 800cd9c:	08011484 	.word	0x08011484
 800cda0:	0800f720 	.word	0x0800f720
 800cda4:	240106a4 	.word	0x240106a4

0800cda8 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800cda8:	b510      	push	{r4, lr}
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800cdaa:	2301      	movs	r3, #1
{
 800cdac:	b084      	sub	sp, #16
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800cdae:	4c07      	ldr	r4, [pc, #28]	; (800cdcc <etharp_request+0x24>)
 800cdb0:	4a07      	ldr	r2, [pc, #28]	; (800cdd0 <etharp_request+0x28>)
 800cdb2:	9401      	str	r4, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800cdb4:	1d04      	adds	r4, r0, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800cdb6:	e9cd 1302 	strd	r1, r3, [sp, #8]
 800cdba:	f100 0326 	add.w	r3, r0, #38	; 0x26
 800cdbe:	9400      	str	r4, [sp, #0]
 800cdc0:	4619      	mov	r1, r3
 800cdc2:	f7ff fc77 	bl	800c6b4 <etharp_raw>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
}
 800cdc6:	b004      	add	sp, #16
 800cdc8:	bd10      	pop	{r4, pc}
 800cdca:	bf00      	nop
 800cdcc:	0801183c 	.word	0x0801183c
 800cdd0:	08011834 	.word	0x08011834

0800cdd4 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800cdd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cdd6:	460e      	mov	r6, r1
 800cdd8:	b087      	sub	sp, #28
 800cdda:	4617      	mov	r7, r2
 800cddc:	4604      	mov	r4, r0

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800cdde:	2124      	movs	r1, #36	; 0x24
 800cde0:	f44f 7220 	mov.w	r2, #640	; 0x280
 800cde4:	2022      	movs	r0, #34	; 0x22
 800cde6:	f7fa fded 	bl	80079c4 <pbuf_alloc>
                 PBUF_RAM);
  if (q == NULL) {
 800cdea:	b3a8      	cbz	r0, 800ce58 <icmp_send_response+0x84>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800cdec:	8943      	ldrh	r3, [r0, #10]
 800cdee:	4605      	mov	r5, r0
 800cdf0:	2b23      	cmp	r3, #35	; 0x23
 800cdf2:	d933      	bls.n	800ce5c <icmp_send_response+0x88>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800cdf4:	6863      	ldr	r3, [r4, #4]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800cdf6:	686c      	ldr	r4, [r5, #4]
  icmphdr->type = type;
 800cdf8:	7026      	strb	r6, [r4, #0]
  icmphdr->code = code;
  icmphdr->id = 0;
 800cdfa:	2600      	movs	r6, #0
  icmphdr->code = code;
 800cdfc:	7067      	strb	r7, [r4, #1]
  icmphdr->id = 0;
 800cdfe:	7126      	strb	r6, [r4, #4]
 800ce00:	7166      	strb	r6, [r4, #5]
  icmphdr->seqno = 0;
 800ce02:	71a6      	strb	r6, [r4, #6]
 800ce04:	71e6      	strb	r6, [r4, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800ce06:	6818      	ldr	r0, [r3, #0]
 800ce08:	6859      	ldr	r1, [r3, #4]
 800ce0a:	689a      	ldr	r2, [r3, #8]
 800ce0c:	68df      	ldr	r7, [r3, #12]
 800ce0e:	60a0      	str	r0, [r4, #8]
 800ce10:	6167      	str	r7, [r4, #20]
 800ce12:	60e1      	str	r1, [r4, #12]
 800ce14:	6122      	str	r2, [r4, #16]
 800ce16:	6918      	ldr	r0, [r3, #16]
 800ce18:	6959      	ldr	r1, [r3, #20]
 800ce1a:	699a      	ldr	r2, [r3, #24]
 800ce1c:	61a0      	str	r0, [r4, #24]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800ce1e:	a805      	add	r0, sp, #20
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800ce20:	61e1      	str	r1, [r4, #28]
 800ce22:	6222      	str	r2, [r4, #32]
  ip4_addr_copy(iphdr_src, iphdr->src);
 800ce24:	68db      	ldr	r3, [r3, #12]
 800ce26:	9305      	str	r3, [sp, #20]
  netif = ip4_route(&iphdr_src);
 800ce28:	f000 f8d6 	bl	800cfd8 <ip4_route>
#endif
  if (netif != NULL) {
 800ce2c:	4607      	mov	r7, r0
 800ce2e:	b180      	cbz	r0, 800ce52 <icmp_send_response+0x7e>
    /* calculate checksum */
    icmphdr->chksum = 0;
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 800ce30:	8969      	ldrh	r1, [r5, #10]
 800ce32:	4620      	mov	r0, r4
    icmphdr->chksum = 0;
 800ce34:	70a6      	strb	r6, [r4, #2]
 800ce36:	70e6      	strb	r6, [r4, #3]
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 800ce38:	f7f9 fdf2 	bl	8006a20 <inet_chksum>
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800ce3c:	2301      	movs	r3, #1
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 800ce3e:	8060      	strh	r0, [r4, #2]
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800ce40:	aa05      	add	r2, sp, #20
 800ce42:	4631      	mov	r1, r6
 800ce44:	4628      	mov	r0, r5
 800ce46:	9600      	str	r6, [sp, #0]
 800ce48:	e9cd 3701 	strd	r3, r7, [sp, #4]
 800ce4c:	23ff      	movs	r3, #255	; 0xff
 800ce4e:	f000 fa59 	bl	800d304 <ip4_output_if>
  }
  pbuf_free(q);
 800ce52:	4628      	mov	r0, r5
 800ce54:	f7fa fd46 	bl	80078e4 <pbuf_free>
}
 800ce58:	b007      	add	sp, #28
 800ce5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800ce5c:	4b03      	ldr	r3, [pc, #12]	; (800ce6c <icmp_send_response+0x98>)
 800ce5e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800ce62:	4903      	ldr	r1, [pc, #12]	; (800ce70 <icmp_send_response+0x9c>)
 800ce64:	4803      	ldr	r0, [pc, #12]	; (800ce74 <icmp_send_response+0xa0>)
 800ce66:	f001 f8dd 	bl	800e024 <iprintf>
 800ce6a:	e7c3      	b.n	800cdf4 <icmp_send_response+0x20>
 800ce6c:	08011500 	.word	0x08011500
 800ce70:	08011538 	.word	0x08011538
 800ce74:	0800ef30 	.word	0x0800ef30

0800ce78 <icmp_input>:
{
 800ce78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  iphdr_in = ip4_current_header();
 800ce7c:	4f4c      	ldr	r7, [pc, #304]	; (800cfb0 <icmp_input+0x138>)
{
 800ce7e:	b087      	sub	sp, #28
 800ce80:	4605      	mov	r5, r0
  iphdr_in = ip4_current_header();
 800ce82:	f8d7 8008 	ldr.w	r8, [r7, #8]
  hlen = IPH_HL_BYTES(iphdr_in);
 800ce86:	f898 4000 	ldrb.w	r4, [r8]
 800ce8a:	f004 040f 	and.w	r4, r4, #15
 800ce8e:	00a4      	lsls	r4, r4, #2
  if (hlen < IP_HLEN) {
 800ce90:	2c13      	cmp	r4, #19
 800ce92:	d913      	bls.n	800cebc <icmp_input+0x44>
  if (p->len < sizeof(u16_t) * 2) {
 800ce94:	8943      	ldrh	r3, [r0, #10]
 800ce96:	2b03      	cmp	r3, #3
 800ce98:	d910      	bls.n	800cebc <icmp_input+0x44>
  type = *((u8_t *)p->payload);
 800ce9a:	6843      	ldr	r3, [r0, #4]
  switch (type) {
 800ce9c:	781b      	ldrb	r3, [r3, #0]
 800ce9e:	2b08      	cmp	r3, #8
 800cea0:	d10c      	bne.n	800cebc <icmp_input+0x44>
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800cea2:	6978      	ldr	r0, [r7, #20]
 800cea4:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 800cea8:	2be0      	cmp	r3, #224	; 0xe0
 800ceaa:	d007      	beq.n	800cebc <icmp_input+0x44>
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800ceac:	460e      	mov	r6, r1
 800ceae:	6839      	ldr	r1, [r7, #0]
 800ceb0:	f000 fa3a 	bl	800d328 <ip4_addr_isbroadcast_u32>
 800ceb4:	b910      	cbnz	r0, 800cebc <icmp_input+0x44>
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800ceb6:	892b      	ldrh	r3, [r5, #8]
 800ceb8:	2b07      	cmp	r3, #7
 800ceba:	d805      	bhi.n	800cec8 <icmp_input+0x50>
  pbuf_free(p);
 800cebc:	4628      	mov	r0, r5
}
 800cebe:	b007      	add	sp, #28
 800cec0:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  pbuf_free(p);
 800cec4:	f7fa bd0e 	b.w	80078e4 <pbuf_free>
        if (inet_chksum_pbuf(p) != 0) {
 800cec8:	4628      	mov	r0, r5
 800ceca:	f7f9 fdaf 	bl	8006a2c <inet_chksum_pbuf>
 800cece:	2800      	cmp	r0, #0
 800ced0:	d1f4      	bne.n	800cebc <icmp_input+0x44>
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800ced2:	f104 010e 	add.w	r1, r4, #14
 800ced6:	4628      	mov	r0, r5
 800ced8:	9105      	str	r1, [sp, #20]
 800ceda:	f7fa fc63 	bl	80077a4 <pbuf_add_header>
 800cede:	9905      	ldr	r1, [sp, #20]
 800cee0:	2800      	cmp	r0, #0
 800cee2:	d04b      	beq.n	800cf7c <icmp_input+0x104>
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800cee4:	892b      	ldrh	r3, [r5, #8]
 800cee6:	1919      	adds	r1, r3, r4
 800cee8:	b289      	uxth	r1, r1
        if (alloc_len < p->tot_len) {
 800ceea:	428b      	cmp	r3, r1
 800ceec:	d8e6      	bhi.n	800cebc <icmp_input+0x44>
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800ceee:	f44f 7220 	mov.w	r2, #640	; 0x280
 800cef2:	200e      	movs	r0, #14
 800cef4:	f7fa fd66 	bl	80079c4 <pbuf_alloc>
        if (r == NULL) {
 800cef8:	4681      	mov	r9, r0
 800cefa:	2800      	cmp	r0, #0
 800cefc:	d0de      	beq.n	800cebc <icmp_input+0x44>
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800cefe:	8942      	ldrh	r2, [r0, #10]
 800cf00:	f104 0308 	add.w	r3, r4, #8
 800cf04:	429a      	cmp	r2, r3
 800cf06:	d345      	bcc.n	800cf94 <icmp_input+0x11c>
        MEMCPY(r->payload, iphdr_in, hlen);
 800cf08:	4641      	mov	r1, r8
 800cf0a:	4622      	mov	r2, r4
 800cf0c:	6840      	ldr	r0, [r0, #4]
 800cf0e:	f001 f9b9 	bl	800e284 <memcpy>
        if (pbuf_remove_header(r, hlen)) {
 800cf12:	4621      	mov	r1, r4
 800cf14:	4648      	mov	r0, r9
 800cf16:	f7fa fc79 	bl	800780c <pbuf_remove_header>
 800cf1a:	2800      	cmp	r0, #0
 800cf1c:	d13e      	bne.n	800cf9c <icmp_input+0x124>
        if (pbuf_copy(r, p) != ERR_OK) {
 800cf1e:	4629      	mov	r1, r5
 800cf20:	4648      	mov	r0, r9
 800cf22:	f7fa febb 	bl	8007c9c <pbuf_copy>
 800cf26:	2800      	cmp	r0, #0
 800cf28:	d134      	bne.n	800cf94 <icmp_input+0x11c>
        pbuf_free(p);
 800cf2a:	4628      	mov	r0, r5
 800cf2c:	464d      	mov	r5, r9
 800cf2e:	f7fa fcd9 	bl	80078e4 <pbuf_free>
      if (pbuf_add_header(p, hlen)) {
 800cf32:	4621      	mov	r1, r4
 800cf34:	4628      	mov	r0, r5
      iecho = (struct icmp_echo_hdr *)p->payload;
 800cf36:	686c      	ldr	r4, [r5, #4]
      if (pbuf_add_header(p, hlen)) {
 800cf38:	f7fa fc34 	bl	80077a4 <pbuf_add_header>
 800cf3c:	2800      	cmp	r0, #0
 800cf3e:	d1bd      	bne.n	800cebc <icmp_input+0x44>
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800cf40:	6869      	ldr	r1, [r5, #4]
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 800cf42:	f64f 72f7 	movw	r2, #65527	; 0xfff7
        ip4_addr_copy(iphdr->src, *src);
 800cf46:	697b      	ldr	r3, [r7, #20]
 800cf48:	60cb      	str	r3, [r1, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800cf4a:	693b      	ldr	r3, [r7, #16]
 800cf4c:	610b      	str	r3, [r1, #16]
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 800cf4e:	8863      	ldrh	r3, [r4, #2]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800cf50:	7020      	strb	r0, [r4, #0]
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800cf52:	4628      	mov	r0, r5
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 800cf54:	4293      	cmp	r3, r2
        IPH_CHKSUM_SET(iphdr, 0);
 800cf56:	f04f 0200 	mov.w	r2, #0
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 800cf5a:	bf8c      	ite	hi
 800cf5c:	3309      	addhi	r3, #9
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 800cf5e:	3308      	addls	r3, #8
 800cf60:	b29b      	uxth	r3, r3
 800cf62:	8063      	strh	r3, [r4, #2]
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800cf64:	23ff      	movs	r3, #255	; 0xff
        IPH_CHKSUM_SET(iphdr, 0);
 800cf66:	728a      	strb	r2, [r1, #10]
 800cf68:	72ca      	strb	r2, [r1, #11]
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800cf6a:	720b      	strb	r3, [r1, #8]
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800cf6c:	2101      	movs	r1, #1
 800cf6e:	9200      	str	r2, [sp, #0]
 800cf70:	e9cd 1601 	strd	r1, r6, [sp, #4]
 800cf74:	490f      	ldr	r1, [pc, #60]	; (800cfb4 <icmp_input+0x13c>)
 800cf76:	f000 f9c5 	bl	800d304 <ip4_output_if>
  pbuf_free(p);
 800cf7a:	e79f      	b.n	800cebc <icmp_input+0x44>
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800cf7c:	4628      	mov	r0, r5
 800cf7e:	f7fa fc45 	bl	800780c <pbuf_remove_header>
 800cf82:	2800      	cmp	r0, #0
 800cf84:	d0d5      	beq.n	800cf32 <icmp_input+0xba>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800cf86:	4b0c      	ldr	r3, [pc, #48]	; (800cfb8 <icmp_input+0x140>)
 800cf88:	22c7      	movs	r2, #199	; 0xc7
 800cf8a:	490c      	ldr	r1, [pc, #48]	; (800cfbc <icmp_input+0x144>)
 800cf8c:	480c      	ldr	r0, [pc, #48]	; (800cfc0 <icmp_input+0x148>)
 800cf8e:	f001 f849 	bl	800e024 <iprintf>
          goto icmperr;
 800cf92:	e793      	b.n	800cebc <icmp_input+0x44>
          pbuf_free(r);
 800cf94:	4648      	mov	r0, r9
 800cf96:	f7fa fca5 	bl	80078e4 <pbuf_free>
          goto icmperr;
 800cf9a:	e78f      	b.n	800cebc <icmp_input+0x44>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800cf9c:	4b06      	ldr	r3, [pc, #24]	; (800cfb8 <icmp_input+0x140>)
 800cf9e:	22b6      	movs	r2, #182	; 0xb6
 800cfa0:	4908      	ldr	r1, [pc, #32]	; (800cfc4 <icmp_input+0x14c>)
 800cfa2:	4807      	ldr	r0, [pc, #28]	; (800cfc0 <icmp_input+0x148>)
 800cfa4:	f001 f83e 	bl	800e024 <iprintf>
          pbuf_free(r);
 800cfa8:	4648      	mov	r0, r9
 800cfaa:	f7fa fc9b 	bl	80078e4 <pbuf_free>
          goto icmperr;
 800cfae:	e785      	b.n	800cebc <icmp_input+0x44>
 800cfb0:	24009a88 	.word	0x24009a88
 800cfb4:	24009a9c 	.word	0x24009a9c
 800cfb8:	08011500 	.word	0x08011500
 800cfbc:	0801159c 	.word	0x0801159c
 800cfc0:	0800ef30 	.word	0x0800ef30
 800cfc4:	08011564 	.word	0x08011564

0800cfc8 <icmp_dest_unreach>:
{
 800cfc8:	460a      	mov	r2, r1
  icmp_send_response(p, ICMP_DUR, t);
 800cfca:	2103      	movs	r1, #3
 800cfcc:	f7ff bf02 	b.w	800cdd4 <icmp_send_response>

0800cfd0 <icmp_time_exceeded>:
{
 800cfd0:	460a      	mov	r2, r1
  icmp_send_response(p, ICMP_TE, t);
 800cfd2:	210b      	movs	r1, #11
 800cfd4:	f7ff befe 	b.w	800cdd4 <icmp_send_response>

0800cfd8 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800cfd8:	b538      	push	{r3, r4, r5, lr}
 800cfda:	4604      	mov	r4, r0
#if !LWIP_SINGLE_NETIF
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();
 800cfdc:	f7f6 ffac 	bl	8003f38 <sys_check_core_locking>

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800cfe0:	4b15      	ldr	r3, [pc, #84]	; (800d038 <ip4_route+0x60>)
 800cfe2:	6818      	ldr	r0, [r3, #0]
 800cfe4:	b1a0      	cbz	r0, 800d010 <ip4_route+0x38>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800cfe6:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 800cfea:	07d9      	lsls	r1, r3, #31
 800cfec:	d50d      	bpl.n	800d00a <ip4_route+0x32>
 800cfee:	075a      	lsls	r2, r3, #29
 800cff0:	d50b      	bpl.n	800d00a <ip4_route+0x32>
 800cff2:	6842      	ldr	r2, [r0, #4]
 800cff4:	b14a      	cbz	r2, 800d00a <ip4_route+0x32>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800cff6:	6821      	ldr	r1, [r4, #0]
 800cff8:	6885      	ldr	r5, [r0, #8]
 800cffa:	404a      	eors	r2, r1
 800cffc:	422a      	tst	r2, r5
 800cffe:	d016      	beq.n	800d02e <ip4_route+0x56>
        /* return netif on which to forward IP packet */
        return netif;
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800d000:	079b      	lsls	r3, r3, #30
 800d002:	d402      	bmi.n	800d00a <ip4_route+0x32>
 800d004:	68c3      	ldr	r3, [r0, #12]
 800d006:	4299      	cmp	r1, r3
 800d008:	d011      	beq.n	800d02e <ip4_route+0x56>
  NETIF_FOREACH(netif) {
 800d00a:	6800      	ldr	r0, [r0, #0]
 800d00c:	2800      	cmp	r0, #0
 800d00e:	d1ea      	bne.n	800cfe6 <ip4_route+0xe>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800d010:	4b0a      	ldr	r3, [pc, #40]	; (800d03c <ip4_route+0x64>)
 800d012:	6818      	ldr	r0, [r3, #0]
 800d014:	b158      	cbz	r0, 800d02e <ip4_route+0x56>
 800d016:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 800d01a:	f003 0305 	and.w	r3, r3, #5
 800d01e:	2b05      	cmp	r3, #5
 800d020:	d106      	bne.n	800d030 <ip4_route+0x58>
 800d022:	6843      	ldr	r3, [r0, #4]
 800d024:	b133      	cbz	r3, 800d034 <ip4_route+0x5c>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800d026:	7823      	ldrb	r3, [r4, #0]
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800d028:	2b7f      	cmp	r3, #127	; 0x7f
 800d02a:	bf08      	it	eq
 800d02c:	2000      	moveq	r0, #0
  }

  return netif_default;
}
 800d02e:	bd38      	pop	{r3, r4, r5, pc}
    return NULL;
 800d030:	2000      	movs	r0, #0
}
 800d032:	bd38      	pop	{r3, r4, r5, pc}
    return NULL;
 800d034:	4618      	mov	r0, r3
}
 800d036:	bd38      	pop	{r3, r4, r5, pc}
 800d038:	24010540 	.word	0x24010540
 800d03c:	2401053c 	.word	0x2401053c

0800d040 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800d040:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d044:	4604      	mov	r4, r0
 800d046:	460e      	mov	r6, r1
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP */
#if LWIP_RAW
  raw_input_state_t raw_status;
#endif /* LWIP_RAW */

  LWIP_ASSERT_CORE_LOCKED();
 800d048:	f7f6 ff76 	bl	8003f38 <sys_check_core_locking>

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800d04c:	6867      	ldr	r7, [r4, #4]
  if (IPH_V(iphdr) != 4) {
 800d04e:	783b      	ldrb	r3, [r7, #0]
 800d050:	091a      	lsrs	r2, r3, #4
 800d052:	2a04      	cmp	r2, #4
 800d054:	f040 808d 	bne.w	800d172 <ip4_input+0x132>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800d058:	f003 030f 	and.w	r3, r3, #15
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800d05c:	8878      	ldrh	r0, [r7, #2]
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800d05e:	ea4f 0983 	mov.w	r9, r3, lsl #2
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800d062:	f7f9 fc9d 	bl	80069a0 <lwip_htons>

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800d066:	8923      	ldrh	r3, [r4, #8]
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800d068:	464d      	mov	r5, r9
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800d06a:	4680      	mov	r8, r0
  if (iphdr_len < p->tot_len) {
 800d06c:	4283      	cmp	r3, r0
 800d06e:	f200 8086 	bhi.w	800d17e <ip4_input+0x13e>
    pbuf_realloc(p, iphdr_len);
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800d072:	8963      	ldrh	r3, [r4, #10]
 800d074:	42ab      	cmp	r3, r5
 800d076:	d37c      	bcc.n	800d172 <ip4_input+0x132>
 800d078:	8923      	ldrh	r3, [r4, #8]
 800d07a:	4543      	cmp	r3, r8
 800d07c:	d379      	bcc.n	800d172 <ip4_input+0x132>
 800d07e:	2d13      	cmp	r5, #19
 800d080:	d977      	bls.n	800d172 <ip4_input+0x132>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800d082:	693b      	ldr	r3, [r7, #16]
 800d084:	f8df 8170 	ldr.w	r8, [pc, #368]	; 800d1f8 <ip4_input+0x1b8>
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800d088:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800d08c:	f8c8 3014 	str.w	r3, [r8, #20]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800d090:	2ae0      	cmp	r2, #224	; 0xe0
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800d092:	68f8      	ldr	r0, [r7, #12]
 800d094:	f8c8 0010 	str.w	r0, [r8, #16]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800d098:	d076      	beq.n	800d188 <ip4_input+0x148>
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800d09a:	f896 202d 	ldrb.w	r2, [r6, #45]	; 0x2d
 800d09e:	07d2      	lsls	r2, r2, #31
 800d0a0:	d503      	bpl.n	800d0aa <ip4_input+0x6a>
 800d0a2:	6872      	ldr	r2, [r6, #4]
 800d0a4:	2a00      	cmp	r2, #0
 800d0a6:	f040 8082 	bne.w	800d1ae <ip4_input+0x16e>
      netif = NULL;
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800d0aa:	b2db      	uxtb	r3, r3
 800d0ac:	2b7f      	cmp	r3, #127	; 0x7f
 800d0ae:	f000 8088 	beq.w	800d1c2 <ip4_input+0x182>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800d0b2:	4b50      	ldr	r3, [pc, #320]	; (800d1f4 <ip4_input+0x1b4>)
 800d0b4:	681d      	ldr	r5, [r3, #0]
 800d0b6:	b92d      	cbnz	r5, 800d0c4 <ip4_input+0x84>
 800d0b8:	e083      	b.n	800d1c2 <ip4_input+0x182>
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800d0ba:	f000 f935 	bl	800d328 <ip4_addr_isbroadcast_u32>
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800d0be:	b978      	cbnz	r0, 800d0e0 <ip4_input+0xa0>
        NETIF_FOREACH(netif) {
 800d0c0:	682d      	ldr	r5, [r5, #0]
 800d0c2:	b16d      	cbz	r5, 800d0e0 <ip4_input+0xa0>
          if (netif == inp) {
 800d0c4:	42ae      	cmp	r6, r5
 800d0c6:	d0fb      	beq.n	800d0c0 <ip4_input+0x80>
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800d0c8:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
 800d0cc:	07db      	lsls	r3, r3, #31
 800d0ce:	d5f7      	bpl.n	800d0c0 <ip4_input+0x80>
 800d0d0:	686b      	ldr	r3, [r5, #4]
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d0f4      	beq.n	800d0c0 <ip4_input+0x80>
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800d0d6:	f8d8 0014 	ldr.w	r0, [r8, #20]
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800d0da:	4629      	mov	r1, r5
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800d0dc:	4283      	cmp	r3, r0
 800d0de:	d1ec      	bne.n	800d0ba <ip4_input+0x7a>
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800d0e0:	f8d8 0010 	ldr.w	r0, [r8, #16]
 800d0e4:	4631      	mov	r1, r6
 800d0e6:	f000 f91f 	bl	800d328 <ip4_addr_isbroadcast_u32>
 800d0ea:	2800      	cmp	r0, #0
 800d0ec:	d141      	bne.n	800d172 <ip4_input+0x132>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800d0ee:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800d0f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800d0f6:	2be0      	cmp	r3, #224	; 0xe0
 800d0f8:	d03b      	beq.n	800d172 <ip4_input+0x132>
      return ERR_OK;
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800d0fa:	b3d5      	cbz	r5, 800d172 <ip4_input+0x132>
    }
    pbuf_free(p);
    return ERR_OK;
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800d0fc:	88fb      	ldrh	r3, [r7, #6]
 800d0fe:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800d102:	2b00      	cmp	r3, #0
 800d104:	d14b      	bne.n	800d19e <ip4_input+0x15e>
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
  ip_data.current_input_netif = inp;
  ip_data.current_ip4_header = iphdr;
 800d106:	f8c8 7008 	str.w	r7, [r8, #8]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800d10a:	4649      	mov	r1, r9
 800d10c:	4620      	mov	r0, r4
  ip_data.current_input_netif = inp;
 800d10e:	e9c8 5600 	strd	r5, r6, [r8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800d112:	783b      	ldrb	r3, [r7, #0]
 800d114:	f003 030f 	and.w	r3, r3, #15
 800d118:	009b      	lsls	r3, r3, #2
 800d11a:	f8a8 300c 	strh.w	r3, [r8, #12]
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800d11e:	f7fa fb75 	bl	800780c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800d122:	7a7b      	ldrb	r3, [r7, #9]
 800d124:	2b06      	cmp	r3, #6
 800d126:	d05a      	beq.n	800d1de <ip4_input+0x19e>
 800d128:	2b11      	cmp	r3, #17
 800d12a:	d053      	beq.n	800d1d4 <ip4_input+0x194>
 800d12c:	2b01      	cmp	r3, #1
 800d12e:	d04c      	beq.n	800d1ca <ip4_input+0x18a>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800d130:	4629      	mov	r1, r5
 800d132:	f8d8 0014 	ldr.w	r0, [r8, #20]
 800d136:	f000 f8f7 	bl	800d328 <ip4_addr_isbroadcast_u32>
 800d13a:	b968      	cbnz	r0, 800d158 <ip4_input+0x118>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800d13c:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800d140:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800d144:	2be0      	cmp	r3, #224	; 0xe0
 800d146:	d007      	beq.n	800d158 <ip4_input+0x118>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800d148:	4649      	mov	r1, r9
 800d14a:	4620      	mov	r0, r4
 800d14c:	f7fa fb92 	bl	8007874 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800d150:	2102      	movs	r1, #2
 800d152:	4620      	mov	r0, r4
 800d154:	f7ff ff38 	bl	800cfc8 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800d158:	4620      	mov	r0, r4
 800d15a:	f7fa fbc3 	bl	80078e4 <pbuf_free>
        break;
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800d15e:	2300      	movs	r3, #0
  ip_data.current_input_netif = NULL;
 800d160:	e9c8 3300 	strd	r3, r3, [r8]
  ip_data.current_ip4_header = NULL;
 800d164:	f8c8 3008 	str.w	r3, [r8, #8]
  ip_data.current_ip_header_tot_len = 0;
 800d168:	f8a8 300c 	strh.w	r3, [r8, #12]
  ip4_addr_set_any(ip4_current_src_addr());
  ip4_addr_set_any(ip4_current_dest_addr());
 800d16c:	e9c8 3304 	strd	r3, r3, [r8, #16]

  return ERR_OK;
 800d170:	e002      	b.n	800d178 <ip4_input+0x138>
    pbuf_free(p);
 800d172:	4620      	mov	r0, r4
 800d174:	f7fa fbb6 	bl	80078e4 <pbuf_free>
}
 800d178:	2000      	movs	r0, #0
 800d17a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    pbuf_realloc(p, iphdr_len);
 800d17e:	4601      	mov	r1, r0
 800d180:	4620      	mov	r0, r4
 800d182:	f7fa fccd 	bl	8007b20 <pbuf_realloc>
 800d186:	e774      	b.n	800d072 <ip4_input+0x32>
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800d188:	f896 502d 	ldrb.w	r5, [r6, #45]	; 0x2d
 800d18c:	f015 0501 	ands.w	r5, r5, #1
 800d190:	d0a8      	beq.n	800d0e4 <ip4_input+0xa4>
 800d192:	6873      	ldr	r3, [r6, #4]
 800d194:	2b00      	cmp	r3, #0
 800d196:	bf14      	ite	ne
 800d198:	4635      	movne	r5, r6
 800d19a:	2500      	moveq	r5, #0
 800d19c:	e7a2      	b.n	800d0e4 <ip4_input+0xa4>
    p = ip4_reass(p);
 800d19e:	4620      	mov	r0, r4
 800d1a0:	f000 f9ec 	bl	800d57c <ip4_reass>
    if (p == NULL) {
 800d1a4:	4604      	mov	r4, r0
 800d1a6:	2800      	cmp	r0, #0
 800d1a8:	d0e6      	beq.n	800d178 <ip4_input+0x138>
    iphdr = (const struct ip_hdr *)p->payload;
 800d1aa:	6847      	ldr	r7, [r0, #4]
 800d1ac:	e7ab      	b.n	800d106 <ip4_input+0xc6>
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800d1ae:	4293      	cmp	r3, r2
 800d1b0:	d01a      	beq.n	800d1e8 <ip4_input+0x1a8>
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800d1b2:	4618      	mov	r0, r3
 800d1b4:	4631      	mov	r1, r6
 800d1b6:	f000 f8b7 	bl	800d328 <ip4_addr_isbroadcast_u32>
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800d1ba:	b9b8      	cbnz	r0, 800d1ec <ip4_input+0x1ac>
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800d1bc:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800d1c0:	e773      	b.n	800d0aa <ip4_input+0x6a>
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800d1c2:	f8d8 0010 	ldr.w	r0, [r8, #16]
      netif = NULL;
 800d1c6:	2500      	movs	r5, #0
 800d1c8:	e78c      	b.n	800d0e4 <ip4_input+0xa4>
        icmp_input(p, inp);
 800d1ca:	4631      	mov	r1, r6
 800d1cc:	4620      	mov	r0, r4
 800d1ce:	f7ff fe53 	bl	800ce78 <icmp_input>
        break;
 800d1d2:	e7c4      	b.n	800d15e <ip4_input+0x11e>
        udp_input(p, inp);
 800d1d4:	4631      	mov	r1, r6
 800d1d6:	4620      	mov	r0, r4
 800d1d8:	f7ff f898 	bl	800c30c <udp_input>
        break;
 800d1dc:	e7bf      	b.n	800d15e <ip4_input+0x11e>
        tcp_input(p, inp);
 800d1de:	4631      	mov	r1, r6
 800d1e0:	4620      	mov	r0, r4
 800d1e2:	f7fc ff7d 	bl	800a0e0 <tcp_input>
        break;
 800d1e6:	e7ba      	b.n	800d15e <ip4_input+0x11e>
 800d1e8:	4635      	mov	r5, r6
 800d1ea:	e77b      	b.n	800d0e4 <ip4_input+0xa4>
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800d1ec:	f8d8 0010 	ldr.w	r0, [r8, #16]
 800d1f0:	4635      	mov	r5, r6
 800d1f2:	e777      	b.n	800d0e4 <ip4_input+0xa4>
 800d1f4:	24010540 	.word	0x24010540
 800d1f8:	24009a88 	.word	0x24009a88

0800d1fc <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800d1fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d200:	4604      	mov	r4, r0
 800d202:	b083      	sub	sp, #12
 800d204:	4699      	mov	r9, r3
 800d206:	460f      	mov	r7, r1
 800d208:	4616      	mov	r6, r2
 800d20a:	f89d a030 	ldrb.w	sl, [sp, #48]	; 0x30
 800d20e:	f89d b034 	ldrb.w	fp, [sp, #52]	; 0x34
 800d212:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
 800d216:	f7f6 fe8f 	bl	8003f38 <sys_check_core_locking>
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800d21a:	7ba3      	ldrb	r3, [r4, #14]
 800d21c:	2b01      	cmp	r3, #1
 800d21e:	d13d      	bne.n	800d29c <ip4_output_if_src+0xa0>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800d220:	2e00      	cmp	r6, #0
 800d222:	d044      	beq.n	800d2ae <ip4_output_if_src+0xb2>
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800d224:	2114      	movs	r1, #20
 800d226:	4620      	mov	r0, r4
 800d228:	f7fa fabc 	bl	80077a4 <pbuf_add_header>
 800d22c:	2800      	cmp	r0, #0
 800d22e:	d159      	bne.n	800d2e4 <ip4_output_if_src+0xe8>
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
    }

    iphdr = (struct ip_hdr *)p->payload;
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800d230:	8963      	ldrh	r3, [r4, #10]
    iphdr = (struct ip_hdr *)p->payload;
 800d232:	6865      	ldr	r5, [r4, #4]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800d234:	2b13      	cmp	r3, #19
 800d236:	d942      	bls.n	800d2be <ip4_output_if_src+0xc2>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800d238:	f885 9008 	strb.w	r9, [r5, #8]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800d23c:	2245      	movs	r2, #69	; 0x45
    IPH_PROTO_SET(iphdr, proto);
 800d23e:	f885 b009 	strb.w	fp, [r5, #9]
    ip4_addr_copy(iphdr->dest, *dest);
 800d242:	6833      	ldr	r3, [r6, #0]
    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800d244:	702a      	strb	r2, [r5, #0]
    IPH_TOS_SET(iphdr, tos);
 800d246:	f885 a001 	strb.w	sl, [r5, #1]
    ip4_addr_copy(iphdr->dest, *dest);
 800d24a:	612b      	str	r3, [r5, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800d24c:	8920      	ldrh	r0, [r4, #8]
 800d24e:	f7f9 fba7 	bl	80069a0 <lwip_htons>
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800d252:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 800d300 <ip4_output_if_src+0x104>
    IPH_OFFSET_SET(iphdr, 0);
 800d256:	2300      	movs	r3, #0
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800d258:	8068      	strh	r0, [r5, #2]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800d25a:	f8b9 0000 	ldrh.w	r0, [r9]
    IPH_OFFSET_SET(iphdr, 0);
 800d25e:	71ab      	strb	r3, [r5, #6]
 800d260:	71eb      	strb	r3, [r5, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800d262:	f7f9 fb9d 	bl	80069a0 <lwip_htons>
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800d266:	f8b9 3000 	ldrh.w	r3, [r9]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800d26a:	80a8      	strh	r0, [r5, #4]
    ++ip_id;
 800d26c:	3301      	adds	r3, #1
 800d26e:	f8a9 3000 	strh.w	r3, [r9]

    if (src == NULL) {
 800d272:	b367      	cbz	r7, 800d2ce <ip4_output_if_src+0xd2>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800d274:	683b      	ldr	r3, [r7, #0]
 800d276:	60eb      	str	r3, [r5, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800d278:	2300      	movs	r3, #0
 800d27a:	72ab      	strb	r3, [r5, #10]
 800d27c:	72eb      	strb	r3, [r5, #11]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800d27e:	f8b8 3024 	ldrh.w	r3, [r8, #36]	; 0x24
 800d282:	b113      	cbz	r3, 800d28a <ip4_output_if_src+0x8e>
 800d284:	8922      	ldrh	r2, [r4, #8]
 800d286:	429a      	cmp	r2, r3
 800d288:	d824      	bhi.n	800d2d4 <ip4_output_if_src+0xd8>
    return ip4_frag(p, netif, dest);
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800d28a:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800d28e:	4632      	mov	r2, r6
 800d290:	4621      	mov	r1, r4
 800d292:	4640      	mov	r0, r8
 800d294:	4798      	blx	r3
}
 800d296:	b003      	add	sp, #12
 800d298:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800d29c:	4b13      	ldr	r3, [pc, #76]	; (800d2ec <ip4_output_if_src+0xf0>)
 800d29e:	f44f 7255 	mov.w	r2, #852	; 0x354
 800d2a2:	4913      	ldr	r1, [pc, #76]	; (800d2f0 <ip4_output_if_src+0xf4>)
 800d2a4:	4813      	ldr	r0, [pc, #76]	; (800d2f4 <ip4_output_if_src+0xf8>)
 800d2a6:	f000 febd 	bl	800e024 <iprintf>
  if (dest != LWIP_IP_HDRINCL) {
 800d2aa:	2e00      	cmp	r6, #0
 800d2ac:	d1ba      	bne.n	800d224 <ip4_output_if_src+0x28>
    if (p->len < IP_HLEN) {
 800d2ae:	8963      	ldrh	r3, [r4, #10]
 800d2b0:	2b13      	cmp	r3, #19
 800d2b2:	d917      	bls.n	800d2e4 <ip4_output_if_src+0xe8>
    ip4_addr_copy(dest_addr, iphdr->dest);
 800d2b4:	6863      	ldr	r3, [r4, #4]
    dest = &dest_addr;
 800d2b6:	ae01      	add	r6, sp, #4
    ip4_addr_copy(dest_addr, iphdr->dest);
 800d2b8:	691b      	ldr	r3, [r3, #16]
 800d2ba:	9301      	str	r3, [sp, #4]
    dest = &dest_addr;
 800d2bc:	e7df      	b.n	800d27e <ip4_output_if_src+0x82>
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800d2be:	4b0b      	ldr	r3, [pc, #44]	; (800d2ec <ip4_output_if_src+0xf0>)
 800d2c0:	f44f 7262 	mov.w	r2, #904	; 0x388
 800d2c4:	490c      	ldr	r1, [pc, #48]	; (800d2f8 <ip4_output_if_src+0xfc>)
 800d2c6:	480b      	ldr	r0, [pc, #44]	; (800d2f4 <ip4_output_if_src+0xf8>)
 800d2c8:	f000 feac 	bl	800e024 <iprintf>
 800d2cc:	e7b4      	b.n	800d238 <ip4_output_if_src+0x3c>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800d2ce:	4b0b      	ldr	r3, [pc, #44]	; (800d2fc <ip4_output_if_src+0x100>)
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	e7d0      	b.n	800d276 <ip4_output_if_src+0x7a>
    return ip4_frag(p, netif, dest);
 800d2d4:	4632      	mov	r2, r6
 800d2d6:	4641      	mov	r1, r8
 800d2d8:	4620      	mov	r0, r4
 800d2da:	f000 fb83 	bl	800d9e4 <ip4_frag>
}
 800d2de:	b003      	add	sp, #12
 800d2e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      return ERR_BUF;
 800d2e4:	f06f 0001 	mvn.w	r0, #1
 800d2e8:	e7d5      	b.n	800d296 <ip4_output_if_src+0x9a>
 800d2ea:	bf00      	nop
 800d2ec:	080115d0 	.word	0x080115d0
 800d2f0:	08011604 	.word	0x08011604
 800d2f4:	0800ef30 	.word	0x0800ef30
 800d2f8:	08011610 	.word	0x08011610
 800d2fc:	08011640 	.word	0x08011640
 800d300:	240106a6 	.word	0x240106a6

0800d304 <ip4_output_if>:
{
 800d304:	b4f0      	push	{r4, r5, r6, r7}
 800d306:	9c06      	ldr	r4, [sp, #24]
 800d308:	f89d 5010 	ldrb.w	r5, [sp, #16]
 800d30c:	f89d 6014 	ldrb.w	r6, [sp, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800d310:	b11a      	cbz	r2, 800d31a <ip4_output_if+0x16>
    if (ip4_addr_isany(src)) {
 800d312:	b109      	cbz	r1, 800d318 <ip4_output_if+0x14>
 800d314:	680f      	ldr	r7, [r1, #0]
 800d316:	b907      	cbnz	r7, 800d31a <ip4_output_if+0x16>
      src_used = netif_ip4_addr(netif);
 800d318:	1d21      	adds	r1, r4, #4
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800d31a:	9504      	str	r5, [sp, #16]
 800d31c:	e9cd 6405 	strd	r6, r4, [sp, #20]
}
 800d320:	bcf0      	pop	{r4, r5, r6, r7}
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800d322:	f7ff bf6b 	b.w	800d1fc <ip4_output_if_src>
 800d326:	bf00      	nop

0800d328 <ip4_addr_isbroadcast_u32>:
{
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800d328:	1e43      	subs	r3, r0, #1
 800d32a:	3303      	adds	r3, #3
 800d32c:	d814      	bhi.n	800d358 <ip4_addr_isbroadcast_u32+0x30>
      (addr == IPADDR_ANY)) {
    return 1;
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800d32e:	f891 302d 	ldrb.w	r3, [r1, #45]	; 0x2d
 800d332:	f013 0302 	ands.w	r3, r3, #2
 800d336:	d00d      	beq.n	800d354 <ip4_addr_isbroadcast_u32+0x2c>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800d338:	684b      	ldr	r3, [r1, #4]
 800d33a:	4283      	cmp	r3, r0
 800d33c:	d00f      	beq.n	800d35e <ip4_addr_isbroadcast_u32+0x36>
    return 0;
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800d33e:	688a      	ldr	r2, [r1, #8]
 800d340:	4043      	eors	r3, r0
 800d342:	4213      	tst	r3, r2
 800d344:	d10b      	bne.n	800d35e <ip4_addr_isbroadcast_u32+0x36>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800d346:	43d3      	mvns	r3, r2
 800d348:	ea20 0002 	bic.w	r0, r0, r2
    return 1;
 800d34c:	1ac3      	subs	r3, r0, r3
 800d34e:	fab3 f383 	clz	r3, r3
 800d352:	095b      	lsrs	r3, r3, #5
    /* => network broadcast address */
    return 1;
  } else {
    return 0;
  }
}
 800d354:	4618      	mov	r0, r3
 800d356:	4770      	bx	lr
    return 1;
 800d358:	2301      	movs	r3, #1
}
 800d35a:	4618      	mov	r0, r3
 800d35c:	4770      	bx	lr
    return 0;
 800d35e:	2300      	movs	r3, #0
}
 800d360:	4618      	mov	r0, r3
 800d362:	4770      	bx	lr

0800d364 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800d364:	b510      	push	{r4, lr}
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800d366:	4604      	mov	r4, r0
 800d368:	b148      	cbz	r0, 800d37e <ipfrag_free_pbuf_custom+0x1a>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
  if (pcr->original != NULL) {
 800d36a:	6960      	ldr	r0, [r4, #20]
 800d36c:	b108      	cbz	r0, 800d372 <ipfrag_free_pbuf_custom+0xe>
    pbuf_free(pcr->original);
 800d36e:	f7fa fab9 	bl	80078e4 <pbuf_free>
  memp_free(MEMP_FRAG_PBUF, p);
 800d372:	4621      	mov	r1, r4
 800d374:	2005      	movs	r0, #5
  }
  ip_frag_free_pbuf_custom_ref(pcr);
}
 800d376:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_FRAG_PBUF, p);
 800d37a:	f7f9 beed 	b.w	8007158 <memp_free>
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800d37e:	4b04      	ldr	r3, [pc, #16]	; (800d390 <ipfrag_free_pbuf_custom+0x2c>)
 800d380:	f240 22ce 	movw	r2, #718	; 0x2ce
 800d384:	4903      	ldr	r1, [pc, #12]	; (800d394 <ipfrag_free_pbuf_custom+0x30>)
 800d386:	4804      	ldr	r0, [pc, #16]	; (800d398 <ipfrag_free_pbuf_custom+0x34>)
 800d388:	f000 fe4c 	bl	800e024 <iprintf>
 800d38c:	e7ed      	b.n	800d36a <ipfrag_free_pbuf_custom+0x6>
 800d38e:	bf00      	nop
 800d390:	08011644 	.word	0x08011644
 800d394:	08011680 	.word	0x08011680
 800d398:	0800ef30 	.word	0x0800ef30

0800d39c <ip_reass_free_complete_datagram>:
  LWIP_ASSERT("prev != ipr", prev != ipr);
 800d39c:	4281      	cmp	r1, r0
{
 800d39e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3a2:	4606      	mov	r6, r0
 800d3a4:	460f      	mov	r7, r1
  LWIP_ASSERT("prev != ipr", prev != ipr);
 800d3a6:	d075      	beq.n	800d494 <ip_reass_free_complete_datagram+0xf8>
  if (prev != NULL) {
 800d3a8:	b147      	cbz	r7, 800d3bc <ip_reass_free_complete_datagram+0x20>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800d3aa:	683b      	ldr	r3, [r7, #0]
 800d3ac:	42b3      	cmp	r3, r6
 800d3ae:	d005      	beq.n	800d3bc <ip_reass_free_complete_datagram+0x20>
 800d3b0:	4b40      	ldr	r3, [pc, #256]	; (800d4b4 <ip_reass_free_complete_datagram+0x118>)
 800d3b2:	22ad      	movs	r2, #173	; 0xad
 800d3b4:	4940      	ldr	r1, [pc, #256]	; (800d4b8 <ip_reass_free_complete_datagram+0x11c>)
 800d3b6:	4841      	ldr	r0, [pc, #260]	; (800d4bc <ip_reass_free_complete_datagram+0x120>)
 800d3b8:	f000 fe34 	bl	800e024 <iprintf>
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800d3bc:	6875      	ldr	r5, [r6, #4]
 800d3be:	686b      	ldr	r3, [r5, #4]
  if (iprh->start == 0) {
 800d3c0:	889a      	ldrh	r2, [r3, #4]
 800d3c2:	2a00      	cmp	r2, #0
 800d3c4:	d047      	beq.n	800d456 <ip_reass_free_complete_datagram+0xba>
  u16_t pbufs_freed = 0;
 800d3c6:	f04f 0b00 	mov.w	fp, #0
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800d3ca:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 800d4b4 <ip_reass_free_complete_datagram+0x118>
 800d3ce:	f8df 9104 	ldr.w	r9, [pc, #260]	; 800d4d4 <ip_reass_free_complete_datagram+0x138>
 800d3d2:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 800d4bc <ip_reass_free_complete_datagram+0x120>
 800d3d6:	e005      	b.n	800d3e4 <ip_reass_free_complete_datagram+0x48>
    pbuf_free(pcur);
 800d3d8:	4628      	mov	r0, r5
    iprh = (struct ip_reass_helper *)p->payload;
 800d3da:	4625      	mov	r5, r4
    pbuf_free(pcur);
 800d3dc:	f7fa fa82 	bl	80078e4 <pbuf_free>
  while (p != NULL) {
 800d3e0:	b1b4      	cbz	r4, 800d410 <ip_reass_free_complete_datagram+0x74>
    iprh = (struct ip_reass_helper *)p->payload;
 800d3e2:	6863      	ldr	r3, [r4, #4]
    clen = pbuf_clen(pcur);
 800d3e4:	4628      	mov	r0, r5
    p = iprh->next_pbuf;
 800d3e6:	681c      	ldr	r4, [r3, #0]
    clen = pbuf_clen(pcur);
 800d3e8:	f7fa fbf2 	bl	8007bd0 <pbuf_clen>
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800d3ec:	4458      	add	r0, fp
 800d3ee:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800d3f2:	fa1f fb80 	uxth.w	fp, r0
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800d3f6:	dbef      	blt.n	800d3d8 <ip_reass_free_complete_datagram+0x3c>
 800d3f8:	4653      	mov	r3, sl
 800d3fa:	22cc      	movs	r2, #204	; 0xcc
 800d3fc:	4649      	mov	r1, r9
 800d3fe:	4640      	mov	r0, r8
 800d400:	f000 fe10 	bl	800e024 <iprintf>
    pbuf_free(pcur);
 800d404:	4628      	mov	r0, r5
    iprh = (struct ip_reass_helper *)p->payload;
 800d406:	4625      	mov	r5, r4
    pbuf_free(pcur);
 800d408:	f7fa fa6c 	bl	80078e4 <pbuf_free>
  while (p != NULL) {
 800d40c:	2c00      	cmp	r4, #0
 800d40e:	d1e8      	bne.n	800d3e2 <ip_reass_free_complete_datagram+0x46>
  if (reassdatagrams == ipr) {
 800d410:	4b2b      	ldr	r3, [pc, #172]	; (800d4c0 <ip_reass_free_complete_datagram+0x124>)
 800d412:	681a      	ldr	r2, [r3, #0]
 800d414:	4296      	cmp	r6, r2
 800d416:	d03a      	beq.n	800d48e <ip_reass_free_complete_datagram+0xf2>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800d418:	2f00      	cmp	r7, #0
 800d41a:	d042      	beq.n	800d4a2 <ip_reass_free_complete_datagram+0x106>
    prev->next = ipr->next;
 800d41c:	6833      	ldr	r3, [r6, #0]
 800d41e:	603b      	str	r3, [r7, #0]
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800d420:	4c28      	ldr	r4, [pc, #160]	; (800d4c4 <ip_reass_free_complete_datagram+0x128>)
  memp_free(MEMP_REASSDATA, ipr);
 800d422:	4631      	mov	r1, r6
 800d424:	2004      	movs	r0, #4
 800d426:	f7f9 fe97 	bl	8007158 <memp_free>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800d42a:	8823      	ldrh	r3, [r4, #0]
 800d42c:	455b      	cmp	r3, fp
 800d42e:	d305      	bcc.n	800d43c <ip_reass_free_complete_datagram+0xa0>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800d430:	eba3 030b 	sub.w	r3, r3, fp
}
 800d434:	4658      	mov	r0, fp
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800d436:	8023      	strh	r3, [r4, #0]
}
 800d438:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800d43c:	4b1d      	ldr	r3, [pc, #116]	; (800d4b4 <ip_reass_free_complete_datagram+0x118>)
 800d43e:	22d2      	movs	r2, #210	; 0xd2
 800d440:	4921      	ldr	r1, [pc, #132]	; (800d4c8 <ip_reass_free_complete_datagram+0x12c>)
 800d442:	481e      	ldr	r0, [pc, #120]	; (800d4bc <ip_reass_free_complete_datagram+0x120>)
 800d444:	f000 fdee 	bl	800e024 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800d448:	8823      	ldrh	r3, [r4, #0]
}
 800d44a:	4658      	mov	r0, fp
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800d44c:	eba3 030b 	sub.w	r3, r3, fp
 800d450:	8023      	strh	r3, [r4, #0]
}
 800d452:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ipr->p = iprh->next_pbuf;
 800d456:	681a      	ldr	r2, [r3, #0]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800d458:	6930      	ldr	r0, [r6, #16]
 800d45a:	6971      	ldr	r1, [r6, #20]
    ipr->p = iprh->next_pbuf;
 800d45c:	6072      	str	r2, [r6, #4]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800d45e:	68f4      	ldr	r4, [r6, #12]
 800d460:	68b2      	ldr	r2, [r6, #8]
 800d462:	6098      	str	r0, [r3, #8]
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800d464:	4628      	mov	r0, r5
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800d466:	60d9      	str	r1, [r3, #12]
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800d468:	2101      	movs	r1, #1
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800d46a:	601a      	str	r2, [r3, #0]
 800d46c:	605c      	str	r4, [r3, #4]
 800d46e:	69b2      	ldr	r2, [r6, #24]
 800d470:	611a      	str	r2, [r3, #16]
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800d472:	f7ff fdad 	bl	800cfd0 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800d476:	4628      	mov	r0, r5
 800d478:	f7fa fbaa 	bl	8007bd0 <pbuf_clen>
 800d47c:	4683      	mov	fp, r0
    pbuf_free(p);
 800d47e:	4628      	mov	r0, r5
 800d480:	f7fa fa30 	bl	80078e4 <pbuf_free>
  p = ipr->p;
 800d484:	6875      	ldr	r5, [r6, #4]
  while (p != NULL) {
 800d486:	2d00      	cmp	r5, #0
 800d488:	d0c2      	beq.n	800d410 <ip_reass_free_complete_datagram+0x74>
    iprh = (struct ip_reass_helper *)p->payload;
 800d48a:	686b      	ldr	r3, [r5, #4]
 800d48c:	e79d      	b.n	800d3ca <ip_reass_free_complete_datagram+0x2e>
    reassdatagrams = ipr->next;
 800d48e:	6832      	ldr	r2, [r6, #0]
 800d490:	601a      	str	r2, [r3, #0]
 800d492:	e7c5      	b.n	800d420 <ip_reass_free_complete_datagram+0x84>
  LWIP_ASSERT("prev != ipr", prev != ipr);
 800d494:	4b07      	ldr	r3, [pc, #28]	; (800d4b4 <ip_reass_free_complete_datagram+0x118>)
 800d496:	22ab      	movs	r2, #171	; 0xab
 800d498:	490c      	ldr	r1, [pc, #48]	; (800d4cc <ip_reass_free_complete_datagram+0x130>)
 800d49a:	4808      	ldr	r0, [pc, #32]	; (800d4bc <ip_reass_free_complete_datagram+0x120>)
 800d49c:	f000 fdc2 	bl	800e024 <iprintf>
 800d4a0:	e782      	b.n	800d3a8 <ip_reass_free_complete_datagram+0xc>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800d4a2:	4b04      	ldr	r3, [pc, #16]	; (800d4b4 <ip_reass_free_complete_datagram+0x118>)
 800d4a4:	f240 1245 	movw	r2, #325	; 0x145
 800d4a8:	4909      	ldr	r1, [pc, #36]	; (800d4d0 <ip_reass_free_complete_datagram+0x134>)
 800d4aa:	4804      	ldr	r0, [pc, #16]	; (800d4bc <ip_reass_free_complete_datagram+0x120>)
 800d4ac:	f000 fdba 	bl	800e024 <iprintf>
 800d4b0:	e7b4      	b.n	800d41c <ip_reass_free_complete_datagram+0x80>
 800d4b2:	bf00      	nop
 800d4b4:	08011644 	.word	0x08011644
 800d4b8:	08011698 	.word	0x08011698
 800d4bc:	0800ef30 	.word	0x0800ef30
 800d4c0:	240106ac 	.word	0x240106ac
 800d4c4:	240106a8 	.word	0x240106a8
 800d4c8:	080116e8 	.word	0x080116e8
 800d4cc:	0801168c 	.word	0x0801168c
 800d4d0:	080116cc 	.word	0x080116cc
 800d4d4:	080116ac 	.word	0x080116ac

0800d4d8 <ip_reass_remove_oldest_datagram>:
{
 800d4d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  int pbufs_freed = 0, pbufs_freed_current;
 800d4dc:	2700      	movs	r7, #0
 800d4de:	f8df 8068 	ldr.w	r8, [pc, #104]	; 800d548 <ip_reass_remove_oldest_datagram+0x70>
{
 800d4e2:	4605      	mov	r5, r0
 800d4e4:	460e      	mov	r6, r1
    r = reassdatagrams;
 800d4e6:	f8d8 3000 	ldr.w	r3, [r8]
    while (r != NULL) {
 800d4ea:	b1f3      	cbz	r3, 800d52a <ip_reass_remove_oldest_datagram+0x52>
    other_datagrams = 0;
 800d4ec:	2400      	movs	r4, #0
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800d4ee:	f8d5 e00c 	ldr.w	lr, [r5, #12]
    oldest_prev = NULL;
 800d4f2:	4621      	mov	r1, r4
    prev = NULL;
 800d4f4:	46a4      	mov	ip, r4
    oldest = NULL;
 800d4f6:	4620      	mov	r0, r4
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800d4f8:	695a      	ldr	r2, [r3, #20]
 800d4fa:	4572      	cmp	r2, lr
 800d4fc:	d018      	beq.n	800d530 <ip_reass_remove_oldest_datagram+0x58>
        other_datagrams++;
 800d4fe:	3401      	adds	r4, #1
        if (oldest == NULL) {
 800d500:	b120      	cbz	r0, 800d50c <ip_reass_remove_oldest_datagram+0x34>
        } else if (r->timer <= oldest->timer) {
 800d502:	f893 901f 	ldrb.w	r9, [r3, #31]
 800d506:	7fc2      	ldrb	r2, [r0, #31]
 800d508:	4591      	cmp	r9, r2
 800d50a:	d801      	bhi.n	800d510 <ip_reass_remove_oldest_datagram+0x38>
 800d50c:	4661      	mov	r1, ip
 800d50e:	4618      	mov	r0, r3
      if (r->next != NULL) {
 800d510:	681a      	ldr	r2, [r3, #0]
 800d512:	469c      	mov	ip, r3
 800d514:	4613      	mov	r3, r2
 800d516:	2a00      	cmp	r2, #0
 800d518:	d1ee      	bne.n	800d4f8 <ip_reass_remove_oldest_datagram+0x20>
    if (oldest != NULL) {
 800d51a:	b110      	cbz	r0, 800d522 <ip_reass_remove_oldest_datagram+0x4a>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800d51c:	f7ff ff3e 	bl	800d39c <ip_reass_free_complete_datagram>
      pbufs_freed += pbufs_freed_current;
 800d520:	4407      	add	r7, r0
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800d522:	42b7      	cmp	r7, r6
 800d524:	da01      	bge.n	800d52a <ip_reass_remove_oldest_datagram+0x52>
 800d526:	2c01      	cmp	r4, #1
 800d528:	dcdd      	bgt.n	800d4e6 <ip_reass_remove_oldest_datagram+0xe>
}
 800d52a:	4638      	mov	r0, r7
 800d52c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800d530:	699a      	ldr	r2, [r3, #24]
 800d532:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800d536:	454a      	cmp	r2, r9
 800d538:	d1e1      	bne.n	800d4fe <ip_reass_remove_oldest_datagram+0x26>
 800d53a:	f8b3 900c 	ldrh.w	r9, [r3, #12]
 800d53e:	88aa      	ldrh	r2, [r5, #4]
 800d540:	4591      	cmp	r9, r2
 800d542:	d1dc      	bne.n	800d4fe <ip_reass_remove_oldest_datagram+0x26>
 800d544:	e7e4      	b.n	800d510 <ip_reass_remove_oldest_datagram+0x38>
 800d546:	bf00      	nop
 800d548:	240106ac 	.word	0x240106ac

0800d54c <ip_reass_tmr>:
{
 800d54c:	b538      	push	{r3, r4, r5, lr}
  r = reassdatagrams;
 800d54e:	4b0a      	ldr	r3, [pc, #40]	; (800d578 <ip_reass_tmr+0x2c>)
 800d550:	6818      	ldr	r0, [r3, #0]
  while (r != NULL) {
 800d552:	b140      	cbz	r0, 800d566 <ip_reass_tmr+0x1a>
  struct ip_reassdata *r, *prev = NULL;
 800d554:	2400      	movs	r4, #0
    if (r->timer > 0) {
 800d556:	7fc3      	ldrb	r3, [r0, #31]
      r->timer--;
 800d558:	1e5a      	subs	r2, r3, #1
    if (r->timer > 0) {
 800d55a:	b12b      	cbz	r3, 800d568 <ip_reass_tmr+0x1c>
 800d55c:	4604      	mov	r4, r0
      r->timer--;
 800d55e:	77c2      	strb	r2, [r0, #31]
      r = r->next;
 800d560:	6800      	ldr	r0, [r0, #0]
  while (r != NULL) {
 800d562:	2800      	cmp	r0, #0
 800d564:	d1f7      	bne.n	800d556 <ip_reass_tmr+0xa>
}
 800d566:	bd38      	pop	{r3, r4, r5, pc}
      r = r->next;
 800d568:	6805      	ldr	r5, [r0, #0]
      ip_reass_free_complete_datagram(tmp, prev);
 800d56a:	4621      	mov	r1, r4
 800d56c:	f7ff ff16 	bl	800d39c <ip_reass_free_complete_datagram>
      r = r->next;
 800d570:	4628      	mov	r0, r5
  while (r != NULL) {
 800d572:	2800      	cmp	r0, #0
 800d574:	d1ef      	bne.n	800d556 <ip_reass_tmr+0xa>
 800d576:	e7f6      	b.n	800d566 <ip_reass_tmr+0x1a>
 800d578:	240106ac 	.word	0x240106ac

0800d57c <ip4_reass>:
{
 800d57c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  fraghdr = (struct ip_hdr *)p->payload;
 800d580:	f8d0 a004 	ldr.w	sl, [r0, #4]
{
 800d584:	b085      	sub	sp, #20
 800d586:	4605      	mov	r5, r0
  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800d588:	f89a 3000 	ldrb.w	r3, [sl]
 800d58c:	f003 030f 	and.w	r3, r3, #15
 800d590:	2b05      	cmp	r3, #5
 800d592:	f040 8089 	bne.w	800d6a8 <ip4_reass+0x12c>
  offset = IPH_OFFSET_BYTES(fraghdr);
 800d596:	f8ba 0006 	ldrh.w	r0, [sl, #6]
 800d59a:	f7f9 fa01 	bl	80069a0 <lwip_htons>
 800d59e:	4606      	mov	r6, r0
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800d5a0:	f8ba 0002 	ldrh.w	r0, [sl, #2]
 800d5a4:	f7f9 f9fc 	bl	80069a0 <lwip_htons>
  hlen = IPH_HL_BYTES(fraghdr);
 800d5a8:	f89a 3000 	ldrb.w	r3, [sl]
 800d5ac:	f003 030f 	and.w	r3, r3, #15
  if (hlen > len) {
 800d5b0:	ebb0 0f83 	cmp.w	r0, r3, lsl #2
 800d5b4:	ea4f 0283 	mov.w	r2, r3, lsl #2
 800d5b8:	d376      	bcc.n	800d6a8 <ip4_reass+0x12c>
  len = (u16_t)(len - hlen);
 800d5ba:	1a83      	subs	r3, r0, r2
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800d5bc:	f8df 82e8 	ldr.w	r8, [pc, #744]	; 800d8a8 <ip4_reass+0x32c>
  clen = pbuf_clen(p);
 800d5c0:	4628      	mov	r0, r5
  len = (u16_t)(len - hlen);
 800d5c2:	b29b      	uxth	r3, r3
 800d5c4:	9300      	str	r3, [sp, #0]
  clen = pbuf_clen(p);
 800d5c6:	f7fa fb03 	bl	8007bd0 <pbuf_clen>
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800d5ca:	f8b8 3000 	ldrh.w	r3, [r8]
  clen = pbuf_clen(p);
 800d5ce:	4607      	mov	r7, r0
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800d5d0:	4403      	add	r3, r0
 800d5d2:	2b0a      	cmp	r3, #10
 800d5d4:	f300 80e5 	bgt.w	800d7a2 <ip4_reass+0x226>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800d5d8:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 800d8ac <ip4_reass+0x330>
 800d5dc:	f8d9 4000 	ldr.w	r4, [r9]
 800d5e0:	2c00      	cmp	r4, #0
 800d5e2:	f000 80ec 	beq.w	800d7be <ip4_reass+0x242>
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800d5e6:	f8da 200c 	ldr.w	r2, [sl, #12]
 800d5ea:	e003      	b.n	800d5f4 <ip4_reass+0x78>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800d5ec:	6824      	ldr	r4, [r4, #0]
 800d5ee:	2c00      	cmp	r4, #0
 800d5f0:	f000 80e5 	beq.w	800d7be <ip4_reass+0x242>
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800d5f4:	6963      	ldr	r3, [r4, #20]
 800d5f6:	4293      	cmp	r3, r2
 800d5f8:	d1f8      	bne.n	800d5ec <ip4_reass+0x70>
 800d5fa:	f8da 3010 	ldr.w	r3, [sl, #16]
 800d5fe:	69a1      	ldr	r1, [r4, #24]
 800d600:	4299      	cmp	r1, r3
 800d602:	d1f3      	bne.n	800d5ec <ip4_reass+0x70>
 800d604:	89a1      	ldrh	r1, [r4, #12]
 800d606:	f8ba 3004 	ldrh.w	r3, [sl, #4]
 800d60a:	4299      	cmp	r1, r3
 800d60c:	d1ee      	bne.n	800d5ec <ip4_reass+0x70>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800d60e:	f8ba 0006 	ldrh.w	r0, [sl, #6]
 800d612:	f7f9 f9c5 	bl	80069a0 <lwip_htons>
 800d616:	f3c0 000c 	ubfx	r0, r0, #0, #13
 800d61a:	2800      	cmp	r0, #0
 800d61c:	f000 80a9 	beq.w	800d772 <ip4_reass+0x1f6>
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800d620:	f8ba 3006 	ldrh.w	r3, [sl, #6]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800d624:	f3c6 060c 	ubfx	r6, r6, #0, #13
  if (is_last) {
 800d628:	f013 0320 	ands.w	r3, r3, #32
  offset = IPH_OFFSET_BYTES(fraghdr);
 800d62c:	ea4f 06c6 	mov.w	r6, r6, lsl #3
  if (is_last) {
 800d630:	9301      	str	r3, [sp, #4]
 800d632:	d108      	bne.n	800d646 <ip4_reass+0xca>
    u16_t datagram_len = (u16_t)(offset + len);
 800d634:	9b00      	ldr	r3, [sp, #0]
 800d636:	18f3      	adds	r3, r6, r3
 800d638:	b29b      	uxth	r3, r3
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800d63a:	429e      	cmp	r6, r3
 800d63c:	d812      	bhi.n	800d664 <ip4_reass+0xe8>
 800d63e:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800d642:	4293      	cmp	r3, r2
 800d644:	d80e      	bhi.n	800d664 <ip4_reass+0xe8>
  fraghdr = (struct ip_hdr *)new_p->payload;
 800d646:	f8d5 a004 	ldr.w	sl, [r5, #4]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800d64a:	f8ba 0002 	ldrh.w	r0, [sl, #2]
 800d64e:	f7f9 f9a7 	bl	80069a0 <lwip_htons>
  hlen = IPH_HL_BYTES(fraghdr);
 800d652:	f89a 3000 	ldrb.w	r3, [sl]
 800d656:	f003 030f 	and.w	r3, r3, #15
  if (hlen > len) {
 800d65a:	ebb0 0f83 	cmp.w	r0, r3, lsl #2
 800d65e:	ea4f 0283 	mov.w	r2, r3, lsl #2
 800d662:	d229      	bcs.n	800d6b8 <ip4_reass+0x13c>
  if (ipr->p == NULL) {
 800d664:	6866      	ldr	r6, [r4, #4]
 800d666:	b9fe      	cbnz	r6, 800d6a8 <ip4_reass+0x12c>
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800d668:	f8d9 3000 	ldr.w	r3, [r9]
 800d66c:	42a3      	cmp	r3, r4
 800d66e:	d014      	beq.n	800d69a <ip4_reass+0x11e>
 800d670:	4b89      	ldr	r3, [pc, #548]	; (800d898 <ip4_reass+0x31c>)
 800d672:	f240 22ab 	movw	r2, #683	; 0x2ab
 800d676:	4989      	ldr	r1, [pc, #548]	; (800d89c <ip4_reass+0x320>)
 800d678:	4889      	ldr	r0, [pc, #548]	; (800d8a0 <ip4_reass+0x324>)
 800d67a:	f000 fcd3 	bl	800e024 <iprintf>
  if (reassdatagrams == ipr) {
 800d67e:	f8d9 3000 	ldr.w	r3, [r9]
 800d682:	429c      	cmp	r4, r3
 800d684:	d009      	beq.n	800d69a <ip4_reass+0x11e>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800d686:	4b84      	ldr	r3, [pc, #528]	; (800d898 <ip4_reass+0x31c>)
 800d688:	f240 1245 	movw	r2, #325	; 0x145
 800d68c:	4985      	ldr	r1, [pc, #532]	; (800d8a4 <ip4_reass+0x328>)
 800d68e:	4884      	ldr	r0, [pc, #528]	; (800d8a0 <ip4_reass+0x324>)
 800d690:	f000 fcc8 	bl	800e024 <iprintf>
    prev->next = ipr->next;
 800d694:	6823      	ldr	r3, [r4, #0]
 800d696:	6033      	str	r3, [r6, #0]
 800d698:	deff      	udf	#255	; 0xff
    reassdatagrams = ipr->next;
 800d69a:	6823      	ldr	r3, [r4, #0]
  memp_free(MEMP_REASSDATA, ipr);
 800d69c:	4621      	mov	r1, r4
 800d69e:	2004      	movs	r0, #4
    reassdatagrams = ipr->next;
 800d6a0:	f8c9 3000 	str.w	r3, [r9]
  memp_free(MEMP_REASSDATA, ipr);
 800d6a4:	f7f9 fd58 	bl	8007158 <memp_free>
  pbuf_free(p);
 800d6a8:	4628      	mov	r0, r5
  return NULL;
 800d6aa:	2600      	movs	r6, #0
  pbuf_free(p);
 800d6ac:	f7fa f91a 	bl	80078e4 <pbuf_free>
}
 800d6b0:	4630      	mov	r0, r6
 800d6b2:	b005      	add	sp, #20
 800d6b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  len = (u16_t)(len - hlen);
 800d6b8:	1a83      	subs	r3, r0, r2
  offset = IPH_OFFSET_BYTES(fraghdr);
 800d6ba:	f8ba 0006 	ldrh.w	r0, [sl, #6]
  len = (u16_t)(len - hlen);
 800d6be:	fa1f fa83 	uxth.w	sl, r3
  offset = IPH_OFFSET_BYTES(fraghdr);
 800d6c2:	f7f9 f96d 	bl	80069a0 <lwip_htons>
 800d6c6:	f3c0 000c 	ubfx	r0, r0, #0, #13
  iprh = (struct ip_reass_helper *)new_p->payload;
 800d6ca:	f8d5 b004 	ldr.w	fp, [r5, #4]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800d6ce:	00c2      	lsls	r2, r0, #3
  iprh = (struct ip_reass_helper *)new_p->payload;
 800d6d0:	f8cd b008 	str.w	fp, [sp, #8]
  iprh->end = (u16_t)(offset + len);
 800d6d4:	eb0a 0302 	add.w	r3, sl, r2
  iprh->start = offset;
 800d6d8:	f8ab 2004 	strh.w	r2, [fp, #4]
  iprh->end = (u16_t)(offset + len);
 800d6dc:	f8ab 3006 	strh.w	r3, [fp, #6]
 800d6e0:	b29b      	uxth	r3, r3
 800d6e2:	4619      	mov	r1, r3
 800d6e4:	9303      	str	r3, [sp, #12]
  iprh->next_pbuf = NULL;
 800d6e6:	2300      	movs	r3, #0
  if (iprh->end < offset) {
 800d6e8:	428a      	cmp	r2, r1
  iprh->next_pbuf = NULL;
 800d6ea:	f88b 3000 	strb.w	r3, [fp]
 800d6ee:	f88b 3001 	strb.w	r3, [fp, #1]
 800d6f2:	f88b 3002 	strb.w	r3, [fp, #2]
 800d6f6:	f88b 3003 	strb.w	r3, [fp, #3]
  if (iprh->end < offset) {
 800d6fa:	d8b3      	bhi.n	800d664 <ip4_reass+0xe8>
  for (q = ipr->p; q != NULL;) {
 800d6fc:	6861      	ldr	r1, [r4, #4]
 800d6fe:	2900      	cmp	r1, #0
 800d700:	f000 80be 	beq.w	800d880 <ip4_reass+0x304>
  int valid = 1;
 800d704:	f04f 0a01 	mov.w	sl, #1
 800d708:	4694      	mov	ip, r2
 800d70a:	e00e      	b.n	800d72a <ip4_reass+0x1ae>
    } else if (iprh->start == iprh_tmp->start) {
 800d70c:	d0cc      	beq.n	800d6a8 <ip4_reass+0x12c>
    } else if (iprh->start < iprh_tmp->end) {
 800d70e:	f8b3 e006 	ldrh.w	lr, [r3, #6]
 800d712:	45f4      	cmp	ip, lr
 800d714:	d3c8      	bcc.n	800d6a8 <ip4_reass+0x12c>
      if (iprh_prev != NULL) {
 800d716:	b122      	cbz	r2, 800d722 <ip4_reass+0x1a6>
        if (iprh_prev->end != iprh_tmp->start) {
 800d718:	88d2      	ldrh	r2, [r2, #6]
          valid = 0;
 800d71a:	4282      	cmp	r2, r0
 800d71c:	bf18      	it	ne
 800d71e:	f04f 0a00 	movne.w	sl, #0
    q = iprh_tmp->next_pbuf;
 800d722:	6819      	ldr	r1, [r3, #0]
  for (q = ipr->p; q != NULL;) {
 800d724:	2900      	cmp	r1, #0
 800d726:	f000 8084 	beq.w	800d832 <ip4_reass+0x2b6>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800d72a:	461a      	mov	r2, r3
 800d72c:	684b      	ldr	r3, [r1, #4]
    if (iprh->start < iprh_tmp->start) {
 800d72e:	8898      	ldrh	r0, [r3, #4]
 800d730:	4584      	cmp	ip, r0
 800d732:	d2eb      	bcs.n	800d70c <ip4_reass+0x190>
      iprh->next_pbuf = q;
 800d734:	4613      	mov	r3, r2
 800d736:	f8cb 1000 	str.w	r1, [fp]
 800d73a:	4662      	mov	r2, ip
 800d73c:	469c      	mov	ip, r3
      if (iprh_prev != NULL) {
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d060      	beq.n	800d804 <ip4_reass+0x288>
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800d742:	88db      	ldrh	r3, [r3, #6]
 800d744:	429a      	cmp	r2, r3
 800d746:	d3af      	bcc.n	800d6a8 <ip4_reass+0x12c>
 800d748:	9903      	ldr	r1, [sp, #12]
 800d74a:	4281      	cmp	r1, r0
 800d74c:	d8ac      	bhi.n	800d6a8 <ip4_reass+0x12c>
        if (iprh_prev->end != iprh->start) {
 800d74e:	429a      	cmp	r2, r3
        iprh_prev->next_pbuf = new_p;
 800d750:	f8cc 5000 	str.w	r5, [ip]
        if (iprh_prev->end != iprh->start) {
 800d754:	d05b      	beq.n	800d80e <ip4_reass+0x292>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800d756:	9b01      	ldr	r3, [sp, #4]
 800d758:	2b00      	cmp	r3, #0
 800d75a:	f000 8084 	beq.w	800d866 <ip4_reass+0x2ea>
 800d75e:	7fa3      	ldrb	r3, [r4, #30]
 800d760:	07db      	lsls	r3, r3, #31
 800d762:	d45c      	bmi.n	800d81e <ip4_reass+0x2a2>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800d764:	f8b8 3000 	ldrh.w	r3, [r8]
  return NULL;
 800d768:	2600      	movs	r6, #0
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800d76a:	443b      	add	r3, r7
 800d76c:	f8a8 3000 	strh.w	r3, [r8]
  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800d770:	e79e      	b.n	800d6b0 <ip4_reass+0x134>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800d772:	89e0      	ldrh	r0, [r4, #14]
 800d774:	f7f9 f914 	bl	80069a0 <lwip_htons>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800d778:	f3c0 000c 	ubfx	r0, r0, #0, #13
 800d77c:	2800      	cmp	r0, #0
 800d77e:	f43f af4f 	beq.w	800d620 <ip4_reass+0xa4>
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800d782:	f8da 3000 	ldr.w	r3, [sl]
 800d786:	f8da 0004 	ldr.w	r0, [sl, #4]
 800d78a:	f8da 1008 	ldr.w	r1, [sl, #8]
 800d78e:	f8da 200c 	ldr.w	r2, [sl, #12]
 800d792:	60a3      	str	r3, [r4, #8]
 800d794:	60e0      	str	r0, [r4, #12]
 800d796:	6121      	str	r1, [r4, #16]
 800d798:	6162      	str	r2, [r4, #20]
 800d79a:	f8da 3010 	ldr.w	r3, [sl, #16]
 800d79e:	61a3      	str	r3, [r4, #24]
 800d7a0:	e73e      	b.n	800d620 <ip4_reass+0xa4>
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800d7a2:	4601      	mov	r1, r0
 800d7a4:	4650      	mov	r0, sl
 800d7a6:	f7ff fe97 	bl	800d4d8 <ip_reass_remove_oldest_datagram>
 800d7aa:	2800      	cmp	r0, #0
 800d7ac:	f43f af7c 	beq.w	800d6a8 <ip4_reass+0x12c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800d7b0:	f8b8 3000 	ldrh.w	r3, [r8]
 800d7b4:	443b      	add	r3, r7
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800d7b6:	2b0a      	cmp	r3, #10
 800d7b8:	f77f af0e 	ble.w	800d5d8 <ip4_reass+0x5c>
 800d7bc:	e774      	b.n	800d6a8 <ip4_reass+0x12c>
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800d7be:	2004      	movs	r0, #4
 800d7c0:	f7f9 fc84 	bl	80070cc <memp_malloc>
  if (ipr == NULL) {
 800d7c4:	4604      	mov	r4, r0
 800d7c6:	b178      	cbz	r0, 800d7e8 <ip4_reass+0x26c>
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800d7c8:	2300      	movs	r3, #0
 800d7ca:	61e3      	str	r3, [r4, #28]
 800d7cc:	60a3      	str	r3, [r4, #8]
 800d7ce:	60e3      	str	r3, [r4, #12]
 800d7d0:	6123      	str	r3, [r4, #16]
 800d7d2:	6163      	str	r3, [r4, #20]
 800d7d4:	61a3      	str	r3, [r4, #24]
 800d7d6:	6063      	str	r3, [r4, #4]
  ipr->next = reassdatagrams;
 800d7d8:	f8d9 3000 	ldr.w	r3, [r9]
  reassdatagrams = ipr;
 800d7dc:	f8c9 4000 	str.w	r4, [r9]
  ipr->next = reassdatagrams;
 800d7e0:	6023      	str	r3, [r4, #0]
  ipr->timer = IP_REASS_MAXAGE;
 800d7e2:	230f      	movs	r3, #15
 800d7e4:	77e3      	strb	r3, [r4, #31]
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800d7e6:	e7cc      	b.n	800d782 <ip4_reass+0x206>
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800d7e8:	4639      	mov	r1, r7
 800d7ea:	4650      	mov	r0, sl
 800d7ec:	f7ff fe74 	bl	800d4d8 <ip_reass_remove_oldest_datagram>
 800d7f0:	4287      	cmp	r7, r0
 800d7f2:	f73f af59 	bgt.w	800d6a8 <ip4_reass+0x12c>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800d7f6:	2004      	movs	r0, #4
 800d7f8:	f7f9 fc68 	bl	80070cc <memp_malloc>
    if (ipr == NULL)
 800d7fc:	4604      	mov	r4, r0
 800d7fe:	2800      	cmp	r0, #0
 800d800:	d1e2      	bne.n	800d7c8 <ip4_reass+0x24c>
 800d802:	e751      	b.n	800d6a8 <ip4_reass+0x12c>
        if (iprh->end > iprh_tmp->start) {
 800d804:	9b03      	ldr	r3, [sp, #12]
 800d806:	4283      	cmp	r3, r0
 800d808:	f63f af4e 	bhi.w	800d6a8 <ip4_reass+0x12c>
        ipr->p = new_p;
 800d80c:	6065      	str	r5, [r4, #4]
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800d80e:	9b01      	ldr	r3, [sp, #4]
 800d810:	b19b      	cbz	r3, 800d83a <ip4_reass+0x2be>
 800d812:	7fa3      	ldrb	r3, [r4, #30]
 800d814:	07d9      	lsls	r1, r3, #31
 800d816:	d5a5      	bpl.n	800d764 <ip4_reass+0x1e8>
    if (valid) {
 800d818:	f1ba 0f00 	cmp.w	sl, #0
 800d81c:	d138      	bne.n	800d890 <ip4_reass+0x314>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800d81e:	f8b8 3000 	ldrh.w	r3, [r8]
 800d822:	443b      	add	r3, r7
 800d824:	f8a8 3000 	strh.w	r3, [r8]
  return NULL;
 800d828:	2600      	movs	r6, #0
}
 800d82a:	4630      	mov	r0, r6
 800d82c:	b005      	add	sp, #20
 800d82e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (iprh_prev->end != iprh->start) {
 800d832:	45f4      	cmp	ip, lr
      iprh_prev->next_pbuf = new_p;
 800d834:	601d      	str	r5, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800d836:	d18e      	bne.n	800d756 <ip4_reass+0x1da>
 800d838:	e7e9      	b.n	800d80e <ip4_reass+0x292>
    if (valid) {
 800d83a:	f1ba 0f00 	cmp.w	sl, #0
 800d83e:	d012      	beq.n	800d866 <ip4_reass+0x2ea>
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800d840:	6863      	ldr	r3, [r4, #4]
 800d842:	b183      	cbz	r3, 800d866 <ip4_reass+0x2ea>
 800d844:	6859      	ldr	r1, [r3, #4]
 800d846:	888b      	ldrh	r3, [r1, #4]
 800d848:	2b00      	cmp	r3, #0
 800d84a:	d031      	beq.n	800d8b0 <ip4_reass+0x334>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800d84c:	f8b8 3000 	ldrh.w	r3, [r8]
 800d850:	443b      	add	r3, r7
 800d852:	f8a8 3000 	strh.w	r3, [r8]
  if (is_last) {
 800d856:	9b01      	ldr	r3, [sp, #4]
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d1e5      	bne.n	800d828 <ip4_reass+0x2ac>
 800d85c:	e008      	b.n	800d870 <ip4_reass+0x2f4>
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800d85e:	f8bb 3004 	ldrh.w	r3, [fp, #4]
 800d862:	4659      	mov	r1, fp
 800d864:	b323      	cbz	r3, 800d8b0 <ip4_reass+0x334>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800d866:	f8b8 3000 	ldrh.w	r3, [r8]
 800d86a:	443b      	add	r3, r7
 800d86c:	f8a8 3000 	strh.w	r3, [r8]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800d870:	7fa3      	ldrb	r3, [r4, #30]
    u16_t datagram_len = (u16_t)(offset + len);
 800d872:	9a00      	ldr	r2, [sp, #0]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800d874:	f043 0301 	orr.w	r3, r3, #1
    u16_t datagram_len = (u16_t)(offset + len);
 800d878:	4416      	add	r6, r2
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800d87a:	77a3      	strb	r3, [r4, #30]
    ipr->datagram_len = datagram_len;
 800d87c:	83a6      	strh	r6, [r4, #28]
  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800d87e:	e7d3      	b.n	800d828 <ip4_reass+0x2ac>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800d880:	9b01      	ldr	r3, [sp, #4]
      ipr->p = new_p;
 800d882:	6065      	str	r5, [r4, #4]
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800d884:	2b00      	cmp	r3, #0
 800d886:	d0ea      	beq.n	800d85e <ip4_reass+0x2e2>
 800d888:	7fa3      	ldrb	r3, [r4, #30]
 800d88a:	07da      	lsls	r2, r3, #31
 800d88c:	f57f af6a 	bpl.w	800d764 <ip4_reass+0x1e8>
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800d890:	6863      	ldr	r3, [r4, #4]
 800d892:	2b00      	cmp	r3, #0
 800d894:	d0c3      	beq.n	800d81e <ip4_reass+0x2a2>
 800d896:	e7d5      	b.n	800d844 <ip4_reass+0x2c8>
 800d898:	08011644 	.word	0x08011644
 800d89c:	0801175c 	.word	0x0801175c
 800d8a0:	0800ef30 	.word	0x0800ef30
 800d8a4:	080116cc 	.word	0x080116cc
 800d8a8:	240106a8 	.word	0x240106a8
 800d8ac:	240106ac 	.word	0x240106ac
        q = iprh->next_pbuf;
 800d8b0:	f8db 3000 	ldr.w	r3, [fp]
        while (q != NULL) {
 800d8b4:	b153      	cbz	r3, 800d8cc <ip4_reass+0x350>
 800d8b6:	9a02      	ldr	r2, [sp, #8]
          iprh = (struct ip_reass_helper *)q->payload;
 800d8b8:	4610      	mov	r0, r2
 800d8ba:	685a      	ldr	r2, [r3, #4]
          if (iprh_prev->end != iprh->start) {
 800d8bc:	88c0      	ldrh	r0, [r0, #6]
 800d8be:	8893      	ldrh	r3, [r2, #4]
 800d8c0:	4298      	cmp	r0, r3
 800d8c2:	d1c3      	bne.n	800d84c <ip4_reass+0x2d0>
          q = iprh->next_pbuf;
 800d8c4:	6813      	ldr	r3, [r2, #0]
        while (q != NULL) {
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	d1f6      	bne.n	800d8b8 <ip4_reass+0x33c>
 800d8ca:	9202      	str	r2, [sp, #8]
          LWIP_ASSERT("sanity check",
 800d8cc:	9b02      	ldr	r3, [sp, #8]
 800d8ce:	428b      	cmp	r3, r1
 800d8d0:	d110      	bne.n	800d8f4 <ip4_reass+0x378>
 800d8d2:	4b3e      	ldr	r3, [pc, #248]	; (800d9cc <ip4_reass+0x450>)
 800d8d4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800d8d8:	493d      	ldr	r1, [pc, #244]	; (800d9d0 <ip4_reass+0x454>)
 800d8da:	483e      	ldr	r0, [pc, #248]	; (800d9d4 <ip4_reass+0x458>)
 800d8dc:	f000 fba2 	bl	800e024 <iprintf>
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800d8e0:	9b02      	ldr	r3, [sp, #8]
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	b133      	cbz	r3, 800d8f4 <ip4_reass+0x378>
 800d8e6:	4b39      	ldr	r3, [pc, #228]	; (800d9cc <ip4_reass+0x450>)
 800d8e8:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 800d8ec:	493a      	ldr	r1, [pc, #232]	; (800d9d8 <ip4_reass+0x45c>)
 800d8ee:	4839      	ldr	r0, [pc, #228]	; (800d9d4 <ip4_reass+0x458>)
 800d8f0:	f000 fb98 	bl	800e024 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800d8f4:	f8b8 3000 	ldrh.w	r3, [r8]
 800d8f8:	443b      	add	r3, r7
 800d8fa:	f8a8 3000 	strh.w	r3, [r8]
  if (is_last) {
 800d8fe:	9b01      	ldr	r3, [sp, #4]
 800d900:	2b00      	cmp	r3, #0
 800d902:	d156      	bne.n	800d9b2 <ip4_reass+0x436>
    u16_t datagram_len = (u16_t)(offset + len);
 800d904:	9800      	ldr	r0, [sp, #0]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800d906:	7fa3      	ldrb	r3, [r4, #30]
    u16_t datagram_len = (u16_t)(offset + len);
 800d908:	4430      	add	r0, r6
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800d90a:	f043 0301 	orr.w	r3, r3, #1
    u16_t datagram_len = (u16_t)(offset + len);
 800d90e:	b280      	uxth	r0, r0
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800d910:	77a3      	strb	r3, [r4, #30]
    ipr->datagram_len = datagram_len;
 800d912:	83a0      	strh	r0, [r4, #28]
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800d914:	6863      	ldr	r3, [r4, #4]
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800d916:	3014      	adds	r0, #20
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800d918:	68e5      	ldr	r5, [r4, #12]
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800d91a:	685e      	ldr	r6, [r3, #4]
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800d91c:	b280      	uxth	r0, r0
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800d91e:	68a3      	ldr	r3, [r4, #8]
 800d920:	6921      	ldr	r1, [r4, #16]
 800d922:	6962      	ldr	r2, [r4, #20]
 800d924:	6075      	str	r5, [r6, #4]
 800d926:	60b1      	str	r1, [r6, #8]
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800d928:	6835      	ldr	r5, [r6, #0]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800d92a:	60f2      	str	r2, [r6, #12]
 800d92c:	6033      	str	r3, [r6, #0]
 800d92e:	69a3      	ldr	r3, [r4, #24]
 800d930:	6133      	str	r3, [r6, #16]
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800d932:	f7f9 f835 	bl	80069a0 <lwip_htons>
    IPH_OFFSET_SET(fraghdr, 0);
 800d936:	2300      	movs	r3, #0
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800d938:	8070      	strh	r0, [r6, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800d93a:	71b3      	strb	r3, [r6, #6]
 800d93c:	71f3      	strb	r3, [r6, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800d93e:	72b3      	strb	r3, [r6, #10]
 800d940:	72f3      	strb	r3, [r6, #11]
    p = ipr->p;
 800d942:	6866      	ldr	r6, [r4, #4]
    while (r != NULL) {
 800d944:	b15d      	cbz	r5, 800d95e <ip4_reass+0x3e2>
      iprh = (struct ip_reass_helper *)r->payload;
 800d946:	686f      	ldr	r7, [r5, #4]
      pbuf_remove_header(r, IP_HLEN);
 800d948:	4628      	mov	r0, r5
 800d94a:	2114      	movs	r1, #20
 800d94c:	f7f9 ff5e 	bl	800780c <pbuf_remove_header>
      pbuf_cat(p, r);
 800d950:	4629      	mov	r1, r5
 800d952:	4630      	mov	r0, r6
 800d954:	f7fa f966 	bl	8007c24 <pbuf_cat>
      r = iprh->next_pbuf;
 800d958:	683d      	ldr	r5, [r7, #0]
    while (r != NULL) {
 800d95a:	2d00      	cmp	r5, #0
 800d95c:	d1f3      	bne.n	800d946 <ip4_reass+0x3ca>
    if (ipr == reassdatagrams) {
 800d95e:	f8d9 5000 	ldr.w	r5, [r9]
 800d962:	42a5      	cmp	r5, r4
 800d964:	d005      	beq.n	800d972 <ip4_reass+0x3f6>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800d966:	b335      	cbz	r5, 800d9b6 <ip4_reass+0x43a>
        if (ipr_prev->next == ipr) {
 800d968:	682b      	ldr	r3, [r5, #0]
 800d96a:	42a3      	cmp	r3, r4
 800d96c:	d014      	beq.n	800d998 <ip4_reass+0x41c>
 800d96e:	461d      	mov	r5, r3
 800d970:	e7f9      	b.n	800d966 <ip4_reass+0x3ea>
    reassdatagrams = ipr->next;
 800d972:	6823      	ldr	r3, [r4, #0]
 800d974:	f8c9 3000 	str.w	r3, [r9]
  memp_free(MEMP_REASSDATA, ipr);
 800d978:	4621      	mov	r1, r4
 800d97a:	2004      	movs	r0, #4
 800d97c:	f7f9 fbec 	bl	8007158 <memp_free>
    clen = pbuf_clen(p);
 800d980:	4630      	mov	r0, r6
 800d982:	f7fa f925 	bl	8007bd0 <pbuf_clen>
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800d986:	f8b8 3000 	ldrh.w	r3, [r8]
    clen = pbuf_clen(p);
 800d98a:	4604      	mov	r4, r0
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800d98c:	4283      	cmp	r3, r0
 800d98e:	d306      	bcc.n	800d99e <ip4_reass+0x422>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800d990:	1b1b      	subs	r3, r3, r4
 800d992:	f8a8 3000 	strh.w	r3, [r8]
    return p;
 800d996:	e68b      	b.n	800d6b0 <ip4_reass+0x134>
    prev->next = ipr->next;
 800d998:	6823      	ldr	r3, [r4, #0]
 800d99a:	602b      	str	r3, [r5, #0]
 800d99c:	e7ec      	b.n	800d978 <ip4_reass+0x3fc>
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800d99e:	4b0b      	ldr	r3, [pc, #44]	; (800d9cc <ip4_reass+0x450>)
 800d9a0:	f240 229b 	movw	r2, #667	; 0x29b
 800d9a4:	490d      	ldr	r1, [pc, #52]	; (800d9dc <ip4_reass+0x460>)
 800d9a6:	480b      	ldr	r0, [pc, #44]	; (800d9d4 <ip4_reass+0x458>)
 800d9a8:	f000 fb3c 	bl	800e024 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800d9ac:	f8b8 3000 	ldrh.w	r3, [r8]
 800d9b0:	e7ee      	b.n	800d990 <ip4_reass+0x414>
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800d9b2:	8ba0      	ldrh	r0, [r4, #28]
 800d9b4:	e7ae      	b.n	800d914 <ip4_reass+0x398>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800d9b6:	4b05      	ldr	r3, [pc, #20]	; (800d9cc <ip4_reass+0x450>)
 800d9b8:	f240 1245 	movw	r2, #325	; 0x145
 800d9bc:	4908      	ldr	r1, [pc, #32]	; (800d9e0 <ip4_reass+0x464>)
 800d9be:	4805      	ldr	r0, [pc, #20]	; (800d9d4 <ip4_reass+0x458>)
 800d9c0:	f000 fb30 	bl	800e024 <iprintf>
    prev->next = ipr->next;
 800d9c4:	6823      	ldr	r3, [r4, #0]
 800d9c6:	602b      	str	r3, [r5, #0]
 800d9c8:	deff      	udf	#255	; 0xff
 800d9ca:	bf00      	nop
 800d9cc:	08011644 	.word	0x08011644
 800d9d0:	0801170c 	.word	0x0801170c
 800d9d4:	0800ef30 	.word	0x0800ef30
 800d9d8:	0801171c 	.word	0x0801171c
 800d9dc:	08011740 	.word	0x08011740
 800d9e0:	080116cc 	.word	0x080116cc

0800d9e4 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800d9e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  u16_t newpbuflen = 0;
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800d9e8:	8c8b      	ldrh	r3, [r1, #36]	; 0x24
{
 800d9ea:	b08f      	sub	sp, #60	; 0x3c
 800d9ec:	4606      	mov	r6, r0
 800d9ee:	920c      	str	r2, [sp, #48]	; 0x30
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800d9f0:	f1b3 0214 	subs.w	r2, r3, #20
{
 800d9f4:	9109      	str	r1, [sp, #36]	; 0x24
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800d9f6:	bf48      	it	mi
 800d9f8:	f1a3 020d 	submi.w	r2, r3, #13
  int last;
  u16_t poff = IP_HLEN;
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800d9fc:	6843      	ldr	r3, [r0, #4]
 800d9fe:	9304      	str	r3, [sp, #16]
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800da00:	f3c2 02cf 	ubfx	r2, r2, #3, #16
  iphdr = original_iphdr;
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800da04:	781b      	ldrb	r3, [r3, #0]
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800da06:	9208      	str	r2, [sp, #32]
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800da08:	f003 030f 	and.w	r3, r3, #15
 800da0c:	2b05      	cmp	r3, #5
 800da0e:	ea4f 0583 	mov.w	r5, r3, lsl #2
 800da12:	f040 80e5 	bne.w	800dbe0 <ip4_frag+0x1fc>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800da16:	8943      	ldrh	r3, [r0, #10]
 800da18:	2b13      	cmp	r3, #19
 800da1a:	f240 80e4 	bls.w	800dbe6 <ip4_frag+0x202>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800da1e:	9b04      	ldr	r3, [sp, #16]
 800da20:	88d8      	ldrh	r0, [r3, #6]
 800da22:	f7f8 ffbd 	bl	80069a0 <lwip_htons>
  ofo = tmp & IP_OFFMASK;
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;

  left = (u16_t)(p->tot_len - IP_HLEN);
 800da26:	8933      	ldrh	r3, [r6, #8]
  ofo = tmp & IP_OFFMASK;
 800da28:	f3c0 020c 	ubfx	r2, r0, #0, #13
  left = (u16_t)(p->tot_len - IP_HLEN);
 800da2c:	3b14      	subs	r3, #20
  ofo = tmp & IP_OFFMASK;
 800da2e:	9207      	str	r2, [sp, #28]
  mf_set = tmp & IP_MF;
 800da30:	f400 5200 	and.w	r2, r0, #8192	; 0x2000
  left = (u16_t)(p->tot_len - IP_HLEN);
 800da34:	b29b      	uxth	r3, r3
 800da36:	920d      	str	r2, [sp, #52]	; 0x34
 800da38:	9305      	str	r3, [sp, #20]

  while (left) {
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	f000 8098 	beq.w	800db70 <ip4_frag+0x18c>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800da40:	9b08      	ldr	r3, [sp, #32]
  u16_t newpbuflen = 0;
 800da42:	2400      	movs	r4, #0
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
    if (rambuf == NULL) {
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800da44:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800dc08 <ip4_frag+0x224>
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800da48:	00db      	lsls	r3, r3, #3
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800da4a:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 800dc10 <ip4_frag+0x22c>
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800da4e:	b29b      	uxth	r3, r3
 800da50:	930a      	str	r3, [sp, #40]	; 0x28
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800da52:	f44f 7220 	mov.w	r2, #640	; 0x280
 800da56:	2114      	movs	r1, #20
 800da58:	200e      	movs	r0, #14
 800da5a:	f7f9 ffb3 	bl	80079c4 <pbuf_alloc>
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800da5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800da60:	9a05      	ldr	r2, [sp, #20]
    if (rambuf == NULL) {
 800da62:	9003      	str	r0, [sp, #12]
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800da64:	4293      	cmp	r3, r2
 800da66:	bf28      	it	cs
 800da68:	4613      	movcs	r3, r2
 800da6a:	9306      	str	r3, [sp, #24]
    if (rambuf == NULL) {
 800da6c:	2800      	cmp	r0, #0
 800da6e:	f000 80b4 	beq.w	800dbda <ip4_frag+0x1f6>
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800da72:	8943      	ldrh	r3, [r0, #10]
 800da74:	2b13      	cmp	r3, #19
 800da76:	f240 808c 	bls.w	800db92 <ip4_frag+0x1ae>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800da7a:	9904      	ldr	r1, [sp, #16]
 800da7c:	9b03      	ldr	r3, [sp, #12]
 800da7e:	680a      	ldr	r2, [r1, #0]
 800da80:	685b      	ldr	r3, [r3, #4]
 800da82:	684f      	ldr	r7, [r1, #4]
 800da84:	6888      	ldr	r0, [r1, #8]
 800da86:	68c9      	ldr	r1, [r1, #12]
 800da88:	605f      	str	r7, [r3, #4]
 800da8a:	60d9      	str	r1, [r3, #12]
 800da8c:	9904      	ldr	r1, [sp, #16]
 800da8e:	601a      	str	r2, [r3, #0]
 800da90:	6098      	str	r0, [r3, #8]
 800da92:	690a      	ldr	r2, [r1, #16]
 800da94:	611a      	str	r2, [r3, #16]
    iphdr = (struct ip_hdr *)rambuf->payload;
 800da96:	9b03      	ldr	r3, [sp, #12]
 800da98:	685b      	ldr	r3, [r3, #4]
 800da9a:	930b      	str	r3, [sp, #44]	; 0x2c

    left_to_copy = fragsize;
    while (left_to_copy) {
 800da9c:	9b06      	ldr	r3, [sp, #24]
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	d034      	beq.n	800db0c <ip4_frag+0x128>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800daa2:	9302      	str	r3, [sp, #8]
      u16_t plen = (u16_t)(p->len - poff);
 800daa4:	8973      	ldrh	r3, [r6, #10]
 800daa6:	1b5c      	subs	r4, r3, r5
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800daa8:	42ab      	cmp	r3, r5
      u16_t plen = (u16_t)(p->len - poff);
 800daaa:	b2a4      	uxth	r4, r4
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800daac:	d369      	bcc.n	800db82 <ip4_frag+0x19e>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800daae:	9b02      	ldr	r3, [sp, #8]
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800dab0:	2005      	movs	r0, #5
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800dab2:	429c      	cmp	r4, r3
 800dab4:	bf28      	it	cs
 800dab6:	461c      	movcs	r4, r3
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800dab8:	2c00      	cmp	r4, #0
 800daba:	d05b      	beq.n	800db74 <ip4_frag+0x190>
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800dabc:	f7f9 fb06 	bl	80070cc <memp_malloc>
 800dac0:	4683      	mov	fp, r0
      if (pcr == NULL) {
        pbuf_free(rambuf);
        goto memerr;
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800dac2:	2241      	movs	r2, #65	; 0x41
 800dac4:	4621      	mov	r1, r4
 800dac6:	2000      	movs	r0, #0
      if (pcr == NULL) {
 800dac8:	f1bb 0f00 	cmp.w	fp, #0
 800dacc:	d06c      	beq.n	800dba8 <ip4_frag+0x1c4>
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800dace:	9401      	str	r4, [sp, #4]
 800dad0:	465b      	mov	r3, fp
 800dad2:	6877      	ldr	r7, [r6, #4]
 800dad4:	eb07 0c05 	add.w	ip, r7, r5
 800dad8:	f8cd c000 	str.w	ip, [sp]
 800dadc:	f7f9 fe46 	bl	800776c <pbuf_alloced_custom>
 800dae0:	4682      	mov	sl, r0
      if (newpbuf == NULL) {
        ip_frag_free_pbuf_custom_ref(pcr);
        pbuf_free(rambuf);
        goto memerr;
      }
      pbuf_ref(p);
 800dae2:	4630      	mov	r0, r6
      if (newpbuf == NULL) {
 800dae4:	f1ba 0f00 	cmp.w	sl, #0
 800dae8:	d068      	beq.n	800dbbc <ip4_frag+0x1d8>
      pbuf_ref(p);
 800daea:	f7fa f87d 	bl	8007be8 <pbuf_ref>
      pcr->original = p;
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800daee:	4b43      	ldr	r3, [pc, #268]	; (800dbfc <ip4_frag+0x218>)

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800daf0:	4651      	mov	r1, sl
 800daf2:	9803      	ldr	r0, [sp, #12]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800daf4:	f8cb 3010 	str.w	r3, [fp, #16]
      pcr->original = p;
 800daf8:	f8cb 6014 	str.w	r6, [fp, #20]
      pbuf_cat(rambuf, newpbuf);
 800dafc:	f7fa f892 	bl	8007c24 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800db00:	9b02      	ldr	r3, [sp, #8]
 800db02:	1b1f      	subs	r7, r3, r4
 800db04:	b2bb      	uxth	r3, r7
 800db06:	9302      	str	r3, [sp, #8]
      if (left_to_copy) {
 800db08:	2b00      	cmp	r3, #0
 800db0a:	d133      	bne.n	800db74 <ip4_frag+0x190>
    }
    poff = (u16_t)(poff + newpbuflen);
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800db0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    poff = (u16_t)(poff + newpbuflen);
 800db0e:	4425      	add	r5, r4

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800db10:	9a07      	ldr	r2, [sp, #28]
    last = (left <= netif->mtu - IP_HLEN);
 800db12:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    poff = (u16_t)(poff + newpbuflen);
 800db14:	b2ad      	uxth	r5, r5
    tmp = (IP_OFFMASK & (ofo));
 800db16:	f3c2 000c 	ubfx	r0, r2, #0, #13
    if (!last || mf_set) {
 800db1a:	9a05      	ldr	r2, [sp, #20]
    last = (left <= netif->mtu - IP_HLEN);
 800db1c:	3b13      	subs	r3, #19
    if (!last || mf_set) {
 800db1e:	4293      	cmp	r3, r2
 800db20:	dd3f      	ble.n	800dba2 <ip4_frag+0x1be>
 800db22:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800db24:	2b00      	cmp	r3, #0
 800db26:	d13c      	bne.n	800dba2 <ip4_frag+0x1be>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800db28:	f7f8 ff3a 	bl	80069a0 <lwip_htons>
 800db2c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800db2e:	9b06      	ldr	r3, [sp, #24]
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800db30:	80f8      	strh	r0, [r7, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800db32:	f103 0014 	add.w	r0, r3, #20
 800db36:	b280      	uxth	r0, r0
 800db38:	f7f8 ff32 	bl	80069a0 <lwip_htons>
    IPH_CHKSUM_SET(iphdr, 0);
 800db3c:	2300      	movs	r3, #0
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800db3e:	8078      	strh	r0, [r7, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800db40:	72bb      	strb	r3, [r7, #10]
 800db42:	72fb      	strb	r3, [r7, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800db44:	9809      	ldr	r0, [sp, #36]	; 0x24
 800db46:	9f03      	ldr	r7, [sp, #12]
 800db48:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800db4a:	4639      	mov	r1, r7
 800db4c:	6943      	ldr	r3, [r0, #20]
 800db4e:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800db50:	4638      	mov	r0, r7
 800db52:	f7f9 fec7 	bl	80078e4 <pbuf_free>
    left = (u16_t)(left - fragsize);
 800db56:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
 800db5a:	1ad3      	subs	r3, r2, r3
    ofo = (u16_t)(ofo + nfb);
 800db5c:	e9dd 2107 	ldrd	r2, r1, [sp, #28]
    left = (u16_t)(left - fragsize);
 800db60:	b29b      	uxth	r3, r3
    ofo = (u16_t)(ofo + nfb);
 800db62:	440a      	add	r2, r1
    left = (u16_t)(left - fragsize);
 800db64:	9305      	str	r3, [sp, #20]
    ofo = (u16_t)(ofo + nfb);
 800db66:	b292      	uxth	r2, r2
 800db68:	9207      	str	r2, [sp, #28]
  while (left) {
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	f47f af71 	bne.w	800da52 <ip4_frag+0x6e>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800db70:	2000      	movs	r0, #0
 800db72:	e020      	b.n	800dbb6 <ip4_frag+0x1d2>
        p = p->next;
 800db74:	6836      	ldr	r6, [r6, #0]
  u16_t newpbuflen = 0;
 800db76:	2500      	movs	r5, #0
      u16_t plen = (u16_t)(p->len - poff);
 800db78:	8973      	ldrh	r3, [r6, #10]
 800db7a:	1b5c      	subs	r4, r3, r5
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800db7c:	42ab      	cmp	r3, r5
      u16_t plen = (u16_t)(p->len - poff);
 800db7e:	b2a4      	uxth	r4, r4
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800db80:	d295      	bcs.n	800daae <ip4_frag+0xca>
 800db82:	4643      	mov	r3, r8
 800db84:	f240 322d 	movw	r2, #813	; 0x32d
 800db88:	491d      	ldr	r1, [pc, #116]	; (800dc00 <ip4_frag+0x21c>)
 800db8a:	4648      	mov	r0, r9
 800db8c:	f000 fa4a 	bl	800e024 <iprintf>
 800db90:	e78d      	b.n	800daae <ip4_frag+0xca>
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800db92:	4643      	mov	r3, r8
 800db94:	f44f 7249 	mov.w	r2, #804	; 0x324
 800db98:	491a      	ldr	r1, [pc, #104]	; (800dc04 <ip4_frag+0x220>)
 800db9a:	4648      	mov	r0, r9
 800db9c:	f000 fa42 	bl	800e024 <iprintf>
 800dba0:	e76b      	b.n	800da7a <ip4_frag+0x96>
      tmp = tmp | IP_MF;
 800dba2:	f440 5000 	orr.w	r0, r0, #8192	; 0x2000
 800dba6:	e7bf      	b.n	800db28 <ip4_frag+0x144>
        pbuf_free(rambuf);
 800dba8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800dbac:	4658      	mov	r0, fp
 800dbae:	f7f9 fe99 	bl	80078e4 <pbuf_free>
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800dbb2:	f04f 30ff 	mov.w	r0, #4294967295
}
 800dbb6:	b00f      	add	sp, #60	; 0x3c
 800dbb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  memp_free(MEMP_FRAG_PBUF, p);
 800dbbc:	46da      	mov	sl, fp
 800dbbe:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800dbc2:	2005      	movs	r0, #5
 800dbc4:	4651      	mov	r1, sl
 800dbc6:	f7f9 fac7 	bl	8007158 <memp_free>
        pbuf_free(rambuf);
 800dbca:	4658      	mov	r0, fp
 800dbcc:	f7f9 fe8a 	bl	80078e4 <pbuf_free>
  return ERR_MEM;
 800dbd0:	f04f 30ff 	mov.w	r0, #4294967295
}
 800dbd4:	b00f      	add	sp, #60	; 0x3c
 800dbd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return ERR_MEM;
 800dbda:	f04f 30ff 	mov.w	r0, #4294967295
 800dbde:	e7ea      	b.n	800dbb6 <ip4_frag+0x1d2>
    return ERR_VAL;
 800dbe0:	f06f 0005 	mvn.w	r0, #5
 800dbe4:	e7e7      	b.n	800dbb6 <ip4_frag+0x1d2>
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800dbe6:	4b08      	ldr	r3, [pc, #32]	; (800dc08 <ip4_frag+0x224>)
 800dbe8:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 800dbec:	4907      	ldr	r1, [pc, #28]	; (800dc0c <ip4_frag+0x228>)
 800dbee:	4808      	ldr	r0, [pc, #32]	; (800dc10 <ip4_frag+0x22c>)
 800dbf0:	f000 fa18 	bl	800e024 <iprintf>
 800dbf4:	f06f 0005 	mvn.w	r0, #5
 800dbf8:	e7dd      	b.n	800dbb6 <ip4_frag+0x1d2>
 800dbfa:	bf00      	nop
 800dbfc:	0800d365 	.word	0x0800d365
 800dc00:	080117b8 	.word	0x080117b8
 800dc04:	08011798 	.word	0x08011798
 800dc08:	08011644 	.word	0x08011644
 800dc0c:	0801177c 	.word	0x0801177c
 800dc10:	0800ef30 	.word	0x0800ef30

0800dc14 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800dc14:	b570      	push	{r4, r5, r6, lr}
 800dc16:	4604      	mov	r4, r0
 800dc18:	460d      	mov	r5, r1
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();
 800dc1a:	f7f6 f98d 	bl	8003f38 <sys_check_core_locking>

  if (p->len <= SIZEOF_ETH_HDR) {
 800dc1e:	8963      	ldrh	r3, [r4, #10]
 800dc20:	2b0e      	cmp	r3, #14
 800dc22:	d91a      	bls.n	800dc5a <ethernet_input+0x46>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800dc24:	7be3      	ldrb	r3, [r4, #15]
 800dc26:	b91b      	cbnz	r3, 800dc30 <ethernet_input+0x1c>
    p->if_idx = netif_get_index(netif);
 800dc28:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 800dc2c:	3301      	adds	r3, #1
 800dc2e:	73e3      	strb	r3, [r4, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800dc30:	6860      	ldr	r0, [r4, #4]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800dc32:	7803      	ldrb	r3, [r0, #0]
  type = ethhdr->type;
 800dc34:	8986      	ldrh	r6, [r0, #12]
  if (ethhdr->dest.addr[0] & 1) {
 800dc36:	07d9      	lsls	r1, r3, #31
 800dc38:	d50a      	bpl.n	800dc50 <ethernet_input+0x3c>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800dc3a:	2b01      	cmp	r3, #1
 800dc3c:	d030      	beq.n	800dca0 <ethernet_input+0x8c>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800dc3e:	2206      	movs	r2, #6
 800dc40:	491d      	ldr	r1, [pc, #116]	; (800dcb8 <ethernet_input+0xa4>)
 800dc42:	f000 fa44 	bl	800e0ce <memcmp>
 800dc46:	b918      	cbnz	r0, 800dc50 <ethernet_input+0x3c>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800dc48:	7b63      	ldrb	r3, [r4, #13]
 800dc4a:	f043 0308 	orr.w	r3, r3, #8
 800dc4e:	7363      	strb	r3, [r4, #13]
    }
  }

  switch (type) {
 800dc50:	2e08      	cmp	r6, #8
 800dc52:	d016      	beq.n	800dc82 <ethernet_input+0x6e>
 800dc54:	f5b6 6fc1 	cmp.w	r6, #1544	; 0x608
 800dc58:	d004      	beq.n	800dc64 <ethernet_input+0x50>
  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;

free_and_return:
  pbuf_free(p);
 800dc5a:	4620      	mov	r0, r4
 800dc5c:	f7f9 fe42 	bl	80078e4 <pbuf_free>
  return ERR_OK;
}
 800dc60:	2000      	movs	r0, #0
 800dc62:	bd70      	pop	{r4, r5, r6, pc}
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800dc64:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
 800dc68:	071b      	lsls	r3, r3, #28
 800dc6a:	d5f6      	bpl.n	800dc5a <ethernet_input+0x46>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800dc6c:	210e      	movs	r1, #14
 800dc6e:	4620      	mov	r0, r4
 800dc70:	f7f9 fdcc 	bl	800780c <pbuf_remove_header>
 800dc74:	2800      	cmp	r0, #0
 800dc76:	d1f0      	bne.n	800dc5a <ethernet_input+0x46>
        etharp_input(p, netif);
 800dc78:	4629      	mov	r1, r5
 800dc7a:	4620      	mov	r0, r4
 800dc7c:	f7fe fe72 	bl	800c964 <etharp_input>
      break;
 800dc80:	e7ee      	b.n	800dc60 <ethernet_input+0x4c>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800dc82:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
 800dc86:	071a      	lsls	r2, r3, #28
 800dc88:	d5e7      	bpl.n	800dc5a <ethernet_input+0x46>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800dc8a:	210e      	movs	r1, #14
 800dc8c:	4620      	mov	r0, r4
 800dc8e:	f7f9 fdbd 	bl	800780c <pbuf_remove_header>
 800dc92:	2800      	cmp	r0, #0
 800dc94:	d1e1      	bne.n	800dc5a <ethernet_input+0x46>
        ip4_input(p, netif);
 800dc96:	4629      	mov	r1, r5
 800dc98:	4620      	mov	r0, r4
 800dc9a:	f7ff f9d1 	bl	800d040 <ip4_input>
      break;
 800dc9e:	e7df      	b.n	800dc60 <ethernet_input+0x4c>
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800dca0:	7843      	ldrb	r3, [r0, #1]
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	d1d4      	bne.n	800dc50 <ethernet_input+0x3c>
 800dca6:	7883      	ldrb	r3, [r0, #2]
 800dca8:	2b5e      	cmp	r3, #94	; 0x5e
 800dcaa:	d1d1      	bne.n	800dc50 <ethernet_input+0x3c>
        p->flags |= PBUF_FLAG_LLMCAST;
 800dcac:	7b63      	ldrb	r3, [r4, #13]
 800dcae:	f043 0310 	orr.w	r3, r3, #16
 800dcb2:	7363      	strb	r3, [r4, #13]
 800dcb4:	e7cc      	b.n	800dc50 <ethernet_input+0x3c>
 800dcb6:	bf00      	nop
 800dcb8:	08011834 	.word	0x08011834

0800dcbc <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800dcbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dcc0:	460c      	mov	r4, r1
 800dcc2:	4605      	mov	r5, r0
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800dcc4:	f8bd 0018 	ldrh.w	r0, [sp, #24]
                u16_t eth_type) {
 800dcc8:	4616      	mov	r6, r2
 800dcca:	461f      	mov	r7, r3
  u16_t eth_type_be = lwip_htons(eth_type);
 800dccc:	f7f8 fe68 	bl	80069a0 <lwip_htons>

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800dcd0:	210e      	movs	r1, #14
  u16_t eth_type_be = lwip_htons(eth_type);
 800dcd2:	4680      	mov	r8, r0
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800dcd4:	4620      	mov	r0, r4
 800dcd6:	f7f9 fd65 	bl	80077a4 <pbuf_add_header>
 800dcda:	b9f0      	cbnz	r0, 800dd1a <ethernet_output+0x5e>
      goto pbuf_header_failed;
    }
  }

  LWIP_ASSERT_CORE_LOCKED();
 800dcdc:	f7f6 f92c 	bl	8003f38 <sys_check_core_locking>

  ethhdr = (struct eth_hdr *)p->payload;
 800dce0:	6861      	ldr	r1, [r4, #4]
  ethhdr->type = eth_type_be;
 800dce2:	f8a1 800c 	strh.w	r8, [r1, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800dce6:	683b      	ldr	r3, [r7, #0]
 800dce8:	600b      	str	r3, [r1, #0]
 800dcea:	88bb      	ldrh	r3, [r7, #4]
 800dcec:	808b      	strh	r3, [r1, #4]
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800dcee:	6833      	ldr	r3, [r6, #0]
 800dcf0:	f8c1 3006 	str.w	r3, [r1, #6]
 800dcf4:	88b3      	ldrh	r3, [r6, #4]
 800dcf6:	814b      	strh	r3, [r1, #10]

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800dcf8:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 800dcfc:	2b06      	cmp	r3, #6
 800dcfe:	d006      	beq.n	800dd0e <ethernet_output+0x52>
 800dd00:	4b08      	ldr	r3, [pc, #32]	; (800dd24 <ethernet_output+0x68>)
 800dd02:	f44f 7299 	mov.w	r2, #306	; 0x132
 800dd06:	4908      	ldr	r1, [pc, #32]	; (800dd28 <ethernet_output+0x6c>)
 800dd08:	4808      	ldr	r0, [pc, #32]	; (800dd2c <ethernet_output+0x70>)
 800dd0a:	f000 f98b 	bl	800e024 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800dd0e:	69ab      	ldr	r3, [r5, #24]
 800dd10:	4621      	mov	r1, r4
 800dd12:	4628      	mov	r0, r5
pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
}
 800dd14:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return netif->linkoutput(netif, p);
 800dd18:	4718      	bx	r3
}
 800dd1a:	f06f 0001 	mvn.w	r0, #1
 800dd1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd22:	bf00      	nop
 800dd24:	080117c8 	.word	0x080117c8
 800dd28:	08011800 	.word	0x08011800
 800dd2c:	0800ef30 	.word	0x0800ef30

0800dd30 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 800dd30:	460b      	mov	r3, r1
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 800dd32:	2200      	movs	r2, #0
 800dd34:	2104      	movs	r1, #4
{
 800dd36:	b510      	push	{r4, lr}
 800dd38:	4604      	mov	r4, r0
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 800dd3a:	4618      	mov	r0, r3
 800dd3c:	f7f6 fb0a 	bl	8004354 <osMessageQueueNew>
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 800dd40:	fab0 f380 	clz	r3, r0
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 800dd44:	6020      	str	r0, [r4, #0]
  if(*mbox == NULL)
 800dd46:	095b      	lsrs	r3, r3, #5
    return ERR_MEM;

  return ERR_OK;
}
 800dd48:	4258      	negs	r0, r3
 800dd4a:	bd10      	pop	{r4, pc}

0800dd4c <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 800dd4c:	b500      	push	{lr}
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 800dd4e:	2300      	movs	r3, #0
{
 800dd50:	b083      	sub	sp, #12
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 800dd52:	6800      	ldr	r0, [r0, #0]
{
 800dd54:	9101      	str	r1, [sp, #4]
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 800dd56:	461a      	mov	r2, r3
 800dd58:	a901      	add	r1, sp, #4
 800dd5a:	f7f6 fb39 	bl	80043d0 <osMessageQueuePut>
 800dd5e:	3800      	subs	r0, #0
 800dd60:	bf18      	it	ne
 800dd62:	2001      	movne	r0, #1
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
}
 800dd64:	4240      	negs	r0, r0
 800dd66:	b003      	add	sp, #12
 800dd68:	f85d fb04 	ldr.w	pc, [sp], #4

0800dd6c <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 800dd6c:	b570      	push	{r4, r5, r6, lr}
 800dd6e:	4615      	mov	r5, r2
 800dd70:	b082      	sub	sp, #8
 800dd72:	4606      	mov	r6, r0
 800dd74:	9101      	str	r1, [sp, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 800dd76:	f7f6 f953 	bl	8004020 <osKernelGetTickCount>
#endif
  if(timeout != 0)
 800dd7a:	9901      	ldr	r1, [sp, #4]
  uint32_t starttime = osKernelGetTickCount();
 800dd7c:	4604      	mov	r4, r0
  if(timeout != 0)
 800dd7e:	b14d      	cbz	r5, 800dd94 <sys_arch_mbox_fetch+0x28>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 800dd80:	462b      	mov	r3, r5
 800dd82:	2200      	movs	r2, #0
 800dd84:	6830      	ldr	r0, [r6, #0]
 800dd86:	f7f6 fb65 	bl	8004454 <osMessageQueueGet>
    if (status == osOK)
 800dd8a:	b148      	cbz	r0, 800dda0 <sys_arch_mbox_fetch+0x34>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 800dd8c:	f04f 30ff 	mov.w	r0, #4294967295
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 800dd90:	b002      	add	sp, #8
 800dd92:	bd70      	pop	{r4, r5, r6, pc}
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 800dd94:	f04f 33ff 	mov.w	r3, #4294967295
 800dd98:	462a      	mov	r2, r5
 800dd9a:	6830      	ldr	r0, [r6, #0]
 800dd9c:	f7f6 fb5a 	bl	8004454 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 800dda0:	f7f6 f93e 	bl	8004020 <osKernelGetTickCount>
 800dda4:	1b00      	subs	r0, r0, r4
}
 800dda6:	b002      	add	sp, #8
 800dda8:	bd70      	pop	{r4, r5, r6, pc}
 800ddaa:	bf00      	nop

0800ddac <sys_mbox_valid>:
 800ddac:	6800      	ldr	r0, [r0, #0]
 800ddae:	3800      	subs	r0, #0
 800ddb0:	bf18      	it	ne
 800ddb2:	2001      	movne	r0, #1
 800ddb4:	4770      	bx	lr
 800ddb6:	bf00      	nop

0800ddb8 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 800ddb8:	b508      	push	{r3, lr}
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 800ddba:	2000      	movs	r0, #0
 800ddbc:	f7f6 f994 	bl	80040e8 <osMutexNew>
 800ddc0:	4b01      	ldr	r3, [pc, #4]	; (800ddc8 <sys_init+0x10>)
 800ddc2:	6018      	str	r0, [r3, #0]
#endif
}
 800ddc4:	bd08      	pop	{r3, pc}
 800ddc6:	bf00      	nop
 800ddc8:	240106b0 	.word	0x240106b0

0800ddcc <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 800ddcc:	b510      	push	{r4, lr}
 800ddce:	4604      	mov	r4, r0

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 800ddd0:	2000      	movs	r0, #0
 800ddd2:	f7f6 f989 	bl	80040e8 <osMutexNew>
#endif

  if(*mutex == NULL)
 800ddd6:	fab0 f380 	clz	r3, r0
  *mutex = osMutexNew(NULL);
 800ddda:	6020      	str	r0, [r4, #0]
  if(*mutex == NULL)
 800dddc:	095b      	lsrs	r3, r3, #5
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
}
 800ddde:	4258      	negs	r0, r3
 800dde0:	bd10      	pop	{r4, pc}
 800dde2:	bf00      	nop

0800dde4 <sys_mutex_lock>:
void sys_mutex_lock(sys_mutex_t *mutex)
{
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 800dde4:	f04f 31ff 	mov.w	r1, #4294967295
 800dde8:	6800      	ldr	r0, [r0, #0]
 800ddea:	f7f6 b9bd 	b.w	8004168 <osMutexAcquire>
 800ddee:	bf00      	nop

0800ddf0 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
  osMutexRelease(*mutex);
 800ddf0:	6800      	ldr	r0, [r0, #0]
 800ddf2:	f7f6 b9dd 	b.w	80041b0 <osMutexRelease>
 800ddf6:	bf00      	nop

0800ddf8 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 800ddf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ddfa:	b08b      	sub	sp, #44	; 0x2c
 800ddfc:	4617      	mov	r7, r2
 800ddfe:	460e      	mov	r6, r1
 800de00:	4605      	mov	r5, r0
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 800de02:	2220      	movs	r2, #32
 800de04:	2100      	movs	r1, #0
 800de06:	a802      	add	r0, sp, #8
{
 800de08:	461c      	mov	r4, r3
  const osThreadAttr_t attributes = {
 800de0a:	f000 f970 	bl	800e0ee <memset>
 800de0e:	9b10      	ldr	r3, [sp, #64]	; 0x40
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 800de10:	4639      	mov	r1, r7
 800de12:	aa01      	add	r2, sp, #4
 800de14:	4630      	mov	r0, r6
  const osThreadAttr_t attributes = {
 800de16:	9501      	str	r5, [sp, #4]
 800de18:	9406      	str	r4, [sp, #24]
 800de1a:	9307      	str	r3, [sp, #28]
  return osThreadNew(thread, arg, &attributes);
 800de1c:	f7f6 f908 	bl	8004030 <osThreadNew>
#endif
}
 800de20:	b00b      	add	sp, #44	; 0x2c
 800de22:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800de24 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 800de24:	b508      	push	{r3, lr}
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 800de26:	4b04      	ldr	r3, [pc, #16]	; (800de38 <sys_arch_protect+0x14>)
 800de28:	f04f 31ff 	mov.w	r1, #4294967295
 800de2c:	6818      	ldr	r0, [r3, #0]
 800de2e:	f7f6 f99b 	bl	8004168 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
}
 800de32:	2001      	movs	r0, #1
 800de34:	bd08      	pop	{r3, pc}
 800de36:	bf00      	nop
 800de38:	240106b0 	.word	0x240106b0

0800de3c <sys_arch_unprotect>:
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 800de3c:	4b01      	ldr	r3, [pc, #4]	; (800de44 <sys_arch_unprotect+0x8>)
 800de3e:	6818      	ldr	r0, [r3, #0]
 800de40:	f7f6 b9b6 	b.w	80041b0 <osMutexRelease>
 800de44:	240106b0 	.word	0x240106b0

0800de48 <rand>:
 800de48:	4b16      	ldr	r3, [pc, #88]	; (800dea4 <rand+0x5c>)
 800de4a:	b510      	push	{r4, lr}
 800de4c:	681c      	ldr	r4, [r3, #0]
 800de4e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800de50:	b9b3      	cbnz	r3, 800de80 <rand+0x38>
 800de52:	2018      	movs	r0, #24
 800de54:	f000 fa8e 	bl	800e374 <malloc>
 800de58:	4602      	mov	r2, r0
 800de5a:	6320      	str	r0, [r4, #48]	; 0x30
 800de5c:	b920      	cbnz	r0, 800de68 <rand+0x20>
 800de5e:	4b12      	ldr	r3, [pc, #72]	; (800dea8 <rand+0x60>)
 800de60:	4812      	ldr	r0, [pc, #72]	; (800deac <rand+0x64>)
 800de62:	2152      	movs	r1, #82	; 0x52
 800de64:	f000 fa1c 	bl	800e2a0 <__assert_func>
 800de68:	4911      	ldr	r1, [pc, #68]	; (800deb0 <rand+0x68>)
 800de6a:	4b12      	ldr	r3, [pc, #72]	; (800deb4 <rand+0x6c>)
 800de6c:	e9c0 1300 	strd	r1, r3, [r0]
 800de70:	4b11      	ldr	r3, [pc, #68]	; (800deb8 <rand+0x70>)
 800de72:	6083      	str	r3, [r0, #8]
 800de74:	230b      	movs	r3, #11
 800de76:	8183      	strh	r3, [r0, #12]
 800de78:	2100      	movs	r1, #0
 800de7a:	2001      	movs	r0, #1
 800de7c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800de80:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800de82:	480e      	ldr	r0, [pc, #56]	; (800debc <rand+0x74>)
 800de84:	690b      	ldr	r3, [r1, #16]
 800de86:	694c      	ldr	r4, [r1, #20]
 800de88:	4a0d      	ldr	r2, [pc, #52]	; (800dec0 <rand+0x78>)
 800de8a:	4358      	muls	r0, r3
 800de8c:	fb02 0004 	mla	r0, r2, r4, r0
 800de90:	fba3 3202 	umull	r3, r2, r3, r2
 800de94:	3301      	adds	r3, #1
 800de96:	eb40 0002 	adc.w	r0, r0, r2
 800de9a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800de9e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800dea2:	bd10      	pop	{r4, pc}
 800dea4:	24000088 	.word	0x24000088
 800dea8:	08011842 	.word	0x08011842
 800deac:	08011859 	.word	0x08011859
 800deb0:	abcd330e 	.word	0xabcd330e
 800deb4:	e66d1234 	.word	0xe66d1234
 800deb8:	0005deec 	.word	0x0005deec
 800debc:	5851f42d 	.word	0x5851f42d
 800dec0:	4c957f2d 	.word	0x4c957f2d

0800dec4 <std>:
 800dec4:	2300      	movs	r3, #0
 800dec6:	b510      	push	{r4, lr}
 800dec8:	4604      	mov	r4, r0
 800deca:	e9c0 3300 	strd	r3, r3, [r0]
 800dece:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ded2:	6083      	str	r3, [r0, #8]
 800ded4:	8181      	strh	r1, [r0, #12]
 800ded6:	6643      	str	r3, [r0, #100]	; 0x64
 800ded8:	81c2      	strh	r2, [r0, #14]
 800deda:	6183      	str	r3, [r0, #24]
 800dedc:	4619      	mov	r1, r3
 800dede:	2208      	movs	r2, #8
 800dee0:	305c      	adds	r0, #92	; 0x5c
 800dee2:	f000 f904 	bl	800e0ee <memset>
 800dee6:	4b05      	ldr	r3, [pc, #20]	; (800defc <std+0x38>)
 800dee8:	6263      	str	r3, [r4, #36]	; 0x24
 800deea:	4b05      	ldr	r3, [pc, #20]	; (800df00 <std+0x3c>)
 800deec:	62a3      	str	r3, [r4, #40]	; 0x28
 800deee:	4b05      	ldr	r3, [pc, #20]	; (800df04 <std+0x40>)
 800def0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800def2:	4b05      	ldr	r3, [pc, #20]	; (800df08 <std+0x44>)
 800def4:	6224      	str	r4, [r4, #32]
 800def6:	6323      	str	r3, [r4, #48]	; 0x30
 800def8:	bd10      	pop	{r4, pc}
 800defa:	bf00      	nop
 800defc:	0800e049 	.word	0x0800e049
 800df00:	0800e06b 	.word	0x0800e06b
 800df04:	0800e0a3 	.word	0x0800e0a3
 800df08:	0800e0c7 	.word	0x0800e0c7

0800df0c <stdio_exit_handler>:
 800df0c:	4a02      	ldr	r2, [pc, #8]	; (800df18 <stdio_exit_handler+0xc>)
 800df0e:	4903      	ldr	r1, [pc, #12]	; (800df1c <stdio_exit_handler+0x10>)
 800df10:	4803      	ldr	r0, [pc, #12]	; (800df20 <stdio_exit_handler+0x14>)
 800df12:	f000 b869 	b.w	800dfe8 <_fwalk_sglue>
 800df16:	bf00      	nop
 800df18:	24000030 	.word	0x24000030
 800df1c:	0800eb91 	.word	0x0800eb91
 800df20:	2400003c 	.word	0x2400003c

0800df24 <cleanup_stdio>:
 800df24:	6841      	ldr	r1, [r0, #4]
 800df26:	4b0c      	ldr	r3, [pc, #48]	; (800df58 <cleanup_stdio+0x34>)
 800df28:	4299      	cmp	r1, r3
 800df2a:	b510      	push	{r4, lr}
 800df2c:	4604      	mov	r4, r0
 800df2e:	d001      	beq.n	800df34 <cleanup_stdio+0x10>
 800df30:	f000 fe2e 	bl	800eb90 <_fflush_r>
 800df34:	68a1      	ldr	r1, [r4, #8]
 800df36:	4b09      	ldr	r3, [pc, #36]	; (800df5c <cleanup_stdio+0x38>)
 800df38:	4299      	cmp	r1, r3
 800df3a:	d002      	beq.n	800df42 <cleanup_stdio+0x1e>
 800df3c:	4620      	mov	r0, r4
 800df3e:	f000 fe27 	bl	800eb90 <_fflush_r>
 800df42:	68e1      	ldr	r1, [r4, #12]
 800df44:	4b06      	ldr	r3, [pc, #24]	; (800df60 <cleanup_stdio+0x3c>)
 800df46:	4299      	cmp	r1, r3
 800df48:	d004      	beq.n	800df54 <cleanup_stdio+0x30>
 800df4a:	4620      	mov	r0, r4
 800df4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800df50:	f000 be1e 	b.w	800eb90 <_fflush_r>
 800df54:	bd10      	pop	{r4, pc}
 800df56:	bf00      	nop
 800df58:	240106b4 	.word	0x240106b4
 800df5c:	2401071c 	.word	0x2401071c
 800df60:	24010784 	.word	0x24010784

0800df64 <global_stdio_init.part.0>:
 800df64:	b510      	push	{r4, lr}
 800df66:	4b0b      	ldr	r3, [pc, #44]	; (800df94 <global_stdio_init.part.0+0x30>)
 800df68:	4c0b      	ldr	r4, [pc, #44]	; (800df98 <global_stdio_init.part.0+0x34>)
 800df6a:	4a0c      	ldr	r2, [pc, #48]	; (800df9c <global_stdio_init.part.0+0x38>)
 800df6c:	601a      	str	r2, [r3, #0]
 800df6e:	4620      	mov	r0, r4
 800df70:	2200      	movs	r2, #0
 800df72:	2104      	movs	r1, #4
 800df74:	f7ff ffa6 	bl	800dec4 <std>
 800df78:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800df7c:	2201      	movs	r2, #1
 800df7e:	2109      	movs	r1, #9
 800df80:	f7ff ffa0 	bl	800dec4 <std>
 800df84:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800df88:	2202      	movs	r2, #2
 800df8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800df8e:	2112      	movs	r1, #18
 800df90:	f7ff bf98 	b.w	800dec4 <std>
 800df94:	240107ec 	.word	0x240107ec
 800df98:	240106b4 	.word	0x240106b4
 800df9c:	0800df0d 	.word	0x0800df0d

0800dfa0 <__sfp_lock_acquire>:
 800dfa0:	4801      	ldr	r0, [pc, #4]	; (800dfa8 <__sfp_lock_acquire+0x8>)
 800dfa2:	f000 b96d 	b.w	800e280 <__retarget_lock_acquire_recursive>
 800dfa6:	bf00      	nop
 800dfa8:	240107f5 	.word	0x240107f5

0800dfac <__sfp_lock_release>:
 800dfac:	4801      	ldr	r0, [pc, #4]	; (800dfb4 <__sfp_lock_release+0x8>)
 800dfae:	f000 b968 	b.w	800e282 <__retarget_lock_release_recursive>
 800dfb2:	bf00      	nop
 800dfb4:	240107f5 	.word	0x240107f5

0800dfb8 <__sinit>:
 800dfb8:	b510      	push	{r4, lr}
 800dfba:	4604      	mov	r4, r0
 800dfbc:	f7ff fff0 	bl	800dfa0 <__sfp_lock_acquire>
 800dfc0:	6a23      	ldr	r3, [r4, #32]
 800dfc2:	b11b      	cbz	r3, 800dfcc <__sinit+0x14>
 800dfc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dfc8:	f7ff bff0 	b.w	800dfac <__sfp_lock_release>
 800dfcc:	4b04      	ldr	r3, [pc, #16]	; (800dfe0 <__sinit+0x28>)
 800dfce:	6223      	str	r3, [r4, #32]
 800dfd0:	4b04      	ldr	r3, [pc, #16]	; (800dfe4 <__sinit+0x2c>)
 800dfd2:	681b      	ldr	r3, [r3, #0]
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d1f5      	bne.n	800dfc4 <__sinit+0xc>
 800dfd8:	f7ff ffc4 	bl	800df64 <global_stdio_init.part.0>
 800dfdc:	e7f2      	b.n	800dfc4 <__sinit+0xc>
 800dfde:	bf00      	nop
 800dfe0:	0800df25 	.word	0x0800df25
 800dfe4:	240107ec 	.word	0x240107ec

0800dfe8 <_fwalk_sglue>:
 800dfe8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dfec:	4607      	mov	r7, r0
 800dfee:	4688      	mov	r8, r1
 800dff0:	4614      	mov	r4, r2
 800dff2:	2600      	movs	r6, #0
 800dff4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800dff8:	f1b9 0901 	subs.w	r9, r9, #1
 800dffc:	d505      	bpl.n	800e00a <_fwalk_sglue+0x22>
 800dffe:	6824      	ldr	r4, [r4, #0]
 800e000:	2c00      	cmp	r4, #0
 800e002:	d1f7      	bne.n	800dff4 <_fwalk_sglue+0xc>
 800e004:	4630      	mov	r0, r6
 800e006:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e00a:	89ab      	ldrh	r3, [r5, #12]
 800e00c:	2b01      	cmp	r3, #1
 800e00e:	d907      	bls.n	800e020 <_fwalk_sglue+0x38>
 800e010:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e014:	3301      	adds	r3, #1
 800e016:	d003      	beq.n	800e020 <_fwalk_sglue+0x38>
 800e018:	4629      	mov	r1, r5
 800e01a:	4638      	mov	r0, r7
 800e01c:	47c0      	blx	r8
 800e01e:	4306      	orrs	r6, r0
 800e020:	3568      	adds	r5, #104	; 0x68
 800e022:	e7e9      	b.n	800dff8 <_fwalk_sglue+0x10>

0800e024 <iprintf>:
 800e024:	b40f      	push	{r0, r1, r2, r3}
 800e026:	b507      	push	{r0, r1, r2, lr}
 800e028:	4906      	ldr	r1, [pc, #24]	; (800e044 <iprintf+0x20>)
 800e02a:	ab04      	add	r3, sp, #16
 800e02c:	6808      	ldr	r0, [r1, #0]
 800e02e:	f853 2b04 	ldr.w	r2, [r3], #4
 800e032:	6881      	ldr	r1, [r0, #8]
 800e034:	9301      	str	r3, [sp, #4]
 800e036:	f000 fa7b 	bl	800e530 <_vfiprintf_r>
 800e03a:	b003      	add	sp, #12
 800e03c:	f85d eb04 	ldr.w	lr, [sp], #4
 800e040:	b004      	add	sp, #16
 800e042:	4770      	bx	lr
 800e044:	24000088 	.word	0x24000088

0800e048 <__sread>:
 800e048:	b510      	push	{r4, lr}
 800e04a:	460c      	mov	r4, r1
 800e04c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e050:	f000 f8ce 	bl	800e1f0 <_read_r>
 800e054:	2800      	cmp	r0, #0
 800e056:	bfab      	itete	ge
 800e058:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e05a:	89a3      	ldrhlt	r3, [r4, #12]
 800e05c:	181b      	addge	r3, r3, r0
 800e05e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e062:	bfac      	ite	ge
 800e064:	6563      	strge	r3, [r4, #84]	; 0x54
 800e066:	81a3      	strhlt	r3, [r4, #12]
 800e068:	bd10      	pop	{r4, pc}

0800e06a <__swrite>:
 800e06a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e06e:	461f      	mov	r7, r3
 800e070:	898b      	ldrh	r3, [r1, #12]
 800e072:	05db      	lsls	r3, r3, #23
 800e074:	4605      	mov	r5, r0
 800e076:	460c      	mov	r4, r1
 800e078:	4616      	mov	r6, r2
 800e07a:	d505      	bpl.n	800e088 <__swrite+0x1e>
 800e07c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e080:	2302      	movs	r3, #2
 800e082:	2200      	movs	r2, #0
 800e084:	f000 f8a2 	bl	800e1cc <_lseek_r>
 800e088:	89a3      	ldrh	r3, [r4, #12]
 800e08a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e08e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e092:	81a3      	strh	r3, [r4, #12]
 800e094:	4632      	mov	r2, r6
 800e096:	463b      	mov	r3, r7
 800e098:	4628      	mov	r0, r5
 800e09a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e09e:	f000 b8b9 	b.w	800e214 <_write_r>

0800e0a2 <__sseek>:
 800e0a2:	b510      	push	{r4, lr}
 800e0a4:	460c      	mov	r4, r1
 800e0a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e0aa:	f000 f88f 	bl	800e1cc <_lseek_r>
 800e0ae:	1c43      	adds	r3, r0, #1
 800e0b0:	89a3      	ldrh	r3, [r4, #12]
 800e0b2:	bf15      	itete	ne
 800e0b4:	6560      	strne	r0, [r4, #84]	; 0x54
 800e0b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e0ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e0be:	81a3      	strheq	r3, [r4, #12]
 800e0c0:	bf18      	it	ne
 800e0c2:	81a3      	strhne	r3, [r4, #12]
 800e0c4:	bd10      	pop	{r4, pc}

0800e0c6 <__sclose>:
 800e0c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e0ca:	f000 b819 	b.w	800e100 <_close_r>

0800e0ce <memcmp>:
 800e0ce:	b510      	push	{r4, lr}
 800e0d0:	3901      	subs	r1, #1
 800e0d2:	4402      	add	r2, r0
 800e0d4:	4290      	cmp	r0, r2
 800e0d6:	d101      	bne.n	800e0dc <memcmp+0xe>
 800e0d8:	2000      	movs	r0, #0
 800e0da:	e005      	b.n	800e0e8 <memcmp+0x1a>
 800e0dc:	7803      	ldrb	r3, [r0, #0]
 800e0de:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800e0e2:	42a3      	cmp	r3, r4
 800e0e4:	d001      	beq.n	800e0ea <memcmp+0x1c>
 800e0e6:	1b18      	subs	r0, r3, r4
 800e0e8:	bd10      	pop	{r4, pc}
 800e0ea:	3001      	adds	r0, #1
 800e0ec:	e7f2      	b.n	800e0d4 <memcmp+0x6>

0800e0ee <memset>:
 800e0ee:	4402      	add	r2, r0
 800e0f0:	4603      	mov	r3, r0
 800e0f2:	4293      	cmp	r3, r2
 800e0f4:	d100      	bne.n	800e0f8 <memset+0xa>
 800e0f6:	4770      	bx	lr
 800e0f8:	f803 1b01 	strb.w	r1, [r3], #1
 800e0fc:	e7f9      	b.n	800e0f2 <memset+0x4>
	...

0800e100 <_close_r>:
 800e100:	b538      	push	{r3, r4, r5, lr}
 800e102:	4d06      	ldr	r5, [pc, #24]	; (800e11c <_close_r+0x1c>)
 800e104:	2300      	movs	r3, #0
 800e106:	4604      	mov	r4, r0
 800e108:	4608      	mov	r0, r1
 800e10a:	602b      	str	r3, [r5, #0]
 800e10c:	f7f3 f8a0 	bl	8001250 <_close>
 800e110:	1c43      	adds	r3, r0, #1
 800e112:	d102      	bne.n	800e11a <_close_r+0x1a>
 800e114:	682b      	ldr	r3, [r5, #0]
 800e116:	b103      	cbz	r3, 800e11a <_close_r+0x1a>
 800e118:	6023      	str	r3, [r4, #0]
 800e11a:	bd38      	pop	{r3, r4, r5, pc}
 800e11c:	240107f0 	.word	0x240107f0

0800e120 <_reclaim_reent>:
 800e120:	4b29      	ldr	r3, [pc, #164]	; (800e1c8 <_reclaim_reent+0xa8>)
 800e122:	681b      	ldr	r3, [r3, #0]
 800e124:	4283      	cmp	r3, r0
 800e126:	b570      	push	{r4, r5, r6, lr}
 800e128:	4604      	mov	r4, r0
 800e12a:	d04b      	beq.n	800e1c4 <_reclaim_reent+0xa4>
 800e12c:	69c3      	ldr	r3, [r0, #28]
 800e12e:	b143      	cbz	r3, 800e142 <_reclaim_reent+0x22>
 800e130:	68db      	ldr	r3, [r3, #12]
 800e132:	2b00      	cmp	r3, #0
 800e134:	d144      	bne.n	800e1c0 <_reclaim_reent+0xa0>
 800e136:	69e3      	ldr	r3, [r4, #28]
 800e138:	6819      	ldr	r1, [r3, #0]
 800e13a:	b111      	cbz	r1, 800e142 <_reclaim_reent+0x22>
 800e13c:	4620      	mov	r0, r4
 800e13e:	f000 f8cd 	bl	800e2dc <_free_r>
 800e142:	6961      	ldr	r1, [r4, #20]
 800e144:	b111      	cbz	r1, 800e14c <_reclaim_reent+0x2c>
 800e146:	4620      	mov	r0, r4
 800e148:	f000 f8c8 	bl	800e2dc <_free_r>
 800e14c:	69e1      	ldr	r1, [r4, #28]
 800e14e:	b111      	cbz	r1, 800e156 <_reclaim_reent+0x36>
 800e150:	4620      	mov	r0, r4
 800e152:	f000 f8c3 	bl	800e2dc <_free_r>
 800e156:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800e158:	b111      	cbz	r1, 800e160 <_reclaim_reent+0x40>
 800e15a:	4620      	mov	r0, r4
 800e15c:	f000 f8be 	bl	800e2dc <_free_r>
 800e160:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e162:	b111      	cbz	r1, 800e16a <_reclaim_reent+0x4a>
 800e164:	4620      	mov	r0, r4
 800e166:	f000 f8b9 	bl	800e2dc <_free_r>
 800e16a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800e16c:	b111      	cbz	r1, 800e174 <_reclaim_reent+0x54>
 800e16e:	4620      	mov	r0, r4
 800e170:	f000 f8b4 	bl	800e2dc <_free_r>
 800e174:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800e176:	b111      	cbz	r1, 800e17e <_reclaim_reent+0x5e>
 800e178:	4620      	mov	r0, r4
 800e17a:	f000 f8af 	bl	800e2dc <_free_r>
 800e17e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800e180:	b111      	cbz	r1, 800e188 <_reclaim_reent+0x68>
 800e182:	4620      	mov	r0, r4
 800e184:	f000 f8aa 	bl	800e2dc <_free_r>
 800e188:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800e18a:	b111      	cbz	r1, 800e192 <_reclaim_reent+0x72>
 800e18c:	4620      	mov	r0, r4
 800e18e:	f000 f8a5 	bl	800e2dc <_free_r>
 800e192:	6a23      	ldr	r3, [r4, #32]
 800e194:	b1b3      	cbz	r3, 800e1c4 <_reclaim_reent+0xa4>
 800e196:	4620      	mov	r0, r4
 800e198:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e19c:	4718      	bx	r3
 800e19e:	5949      	ldr	r1, [r1, r5]
 800e1a0:	b941      	cbnz	r1, 800e1b4 <_reclaim_reent+0x94>
 800e1a2:	3504      	adds	r5, #4
 800e1a4:	69e3      	ldr	r3, [r4, #28]
 800e1a6:	2d80      	cmp	r5, #128	; 0x80
 800e1a8:	68d9      	ldr	r1, [r3, #12]
 800e1aa:	d1f8      	bne.n	800e19e <_reclaim_reent+0x7e>
 800e1ac:	4620      	mov	r0, r4
 800e1ae:	f000 f895 	bl	800e2dc <_free_r>
 800e1b2:	e7c0      	b.n	800e136 <_reclaim_reent+0x16>
 800e1b4:	680e      	ldr	r6, [r1, #0]
 800e1b6:	4620      	mov	r0, r4
 800e1b8:	f000 f890 	bl	800e2dc <_free_r>
 800e1bc:	4631      	mov	r1, r6
 800e1be:	e7ef      	b.n	800e1a0 <_reclaim_reent+0x80>
 800e1c0:	2500      	movs	r5, #0
 800e1c2:	e7ef      	b.n	800e1a4 <_reclaim_reent+0x84>
 800e1c4:	bd70      	pop	{r4, r5, r6, pc}
 800e1c6:	bf00      	nop
 800e1c8:	24000088 	.word	0x24000088

0800e1cc <_lseek_r>:
 800e1cc:	b538      	push	{r3, r4, r5, lr}
 800e1ce:	4d07      	ldr	r5, [pc, #28]	; (800e1ec <_lseek_r+0x20>)
 800e1d0:	4604      	mov	r4, r0
 800e1d2:	4608      	mov	r0, r1
 800e1d4:	4611      	mov	r1, r2
 800e1d6:	2200      	movs	r2, #0
 800e1d8:	602a      	str	r2, [r5, #0]
 800e1da:	461a      	mov	r2, r3
 800e1dc:	f7f3 f844 	bl	8001268 <_lseek>
 800e1e0:	1c43      	adds	r3, r0, #1
 800e1e2:	d102      	bne.n	800e1ea <_lseek_r+0x1e>
 800e1e4:	682b      	ldr	r3, [r5, #0]
 800e1e6:	b103      	cbz	r3, 800e1ea <_lseek_r+0x1e>
 800e1e8:	6023      	str	r3, [r4, #0]
 800e1ea:	bd38      	pop	{r3, r4, r5, pc}
 800e1ec:	240107f0 	.word	0x240107f0

0800e1f0 <_read_r>:
 800e1f0:	b538      	push	{r3, r4, r5, lr}
 800e1f2:	4d07      	ldr	r5, [pc, #28]	; (800e210 <_read_r+0x20>)
 800e1f4:	4604      	mov	r4, r0
 800e1f6:	4608      	mov	r0, r1
 800e1f8:	4611      	mov	r1, r2
 800e1fa:	2200      	movs	r2, #0
 800e1fc:	602a      	str	r2, [r5, #0]
 800e1fe:	461a      	mov	r2, r3
 800e200:	f7f3 f80a 	bl	8001218 <_read>
 800e204:	1c43      	adds	r3, r0, #1
 800e206:	d102      	bne.n	800e20e <_read_r+0x1e>
 800e208:	682b      	ldr	r3, [r5, #0]
 800e20a:	b103      	cbz	r3, 800e20e <_read_r+0x1e>
 800e20c:	6023      	str	r3, [r4, #0]
 800e20e:	bd38      	pop	{r3, r4, r5, pc}
 800e210:	240107f0 	.word	0x240107f0

0800e214 <_write_r>:
 800e214:	b538      	push	{r3, r4, r5, lr}
 800e216:	4d07      	ldr	r5, [pc, #28]	; (800e234 <_write_r+0x20>)
 800e218:	4604      	mov	r4, r0
 800e21a:	4608      	mov	r0, r1
 800e21c:	4611      	mov	r1, r2
 800e21e:	2200      	movs	r2, #0
 800e220:	602a      	str	r2, [r5, #0]
 800e222:	461a      	mov	r2, r3
 800e224:	f7f3 f806 	bl	8001234 <_write>
 800e228:	1c43      	adds	r3, r0, #1
 800e22a:	d102      	bne.n	800e232 <_write_r+0x1e>
 800e22c:	682b      	ldr	r3, [r5, #0]
 800e22e:	b103      	cbz	r3, 800e232 <_write_r+0x1e>
 800e230:	6023      	str	r3, [r4, #0]
 800e232:	bd38      	pop	{r3, r4, r5, pc}
 800e234:	240107f0 	.word	0x240107f0

0800e238 <__libc_init_array>:
 800e238:	b570      	push	{r4, r5, r6, lr}
 800e23a:	4d0d      	ldr	r5, [pc, #52]	; (800e270 <__libc_init_array+0x38>)
 800e23c:	4c0d      	ldr	r4, [pc, #52]	; (800e274 <__libc_init_array+0x3c>)
 800e23e:	1b64      	subs	r4, r4, r5
 800e240:	10a4      	asrs	r4, r4, #2
 800e242:	2600      	movs	r6, #0
 800e244:	42a6      	cmp	r6, r4
 800e246:	d109      	bne.n	800e25c <__libc_init_array+0x24>
 800e248:	4d0b      	ldr	r5, [pc, #44]	; (800e278 <__libc_init_array+0x40>)
 800e24a:	4c0c      	ldr	r4, [pc, #48]	; (800e27c <__libc_init_array+0x44>)
 800e24c:	f000 fe50 	bl	800eef0 <_init>
 800e250:	1b64      	subs	r4, r4, r5
 800e252:	10a4      	asrs	r4, r4, #2
 800e254:	2600      	movs	r6, #0
 800e256:	42a6      	cmp	r6, r4
 800e258:	d105      	bne.n	800e266 <__libc_init_array+0x2e>
 800e25a:	bd70      	pop	{r4, r5, r6, pc}
 800e25c:	f855 3b04 	ldr.w	r3, [r5], #4
 800e260:	4798      	blx	r3
 800e262:	3601      	adds	r6, #1
 800e264:	e7ee      	b.n	800e244 <__libc_init_array+0xc>
 800e266:	f855 3b04 	ldr.w	r3, [r5], #4
 800e26a:	4798      	blx	r3
 800e26c:	3601      	adds	r6, #1
 800e26e:	e7f2      	b.n	800e256 <__libc_init_array+0x1e>
 800e270:	08011920 	.word	0x08011920
 800e274:	08011920 	.word	0x08011920
 800e278:	08011920 	.word	0x08011920
 800e27c:	08011924 	.word	0x08011924

0800e280 <__retarget_lock_acquire_recursive>:
 800e280:	4770      	bx	lr

0800e282 <__retarget_lock_release_recursive>:
 800e282:	4770      	bx	lr

0800e284 <memcpy>:
 800e284:	440a      	add	r2, r1
 800e286:	4291      	cmp	r1, r2
 800e288:	f100 33ff 	add.w	r3, r0, #4294967295
 800e28c:	d100      	bne.n	800e290 <memcpy+0xc>
 800e28e:	4770      	bx	lr
 800e290:	b510      	push	{r4, lr}
 800e292:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e296:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e29a:	4291      	cmp	r1, r2
 800e29c:	d1f9      	bne.n	800e292 <memcpy+0xe>
 800e29e:	bd10      	pop	{r4, pc}

0800e2a0 <__assert_func>:
 800e2a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e2a2:	4614      	mov	r4, r2
 800e2a4:	461a      	mov	r2, r3
 800e2a6:	4b09      	ldr	r3, [pc, #36]	; (800e2cc <__assert_func+0x2c>)
 800e2a8:	681b      	ldr	r3, [r3, #0]
 800e2aa:	4605      	mov	r5, r0
 800e2ac:	68d8      	ldr	r0, [r3, #12]
 800e2ae:	b14c      	cbz	r4, 800e2c4 <__assert_func+0x24>
 800e2b0:	4b07      	ldr	r3, [pc, #28]	; (800e2d0 <__assert_func+0x30>)
 800e2b2:	9100      	str	r1, [sp, #0]
 800e2b4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e2b8:	4906      	ldr	r1, [pc, #24]	; (800e2d4 <__assert_func+0x34>)
 800e2ba:	462b      	mov	r3, r5
 800e2bc:	f000 fc90 	bl	800ebe0 <fiprintf>
 800e2c0:	f000 fd46 	bl	800ed50 <abort>
 800e2c4:	4b04      	ldr	r3, [pc, #16]	; (800e2d8 <__assert_func+0x38>)
 800e2c6:	461c      	mov	r4, r3
 800e2c8:	e7f3      	b.n	800e2b2 <__assert_func+0x12>
 800e2ca:	bf00      	nop
 800e2cc:	24000088 	.word	0x24000088
 800e2d0:	080118b1 	.word	0x080118b1
 800e2d4:	080118be 	.word	0x080118be
 800e2d8:	080118ec 	.word	0x080118ec

0800e2dc <_free_r>:
 800e2dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e2de:	2900      	cmp	r1, #0
 800e2e0:	d044      	beq.n	800e36c <_free_r+0x90>
 800e2e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e2e6:	9001      	str	r0, [sp, #4]
 800e2e8:	2b00      	cmp	r3, #0
 800e2ea:	f1a1 0404 	sub.w	r4, r1, #4
 800e2ee:	bfb8      	it	lt
 800e2f0:	18e4      	addlt	r4, r4, r3
 800e2f2:	f000 f8e7 	bl	800e4c4 <__malloc_lock>
 800e2f6:	4a1e      	ldr	r2, [pc, #120]	; (800e370 <_free_r+0x94>)
 800e2f8:	9801      	ldr	r0, [sp, #4]
 800e2fa:	6813      	ldr	r3, [r2, #0]
 800e2fc:	b933      	cbnz	r3, 800e30c <_free_r+0x30>
 800e2fe:	6063      	str	r3, [r4, #4]
 800e300:	6014      	str	r4, [r2, #0]
 800e302:	b003      	add	sp, #12
 800e304:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e308:	f000 b8e2 	b.w	800e4d0 <__malloc_unlock>
 800e30c:	42a3      	cmp	r3, r4
 800e30e:	d908      	bls.n	800e322 <_free_r+0x46>
 800e310:	6825      	ldr	r5, [r4, #0]
 800e312:	1961      	adds	r1, r4, r5
 800e314:	428b      	cmp	r3, r1
 800e316:	bf01      	itttt	eq
 800e318:	6819      	ldreq	r1, [r3, #0]
 800e31a:	685b      	ldreq	r3, [r3, #4]
 800e31c:	1949      	addeq	r1, r1, r5
 800e31e:	6021      	streq	r1, [r4, #0]
 800e320:	e7ed      	b.n	800e2fe <_free_r+0x22>
 800e322:	461a      	mov	r2, r3
 800e324:	685b      	ldr	r3, [r3, #4]
 800e326:	b10b      	cbz	r3, 800e32c <_free_r+0x50>
 800e328:	42a3      	cmp	r3, r4
 800e32a:	d9fa      	bls.n	800e322 <_free_r+0x46>
 800e32c:	6811      	ldr	r1, [r2, #0]
 800e32e:	1855      	adds	r5, r2, r1
 800e330:	42a5      	cmp	r5, r4
 800e332:	d10b      	bne.n	800e34c <_free_r+0x70>
 800e334:	6824      	ldr	r4, [r4, #0]
 800e336:	4421      	add	r1, r4
 800e338:	1854      	adds	r4, r2, r1
 800e33a:	42a3      	cmp	r3, r4
 800e33c:	6011      	str	r1, [r2, #0]
 800e33e:	d1e0      	bne.n	800e302 <_free_r+0x26>
 800e340:	681c      	ldr	r4, [r3, #0]
 800e342:	685b      	ldr	r3, [r3, #4]
 800e344:	6053      	str	r3, [r2, #4]
 800e346:	440c      	add	r4, r1
 800e348:	6014      	str	r4, [r2, #0]
 800e34a:	e7da      	b.n	800e302 <_free_r+0x26>
 800e34c:	d902      	bls.n	800e354 <_free_r+0x78>
 800e34e:	230c      	movs	r3, #12
 800e350:	6003      	str	r3, [r0, #0]
 800e352:	e7d6      	b.n	800e302 <_free_r+0x26>
 800e354:	6825      	ldr	r5, [r4, #0]
 800e356:	1961      	adds	r1, r4, r5
 800e358:	428b      	cmp	r3, r1
 800e35a:	bf04      	itt	eq
 800e35c:	6819      	ldreq	r1, [r3, #0]
 800e35e:	685b      	ldreq	r3, [r3, #4]
 800e360:	6063      	str	r3, [r4, #4]
 800e362:	bf04      	itt	eq
 800e364:	1949      	addeq	r1, r1, r5
 800e366:	6021      	streq	r1, [r4, #0]
 800e368:	6054      	str	r4, [r2, #4]
 800e36a:	e7ca      	b.n	800e302 <_free_r+0x26>
 800e36c:	b003      	add	sp, #12
 800e36e:	bd30      	pop	{r4, r5, pc}
 800e370:	240107f8 	.word	0x240107f8

0800e374 <malloc>:
 800e374:	4b02      	ldr	r3, [pc, #8]	; (800e380 <malloc+0xc>)
 800e376:	4601      	mov	r1, r0
 800e378:	6818      	ldr	r0, [r3, #0]
 800e37a:	f000 b823 	b.w	800e3c4 <_malloc_r>
 800e37e:	bf00      	nop
 800e380:	24000088 	.word	0x24000088

0800e384 <sbrk_aligned>:
 800e384:	b570      	push	{r4, r5, r6, lr}
 800e386:	4e0e      	ldr	r6, [pc, #56]	; (800e3c0 <sbrk_aligned+0x3c>)
 800e388:	460c      	mov	r4, r1
 800e38a:	6831      	ldr	r1, [r6, #0]
 800e38c:	4605      	mov	r5, r0
 800e38e:	b911      	cbnz	r1, 800e396 <sbrk_aligned+0x12>
 800e390:	f000 fcce 	bl	800ed30 <_sbrk_r>
 800e394:	6030      	str	r0, [r6, #0]
 800e396:	4621      	mov	r1, r4
 800e398:	4628      	mov	r0, r5
 800e39a:	f000 fcc9 	bl	800ed30 <_sbrk_r>
 800e39e:	1c43      	adds	r3, r0, #1
 800e3a0:	d00a      	beq.n	800e3b8 <sbrk_aligned+0x34>
 800e3a2:	1cc4      	adds	r4, r0, #3
 800e3a4:	f024 0403 	bic.w	r4, r4, #3
 800e3a8:	42a0      	cmp	r0, r4
 800e3aa:	d007      	beq.n	800e3bc <sbrk_aligned+0x38>
 800e3ac:	1a21      	subs	r1, r4, r0
 800e3ae:	4628      	mov	r0, r5
 800e3b0:	f000 fcbe 	bl	800ed30 <_sbrk_r>
 800e3b4:	3001      	adds	r0, #1
 800e3b6:	d101      	bne.n	800e3bc <sbrk_aligned+0x38>
 800e3b8:	f04f 34ff 	mov.w	r4, #4294967295
 800e3bc:	4620      	mov	r0, r4
 800e3be:	bd70      	pop	{r4, r5, r6, pc}
 800e3c0:	240107fc 	.word	0x240107fc

0800e3c4 <_malloc_r>:
 800e3c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e3c8:	1ccd      	adds	r5, r1, #3
 800e3ca:	f025 0503 	bic.w	r5, r5, #3
 800e3ce:	3508      	adds	r5, #8
 800e3d0:	2d0c      	cmp	r5, #12
 800e3d2:	bf38      	it	cc
 800e3d4:	250c      	movcc	r5, #12
 800e3d6:	2d00      	cmp	r5, #0
 800e3d8:	4607      	mov	r7, r0
 800e3da:	db01      	blt.n	800e3e0 <_malloc_r+0x1c>
 800e3dc:	42a9      	cmp	r1, r5
 800e3de:	d905      	bls.n	800e3ec <_malloc_r+0x28>
 800e3e0:	230c      	movs	r3, #12
 800e3e2:	603b      	str	r3, [r7, #0]
 800e3e4:	2600      	movs	r6, #0
 800e3e6:	4630      	mov	r0, r6
 800e3e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e3ec:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800e4c0 <_malloc_r+0xfc>
 800e3f0:	f000 f868 	bl	800e4c4 <__malloc_lock>
 800e3f4:	f8d8 3000 	ldr.w	r3, [r8]
 800e3f8:	461c      	mov	r4, r3
 800e3fa:	bb5c      	cbnz	r4, 800e454 <_malloc_r+0x90>
 800e3fc:	4629      	mov	r1, r5
 800e3fe:	4638      	mov	r0, r7
 800e400:	f7ff ffc0 	bl	800e384 <sbrk_aligned>
 800e404:	1c43      	adds	r3, r0, #1
 800e406:	4604      	mov	r4, r0
 800e408:	d155      	bne.n	800e4b6 <_malloc_r+0xf2>
 800e40a:	f8d8 4000 	ldr.w	r4, [r8]
 800e40e:	4626      	mov	r6, r4
 800e410:	2e00      	cmp	r6, #0
 800e412:	d145      	bne.n	800e4a0 <_malloc_r+0xdc>
 800e414:	2c00      	cmp	r4, #0
 800e416:	d048      	beq.n	800e4aa <_malloc_r+0xe6>
 800e418:	6823      	ldr	r3, [r4, #0]
 800e41a:	4631      	mov	r1, r6
 800e41c:	4638      	mov	r0, r7
 800e41e:	eb04 0903 	add.w	r9, r4, r3
 800e422:	f000 fc85 	bl	800ed30 <_sbrk_r>
 800e426:	4581      	cmp	r9, r0
 800e428:	d13f      	bne.n	800e4aa <_malloc_r+0xe6>
 800e42a:	6821      	ldr	r1, [r4, #0]
 800e42c:	1a6d      	subs	r5, r5, r1
 800e42e:	4629      	mov	r1, r5
 800e430:	4638      	mov	r0, r7
 800e432:	f7ff ffa7 	bl	800e384 <sbrk_aligned>
 800e436:	3001      	adds	r0, #1
 800e438:	d037      	beq.n	800e4aa <_malloc_r+0xe6>
 800e43a:	6823      	ldr	r3, [r4, #0]
 800e43c:	442b      	add	r3, r5
 800e43e:	6023      	str	r3, [r4, #0]
 800e440:	f8d8 3000 	ldr.w	r3, [r8]
 800e444:	2b00      	cmp	r3, #0
 800e446:	d038      	beq.n	800e4ba <_malloc_r+0xf6>
 800e448:	685a      	ldr	r2, [r3, #4]
 800e44a:	42a2      	cmp	r2, r4
 800e44c:	d12b      	bne.n	800e4a6 <_malloc_r+0xe2>
 800e44e:	2200      	movs	r2, #0
 800e450:	605a      	str	r2, [r3, #4]
 800e452:	e00f      	b.n	800e474 <_malloc_r+0xb0>
 800e454:	6822      	ldr	r2, [r4, #0]
 800e456:	1b52      	subs	r2, r2, r5
 800e458:	d41f      	bmi.n	800e49a <_malloc_r+0xd6>
 800e45a:	2a0b      	cmp	r2, #11
 800e45c:	d917      	bls.n	800e48e <_malloc_r+0xca>
 800e45e:	1961      	adds	r1, r4, r5
 800e460:	42a3      	cmp	r3, r4
 800e462:	6025      	str	r5, [r4, #0]
 800e464:	bf18      	it	ne
 800e466:	6059      	strne	r1, [r3, #4]
 800e468:	6863      	ldr	r3, [r4, #4]
 800e46a:	bf08      	it	eq
 800e46c:	f8c8 1000 	streq.w	r1, [r8]
 800e470:	5162      	str	r2, [r4, r5]
 800e472:	604b      	str	r3, [r1, #4]
 800e474:	4638      	mov	r0, r7
 800e476:	f104 060b 	add.w	r6, r4, #11
 800e47a:	f000 f829 	bl	800e4d0 <__malloc_unlock>
 800e47e:	f026 0607 	bic.w	r6, r6, #7
 800e482:	1d23      	adds	r3, r4, #4
 800e484:	1af2      	subs	r2, r6, r3
 800e486:	d0ae      	beq.n	800e3e6 <_malloc_r+0x22>
 800e488:	1b9b      	subs	r3, r3, r6
 800e48a:	50a3      	str	r3, [r4, r2]
 800e48c:	e7ab      	b.n	800e3e6 <_malloc_r+0x22>
 800e48e:	42a3      	cmp	r3, r4
 800e490:	6862      	ldr	r2, [r4, #4]
 800e492:	d1dd      	bne.n	800e450 <_malloc_r+0x8c>
 800e494:	f8c8 2000 	str.w	r2, [r8]
 800e498:	e7ec      	b.n	800e474 <_malloc_r+0xb0>
 800e49a:	4623      	mov	r3, r4
 800e49c:	6864      	ldr	r4, [r4, #4]
 800e49e:	e7ac      	b.n	800e3fa <_malloc_r+0x36>
 800e4a0:	4634      	mov	r4, r6
 800e4a2:	6876      	ldr	r6, [r6, #4]
 800e4a4:	e7b4      	b.n	800e410 <_malloc_r+0x4c>
 800e4a6:	4613      	mov	r3, r2
 800e4a8:	e7cc      	b.n	800e444 <_malloc_r+0x80>
 800e4aa:	230c      	movs	r3, #12
 800e4ac:	603b      	str	r3, [r7, #0]
 800e4ae:	4638      	mov	r0, r7
 800e4b0:	f000 f80e 	bl	800e4d0 <__malloc_unlock>
 800e4b4:	e797      	b.n	800e3e6 <_malloc_r+0x22>
 800e4b6:	6025      	str	r5, [r4, #0]
 800e4b8:	e7dc      	b.n	800e474 <_malloc_r+0xb0>
 800e4ba:	605b      	str	r3, [r3, #4]
 800e4bc:	deff      	udf	#255	; 0xff
 800e4be:	bf00      	nop
 800e4c0:	240107f8 	.word	0x240107f8

0800e4c4 <__malloc_lock>:
 800e4c4:	4801      	ldr	r0, [pc, #4]	; (800e4cc <__malloc_lock+0x8>)
 800e4c6:	f7ff bedb 	b.w	800e280 <__retarget_lock_acquire_recursive>
 800e4ca:	bf00      	nop
 800e4cc:	240107f4 	.word	0x240107f4

0800e4d0 <__malloc_unlock>:
 800e4d0:	4801      	ldr	r0, [pc, #4]	; (800e4d8 <__malloc_unlock+0x8>)
 800e4d2:	f7ff bed6 	b.w	800e282 <__retarget_lock_release_recursive>
 800e4d6:	bf00      	nop
 800e4d8:	240107f4 	.word	0x240107f4

0800e4dc <__sfputc_r>:
 800e4dc:	6893      	ldr	r3, [r2, #8]
 800e4de:	3b01      	subs	r3, #1
 800e4e0:	2b00      	cmp	r3, #0
 800e4e2:	b410      	push	{r4}
 800e4e4:	6093      	str	r3, [r2, #8]
 800e4e6:	da08      	bge.n	800e4fa <__sfputc_r+0x1e>
 800e4e8:	6994      	ldr	r4, [r2, #24]
 800e4ea:	42a3      	cmp	r3, r4
 800e4ec:	db01      	blt.n	800e4f2 <__sfputc_r+0x16>
 800e4ee:	290a      	cmp	r1, #10
 800e4f0:	d103      	bne.n	800e4fa <__sfputc_r+0x1e>
 800e4f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e4f6:	f000 bb85 	b.w	800ec04 <__swbuf_r>
 800e4fa:	6813      	ldr	r3, [r2, #0]
 800e4fc:	1c58      	adds	r0, r3, #1
 800e4fe:	6010      	str	r0, [r2, #0]
 800e500:	7019      	strb	r1, [r3, #0]
 800e502:	4608      	mov	r0, r1
 800e504:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e508:	4770      	bx	lr

0800e50a <__sfputs_r>:
 800e50a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e50c:	4606      	mov	r6, r0
 800e50e:	460f      	mov	r7, r1
 800e510:	4614      	mov	r4, r2
 800e512:	18d5      	adds	r5, r2, r3
 800e514:	42ac      	cmp	r4, r5
 800e516:	d101      	bne.n	800e51c <__sfputs_r+0x12>
 800e518:	2000      	movs	r0, #0
 800e51a:	e007      	b.n	800e52c <__sfputs_r+0x22>
 800e51c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e520:	463a      	mov	r2, r7
 800e522:	4630      	mov	r0, r6
 800e524:	f7ff ffda 	bl	800e4dc <__sfputc_r>
 800e528:	1c43      	adds	r3, r0, #1
 800e52a:	d1f3      	bne.n	800e514 <__sfputs_r+0xa>
 800e52c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e530 <_vfiprintf_r>:
 800e530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e534:	460d      	mov	r5, r1
 800e536:	b09d      	sub	sp, #116	; 0x74
 800e538:	4614      	mov	r4, r2
 800e53a:	4698      	mov	r8, r3
 800e53c:	4606      	mov	r6, r0
 800e53e:	b118      	cbz	r0, 800e548 <_vfiprintf_r+0x18>
 800e540:	6a03      	ldr	r3, [r0, #32]
 800e542:	b90b      	cbnz	r3, 800e548 <_vfiprintf_r+0x18>
 800e544:	f7ff fd38 	bl	800dfb8 <__sinit>
 800e548:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e54a:	07d9      	lsls	r1, r3, #31
 800e54c:	d405      	bmi.n	800e55a <_vfiprintf_r+0x2a>
 800e54e:	89ab      	ldrh	r3, [r5, #12]
 800e550:	059a      	lsls	r2, r3, #22
 800e552:	d402      	bmi.n	800e55a <_vfiprintf_r+0x2a>
 800e554:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e556:	f7ff fe93 	bl	800e280 <__retarget_lock_acquire_recursive>
 800e55a:	89ab      	ldrh	r3, [r5, #12]
 800e55c:	071b      	lsls	r3, r3, #28
 800e55e:	d501      	bpl.n	800e564 <_vfiprintf_r+0x34>
 800e560:	692b      	ldr	r3, [r5, #16]
 800e562:	b99b      	cbnz	r3, 800e58c <_vfiprintf_r+0x5c>
 800e564:	4629      	mov	r1, r5
 800e566:	4630      	mov	r0, r6
 800e568:	f000 fb8a 	bl	800ec80 <__swsetup_r>
 800e56c:	b170      	cbz	r0, 800e58c <_vfiprintf_r+0x5c>
 800e56e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e570:	07dc      	lsls	r4, r3, #31
 800e572:	d504      	bpl.n	800e57e <_vfiprintf_r+0x4e>
 800e574:	f04f 30ff 	mov.w	r0, #4294967295
 800e578:	b01d      	add	sp, #116	; 0x74
 800e57a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e57e:	89ab      	ldrh	r3, [r5, #12]
 800e580:	0598      	lsls	r0, r3, #22
 800e582:	d4f7      	bmi.n	800e574 <_vfiprintf_r+0x44>
 800e584:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e586:	f7ff fe7c 	bl	800e282 <__retarget_lock_release_recursive>
 800e58a:	e7f3      	b.n	800e574 <_vfiprintf_r+0x44>
 800e58c:	2300      	movs	r3, #0
 800e58e:	9309      	str	r3, [sp, #36]	; 0x24
 800e590:	2320      	movs	r3, #32
 800e592:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e596:	f8cd 800c 	str.w	r8, [sp, #12]
 800e59a:	2330      	movs	r3, #48	; 0x30
 800e59c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800e750 <_vfiprintf_r+0x220>
 800e5a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e5a4:	f04f 0901 	mov.w	r9, #1
 800e5a8:	4623      	mov	r3, r4
 800e5aa:	469a      	mov	sl, r3
 800e5ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e5b0:	b10a      	cbz	r2, 800e5b6 <_vfiprintf_r+0x86>
 800e5b2:	2a25      	cmp	r2, #37	; 0x25
 800e5b4:	d1f9      	bne.n	800e5aa <_vfiprintf_r+0x7a>
 800e5b6:	ebba 0b04 	subs.w	fp, sl, r4
 800e5ba:	d00b      	beq.n	800e5d4 <_vfiprintf_r+0xa4>
 800e5bc:	465b      	mov	r3, fp
 800e5be:	4622      	mov	r2, r4
 800e5c0:	4629      	mov	r1, r5
 800e5c2:	4630      	mov	r0, r6
 800e5c4:	f7ff ffa1 	bl	800e50a <__sfputs_r>
 800e5c8:	3001      	adds	r0, #1
 800e5ca:	f000 80a9 	beq.w	800e720 <_vfiprintf_r+0x1f0>
 800e5ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e5d0:	445a      	add	r2, fp
 800e5d2:	9209      	str	r2, [sp, #36]	; 0x24
 800e5d4:	f89a 3000 	ldrb.w	r3, [sl]
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	f000 80a1 	beq.w	800e720 <_vfiprintf_r+0x1f0>
 800e5de:	2300      	movs	r3, #0
 800e5e0:	f04f 32ff 	mov.w	r2, #4294967295
 800e5e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e5e8:	f10a 0a01 	add.w	sl, sl, #1
 800e5ec:	9304      	str	r3, [sp, #16]
 800e5ee:	9307      	str	r3, [sp, #28]
 800e5f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e5f4:	931a      	str	r3, [sp, #104]	; 0x68
 800e5f6:	4654      	mov	r4, sl
 800e5f8:	2205      	movs	r2, #5
 800e5fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e5fe:	4854      	ldr	r0, [pc, #336]	; (800e750 <_vfiprintf_r+0x220>)
 800e600:	f7f1 fe6e 	bl	80002e0 <memchr>
 800e604:	9a04      	ldr	r2, [sp, #16]
 800e606:	b9d8      	cbnz	r0, 800e640 <_vfiprintf_r+0x110>
 800e608:	06d1      	lsls	r1, r2, #27
 800e60a:	bf44      	itt	mi
 800e60c:	2320      	movmi	r3, #32
 800e60e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e612:	0713      	lsls	r3, r2, #28
 800e614:	bf44      	itt	mi
 800e616:	232b      	movmi	r3, #43	; 0x2b
 800e618:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e61c:	f89a 3000 	ldrb.w	r3, [sl]
 800e620:	2b2a      	cmp	r3, #42	; 0x2a
 800e622:	d015      	beq.n	800e650 <_vfiprintf_r+0x120>
 800e624:	9a07      	ldr	r2, [sp, #28]
 800e626:	4654      	mov	r4, sl
 800e628:	2000      	movs	r0, #0
 800e62a:	f04f 0c0a 	mov.w	ip, #10
 800e62e:	4621      	mov	r1, r4
 800e630:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e634:	3b30      	subs	r3, #48	; 0x30
 800e636:	2b09      	cmp	r3, #9
 800e638:	d94d      	bls.n	800e6d6 <_vfiprintf_r+0x1a6>
 800e63a:	b1b0      	cbz	r0, 800e66a <_vfiprintf_r+0x13a>
 800e63c:	9207      	str	r2, [sp, #28]
 800e63e:	e014      	b.n	800e66a <_vfiprintf_r+0x13a>
 800e640:	eba0 0308 	sub.w	r3, r0, r8
 800e644:	fa09 f303 	lsl.w	r3, r9, r3
 800e648:	4313      	orrs	r3, r2
 800e64a:	9304      	str	r3, [sp, #16]
 800e64c:	46a2      	mov	sl, r4
 800e64e:	e7d2      	b.n	800e5f6 <_vfiprintf_r+0xc6>
 800e650:	9b03      	ldr	r3, [sp, #12]
 800e652:	1d19      	adds	r1, r3, #4
 800e654:	681b      	ldr	r3, [r3, #0]
 800e656:	9103      	str	r1, [sp, #12]
 800e658:	2b00      	cmp	r3, #0
 800e65a:	bfbb      	ittet	lt
 800e65c:	425b      	neglt	r3, r3
 800e65e:	f042 0202 	orrlt.w	r2, r2, #2
 800e662:	9307      	strge	r3, [sp, #28]
 800e664:	9307      	strlt	r3, [sp, #28]
 800e666:	bfb8      	it	lt
 800e668:	9204      	strlt	r2, [sp, #16]
 800e66a:	7823      	ldrb	r3, [r4, #0]
 800e66c:	2b2e      	cmp	r3, #46	; 0x2e
 800e66e:	d10c      	bne.n	800e68a <_vfiprintf_r+0x15a>
 800e670:	7863      	ldrb	r3, [r4, #1]
 800e672:	2b2a      	cmp	r3, #42	; 0x2a
 800e674:	d134      	bne.n	800e6e0 <_vfiprintf_r+0x1b0>
 800e676:	9b03      	ldr	r3, [sp, #12]
 800e678:	1d1a      	adds	r2, r3, #4
 800e67a:	681b      	ldr	r3, [r3, #0]
 800e67c:	9203      	str	r2, [sp, #12]
 800e67e:	2b00      	cmp	r3, #0
 800e680:	bfb8      	it	lt
 800e682:	f04f 33ff 	movlt.w	r3, #4294967295
 800e686:	3402      	adds	r4, #2
 800e688:	9305      	str	r3, [sp, #20]
 800e68a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800e760 <_vfiprintf_r+0x230>
 800e68e:	7821      	ldrb	r1, [r4, #0]
 800e690:	2203      	movs	r2, #3
 800e692:	4650      	mov	r0, sl
 800e694:	f7f1 fe24 	bl	80002e0 <memchr>
 800e698:	b138      	cbz	r0, 800e6aa <_vfiprintf_r+0x17a>
 800e69a:	9b04      	ldr	r3, [sp, #16]
 800e69c:	eba0 000a 	sub.w	r0, r0, sl
 800e6a0:	2240      	movs	r2, #64	; 0x40
 800e6a2:	4082      	lsls	r2, r0
 800e6a4:	4313      	orrs	r3, r2
 800e6a6:	3401      	adds	r4, #1
 800e6a8:	9304      	str	r3, [sp, #16]
 800e6aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e6ae:	4829      	ldr	r0, [pc, #164]	; (800e754 <_vfiprintf_r+0x224>)
 800e6b0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e6b4:	2206      	movs	r2, #6
 800e6b6:	f7f1 fe13 	bl	80002e0 <memchr>
 800e6ba:	2800      	cmp	r0, #0
 800e6bc:	d03f      	beq.n	800e73e <_vfiprintf_r+0x20e>
 800e6be:	4b26      	ldr	r3, [pc, #152]	; (800e758 <_vfiprintf_r+0x228>)
 800e6c0:	bb1b      	cbnz	r3, 800e70a <_vfiprintf_r+0x1da>
 800e6c2:	9b03      	ldr	r3, [sp, #12]
 800e6c4:	3307      	adds	r3, #7
 800e6c6:	f023 0307 	bic.w	r3, r3, #7
 800e6ca:	3308      	adds	r3, #8
 800e6cc:	9303      	str	r3, [sp, #12]
 800e6ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e6d0:	443b      	add	r3, r7
 800e6d2:	9309      	str	r3, [sp, #36]	; 0x24
 800e6d4:	e768      	b.n	800e5a8 <_vfiprintf_r+0x78>
 800e6d6:	fb0c 3202 	mla	r2, ip, r2, r3
 800e6da:	460c      	mov	r4, r1
 800e6dc:	2001      	movs	r0, #1
 800e6de:	e7a6      	b.n	800e62e <_vfiprintf_r+0xfe>
 800e6e0:	2300      	movs	r3, #0
 800e6e2:	3401      	adds	r4, #1
 800e6e4:	9305      	str	r3, [sp, #20]
 800e6e6:	4619      	mov	r1, r3
 800e6e8:	f04f 0c0a 	mov.w	ip, #10
 800e6ec:	4620      	mov	r0, r4
 800e6ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e6f2:	3a30      	subs	r2, #48	; 0x30
 800e6f4:	2a09      	cmp	r2, #9
 800e6f6:	d903      	bls.n	800e700 <_vfiprintf_r+0x1d0>
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	d0c6      	beq.n	800e68a <_vfiprintf_r+0x15a>
 800e6fc:	9105      	str	r1, [sp, #20]
 800e6fe:	e7c4      	b.n	800e68a <_vfiprintf_r+0x15a>
 800e700:	fb0c 2101 	mla	r1, ip, r1, r2
 800e704:	4604      	mov	r4, r0
 800e706:	2301      	movs	r3, #1
 800e708:	e7f0      	b.n	800e6ec <_vfiprintf_r+0x1bc>
 800e70a:	ab03      	add	r3, sp, #12
 800e70c:	9300      	str	r3, [sp, #0]
 800e70e:	462a      	mov	r2, r5
 800e710:	4b12      	ldr	r3, [pc, #72]	; (800e75c <_vfiprintf_r+0x22c>)
 800e712:	a904      	add	r1, sp, #16
 800e714:	4630      	mov	r0, r6
 800e716:	f3af 8000 	nop.w
 800e71a:	4607      	mov	r7, r0
 800e71c:	1c78      	adds	r0, r7, #1
 800e71e:	d1d6      	bne.n	800e6ce <_vfiprintf_r+0x19e>
 800e720:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e722:	07d9      	lsls	r1, r3, #31
 800e724:	d405      	bmi.n	800e732 <_vfiprintf_r+0x202>
 800e726:	89ab      	ldrh	r3, [r5, #12]
 800e728:	059a      	lsls	r2, r3, #22
 800e72a:	d402      	bmi.n	800e732 <_vfiprintf_r+0x202>
 800e72c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e72e:	f7ff fda8 	bl	800e282 <__retarget_lock_release_recursive>
 800e732:	89ab      	ldrh	r3, [r5, #12]
 800e734:	065b      	lsls	r3, r3, #25
 800e736:	f53f af1d 	bmi.w	800e574 <_vfiprintf_r+0x44>
 800e73a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e73c:	e71c      	b.n	800e578 <_vfiprintf_r+0x48>
 800e73e:	ab03      	add	r3, sp, #12
 800e740:	9300      	str	r3, [sp, #0]
 800e742:	462a      	mov	r2, r5
 800e744:	4b05      	ldr	r3, [pc, #20]	; (800e75c <_vfiprintf_r+0x22c>)
 800e746:	a904      	add	r1, sp, #16
 800e748:	4630      	mov	r0, r6
 800e74a:	f000 f879 	bl	800e840 <_printf_i>
 800e74e:	e7e4      	b.n	800e71a <_vfiprintf_r+0x1ea>
 800e750:	080118ed 	.word	0x080118ed
 800e754:	080118f7 	.word	0x080118f7
 800e758:	00000000 	.word	0x00000000
 800e75c:	0800e50b 	.word	0x0800e50b
 800e760:	080118f3 	.word	0x080118f3

0800e764 <_printf_common>:
 800e764:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e768:	4616      	mov	r6, r2
 800e76a:	4699      	mov	r9, r3
 800e76c:	688a      	ldr	r2, [r1, #8]
 800e76e:	690b      	ldr	r3, [r1, #16]
 800e770:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e774:	4293      	cmp	r3, r2
 800e776:	bfb8      	it	lt
 800e778:	4613      	movlt	r3, r2
 800e77a:	6033      	str	r3, [r6, #0]
 800e77c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e780:	4607      	mov	r7, r0
 800e782:	460c      	mov	r4, r1
 800e784:	b10a      	cbz	r2, 800e78a <_printf_common+0x26>
 800e786:	3301      	adds	r3, #1
 800e788:	6033      	str	r3, [r6, #0]
 800e78a:	6823      	ldr	r3, [r4, #0]
 800e78c:	0699      	lsls	r1, r3, #26
 800e78e:	bf42      	ittt	mi
 800e790:	6833      	ldrmi	r3, [r6, #0]
 800e792:	3302      	addmi	r3, #2
 800e794:	6033      	strmi	r3, [r6, #0]
 800e796:	6825      	ldr	r5, [r4, #0]
 800e798:	f015 0506 	ands.w	r5, r5, #6
 800e79c:	d106      	bne.n	800e7ac <_printf_common+0x48>
 800e79e:	f104 0a19 	add.w	sl, r4, #25
 800e7a2:	68e3      	ldr	r3, [r4, #12]
 800e7a4:	6832      	ldr	r2, [r6, #0]
 800e7a6:	1a9b      	subs	r3, r3, r2
 800e7a8:	42ab      	cmp	r3, r5
 800e7aa:	dc26      	bgt.n	800e7fa <_printf_common+0x96>
 800e7ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e7b0:	1e13      	subs	r3, r2, #0
 800e7b2:	6822      	ldr	r2, [r4, #0]
 800e7b4:	bf18      	it	ne
 800e7b6:	2301      	movne	r3, #1
 800e7b8:	0692      	lsls	r2, r2, #26
 800e7ba:	d42b      	bmi.n	800e814 <_printf_common+0xb0>
 800e7bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e7c0:	4649      	mov	r1, r9
 800e7c2:	4638      	mov	r0, r7
 800e7c4:	47c0      	blx	r8
 800e7c6:	3001      	adds	r0, #1
 800e7c8:	d01e      	beq.n	800e808 <_printf_common+0xa4>
 800e7ca:	6823      	ldr	r3, [r4, #0]
 800e7cc:	6922      	ldr	r2, [r4, #16]
 800e7ce:	f003 0306 	and.w	r3, r3, #6
 800e7d2:	2b04      	cmp	r3, #4
 800e7d4:	bf02      	ittt	eq
 800e7d6:	68e5      	ldreq	r5, [r4, #12]
 800e7d8:	6833      	ldreq	r3, [r6, #0]
 800e7da:	1aed      	subeq	r5, r5, r3
 800e7dc:	68a3      	ldr	r3, [r4, #8]
 800e7de:	bf0c      	ite	eq
 800e7e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e7e4:	2500      	movne	r5, #0
 800e7e6:	4293      	cmp	r3, r2
 800e7e8:	bfc4      	itt	gt
 800e7ea:	1a9b      	subgt	r3, r3, r2
 800e7ec:	18ed      	addgt	r5, r5, r3
 800e7ee:	2600      	movs	r6, #0
 800e7f0:	341a      	adds	r4, #26
 800e7f2:	42b5      	cmp	r5, r6
 800e7f4:	d11a      	bne.n	800e82c <_printf_common+0xc8>
 800e7f6:	2000      	movs	r0, #0
 800e7f8:	e008      	b.n	800e80c <_printf_common+0xa8>
 800e7fa:	2301      	movs	r3, #1
 800e7fc:	4652      	mov	r2, sl
 800e7fe:	4649      	mov	r1, r9
 800e800:	4638      	mov	r0, r7
 800e802:	47c0      	blx	r8
 800e804:	3001      	adds	r0, #1
 800e806:	d103      	bne.n	800e810 <_printf_common+0xac>
 800e808:	f04f 30ff 	mov.w	r0, #4294967295
 800e80c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e810:	3501      	adds	r5, #1
 800e812:	e7c6      	b.n	800e7a2 <_printf_common+0x3e>
 800e814:	18e1      	adds	r1, r4, r3
 800e816:	1c5a      	adds	r2, r3, #1
 800e818:	2030      	movs	r0, #48	; 0x30
 800e81a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e81e:	4422      	add	r2, r4
 800e820:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e824:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e828:	3302      	adds	r3, #2
 800e82a:	e7c7      	b.n	800e7bc <_printf_common+0x58>
 800e82c:	2301      	movs	r3, #1
 800e82e:	4622      	mov	r2, r4
 800e830:	4649      	mov	r1, r9
 800e832:	4638      	mov	r0, r7
 800e834:	47c0      	blx	r8
 800e836:	3001      	adds	r0, #1
 800e838:	d0e6      	beq.n	800e808 <_printf_common+0xa4>
 800e83a:	3601      	adds	r6, #1
 800e83c:	e7d9      	b.n	800e7f2 <_printf_common+0x8e>
	...

0800e840 <_printf_i>:
 800e840:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e844:	7e0f      	ldrb	r7, [r1, #24]
 800e846:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e848:	2f78      	cmp	r7, #120	; 0x78
 800e84a:	4691      	mov	r9, r2
 800e84c:	4680      	mov	r8, r0
 800e84e:	460c      	mov	r4, r1
 800e850:	469a      	mov	sl, r3
 800e852:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e856:	d807      	bhi.n	800e868 <_printf_i+0x28>
 800e858:	2f62      	cmp	r7, #98	; 0x62
 800e85a:	d80a      	bhi.n	800e872 <_printf_i+0x32>
 800e85c:	2f00      	cmp	r7, #0
 800e85e:	f000 80d4 	beq.w	800ea0a <_printf_i+0x1ca>
 800e862:	2f58      	cmp	r7, #88	; 0x58
 800e864:	f000 80c0 	beq.w	800e9e8 <_printf_i+0x1a8>
 800e868:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e86c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e870:	e03a      	b.n	800e8e8 <_printf_i+0xa8>
 800e872:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e876:	2b15      	cmp	r3, #21
 800e878:	d8f6      	bhi.n	800e868 <_printf_i+0x28>
 800e87a:	a101      	add	r1, pc, #4	; (adr r1, 800e880 <_printf_i+0x40>)
 800e87c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e880:	0800e8d9 	.word	0x0800e8d9
 800e884:	0800e8ed 	.word	0x0800e8ed
 800e888:	0800e869 	.word	0x0800e869
 800e88c:	0800e869 	.word	0x0800e869
 800e890:	0800e869 	.word	0x0800e869
 800e894:	0800e869 	.word	0x0800e869
 800e898:	0800e8ed 	.word	0x0800e8ed
 800e89c:	0800e869 	.word	0x0800e869
 800e8a0:	0800e869 	.word	0x0800e869
 800e8a4:	0800e869 	.word	0x0800e869
 800e8a8:	0800e869 	.word	0x0800e869
 800e8ac:	0800e9f1 	.word	0x0800e9f1
 800e8b0:	0800e919 	.word	0x0800e919
 800e8b4:	0800e9ab 	.word	0x0800e9ab
 800e8b8:	0800e869 	.word	0x0800e869
 800e8bc:	0800e869 	.word	0x0800e869
 800e8c0:	0800ea13 	.word	0x0800ea13
 800e8c4:	0800e869 	.word	0x0800e869
 800e8c8:	0800e919 	.word	0x0800e919
 800e8cc:	0800e869 	.word	0x0800e869
 800e8d0:	0800e869 	.word	0x0800e869
 800e8d4:	0800e9b3 	.word	0x0800e9b3
 800e8d8:	682b      	ldr	r3, [r5, #0]
 800e8da:	1d1a      	adds	r2, r3, #4
 800e8dc:	681b      	ldr	r3, [r3, #0]
 800e8de:	602a      	str	r2, [r5, #0]
 800e8e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e8e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e8e8:	2301      	movs	r3, #1
 800e8ea:	e09f      	b.n	800ea2c <_printf_i+0x1ec>
 800e8ec:	6820      	ldr	r0, [r4, #0]
 800e8ee:	682b      	ldr	r3, [r5, #0]
 800e8f0:	0607      	lsls	r7, r0, #24
 800e8f2:	f103 0104 	add.w	r1, r3, #4
 800e8f6:	6029      	str	r1, [r5, #0]
 800e8f8:	d501      	bpl.n	800e8fe <_printf_i+0xbe>
 800e8fa:	681e      	ldr	r6, [r3, #0]
 800e8fc:	e003      	b.n	800e906 <_printf_i+0xc6>
 800e8fe:	0646      	lsls	r6, r0, #25
 800e900:	d5fb      	bpl.n	800e8fa <_printf_i+0xba>
 800e902:	f9b3 6000 	ldrsh.w	r6, [r3]
 800e906:	2e00      	cmp	r6, #0
 800e908:	da03      	bge.n	800e912 <_printf_i+0xd2>
 800e90a:	232d      	movs	r3, #45	; 0x2d
 800e90c:	4276      	negs	r6, r6
 800e90e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e912:	485a      	ldr	r0, [pc, #360]	; (800ea7c <_printf_i+0x23c>)
 800e914:	230a      	movs	r3, #10
 800e916:	e012      	b.n	800e93e <_printf_i+0xfe>
 800e918:	682b      	ldr	r3, [r5, #0]
 800e91a:	6820      	ldr	r0, [r4, #0]
 800e91c:	1d19      	adds	r1, r3, #4
 800e91e:	6029      	str	r1, [r5, #0]
 800e920:	0605      	lsls	r5, r0, #24
 800e922:	d501      	bpl.n	800e928 <_printf_i+0xe8>
 800e924:	681e      	ldr	r6, [r3, #0]
 800e926:	e002      	b.n	800e92e <_printf_i+0xee>
 800e928:	0641      	lsls	r1, r0, #25
 800e92a:	d5fb      	bpl.n	800e924 <_printf_i+0xe4>
 800e92c:	881e      	ldrh	r6, [r3, #0]
 800e92e:	4853      	ldr	r0, [pc, #332]	; (800ea7c <_printf_i+0x23c>)
 800e930:	2f6f      	cmp	r7, #111	; 0x6f
 800e932:	bf0c      	ite	eq
 800e934:	2308      	moveq	r3, #8
 800e936:	230a      	movne	r3, #10
 800e938:	2100      	movs	r1, #0
 800e93a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e93e:	6865      	ldr	r5, [r4, #4]
 800e940:	60a5      	str	r5, [r4, #8]
 800e942:	2d00      	cmp	r5, #0
 800e944:	bfa2      	ittt	ge
 800e946:	6821      	ldrge	r1, [r4, #0]
 800e948:	f021 0104 	bicge.w	r1, r1, #4
 800e94c:	6021      	strge	r1, [r4, #0]
 800e94e:	b90e      	cbnz	r6, 800e954 <_printf_i+0x114>
 800e950:	2d00      	cmp	r5, #0
 800e952:	d04b      	beq.n	800e9ec <_printf_i+0x1ac>
 800e954:	4615      	mov	r5, r2
 800e956:	fbb6 f1f3 	udiv	r1, r6, r3
 800e95a:	fb03 6711 	mls	r7, r3, r1, r6
 800e95e:	5dc7      	ldrb	r7, [r0, r7]
 800e960:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e964:	4637      	mov	r7, r6
 800e966:	42bb      	cmp	r3, r7
 800e968:	460e      	mov	r6, r1
 800e96a:	d9f4      	bls.n	800e956 <_printf_i+0x116>
 800e96c:	2b08      	cmp	r3, #8
 800e96e:	d10b      	bne.n	800e988 <_printf_i+0x148>
 800e970:	6823      	ldr	r3, [r4, #0]
 800e972:	07de      	lsls	r6, r3, #31
 800e974:	d508      	bpl.n	800e988 <_printf_i+0x148>
 800e976:	6923      	ldr	r3, [r4, #16]
 800e978:	6861      	ldr	r1, [r4, #4]
 800e97a:	4299      	cmp	r1, r3
 800e97c:	bfde      	ittt	le
 800e97e:	2330      	movle	r3, #48	; 0x30
 800e980:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e984:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e988:	1b52      	subs	r2, r2, r5
 800e98a:	6122      	str	r2, [r4, #16]
 800e98c:	f8cd a000 	str.w	sl, [sp]
 800e990:	464b      	mov	r3, r9
 800e992:	aa03      	add	r2, sp, #12
 800e994:	4621      	mov	r1, r4
 800e996:	4640      	mov	r0, r8
 800e998:	f7ff fee4 	bl	800e764 <_printf_common>
 800e99c:	3001      	adds	r0, #1
 800e99e:	d14a      	bne.n	800ea36 <_printf_i+0x1f6>
 800e9a0:	f04f 30ff 	mov.w	r0, #4294967295
 800e9a4:	b004      	add	sp, #16
 800e9a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e9aa:	6823      	ldr	r3, [r4, #0]
 800e9ac:	f043 0320 	orr.w	r3, r3, #32
 800e9b0:	6023      	str	r3, [r4, #0]
 800e9b2:	4833      	ldr	r0, [pc, #204]	; (800ea80 <_printf_i+0x240>)
 800e9b4:	2778      	movs	r7, #120	; 0x78
 800e9b6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800e9ba:	6823      	ldr	r3, [r4, #0]
 800e9bc:	6829      	ldr	r1, [r5, #0]
 800e9be:	061f      	lsls	r7, r3, #24
 800e9c0:	f851 6b04 	ldr.w	r6, [r1], #4
 800e9c4:	d402      	bmi.n	800e9cc <_printf_i+0x18c>
 800e9c6:	065f      	lsls	r7, r3, #25
 800e9c8:	bf48      	it	mi
 800e9ca:	b2b6      	uxthmi	r6, r6
 800e9cc:	07df      	lsls	r7, r3, #31
 800e9ce:	bf48      	it	mi
 800e9d0:	f043 0320 	orrmi.w	r3, r3, #32
 800e9d4:	6029      	str	r1, [r5, #0]
 800e9d6:	bf48      	it	mi
 800e9d8:	6023      	strmi	r3, [r4, #0]
 800e9da:	b91e      	cbnz	r6, 800e9e4 <_printf_i+0x1a4>
 800e9dc:	6823      	ldr	r3, [r4, #0]
 800e9de:	f023 0320 	bic.w	r3, r3, #32
 800e9e2:	6023      	str	r3, [r4, #0]
 800e9e4:	2310      	movs	r3, #16
 800e9e6:	e7a7      	b.n	800e938 <_printf_i+0xf8>
 800e9e8:	4824      	ldr	r0, [pc, #144]	; (800ea7c <_printf_i+0x23c>)
 800e9ea:	e7e4      	b.n	800e9b6 <_printf_i+0x176>
 800e9ec:	4615      	mov	r5, r2
 800e9ee:	e7bd      	b.n	800e96c <_printf_i+0x12c>
 800e9f0:	682b      	ldr	r3, [r5, #0]
 800e9f2:	6826      	ldr	r6, [r4, #0]
 800e9f4:	6961      	ldr	r1, [r4, #20]
 800e9f6:	1d18      	adds	r0, r3, #4
 800e9f8:	6028      	str	r0, [r5, #0]
 800e9fa:	0635      	lsls	r5, r6, #24
 800e9fc:	681b      	ldr	r3, [r3, #0]
 800e9fe:	d501      	bpl.n	800ea04 <_printf_i+0x1c4>
 800ea00:	6019      	str	r1, [r3, #0]
 800ea02:	e002      	b.n	800ea0a <_printf_i+0x1ca>
 800ea04:	0670      	lsls	r0, r6, #25
 800ea06:	d5fb      	bpl.n	800ea00 <_printf_i+0x1c0>
 800ea08:	8019      	strh	r1, [r3, #0]
 800ea0a:	2300      	movs	r3, #0
 800ea0c:	6123      	str	r3, [r4, #16]
 800ea0e:	4615      	mov	r5, r2
 800ea10:	e7bc      	b.n	800e98c <_printf_i+0x14c>
 800ea12:	682b      	ldr	r3, [r5, #0]
 800ea14:	1d1a      	adds	r2, r3, #4
 800ea16:	602a      	str	r2, [r5, #0]
 800ea18:	681d      	ldr	r5, [r3, #0]
 800ea1a:	6862      	ldr	r2, [r4, #4]
 800ea1c:	2100      	movs	r1, #0
 800ea1e:	4628      	mov	r0, r5
 800ea20:	f7f1 fc5e 	bl	80002e0 <memchr>
 800ea24:	b108      	cbz	r0, 800ea2a <_printf_i+0x1ea>
 800ea26:	1b40      	subs	r0, r0, r5
 800ea28:	6060      	str	r0, [r4, #4]
 800ea2a:	6863      	ldr	r3, [r4, #4]
 800ea2c:	6123      	str	r3, [r4, #16]
 800ea2e:	2300      	movs	r3, #0
 800ea30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ea34:	e7aa      	b.n	800e98c <_printf_i+0x14c>
 800ea36:	6923      	ldr	r3, [r4, #16]
 800ea38:	462a      	mov	r2, r5
 800ea3a:	4649      	mov	r1, r9
 800ea3c:	4640      	mov	r0, r8
 800ea3e:	47d0      	blx	sl
 800ea40:	3001      	adds	r0, #1
 800ea42:	d0ad      	beq.n	800e9a0 <_printf_i+0x160>
 800ea44:	6823      	ldr	r3, [r4, #0]
 800ea46:	079b      	lsls	r3, r3, #30
 800ea48:	d413      	bmi.n	800ea72 <_printf_i+0x232>
 800ea4a:	68e0      	ldr	r0, [r4, #12]
 800ea4c:	9b03      	ldr	r3, [sp, #12]
 800ea4e:	4298      	cmp	r0, r3
 800ea50:	bfb8      	it	lt
 800ea52:	4618      	movlt	r0, r3
 800ea54:	e7a6      	b.n	800e9a4 <_printf_i+0x164>
 800ea56:	2301      	movs	r3, #1
 800ea58:	4632      	mov	r2, r6
 800ea5a:	4649      	mov	r1, r9
 800ea5c:	4640      	mov	r0, r8
 800ea5e:	47d0      	blx	sl
 800ea60:	3001      	adds	r0, #1
 800ea62:	d09d      	beq.n	800e9a0 <_printf_i+0x160>
 800ea64:	3501      	adds	r5, #1
 800ea66:	68e3      	ldr	r3, [r4, #12]
 800ea68:	9903      	ldr	r1, [sp, #12]
 800ea6a:	1a5b      	subs	r3, r3, r1
 800ea6c:	42ab      	cmp	r3, r5
 800ea6e:	dcf2      	bgt.n	800ea56 <_printf_i+0x216>
 800ea70:	e7eb      	b.n	800ea4a <_printf_i+0x20a>
 800ea72:	2500      	movs	r5, #0
 800ea74:	f104 0619 	add.w	r6, r4, #25
 800ea78:	e7f5      	b.n	800ea66 <_printf_i+0x226>
 800ea7a:	bf00      	nop
 800ea7c:	080118fe 	.word	0x080118fe
 800ea80:	0801190f 	.word	0x0801190f

0800ea84 <__sflush_r>:
 800ea84:	898a      	ldrh	r2, [r1, #12]
 800ea86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea8a:	4605      	mov	r5, r0
 800ea8c:	0710      	lsls	r0, r2, #28
 800ea8e:	460c      	mov	r4, r1
 800ea90:	d458      	bmi.n	800eb44 <__sflush_r+0xc0>
 800ea92:	684b      	ldr	r3, [r1, #4]
 800ea94:	2b00      	cmp	r3, #0
 800ea96:	dc05      	bgt.n	800eaa4 <__sflush_r+0x20>
 800ea98:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ea9a:	2b00      	cmp	r3, #0
 800ea9c:	dc02      	bgt.n	800eaa4 <__sflush_r+0x20>
 800ea9e:	2000      	movs	r0, #0
 800eaa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eaa4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800eaa6:	2e00      	cmp	r6, #0
 800eaa8:	d0f9      	beq.n	800ea9e <__sflush_r+0x1a>
 800eaaa:	2300      	movs	r3, #0
 800eaac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800eab0:	682f      	ldr	r7, [r5, #0]
 800eab2:	6a21      	ldr	r1, [r4, #32]
 800eab4:	602b      	str	r3, [r5, #0]
 800eab6:	d032      	beq.n	800eb1e <__sflush_r+0x9a>
 800eab8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800eaba:	89a3      	ldrh	r3, [r4, #12]
 800eabc:	075a      	lsls	r2, r3, #29
 800eabe:	d505      	bpl.n	800eacc <__sflush_r+0x48>
 800eac0:	6863      	ldr	r3, [r4, #4]
 800eac2:	1ac0      	subs	r0, r0, r3
 800eac4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800eac6:	b10b      	cbz	r3, 800eacc <__sflush_r+0x48>
 800eac8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800eaca:	1ac0      	subs	r0, r0, r3
 800eacc:	2300      	movs	r3, #0
 800eace:	4602      	mov	r2, r0
 800ead0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ead2:	6a21      	ldr	r1, [r4, #32]
 800ead4:	4628      	mov	r0, r5
 800ead6:	47b0      	blx	r6
 800ead8:	1c43      	adds	r3, r0, #1
 800eada:	89a3      	ldrh	r3, [r4, #12]
 800eadc:	d106      	bne.n	800eaec <__sflush_r+0x68>
 800eade:	6829      	ldr	r1, [r5, #0]
 800eae0:	291d      	cmp	r1, #29
 800eae2:	d82b      	bhi.n	800eb3c <__sflush_r+0xb8>
 800eae4:	4a29      	ldr	r2, [pc, #164]	; (800eb8c <__sflush_r+0x108>)
 800eae6:	410a      	asrs	r2, r1
 800eae8:	07d6      	lsls	r6, r2, #31
 800eaea:	d427      	bmi.n	800eb3c <__sflush_r+0xb8>
 800eaec:	2200      	movs	r2, #0
 800eaee:	6062      	str	r2, [r4, #4]
 800eaf0:	04d9      	lsls	r1, r3, #19
 800eaf2:	6922      	ldr	r2, [r4, #16]
 800eaf4:	6022      	str	r2, [r4, #0]
 800eaf6:	d504      	bpl.n	800eb02 <__sflush_r+0x7e>
 800eaf8:	1c42      	adds	r2, r0, #1
 800eafa:	d101      	bne.n	800eb00 <__sflush_r+0x7c>
 800eafc:	682b      	ldr	r3, [r5, #0]
 800eafe:	b903      	cbnz	r3, 800eb02 <__sflush_r+0x7e>
 800eb00:	6560      	str	r0, [r4, #84]	; 0x54
 800eb02:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800eb04:	602f      	str	r7, [r5, #0]
 800eb06:	2900      	cmp	r1, #0
 800eb08:	d0c9      	beq.n	800ea9e <__sflush_r+0x1a>
 800eb0a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800eb0e:	4299      	cmp	r1, r3
 800eb10:	d002      	beq.n	800eb18 <__sflush_r+0x94>
 800eb12:	4628      	mov	r0, r5
 800eb14:	f7ff fbe2 	bl	800e2dc <_free_r>
 800eb18:	2000      	movs	r0, #0
 800eb1a:	6360      	str	r0, [r4, #52]	; 0x34
 800eb1c:	e7c0      	b.n	800eaa0 <__sflush_r+0x1c>
 800eb1e:	2301      	movs	r3, #1
 800eb20:	4628      	mov	r0, r5
 800eb22:	47b0      	blx	r6
 800eb24:	1c41      	adds	r1, r0, #1
 800eb26:	d1c8      	bne.n	800eaba <__sflush_r+0x36>
 800eb28:	682b      	ldr	r3, [r5, #0]
 800eb2a:	2b00      	cmp	r3, #0
 800eb2c:	d0c5      	beq.n	800eaba <__sflush_r+0x36>
 800eb2e:	2b1d      	cmp	r3, #29
 800eb30:	d001      	beq.n	800eb36 <__sflush_r+0xb2>
 800eb32:	2b16      	cmp	r3, #22
 800eb34:	d101      	bne.n	800eb3a <__sflush_r+0xb6>
 800eb36:	602f      	str	r7, [r5, #0]
 800eb38:	e7b1      	b.n	800ea9e <__sflush_r+0x1a>
 800eb3a:	89a3      	ldrh	r3, [r4, #12]
 800eb3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eb40:	81a3      	strh	r3, [r4, #12]
 800eb42:	e7ad      	b.n	800eaa0 <__sflush_r+0x1c>
 800eb44:	690f      	ldr	r7, [r1, #16]
 800eb46:	2f00      	cmp	r7, #0
 800eb48:	d0a9      	beq.n	800ea9e <__sflush_r+0x1a>
 800eb4a:	0793      	lsls	r3, r2, #30
 800eb4c:	680e      	ldr	r6, [r1, #0]
 800eb4e:	bf08      	it	eq
 800eb50:	694b      	ldreq	r3, [r1, #20]
 800eb52:	600f      	str	r7, [r1, #0]
 800eb54:	bf18      	it	ne
 800eb56:	2300      	movne	r3, #0
 800eb58:	eba6 0807 	sub.w	r8, r6, r7
 800eb5c:	608b      	str	r3, [r1, #8]
 800eb5e:	f1b8 0f00 	cmp.w	r8, #0
 800eb62:	dd9c      	ble.n	800ea9e <__sflush_r+0x1a>
 800eb64:	6a21      	ldr	r1, [r4, #32]
 800eb66:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800eb68:	4643      	mov	r3, r8
 800eb6a:	463a      	mov	r2, r7
 800eb6c:	4628      	mov	r0, r5
 800eb6e:	47b0      	blx	r6
 800eb70:	2800      	cmp	r0, #0
 800eb72:	dc06      	bgt.n	800eb82 <__sflush_r+0xfe>
 800eb74:	89a3      	ldrh	r3, [r4, #12]
 800eb76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eb7a:	81a3      	strh	r3, [r4, #12]
 800eb7c:	f04f 30ff 	mov.w	r0, #4294967295
 800eb80:	e78e      	b.n	800eaa0 <__sflush_r+0x1c>
 800eb82:	4407      	add	r7, r0
 800eb84:	eba8 0800 	sub.w	r8, r8, r0
 800eb88:	e7e9      	b.n	800eb5e <__sflush_r+0xda>
 800eb8a:	bf00      	nop
 800eb8c:	dfbffffe 	.word	0xdfbffffe

0800eb90 <_fflush_r>:
 800eb90:	b538      	push	{r3, r4, r5, lr}
 800eb92:	690b      	ldr	r3, [r1, #16]
 800eb94:	4605      	mov	r5, r0
 800eb96:	460c      	mov	r4, r1
 800eb98:	b913      	cbnz	r3, 800eba0 <_fflush_r+0x10>
 800eb9a:	2500      	movs	r5, #0
 800eb9c:	4628      	mov	r0, r5
 800eb9e:	bd38      	pop	{r3, r4, r5, pc}
 800eba0:	b118      	cbz	r0, 800ebaa <_fflush_r+0x1a>
 800eba2:	6a03      	ldr	r3, [r0, #32]
 800eba4:	b90b      	cbnz	r3, 800ebaa <_fflush_r+0x1a>
 800eba6:	f7ff fa07 	bl	800dfb8 <__sinit>
 800ebaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	d0f3      	beq.n	800eb9a <_fflush_r+0xa>
 800ebb2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ebb4:	07d0      	lsls	r0, r2, #31
 800ebb6:	d404      	bmi.n	800ebc2 <_fflush_r+0x32>
 800ebb8:	0599      	lsls	r1, r3, #22
 800ebba:	d402      	bmi.n	800ebc2 <_fflush_r+0x32>
 800ebbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ebbe:	f7ff fb5f 	bl	800e280 <__retarget_lock_acquire_recursive>
 800ebc2:	4628      	mov	r0, r5
 800ebc4:	4621      	mov	r1, r4
 800ebc6:	f7ff ff5d 	bl	800ea84 <__sflush_r>
 800ebca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ebcc:	07da      	lsls	r2, r3, #31
 800ebce:	4605      	mov	r5, r0
 800ebd0:	d4e4      	bmi.n	800eb9c <_fflush_r+0xc>
 800ebd2:	89a3      	ldrh	r3, [r4, #12]
 800ebd4:	059b      	lsls	r3, r3, #22
 800ebd6:	d4e1      	bmi.n	800eb9c <_fflush_r+0xc>
 800ebd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ebda:	f7ff fb52 	bl	800e282 <__retarget_lock_release_recursive>
 800ebde:	e7dd      	b.n	800eb9c <_fflush_r+0xc>

0800ebe0 <fiprintf>:
 800ebe0:	b40e      	push	{r1, r2, r3}
 800ebe2:	b503      	push	{r0, r1, lr}
 800ebe4:	4601      	mov	r1, r0
 800ebe6:	ab03      	add	r3, sp, #12
 800ebe8:	4805      	ldr	r0, [pc, #20]	; (800ec00 <fiprintf+0x20>)
 800ebea:	f853 2b04 	ldr.w	r2, [r3], #4
 800ebee:	6800      	ldr	r0, [r0, #0]
 800ebf0:	9301      	str	r3, [sp, #4]
 800ebf2:	f7ff fc9d 	bl	800e530 <_vfiprintf_r>
 800ebf6:	b002      	add	sp, #8
 800ebf8:	f85d eb04 	ldr.w	lr, [sp], #4
 800ebfc:	b003      	add	sp, #12
 800ebfe:	4770      	bx	lr
 800ec00:	24000088 	.word	0x24000088

0800ec04 <__swbuf_r>:
 800ec04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec06:	460e      	mov	r6, r1
 800ec08:	4614      	mov	r4, r2
 800ec0a:	4605      	mov	r5, r0
 800ec0c:	b118      	cbz	r0, 800ec16 <__swbuf_r+0x12>
 800ec0e:	6a03      	ldr	r3, [r0, #32]
 800ec10:	b90b      	cbnz	r3, 800ec16 <__swbuf_r+0x12>
 800ec12:	f7ff f9d1 	bl	800dfb8 <__sinit>
 800ec16:	69a3      	ldr	r3, [r4, #24]
 800ec18:	60a3      	str	r3, [r4, #8]
 800ec1a:	89a3      	ldrh	r3, [r4, #12]
 800ec1c:	071a      	lsls	r2, r3, #28
 800ec1e:	d525      	bpl.n	800ec6c <__swbuf_r+0x68>
 800ec20:	6923      	ldr	r3, [r4, #16]
 800ec22:	b31b      	cbz	r3, 800ec6c <__swbuf_r+0x68>
 800ec24:	6823      	ldr	r3, [r4, #0]
 800ec26:	6922      	ldr	r2, [r4, #16]
 800ec28:	1a98      	subs	r0, r3, r2
 800ec2a:	6963      	ldr	r3, [r4, #20]
 800ec2c:	b2f6      	uxtb	r6, r6
 800ec2e:	4283      	cmp	r3, r0
 800ec30:	4637      	mov	r7, r6
 800ec32:	dc04      	bgt.n	800ec3e <__swbuf_r+0x3a>
 800ec34:	4621      	mov	r1, r4
 800ec36:	4628      	mov	r0, r5
 800ec38:	f7ff ffaa 	bl	800eb90 <_fflush_r>
 800ec3c:	b9e0      	cbnz	r0, 800ec78 <__swbuf_r+0x74>
 800ec3e:	68a3      	ldr	r3, [r4, #8]
 800ec40:	3b01      	subs	r3, #1
 800ec42:	60a3      	str	r3, [r4, #8]
 800ec44:	6823      	ldr	r3, [r4, #0]
 800ec46:	1c5a      	adds	r2, r3, #1
 800ec48:	6022      	str	r2, [r4, #0]
 800ec4a:	701e      	strb	r6, [r3, #0]
 800ec4c:	6962      	ldr	r2, [r4, #20]
 800ec4e:	1c43      	adds	r3, r0, #1
 800ec50:	429a      	cmp	r2, r3
 800ec52:	d004      	beq.n	800ec5e <__swbuf_r+0x5a>
 800ec54:	89a3      	ldrh	r3, [r4, #12]
 800ec56:	07db      	lsls	r3, r3, #31
 800ec58:	d506      	bpl.n	800ec68 <__swbuf_r+0x64>
 800ec5a:	2e0a      	cmp	r6, #10
 800ec5c:	d104      	bne.n	800ec68 <__swbuf_r+0x64>
 800ec5e:	4621      	mov	r1, r4
 800ec60:	4628      	mov	r0, r5
 800ec62:	f7ff ff95 	bl	800eb90 <_fflush_r>
 800ec66:	b938      	cbnz	r0, 800ec78 <__swbuf_r+0x74>
 800ec68:	4638      	mov	r0, r7
 800ec6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ec6c:	4621      	mov	r1, r4
 800ec6e:	4628      	mov	r0, r5
 800ec70:	f000 f806 	bl	800ec80 <__swsetup_r>
 800ec74:	2800      	cmp	r0, #0
 800ec76:	d0d5      	beq.n	800ec24 <__swbuf_r+0x20>
 800ec78:	f04f 37ff 	mov.w	r7, #4294967295
 800ec7c:	e7f4      	b.n	800ec68 <__swbuf_r+0x64>
	...

0800ec80 <__swsetup_r>:
 800ec80:	b538      	push	{r3, r4, r5, lr}
 800ec82:	4b2a      	ldr	r3, [pc, #168]	; (800ed2c <__swsetup_r+0xac>)
 800ec84:	4605      	mov	r5, r0
 800ec86:	6818      	ldr	r0, [r3, #0]
 800ec88:	460c      	mov	r4, r1
 800ec8a:	b118      	cbz	r0, 800ec94 <__swsetup_r+0x14>
 800ec8c:	6a03      	ldr	r3, [r0, #32]
 800ec8e:	b90b      	cbnz	r3, 800ec94 <__swsetup_r+0x14>
 800ec90:	f7ff f992 	bl	800dfb8 <__sinit>
 800ec94:	89a3      	ldrh	r3, [r4, #12]
 800ec96:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ec9a:	0718      	lsls	r0, r3, #28
 800ec9c:	d422      	bmi.n	800ece4 <__swsetup_r+0x64>
 800ec9e:	06d9      	lsls	r1, r3, #27
 800eca0:	d407      	bmi.n	800ecb2 <__swsetup_r+0x32>
 800eca2:	2309      	movs	r3, #9
 800eca4:	602b      	str	r3, [r5, #0]
 800eca6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ecaa:	81a3      	strh	r3, [r4, #12]
 800ecac:	f04f 30ff 	mov.w	r0, #4294967295
 800ecb0:	e034      	b.n	800ed1c <__swsetup_r+0x9c>
 800ecb2:	0758      	lsls	r0, r3, #29
 800ecb4:	d512      	bpl.n	800ecdc <__swsetup_r+0x5c>
 800ecb6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ecb8:	b141      	cbz	r1, 800eccc <__swsetup_r+0x4c>
 800ecba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ecbe:	4299      	cmp	r1, r3
 800ecc0:	d002      	beq.n	800ecc8 <__swsetup_r+0x48>
 800ecc2:	4628      	mov	r0, r5
 800ecc4:	f7ff fb0a 	bl	800e2dc <_free_r>
 800ecc8:	2300      	movs	r3, #0
 800ecca:	6363      	str	r3, [r4, #52]	; 0x34
 800eccc:	89a3      	ldrh	r3, [r4, #12]
 800ecce:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ecd2:	81a3      	strh	r3, [r4, #12]
 800ecd4:	2300      	movs	r3, #0
 800ecd6:	6063      	str	r3, [r4, #4]
 800ecd8:	6923      	ldr	r3, [r4, #16]
 800ecda:	6023      	str	r3, [r4, #0]
 800ecdc:	89a3      	ldrh	r3, [r4, #12]
 800ecde:	f043 0308 	orr.w	r3, r3, #8
 800ece2:	81a3      	strh	r3, [r4, #12]
 800ece4:	6923      	ldr	r3, [r4, #16]
 800ece6:	b94b      	cbnz	r3, 800ecfc <__swsetup_r+0x7c>
 800ece8:	89a3      	ldrh	r3, [r4, #12]
 800ecea:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ecee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ecf2:	d003      	beq.n	800ecfc <__swsetup_r+0x7c>
 800ecf4:	4621      	mov	r1, r4
 800ecf6:	4628      	mov	r0, r5
 800ecf8:	f000 f857 	bl	800edaa <__smakebuf_r>
 800ecfc:	89a0      	ldrh	r0, [r4, #12]
 800ecfe:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ed02:	f010 0301 	ands.w	r3, r0, #1
 800ed06:	d00a      	beq.n	800ed1e <__swsetup_r+0x9e>
 800ed08:	2300      	movs	r3, #0
 800ed0a:	60a3      	str	r3, [r4, #8]
 800ed0c:	6963      	ldr	r3, [r4, #20]
 800ed0e:	425b      	negs	r3, r3
 800ed10:	61a3      	str	r3, [r4, #24]
 800ed12:	6923      	ldr	r3, [r4, #16]
 800ed14:	b943      	cbnz	r3, 800ed28 <__swsetup_r+0xa8>
 800ed16:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ed1a:	d1c4      	bne.n	800eca6 <__swsetup_r+0x26>
 800ed1c:	bd38      	pop	{r3, r4, r5, pc}
 800ed1e:	0781      	lsls	r1, r0, #30
 800ed20:	bf58      	it	pl
 800ed22:	6963      	ldrpl	r3, [r4, #20]
 800ed24:	60a3      	str	r3, [r4, #8]
 800ed26:	e7f4      	b.n	800ed12 <__swsetup_r+0x92>
 800ed28:	2000      	movs	r0, #0
 800ed2a:	e7f7      	b.n	800ed1c <__swsetup_r+0x9c>
 800ed2c:	24000088 	.word	0x24000088

0800ed30 <_sbrk_r>:
 800ed30:	b538      	push	{r3, r4, r5, lr}
 800ed32:	4d06      	ldr	r5, [pc, #24]	; (800ed4c <_sbrk_r+0x1c>)
 800ed34:	2300      	movs	r3, #0
 800ed36:	4604      	mov	r4, r0
 800ed38:	4608      	mov	r0, r1
 800ed3a:	602b      	str	r3, [r5, #0]
 800ed3c:	f7f2 fa96 	bl	800126c <_sbrk>
 800ed40:	1c43      	adds	r3, r0, #1
 800ed42:	d102      	bne.n	800ed4a <_sbrk_r+0x1a>
 800ed44:	682b      	ldr	r3, [r5, #0]
 800ed46:	b103      	cbz	r3, 800ed4a <_sbrk_r+0x1a>
 800ed48:	6023      	str	r3, [r4, #0]
 800ed4a:	bd38      	pop	{r3, r4, r5, pc}
 800ed4c:	240107f0 	.word	0x240107f0

0800ed50 <abort>:
 800ed50:	b508      	push	{r3, lr}
 800ed52:	2006      	movs	r0, #6
 800ed54:	f000 f88e 	bl	800ee74 <raise>
 800ed58:	2001      	movs	r0, #1
 800ed5a:	f7f2 fa57 	bl	800120c <_exit>

0800ed5e <__swhatbuf_r>:
 800ed5e:	b570      	push	{r4, r5, r6, lr}
 800ed60:	460c      	mov	r4, r1
 800ed62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ed66:	2900      	cmp	r1, #0
 800ed68:	b096      	sub	sp, #88	; 0x58
 800ed6a:	4615      	mov	r5, r2
 800ed6c:	461e      	mov	r6, r3
 800ed6e:	da0d      	bge.n	800ed8c <__swhatbuf_r+0x2e>
 800ed70:	89a3      	ldrh	r3, [r4, #12]
 800ed72:	f013 0f80 	tst.w	r3, #128	; 0x80
 800ed76:	f04f 0100 	mov.w	r1, #0
 800ed7a:	bf0c      	ite	eq
 800ed7c:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800ed80:	2340      	movne	r3, #64	; 0x40
 800ed82:	2000      	movs	r0, #0
 800ed84:	6031      	str	r1, [r6, #0]
 800ed86:	602b      	str	r3, [r5, #0]
 800ed88:	b016      	add	sp, #88	; 0x58
 800ed8a:	bd70      	pop	{r4, r5, r6, pc}
 800ed8c:	466a      	mov	r2, sp
 800ed8e:	f000 f879 	bl	800ee84 <_fstat_r>
 800ed92:	2800      	cmp	r0, #0
 800ed94:	dbec      	blt.n	800ed70 <__swhatbuf_r+0x12>
 800ed96:	9901      	ldr	r1, [sp, #4]
 800ed98:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800ed9c:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800eda0:	4259      	negs	r1, r3
 800eda2:	4159      	adcs	r1, r3
 800eda4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800eda8:	e7eb      	b.n	800ed82 <__swhatbuf_r+0x24>

0800edaa <__smakebuf_r>:
 800edaa:	898b      	ldrh	r3, [r1, #12]
 800edac:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800edae:	079d      	lsls	r5, r3, #30
 800edb0:	4606      	mov	r6, r0
 800edb2:	460c      	mov	r4, r1
 800edb4:	d507      	bpl.n	800edc6 <__smakebuf_r+0x1c>
 800edb6:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800edba:	6023      	str	r3, [r4, #0]
 800edbc:	6123      	str	r3, [r4, #16]
 800edbe:	2301      	movs	r3, #1
 800edc0:	6163      	str	r3, [r4, #20]
 800edc2:	b002      	add	sp, #8
 800edc4:	bd70      	pop	{r4, r5, r6, pc}
 800edc6:	ab01      	add	r3, sp, #4
 800edc8:	466a      	mov	r2, sp
 800edca:	f7ff ffc8 	bl	800ed5e <__swhatbuf_r>
 800edce:	9900      	ldr	r1, [sp, #0]
 800edd0:	4605      	mov	r5, r0
 800edd2:	4630      	mov	r0, r6
 800edd4:	f7ff faf6 	bl	800e3c4 <_malloc_r>
 800edd8:	b948      	cbnz	r0, 800edee <__smakebuf_r+0x44>
 800edda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800edde:	059a      	lsls	r2, r3, #22
 800ede0:	d4ef      	bmi.n	800edc2 <__smakebuf_r+0x18>
 800ede2:	f023 0303 	bic.w	r3, r3, #3
 800ede6:	f043 0302 	orr.w	r3, r3, #2
 800edea:	81a3      	strh	r3, [r4, #12]
 800edec:	e7e3      	b.n	800edb6 <__smakebuf_r+0xc>
 800edee:	89a3      	ldrh	r3, [r4, #12]
 800edf0:	6020      	str	r0, [r4, #0]
 800edf2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800edf6:	81a3      	strh	r3, [r4, #12]
 800edf8:	9b00      	ldr	r3, [sp, #0]
 800edfa:	6163      	str	r3, [r4, #20]
 800edfc:	9b01      	ldr	r3, [sp, #4]
 800edfe:	6120      	str	r0, [r4, #16]
 800ee00:	b15b      	cbz	r3, 800ee1a <__smakebuf_r+0x70>
 800ee02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ee06:	4630      	mov	r0, r6
 800ee08:	f000 f84e 	bl	800eea8 <_isatty_r>
 800ee0c:	b128      	cbz	r0, 800ee1a <__smakebuf_r+0x70>
 800ee0e:	89a3      	ldrh	r3, [r4, #12]
 800ee10:	f023 0303 	bic.w	r3, r3, #3
 800ee14:	f043 0301 	orr.w	r3, r3, #1
 800ee18:	81a3      	strh	r3, [r4, #12]
 800ee1a:	89a3      	ldrh	r3, [r4, #12]
 800ee1c:	431d      	orrs	r5, r3
 800ee1e:	81a5      	strh	r5, [r4, #12]
 800ee20:	e7cf      	b.n	800edc2 <__smakebuf_r+0x18>

0800ee22 <_raise_r>:
 800ee22:	291f      	cmp	r1, #31
 800ee24:	b538      	push	{r3, r4, r5, lr}
 800ee26:	4604      	mov	r4, r0
 800ee28:	460d      	mov	r5, r1
 800ee2a:	d904      	bls.n	800ee36 <_raise_r+0x14>
 800ee2c:	2316      	movs	r3, #22
 800ee2e:	6003      	str	r3, [r0, #0]
 800ee30:	f04f 30ff 	mov.w	r0, #4294967295
 800ee34:	bd38      	pop	{r3, r4, r5, pc}
 800ee36:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800ee38:	b112      	cbz	r2, 800ee40 <_raise_r+0x1e>
 800ee3a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ee3e:	b94b      	cbnz	r3, 800ee54 <_raise_r+0x32>
 800ee40:	4620      	mov	r0, r4
 800ee42:	f000 f853 	bl	800eeec <_getpid_r>
 800ee46:	462a      	mov	r2, r5
 800ee48:	4601      	mov	r1, r0
 800ee4a:	4620      	mov	r0, r4
 800ee4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ee50:	f000 b83a 	b.w	800eec8 <_kill_r>
 800ee54:	2b01      	cmp	r3, #1
 800ee56:	d00a      	beq.n	800ee6e <_raise_r+0x4c>
 800ee58:	1c59      	adds	r1, r3, #1
 800ee5a:	d103      	bne.n	800ee64 <_raise_r+0x42>
 800ee5c:	2316      	movs	r3, #22
 800ee5e:	6003      	str	r3, [r0, #0]
 800ee60:	2001      	movs	r0, #1
 800ee62:	e7e7      	b.n	800ee34 <_raise_r+0x12>
 800ee64:	2400      	movs	r4, #0
 800ee66:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ee6a:	4628      	mov	r0, r5
 800ee6c:	4798      	blx	r3
 800ee6e:	2000      	movs	r0, #0
 800ee70:	e7e0      	b.n	800ee34 <_raise_r+0x12>
	...

0800ee74 <raise>:
 800ee74:	4b02      	ldr	r3, [pc, #8]	; (800ee80 <raise+0xc>)
 800ee76:	4601      	mov	r1, r0
 800ee78:	6818      	ldr	r0, [r3, #0]
 800ee7a:	f7ff bfd2 	b.w	800ee22 <_raise_r>
 800ee7e:	bf00      	nop
 800ee80:	24000088 	.word	0x24000088

0800ee84 <_fstat_r>:
 800ee84:	b538      	push	{r3, r4, r5, lr}
 800ee86:	4d07      	ldr	r5, [pc, #28]	; (800eea4 <_fstat_r+0x20>)
 800ee88:	2300      	movs	r3, #0
 800ee8a:	4604      	mov	r4, r0
 800ee8c:	4608      	mov	r0, r1
 800ee8e:	4611      	mov	r1, r2
 800ee90:	602b      	str	r3, [r5, #0]
 800ee92:	f7f2 f9e1 	bl	8001258 <_fstat>
 800ee96:	1c43      	adds	r3, r0, #1
 800ee98:	d102      	bne.n	800eea0 <_fstat_r+0x1c>
 800ee9a:	682b      	ldr	r3, [r5, #0]
 800ee9c:	b103      	cbz	r3, 800eea0 <_fstat_r+0x1c>
 800ee9e:	6023      	str	r3, [r4, #0]
 800eea0:	bd38      	pop	{r3, r4, r5, pc}
 800eea2:	bf00      	nop
 800eea4:	240107f0 	.word	0x240107f0

0800eea8 <_isatty_r>:
 800eea8:	b538      	push	{r3, r4, r5, lr}
 800eeaa:	4d06      	ldr	r5, [pc, #24]	; (800eec4 <_isatty_r+0x1c>)
 800eeac:	2300      	movs	r3, #0
 800eeae:	4604      	mov	r4, r0
 800eeb0:	4608      	mov	r0, r1
 800eeb2:	602b      	str	r3, [r5, #0]
 800eeb4:	f7f2 f9d6 	bl	8001264 <_isatty>
 800eeb8:	1c43      	adds	r3, r0, #1
 800eeba:	d102      	bne.n	800eec2 <_isatty_r+0x1a>
 800eebc:	682b      	ldr	r3, [r5, #0]
 800eebe:	b103      	cbz	r3, 800eec2 <_isatty_r+0x1a>
 800eec0:	6023      	str	r3, [r4, #0]
 800eec2:	bd38      	pop	{r3, r4, r5, pc}
 800eec4:	240107f0 	.word	0x240107f0

0800eec8 <_kill_r>:
 800eec8:	b538      	push	{r3, r4, r5, lr}
 800eeca:	4d07      	ldr	r5, [pc, #28]	; (800eee8 <_kill_r+0x20>)
 800eecc:	2300      	movs	r3, #0
 800eece:	4604      	mov	r4, r0
 800eed0:	4608      	mov	r0, r1
 800eed2:	4611      	mov	r1, r2
 800eed4:	602b      	str	r3, [r5, #0]
 800eed6:	f7f2 f991 	bl	80011fc <_kill>
 800eeda:	1c43      	adds	r3, r0, #1
 800eedc:	d102      	bne.n	800eee4 <_kill_r+0x1c>
 800eede:	682b      	ldr	r3, [r5, #0]
 800eee0:	b103      	cbz	r3, 800eee4 <_kill_r+0x1c>
 800eee2:	6023      	str	r3, [r4, #0]
 800eee4:	bd38      	pop	{r3, r4, r5, pc}
 800eee6:	bf00      	nop
 800eee8:	240107f0 	.word	0x240107f0

0800eeec <_getpid_r>:
 800eeec:	f7f2 b984 	b.w	80011f8 <_getpid>

0800eef0 <_init>:
 800eef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eef2:	bf00      	nop
 800eef4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eef6:	bc08      	pop	{r3}
 800eef8:	469e      	mov	lr, r3
 800eefa:	4770      	bx	lr

0800eefc <_fini>:
 800eefc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eefe:	bf00      	nop
 800ef00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ef02:	bc08      	pop	{r3}
 800ef04:	469e      	mov	lr, r3
 800ef06:	4770      	bx	lr
