
STM32H743_Nucleo_ETH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000125fc  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002d14  0801289c  0801289c  0002289c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 shell_base_section 0000000c  080155b0  080155b0  000255b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          00000008  080155bc  080155bc  000255bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .init_array   00000004  080155c4  080155c4  000255c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000004  080155c8  080155c8  000255c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .data         000000bc  24000000  080155cc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          00011c48  240000bc  08015688  000300bc  2**2
                  ALLOC
  9 ._user_heap_stack 00000604  24011d04  08015688  00031d04  2**0
                  ALLOC
 10 .lwip_sec     00024b83  30020000  30020000  00040000  2**2
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000300bc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000300ea  2**0
                  CONTENTS, READONLY
 13 .debug_info   00055afb  00000000  00000000  0003012d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000b89d  00000000  00000000  00085c28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002428  00000000  00000000  000914c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00003a1d  00000000  00000000  000938f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00049fe9  00000000  00000000  0009730d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00058f5c  00000000  00000000  000e12f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0018b911  00000000  00000000  0013a252  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000085f0  00000000  00000000  002c5b64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loclists 00022b63  00000000  00000000  002ce154  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000068  00000000  00000000  002f0cb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240000bc 	.word	0x240000bc
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08012884 	.word	0x08012884

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240000c0 	.word	0x240000c0
 80002dc:	08012884 	.word	0x08012884

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b970 	b.w	8000688 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9e08      	ldr	r6, [sp, #32]
 80003c6:	460d      	mov	r5, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	460f      	mov	r7, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4694      	mov	ip, r2
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0xe2>
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	b143      	cbz	r3, 80003ee <__udivmoddi4+0x2e>
 80003dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80003e0:	f1c3 0220 	rsb	r2, r3, #32
 80003e4:	409f      	lsls	r7, r3
 80003e6:	fa20 f202 	lsr.w	r2, r0, r2
 80003ea:	4317      	orrs	r7, r2
 80003ec:	409c      	lsls	r4, r3
 80003ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003f2:	fa1f f58c 	uxth.w	r5, ip
 80003f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80003fa:	0c22      	lsrs	r2, r4, #16
 80003fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000400:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000404:	fb01 f005 	mul.w	r0, r1, r5
 8000408:	4290      	cmp	r0, r2
 800040a:	d90a      	bls.n	8000422 <__udivmoddi4+0x62>
 800040c:	eb1c 0202 	adds.w	r2, ip, r2
 8000410:	f101 37ff 	add.w	r7, r1, #4294967295
 8000414:	f080 811c 	bcs.w	8000650 <__udivmoddi4+0x290>
 8000418:	4290      	cmp	r0, r2
 800041a:	f240 8119 	bls.w	8000650 <__udivmoddi4+0x290>
 800041e:	3902      	subs	r1, #2
 8000420:	4462      	add	r2, ip
 8000422:	1a12      	subs	r2, r2, r0
 8000424:	b2a4      	uxth	r4, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000432:	fb00 f505 	mul.w	r5, r0, r5
 8000436:	42a5      	cmp	r5, r4
 8000438:	d90a      	bls.n	8000450 <__udivmoddi4+0x90>
 800043a:	eb1c 0404 	adds.w	r4, ip, r4
 800043e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000442:	f080 8107 	bcs.w	8000654 <__udivmoddi4+0x294>
 8000446:	42a5      	cmp	r5, r4
 8000448:	f240 8104 	bls.w	8000654 <__udivmoddi4+0x294>
 800044c:	4464      	add	r4, ip
 800044e:	3802      	subs	r0, #2
 8000450:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000454:	1b64      	subs	r4, r4, r5
 8000456:	2100      	movs	r1, #0
 8000458:	b11e      	cbz	r6, 8000462 <__udivmoddi4+0xa2>
 800045a:	40dc      	lsrs	r4, r3
 800045c:	2300      	movs	r3, #0
 800045e:	e9c6 4300 	strd	r4, r3, [r6]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0xbc>
 800046a:	2e00      	cmp	r6, #0
 800046c:	f000 80ed 	beq.w	800064a <__udivmoddi4+0x28a>
 8000470:	2100      	movs	r1, #0
 8000472:	e9c6 0500 	strd	r0, r5, [r6]
 8000476:	4608      	mov	r0, r1
 8000478:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047c:	fab3 f183 	clz	r1, r3
 8000480:	2900      	cmp	r1, #0
 8000482:	d149      	bne.n	8000518 <__udivmoddi4+0x158>
 8000484:	42ab      	cmp	r3, r5
 8000486:	d302      	bcc.n	800048e <__udivmoddi4+0xce>
 8000488:	4282      	cmp	r2, r0
 800048a:	f200 80f8 	bhi.w	800067e <__udivmoddi4+0x2be>
 800048e:	1a84      	subs	r4, r0, r2
 8000490:	eb65 0203 	sbc.w	r2, r5, r3
 8000494:	2001      	movs	r0, #1
 8000496:	4617      	mov	r7, r2
 8000498:	2e00      	cmp	r6, #0
 800049a:	d0e2      	beq.n	8000462 <__udivmoddi4+0xa2>
 800049c:	e9c6 4700 	strd	r4, r7, [r6]
 80004a0:	e7df      	b.n	8000462 <__udivmoddi4+0xa2>
 80004a2:	b902      	cbnz	r2, 80004a6 <__udivmoddi4+0xe6>
 80004a4:	deff      	udf	#255	; 0xff
 80004a6:	fab2 f382 	clz	r3, r2
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	f040 8090 	bne.w	80005d0 <__udivmoddi4+0x210>
 80004b0:	1a8a      	subs	r2, r1, r2
 80004b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004b6:	fa1f fe8c 	uxth.w	lr, ip
 80004ba:	2101      	movs	r1, #1
 80004bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80004c0:	fb07 2015 	mls	r0, r7, r5, r2
 80004c4:	0c22      	lsrs	r2, r4, #16
 80004c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004ca:	fb0e f005 	mul.w	r0, lr, r5
 80004ce:	4290      	cmp	r0, r2
 80004d0:	d908      	bls.n	80004e4 <__udivmoddi4+0x124>
 80004d2:	eb1c 0202 	adds.w	r2, ip, r2
 80004d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80004da:	d202      	bcs.n	80004e2 <__udivmoddi4+0x122>
 80004dc:	4290      	cmp	r0, r2
 80004de:	f200 80cb 	bhi.w	8000678 <__udivmoddi4+0x2b8>
 80004e2:	4645      	mov	r5, r8
 80004e4:	1a12      	subs	r2, r2, r0
 80004e6:	b2a4      	uxth	r4, r4
 80004e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80004ec:	fb07 2210 	mls	r2, r7, r0, r2
 80004f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80004f4:	fb0e fe00 	mul.w	lr, lr, r0
 80004f8:	45a6      	cmp	lr, r4
 80004fa:	d908      	bls.n	800050e <__udivmoddi4+0x14e>
 80004fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000500:	f100 32ff 	add.w	r2, r0, #4294967295
 8000504:	d202      	bcs.n	800050c <__udivmoddi4+0x14c>
 8000506:	45a6      	cmp	lr, r4
 8000508:	f200 80bb 	bhi.w	8000682 <__udivmoddi4+0x2c2>
 800050c:	4610      	mov	r0, r2
 800050e:	eba4 040e 	sub.w	r4, r4, lr
 8000512:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000516:	e79f      	b.n	8000458 <__udivmoddi4+0x98>
 8000518:	f1c1 0720 	rsb	r7, r1, #32
 800051c:	408b      	lsls	r3, r1
 800051e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000522:	ea4c 0c03 	orr.w	ip, ip, r3
 8000526:	fa05 f401 	lsl.w	r4, r5, r1
 800052a:	fa20 f307 	lsr.w	r3, r0, r7
 800052e:	40fd      	lsrs	r5, r7
 8000530:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000534:	4323      	orrs	r3, r4
 8000536:	fbb5 f8f9 	udiv	r8, r5, r9
 800053a:	fa1f fe8c 	uxth.w	lr, ip
 800053e:	fb09 5518 	mls	r5, r9, r8, r5
 8000542:	0c1c      	lsrs	r4, r3, #16
 8000544:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000548:	fb08 f50e 	mul.w	r5, r8, lr
 800054c:	42a5      	cmp	r5, r4
 800054e:	fa02 f201 	lsl.w	r2, r2, r1
 8000552:	fa00 f001 	lsl.w	r0, r0, r1
 8000556:	d90b      	bls.n	8000570 <__udivmoddi4+0x1b0>
 8000558:	eb1c 0404 	adds.w	r4, ip, r4
 800055c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000560:	f080 8088 	bcs.w	8000674 <__udivmoddi4+0x2b4>
 8000564:	42a5      	cmp	r5, r4
 8000566:	f240 8085 	bls.w	8000674 <__udivmoddi4+0x2b4>
 800056a:	f1a8 0802 	sub.w	r8, r8, #2
 800056e:	4464      	add	r4, ip
 8000570:	1b64      	subs	r4, r4, r5
 8000572:	b29d      	uxth	r5, r3
 8000574:	fbb4 f3f9 	udiv	r3, r4, r9
 8000578:	fb09 4413 	mls	r4, r9, r3, r4
 800057c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000580:	fb03 fe0e 	mul.w	lr, r3, lr
 8000584:	45a6      	cmp	lr, r4
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x1da>
 8000588:	eb1c 0404 	adds.w	r4, ip, r4
 800058c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000590:	d26c      	bcs.n	800066c <__udivmoddi4+0x2ac>
 8000592:	45a6      	cmp	lr, r4
 8000594:	d96a      	bls.n	800066c <__udivmoddi4+0x2ac>
 8000596:	3b02      	subs	r3, #2
 8000598:	4464      	add	r4, ip
 800059a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800059e:	fba3 9502 	umull	r9, r5, r3, r2
 80005a2:	eba4 040e 	sub.w	r4, r4, lr
 80005a6:	42ac      	cmp	r4, r5
 80005a8:	46c8      	mov	r8, r9
 80005aa:	46ae      	mov	lr, r5
 80005ac:	d356      	bcc.n	800065c <__udivmoddi4+0x29c>
 80005ae:	d053      	beq.n	8000658 <__udivmoddi4+0x298>
 80005b0:	b156      	cbz	r6, 80005c8 <__udivmoddi4+0x208>
 80005b2:	ebb0 0208 	subs.w	r2, r0, r8
 80005b6:	eb64 040e 	sbc.w	r4, r4, lr
 80005ba:	fa04 f707 	lsl.w	r7, r4, r7
 80005be:	40ca      	lsrs	r2, r1
 80005c0:	40cc      	lsrs	r4, r1
 80005c2:	4317      	orrs	r7, r2
 80005c4:	e9c6 7400 	strd	r7, r4, [r6]
 80005c8:	4618      	mov	r0, r3
 80005ca:	2100      	movs	r1, #0
 80005cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005d0:	f1c3 0120 	rsb	r1, r3, #32
 80005d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005d8:	fa20 f201 	lsr.w	r2, r0, r1
 80005dc:	fa25 f101 	lsr.w	r1, r5, r1
 80005e0:	409d      	lsls	r5, r3
 80005e2:	432a      	orrs	r2, r5
 80005e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e8:	fa1f fe8c 	uxth.w	lr, ip
 80005ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80005f0:	fb07 1510 	mls	r5, r7, r0, r1
 80005f4:	0c11      	lsrs	r1, r2, #16
 80005f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80005fa:	fb00 f50e 	mul.w	r5, r0, lr
 80005fe:	428d      	cmp	r5, r1
 8000600:	fa04 f403 	lsl.w	r4, r4, r3
 8000604:	d908      	bls.n	8000618 <__udivmoddi4+0x258>
 8000606:	eb1c 0101 	adds.w	r1, ip, r1
 800060a:	f100 38ff 	add.w	r8, r0, #4294967295
 800060e:	d22f      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000610:	428d      	cmp	r5, r1
 8000612:	d92d      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000614:	3802      	subs	r0, #2
 8000616:	4461      	add	r1, ip
 8000618:	1b49      	subs	r1, r1, r5
 800061a:	b292      	uxth	r2, r2
 800061c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000620:	fb07 1115 	mls	r1, r7, r5, r1
 8000624:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000628:	fb05 f10e 	mul.w	r1, r5, lr
 800062c:	4291      	cmp	r1, r2
 800062e:	d908      	bls.n	8000642 <__udivmoddi4+0x282>
 8000630:	eb1c 0202 	adds.w	r2, ip, r2
 8000634:	f105 38ff 	add.w	r8, r5, #4294967295
 8000638:	d216      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 800063a:	4291      	cmp	r1, r2
 800063c:	d914      	bls.n	8000668 <__udivmoddi4+0x2a8>
 800063e:	3d02      	subs	r5, #2
 8000640:	4462      	add	r2, ip
 8000642:	1a52      	subs	r2, r2, r1
 8000644:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000648:	e738      	b.n	80004bc <__udivmoddi4+0xfc>
 800064a:	4631      	mov	r1, r6
 800064c:	4630      	mov	r0, r6
 800064e:	e708      	b.n	8000462 <__udivmoddi4+0xa2>
 8000650:	4639      	mov	r1, r7
 8000652:	e6e6      	b.n	8000422 <__udivmoddi4+0x62>
 8000654:	4610      	mov	r0, r2
 8000656:	e6fb      	b.n	8000450 <__udivmoddi4+0x90>
 8000658:	4548      	cmp	r0, r9
 800065a:	d2a9      	bcs.n	80005b0 <__udivmoddi4+0x1f0>
 800065c:	ebb9 0802 	subs.w	r8, r9, r2
 8000660:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000664:	3b01      	subs	r3, #1
 8000666:	e7a3      	b.n	80005b0 <__udivmoddi4+0x1f0>
 8000668:	4645      	mov	r5, r8
 800066a:	e7ea      	b.n	8000642 <__udivmoddi4+0x282>
 800066c:	462b      	mov	r3, r5
 800066e:	e794      	b.n	800059a <__udivmoddi4+0x1da>
 8000670:	4640      	mov	r0, r8
 8000672:	e7d1      	b.n	8000618 <__udivmoddi4+0x258>
 8000674:	46d0      	mov	r8, sl
 8000676:	e77b      	b.n	8000570 <__udivmoddi4+0x1b0>
 8000678:	3d02      	subs	r5, #2
 800067a:	4462      	add	r2, ip
 800067c:	e732      	b.n	80004e4 <__udivmoddi4+0x124>
 800067e:	4608      	mov	r0, r1
 8000680:	e70a      	b.n	8000498 <__udivmoddi4+0xd8>
 8000682:	4464      	add	r4, ip
 8000684:	3802      	subs	r0, #2
 8000686:	e742      	b.n	800050e <__udivmoddi4+0x14e>

08000688 <__aeabi_idiv0>:
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop

0800068c <vApplicationStackOverflowHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
   /* ETH_CODE: add breakpoint when stack oveflow is detected by FreeRTOS.
    * Useful for debugging issues.
    */
   __BKPT(0);
 800068c:	be00      	bkpt	0x0000
}
 800068e:	4770      	bx	lr

08000690 <lwiperf_tcp_close>:
static void
lwiperf_list_remove(lwiperf_state_base_t *item)
{
  lwiperf_state_base_t *prev = NULL;
  lwiperf_state_base_t *iter;
  for (iter = lwiperf_all_connections; iter != NULL; prev = iter, iter = iter->next) {
 8000690:	4a3b      	ldr	r2, [pc, #236]	; (8000780 <lwiperf_tcp_close+0xf0>)
 8000692:	6813      	ldr	r3, [r2, #0]
}

/** Close an iperf tcp session */
static void
lwiperf_tcp_close(lwiperf_state_tcp_t *conn, enum lwiperf_report_type report_type)
{
 8000694:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000698:	4604      	mov	r4, r0
 800069a:	b087      	sub	sp, #28
 800069c:	460e      	mov	r6, r1
  for (iter = lwiperf_all_connections; iter != NULL; prev = iter, iter = iter->next) {
 800069e:	b91b      	cbnz	r3, 80006a8 <lwiperf_tcp_close+0x18>
 80006a0:	e01b      	b.n	80006da <lwiperf_tcp_close+0x4a>
 80006a2:	461a      	mov	r2, r3
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	b1c3      	cbz	r3, 80006da <lwiperf_tcp_close+0x4a>
    if (iter == item) {
 80006a8:	429c      	cmp	r4, r3
 80006aa:	d1fa      	bne.n	80006a2 <lwiperf_tcp_close+0x12>
        prev->next = iter->next;
 80006ac:	6825      	ldr	r5, [r4, #0]
 80006ae:	6015      	str	r5, [r2, #0]
      for (iter = iter->next; iter != NULL; iter = iter->next) {
 80006b0:	b19d      	cbz	r5, 80006da <lwiperf_tcp_close+0x4a>
        LWIP_ASSERT("duplicate entry", iter != item);
 80006b2:	42ac      	cmp	r4, r5
 80006b4:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 8000788 <lwiperf_tcp_close+0xf8>
 80006b8:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 8000790 <lwiperf_tcp_close+0x100>
 80006bc:	4f31      	ldr	r7, [pc, #196]	; (8000784 <lwiperf_tcp_close+0xf4>)
 80006be:	d003      	beq.n	80006c8 <lwiperf_tcp_close+0x38>
      for (iter = iter->next; iter != NULL; iter = iter->next) {
 80006c0:	682d      	ldr	r5, [r5, #0]
 80006c2:	b155      	cbz	r5, 80006da <lwiperf_tcp_close+0x4a>
        LWIP_ASSERT("duplicate entry", iter != item);
 80006c4:	42ac      	cmp	r4, r5
 80006c6:	d1fb      	bne.n	80006c0 <lwiperf_tcp_close+0x30>
 80006c8:	464b      	mov	r3, r9
 80006ca:	22d0      	movs	r2, #208	; 0xd0
 80006cc:	4641      	mov	r1, r8
 80006ce:	4638      	mov	r0, r7
 80006d0:	f010 ff9c 	bl	801160c <iprintf>
      for (iter = iter->next; iter != NULL; iter = iter->next) {
 80006d4:	682d      	ldr	r5, [r5, #0]
 80006d6:	2d00      	cmp	r5, #0
 80006d8:	d1f4      	bne.n	80006c4 <lwiperf_tcp_close+0x34>
  if ((conn != NULL) && (conn->report_fn != NULL)) {
 80006da:	b1cc      	cbz	r4, 8000710 <lwiperf_tcp_close+0x80>
 80006dc:	69a3      	ldr	r3, [r4, #24]
 80006de:	b1bb      	cbz	r3, 8000710 <lwiperf_tcp_close+0x80>
    now = sys_now();
 80006e0:	f006 f948 	bl	8006974 <sys_now>
    duration_ms = now - conn->time_started;
 80006e4:	6963      	ldr	r3, [r4, #20]
      bandwidth_kbitpsec = (conn->bytes_transferred / duration_ms) * 8U;
 80006e6:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
    if (duration_ms == 0) {
 80006ea:	1ac5      	subs	r5, r0, r3
 80006ec:	d046      	beq.n	800077c <lwiperf_tcp_close+0xec>
      bandwidth_kbitpsec = (conn->bytes_transferred / duration_ms) * 8U;
 80006ee:	fbbc f7f5 	udiv	r7, ip, r5
 80006f2:	00ff      	lsls	r7, r7, #3
                    &conn->conn_pcb->local_ip, conn->conn_pcb->local_port,
 80006f4:	6922      	ldr	r2, [r4, #16]
    conn->report_fn(conn->report_arg, report_type,
 80006f6:	4631      	mov	r1, r6
 80006f8:	8ad3      	ldrh	r3, [r2, #22]
 80006fa:	e9d4 6006 	ldrd	r6, r0, [r4, #24]
 80006fe:	e9cd 5703 	strd	r5, r7, [sp, #12]
 8000702:	f8cd c008 	str.w	ip, [sp, #8]
 8000706:	8b15      	ldrh	r5, [r2, #24]
 8000708:	9501      	str	r5, [sp, #4]
                    &conn->conn_pcb->remote_ip, conn->conn_pcb->remote_port,
 800070a:	1d15      	adds	r5, r2, #4
    conn->report_fn(conn->report_arg, report_type,
 800070c:	9500      	str	r5, [sp, #0]
 800070e:	47b0      	blx	r6
  err_t err;

  lwiperf_list_remove(&conn->base);
  lwip_tcp_conn_report(conn, report_type);
  if (conn->conn_pcb != NULL) {
 8000710:	6920      	ldr	r0, [r4, #16]
 8000712:	b330      	cbz	r0, 8000762 <lwiperf_tcp_close+0xd2>
    tcp_arg(conn->conn_pcb, NULL);
 8000714:	2100      	movs	r1, #0
 8000716:	f00a fd2d 	bl	800b174 <tcp_arg>
    tcp_poll(conn->conn_pcb, NULL, 0);
 800071a:	2200      	movs	r2, #0
 800071c:	6920      	ldr	r0, [r4, #16]
 800071e:	4611      	mov	r1, r2
 8000720:	f00a fd8a 	bl	800b238 <tcp_poll>
    tcp_sent(conn->conn_pcb, NULL);
 8000724:	2100      	movs	r1, #0
 8000726:	6920      	ldr	r0, [r4, #16]
 8000728:	f00a fd46 	bl	800b1b8 <tcp_sent>
    tcp_recv(conn->conn_pcb, NULL);
 800072c:	2100      	movs	r1, #0
 800072e:	6920      	ldr	r0, [r4, #16]
 8000730:	f00a fd28 	bl	800b184 <tcp_recv>
    tcp_err(conn->conn_pcb, NULL);
 8000734:	6920      	ldr	r0, [r4, #16]
 8000736:	2100      	movs	r1, #0
 8000738:	f00a fd58 	bl	800b1ec <tcp_err>
    err = tcp_close(conn->conn_pcb);
 800073c:	6920      	ldr	r0, [r4, #16]
 800073e:	f00b fbcd 	bl	800bedc <tcp_close>
    if (err != ERR_OK) {
 8000742:	b928      	cbnz	r0, 8000750 <lwiperf_tcp_close+0xc0>
  } else {
    /* no conn pcb, this is the listener pcb */
    err = tcp_close(conn->server_pcb);
    LWIP_ASSERT("error", err == ERR_OK);
  }
  LWIPERF_FREE(lwiperf_state_tcp_t, conn);
 8000744:	4620      	mov	r0, r4
}
 8000746:	b007      	add	sp, #28
 8000748:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  LWIPERF_FREE(lwiperf_state_tcp_t, conn);
 800074c:	f009 b886 	b.w	800985c <mem_free>
      tcp_abort(conn->conn_pcb);
 8000750:	6920      	ldr	r0, [r4, #16]
 8000752:	f00b f9dd 	bl	800bb10 <tcp_abort>
  LWIPERF_FREE(lwiperf_state_tcp_t, conn);
 8000756:	4620      	mov	r0, r4
}
 8000758:	b007      	add	sp, #28
 800075a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  LWIPERF_FREE(lwiperf_state_tcp_t, conn);
 800075e:	f009 b87d 	b.w	800985c <mem_free>
    err = tcp_close(conn->server_pcb);
 8000762:	68e0      	ldr	r0, [r4, #12]
 8000764:	f00b fbba 	bl	800bedc <tcp_close>
    LWIP_ASSERT("error", err == ERR_OK);
 8000768:	2800      	cmp	r0, #0
 800076a:	d0eb      	beq.n	8000744 <lwiperf_tcp_close+0xb4>
 800076c:	4b06      	ldr	r3, [pc, #24]	; (8000788 <lwiperf_tcp_close+0xf8>)
 800076e:	f240 120d 	movw	r2, #269	; 0x10d
 8000772:	4906      	ldr	r1, [pc, #24]	; (800078c <lwiperf_tcp_close+0xfc>)
 8000774:	4803      	ldr	r0, [pc, #12]	; (8000784 <lwiperf_tcp_close+0xf4>)
 8000776:	f010 ff49 	bl	801160c <iprintf>
 800077a:	e7e3      	b.n	8000744 <lwiperf_tcp_close+0xb4>
      bandwidth_kbitpsec = 0;
 800077c:	462f      	mov	r7, r5
 800077e:	e7b9      	b.n	80006f4 <lwiperf_tcp_close+0x64>
 8000780:	240000d8 	.word	0x240000d8
 8000784:	080128dc 	.word	0x080128dc
 8000788:	080128b4 	.word	0x080128b4
 800078c:	08012904 	.word	0x08012904
 8000790:	080128cc 	.word	0x080128cc

08000794 <lwiperf_tcp_accept>:
/** This is called when a new client connects for an iperf tcp session */
static err_t
lwiperf_tcp_accept(void *arg, struct tcp_pcb *newpcb, err_t err)
{
  lwiperf_state_tcp_t *s, *conn;
  if ((err != ERR_OK) || (newpcb == NULL) || (arg == NULL)) {
 8000794:	2800      	cmp	r0, #0
 8000796:	bf18      	it	ne
 8000798:	2900      	cmpne	r1, #0
 800079a:	f000 8092 	beq.w	80008c2 <lwiperf_tcp_accept+0x12e>
 800079e:	2a00      	cmp	r2, #0
 80007a0:	f040 808f 	bne.w	80008c2 <lwiperf_tcp_accept+0x12e>
{
 80007a4:	b570      	push	{r4, r5, r6, lr}
    return ERR_VAL;
  }

  s = (lwiperf_state_tcp_t *)arg;
  LWIP_ASSERT("invalid session", s->base.server);
 80007a6:	7943      	ldrb	r3, [r0, #5]
 80007a8:	460e      	mov	r6, r1
 80007aa:	4604      	mov	r4, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d06b      	beq.n	8000888 <lwiperf_tcp_accept+0xf4>
  LWIP_ASSERT("invalid listen pcb", s->server_pcb != NULL);
 80007b0:	68e3      	ldr	r3, [r4, #12]
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d072      	beq.n	800089c <lwiperf_tcp_accept+0x108>
  LWIP_ASSERT("invalid conn pcb", s->conn_pcb == NULL);
 80007b6:	6923      	ldr	r3, [r4, #16]
 80007b8:	b133      	cbz	r3, 80007c8 <lwiperf_tcp_accept+0x34>
 80007ba:	4b43      	ldr	r3, [pc, #268]	; (80008c8 <lwiperf_tcp_accept+0x134>)
 80007bc:	f240 225a 	movw	r2, #602	; 0x25a
 80007c0:	4942      	ldr	r1, [pc, #264]	; (80008cc <lwiperf_tcp_accept+0x138>)
 80007c2:	4843      	ldr	r0, [pc, #268]	; (80008d0 <lwiperf_tcp_accept+0x13c>)
 80007c4:	f010 ff22 	bl	801160c <iprintf>
  if (s->specific_remote) {
 80007c8:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d138      	bne.n	8000842 <lwiperf_tcp_accept+0xae>
    if (!ip_addr_cmp(&newpcb->remote_ip, &s->remote_addr)) {
      /* this listener belongs to a client session, and this is not the correct remote */
      return ERR_VAL;
    }
  } else {
    LWIP_ASSERT("s->base.related_master_state == NULL", s->base.related_master_state == NULL);
 80007d0:	68a3      	ldr	r3, [r4, #8]
 80007d2:	b133      	cbz	r3, 80007e2 <lwiperf_tcp_accept+0x4e>
 80007d4:	4b3c      	ldr	r3, [pc, #240]	; (80008c8 <lwiperf_tcp_accept+0x134>)
 80007d6:	f240 2262 	movw	r2, #610	; 0x262
 80007da:	493e      	ldr	r1, [pc, #248]	; (80008d4 <lwiperf_tcp_accept+0x140>)
 80007dc:	483c      	ldr	r0, [pc, #240]	; (80008d0 <lwiperf_tcp_accept+0x13c>)
 80007de:	f010 ff15 	bl	801160c <iprintf>
  }

  conn = (lwiperf_state_tcp_t *)LWIPERF_ALLOC(lwiperf_state_tcp_t);
 80007e2:	2048      	movs	r0, #72	; 0x48
 80007e4:	f009 f9de 	bl	8009ba4 <mem_malloc>
  if (conn == NULL) {
 80007e8:	4605      	mov	r5, r0
 80007ea:	2800      	cmp	r0, #0
 80007ec:	d066      	beq.n	80008bc <lwiperf_tcp_accept+0x128>
    return ERR_MEM;
  }
  memset(conn, 0, sizeof(lwiperf_state_tcp_t));
 80007ee:	2248      	movs	r2, #72	; 0x48
 80007f0:	2100      	movs	r1, #0
 80007f2:	f011 f8b7 	bl	8011964 <memset>
  conn->base.tcp = 1;
 80007f6:	f240 1301 	movw	r3, #257	; 0x101
  conn->base.server = 1;
  conn->base.related_master_state = &s->base;
 80007fa:	60ac      	str	r4, [r5, #8]
  conn->base.tcp = 1;
 80007fc:	80ab      	strh	r3, [r5, #4]
  conn->conn_pcb = newpcb;
 80007fe:	612e      	str	r6, [r5, #16]
  conn->time_started = sys_now();
 8000800:	f006 f8b8 	bl	8006974 <sys_now>
  conn->report_fn = s->report_fn;
 8000804:	69a3      	ldr	r3, [r4, #24]
  conn->report_arg = s->report_arg;

  /* setup the tcp rx connection */
  tcp_arg(newpcb, conn);
 8000806:	4629      	mov	r1, r5
  conn->report_fn = s->report_fn;
 8000808:	e9c5 0305 	strd	r0, r3, [r5, #20]
  conn->report_arg = s->report_arg;
 800080c:	69e3      	ldr	r3, [r4, #28]
  tcp_arg(newpcb, conn);
 800080e:	4630      	mov	r0, r6
  conn->report_arg = s->report_arg;
 8000810:	61eb      	str	r3, [r5, #28]
  tcp_arg(newpcb, conn);
 8000812:	f00a fcaf 	bl	800b174 <tcp_arg>
  tcp_recv(newpcb, lwiperf_tcp_recv);
 8000816:	4930      	ldr	r1, [pc, #192]	; (80008d8 <lwiperf_tcp_accept+0x144>)
 8000818:	4630      	mov	r0, r6
 800081a:	f00a fcb3 	bl	800b184 <tcp_recv>
  tcp_poll(newpcb, lwiperf_tcp_poll, 2U);
 800081e:	2202      	movs	r2, #2
 8000820:	492e      	ldr	r1, [pc, #184]	; (80008dc <lwiperf_tcp_accept+0x148>)
 8000822:	4630      	mov	r0, r6
 8000824:	f00a fd08 	bl	800b238 <tcp_poll>
  tcp_err(conn->conn_pcb, lwiperf_tcp_err);
 8000828:	492d      	ldr	r1, [pc, #180]	; (80008e0 <lwiperf_tcp_accept+0x14c>)
 800082a:	6928      	ldr	r0, [r5, #16]
 800082c:	f00a fcde 	bl	800b1ec <tcp_err>

  if (s->specific_remote) {
 8000830:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8000834:	b97b      	cbnz	r3, 8000856 <lwiperf_tcp_accept+0xc2>
  for (iter = lwiperf_all_connections; iter != NULL; iter = iter->next) {
 8000836:	4e2b      	ldr	r6, [pc, #172]	; (80008e4 <lwiperf_tcp_accept+0x150>)
 8000838:	6831      	ldr	r1, [r6, #0]
      s->report_fn = NULL;
      lwiperf_tcp_close(s, LWIPERF_TCP_ABORTED_LOCAL);
    }
  }
  lwiperf_list_add(&conn->base);
  return ERR_OK;
 800083a:	2000      	movs	r0, #0
  item->next = lwiperf_all_connections;
 800083c:	6029      	str	r1, [r5, #0]
  lwiperf_all_connections = item;
 800083e:	6035      	str	r5, [r6, #0]
}
 8000840:	bd70      	pop	{r4, r5, r6, pc}
    LWIP_ASSERT("s->base.related_master_state != NULL", s->base.related_master_state != NULL);
 8000842:	68a3      	ldr	r3, [r4, #8]
 8000844:	2b00      	cmp	r3, #0
 8000846:	d031      	beq.n	80008ac <lwiperf_tcp_accept+0x118>
    if (!ip_addr_cmp(&newpcb->remote_ip, &s->remote_addr)) {
 8000848:	6872      	ldr	r2, [r6, #4]
 800084a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800084c:	429a      	cmp	r2, r3
 800084e:	d0c8      	beq.n	80007e2 <lwiperf_tcp_accept+0x4e>
    return ERR_VAL;
 8000850:	f06f 0005 	mvn.w	r0, #5
}
 8000854:	bd70      	pop	{r4, r5, r6, pc}
    conn->base.related_master_state = s->base.related_master_state;
 8000856:	68a2      	ldr	r2, [r4, #8]
 8000858:	4e22      	ldr	r6, [pc, #136]	; (80008e4 <lwiperf_tcp_accept+0x150>)
 800085a:	60aa      	str	r2, [r5, #8]
    if (!s->client_tradeoff_mode || !lwiperf_list_find(s->base.related_master_state)) {
 800085c:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8000860:	b153      	cbz	r3, 8000878 <lwiperf_tcp_accept+0xe4>
  for (iter = lwiperf_all_connections; iter != NULL; iter = iter->next) {
 8000862:	6831      	ldr	r1, [r6, #0]
 8000864:	b141      	cbz	r1, 8000878 <lwiperf_tcp_accept+0xe4>
    if (iter == item) {
 8000866:	428a      	cmp	r2, r1
 8000868:	d0e7      	beq.n	800083a <lwiperf_tcp_accept+0xa6>
 800086a:	460b      	mov	r3, r1
 800086c:	e001      	b.n	8000872 <lwiperf_tcp_accept+0xde>
 800086e:	429a      	cmp	r2, r3
 8000870:	d0e3      	beq.n	800083a <lwiperf_tcp_accept+0xa6>
  for (iter = lwiperf_all_connections; iter != NULL; iter = iter->next) {
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	2b00      	cmp	r3, #0
 8000876:	d1fa      	bne.n	800086e <lwiperf_tcp_accept+0xda>
      s->report_fn = NULL;
 8000878:	2300      	movs	r3, #0
      lwiperf_tcp_close(s, LWIPERF_TCP_ABORTED_LOCAL);
 800087a:	2102      	movs	r1, #2
 800087c:	4620      	mov	r0, r4
      s->report_fn = NULL;
 800087e:	61a3      	str	r3, [r4, #24]
      lwiperf_tcp_close(s, LWIPERF_TCP_ABORTED_LOCAL);
 8000880:	f7ff ff06 	bl	8000690 <lwiperf_tcp_close>
  item->next = lwiperf_all_connections;
 8000884:	6831      	ldr	r1, [r6, #0]
 8000886:	e7d8      	b.n	800083a <lwiperf_tcp_accept+0xa6>
  LWIP_ASSERT("invalid session", s->base.server);
 8000888:	4b0f      	ldr	r3, [pc, #60]	; (80008c8 <lwiperf_tcp_accept+0x134>)
 800088a:	f44f 7216 	mov.w	r2, #600	; 0x258
 800088e:	4916      	ldr	r1, [pc, #88]	; (80008e8 <lwiperf_tcp_accept+0x154>)
 8000890:	480f      	ldr	r0, [pc, #60]	; (80008d0 <lwiperf_tcp_accept+0x13c>)
 8000892:	f010 febb 	bl	801160c <iprintf>
  LWIP_ASSERT("invalid listen pcb", s->server_pcb != NULL);
 8000896:	68e3      	ldr	r3, [r4, #12]
 8000898:	2b00      	cmp	r3, #0
 800089a:	d18c      	bne.n	80007b6 <lwiperf_tcp_accept+0x22>
 800089c:	4b0a      	ldr	r3, [pc, #40]	; (80008c8 <lwiperf_tcp_accept+0x134>)
 800089e:	f240 2259 	movw	r2, #601	; 0x259
 80008a2:	4912      	ldr	r1, [pc, #72]	; (80008ec <lwiperf_tcp_accept+0x158>)
 80008a4:	480a      	ldr	r0, [pc, #40]	; (80008d0 <lwiperf_tcp_accept+0x13c>)
 80008a6:	f010 feb1 	bl	801160c <iprintf>
 80008aa:	e784      	b.n	80007b6 <lwiperf_tcp_accept+0x22>
    LWIP_ASSERT("s->base.related_master_state != NULL", s->base.related_master_state != NULL);
 80008ac:	4b06      	ldr	r3, [pc, #24]	; (80008c8 <lwiperf_tcp_accept+0x134>)
 80008ae:	f44f 7217 	mov.w	r2, #604	; 0x25c
 80008b2:	490f      	ldr	r1, [pc, #60]	; (80008f0 <lwiperf_tcp_accept+0x15c>)
 80008b4:	4806      	ldr	r0, [pc, #24]	; (80008d0 <lwiperf_tcp_accept+0x13c>)
 80008b6:	f010 fea9 	bl	801160c <iprintf>
 80008ba:	e7c5      	b.n	8000848 <lwiperf_tcp_accept+0xb4>
    return ERR_MEM;
 80008bc:	f04f 30ff 	mov.w	r0, #4294967295
}
 80008c0:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_VAL;
 80008c2:	f06f 0005 	mvn.w	r0, #5
}
 80008c6:	4770      	bx	lr
 80008c8:	080128b4 	.word	0x080128b4
 80008cc:	08012930 	.word	0x08012930
 80008d0:	080128dc 	.word	0x080128dc
 80008d4:	0801296c 	.word	0x0801296c
 80008d8:	08000cf9 	.word	0x08000cf9
 80008dc:	08000a3d 	.word	0x08000a3d
 80008e0:	080008f5 	.word	0x080008f5
 80008e4:	240000d8 	.word	0x240000d8
 80008e8:	0801290c 	.word	0x0801290c
 80008ec:	0801291c 	.word	0x0801291c
 80008f0:	08012944 	.word	0x08012944

080008f4 <lwiperf_tcp_err>:
  lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_REMOTE);
 80008f4:	2105      	movs	r1, #5
 80008f6:	f7ff becb 	b.w	8000690 <lwiperf_tcp_close>
 80008fa:	bf00      	nop

080008fc <lwiperf_tcp_client_send_more>:
{
 80008fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("conn invalid", (conn != NULL) && conn->base.tcp && (conn->base.server == 0));
 8000900:	4605      	mov	r5, r0
 8000902:	b110      	cbz	r0, 800090a <lwiperf_tcp_client_send_more+0xe>
 8000904:	7903      	ldrb	r3, [r0, #4]
 8000906:	2b00      	cmp	r3, #0
 8000908:	d16f      	bne.n	80009ea <lwiperf_tcp_client_send_more+0xee>
 800090a:	4b3a      	ldr	r3, [pc, #232]	; (80009f4 <lwiperf_tcp_client_send_more+0xf8>)
 800090c:	f240 121d 	movw	r2, #285	; 0x11d
 8000910:	4939      	ldr	r1, [pc, #228]	; (80009f8 <lwiperf_tcp_client_send_more+0xfc>)
 8000912:	483a      	ldr	r0, [pc, #232]	; (80009fc <lwiperf_tcp_client_send_more+0x100>)
 8000914:	f010 fe7a 	bl	801160c <iprintf>
      u32_t time_ms = time * 10;
 8000918:	f06f 0909 	mvn.w	r9, #9
      txptr = LWIP_CONST_CAST(void *, &lwiperf_txbuf_const[conn->bytes_transferred % 10]);
 800091c:	f8df b0e4 	ldr.w	fp, [pc, #228]	; 8000a04 <lwiperf_tcp_client_send_more+0x108>
 8000920:	e006      	b.n	8000930 <lwiperf_tcp_client_send_more+0x34>
    if (err == ERR_OK) {
 8000922:	bb78      	cbnz	r0, 8000984 <lwiperf_tcp_client_send_more+0x88>
      conn->bytes_transferred += txlen;
 8000924:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000926:	4423      	add	r3, r4
 8000928:	626b      	str	r3, [r5, #36]	; 0x24
  } while (send_more);
 800092a:	f1b8 0f00 	cmp.w	r8, #0
 800092e:	d029      	beq.n	8000984 <lwiperf_tcp_client_send_more+0x88>
    if (conn->settings.amount & PP_HTONL(0x80000000)) {
 8000930:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 8000932:	0602      	lsls	r2, r0, #24
 8000934:	d52c      	bpl.n	8000990 <lwiperf_tcp_client_send_more+0x94>
      u32_t now = sys_now();
 8000936:	f006 f81d 	bl	8006974 <sys_now>
      u32_t diff_ms = now - conn->time_started;
 800093a:	696b      	ldr	r3, [r5, #20]
      u32_t now = sys_now();
 800093c:	4604      	mov	r4, r0
      u32_t time = (u32_t) - (s32_t)lwip_htonl(conn->settings.amount);
 800093e:	6be8      	ldr	r0, [r5, #60]	; 0x3c
      u32_t diff_ms = now - conn->time_started;
 8000940:	1ae4      	subs	r4, r4, r3
      u32_t time = (u32_t) - (s32_t)lwip_htonl(conn->settings.amount);
 8000942:	f008 fed1 	bl	80096e8 <lwip_htonl>
      u32_t time_ms = time * 10;
 8000946:	fb09 f000 	mul.w	r0, r9, r0
      if (diff_ms >= time_ms) {
 800094a:	4284      	cmp	r4, r0
 800094c:	d225      	bcs.n	800099a <lwiperf_tcp_client_send_more+0x9e>
    if (conn->bytes_transferred < 24) {
 800094e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000950:	2b17      	cmp	r3, #23
 8000952:	d93f      	bls.n	80009d4 <lwiperf_tcp_client_send_more+0xd8>
    } else if (conn->bytes_transferred < 48) {
 8000954:	2b2f      	cmp	r3, #47	; 0x2f
 8000956:	d827      	bhi.n	80009a8 <lwiperf_tcp_client_send_more+0xac>
      txptr = &((u8_t *)&conn->settings)[conn->bytes_transferred - 24];
 8000958:	18ee      	adds	r6, r5, r3
      txlen_max = (u16_t)(48 - conn->bytes_transferred);
 800095a:	f1c3 0330 	rsb	r3, r3, #48	; 0x30
      apiflags = TCP_WRITE_FLAG_COPY | TCP_WRITE_FLAG_MORE;
 800095e:	f04f 0a03 	mov.w	sl, #3
      send_more = 1;
 8000962:	f04f 0801 	mov.w	r8, #1
      txptr = &((u8_t *)&conn->settings)[conn->bytes_transferred - 24];
 8000966:	3610      	adds	r6, #16
      txlen_max = (u16_t)(48 - conn->bytes_transferred);
 8000968:	b29c      	uxth	r4, r3
    } while ((err == ERR_MEM) && (txlen >= (TCP_MSS / 2)));
 800096a:	f240 27da 	movw	r7, #730	; 0x2da
      err = tcp_write(conn->conn_pcb, txptr, txlen, apiflags);
 800096e:	4653      	mov	r3, sl
 8000970:	4622      	mov	r2, r4
 8000972:	4631      	mov	r1, r6
 8000974:	6928      	ldr	r0, [r5, #16]
 8000976:	f00d f99b 	bl	800dcb0 <tcp_write>
      if (err ==  ERR_MEM) {
 800097a:	1c43      	adds	r3, r0, #1
 800097c:	d1d1      	bne.n	8000922 <lwiperf_tcp_client_send_more+0x26>
        txlen /= 2;
 800097e:	0864      	lsrs	r4, r4, #1
    } while ((err == ERR_MEM) && (txlen >= (TCP_MSS / 2)));
 8000980:	42bc      	cmp	r4, r7
 8000982:	d0f4      	beq.n	800096e <lwiperf_tcp_client_send_more+0x72>
  tcp_output(conn->conn_pcb);
 8000984:	6928      	ldr	r0, [r5, #16]
 8000986:	f00d ffb1 	bl	800e8ec <tcp_output>
}
 800098a:	2000      	movs	r0, #0
 800098c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      u32_t amount_bytes = lwip_htonl(conn->settings.amount);
 8000990:	f008 feaa 	bl	80096e8 <lwip_htonl>
      if (amount_bytes >= conn->bytes_transferred) {
 8000994:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000996:	4283      	cmp	r3, r0
 8000998:	d8da      	bhi.n	8000950 <lwiperf_tcp_client_send_more+0x54>
        lwiperf_tcp_close(conn, LWIPERF_TCP_DONE_CLIENT);
 800099a:	4628      	mov	r0, r5
 800099c:	2101      	movs	r1, #1
 800099e:	f7ff fe77 	bl	8000690 <lwiperf_tcp_close>
}
 80009a2:	2000      	movs	r0, #0
 80009a4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      txptr = LWIP_CONST_CAST(void *, &lwiperf_txbuf_const[conn->bytes_transferred % 10]);
 80009a8:	4a15      	ldr	r2, [pc, #84]	; (8000a00 <lwiperf_tcp_client_send_more+0x104>)
      apiflags = 0; /* no copying needed */
 80009aa:	f240 54b4 	movw	r4, #1460	; 0x5b4
 80009ae:	f04f 0a00 	mov.w	sl, #0
 80009b2:	f04f 0801 	mov.w	r8, #1
      txptr = LWIP_CONST_CAST(void *, &lwiperf_txbuf_const[conn->bytes_transferred % 10]);
 80009b6:	fba2 1203 	umull	r1, r2, r2, r3
      apiflags = 0; /* no copying needed */
 80009ba:	f240 519c 	movw	r1, #1436	; 0x59c
      txptr = LWIP_CONST_CAST(void *, &lwiperf_txbuf_const[conn->bytes_transferred % 10]);
 80009be:	08d2      	lsrs	r2, r2, #3
      apiflags = 0; /* no copying needed */
 80009c0:	2b30      	cmp	r3, #48	; 0x30
 80009c2:	bf08      	it	eq
 80009c4:	460c      	moveq	r4, r1
      txptr = LWIP_CONST_CAST(void *, &lwiperf_txbuf_const[conn->bytes_transferred % 10]);
 80009c6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80009ca:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 80009ce:	eb0b 0603 	add.w	r6, fp, r3
      if (conn->bytes_transferred == 48) { /* @todo: fix this for intermediate settings, too */
 80009d2:	e7ca      	b.n	800096a <lwiperf_tcp_client_send_more+0x6e>
      txptr = &((u8_t *)&conn->settings)[conn->bytes_transferred];
 80009d4:	f105 0628 	add.w	r6, r5, #40	; 0x28
      txlen_max = (u16_t)(24 - conn->bytes_transferred);
 80009d8:	f1c3 0418 	rsb	r4, r3, #24
      apiflags = TCP_WRITE_FLAG_COPY;
 80009dc:	f04f 0a01 	mov.w	sl, #1
    send_more = 0;
 80009e0:	f04f 0800 	mov.w	r8, #0
      txptr = &((u8_t *)&conn->settings)[conn->bytes_transferred];
 80009e4:	441e      	add	r6, r3
      txlen_max = (u16_t)(24 - conn->bytes_transferred);
 80009e6:	b2a4      	uxth	r4, r4
      apiflags = TCP_WRITE_FLAG_COPY;
 80009e8:	e7bf      	b.n	800096a <lwiperf_tcp_client_send_more+0x6e>
  LWIP_ASSERT("conn invalid", (conn != NULL) && conn->base.tcp && (conn->base.server == 0));
 80009ea:	7943      	ldrb	r3, [r0, #5]
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d093      	beq.n	8000918 <lwiperf_tcp_client_send_more+0x1c>
 80009f0:	e78b      	b.n	800090a <lwiperf_tcp_client_send_more+0xe>
 80009f2:	bf00      	nop
 80009f4:	080128b4 	.word	0x080128b4
 80009f8:	08012994 	.word	0x08012994
 80009fc:	080128dc 	.word	0x080128dc
 8000a00:	cccccccd 	.word	0xcccccccd
 8000a04:	08012a28 	.word	0x08012a28

08000a08 <lwiperf_tcp_client_sent>:
  LWIP_ASSERT("invalid conn", conn->conn_pcb == tpcb);
 8000a08:	6903      	ldr	r3, [r0, #16]
 8000a0a:	428b      	cmp	r3, r1
{
 8000a0c:	b510      	push	{r4, lr}
 8000a0e:	4604      	mov	r4, r0
  LWIP_ASSERT("invalid conn", conn->conn_pcb == tpcb);
 8000a10:	d006      	beq.n	8000a20 <lwiperf_tcp_client_sent+0x18>
 8000a12:	4b07      	ldr	r3, [pc, #28]	; (8000a30 <lwiperf_tcp_client_sent+0x28>)
 8000a14:	f44f 72b3 	mov.w	r2, #358	; 0x166
 8000a18:	4906      	ldr	r1, [pc, #24]	; (8000a34 <lwiperf_tcp_client_sent+0x2c>)
 8000a1a:	4807      	ldr	r0, [pc, #28]	; (8000a38 <lwiperf_tcp_client_sent+0x30>)
 8000a1c:	f010 fdf6 	bl	801160c <iprintf>
  conn->poll_count = 0;
 8000a20:	2300      	movs	r3, #0
  return lwiperf_tcp_client_send_more(conn);
 8000a22:	4620      	mov	r0, r4
  conn->poll_count = 0;
 8000a24:	f884 3020 	strb.w	r3, [r4, #32]
}
 8000a28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return lwiperf_tcp_client_send_more(conn);
 8000a2c:	f7ff bf66 	b.w	80008fc <lwiperf_tcp_client_send_more>
 8000a30:	080128b4 	.word	0x080128b4
 8000a34:	080129a4 	.word	0x080129a4
 8000a38:	080128dc 	.word	0x080128dc

08000a3c <lwiperf_tcp_poll>:
  LWIP_ASSERT("pcb mismatch", conn->conn_pcb == tpcb);
 8000a3c:	6903      	ldr	r3, [r0, #16]
 8000a3e:	428b      	cmp	r3, r1
{
 8000a40:	b510      	push	{r4, lr}
 8000a42:	4604      	mov	r4, r0
  LWIP_ASSERT("pcb mismatch", conn->conn_pcb == tpcb);
 8000a44:	d006      	beq.n	8000a54 <lwiperf_tcp_poll+0x18>
 8000a46:	4b0f      	ldr	r3, [pc, #60]	; (8000a84 <lwiperf_tcp_poll+0x48>)
 8000a48:	f44f 7210 	mov.w	r2, #576	; 0x240
 8000a4c:	490e      	ldr	r1, [pc, #56]	; (8000a88 <lwiperf_tcp_poll+0x4c>)
 8000a4e:	480f      	ldr	r0, [pc, #60]	; (8000a8c <lwiperf_tcp_poll+0x50>)
 8000a50:	f010 fddc 	bl	801160c <iprintf>
  if (++conn->poll_count >= LWIPERF_TCP_MAX_IDLE_SEC) {
 8000a54:	f894 3020 	ldrb.w	r3, [r4, #32]
 8000a58:	3301      	adds	r3, #1
 8000a5a:	b2db      	uxtb	r3, r3
 8000a5c:	2b09      	cmp	r3, #9
 8000a5e:	f884 3020 	strb.w	r3, [r4, #32]
 8000a62:	d808      	bhi.n	8000a76 <lwiperf_tcp_poll+0x3a>
  if (!conn->base.server) {
 8000a64:	7963      	ldrb	r3, [r4, #5]
 8000a66:	b10b      	cbz	r3, 8000a6c <lwiperf_tcp_poll+0x30>
}
 8000a68:	2000      	movs	r0, #0
 8000a6a:	bd10      	pop	{r4, pc}
    lwiperf_tcp_client_send_more(conn);
 8000a6c:	4620      	mov	r0, r4
 8000a6e:	f7ff ff45 	bl	80008fc <lwiperf_tcp_client_send_more>
}
 8000a72:	2000      	movs	r0, #0
 8000a74:	bd10      	pop	{r4, pc}
    lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_LOCAL);
 8000a76:	4620      	mov	r0, r4
 8000a78:	2102      	movs	r1, #2
 8000a7a:	f7ff fe09 	bl	8000690 <lwiperf_tcp_close>
}
 8000a7e:	2000      	movs	r0, #0
 8000a80:	bd10      	pop	{r4, pc}
 8000a82:	bf00      	nop
 8000a84:	080128b4 	.word	0x080128b4
 8000a88:	080129b4 	.word	0x080129b4
 8000a8c:	080128dc 	.word	0x080128dc

08000a90 <lwiperf_tcp_client_connected>:
{
 8000a90:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("invalid conn", conn->conn_pcb == tpcb);
 8000a92:	6903      	ldr	r3, [r0, #16]
{
 8000a94:	4604      	mov	r4, r0
 8000a96:	4615      	mov	r5, r2
  LWIP_ASSERT("invalid conn", conn->conn_pcb == tpcb);
 8000a98:	428b      	cmp	r3, r1
 8000a9a:	d006      	beq.n	8000aaa <lwiperf_tcp_client_connected+0x1a>
 8000a9c:	4b0c      	ldr	r3, [pc, #48]	; (8000ad0 <lwiperf_tcp_client_connected+0x40>)
 8000a9e:	f44f 72ba 	mov.w	r2, #372	; 0x174
 8000aa2:	490c      	ldr	r1, [pc, #48]	; (8000ad4 <lwiperf_tcp_client_connected+0x44>)
 8000aa4:	480c      	ldr	r0, [pc, #48]	; (8000ad8 <lwiperf_tcp_client_connected+0x48>)
 8000aa6:	f010 fdb1 	bl	801160c <iprintf>
  if (err != ERR_OK) {
 8000aaa:	b955      	cbnz	r5, 8000ac2 <lwiperf_tcp_client_connected+0x32>
  conn->poll_count = 0;
 8000aac:	f884 5020 	strb.w	r5, [r4, #32]
  conn->time_started = sys_now();
 8000ab0:	f005 ff60 	bl	8006974 <sys_now>
 8000ab4:	4603      	mov	r3, r0
  return lwiperf_tcp_client_send_more(conn);
 8000ab6:	4620      	mov	r0, r4
  conn->time_started = sys_now();
 8000ab8:	6163      	str	r3, [r4, #20]
}
 8000aba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return lwiperf_tcp_client_send_more(conn);
 8000abe:	f7ff bf1d 	b.w	80008fc <lwiperf_tcp_client_send_more>
    lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_REMOTE);
 8000ac2:	4620      	mov	r0, r4
 8000ac4:	2105      	movs	r1, #5
 8000ac6:	f7ff fde3 	bl	8000690 <lwiperf_tcp_close>
}
 8000aca:	2000      	movs	r0, #0
 8000acc:	bd38      	pop	{r3, r4, r5, pc}
 8000ace:	bf00      	nop
 8000ad0:	080128b4 	.word	0x080128b4
 8000ad4:	080129a4 	.word	0x080129a4
 8000ad8:	080128dc 	.word	0x080128dc

08000adc <lwiperf_start_tcp_server_impl.constprop.0>:
    return state;
  }
  return NULL;
}

static err_t lwiperf_start_tcp_server_impl(const ip_addr_t *local_addr, u16_t local_port,
 8000adc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ae0:	4605      	mov	r5, r0
 8000ae2:	460f      	mov	r7, r1
 8000ae4:	4690      	mov	r8, r2
 8000ae6:	461e      	mov	r6, r3
{
  err_t err;
  struct tcp_pcb *pcb;
  lwiperf_state_tcp_t *s;

  LWIP_ASSERT_CORE_LOCKED();
 8000ae8:	f006 f8c8 	bl	8006c7c <sys_check_core_locking>

  LWIP_ASSERT("state != NULL", state != NULL);

  if (local_addr == NULL) {
 8000aec:	2d00      	cmp	r5, #0
 8000aee:	d037      	beq.n	8000b60 <lwiperf_start_tcp_server_impl.constprop.0+0x84>
    return ERR_ARG;
  }

  s = (lwiperf_state_tcp_t *)LWIPERF_ALLOC(lwiperf_state_tcp_t);
 8000af0:	2048      	movs	r0, #72	; 0x48
 8000af2:	f009 f857 	bl	8009ba4 <mem_malloc>
  if (s == NULL) {
 8000af6:	4604      	mov	r4, r0
 8000af8:	b378      	cbz	r0, 8000b5a <lwiperf_start_tcp_server_impl.constprop.0+0x7e>
    return ERR_MEM;
  }
  memset(s, 0, sizeof(lwiperf_state_tcp_t));
 8000afa:	2248      	movs	r2, #72	; 0x48
 8000afc:	2100      	movs	r1, #0
 8000afe:	f010 ff31 	bl	8011964 <memset>
  s->base.tcp = 1;
  s->base.server = 1;
  s->base.related_master_state = related_master_state;
 8000b02:	9b06      	ldr	r3, [sp, #24]
  s->report_fn = report_fn;
  s->report_arg = report_arg;
 8000b04:	61e6      	str	r6, [r4, #28]

  pcb = tcp_new_ip_type(LWIPERF_SERVER_IP_TYPE);
 8000b06:	202e      	movs	r0, #46	; 0x2e
  s->base.related_master_state = related_master_state;
 8000b08:	60a3      	str	r3, [r4, #8]
  s->base.tcp = 1;
 8000b0a:	f240 1301 	movw	r3, #257	; 0x101
  s->report_fn = report_fn;
 8000b0e:	f8c4 8018 	str.w	r8, [r4, #24]
  s->base.tcp = 1;
 8000b12:	80a3      	strh	r3, [r4, #4]
  pcb = tcp_new_ip_type(LWIPERF_SERVER_IP_TYPE);
 8000b14:	f00b f90e 	bl	800bd34 <tcp_new_ip_type>
  if (pcb == NULL) {
 8000b18:	4606      	mov	r6, r0
 8000b1a:	b1f0      	cbz	r0, 8000b5a <lwiperf_start_tcp_server_impl.constprop.0+0x7e>
    return ERR_MEM;
  }
  err = tcp_bind(pcb, local_addr, local_port);
 8000b1c:	4629      	mov	r1, r5
 8000b1e:	463a      	mov	r2, r7
 8000b20:	f00a f8ba 	bl	800ac98 <tcp_bind>
  if (err != ERR_OK) {
 8000b24:	4605      	mov	r5, r0
 8000b26:	b110      	cbz	r0, 8000b2e <lwiperf_start_tcp_server_impl.constprop.0+0x52>
  tcp_accept(s->server_pcb, lwiperf_tcp_accept);

  lwiperf_list_add(&s->base);
  *state = s;
  return ERR_OK;
}
 8000b28:	4628      	mov	r0, r5
 8000b2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  s->server_pcb = tcp_listen_with_backlog(pcb, 1);
 8000b2e:	2101      	movs	r1, #1
 8000b30:	4630      	mov	r0, r6
 8000b32:	f00a f99b 	bl	800ae6c <tcp_listen_with_backlog>
 8000b36:	60e0      	str	r0, [r4, #12]
  if (s->server_pcb == NULL) {
 8000b38:	b1a8      	cbz	r0, 8000b66 <lwiperf_start_tcp_server_impl.constprop.0+0x8a>
  tcp_arg(s->server_pcb, s);
 8000b3a:	4621      	mov	r1, r4
 8000b3c:	f00a fb1a 	bl	800b174 <tcp_arg>
  tcp_accept(s->server_pcb, lwiperf_tcp_accept);
 8000b40:	68e0      	ldr	r0, [r4, #12]
 8000b42:	490d      	ldr	r1, [pc, #52]	; (8000b78 <lwiperf_start_tcp_server_impl.constprop.0+0x9c>)
 8000b44:	f00a fb6c 	bl	800b220 <tcp_accept>
  item->next = lwiperf_all_connections;
 8000b48:	4b0c      	ldr	r3, [pc, #48]	; (8000b7c <lwiperf_start_tcp_server_impl.constprop.0+0xa0>)
}
 8000b4a:	4628      	mov	r0, r5
  item->next = lwiperf_all_connections;
 8000b4c:	681a      	ldr	r2, [r3, #0]
  lwiperf_all_connections = item;
 8000b4e:	601c      	str	r4, [r3, #0]
  *state = s;
 8000b50:	9b07      	ldr	r3, [sp, #28]
  item->next = lwiperf_all_connections;
 8000b52:	6022      	str	r2, [r4, #0]
  *state = s;
 8000b54:	601c      	str	r4, [r3, #0]
}
 8000b56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return ERR_MEM;
 8000b5a:	f04f 35ff 	mov.w	r5, #4294967295
 8000b5e:	e7e3      	b.n	8000b28 <lwiperf_start_tcp_server_impl.constprop.0+0x4c>
    return ERR_ARG;
 8000b60:	f06f 050f 	mvn.w	r5, #15
 8000b64:	e7e0      	b.n	8000b28 <lwiperf_start_tcp_server_impl.constprop.0+0x4c>
      tcp_close(pcb);
 8000b66:	4630      	mov	r0, r6
    return ERR_MEM;
 8000b68:	f04f 35ff 	mov.w	r5, #4294967295
      tcp_close(pcb);
 8000b6c:	f00b f9b6 	bl	800bedc <tcp_close>
    LWIPERF_FREE(lwiperf_state_tcp_t, s);
 8000b70:	4620      	mov	r0, r4
 8000b72:	f008 fe73 	bl	800985c <mem_free>
    return ERR_MEM;
 8000b76:	e7d7      	b.n	8000b28 <lwiperf_start_tcp_server_impl.constprop.0+0x4c>
 8000b78:	08000795 	.word	0x08000795
 8000b7c:	240000d8 	.word	0x240000d8

08000b80 <lwiperf_tx_start_impl.constprop.0>:
lwiperf_tx_start_impl(const ip_addr_t *remote_ip, u16_t remote_port, lwiperf_settings_t *settings, lwiperf_report_fn report_fn,
 8000b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000b84:	4688      	mov	r8, r1
 8000b86:	b083      	sub	sp, #12
 8000b88:	4616      	mov	r6, r2
 8000b8a:	4699      	mov	r9, r3
  LWIP_ASSERT("remote_ip != NULL", remote_ip != NULL);
 8000b8c:	4607      	mov	r7, r0
 8000b8e:	2800      	cmp	r0, #0
 8000b90:	d063      	beq.n	8000c5a <lwiperf_tx_start_impl.constprop.0+0xda>
  *new_conn = NULL;
 8000b92:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8000b94:	f04f 0b00 	mov.w	fp, #0
  client_conn = (lwiperf_state_tcp_t *)LWIPERF_ALLOC(lwiperf_state_tcp_t);
 8000b98:	2048      	movs	r0, #72	; 0x48
  *new_conn = NULL;
 8000b9a:	f8c3 b000 	str.w	fp, [r3]
  client_conn = (lwiperf_state_tcp_t *)LWIPERF_ALLOC(lwiperf_state_tcp_t);
 8000b9e:	f009 f801 	bl	8009ba4 <mem_malloc>
  if (client_conn == NULL) {
 8000ba2:	4604      	mov	r4, r0
 8000ba4:	2800      	cmp	r0, #0
 8000ba6:	d060      	beq.n	8000c6a <lwiperf_tx_start_impl.constprop.0+0xea>
  newpcb = tcp_new_ip_type(IP_GET_TYPE(remote_ip));
 8000ba8:	4658      	mov	r0, fp
 8000baa:	f00b f8c3 	bl	800bd34 <tcp_new_ip_type>
  if (newpcb == NULL) {
 8000bae:	4605      	mov	r5, r0
 8000bb0:	2800      	cmp	r0, #0
 8000bb2:	d05d      	beq.n	8000c70 <lwiperf_tx_start_impl.constprop.0+0xf0>
  memset(client_conn, 0, sizeof(lwiperf_state_tcp_t));
 8000bb4:	2248      	movs	r2, #72	; 0x48
 8000bb6:	4659      	mov	r1, fp
 8000bb8:	4620      	mov	r0, r4
  client_conn->base.tcp = 1;
 8000bba:	f04f 0a01 	mov.w	sl, #1
  memset(client_conn, 0, sizeof(lwiperf_state_tcp_t));
 8000bbe:	f010 fed1 	bl	8011964 <memset>
  client_conn->base.related_master_state = related_master_state;
 8000bc2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  client_conn->conn_pcb = newpcb;
 8000bc4:	6125      	str	r5, [r4, #16]
  client_conn->base.related_master_state = related_master_state;
 8000bc6:	60a3      	str	r3, [r4, #8]
  client_conn->base.tcp = 1;
 8000bc8:	f884 a004 	strb.w	sl, [r4, #4]
  client_conn->time_started = sys_now(); /* @todo: set this again on 'connected' */
 8000bcc:	f005 fed2 	bl	8006974 <sys_now>
  client_conn->report_arg = report_arg;
 8000bd0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  client_conn->report_fn = report_fn;
 8000bd2:	f8c4 9018 	str.w	r9, [r4, #24]
  client_conn->report_arg = report_arg;
 8000bd6:	61e3      	str	r3, [r4, #28]
  client_conn->next_num = 4; /* initial nr is '4' since the header has 24 byte */
 8000bd8:	2304      	movs	r3, #4
  client_conn->bytes_transferred = 0;
 8000bda:	f8c4 b024 	str.w	fp, [r4, #36]	; 0x24
  client_conn->time_started = sys_now(); /* @todo: set this again on 'connected' */
 8000bde:	6160      	str	r0, [r4, #20]
  client_conn->next_num = 4; /* initial nr is '4' since the header has 24 byte */
 8000be0:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  memcpy(&client_conn->settings, settings, sizeof(*settings));
 8000be4:	6832      	ldr	r2, [r6, #0]
 8000be6:	6873      	ldr	r3, [r6, #4]
 8000be8:	68b0      	ldr	r0, [r6, #8]
 8000bea:	68f1      	ldr	r1, [r6, #12]
 8000bec:	6320      	str	r0, [r4, #48]	; 0x30
  tcp_arg(newpcb, client_conn);
 8000bee:	4628      	mov	r0, r5
  memcpy(&client_conn->settings, settings, sizeof(*settings));
 8000bf0:	6361      	str	r1, [r4, #52]	; 0x34
  tcp_arg(newpcb, client_conn);
 8000bf2:	4621      	mov	r1, r4
  memcpy(&client_conn->settings, settings, sizeof(*settings));
 8000bf4:	62a2      	str	r2, [r4, #40]	; 0x28
 8000bf6:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000bf8:	6973      	ldr	r3, [r6, #20]
 8000bfa:	6932      	ldr	r2, [r6, #16]
 8000bfc:	63e3      	str	r3, [r4, #60]	; 0x3c
 8000bfe:	63a2      	str	r2, [r4, #56]	; 0x38
  client_conn->have_settings_buf = 1;
 8000c00:	f884 a040 	strb.w	sl, [r4, #64]	; 0x40
  tcp_arg(newpcb, client_conn);
 8000c04:	f00a fab6 	bl	800b174 <tcp_arg>
  tcp_sent(newpcb, lwiperf_tcp_client_sent);
 8000c08:	4628      	mov	r0, r5
 8000c0a:	491c      	ldr	r1, [pc, #112]	; (8000c7c <lwiperf_tx_start_impl.constprop.0+0xfc>)
 8000c0c:	f00a fad4 	bl	800b1b8 <tcp_sent>
  tcp_poll(newpcb, lwiperf_tcp_poll, 2U);
 8000c10:	2202      	movs	r2, #2
 8000c12:	4628      	mov	r0, r5
 8000c14:	491a      	ldr	r1, [pc, #104]	; (8000c80 <lwiperf_tx_start_impl.constprop.0+0x100>)
 8000c16:	f00a fb0f 	bl	800b238 <tcp_poll>
  tcp_err(newpcb, lwiperf_tcp_err);
 8000c1a:	4628      	mov	r0, r5
 8000c1c:	4919      	ldr	r1, [pc, #100]	; (8000c84 <lwiperf_tx_start_impl.constprop.0+0x104>)
 8000c1e:	f00a fae5 	bl	800b1ec <tcp_err>
  ip_addr_copy(remote_addr, *remote_ip);
 8000c22:	683b      	ldr	r3, [r7, #0]
  err = tcp_connect(newpcb, &remote_addr, remote_port, lwiperf_tcp_client_connected);
 8000c24:	4628      	mov	r0, r5
 8000c26:	4642      	mov	r2, r8
  ip_addr_copy(remote_addr, *remote_ip);
 8000c28:	9301      	str	r3, [sp, #4]
  err = tcp_connect(newpcb, &remote_addr, remote_port, lwiperf_tcp_client_connected);
 8000c2a:	a901      	add	r1, sp, #4
 8000c2c:	4b16      	ldr	r3, [pc, #88]	; (8000c88 <lwiperf_tx_start_impl.constprop.0+0x108>)
 8000c2e:	f00a f9a9 	bl	800af84 <tcp_connect>
  if (err != ERR_OK) {
 8000c32:	4605      	mov	r5, r0
 8000c34:	b948      	cbnz	r0, 8000c4a <lwiperf_tx_start_impl.constprop.0+0xca>
  item->next = lwiperf_all_connections;
 8000c36:	4b15      	ldr	r3, [pc, #84]	; (8000c8c <lwiperf_tx_start_impl.constprop.0+0x10c>)
 8000c38:	681a      	ldr	r2, [r3, #0]
  lwiperf_all_connections = item;
 8000c3a:	601c      	str	r4, [r3, #0]
  *new_conn = client_conn;
 8000c3c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  item->next = lwiperf_all_connections;
 8000c3e:	6022      	str	r2, [r4, #0]
  *new_conn = client_conn;
 8000c40:	601c      	str	r4, [r3, #0]
}
 8000c42:	4628      	mov	r0, r5
 8000c44:	b003      	add	sp, #12
 8000c46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lwiperf_tcp_close(client_conn, LWIPERF_TCP_ABORTED_LOCAL);
 8000c4a:	4620      	mov	r0, r4
 8000c4c:	2102      	movs	r1, #2
 8000c4e:	f7ff fd1f 	bl	8000690 <lwiperf_tcp_close>
}
 8000c52:	4628      	mov	r0, r5
 8000c54:	b003      	add	sp, #12
 8000c56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("remote_ip != NULL", remote_ip != NULL);
 8000c5a:	4b0d      	ldr	r3, [pc, #52]	; (8000c90 <lwiperf_tx_start_impl.constprop.0+0x110>)
 8000c5c:	f240 128b 	movw	r2, #395	; 0x18b
 8000c60:	490c      	ldr	r1, [pc, #48]	; (8000c94 <lwiperf_tx_start_impl.constprop.0+0x114>)
 8000c62:	480d      	ldr	r0, [pc, #52]	; (8000c98 <lwiperf_tx_start_impl.constprop.0+0x118>)
 8000c64:	f010 fcd2 	bl	801160c <iprintf>
 8000c68:	e793      	b.n	8000b92 <lwiperf_tx_start_impl.constprop.0+0x12>
    return ERR_MEM;
 8000c6a:	f04f 35ff 	mov.w	r5, #4294967295
 8000c6e:	e7e8      	b.n	8000c42 <lwiperf_tx_start_impl.constprop.0+0xc2>
    LWIPERF_FREE(lwiperf_state_tcp_t, client_conn);
 8000c70:	4620      	mov	r0, r4
    return ERR_MEM;
 8000c72:	f04f 35ff 	mov.w	r5, #4294967295
    LWIPERF_FREE(lwiperf_state_tcp_t, client_conn);
 8000c76:	f008 fdf1 	bl	800985c <mem_free>
    return ERR_MEM;
 8000c7a:	e7e2      	b.n	8000c42 <lwiperf_tx_start_impl.constprop.0+0xc2>
 8000c7c:	08000a09 	.word	0x08000a09
 8000c80:	08000a3d 	.word	0x08000a3d
 8000c84:	080008f5 	.word	0x080008f5
 8000c88:	08000a91 	.word	0x08000a91
 8000c8c:	240000d8 	.word	0x240000d8
 8000c90:	080128b4 	.word	0x080128b4
 8000c94:	080129c4 	.word	0x080129c4
 8000c98:	080128dc 	.word	0x080128dc

08000c9c <lwiperf_tx_start_passive>:
{
 8000c9c:	b530      	push	{r4, r5, lr}
  lwiperf_state_tcp_t *new_conn = NULL;
 8000c9e:	2300      	movs	r3, #0
{
 8000ca0:	4604      	mov	r4, r0
 8000ca2:	b087      	sub	sp, #28
  u16_t remote_port = (u16_t)lwip_htonl(conn->settings.remote_port);
 8000ca4:	6b00      	ldr	r0, [r0, #48]	; 0x30
  lwiperf_state_tcp_t *new_conn = NULL;
 8000ca6:	9305      	str	r3, [sp, #20]
  u16_t remote_port = (u16_t)lwip_htonl(conn->settings.remote_port);
 8000ca8:	f008 fd1e 	bl	80096e8 <lwip_htonl>
  ret = lwiperf_tx_start_impl(&conn->conn_pcb->remote_ip, remote_port, &conn->settings, conn->report_fn, conn->report_arg,
 8000cac:	6922      	ldr	r2, [r4, #16]
 8000cae:	a905      	add	r1, sp, #20
 8000cb0:	69e3      	ldr	r3, [r4, #28]
 8000cb2:	68a5      	ldr	r5, [r4, #8]
 8000cb4:	9300      	str	r3, [sp, #0]
 8000cb6:	e9cd 5101 	strd	r5, r1, [sp, #4]
 8000cba:	b281      	uxth	r1, r0
 8000cbc:	69a3      	ldr	r3, [r4, #24]
 8000cbe:	1d10      	adds	r0, r2, #4
 8000cc0:	f104 0228 	add.w	r2, r4, #40	; 0x28
 8000cc4:	f7ff ff5c 	bl	8000b80 <lwiperf_tx_start_impl.constprop.0>
  if (ret == ERR_OK) {
 8000cc8:	4604      	mov	r4, r0
 8000cca:	b918      	cbnz	r0, 8000cd4 <lwiperf_tx_start_passive+0x38>
    LWIP_ASSERT("new_conn != NULL", new_conn != NULL);
 8000ccc:	9d05      	ldr	r5, [sp, #20]
 8000cce:	b125      	cbz	r5, 8000cda <lwiperf_tx_start_passive+0x3e>
    new_conn->settings.flags = 0; /* prevent the remote side starting back as client again */
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	62ab      	str	r3, [r5, #40]	; 0x28
}
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	b007      	add	sp, #28
 8000cd8:	bd30      	pop	{r4, r5, pc}
    LWIP_ASSERT("new_conn != NULL", new_conn != NULL);
 8000cda:	4b04      	ldr	r3, [pc, #16]	; (8000cec <lwiperf_tx_start_passive+0x50>)
 8000cdc:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 8000ce0:	4903      	ldr	r1, [pc, #12]	; (8000cf0 <lwiperf_tx_start_passive+0x54>)
 8000ce2:	4804      	ldr	r0, [pc, #16]	; (8000cf4 <lwiperf_tx_start_passive+0x58>)
 8000ce4:	f010 fc92 	bl	801160c <iprintf>
 8000ce8:	e7f2      	b.n	8000cd0 <lwiperf_tx_start_passive+0x34>
 8000cea:	bf00      	nop
 8000cec:	080128b4 	.word	0x080128b4
 8000cf0:	080129d8 	.word	0x080129d8
 8000cf4:	080128dc 	.word	0x080128dc

08000cf8 <lwiperf_tcp_recv>:
{
 8000cf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000cfc:	4698      	mov	r8, r3
  LWIP_ASSERT("pcb mismatch", conn->conn_pcb == tpcb);
 8000cfe:	6903      	ldr	r3, [r0, #16]
{
 8000d00:	4604      	mov	r4, r0
 8000d02:	460e      	mov	r6, r1
  LWIP_ASSERT("pcb mismatch", conn->conn_pcb == tpcb);
 8000d04:	428b      	cmp	r3, r1
{
 8000d06:	4615      	mov	r5, r2
  LWIP_ASSERT("pcb mismatch", conn->conn_pcb == tpcb);
 8000d08:	d006      	beq.n	8000d18 <lwiperf_tcp_recv+0x20>
 8000d0a:	4b6a      	ldr	r3, [pc, #424]	; (8000eb4 <lwiperf_tcp_recv+0x1bc>)
 8000d0c:	f44f 72e8 	mov.w	r2, #464	; 0x1d0
 8000d10:	4969      	ldr	r1, [pc, #420]	; (8000eb8 <lwiperf_tcp_recv+0x1c0>)
 8000d12:	486a      	ldr	r0, [pc, #424]	; (8000ebc <lwiperf_tcp_recv+0x1c4>)
 8000d14:	f010 fc7a 	bl	801160c <iprintf>
  if (err != ERR_OK) {
 8000d18:	f1b8 0f00 	cmp.w	r8, #0
 8000d1c:	d170      	bne.n	8000e00 <lwiperf_tcp_recv+0x108>
  if (p == NULL) {
 8000d1e:	2d00      	cmp	r5, #0
 8000d20:	f000 8098 	beq.w	8000e54 <lwiperf_tcp_recv+0x15c>
  if ((!conn->have_settings_buf) || ((conn->bytes_transferred - 24) % (1024 * 128) == 0)) {
 8000d24:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
  tot_len = p->tot_len;
 8000d28:	892f      	ldrh	r7, [r5, #8]
  conn->poll_count = 0;
 8000d2a:	f884 8020 	strb.w	r8, [r4, #32]
  if ((!conn->have_settings_buf) || ((conn->bytes_transferred - 24) % (1024 * 128) == 0)) {
 8000d2e:	b95b      	cbnz	r3, 8000d48 <lwiperf_tcp_recv+0x50>
    if (p->tot_len < sizeof(lwiperf_settings_t)) {
 8000d30:	2f17      	cmp	r7, #23
 8000d32:	d86c      	bhi.n	8000e0e <lwiperf_tcp_recv+0x116>
      lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_LOCAL_DATAERROR);
 8000d34:	4620      	mov	r0, r4
 8000d36:	2103      	movs	r1, #3
 8000d38:	f7ff fcaa 	bl	8000690 <lwiperf_tcp_close>
      pbuf_free(p);
 8000d3c:	4628      	mov	r0, r5
 8000d3e:	f009 fc71 	bl	800a624 <pbuf_free>
}
 8000d42:	2000      	movs	r0, #0
 8000d44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if ((!conn->have_settings_buf) || ((conn->bytes_transferred - 24) % (1024 * 128) == 0)) {
 8000d48:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000d4a:	03da      	lsls	r2, r3, #15
 8000d4c:	f5b2 2f40 	cmp.w	r2, #786432	; 0xc0000
 8000d50:	d118      	bne.n	8000d84 <lwiperf_tcp_recv+0x8c>
    if (p->tot_len < sizeof(lwiperf_settings_t)) {
 8000d52:	2f17      	cmp	r7, #23
 8000d54:	d9ee      	bls.n	8000d34 <lwiperf_tcp_recv+0x3c>
      if (conn->settings.flags & PP_HTONL(LWIPERF_FLAGS_ANSWER_TEST)) {
 8000d56:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000d58:	0612      	lsls	r2, r2, #24
 8000d5a:	f100 8087 	bmi.w	8000e6c <lwiperf_tcp_recv+0x174>
    conn->bytes_transferred += sizeof(lwiperf_settings_t);
 8000d5e:	3318      	adds	r3, #24
    if (conn->bytes_transferred <= 24) {
 8000d60:	2b18      	cmp	r3, #24
    conn->bytes_transferred += sizeof(lwiperf_settings_t);
 8000d62:	6263      	str	r3, [r4, #36]	; 0x24
    if (conn->bytes_transferred <= 24) {
 8000d64:	d968      	bls.n	8000e38 <lwiperf_tcp_recv+0x140>
    conn->next_num = 4; /* 24 bytes received... */
 8000d66:	2304      	movs	r3, #4
    tmp = pbuf_remove_header(p, 24);
 8000d68:	2118      	movs	r1, #24
 8000d6a:	4628      	mov	r0, r5
    conn->next_num = 4; /* 24 bytes received... */
 8000d6c:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    tmp = pbuf_remove_header(p, 24);
 8000d70:	f009 fbec 	bl	800a54c <pbuf_remove_header>
    LWIP_ASSERT("pbuf_remove_header failed", tmp == 0);
 8000d74:	b130      	cbz	r0, 8000d84 <lwiperf_tcp_recv+0x8c>
 8000d76:	4b4f      	ldr	r3, [pc, #316]	; (8000eb4 <lwiperf_tcp_recv+0x1bc>)
 8000d78:	f240 2211 	movw	r2, #529	; 0x211
 8000d7c:	4950      	ldr	r1, [pc, #320]	; (8000ec0 <lwiperf_tcp_recv+0x1c8>)
 8000d7e:	484f      	ldr	r0, [pc, #316]	; (8000ebc <lwiperf_tcp_recv+0x1c4>)
 8000d80:	f010 fc44 	bl	801160c <iprintf>
{
 8000d84:	46ae      	mov	lr, r5
 8000d86:	f04f 0800 	mov.w	r8, #0
    for (i = 0; i < q->len; i++) {
 8000d8a:	f8be 300a 	ldrh.w	r3, [lr, #10]
    const u8_t *payload = (const u8_t *)q->payload;
 8000d8e:	f8de 9004 	ldr.w	r9, [lr, #4]
    for (i = 0; i < q->len; i++) {
 8000d92:	b1db      	cbz	r3, 8000dcc <lwiperf_tcp_recv+0xd4>
      if (num == conn->next_num) {
 8000d94:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 8000d98:	2200      	movs	r2, #0
 8000d9a:	e008      	b.n	8000dae <lwiperf_tcp_recv+0xb6>
          conn->next_num = 0;
 8000d9c:	2b0a      	cmp	r3, #10
 8000d9e:	bf08      	it	eq
 8000da0:	2300      	moveq	r3, #0
 8000da2:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    for (i = 0; i < q->len; i++) {
 8000da6:	f8be 100a 	ldrh.w	r1, [lr, #10]
 8000daa:	4281      	cmp	r1, r0
 8000dac:	d90d      	bls.n	8000dca <lwiperf_tcp_recv+0xd2>
      u8_t val = payload[i];
 8000dae:	b290      	uxth	r0, r2
        conn->next_num++;
 8000db0:	1c59      	adds	r1, r3, #1
    for (i = 0; i < q->len; i++) {
 8000db2:	3201      	adds	r2, #1
      u8_t num = val - '0';
 8000db4:	f819 c000 	ldrb.w	ip, [r9, r0]
    for (i = 0; i < q->len; i++) {
 8000db8:	b290      	uxth	r0, r2
      u8_t num = val - '0';
 8000dba:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
      if (num == conn->next_num) {
 8000dbe:	fa5f fc8c 	uxtb.w	ip, ip
 8000dc2:	459c      	cmp	ip, r3
        conn->next_num++;
 8000dc4:	b2cb      	uxtb	r3, r1
      if (num == conn->next_num) {
 8000dc6:	d0e9      	beq.n	8000d9c <lwiperf_tcp_recv+0xa4>
 8000dc8:	e7b4      	b.n	8000d34 <lwiperf_tcp_recv+0x3c>
    packet_idx += q->len;
 8000dca:	4488      	add	r8, r1
  for (q = p; q != NULL; q = q->next) {
 8000dcc:	f8de e000 	ldr.w	lr, [lr]
 8000dd0:	f1be 0f00 	cmp.w	lr, #0
 8000dd4:	d1d9      	bne.n	8000d8a <lwiperf_tcp_recv+0x92>
  LWIP_ASSERT("count mismatch", packet_idx == p->tot_len);
 8000dd6:	892b      	ldrh	r3, [r5, #8]
 8000dd8:	4543      	cmp	r3, r8
 8000dda:	d006      	beq.n	8000dea <lwiperf_tcp_recv+0xf2>
 8000ddc:	4b35      	ldr	r3, [pc, #212]	; (8000eb4 <lwiperf_tcp_recv+0x1bc>)
 8000dde:	f240 222b 	movw	r2, #555	; 0x22b
 8000de2:	4938      	ldr	r1, [pc, #224]	; (8000ec4 <lwiperf_tcp_recv+0x1cc>)
 8000de4:	4835      	ldr	r0, [pc, #212]	; (8000ebc <lwiperf_tcp_recv+0x1c4>)
 8000de6:	f010 fc11 	bl	801160c <iprintf>
  conn->bytes_transferred += packet_idx;
 8000dea:	6a63      	ldr	r3, [r4, #36]	; 0x24
  tcp_recved(tpcb, tot_len);
 8000dec:	4630      	mov	r0, r6
 8000dee:	4639      	mov	r1, r7
  conn->bytes_transferred += packet_idx;
 8000df0:	4443      	add	r3, r8
 8000df2:	6263      	str	r3, [r4, #36]	; 0x24
  tcp_recved(tpcb, tot_len);
 8000df4:	f00a f886 	bl	800af04 <tcp_recved>
  pbuf_free(p);
 8000df8:	4628      	mov	r0, r5
 8000dfa:	f009 fc13 	bl	800a624 <pbuf_free>
  return ERR_OK;
 8000dfe:	e7a0      	b.n	8000d42 <lwiperf_tcp_recv+0x4a>
    lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_REMOTE);
 8000e00:	4620      	mov	r0, r4
 8000e02:	2105      	movs	r1, #5
 8000e04:	f7ff fc44 	bl	8000690 <lwiperf_tcp_close>
}
 8000e08:	2000      	movs	r0, #0
 8000e0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (pbuf_copy_partial(p, &conn->settings, sizeof(lwiperf_settings_t), 0) != sizeof(lwiperf_settings_t)) {
 8000e0e:	4643      	mov	r3, r8
 8000e10:	2218      	movs	r2, #24
 8000e12:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8000e16:	4628      	mov	r0, r5
 8000e18:	f009 fdfc 	bl	800aa14 <pbuf_copy_partial>
 8000e1c:	2818      	cmp	r0, #24
 8000e1e:	d133      	bne.n	8000e88 <lwiperf_tcp_recv+0x190>
      conn->have_settings_buf = 1;
 8000e20:	2301      	movs	r3, #1
        if (conn->settings.flags & PP_HTONL(LWIPERF_FLAGS_ANSWER_NOW)) {
 8000e22:	6aa2      	ldr	r2, [r4, #40]	; 0x28
      conn->have_settings_buf = 1;
 8000e24:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        if (conn->settings.flags & PP_HTONL(LWIPERF_FLAGS_ANSWER_NOW)) {
 8000e28:	4b27      	ldr	r3, [pc, #156]	; (8000ec8 <lwiperf_tcp_recv+0x1d0>)
 8000e2a:	4393      	bics	r3, r2
 8000e2c:	d034      	beq.n	8000e98 <lwiperf_tcp_recv+0x1a0>
    conn->bytes_transferred += sizeof(lwiperf_settings_t);
 8000e2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000e30:	3318      	adds	r3, #24
    if (conn->bytes_transferred <= 24) {
 8000e32:	2b18      	cmp	r3, #24
    conn->bytes_transferred += sizeof(lwiperf_settings_t);
 8000e34:	6263      	str	r3, [r4, #36]	; 0x24
    if (conn->bytes_transferred <= 24) {
 8000e36:	d896      	bhi.n	8000d66 <lwiperf_tcp_recv+0x6e>
      conn->time_started = sys_now();
 8000e38:	f005 fd9c 	bl	8006974 <sys_now>
 8000e3c:	4603      	mov	r3, r0
      tcp_recved(tpcb, p->tot_len);
 8000e3e:	8929      	ldrh	r1, [r5, #8]
 8000e40:	4630      	mov	r0, r6
      conn->time_started = sys_now();
 8000e42:	6163      	str	r3, [r4, #20]
      tcp_recved(tpcb, p->tot_len);
 8000e44:	f00a f85e 	bl	800af04 <tcp_recved>
      pbuf_free(p);
 8000e48:	4628      	mov	r0, r5
 8000e4a:	f009 fbeb 	bl	800a624 <pbuf_free>
}
 8000e4e:	2000      	movs	r0, #0
 8000e50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (conn->settings.flags & PP_HTONL(LWIPERF_FLAGS_ANSWER_TEST)) {
 8000e54:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000e56:	0618      	lsls	r0, r3, #24
 8000e58:	d501      	bpl.n	8000e5e <lwiperf_tcp_recv+0x166>
      if ((conn->settings.flags & PP_HTONL(LWIPERF_FLAGS_ANSWER_NOW)) == 0) {
 8000e5a:	01d9      	lsls	r1, r3, #7
 8000e5c:	d510      	bpl.n	8000e80 <lwiperf_tcp_recv+0x188>
    lwiperf_tcp_close(conn, LWIPERF_TCP_DONE_SERVER);
 8000e5e:	4620      	mov	r0, r4
 8000e60:	2100      	movs	r1, #0
 8000e62:	f7ff fc15 	bl	8000690 <lwiperf_tcp_close>
}
 8000e66:	2000      	movs	r0, #0
 8000e68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if (pbuf_memcmp(p, 0, &conn->settings, sizeof(lwiperf_settings_t)) != 0) {
 8000e6c:	4641      	mov	r1, r8
 8000e6e:	2318      	movs	r3, #24
 8000e70:	f104 0228 	add.w	r2, r4, #40	; 0x28
 8000e74:	4628      	mov	r0, r5
 8000e76:	f009 fe47 	bl	800ab08 <pbuf_memcmp>
 8000e7a:	2800      	cmp	r0, #0
 8000e7c:	d0d7      	beq.n	8000e2e <lwiperf_tcp_recv+0x136>
 8000e7e:	e759      	b.n	8000d34 <lwiperf_tcp_recv+0x3c>
        lwiperf_tx_start_passive(conn);
 8000e80:	4620      	mov	r0, r4
 8000e82:	f7ff ff0b 	bl	8000c9c <lwiperf_tx_start_passive>
 8000e86:	e7ea      	b.n	8000e5e <lwiperf_tcp_recv+0x166>
        lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_LOCAL);
 8000e88:	4620      	mov	r0, r4
 8000e8a:	2102      	movs	r1, #2
 8000e8c:	f7ff fc00 	bl	8000690 <lwiperf_tcp_close>
        pbuf_free(p);
 8000e90:	4628      	mov	r0, r5
 8000e92:	f009 fbc7 	bl	800a624 <pbuf_free>
        return ERR_OK;
 8000e96:	e754      	b.n	8000d42 <lwiperf_tcp_recv+0x4a>
          err_t err2 = lwiperf_tx_start_passive(conn);
 8000e98:	4620      	mov	r0, r4
 8000e9a:	f7ff feff 	bl	8000c9c <lwiperf_tx_start_passive>
          if (err2 != ERR_OK) {
 8000e9e:	2800      	cmp	r0, #0
 8000ea0:	d0c5      	beq.n	8000e2e <lwiperf_tcp_recv+0x136>
            lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_LOCAL_TXERROR);
 8000ea2:	4620      	mov	r0, r4
 8000ea4:	2104      	movs	r1, #4
 8000ea6:	f7ff fbf3 	bl	8000690 <lwiperf_tcp_close>
            pbuf_free(p);
 8000eaa:	4628      	mov	r0, r5
 8000eac:	f009 fbba 	bl	800a624 <pbuf_free>
            return ERR_OK;
 8000eb0:	e747      	b.n	8000d42 <lwiperf_tcp_recv+0x4a>
 8000eb2:	bf00      	nop
 8000eb4:	080128b4 	.word	0x080128b4
 8000eb8:	080129b4 	.word	0x080129b4
 8000ebc:	080128dc 	.word	0x080128dc
 8000ec0:	080129ec 	.word	0x080129ec
 8000ec4:	08012a08 	.word	0x08012a08
 8000ec8:	01000080 	.word	0x01000080

08000ecc <lwiperf_start_tcp_server_default>:
{
 8000ecc:	b530      	push	{r4, r5, lr}
 8000ece:	b085      	sub	sp, #20
  lwiperf_state_tcp_t *state = NULL;
 8000ed0:	2400      	movs	r4, #0
{
 8000ed2:	4602      	mov	r2, r0
 8000ed4:	460b      	mov	r3, r1
  err = lwiperf_start_tcp_server_impl(local_addr, local_port, report_fn, report_arg,
 8000ed6:	ad03      	add	r5, sp, #12
 8000ed8:	f241 3189 	movw	r1, #5001	; 0x1389
 8000edc:	4806      	ldr	r0, [pc, #24]	; (8000ef8 <lwiperf_start_tcp_server_default+0x2c>)
  lwiperf_state_tcp_t *state = NULL;
 8000ede:	9403      	str	r4, [sp, #12]
  err = lwiperf_start_tcp_server_impl(local_addr, local_port, report_fn, report_arg,
 8000ee0:	e9cd 4500 	strd	r4, r5, [sp]
 8000ee4:	f7ff fdfa 	bl	8000adc <lwiperf_start_tcp_server_impl.constprop.0>
  if (err == ERR_OK) {
 8000ee8:	b910      	cbnz	r0, 8000ef0 <lwiperf_start_tcp_server_default+0x24>
    return state;
 8000eea:	9803      	ldr	r0, [sp, #12]
}
 8000eec:	b005      	add	sp, #20
 8000eee:	bd30      	pop	{r4, r5, pc}
  return NULL;
 8000ef0:	4620      	mov	r0, r4
}
 8000ef2:	b005      	add	sp, #20
 8000ef4:	bd30      	pop	{r4, r5, pc}
 8000ef6:	bf00      	nop
 8000ef8:	08015040 	.word	0x08015040

08000efc <lwiperf_start_tcp_client>:
 * @returns a connection handle that can be used to abort the client
 *          by calling @ref lwiperf_abort()
 */
void* lwiperf_start_tcp_client(const ip_addr_t* remote_addr, u16_t remote_port,
  enum lwiperf_client_type type, lwiperf_report_fn report_fn, void* report_arg)
{
 8000efc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  err_t ret;
  lwiperf_settings_t settings;
  lwiperf_state_tcp_t *state = NULL;

  memset(&settings, 0, sizeof(settings));
  switch (type) {
 8000f00:	2a01      	cmp	r2, #1
{
 8000f02:	b08c      	sub	sp, #48	; 0x30
  lwiperf_state_tcp_t *state = NULL;
 8000f04:	f04f 0400 	mov.w	r4, #0
{
 8000f08:	4616      	mov	r6, r2
 8000f0a:	4680      	mov	r8, r0
 8000f0c:	460d      	mov	r5, r1
 8000f0e:	461f      	mov	r7, r3
  lwiperf_state_tcp_t *state = NULL;
 8000f10:	9404      	str	r4, [sp, #16]
  memset(&settings, 0, sizeof(settings));
 8000f12:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8000f16:	e9cd 4408 	strd	r4, r4, [sp, #32]
 8000f1a:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
  switch (type) {
 8000f1e:	d046      	beq.n	8000fae <lwiperf_start_tcp_client+0xb2>
 8000f20:	2a02      	cmp	r2, #2
 8000f22:	d004      	beq.n	8000f2e <lwiperf_start_tcp_client+0x32>
 8000f24:	b142      	cbz	r2, 8000f38 <lwiperf_start_tcp_client+0x3c>
      }
    }
    return state;
  }
  return NULL;
}
 8000f26:	4620      	mov	r0, r4
 8000f28:	b00c      	add	sp, #48	; 0x30
 8000f2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    settings.flags = htonl(LWIPERF_FLAGS_ANSWER_TEST);
 8000f2e:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8000f32:	f008 fbd9 	bl	80096e8 <lwip_htonl>
 8000f36:	9006      	str	r0, [sp, #24]
  settings.num_threads = htonl(1);
 8000f38:	2001      	movs	r0, #1
  ret = lwiperf_tx_start_impl(remote_addr, remote_port, &settings, report_fn, report_arg, NULL, &state);
 8000f3a:	2400      	movs	r4, #0
  settings.num_threads = htonl(1);
 8000f3c:	f008 fbd4 	bl	80096e8 <lwip_htonl>
 8000f40:	9007      	str	r0, [sp, #28]
  settings.remote_port = htonl(LWIPERF_TCP_PORT_DEFAULT);
 8000f42:	f241 3089 	movw	r0, #5001	; 0x1389
 8000f46:	f008 fbcf 	bl	80096e8 <lwip_htonl>
 8000f4a:	9008      	str	r0, [sp, #32]
  settings.amount = htonl((u32_t)-1000);
 8000f4c:	482c      	ldr	r0, [pc, #176]	; (8001000 <lwiperf_start_tcp_client+0x104>)
 8000f4e:	f008 fbcb 	bl	80096e8 <lwip_htonl>
  ret = lwiperf_tx_start_impl(remote_addr, remote_port, &settings, report_fn, report_arg, NULL, &state);
 8000f52:	9b12      	ldr	r3, [sp, #72]	; 0x48
  settings.amount = htonl((u32_t)-1000);
 8000f54:	900b      	str	r0, [sp, #44]	; 0x2c
  ret = lwiperf_tx_start_impl(remote_addr, remote_port, &settings, report_fn, report_arg, NULL, &state);
 8000f56:	aa06      	add	r2, sp, #24
 8000f58:	9300      	str	r3, [sp, #0]
 8000f5a:	ab04      	add	r3, sp, #16
 8000f5c:	4629      	mov	r1, r5
 8000f5e:	4640      	mov	r0, r8
 8000f60:	9302      	str	r3, [sp, #8]
 8000f62:	463b      	mov	r3, r7
 8000f64:	9401      	str	r4, [sp, #4]
 8000f66:	f7ff fe0b 	bl	8000b80 <lwiperf_tx_start_impl.constprop.0>
  if (ret == ERR_OK) {
 8000f6a:	2800      	cmp	r0, #0
 8000f6c:	d1db      	bne.n	8000f26 <lwiperf_start_tcp_client+0x2a>
    LWIP_ASSERT("state != NULL", state != NULL);
 8000f6e:	9c04      	ldr	r4, [sp, #16]
 8000f70:	b314      	cbz	r4, 8000fb8 <lwiperf_start_tcp_client+0xbc>
    if (type != LWIPERF_CLIENT) {
 8000f72:	2e00      	cmp	r6, #0
 8000f74:	d0d7      	beq.n	8000f26 <lwiperf_start_tcp_client+0x2a>
      ret = lwiperf_start_tcp_server_impl(&state->conn_pcb->local_ip, LWIPERF_TCP_PORT_DEFAULT,
 8000f76:	ab05      	add	r3, sp, #20
      lwiperf_state_tcp_t *server = NULL;
 8000f78:	2500      	movs	r5, #0
      ret = lwiperf_start_tcp_server_impl(&state->conn_pcb->local_ip, LWIPERF_TCP_PORT_DEFAULT,
 8000f7a:	6920      	ldr	r0, [r4, #16]
 8000f7c:	463a      	mov	r2, r7
 8000f7e:	9301      	str	r3, [sp, #4]
 8000f80:	f241 3189 	movw	r1, #5001	; 0x1389
 8000f84:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8000f86:	9400      	str	r4, [sp, #0]
      lwiperf_state_tcp_t *server = NULL;
 8000f88:	9505      	str	r5, [sp, #20]
      ret = lwiperf_start_tcp_server_impl(&state->conn_pcb->local_ip, LWIPERF_TCP_PORT_DEFAULT,
 8000f8a:	f7ff fda7 	bl	8000adc <lwiperf_start_tcp_server_impl.constprop.0>
      if (ret != ERR_OK) {
 8000f8e:	b9e8      	cbnz	r0, 8000fcc <lwiperf_start_tcp_client+0xd0>
      server->specific_remote = 1;
 8000f90:	9b05      	ldr	r3, [sp, #20]
 8000f92:	2201      	movs	r2, #1
      if (type == LWIPERF_TRADEOFF) {
 8000f94:	2e02      	cmp	r6, #2
}
 8000f96:	4620      	mov	r0, r4
      server->specific_remote = 1;
 8000f98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      server->remote_addr = state->conn_pcb->remote_ip;
 8000f9c:	6921      	ldr	r1, [r4, #16]
 8000f9e:	6849      	ldr	r1, [r1, #4]
        server->client_tradeoff_mode = 1;
 8000fa0:	bf08      	it	eq
 8000fa2:	f883 2022 	strbeq.w	r2, [r3, #34]	; 0x22
      server->remote_addr = state->conn_pcb->remote_ip;
 8000fa6:	6459      	str	r1, [r3, #68]	; 0x44
}
 8000fa8:	b00c      	add	sp, #48	; 0x30
 8000faa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    settings.flags = htonl(LWIPERF_FLAGS_ANSWER_TEST | LWIPERF_FLAGS_ANSWER_NOW);
 8000fae:	4815      	ldr	r0, [pc, #84]	; (8001004 <lwiperf_start_tcp_client+0x108>)
 8000fb0:	f008 fb9a 	bl	80096e8 <lwip_htonl>
 8000fb4:	9006      	str	r0, [sp, #24]
    break;
 8000fb6:	e7bf      	b.n	8000f38 <lwiperf_start_tcp_client+0x3c>
    LWIP_ASSERT("state != NULL", state != NULL);
 8000fb8:	4b13      	ldr	r3, [pc, #76]	; (8001008 <lwiperf_start_tcp_client+0x10c>)
 8000fba:	f240 3216 	movw	r2, #790	; 0x316
 8000fbe:	4913      	ldr	r1, [pc, #76]	; (800100c <lwiperf_start_tcp_client+0x110>)
 8000fc0:	4813      	ldr	r0, [pc, #76]	; (8001010 <lwiperf_start_tcp_client+0x114>)
 8000fc2:	f010 fb23 	bl	801160c <iprintf>
    if (type != LWIPERF_CLIENT) {
 8000fc6:	2e00      	cmp	r6, #0
 8000fc8:	d0ad      	beq.n	8000f26 <lwiperf_start_tcp_client+0x2a>
 8000fca:	e7d4      	b.n	8000f76 <lwiperf_start_tcp_client+0x7a>
void
lwiperf_abort(void *lwiperf_session)
{
  lwiperf_state_base_t *i, *dealloc, *last = NULL;

  LWIP_ASSERT_CORE_LOCKED();
 8000fcc:	f005 fe56 	bl	8006c7c <sys_check_core_locking>

  for (i = lwiperf_all_connections; i != NULL; ) {
 8000fd0:	4b10      	ldr	r3, [pc, #64]	; (8001014 <lwiperf_start_tcp_client+0x118>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	b153      	cbz	r3, 8000fec <lwiperf_start_tcp_client+0xf0>
  lwiperf_state_base_t *i, *dealloc, *last = NULL;
 8000fd6:	462e      	mov	r6, r5
    if ((i == lwiperf_session) || (i->related_master_state == lwiperf_session)) {
 8000fd8:	429c      	cmp	r4, r3
      dealloc = i;
      i = i->next;
      if (last != NULL) {
        last->next = i;
      }
      LWIPERF_FREE(lwiperf_state_tcp_t, dealloc); /* @todo: type? */
 8000fda:	4618      	mov	r0, r3
    if ((i == lwiperf_session) || (i->related_master_state == lwiperf_session)) {
 8000fdc:	d008      	beq.n	8000ff0 <lwiperf_start_tcp_client+0xf4>
 8000fde:	689a      	ldr	r2, [r3, #8]
 8000fe0:	4294      	cmp	r4, r2
 8000fe2:	d005      	beq.n	8000ff0 <lwiperf_start_tcp_client+0xf4>
    } else {
      last = i;
      i = i->next;
 8000fe4:	461e      	mov	r6, r3
 8000fe6:	681b      	ldr	r3, [r3, #0]
  for (i = lwiperf_all_connections; i != NULL; ) {
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d1f5      	bne.n	8000fd8 <lwiperf_start_tcp_client+0xdc>
        return NULL;
 8000fec:	2400      	movs	r4, #0
 8000fee:	e79a      	b.n	8000f26 <lwiperf_start_tcp_client+0x2a>
      i = i->next;
 8000ff0:	681d      	ldr	r5, [r3, #0]
      if (last != NULL) {
 8000ff2:	b106      	cbz	r6, 8000ff6 <lwiperf_start_tcp_client+0xfa>
        last->next = i;
 8000ff4:	6035      	str	r5, [r6, #0]
      LWIPERF_FREE(lwiperf_state_tcp_t, dealloc); /* @todo: type? */
 8000ff6:	f008 fc31 	bl	800985c <mem_free>
      i = i->next;
 8000ffa:	462b      	mov	r3, r5
      LWIPERF_FREE(lwiperf_state_tcp_t, dealloc); /* @todo: type? */
 8000ffc:	e7f4      	b.n	8000fe8 <lwiperf_start_tcp_client+0xec>
 8000ffe:	bf00      	nop
 8001000:	fffffc18 	.word	0xfffffc18
 8001004:	80000001 	.word	0x80000001
 8001008:	080128b4 	.word	0x080128b4
 800100c:	08012a18 	.word	0x08012a18
 8001010:	080128dc 	.word	0x080128dc
 8001014:	240000d8 	.word	0x240000d8

08001018 <lwiperf_start_tcp_client_default>:
{
 8001018:	b510      	push	{r4, lr}
 800101a:	4614      	mov	r4, r2
 800101c:	b082      	sub	sp, #8
 800101e:	460b      	mov	r3, r1
  return lwiperf_start_tcp_client(remote_addr, LWIPERF_TCP_PORT_DEFAULT, LWIPERF_CLIENT,
 8001020:	2200      	movs	r2, #0
 8001022:	f241 3189 	movw	r1, #5001	; 0x1389
 8001026:	9400      	str	r4, [sp, #0]
 8001028:	f7ff ff68 	bl	8000efc <lwiperf_start_tcp_client>
}
 800102c:	b002      	add	sp, #8
 800102e:	bd10      	pop	{r4, pc}

08001030 <_sh_uart_recv_cb>:
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */

int32_t _sh_uart_recv_cb(uint8_t *p_data, uint32_t size)
{
 8001030:	b508      	push	{r3, lr}
	sh_input(p_data, size);
 8001032:	f010 f819 	bl	8011068 <sh_input>
	return 0;
}
 8001036:	2000      	movs	r0, #0
 8001038:	bd08      	pop	{r3, pc}
 800103a:	bf00      	nop

0800103c <sh_devinit>:

int32_t sh_devinit(void)
{
 800103c:	b510      	push	{r4, lr}
 800103e:	b084      	sub	sp, #16
	DRV_UART_CONFIG_S uart_config = {
 8001040:	2400      	movs	r4, #0
 8001042:	2101      	movs	r1, #1
 8001044:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001048:	4b06      	ldr	r3, [pc, #24]	; (8001064 <sh_devinit+0x28>)
			.channel = DRV_UART_CH3,
			.stopbit = DRV_UART_STOPBITS_1,
			.baudrate = 115200,
			.recv_func = _sh_uart_recv_cb
	};
	drv_uart_init(&uart_config);
 800104a:	4668      	mov	r0, sp
	DRV_UART_CONFIG_S uart_config = {
 800104c:	9400      	str	r4, [sp, #0]
 800104e:	9403      	str	r4, [sp, #12]
 8001050:	f88d 1001 	strb.w	r1, [sp, #1]
 8001054:	e9cd 2301 	strd	r2, r3, [sp, #4]
	drv_uart_init(&uart_config);
 8001058:	f010 f870 	bl	801113c <drv_uart_init>
	return 0;
}
 800105c:	4620      	mov	r0, r4
 800105e:	b004      	add	sp, #16
 8001060:	bd10      	pop	{r4, pc}
 8001062:	bf00      	nop
 8001064:	08001031 	.word	0x08001031

08001068 <sh_output>:

int32_t sh_output(uint8_t *p_bytes, uint32_t size)
{
 8001068:	b510      	push	{r4, lr}
 800106a:	460c      	mov	r4, r1
 800106c:	4601      	mov	r1, r0
	drv_uart_write_data(DRV_UART_CH3, p_bytes, size);
 800106e:	2000      	movs	r0, #0
 8001070:	b2a2      	uxth	r2, r4
 8001072:	f010 f8f7 	bl	8011264 <drv_uart_write_data>
	return size;
}
 8001076:	4620      	mov	r0, r4
 8001078:	bd10      	pop	{r4, pc}
 800107a:	bf00      	nop

0800107c <StartDefaultTask>:

void StartDefaultTask(void *argument)
{
 800107c:	b500      	push	{lr}
 800107e:	b089      	sub	sp, #36	; 0x24
  ip4_addr_t remote_addr;
  IP4_ADDR(&remote_addr, 192, 168, 1, 1);
  lwiperf_start_tcp_client_default(&remote_addr, NULL, NULL);
  UNLOCK_TCPIP_CORE();

  SH_CONFIG _conf = {
 8001080:	4c11      	ldr	r4, [pc, #68]	; (80010c8 <StartDefaultTask+0x4c>)
  MX_LWIP_Init();
 8001082:	f005 fa41 	bl	8006508 <MX_LWIP_Init>
  LOCK_TCPIP_CORE();
 8001086:	f005 fd71 	bl	8006b6c <sys_lock_tcpip_core>
  lwiperf_start_tcp_server_default(NULL, NULL);
 800108a:	2100      	movs	r1, #0
 800108c:	4608      	mov	r0, r1
 800108e:	f7ff ff1d 	bl	8000ecc <lwiperf_start_tcp_server_default>
  lwiperf_start_tcp_client_default(&remote_addr, NULL, NULL);
 8001092:	2200      	movs	r2, #0
  IP4_ADDR(&remote_addr, 192, 168, 1, 1);
 8001094:	4b0d      	ldr	r3, [pc, #52]	; (80010cc <StartDefaultTask+0x50>)
  lwiperf_start_tcp_client_default(&remote_addr, NULL, NULL);
 8001096:	a801      	add	r0, sp, #4
 8001098:	4611      	mov	r1, r2
  IP4_ADDR(&remote_addr, 192, 168, 1, 1);
 800109a:	9301      	str	r3, [sp, #4]
  lwiperf_start_tcp_client_default(&remote_addr, NULL, NULL);
 800109c:	f7ff ffbc 	bl	8001018 <lwiperf_start_tcp_client_default>
  UNLOCK_TCPIP_CORE();
 80010a0:	f005 fde2 	bl	8006c68 <sys_unlock_tcpip_core>
  SH_CONFIG _conf = {
 80010a4:	f10d 0c08 	add.w	ip, sp, #8
 80010a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010aa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80010ae:	e894 0003 	ldmia.w	r4, {r0, r1}
 80010b2:	e88c 0003 	stmia.w	ip, {r0, r1}
		  .name = "1234567890123456",
		  .init = sh_devinit,
		  .output = sh_output,
  };
  sh_init(&_conf);
 80010b6:	a802      	add	r0, sp, #8
 80010b8:	f00f ff9e 	bl	8010ff8 <sh_init>

  /* Infinite loop */
  for(;;)
  {
    osDelay(1000);
 80010bc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010c0:	f005 fea6 	bl	8006e10 <osDelay>
  for(;;)
 80010c4:	e7fa      	b.n	80010bc <StartDefaultTask+0x40>
 80010c6:	bf00      	nop
 80010c8:	0801289c 	.word	0x0801289c
 80010cc:	0101a8c0 	.word	0x0101a8c0

080010d0 <SystemClock_Config>:
{
 80010d0:	b530      	push	{r4, r5, lr}
 80010d2:	b09d      	sub	sp, #116	; 0x74
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010d4:	224c      	movs	r2, #76	; 0x4c
 80010d6:	2100      	movs	r1, #0
 80010d8:	a809      	add	r0, sp, #36	; 0x24
 80010da:	f010 fc43 	bl	8011964 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010de:	2220      	movs	r2, #32
 80010e0:	2100      	movs	r1, #0
 80010e2:	a801      	add	r0, sp, #4
 80010e4:	f010 fc3e 	bl	8011964 <memset>
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80010e8:	2002      	movs	r0, #2
 80010ea:	f002 f86d 	bl	80031c8 <HAL_PWREx_ConfigSupply>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010ee:	4b25      	ldr	r3, [pc, #148]	; (8001184 <SystemClock_Config+0xb4>)
 80010f0:	2100      	movs	r1, #0
 80010f2:	4a25      	ldr	r2, [pc, #148]	; (8001188 <SystemClock_Config+0xb8>)
 80010f4:	9100      	str	r1, [sp, #0]
 80010f6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80010f8:	f021 0101 	bic.w	r1, r1, #1
 80010fc:	62d9      	str	r1, [r3, #44]	; 0x2c
 80010fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001100:	f003 0301 	and.w	r3, r3, #1
 8001104:	9300      	str	r3, [sp, #0]
 8001106:	6993      	ldr	r3, [r2, #24]
 8001108:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800110c:	6193      	str	r3, [r2, #24]
 800110e:	6993      	ldr	r3, [r2, #24]
 8001110:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001114:	9300      	str	r3, [sp, #0]
 8001116:	9b00      	ldr	r3, [sp, #0]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001118:	6993      	ldr	r3, [r2, #24]
 800111a:	0499      	lsls	r1, r3, #18
 800111c:	d5fc      	bpl.n	8001118 <SystemClock_Config+0x48>
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800111e:	2300      	movs	r3, #0
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001120:	2201      	movs	r2, #1
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001122:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001124:	2540      	movs	r5, #64	; 0x40
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001126:	920c      	str	r2, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLN = 400;
 8001128:	2220      	movs	r2, #32
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800112a:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800112c:	a809      	add	r0, sp, #36	; 0x24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800112e:	9409      	str	r4, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001130:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001132:	9416      	str	r4, [sp, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001134:	950d      	str	r5, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001136:	e9cd 331a 	strd	r3, r3, [sp, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLN = 400;
 800113a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800113e:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8001142:	2304      	movs	r3, #4
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001144:	e9cd 4417 	strd	r4, r4, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8001148:	9319      	str	r3, [sp, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800114a:	f002 f8e5 	bl	8003318 <HAL_RCC_OscConfig>
 800114e:	4603      	mov	r3, r0
 8001150:	b108      	cbz	r0, 8001156 <SystemClock_Config+0x86>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001152:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001154:	e7fe      	b.n	8001154 <SystemClock_Config+0x84>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001156:	223f      	movs	r2, #63	; 0x3f
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001158:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800115a:	2308      	movs	r3, #8
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800115c:	4621      	mov	r1, r4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800115e:	9201      	str	r2, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001160:	2203      	movs	r2, #3
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001162:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001164:	9508      	str	r5, [sp, #32]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001166:	9202      	str	r2, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001168:	e9cd 3504 	strd	r3, r5, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800116c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001170:	e9cd 5306 	strd	r5, r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001174:	f002 fbe6 	bl	8003944 <HAL_RCC_ClockConfig>
 8001178:	b108      	cbz	r0, 800117e <SystemClock_Config+0xae>
 800117a:	b672      	cpsid	i
  while (1)
 800117c:	e7fe      	b.n	800117c <SystemClock_Config+0xac>
}
 800117e:	b01d      	add	sp, #116	; 0x74
 8001180:	bd30      	pop	{r4, r5, pc}
 8001182:	bf00      	nop
 8001184:	58000400 	.word	0x58000400
 8001188:	58024800 	.word	0x58024800

0800118c <main>:
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800118c:	4a94      	ldr	r2, [pc, #592]	; (80013e0 <main+0x254>)
 800118e:	6953      	ldr	r3, [r2, #20]
 8001190:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
{
 8001194:	b500      	push	{lr}
 8001196:	b08d      	sub	sp, #52	; 0x34
 8001198:	d111      	bne.n	80011be <main+0x32>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800119a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800119e:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80011a2:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80011a6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80011aa:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80011ae:	6953      	ldr	r3, [r2, #20]
 80011b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011b4:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80011b6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80011ba:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80011be:	4888      	ldr	r0, [pc, #544]	; (80013e0 <main+0x254>)
 80011c0:	6943      	ldr	r3, [r0, #20]
 80011c2:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 80011c6:	d126      	bne.n	8001216 <main+0x8a>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80011c8:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80011cc:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 80011d0:	f8d0 4080 	ldr.w	r4, [r0, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80011d4:	f643 75e0 	movw	r5, #16352	; 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80011d8:	f3c4 3c4e 	ubfx	ip, r4, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80011dc:	f3c4 04c9 	ubfx	r4, r4, #3, #10
 80011e0:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80011e4:	ea0c 0105 	and.w	r1, ip, r5
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80011e8:	4623      	mov	r3, r4
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80011ea:	ea41 7283 	orr.w	r2, r1, r3, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80011ee:	3b01      	subs	r3, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80011f0:	f8c0 2260 	str.w	r2, [r0, #608]	; 0x260
      } while (ways-- != 0U);
 80011f4:	1c5a      	adds	r2, r3, #1
 80011f6:	d1f8      	bne.n	80011ea <main+0x5e>
    } while(sets-- != 0U);
 80011f8:	f1ac 0c20 	sub.w	ip, ip, #32
 80011fc:	f11c 0f20 	cmn.w	ip, #32
 8001200:	d1f0      	bne.n	80011e4 <main+0x58>
 8001202:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001206:	6943      	ldr	r3, [r0, #20]
 8001208:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800120c:	6143      	str	r3, [r0, #20]
 800120e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001212:	f3bf 8f6f 	isb	sy
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001216:	2400      	movs	r4, #0
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001218:	2501      	movs	r5, #1
  HAL_Init();
 800121a:	f000 fb97 	bl	800194c <HAL_Init>
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 800121e:	2602      	movs	r6, #2
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001220:	e9cd 4407 	strd	r4, r4, [sp, #28]
 8001224:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  HAL_MPU_Disable();
 8001228:	f000 fc40 	bl	8001aac <HAL_MPU_Disable>
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800122c:	f248 721f 	movw	r2, #34591	; 0x871f
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001230:	f240 1301 	movw	r3, #257	; 0x101
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001234:	a807      	add	r0, sp, #28
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001236:	f8ad 501c 	strh.w	r5, [sp, #28]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800123a:	930a      	str	r3, [sp, #40]	; 0x28
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800123c:	e9cd 4208 	strd	r4, r2, [sp, #32]
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001240:	f000 fc52 	bl	8001ae8 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.BaseAddress = 0x30020000;
 8001244:	4a67      	ldr	r2, [pc, #412]	; (80013e4 <main+0x258>)
  MPU_InitStruct.Size = MPU_REGION_SIZE_128KB;
 8001246:	4b68      	ldr	r3, [pc, #416]	; (80013e8 <main+0x25c>)
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001248:	a807      	add	r0, sp, #28
  MPU_InitStruct.BaseAddress = 0x30020000;
 800124a:	9208      	str	r2, [sp, #32]
  MPU_InitStruct.Size = MPU_REGION_SIZE_128KB;
 800124c:	9309      	str	r3, [sp, #36]	; 0x24
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 800124e:	f88d 501d 	strb.w	r5, [sp, #29]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8001252:	f88d 4029 	strb.w	r4, [sp, #41]	; 0x29
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001256:	f000 fc47 	bl	8001ae8 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.BaseAddress = 0x30040000;
 800125a:	4b64      	ldr	r3, [pc, #400]	; (80013ec <main+0x260>)
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800125c:	a807      	add	r0, sp, #28
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800125e:	f88d 4026 	strb.w	r4, [sp, #38]	; 0x26
  MPU_InitStruct.BaseAddress = 0x30040000;
 8001262:	9308      	str	r3, [sp, #32]
  MPU_InitStruct.Size = MPU_REGION_SIZE_512B;
 8001264:	2308      	movs	r3, #8
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8001266:	f88d 601d 	strb.w	r6, [sp, #29]
  MPU_InitStruct.Size = MPU_REGION_SIZE_512B;
 800126a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800126e:	f88d 5029 	strb.w	r5, [sp, #41]	; 0x29
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8001272:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001276:	f000 fc37 	bl	8001ae8 <HAL_MPU_ConfigRegion>
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800127a:	2004      	movs	r0, #4
 800127c:	f000 fc24 	bl	8001ac8 <HAL_MPU_Enable>
  SystemClock_Config();
 8001280:	f7ff ff26 	bl	80010d0 <SystemClock_Config>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001284:	4b5a      	ldr	r3, [pc, #360]	; (80013f0 <main+0x264>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001286:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8001288:	f244 0101 	movw	r1, #16385	; 0x4001
 800128c:	4859      	ldr	r0, [pc, #356]	; (80013f4 <main+0x268>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800128e:	e9cd 4407 	strd	r4, r4, [sp, #28]
 8001292:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001296:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800129a:	f042 0204 	orr.w	r2, r2, #4
 800129e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80012a2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80012a6:	f002 0204 	and.w	r2, r2, #4
 80012aa:	9200      	str	r2, [sp, #0]
 80012ac:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012ae:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80012b2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80012b6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80012ba:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80012be:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80012c2:	9201      	str	r2, [sp, #4]
 80012c4:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80012ca:	432a      	orrs	r2, r5
 80012cc:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80012d0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80012d4:	402a      	ands	r2, r5
 80012d6:	9202      	str	r2, [sp, #8]
 80012d8:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012da:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80012de:	4332      	orrs	r2, r6
 80012e0:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80012e4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80012e8:	4032      	ands	r2, r6
 80012ea:	9203      	str	r2, [sp, #12]
 80012ec:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012ee:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80012f2:	f042 0208 	orr.w	r2, r2, #8
 80012f6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80012fa:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80012fe:	f002 0208 	and.w	r2, r2, #8
 8001302:	9204      	str	r2, [sp, #16]
 8001304:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001306:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800130a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800130e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001312:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001316:	f002 0240 	and.w	r2, r2, #64	; 0x40
 800131a:	9205      	str	r2, [sp, #20]
 800131c:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800131e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001322:	f042 0210 	orr.w	r2, r2, #16
 8001326:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 800132a:	4622      	mov	r2, r4
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800132c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001330:	f003 0310 	and.w	r3, r3, #16
 8001334:	9306      	str	r3, [sp, #24]
 8001336:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8001338:	f001 ff42 	bl	80031c0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 800133c:	4622      	mov	r2, r4
 800133e:	482e      	ldr	r0, [pc, #184]	; (80013f8 <main+0x26c>)
 8001340:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001344:	f001 ff3c 	bl	80031c0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001348:	4622      	mov	r2, r4
 800134a:	4631      	mov	r1, r6
 800134c:	482b      	ldr	r0, [pc, #172]	; (80013fc <main+0x270>)
 800134e:	f001 ff37 	bl	80031c0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = B1_Pin;
 8001352:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001356:	a907      	add	r1, sp, #28
 8001358:	4829      	ldr	r0, [pc, #164]	; (8001400 <main+0x274>)
  GPIO_InitStruct.Pin = B1_Pin;
 800135a:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135c:	e9cd 4408 	strd	r4, r4, [sp, #32]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001360:	f001 fdfc 	bl	8002f5c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8001364:	f244 0301 	movw	r3, #16385	; 0x4001
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001368:	a907      	add	r1, sp, #28
 800136a:	4822      	ldr	r0, [pc, #136]	; (80013f4 <main+0x268>)
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 800136c:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800136e:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001370:	e9cd 5408 	strd	r5, r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001374:	f001 fdf2 	bl	8002f5c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8001378:	f44f 6380 	mov.w	r3, #1024	; 0x400
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 800137c:	a907      	add	r1, sp, #28
 800137e:	481e      	ldr	r0, [pc, #120]	; (80013f8 <main+0x26c>)
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8001380:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001382:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001384:	e9cd 5408 	strd	r5, r4, [sp, #32]
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001388:	f001 fde8 	bl	8002f5c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 800138c:	2380      	movs	r3, #128	; 0x80
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 800138e:	a907      	add	r1, sp, #28
 8001390:	481c      	ldr	r0, [pc, #112]	; (8001404 <main+0x278>)
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8001392:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001394:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001398:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800139a:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 800139c:	f001 fdde 	bl	8002f5c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80013a0:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013a4:	a907      	add	r1, sp, #28
 80013a6:	4818      	ldr	r0, [pc, #96]	; (8001408 <main+0x27c>)
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80013a8:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80013aa:	230a      	movs	r3, #10
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ac:	e9cd 6408 	strd	r6, r4, [sp, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80013b0:	e9cd 430a 	strd	r4, r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013b4:	f001 fdd2 	bl	8002f5c <HAL_GPIO_Init>
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80013b8:	a907      	add	r1, sp, #28
 80013ba:	4810      	ldr	r0, [pc, #64]	; (80013fc <main+0x270>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013bc:	e9cd 6507 	strd	r6, r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c0:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80013c4:	f001 fdca 	bl	8002f5c <HAL_GPIO_Init>
  osKernelInitialize();
 80013c8:	f005 fca0 	bl	8006d0c <osKernelInitialize>
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80013cc:	4a0f      	ldr	r2, [pc, #60]	; (800140c <main+0x280>)
 80013ce:	4621      	mov	r1, r4
 80013d0:	480f      	ldr	r0, [pc, #60]	; (8001410 <main+0x284>)
 80013d2:	f005 fccf 	bl	8006d74 <osThreadNew>
 80013d6:	4b0f      	ldr	r3, [pc, #60]	; (8001414 <main+0x288>)
 80013d8:	6018      	str	r0, [r3, #0]
  osKernelStart();
 80013da:	f005 fca9 	bl	8006d30 <osKernelStart>
  while (1)
 80013de:	e7fe      	b.n	80013de <main+0x252>
 80013e0:	e000ed00 	.word	0xe000ed00
 80013e4:	30020000 	.word	0x30020000
 80013e8:	03010010 	.word	0x03010010
 80013ec:	30040000 	.word	0x30040000
 80013f0:	58024400 	.word	0x58024400
 80013f4:	58020400 	.word	0x58020400
 80013f8:	58020c00 	.word	0x58020c00
 80013fc:	58021000 	.word	0x58021000
 8001400:	58020800 	.word	0x58020800
 8001404:	58021800 	.word	0x58021800
 8001408:	58020000 	.word	0x58020000
 800140c:	08013074 	.word	0x08013074
 8001410:	0800107d 	.word	0x0800107d
 8001414:	240000dc 	.word	0x240000dc

08001418 <HAL_TIM_PeriodElapsedCallback>:
  if (htim->Instance == TIM6) {
 8001418:	4b03      	ldr	r3, [pc, #12]	; (8001428 <HAL_TIM_PeriodElapsedCallback+0x10>)
 800141a:	6802      	ldr	r2, [r0, #0]
 800141c:	429a      	cmp	r2, r3
 800141e:	d000      	beq.n	8001422 <HAL_TIM_PeriodElapsedCallback+0xa>
}
 8001420:	4770      	bx	lr
    HAL_IncTick();
 8001422:	f000 bac3 	b.w	80019ac <HAL_IncTick>
 8001426:	bf00      	nop
 8001428:	40001000 	.word	0x40001000

0800142c <Error_Handler>:
  __ASM volatile ("cpsid i" : : : "memory");
 800142c:	b672      	cpsid	i
  while (1)
 800142e:	e7fe      	b.n	800142e <Error_Handler+0x2>

08001430 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001430:	4b0f      	ldr	r3, [pc, #60]	; (8001470 <HAL_MspInit+0x40>)

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001432:	2200      	movs	r2, #0
 8001434:	210f      	movs	r1, #15
 8001436:	f06f 0001 	mvn.w	r0, #1
{
 800143a:	b510      	push	{r4, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800143c:	f8d3 40f4 	ldr.w	r4, [r3, #244]	; 0xf4
{
 8001440:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001442:	f044 0402 	orr.w	r4, r4, #2
 8001446:	f8c3 40f4 	str.w	r4, [r3, #244]	; 0xf4
 800144a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800144e:	f003 0302 	and.w	r3, r3, #2
 8001452:	9301      	str	r3, [sp, #4]
 8001454:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001456:	f000 fadd 	bl	8001a14 <HAL_NVIC_SetPriority>
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800145a:	4906      	ldr	r1, [pc, #24]	; (8001474 <HAL_MspInit+0x44>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800145c:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
  reg_value  =  (reg_value                                   |
 8001460:	4b05      	ldr	r3, [pc, #20]	; (8001478 <HAL_MspInit+0x48>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001462:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001464:	4002      	ands	r2, r0
  reg_value  =  (reg_value                                   |
 8001466:	4313      	orrs	r3, r2
  SCB->AIRCR =  reg_value;
 8001468:	60cb      	str	r3, [r1, #12]

  /* USER CODE BEGIN MspInit 1 */
  NVIC_SetPriorityGrouping(0);
  /* USER CODE END MspInit 1 */
}
 800146a:	b002      	add	sp, #8
 800146c:	bd10      	pop	{r4, pc}
 800146e:	bf00      	nop
 8001470:	58024400 	.word	0x58024400
 8001474:	e000ed00 	.word	0xe000ed00
 8001478:	05fa0000 	.word	0x05fa0000

0800147c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800147c:	b530      	push	{r4, r5, lr}
 800147e:	b0b9      	sub	sp, #228	; 0xe4
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001480:	2100      	movs	r1, #0
{
 8001482:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001484:	22c0      	movs	r2, #192	; 0xc0
 8001486:	a808      	add	r0, sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001488:	9107      	str	r1, [sp, #28]
 800148a:	e9cd 1103 	strd	r1, r1, [sp, #12]
 800148e:	e9cd 1105 	strd	r1, r1, [sp, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001492:	f010 fa67 	bl	8011964 <memset>
  if(huart->Instance==USART3)
 8001496:	4b1d      	ldr	r3, [pc, #116]	; (800150c <HAL_UART_MspInit+0x90>)
 8001498:	6822      	ldr	r2, [r4, #0]
 800149a:	429a      	cmp	r2, r3
 800149c:	d001      	beq.n	80014a2 <HAL_UART_MspInit+0x26>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800149e:	b039      	add	sp, #228	; 0xe4
 80014a0:	bd30      	pop	{r4, r5, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80014a2:	2202      	movs	r2, #2
 80014a4:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014a6:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80014a8:	e9cd 2308 	strd	r2, r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014ac:	f002 fcf6 	bl	8003e9c <HAL_RCCEx_PeriphCLKConfig>
 80014b0:	bb40      	cbnz	r0, 8001504 <HAL_UART_MspInit+0x88>
    __HAL_RCC_USART3_CLK_ENABLE();
 80014b2:	4b17      	ldr	r3, [pc, #92]	; (8001510 <HAL_UART_MspInit+0x94>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b4:	2002      	movs	r0, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b6:	2400      	movs	r4, #0
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80014b8:	f44f 7540 	mov.w	r5, #768	; 0x300
    __HAL_RCC_USART3_CLK_ENABLE();
 80014bc:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014c0:	a903      	add	r1, sp, #12
    __HAL_RCC_USART3_CLK_ENABLE();
 80014c2:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80014c6:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 80014ca:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 80014ce:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 80014d2:	9201      	str	r2, [sp, #4]
 80014d4:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014d6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80014da:	f042 0208 	orr.w	r2, r2, #8
 80014de:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80014e2:	2207      	movs	r2, #7
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e8:	9004      	str	r0, [sp, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014ea:	f003 0308 	and.w	r3, r3, #8
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014ee:	4809      	ldr	r0, [pc, #36]	; (8001514 <HAL_UART_MspInit+0x98>)
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80014f0:	9503      	str	r5, [sp, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014f2:	9302      	str	r3, [sp, #8]
 80014f4:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80014f6:	9207      	str	r2, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f8:	e9cd 4405 	strd	r4, r4, [sp, #20]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014fc:	f001 fd2e 	bl	8002f5c <HAL_GPIO_Init>
}
 8001500:	b039      	add	sp, #228	; 0xe4
 8001502:	bd30      	pop	{r4, r5, pc}
      Error_Handler();
 8001504:	f7ff ff92 	bl	800142c <Error_Handler>
 8001508:	e7d3      	b.n	80014b2 <HAL_UART_MspInit+0x36>
 800150a:	bf00      	nop
 800150c:	40004800 	.word	0x40004800
 8001510:	58024400 	.word	0x58024400
 8001514:	58020c00 	.word	0x58020c00

08001518 <HAL_InitTick>:
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001518:	280f      	cmp	r0, #15
 800151a:	d901      	bls.n	8001520 <HAL_InitTick+0x8>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
    uwTickPrio = TickPriority;
    }
  else
  {
    return HAL_ERROR;
 800151c:	2001      	movs	r0, #1
    return HAL_TIM_Base_Start_IT(&htim6);
  }

  /* Return function status */
  return HAL_ERROR;
}
 800151e:	4770      	bx	lr
{
 8001520:	b530      	push	{r4, r5, lr}
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8001522:	4601      	mov	r1, r0
{
 8001524:	b08b      	sub	sp, #44	; 0x2c
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8001526:	2200      	movs	r2, #0
 8001528:	4604      	mov	r4, r0
 800152a:	2036      	movs	r0, #54	; 0x36
 800152c:	f000 fa72 	bl	8001a14 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001530:	2036      	movs	r0, #54	; 0x36
 8001532:	f000 faad 	bl	8001a90 <HAL_NVIC_EnableIRQ>
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001536:	4b1a      	ldr	r3, [pc, #104]	; (80015a0 <HAL_InitTick+0x88>)
    uwTickPrio = TickPriority;
 8001538:	4a1a      	ldr	r2, [pc, #104]	; (80015a4 <HAL_InitTick+0x8c>)
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800153a:	4669      	mov	r1, sp
 800153c:	a802      	add	r0, sp, #8
    uwTickPrio = TickPriority;
 800153e:	6014      	str	r4, [r2, #0]
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001540:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8001544:	f042 0210 	orr.w	r2, r2, #16
 8001548:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 800154c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001550:	f003 0310 	and.w	r3, r3, #16
 8001554:	9301      	str	r3, [sp, #4]
 8001556:	9b01      	ldr	r3, [sp, #4]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001558:	f002 fb80 	bl	8003c5c <HAL_RCC_GetClockConfig>
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800155c:	9b07      	ldr	r3, [sp, #28]
 800155e:	b9bb      	cbnz	r3, 8001590 <HAL_InitTick+0x78>
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001560:	f002 fb58 	bl	8003c14 <HAL_RCC_GetPCLK1Freq>
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001564:	4b10      	ldr	r3, [pc, #64]	; (80015a8 <HAL_InitTick+0x90>)
  htim6.Init.ClockDivision = 0;
 8001566:	2200      	movs	r2, #0
  htim6.Instance = TIM6;
 8001568:	4c10      	ldr	r4, [pc, #64]	; (80015ac <HAL_InitTick+0x94>)
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800156a:	fba3 1300 	umull	r1, r3, r3, r0
  htim6.Instance = TIM6;
 800156e:	4d10      	ldr	r5, [pc, #64]	; (80015b0 <HAL_InitTick+0x98>)
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001570:	f240 31e7 	movw	r1, #999	; 0x3e7
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001574:	4620      	mov	r0, r4
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001576:	0c9b      	lsrs	r3, r3, #18
  htim6.Instance = TIM6;
 8001578:	6025      	str	r5, [r4, #0]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800157a:	60a2      	str	r2, [r4, #8]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800157c:	3b01      	subs	r3, #1
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800157e:	e9c4 1203 	strd	r1, r2, [r4, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001582:	6063      	str	r3, [r4, #4]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001584:	f003 fd9e 	bl	80050c4 <HAL_TIM_Base_Init>
 8001588:	b130      	cbz	r0, 8001598 <HAL_InitTick+0x80>
    return HAL_ERROR;
 800158a:	2001      	movs	r0, #1
}
 800158c:	b00b      	add	sp, #44	; 0x2c
 800158e:	bd30      	pop	{r4, r5, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001590:	f002 fb40 	bl	8003c14 <HAL_RCC_GetPCLK1Freq>
 8001594:	0040      	lsls	r0, r0, #1
 8001596:	e7e5      	b.n	8001564 <HAL_InitTick+0x4c>
    return HAL_TIM_Base_Start_IT(&htim6);
 8001598:	4620      	mov	r0, r4
 800159a:	f003 fbeb 	bl	8004d74 <HAL_TIM_Base_Start_IT>
 800159e:	e7f5      	b.n	800158c <HAL_InitTick+0x74>
 80015a0:	58024400 	.word	0x58024400
 80015a4:	2400000c 	.word	0x2400000c
 80015a8:	431bde83 	.word	0x431bde83
 80015ac:	240000e0 	.word	0x240000e0
 80015b0:	40001000 	.word	0x40001000

080015b4 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015b4:	e7fe      	b.n	80015b4 <NMI_Handler>
 80015b6:	bf00      	nop

080015b8 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015b8:	e7fe      	b.n	80015b8 <HardFault_Handler>
 80015ba:	bf00      	nop

080015bc <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015bc:	e7fe      	b.n	80015bc <MemManage_Handler>
 80015be:	bf00      	nop

080015c0 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015c0:	e7fe      	b.n	80015c0 <BusFault_Handler>
 80015c2:	bf00      	nop

080015c4 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015c4:	e7fe      	b.n	80015c4 <UsageFault_Handler>
 80015c6:	bf00      	nop

080015c8 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop

080015cc <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80015cc:	4801      	ldr	r0, [pc, #4]	; (80015d4 <TIM6_DAC_IRQHandler+0x8>)
 80015ce:	f003 bc35 	b.w	8004e3c <HAL_TIM_IRQHandler>
 80015d2:	bf00      	nop
 80015d4:	240000e0 	.word	0x240000e0

080015d8 <ETH_IRQHandler>:
void ETH_IRQHandler(void)
{
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80015d8:	4801      	ldr	r0, [pc, #4]	; (80015e0 <ETH_IRQHandler+0x8>)
 80015da:	f001 b971 	b.w	80028c0 <HAL_ETH_IRQHandler>
 80015de:	bf00      	nop
 80015e0:	24000208 	.word	0x24000208

080015e4 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 80015e4:	2001      	movs	r0, #1
 80015e6:	4770      	bx	lr

080015e8 <_kill>:

int _kill(int pid, int sig)
{
	errno = EINVAL;
 80015e8:	4b02      	ldr	r3, [pc, #8]	; (80015f4 <_kill+0xc>)
 80015ea:	2216      	movs	r2, #22
	return -1;
}
 80015ec:	f04f 30ff 	mov.w	r0, #4294967295
	errno = EINVAL;
 80015f0:	601a      	str	r2, [r3, #0]
}
 80015f2:	4770      	bx	lr
 80015f4:	24011cf4 	.word	0x24011cf4

080015f8 <_exit>:
	errno = EINVAL;
 80015f8:	4b01      	ldr	r3, [pc, #4]	; (8001600 <_exit+0x8>)
 80015fa:	2216      	movs	r2, #22
 80015fc:	601a      	str	r2, [r3, #0]

void _exit (int status)
{
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 80015fe:	e7fe      	b.n	80015fe <_exit+0x6>
 8001600:	24011cf4 	.word	0x24011cf4

08001604 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001604:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001606:	1e16      	subs	r6, r2, #0
 8001608:	dd07      	ble.n	800161a <_read+0x16>
 800160a:	460c      	mov	r4, r1
 800160c:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 800160e:	f3af 8000 	nop.w
 8001612:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001616:	42a5      	cmp	r5, r4
 8001618:	d1f9      	bne.n	800160e <_read+0xa>
	}

return len;
}
 800161a:	4630      	mov	r0, r6
 800161c:	bd70      	pop	{r4, r5, r6, pc}
 800161e:	bf00      	nop

08001620 <_close>:
}

int _close(int file)
{
	return -1;
}
 8001620:	f04f 30ff 	mov.w	r0, #4294967295
 8001624:	4770      	bx	lr
 8001626:	bf00      	nop

08001628 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8001628:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 800162c:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 800162e:	604b      	str	r3, [r1, #4]
}
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop

08001634 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8001634:	2001      	movs	r0, #1
 8001636:	4770      	bx	lr

08001638 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8001638:	2000      	movs	r0, #0
 800163a:	4770      	bx	lr

0800163c <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800163c:	490d      	ldr	r1, [pc, #52]	; (8001674 <_sbrk+0x38>)
{
 800163e:	4603      	mov	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001640:	4a0d      	ldr	r2, [pc, #52]	; (8001678 <_sbrk+0x3c>)
  if (NULL == __sbrk_heap_end)
 8001642:	6808      	ldr	r0, [r1, #0]
{
 8001644:	b410      	push	{r4}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001646:	4c0d      	ldr	r4, [pc, #52]	; (800167c <_sbrk+0x40>)
 8001648:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 800164a:	b170      	cbz	r0, 800166a <_sbrk+0x2e>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800164c:	4403      	add	r3, r0
 800164e:	4293      	cmp	r3, r2
 8001650:	d803      	bhi.n	800165a <_sbrk+0x1e>

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8001652:	f85d 4b04 	ldr.w	r4, [sp], #4
  __sbrk_heap_end += incr;
 8001656:	600b      	str	r3, [r1, #0]
}
 8001658:	4770      	bx	lr
    errno = ENOMEM;
 800165a:	4b09      	ldr	r3, [pc, #36]	; (8001680 <_sbrk+0x44>)
 800165c:	220c      	movs	r2, #12
    return (void *)-1;
 800165e:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001662:	f85d 4b04 	ldr.w	r4, [sp], #4
    errno = ENOMEM;
 8001666:	601a      	str	r2, [r3, #0]
}
 8001668:	4770      	bx	lr
    __sbrk_heap_end = &_end;
 800166a:	4c06      	ldr	r4, [pc, #24]	; (8001684 <_sbrk+0x48>)
 800166c:	4620      	mov	r0, r4
 800166e:	600c      	str	r4, [r1, #0]
 8001670:	e7ec      	b.n	800164c <_sbrk+0x10>
 8001672:	bf00      	nop
 8001674:	2400012c 	.word	0x2400012c
 8001678:	24080000 	.word	0x24080000
 800167c:	00000400 	.word	0x00000400
 8001680:	24011cf4 	.word	0x24011cf4
 8001684:	24011d08 	.word	0x24011d08

08001688 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001688:	4927      	ldr	r1, [pc, #156]	; (8001728 <SystemInit+0xa0>)
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800168a:	4a28      	ldr	r2, [pc, #160]	; (800172c <SystemInit+0xa4>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800168c:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001690:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
{
 8001694:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001696:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800169a:	6813      	ldr	r3, [r2, #0]
 800169c:	f003 030f 	and.w	r3, r3, #15
 80016a0:	2b06      	cmp	r3, #6
 80016a2:	d805      	bhi.n	80016b0 <SystemInit+0x28>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80016a4:	6813      	ldr	r3, [r2, #0]
 80016a6:	f023 030f 	bic.w	r3, r3, #15
 80016aa:	f043 0307 	orr.w	r3, r3, #7
 80016ae:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80016b0:	4b1f      	ldr	r3, [pc, #124]	; (8001730 <SystemInit+0xa8>)

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80016b2:	2400      	movs	r4, #0

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80016b4:	4a1f      	ldr	r2, [pc, #124]	; (8001734 <SystemInit+0xac>)
  RCC->CR |= RCC_CR_HSION;
 80016b6:	6819      	ldr	r1, [r3, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80016b8:	481c      	ldr	r0, [pc, #112]	; (800172c <SystemInit+0xa4>)
  RCC->CR |= RCC_CR_HSION;
 80016ba:	f041 0101 	orr.w	r1, r1, #1
 80016be:	6019      	str	r1, [r3, #0]
  RCC->CFGR = 0x00000000;
 80016c0:	611c      	str	r4, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
 80016c2:	6819      	ldr	r1, [r3, #0]
 80016c4:	400a      	ands	r2, r1
 80016c6:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80016c8:	6803      	ldr	r3, [r0, #0]
 80016ca:	071b      	lsls	r3, r3, #28
 80016cc:	d505      	bpl.n	80016da <SystemInit+0x52>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80016ce:	6803      	ldr	r3, [r0, #0]
 80016d0:	f023 030f 	bic.w	r3, r3, #15
 80016d4:	f043 0307 	orr.w	r3, r3, #7
 80016d8:	6003      	str	r3, [r0, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80016da:	4b15      	ldr	r3, [pc, #84]	; (8001730 <SystemInit+0xa8>)
 80016dc:	2200      	movs	r2, #0
  RCC->PLLCKSELR = 0x02020200;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80016de:	4916      	ldr	r1, [pc, #88]	; (8001738 <SystemInit+0xb0>)
  RCC->PLLCKSELR = 0x02020200;
 80016e0:	4c16      	ldr	r4, [pc, #88]	; (800173c <SystemInit+0xb4>)
  RCC->PLLCFGR = 0x01FF0000;
 80016e2:	4817      	ldr	r0, [pc, #92]	; (8001740 <SystemInit+0xb8>)
  RCC->D1CFGR = 0x00000000;
 80016e4:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 80016e6:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 80016e8:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 80016ea:	629c      	str	r4, [r3, #40]	; 0x28
  RCC->PLLCFGR = 0x01FF0000;
 80016ec:	62d8      	str	r0, [r3, #44]	; 0x2c
  RCC->PLL1DIVR = 0x01010280;
 80016ee:	6319      	str	r1, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80016f0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80016f2:	6399      	str	r1, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80016f4:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80016f6:	6419      	str	r1, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80016f8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80016fa:	6818      	ldr	r0, [r3, #0]
  /* Disable all interrupts */
  RCC->CIER = 0x00000000;

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80016fc:	4c11      	ldr	r4, [pc, #68]	; (8001744 <SystemInit+0xbc>)
  RCC->CR &= 0xFFFBFFFFU;
 80016fe:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001702:	4911      	ldr	r1, [pc, #68]	; (8001748 <SystemInit+0xc0>)
  RCC->CR &= 0xFFFBFFFFU;
 8001704:	6018      	str	r0, [r3, #0]
  RCC->CIER = 0x00000000;
 8001706:	661a      	str	r2, [r3, #96]	; 0x60
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001708:	6823      	ldr	r3, [r4, #0]
 800170a:	4019      	ands	r1, r3
 800170c:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8001710:	d203      	bcs.n	800171a <SystemInit+0x92>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001712:	4b0e      	ldr	r3, [pc, #56]	; (800174c <SystemInit+0xc4>)
 8001714:	2201      	movs	r2, #1
 8001716:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800171a:	4b0d      	ldr	r3, [pc, #52]	; (8001750 <SystemInit+0xc8>)
 800171c:	f243 02d2 	movw	r2, #12498	; 0x30d2
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001720:	f85d 4b04 	ldr.w	r4, [sp], #4
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001724:	601a      	str	r2, [r3, #0]
}
 8001726:	4770      	bx	lr
 8001728:	e000ed00 	.word	0xe000ed00
 800172c:	52002000 	.word	0x52002000
 8001730:	58024400 	.word	0x58024400
 8001734:	eaf6ed7f 	.word	0xeaf6ed7f
 8001738:	01010280 	.word	0x01010280
 800173c:	02020200 	.word	0x02020200
 8001740:	01ff0000 	.word	0x01ff0000
 8001744:	5c001000 	.word	0x5c001000
 8001748:	ffff0000 	.word	0xffff0000
 800174c:	51008000 	.word	0x51008000
 8001750:	52004000 	.word	0x52004000

08001754 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001754:	f8df d034 	ldr.w	sp, [pc, #52]	; 800178c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001758:	f7ff ff96 	bl	8001688 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800175c:	480c      	ldr	r0, [pc, #48]	; (8001790 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800175e:	490d      	ldr	r1, [pc, #52]	; (8001794 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001760:	4a0d      	ldr	r2, [pc, #52]	; (8001798 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001762:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001764:	e002      	b.n	800176c <LoopCopyDataInit>

08001766 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001766:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001768:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800176a:	3304      	adds	r3, #4

0800176c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800176c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800176e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001770:	d3f9      	bcc.n	8001766 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001772:	4a0a      	ldr	r2, [pc, #40]	; (800179c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001774:	4c0a      	ldr	r4, [pc, #40]	; (80017a0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001776:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001778:	e001      	b.n	800177e <LoopFillZerobss>

0800177a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800177a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800177c:	3204      	adds	r2, #4

0800177e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800177e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001780:	d3fb      	bcc.n	800177a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001782:	f010 f9a5 	bl	8011ad0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001786:	f7ff fd01 	bl	800118c <main>
  bx  lr
 800178a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800178c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001790:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001794:	240000bc 	.word	0x240000bc
  ldr r2, =_sidata
 8001798:	080155cc 	.word	0x080155cc
  ldr r2, =_sbss
 800179c:	240000bc 	.word	0x240000bc
  ldr r4, =_ebss
 80017a0:	24011d04 	.word	0x24011d04

080017a4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017a4:	e7fe      	b.n	80017a4 <ADC3_IRQHandler>
	...

080017a8 <LAN8742_RegisterBusIO>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 80017a8:	b188      	cbz	r0, 80017ce <LAN8742_RegisterBusIO+0x26>
 80017aa:	68ca      	ldr	r2, [r1, #12]
 80017ac:	b17a      	cbz	r2, 80017ce <LAN8742_RegisterBusIO+0x26>
{
 80017ae:	b430      	push	{r4, r5}
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 80017b0:	688c      	ldr	r4, [r1, #8]
 80017b2:	b17c      	cbz	r4, 80017d4 <LAN8742_RegisterBusIO+0x2c>
 80017b4:	690d      	ldr	r5, [r1, #16]
 80017b6:	b16d      	cbz	r5, 80017d4 <LAN8742_RegisterBusIO+0x2c>
 80017b8:	4603      	mov	r3, r0
  {
    return LAN8742_STATUS_ERROR;
  }
  
  pObj->IO.Init = ioctx->Init;
 80017ba:	6808      	ldr	r0, [r1, #0]
  pObj->IO.DeInit = ioctx->DeInit;
 80017bc:	6849      	ldr	r1, [r1, #4]
  pObj->IO.Init = ioctx->Init;
 80017be:	6098      	str	r0, [r3, #8]
  pObj->IO.ReadReg = ioctx->ReadReg;
  pObj->IO.WriteReg = ioctx->WriteReg;
  pObj->IO.GetTick = ioctx->GetTick;
  
  return LAN8742_STATUS_OK;
 80017c0:	2000      	movs	r0, #0
  pObj->IO.ReadReg = ioctx->ReadReg;
 80017c2:	615a      	str	r2, [r3, #20]
  pObj->IO.GetTick = ioctx->GetTick;
 80017c4:	619d      	str	r5, [r3, #24]
  pObj->IO.WriteReg = ioctx->WriteReg;
 80017c6:	e9c3 1403 	strd	r1, r4, [r3, #12]
}
 80017ca:	bc30      	pop	{r4, r5}
 80017cc:	4770      	bx	lr
    return LAN8742_STATUS_ERROR;
 80017ce:	f04f 30ff 	mov.w	r0, #4294967295
}
 80017d2:	4770      	bx	lr
    return LAN8742_STATUS_ERROR;
 80017d4:	f04f 30ff 	mov.w	r0, #4294967295
 80017d8:	e7f7      	b.n	80017ca <LAN8742_RegisterBusIO+0x22>
 80017da:	bf00      	nop

080017dc <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 80017dc:	b570      	push	{r4, r5, r6, lr}
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 80017de:	2300      	movs	r3, #0
 {
 80017e0:	b082      	sub	sp, #8
   int32_t status = LAN8742_STATUS_OK;
   
   if(pObj->Is_Initialized == 0)
 80017e2:	6844      	ldr	r4, [r0, #4]
 {
 80017e4:	4605      	mov	r5, r0
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 80017e6:	9301      	str	r3, [sp, #4]
   if(pObj->Is_Initialized == 0)
 80017e8:	2c00      	cmp	r4, #0
 80017ea:	d146      	bne.n	800187a <LAN8742_Init+0x9e>
   {
     if(pObj->IO.Init != 0)
 80017ec:	6883      	ldr	r3, [r0, #8]
 80017ee:	b103      	cbz	r3, 80017f2 <LAN8742_Init+0x16>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 80017f0:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 80017f2:	2320      	movs	r3, #32
   int32_t status = LAN8742_STATUS_OK;
 80017f4:	2600      	movs	r6, #0
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 80017f6:	602b      	str	r3, [r5, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80017f8:	e007      	b.n	800180a <LAN8742_Init+0x2e>
         /* Can't read from this device address 
            continue with next address */
         continue;
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 80017fa:	9b01      	ldr	r3, [sp, #4]
 80017fc:	f003 031f 	and.w	r3, r3, #31
 8001800:	42a3      	cmp	r3, r4
 8001802:	d016      	beq.n	8001832 <LAN8742_Init+0x56>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001804:	3401      	adds	r4, #1
 8001806:	2c20      	cmp	r4, #32
 8001808:	d00b      	beq.n	8001822 <LAN8742_Init+0x46>
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 800180a:	4620      	mov	r0, r4
 800180c:	696b      	ldr	r3, [r5, #20]
 800180e:	aa01      	add	r2, sp, #4
 8001810:	2112      	movs	r1, #18
 8001812:	4798      	blx	r3
 8001814:	2800      	cmp	r0, #0
 8001816:	daf0      	bge.n	80017fa <LAN8742_Init+0x1e>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001818:	3401      	adds	r4, #1
         status = LAN8742_STATUS_READ_ERROR;
 800181a:	f06f 0604 	mvn.w	r6, #4
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 800181e:	2c20      	cmp	r4, #32
 8001820:	d1f3      	bne.n	800180a <LAN8742_Init+0x2e>
         status = LAN8742_STATUS_OK;
         break;
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8001822:	682c      	ldr	r4, [r5, #0]
 8001824:	2c1f      	cmp	r4, #31
 8001826:	d937      	bls.n	8001898 <LAN8742_Init+0xbc>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8001828:	f06f 0602 	mvn.w	r6, #2
     }
     pObj->Is_Initialized = 1;
   }
   
   return status;
 }
 800182c:	4630      	mov	r0, r6
 800182e:	b002      	add	sp, #8
 8001830:	bd70      	pop	{r4, r5, r6, pc}
         pObj->DevAddr = addr;
 8001832:	602c      	str	r4, [r5, #0]
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8001834:	692b      	ldr	r3, [r5, #16]
 8001836:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800183a:	4620      	mov	r0, r4
 800183c:	2100      	movs	r1, #0
 800183e:	4798      	blx	r3
 8001840:	2800      	cmp	r0, #0
 8001842:	db2c      	blt.n	800189e <LAN8742_Init+0xc2>
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8001844:	696b      	ldr	r3, [r5, #20]
 8001846:	aa01      	add	r2, sp, #4
 8001848:	2100      	movs	r1, #0
 800184a:	6828      	ldr	r0, [r5, #0]
 800184c:	4798      	blx	r3
 800184e:	2800      	cmp	r0, #0
 8001850:	db2b      	blt.n	80018aa <LAN8742_Init+0xce>
           tickstart = pObj->IO.GetTick();
 8001852:	69ab      	ldr	r3, [r5, #24]
 8001854:	4798      	blx	r3
 8001856:	4604      	mov	r4, r0
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001858:	e00c      	b.n	8001874 <LAN8742_Init+0x98>
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 800185a:	69ab      	ldr	r3, [r5, #24]
 800185c:	4798      	blx	r3
 800185e:	1b00      	subs	r0, r0, r4
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8001860:	aa01      	add	r2, sp, #4
 8001862:	2100      	movs	r1, #0
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8001864:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8001868:	d81c      	bhi.n	80018a4 <LAN8742_Init+0xc8>
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 800186a:	696b      	ldr	r3, [r5, #20]
 800186c:	6828      	ldr	r0, [r5, #0]
 800186e:	4798      	blx	r3
 8001870:	2800      	cmp	r0, #0
 8001872:	db1a      	blt.n	80018aa <LAN8742_Init+0xce>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001874:	9b01      	ldr	r3, [sp, #4]
 8001876:	041b      	lsls	r3, r3, #16
 8001878:	d4ef      	bmi.n	800185a <LAN8742_Init+0x7e>
     tickstart =  pObj->IO.GetTick();
 800187a:	69ab      	ldr	r3, [r5, #24]
 800187c:	4798      	blx	r3
 800187e:	4604      	mov	r4, r0
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8001880:	69ab      	ldr	r3, [r5, #24]
 8001882:	4798      	blx	r3
 8001884:	1b03      	subs	r3, r0, r4
 8001886:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800188a:	d9f9      	bls.n	8001880 <LAN8742_Init+0xa4>
     pObj->Is_Initialized = 1;
 800188c:	2301      	movs	r3, #1
 800188e:	2600      	movs	r6, #0
 8001890:	606b      	str	r3, [r5, #4]
 }
 8001892:	4630      	mov	r0, r6
 8001894:	b002      	add	sp, #8
 8001896:	bd70      	pop	{r4, r5, r6, pc}
     if(status == LAN8742_STATUS_OK)
 8001898:	2e00      	cmp	r6, #0
 800189a:	d1fa      	bne.n	8001892 <LAN8742_Init+0xb6>
 800189c:	e7ca      	b.n	8001834 <LAN8742_Init+0x58>
         status = LAN8742_STATUS_WRITE_ERROR;
 800189e:	f06f 0603 	mvn.w	r6, #3
 80018a2:	e7f6      	b.n	8001892 <LAN8742_Init+0xb6>
               status = LAN8742_STATUS_RESET_TIMEOUT;
 80018a4:	f06f 0601 	mvn.w	r6, #1
   return status;
 80018a8:	e7f3      	b.n	8001892 <LAN8742_Init+0xb6>
           status = LAN8742_STATUS_READ_ERROR;
 80018aa:	f06f 0604 	mvn.w	r6, #4
 80018ae:	e7f0      	b.n	8001892 <LAN8742_Init+0xb6>

080018b0 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 80018b0:	b530      	push	{r4, r5, lr}
  uint32_t readval = 0;
 80018b2:	2500      	movs	r5, #0
{
 80018b4:	b083      	sub	sp, #12
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80018b6:	6943      	ldr	r3, [r0, #20]
{
 80018b8:	4604      	mov	r4, r0
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80018ba:	aa01      	add	r2, sp, #4
 80018bc:	2101      	movs	r1, #1
 80018be:	6800      	ldr	r0, [r0, #0]
  uint32_t readval = 0;
 80018c0:	9501      	str	r5, [sp, #4]
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80018c2:	4798      	blx	r3
 80018c4:	42a8      	cmp	r0, r5
 80018c6:	db3d      	blt.n	8001944 <LAN8742_GetLinkState+0x94>
  {
    return LAN8742_STATUS_READ_ERROR;
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80018c8:	6963      	ldr	r3, [r4, #20]
 80018ca:	aa01      	add	r2, sp, #4
 80018cc:	2101      	movs	r1, #1
 80018ce:	6820      	ldr	r0, [r4, #0]
 80018d0:	4798      	blx	r3
 80018d2:	2800      	cmp	r0, #0
 80018d4:	db36      	blt.n	8001944 <LAN8742_GetLinkState+0x94>
  {
    return LAN8742_STATUS_READ_ERROR;
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 80018d6:	9b01      	ldr	r3, [sp, #4]
 80018d8:	075b      	lsls	r3, r3, #29
 80018da:	d52a      	bpl.n	8001932 <LAN8742_GetLinkState+0x82>
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 80018dc:	6963      	ldr	r3, [r4, #20]
 80018de:	aa01      	add	r2, sp, #4
 80018e0:	4629      	mov	r1, r5
 80018e2:	6820      	ldr	r0, [r4, #0]
 80018e4:	4798      	blx	r3
 80018e6:	2800      	cmp	r0, #0
 80018e8:	db2c      	blt.n	8001944 <LAN8742_GetLinkState+0x94>
  {
    return LAN8742_STATUS_READ_ERROR;
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 80018ea:	9b01      	ldr	r3, [sp, #4]
 80018ec:	04dd      	lsls	r5, r3, #19
 80018ee:	d514      	bpl.n	800191a <LAN8742_GetLinkState+0x6a>
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 80018f0:	6963      	ldr	r3, [r4, #20]
 80018f2:	aa01      	add	r2, sp, #4
 80018f4:	211f      	movs	r1, #31
 80018f6:	6820      	ldr	r0, [r4, #0]
 80018f8:	4798      	blx	r3
 80018fa:	2800      	cmp	r0, #0
 80018fc:	db22      	blt.n	8001944 <LAN8742_GetLinkState+0x94>
    {
      return LAN8742_STATUS_READ_ERROR;
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 80018fe:	9b01      	ldr	r3, [sp, #4]
 8001900:	04da      	lsls	r2, r3, #19
 8001902:	d51d      	bpl.n	8001940 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8001904:	f003 031c 	and.w	r3, r3, #28
 8001908:	2b18      	cmp	r3, #24
 800190a:	d017      	beq.n	800193c <LAN8742_GetLinkState+0x8c>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 800190c:	2b08      	cmp	r3, #8
 800190e:	d013      	beq.n	8001938 <LAN8742_GetLinkState+0x88>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8001910:	2b14      	cmp	r3, #20
 8001912:	d10b      	bne.n	800192c <LAN8742_GetLinkState+0x7c>
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001914:	2004      	movs	r0, #4
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
    }				
  }
}
 8001916:	b003      	add	sp, #12
 8001918:	bd30      	pop	{r4, r5, pc}
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 800191a:	f403 5204 	and.w	r2, r3, #8448	; 0x2100
 800191e:	f5b2 5f04 	cmp.w	r2, #8448	; 0x2100
 8001922:	d00b      	beq.n	800193c <LAN8742_GetLinkState+0x8c>
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8001924:	0498      	lsls	r0, r3, #18
 8001926:	d407      	bmi.n	8001938 <LAN8742_GetLinkState+0x88>
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8001928:	05d9      	lsls	r1, r3, #23
 800192a:	d4f3      	bmi.n	8001914 <LAN8742_GetLinkState+0x64>
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800192c:	2005      	movs	r0, #5
}
 800192e:	b003      	add	sp, #12
 8001930:	bd30      	pop	{r4, r5, pc}
    return LAN8742_STATUS_LINK_DOWN;    
 8001932:	2001      	movs	r0, #1
}
 8001934:	b003      	add	sp, #12
 8001936:	bd30      	pop	{r4, r5, pc}
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001938:	2003      	movs	r0, #3
 800193a:	e7f8      	b.n	800192e <LAN8742_GetLinkState+0x7e>
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800193c:	2002      	movs	r0, #2
 800193e:	e7f6      	b.n	800192e <LAN8742_GetLinkState+0x7e>
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8001940:	2006      	movs	r0, #6
 8001942:	e7f4      	b.n	800192e <LAN8742_GetLinkState+0x7e>
    return LAN8742_STATUS_READ_ERROR;
 8001944:	f06f 0004 	mvn.w	r0, #4
 8001948:	e7f1      	b.n	800192e <LAN8742_GetLinkState+0x7e>
 800194a:	bf00      	nop

0800194c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800194c:	b510      	push	{r4, lr}
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800194e:	2003      	movs	r0, #3
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001950:	4c12      	ldr	r4, [pc, #72]	; (800199c <HAL_Init+0x50>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001952:	f000 f84d 	bl	80019f0 <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001956:	f001 ffd3 	bl	8003900 <HAL_RCC_GetSysClockFreq>
 800195a:	4b11      	ldr	r3, [pc, #68]	; (80019a0 <HAL_Init+0x54>)
 800195c:	4911      	ldr	r1, [pc, #68]	; (80019a4 <HAL_Init+0x58>)
 800195e:	699a      	ldr	r2, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001960:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001962:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001966:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800196a:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800196c:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800196e:	f002 021f 	and.w	r2, r2, #31
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001972:	490d      	ldr	r1, [pc, #52]	; (80019a8 <HAL_Init+0x5c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001974:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001978:	40d0      	lsrs	r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800197a:	fa20 f303 	lsr.w	r3, r0, r3
  SystemCoreClock = common_system_clock;
 800197e:	6008      	str	r0, [r1, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001980:	200f      	movs	r0, #15
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001982:	6023      	str	r3, [r4, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001984:	f7ff fdc8 	bl	8001518 <HAL_InitTick>
 8001988:	b110      	cbz	r0, 8001990 <HAL_Init+0x44>
  {
    return HAL_ERROR;
 800198a:	2401      	movs	r4, #1
  /* Init the low level hardware */
  HAL_MspInit();

  /* Return function status */
  return HAL_OK;
}
 800198c:	4620      	mov	r0, r4
 800198e:	bd10      	pop	{r4, pc}
 8001990:	4604      	mov	r4, r0
  HAL_MspInit();
 8001992:	f7ff fd4d 	bl	8001430 <HAL_MspInit>
}
 8001996:	4620      	mov	r0, r4
 8001998:	bd10      	pop	{r4, pc}
 800199a:	bf00      	nop
 800199c:	24000004 	.word	0x24000004
 80019a0:	58024400 	.word	0x58024400
 80019a4:	08013098 	.word	0x08013098
 80019a8:	24000000 	.word	0x24000000

080019ac <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 80019ac:	4a03      	ldr	r2, [pc, #12]	; (80019bc <HAL_IncTick+0x10>)
 80019ae:	4b04      	ldr	r3, [pc, #16]	; (80019c0 <HAL_IncTick+0x14>)
 80019b0:	6811      	ldr	r1, [r2, #0]
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	440b      	add	r3, r1
 80019b6:	6013      	str	r3, [r2, #0]
}
 80019b8:	4770      	bx	lr
 80019ba:	bf00      	nop
 80019bc:	24000130 	.word	0x24000130
 80019c0:	24000008 	.word	0x24000008

080019c4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80019c4:	4b01      	ldr	r3, [pc, #4]	; (80019cc <HAL_GetTick+0x8>)
 80019c6:	6818      	ldr	r0, [r3, #0]
}
 80019c8:	4770      	bx	lr
 80019ca:	bf00      	nop
 80019cc:	24000130 	.word	0x24000130

080019d0 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 80019d0:	4b01      	ldr	r3, [pc, #4]	; (80019d8 <HAL_GetREVID+0x8>)
 80019d2:	6818      	ldr	r0, [r3, #0]
}
 80019d4:	0c00      	lsrs	r0, r0, #16
 80019d6:	4770      	bx	lr
 80019d8:	5c001000 	.word	0x5c001000

080019dc <HAL_SYSCFG_ETHInterfaceSelect>:
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80019dc:	4a03      	ldr	r2, [pc, #12]	; (80019ec <HAL_SYSCFG_ETHInterfaceSelect+0x10>)
 80019de:	6853      	ldr	r3, [r2, #4]
 80019e0:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 80019e4:	4318      	orrs	r0, r3
 80019e6:	6050      	str	r0, [r2, #4]
}
 80019e8:	4770      	bx	lr
 80019ea:	bf00      	nop
 80019ec:	58000400 	.word	0x58000400

080019f0 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019f0:	4906      	ldr	r1, [pc, #24]	; (8001a0c <HAL_NVIC_SetPriorityGrouping+0x1c>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019f2:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019f6:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
 80019f8:	4b05      	ldr	r3, [pc, #20]	; (8001a10 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019fa:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019fc:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a00:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a04:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
 8001a06:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001a08:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001a0a:	4770      	bx	lr
 8001a0c:	e000ed00 	.word	0xe000ed00
 8001a10:	05fa0000 	.word	0x05fa0000

08001a14 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a14:	4b1b      	ldr	r3, [pc, #108]	; (8001a84 <HAL_NVIC_SetPriority+0x70>)
 8001a16:	68db      	ldr	r3, [r3, #12]
 8001a18:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a1c:	b500      	push	{lr}
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a1e:	f1c3 0e07 	rsb	lr, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a22:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a26:	f1be 0f04 	cmp.w	lr, #4
 8001a2a:	bf28      	it	cs
 8001a2c:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a30:	f1bc 0f06 	cmp.w	ip, #6
 8001a34:	d91a      	bls.n	8001a6c <HAL_NVIC_SetPriority+0x58>
 8001a36:	3b03      	subs	r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a38:	f04f 3cff 	mov.w	ip, #4294967295
 8001a3c:	fa0c fc03 	lsl.w	ip, ip, r3
 8001a40:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a44:	f04f 3cff 	mov.w	ip, #4294967295
  if ((int32_t)(IRQn) >= 0)
 8001a48:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a4a:	fa0c fc0e 	lsl.w	ip, ip, lr
 8001a4e:	ea21 010c 	bic.w	r1, r1, ip
 8001a52:	fa01 f103 	lsl.w	r1, r1, r3
 8001a56:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8001a5a:	db0a      	blt.n	8001a72 <HAL_NVIC_SetPriority+0x5e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a5c:	0109      	lsls	r1, r1, #4
 8001a5e:	4b0a      	ldr	r3, [pc, #40]	; (8001a88 <HAL_NVIC_SetPriority+0x74>)
 8001a60:	b2c9      	uxtb	r1, r1
 8001a62:	4403      	add	r3, r0
 8001a64:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001a68:	f85d fb04 	ldr.w	pc, [sp], #4
 8001a6c:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a6e:	4613      	mov	r3, r2
 8001a70:	e7e8      	b.n	8001a44 <HAL_NVIC_SetPriority+0x30>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a72:	f000 000f 	and.w	r0, r0, #15
 8001a76:	0109      	lsls	r1, r1, #4
 8001a78:	4b04      	ldr	r3, [pc, #16]	; (8001a8c <HAL_NVIC_SetPriority+0x78>)
 8001a7a:	b2c9      	uxtb	r1, r1
 8001a7c:	4403      	add	r3, r0
 8001a7e:	7619      	strb	r1, [r3, #24]
 8001a80:	f85d fb04 	ldr.w	pc, [sp], #4
 8001a84:	e000ed00 	.word	0xe000ed00
 8001a88:	e000e100 	.word	0xe000e100
 8001a8c:	e000ecfc 	.word	0xe000ecfc

08001a90 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001a90:	2800      	cmp	r0, #0
 8001a92:	db07      	blt.n	8001aa4 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a94:	2301      	movs	r3, #1
 8001a96:	f000 011f 	and.w	r1, r0, #31
 8001a9a:	4a03      	ldr	r2, [pc, #12]	; (8001aa8 <HAL_NVIC_EnableIRQ+0x18>)
 8001a9c:	0940      	lsrs	r0, r0, #5
 8001a9e:	408b      	lsls	r3, r1
 8001aa0:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001aa4:	4770      	bx	lr
 8001aa6:	bf00      	nop
 8001aa8:	e000e100 	.word	0xe000e100

08001aac <HAL_MPU_Disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001aac:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001ab0:	4b04      	ldr	r3, [pc, #16]	; (8001ac4 <HAL_MPU_Disable+0x18>)

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001ab2:	2100      	movs	r1, #0
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001ab4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ab6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001aba:	625a      	str	r2, [r3, #36]	; 0x24
  MPU->CTRL = 0;
 8001abc:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
}
 8001ac0:	4770      	bx	lr
 8001ac2:	bf00      	nop
 8001ac4:	e000ed00 	.word	0xe000ed00

08001ac8 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001ac8:	4b06      	ldr	r3, [pc, #24]	; (8001ae4 <HAL_MPU_Enable+0x1c>)
 8001aca:	f040 0001 	orr.w	r0, r0, #1
 8001ace:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001ad2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ad4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001ad8:	625a      	str	r2, [r3, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001ada:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001ade:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001ae2:	4770      	bx	lr
 8001ae4:	e000ed00 	.word	0xe000ed00

08001ae8 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001ae8:	4a17      	ldr	r2, [pc, #92]	; (8001b48 <HAL_MPU_ConfigRegion+0x60>)
 8001aea:	7843      	ldrb	r3, [r0, #1]
 8001aec:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  if ((MPU_Init->Enable) != 0UL)
 8001af0:	7801      	ldrb	r1, [r0, #0]
 8001af2:	b321      	cbz	r1, 8001b3e <HAL_MPU_ConfigRegion+0x56>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8001af4:	6843      	ldr	r3, [r0, #4]
{
 8001af6:	b500      	push	{lr}
    MPU->RBAR = MPU_Init->BaseAddress;
 8001af8:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001afc:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001afe:	f890 c00c 	ldrb.w	ip, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001b02:	061b      	lsls	r3, r3, #24
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001b04:	f890 e00f 	ldrb.w	lr, [r0, #15]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001b08:	ea43 730c 	orr.w	r3, r3, ip, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001b0c:	f890 c00a 	ldrb.w	ip, [r0, #10]
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001b10:	430b      	orrs	r3, r1
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001b12:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001b14:	ea43 43cc 	orr.w	r3, r3, ip, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001b18:	f890 c00d 	ldrb.w	ip, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001b1c:	ea43 438c 	orr.w	r3, r3, ip, lsl #18
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001b20:	f890 c009 	ldrb.w	ip, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001b24:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 8001b28:	7a01      	ldrb	r1, [r0, #8]
 8001b2a:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8001b2e:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 8001b32:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001b36:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8001b3a:	f85d fb04 	ldr.w	pc, [sp], #4
    MPU->RBAR = 0x00;
 8001b3e:	f8c2 109c 	str.w	r1, [r2, #156]	; 0x9c
    MPU->RASR = 0x00;
 8001b42:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
 8001b46:	4770      	bx	lr
 8001b48:	e000ed00 	.word	0xe000ed00

08001b4c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b4c:	b570      	push	{r4, r5, r6, lr}
 8001b4e:	4605      	mov	r5, r0
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001b50:	f7ff ff38 	bl	80019c4 <HAL_GetTick>

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001b54:	2d00      	cmp	r5, #0
 8001b56:	f000 8124 	beq.w	8001da2 <HAL_DMA_Abort+0x256>
  {
    return HAL_ERROR;
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b5a:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
 8001b5e:	2b02      	cmp	r3, #2
 8001b60:	f040 80dd 	bne.w	8001d1e <HAL_DMA_Abort+0x1d2>
    return HAL_ERROR;
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001b64:	682c      	ldr	r4, [r5, #0]
 8001b66:	4606      	mov	r6, r0
 8001b68:	4b8f      	ldr	r3, [pc, #572]	; (8001da8 <HAL_DMA_Abort+0x25c>)
 8001b6a:	4890      	ldr	r0, [pc, #576]	; (8001dac <HAL_DMA_Abort+0x260>)
 8001b6c:	4a90      	ldr	r2, [pc, #576]	; (8001db0 <HAL_DMA_Abort+0x264>)
 8001b6e:	4284      	cmp	r4, r0
 8001b70:	bf18      	it	ne
 8001b72:	429c      	cmpne	r4, r3
 8001b74:	f100 0030 	add.w	r0, r0, #48	; 0x30
 8001b78:	498e      	ldr	r1, [pc, #568]	; (8001db4 <HAL_DMA_Abort+0x268>)
 8001b7a:	bf0c      	ite	eq
 8001b7c:	2301      	moveq	r3, #1
 8001b7e:	2300      	movne	r3, #0
 8001b80:	4284      	cmp	r4, r0
 8001b82:	bf08      	it	eq
 8001b84:	f043 0301 	orreq.w	r3, r3, #1
 8001b88:	3018      	adds	r0, #24
 8001b8a:	4284      	cmp	r4, r0
 8001b8c:	bf08      	it	eq
 8001b8e:	f043 0301 	orreq.w	r3, r3, #1
 8001b92:	3018      	adds	r0, #24
 8001b94:	4284      	cmp	r4, r0
 8001b96:	bf08      	it	eq
 8001b98:	f043 0301 	orreq.w	r3, r3, #1
 8001b9c:	3018      	adds	r0, #24
 8001b9e:	4284      	cmp	r4, r0
 8001ba0:	bf08      	it	eq
 8001ba2:	f043 0301 	orreq.w	r3, r3, #1
 8001ba6:	f500 7056 	add.w	r0, r0, #856	; 0x358
 8001baa:	4284      	cmp	r4, r0
 8001bac:	bf08      	it	eq
 8001bae:	f043 0301 	orreq.w	r3, r3, #1
 8001bb2:	3018      	adds	r0, #24
 8001bb4:	4284      	cmp	r4, r0
 8001bb6:	bf08      	it	eq
 8001bb8:	f043 0301 	orreq.w	r3, r3, #1
 8001bbc:	3018      	adds	r0, #24
 8001bbe:	4284      	cmp	r4, r0
 8001bc0:	bf08      	it	eq
 8001bc2:	f043 0301 	orreq.w	r3, r3, #1
 8001bc6:	3018      	adds	r0, #24
 8001bc8:	4284      	cmp	r4, r0
 8001bca:	bf08      	it	eq
 8001bcc:	f043 0301 	orreq.w	r3, r3, #1
 8001bd0:	3018      	adds	r0, #24
 8001bd2:	4284      	cmp	r4, r0
 8001bd4:	bf08      	it	eq
 8001bd6:	f043 0301 	orreq.w	r3, r3, #1
 8001bda:	3018      	adds	r0, #24
 8001bdc:	4284      	cmp	r4, r0
 8001bde:	bf08      	it	eq
 8001be0:	f043 0301 	orreq.w	r3, r3, #1
 8001be4:	3018      	adds	r0, #24
 8001be6:	4284      	cmp	r4, r0
 8001be8:	bf08      	it	eq
 8001bea:	f043 0301 	orreq.w	r3, r3, #1
 8001bee:	3018      	adds	r0, #24
 8001bf0:	4284      	cmp	r4, r0
 8001bf2:	bf08      	it	eq
 8001bf4:	f043 0301 	orreq.w	r3, r3, #1
 8001bf8:	428c      	cmp	r4, r1
 8001bfa:	bf18      	it	ne
 8001bfc:	4294      	cmpne	r4, r2
 8001bfe:	bf0c      	ite	eq
 8001c00:	2201      	moveq	r2, #1
 8001c02:	2200      	movne	r2, #0
 8001c04:	d002      	beq.n	8001c0c <HAL_DMA_Abort+0xc0>
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	f000 8090 	beq.w	8001d2c <HAL_DMA_Abort+0x1e0>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001c0c:	6821      	ldr	r1, [r4, #0]
 8001c0e:	f021 011e 	bic.w	r1, r1, #30
 8001c12:	6021      	str	r1, [r4, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001c14:	6961      	ldr	r1, [r4, #20]
 8001c16:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8001c1a:	6161      	str	r1, [r4, #20]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001c1c:	2a00      	cmp	r2, #0
 8001c1e:	f000 80b0 	beq.w	8001d82 <HAL_DMA_Abort+0x236>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001c22:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 8001c24:	6813      	ldr	r3, [r2, #0]
 8001c26:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001c2a:	6013      	str	r3, [r2, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c2c:	6823      	ldr	r3, [r4, #0]
 8001c2e:	f023 0301 	bic.w	r3, r3, #1
 8001c32:	6023      	str	r3, [r4, #0]
 8001c34:	e005      	b.n	8001c42 <HAL_DMA_Abort+0xf6>

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c36:	f7ff fec5 	bl	80019c4 <HAL_GetTick>
 8001c3a:	1b83      	subs	r3, r0, r6
 8001c3c:	2b05      	cmp	r3, #5
 8001c3e:	f200 80a6 	bhi.w	8001d8e <HAL_DMA_Abort+0x242>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001c42:	6823      	ldr	r3, [r4, #0]
 8001c44:	07db      	lsls	r3, r3, #31
 8001c46:	d4f6      	bmi.n	8001c36 <HAL_DMA_Abort+0xea>
        return HAL_ERROR;
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001c48:	682a      	ldr	r2, [r5, #0]
 8001c4a:	4b57      	ldr	r3, [pc, #348]	; (8001da8 <HAL_DMA_Abort+0x25c>)
 8001c4c:	4857      	ldr	r0, [pc, #348]	; (8001dac <HAL_DMA_Abort+0x260>)
 8001c4e:	495a      	ldr	r1, [pc, #360]	; (8001db8 <HAL_DMA_Abort+0x26c>)
 8001c50:	4282      	cmp	r2, r0
 8001c52:	bf18      	it	ne
 8001c54:	429a      	cmpne	r2, r3
 8001c56:	f100 0048 	add.w	r0, r0, #72	; 0x48
 8001c5a:	bf0c      	ite	eq
 8001c5c:	2301      	moveq	r3, #1
 8001c5e:	2300      	movne	r3, #0
 8001c60:	428a      	cmp	r2, r1
 8001c62:	bf08      	it	eq
 8001c64:	f043 0301 	orreq.w	r3, r3, #1
 8001c68:	3130      	adds	r1, #48	; 0x30
 8001c6a:	4282      	cmp	r2, r0
 8001c6c:	bf08      	it	eq
 8001c6e:	f043 0301 	orreq.w	r3, r3, #1
 8001c72:	3030      	adds	r0, #48	; 0x30
 8001c74:	428a      	cmp	r2, r1
 8001c76:	bf08      	it	eq
 8001c78:	f043 0301 	orreq.w	r3, r3, #1
 8001c7c:	f501 715c 	add.w	r1, r1, #880	; 0x370
 8001c80:	4282      	cmp	r2, r0
 8001c82:	bf08      	it	eq
 8001c84:	f043 0301 	orreq.w	r3, r3, #1
 8001c88:	f500 705c 	add.w	r0, r0, #880	; 0x370
 8001c8c:	428a      	cmp	r2, r1
 8001c8e:	bf08      	it	eq
 8001c90:	f043 0301 	orreq.w	r3, r3, #1
 8001c94:	3130      	adds	r1, #48	; 0x30
 8001c96:	4282      	cmp	r2, r0
 8001c98:	bf08      	it	eq
 8001c9a:	f043 0301 	orreq.w	r3, r3, #1
 8001c9e:	3030      	adds	r0, #48	; 0x30
 8001ca0:	428a      	cmp	r2, r1
 8001ca2:	bf08      	it	eq
 8001ca4:	f043 0301 	orreq.w	r3, r3, #1
 8001ca8:	3130      	adds	r1, #48	; 0x30
 8001caa:	4282      	cmp	r2, r0
 8001cac:	bf08      	it	eq
 8001cae:	f043 0301 	orreq.w	r3, r3, #1
 8001cb2:	3030      	adds	r0, #48	; 0x30
 8001cb4:	428a      	cmp	r2, r1
 8001cb6:	bf08      	it	eq
 8001cb8:	f043 0301 	orreq.w	r3, r3, #1
 8001cbc:	3130      	adds	r1, #48	; 0x30
 8001cbe:	4282      	cmp	r2, r0
 8001cc0:	bf08      	it	eq
 8001cc2:	f043 0301 	orreq.w	r3, r3, #1
 8001cc6:	428a      	cmp	r2, r1
 8001cc8:	bf08      	it	eq
 8001cca:	f043 0301 	orreq.w	r3, r3, #1
 8001cce:	3118      	adds	r1, #24
 8001cd0:	428a      	cmp	r2, r1
 8001cd2:	bf08      	it	eq
 8001cd4:	f043 0301 	orreq.w	r3, r3, #1
 8001cd8:	b933      	cbnz	r3, 8001ce8 <HAL_DMA_Abort+0x19c>
 8001cda:	f5a1 6195 	sub.w	r1, r1, #1192	; 0x4a8
 8001cde:	4b35      	ldr	r3, [pc, #212]	; (8001db4 <HAL_DMA_Abort+0x268>)
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	bf18      	it	ne
 8001ce4:	428a      	cmpne	r2, r1
 8001ce6:	d16f      	bne.n	8001dc8 <HAL_DMA_Abort+0x27c>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001ce8:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8001cea:	233f      	movs	r3, #63	; 0x3f
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001cec:	6da9      	ldr	r1, [r5, #88]	; 0x58
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001cee:	f002 021f 	and.w	r2, r2, #31
 8001cf2:	4093      	lsls	r3, r2
 8001cf4:	608b      	str	r3, [r1, #8]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;

      if(hdma->DMAmuxRequestGen != 0U)
 8001cf6:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001cf8:	e9d5 2119 	ldrd	r2, r1, [r5, #100]	; 0x64
 8001cfc:	6051      	str	r1, [r2, #4]
      if(hdma->DMAmuxRequestGen != 0U)
 8001cfe:	b133      	cbz	r3, 8001d0e <HAL_DMA_Abort+0x1c2>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001d00:	681a      	ldr	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001d02:	e9d5 101c 	ldrd	r1, r0, [r5, #112]	; 0x70
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001d06:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d0a:	601a      	str	r2, [r3, #0]
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001d0c:	6048      	str	r0, [r1, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d0e:	2300      	movs	r3, #0
    hdma->State = HAL_DMA_STATE_READY;
 8001d10:	2201      	movs	r2, #1
  }

  return HAL_OK;
 8001d12:	4618      	mov	r0, r3
    hdma->State = HAL_DMA_STATE_READY;
 8001d14:	f885 2035 	strb.w	r2, [r5, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 8001d18:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
}
 8001d1c:	bd70      	pop	{r4, r5, r6, pc}
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d1e:	2280      	movs	r2, #128	; 0x80
    __HAL_UNLOCK(hdma);
 8001d20:	2300      	movs	r3, #0
    return HAL_ERROR;
 8001d22:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d24:	656a      	str	r2, [r5, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 8001d26:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
}
 8001d2a:	bd70      	pop	{r4, r5, r6, pc}
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001d2c:	6822      	ldr	r2, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001d2e:	4923      	ldr	r1, [pc, #140]	; (8001dbc <HAL_DMA_Abort+0x270>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001d30:	f022 020e 	bic.w	r2, r2, #14
 8001d34:	6022      	str	r2, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001d36:	4a22      	ldr	r2, [pc, #136]	; (8001dc0 <HAL_DMA_Abort+0x274>)
 8001d38:	428c      	cmp	r4, r1
 8001d3a:	bf18      	it	ne
 8001d3c:	4294      	cmpne	r4, r2
 8001d3e:	f101 0128 	add.w	r1, r1, #40	; 0x28
 8001d42:	bf0c      	ite	eq
 8001d44:	2201      	moveq	r2, #1
 8001d46:	2200      	movne	r2, #0
 8001d48:	428c      	cmp	r4, r1
 8001d4a:	bf08      	it	eq
 8001d4c:	f042 0201 	orreq.w	r2, r2, #1
 8001d50:	3114      	adds	r1, #20
 8001d52:	428c      	cmp	r4, r1
 8001d54:	bf08      	it	eq
 8001d56:	f042 0201 	orreq.w	r2, r2, #1
 8001d5a:	3114      	adds	r1, #20
 8001d5c:	428c      	cmp	r4, r1
 8001d5e:	bf08      	it	eq
 8001d60:	f042 0201 	orreq.w	r2, r2, #1
 8001d64:	3114      	adds	r1, #20
 8001d66:	428c      	cmp	r4, r1
 8001d68:	bf08      	it	eq
 8001d6a:	f042 0201 	orreq.w	r2, r2, #1
 8001d6e:	3114      	adds	r1, #20
 8001d70:	428c      	cmp	r4, r1
 8001d72:	bf08      	it	eq
 8001d74:	f042 0201 	orreq.w	r2, r2, #1
 8001d78:	b91a      	cbnz	r2, 8001d82 <HAL_DMA_Abort+0x236>
 8001d7a:	4a12      	ldr	r2, [pc, #72]	; (8001dc4 <HAL_DMA_Abort+0x278>)
 8001d7c:	4294      	cmp	r4, r2
 8001d7e:	f47f af55 	bne.w	8001c2c <HAL_DMA_Abort+0xe0>
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001d82:	6e29      	ldr	r1, [r5, #96]	; 0x60
 8001d84:	680a      	ldr	r2, [r1, #0]
 8001d86:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d8a:	600a      	str	r2, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 8001d8c:	e74e      	b.n	8001c2c <HAL_DMA_Abort+0xe0>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d8e:	2120      	movs	r1, #32
        hdma->State = HAL_DMA_STATE_ERROR;
 8001d90:	2203      	movs	r2, #3
        __HAL_UNLOCK(hdma);
 8001d92:	2300      	movs	r3, #0
        return HAL_ERROR;
 8001d94:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d96:	6569      	str	r1, [r5, #84]	; 0x54
        __HAL_UNLOCK(hdma);
 8001d98:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_ERROR;
 8001d9c:	f885 2035 	strb.w	r2, [r5, #53]	; 0x35
}
 8001da0:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8001da2:	2001      	movs	r0, #1
}
 8001da4:	bd70      	pop	{r4, r5, r6, pc}
 8001da6:	bf00      	nop
 8001da8:	40020058 	.word	0x40020058
 8001dac:	40020040 	.word	0x40020040
 8001db0:	40020010 	.word	0x40020010
 8001db4:	40020028 	.word	0x40020028
 8001db8:	40020070 	.word	0x40020070
 8001dbc:	58025408 	.word	0x58025408
 8001dc0:	5802541c 	.word	0x5802541c
 8001dc4:	58025494 	.word	0x58025494
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001dc8:	6de8      	ldr	r0, [r5, #92]	; 0x5c
 8001dca:	2101      	movs	r1, #1
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001dcc:	4b16      	ldr	r3, [pc, #88]	; (8001e28 <HAL_DMA_Abort+0x2dc>)
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001dce:	f000 001f 	and.w	r0, r0, #31
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001dd2:	4c16      	ldr	r4, [pc, #88]	; (8001e2c <HAL_DMA_Abort+0x2e0>)
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001dd4:	4081      	lsls	r1, r0
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001dd6:	42a2      	cmp	r2, r4
 8001dd8:	bf18      	it	ne
 8001dda:	429a      	cmpne	r2, r3
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ddc:	6da8      	ldr	r0, [r5, #88]	; 0x58
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001dde:	bf0c      	ite	eq
 8001de0:	2301      	moveq	r3, #1
 8001de2:	2300      	movne	r3, #0
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001de4:	6041      	str	r1, [r0, #4]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001de6:	4812      	ldr	r0, [pc, #72]	; (8001e30 <HAL_DMA_Abort+0x2e4>)
 8001de8:	4912      	ldr	r1, [pc, #72]	; (8001e34 <HAL_DMA_Abort+0x2e8>)
 8001dea:	4282      	cmp	r2, r0
 8001dec:	bf08      	it	eq
 8001dee:	f043 0301 	orreq.w	r3, r3, #1
 8001df2:	3028      	adds	r0, #40	; 0x28
 8001df4:	428a      	cmp	r2, r1
 8001df6:	bf08      	it	eq
 8001df8:	f043 0301 	orreq.w	r3, r3, #1
 8001dfc:	3128      	adds	r1, #40	; 0x28
 8001dfe:	4282      	cmp	r2, r0
 8001e00:	bf08      	it	eq
 8001e02:	f043 0301 	orreq.w	r3, r3, #1
 8001e06:	428a      	cmp	r2, r1
 8001e08:	bf08      	it	eq
 8001e0a:	f043 0301 	orreq.w	r3, r3, #1
 8001e0e:	3114      	adds	r1, #20
 8001e10:	428a      	cmp	r2, r1
 8001e12:	bf08      	it	eq
 8001e14:	f043 0301 	orreq.w	r3, r3, #1
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	f47f af6c 	bne.w	8001cf6 <HAL_DMA_Abort+0x1aa>
 8001e1e:	4b06      	ldr	r3, [pc, #24]	; (8001e38 <HAL_DMA_Abort+0x2ec>)
 8001e20:	429a      	cmp	r2, r3
 8001e22:	f43f af68 	beq.w	8001cf6 <HAL_DMA_Abort+0x1aa>
 8001e26:	e772      	b.n	8001d0e <HAL_DMA_Abort+0x1c2>
 8001e28:	5802541c 	.word	0x5802541c
 8001e2c:	58025408 	.word	0x58025408
 8001e30:	58025430 	.word	0x58025430
 8001e34:	58025444 	.word	0x58025444
 8001e38:	58025494 	.word	0x58025494

08001e3c <HAL_DMA_Abort_IT>:
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001e3c:	2800      	cmp	r0, #0
 8001e3e:	d05f      	beq.n	8001f00 <HAL_DMA_Abort_IT+0xc4>
{
 8001e40:	b538      	push	{r3, r4, r5, lr}
  {
    return HAL_ERROR;
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e42:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
 8001e46:	4603      	mov	r3, r0
 8001e48:	2a02      	cmp	r2, #2
 8001e4a:	d155      	bne.n	8001ef8 <HAL_DMA_Abort_IT+0xbc>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
    return HAL_ERROR;
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001e4c:	6801      	ldr	r1, [r0, #0]
 8001e4e:	4a57      	ldr	r2, [pc, #348]	; (8001fac <HAL_DMA_Abort_IT+0x170>)
 8001e50:	4291      	cmp	r1, r2
 8001e52:	d048      	beq.n	8001ee6 <HAL_DMA_Abort_IT+0xaa>
 8001e54:	3218      	adds	r2, #24
 8001e56:	4291      	cmp	r1, r2
 8001e58:	d045      	beq.n	8001ee6 <HAL_DMA_Abort_IT+0xaa>
 8001e5a:	3230      	adds	r2, #48	; 0x30
 8001e5c:	4c54      	ldr	r4, [pc, #336]	; (8001fb0 <HAL_DMA_Abort_IT+0x174>)
 8001e5e:	4855      	ldr	r0, [pc, #340]	; (8001fb4 <HAL_DMA_Abort_IT+0x178>)
 8001e60:	42a1      	cmp	r1, r4
 8001e62:	bf18      	it	ne
 8001e64:	4291      	cmpne	r1, r2
 8001e66:	f104 0448 	add.w	r4, r4, #72	; 0x48
 8001e6a:	bf0c      	ite	eq
 8001e6c:	2201      	moveq	r2, #1
 8001e6e:	2200      	movne	r2, #0
 8001e70:	4281      	cmp	r1, r0
 8001e72:	bf08      	it	eq
 8001e74:	f042 0201 	orreq.w	r2, r2, #1
 8001e78:	3030      	adds	r0, #48	; 0x30
 8001e7a:	42a1      	cmp	r1, r4
 8001e7c:	bf08      	it	eq
 8001e7e:	f042 0201 	orreq.w	r2, r2, #1
 8001e82:	3430      	adds	r4, #48	; 0x30
 8001e84:	4281      	cmp	r1, r0
 8001e86:	bf08      	it	eq
 8001e88:	f042 0201 	orreq.w	r2, r2, #1
 8001e8c:	f500 705c 	add.w	r0, r0, #880	; 0x370
 8001e90:	42a1      	cmp	r1, r4
 8001e92:	bf08      	it	eq
 8001e94:	f042 0201 	orreq.w	r2, r2, #1
 8001e98:	f504 745c 	add.w	r4, r4, #880	; 0x370
 8001e9c:	4281      	cmp	r1, r0
 8001e9e:	bf08      	it	eq
 8001ea0:	f042 0201 	orreq.w	r2, r2, #1
 8001ea4:	3030      	adds	r0, #48	; 0x30
 8001ea6:	42a1      	cmp	r1, r4
 8001ea8:	bf08      	it	eq
 8001eaa:	f042 0201 	orreq.w	r2, r2, #1
 8001eae:	3430      	adds	r4, #48	; 0x30
 8001eb0:	4281      	cmp	r1, r0
 8001eb2:	bf08      	it	eq
 8001eb4:	f042 0201 	orreq.w	r2, r2, #1
 8001eb8:	3030      	adds	r0, #48	; 0x30
 8001eba:	42a1      	cmp	r1, r4
 8001ebc:	bf08      	it	eq
 8001ebe:	f042 0201 	orreq.w	r2, r2, #1
 8001ec2:	3430      	adds	r4, #48	; 0x30
 8001ec4:	4281      	cmp	r1, r0
 8001ec6:	bf08      	it	eq
 8001ec8:	f042 0201 	orreq.w	r2, r2, #1
 8001ecc:	3030      	adds	r0, #48	; 0x30
 8001ece:	42a1      	cmp	r1, r4
 8001ed0:	bf08      	it	eq
 8001ed2:	f042 0201 	orreq.w	r2, r2, #1
 8001ed6:	4281      	cmp	r1, r0
 8001ed8:	bf08      	it	eq
 8001eda:	f042 0201 	orreq.w	r2, r2, #1
 8001ede:	b912      	cbnz	r2, 8001ee6 <HAL_DMA_Abort_IT+0xaa>
 8001ee0:	4a35      	ldr	r2, [pc, #212]	; (8001fb8 <HAL_DMA_Abort_IT+0x17c>)
 8001ee2:	4291      	cmp	r1, r2
 8001ee4:	d10e      	bne.n	8001f04 <HAL_DMA_Abort_IT+0xc8>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8001ee6:	2204      	movs	r2, #4
        hdma->XferAbortCallback(hdma);
      }
    }
  }

  return HAL_OK;
 8001ee8:	2000      	movs	r0, #0
      hdma->State = HAL_DMA_STATE_ABORT;
 8001eea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8001eee:	680b      	ldr	r3, [r1, #0]
 8001ef0:	f023 0301 	bic.w	r3, r3, #1
 8001ef4:	600b      	str	r3, [r1, #0]
}
 8001ef6:	bd38      	pop	{r3, r4, r5, pc}
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ef8:	2280      	movs	r2, #128	; 0x80
    return HAL_ERROR;
 8001efa:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001efc:	655a      	str	r2, [r3, #84]	; 0x54
}
 8001efe:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001f00:	2001      	movs	r0, #1
}
 8001f02:	4770      	bx	lr
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001f04:	4a2d      	ldr	r2, [pc, #180]	; (8001fbc <HAL_DMA_Abort_IT+0x180>)
 8001f06:	4d2e      	ldr	r5, [pc, #184]	; (8001fc0 <HAL_DMA_Abort_IT+0x184>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001f08:	6808      	ldr	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001f0a:	42a9      	cmp	r1, r5
 8001f0c:	bf18      	it	ne
 8001f0e:	4291      	cmpne	r1, r2
 8001f10:	4c2c      	ldr	r4, [pc, #176]	; (8001fc4 <HAL_DMA_Abort_IT+0x188>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001f12:	f020 000e 	bic.w	r0, r0, #14
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001f16:	f105 053c 	add.w	r5, r5, #60	; 0x3c
 8001f1a:	bf0c      	ite	eq
 8001f1c:	2201      	moveq	r2, #1
 8001f1e:	2200      	movne	r2, #0
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001f20:	6008      	str	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001f22:	42a1      	cmp	r1, r4
 8001f24:	bf08      	it	eq
 8001f26:	f042 0201 	orreq.w	r2, r2, #1
      __HAL_DMA_DISABLE(hdma);
 8001f2a:	6808      	ldr	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001f2c:	3428      	adds	r4, #40	; 0x28
 8001f2e:	42a9      	cmp	r1, r5
 8001f30:	bf08      	it	eq
 8001f32:	f042 0201 	orreq.w	r2, r2, #1
      __HAL_DMA_DISABLE(hdma);
 8001f36:	f020 0001 	bic.w	r0, r0, #1
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001f3a:	42a1      	cmp	r1, r4
 8001f3c:	bf08      	it	eq
 8001f3e:	f042 0201 	orreq.w	r2, r2, #1
 8001f42:	3414      	adds	r4, #20
      __HAL_DMA_DISABLE(hdma);
 8001f44:	6008      	str	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001f46:	42a1      	cmp	r1, r4
 8001f48:	bf08      	it	eq
 8001f4a:	f042 0201 	orreq.w	r2, r2, #1
 8001f4e:	481e      	ldr	r0, [pc, #120]	; (8001fc8 <HAL_DMA_Abort_IT+0x18c>)
 8001f50:	4281      	cmp	r1, r0
 8001f52:	bf08      	it	eq
 8001f54:	f042 0201 	orreq.w	r2, r2, #1
 8001f58:	b912      	cbnz	r2, 8001f60 <HAL_DMA_Abort_IT+0x124>
 8001f5a:	4a1c      	ldr	r2, [pc, #112]	; (8001fcc <HAL_DMA_Abort_IT+0x190>)
 8001f5c:	4291      	cmp	r1, r2
 8001f5e:	d117      	bne.n	8001f90 <HAL_DMA_Abort_IT+0x154>
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001f60:	2201      	movs	r2, #1
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f62:	6d9d      	ldr	r5, [r3, #88]	; 0x58
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001f64:	e9d3 0417 	ldrd	r0, r4, [r3, #92]	; 0x5c
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001f68:	6821      	ldr	r1, [r4, #0]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001f6a:	f000 001f 	and.w	r0, r0, #31
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001f6e:	f421 7180 	bic.w	r1, r1, #256	; 0x100
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001f72:	4082      	lsls	r2, r0
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001f74:	6021      	str	r1, [r4, #0]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001f76:	606a      	str	r2, [r5, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 8001f78:	6eda      	ldr	r2, [r3, #108]	; 0x6c
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001f7a:	e9d3 1019 	ldrd	r1, r0, [r3, #100]	; 0x64
 8001f7e:	6048      	str	r0, [r1, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 8001f80:	b132      	cbz	r2, 8001f90 <HAL_DMA_Abort_IT+0x154>
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001f82:	6811      	ldr	r1, [r2, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001f84:	e9d3 041c 	ldrd	r0, r4, [r3, #112]	; 0x70
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001f88:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8001f8c:	6011      	str	r1, [r2, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001f8e:	6044      	str	r4, [r0, #4]
      hdma->State = HAL_DMA_STATE_READY;
 8001f90:	2101      	movs	r1, #1
      __HAL_UNLOCK(hdma);
 8001f92:	2400      	movs	r4, #0
      if(hdma->XferAbortCallback != NULL)
 8001f94:	6d1a      	ldr	r2, [r3, #80]	; 0x50
      hdma->State = HAL_DMA_STATE_READY;
 8001f96:	f883 1035 	strb.w	r1, [r3, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 8001f9a:	f883 4034 	strb.w	r4, [r3, #52]	; 0x34
      if(hdma->XferAbortCallback != NULL)
 8001f9e:	b11a      	cbz	r2, 8001fa8 <HAL_DMA_Abort_IT+0x16c>
        hdma->XferAbortCallback(hdma);
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	4790      	blx	r2
  return HAL_OK;
 8001fa4:	4620      	mov	r0, r4
}
 8001fa6:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 8001fa8:	4610      	mov	r0, r2
}
 8001faa:	bd38      	pop	{r3, r4, r5, pc}
 8001fac:	40020010 	.word	0x40020010
 8001fb0:	40020040 	.word	0x40020040
 8001fb4:	40020070 	.word	0x40020070
 8001fb8:	400204b8 	.word	0x400204b8
 8001fbc:	5802541c 	.word	0x5802541c
 8001fc0:	58025408 	.word	0x58025408
 8001fc4:	58025430 	.word	0x58025430
 8001fc8:	58025480 	.word	0x58025480
 8001fcc:	58025494 	.word	0x58025494

08001fd0 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001fd0:	b430      	push	{r4, r5}
               macconf->BackOffLimit |
               ((uint32_t)macconf->DeferralCheck << 4) |
               macconf->PreambleLength);

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001fd2:	688b      	ldr	r3, [r1, #8]
 8001fd4:	680d      	ldr	r5, [r1, #0]
 8001fd6:	694c      	ldr	r4, [r1, #20]
 8001fd8:	432b      	orrs	r3, r5
 8001fda:	6802      	ldr	r2, [r0, #0]
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001fdc:	f891 c011 	ldrb.w	ip, [r1, #17]
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001fe0:	4323      	orrs	r3, r4
 8001fe2:	698c      	ldr	r4, [r1, #24]
 8001fe4:	6810      	ldr	r0, [r2, #0]
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001fe6:	fabc fc8c 	clz	ip, ip
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001fea:	4323      	orrs	r3, r4
 8001fec:	6a4c      	ldr	r4, [r1, #36]	; 0x24
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001fee:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
               macconf->GiantPacketSizeLimit);

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001ff2:	4d52      	ldr	r5, [pc, #328]	; (800213c <ETH_SetMACConfig+0x16c>)
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001ff4:	4323      	orrs	r3, r4
 8001ff6:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 8001ff8:	4323      	orrs	r3, r4
 8001ffa:	4c51      	ldr	r4, [pc, #324]	; (8002140 <ETH_SetMACConfig+0x170>)
 8001ffc:	4020      	ands	r0, r4
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001ffe:	790c      	ldrb	r4, [r1, #4]
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002000:	4303      	orrs	r3, r0
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8002002:	7b48      	ldrb	r0, [r1, #13]
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002004:	ea43 63c4 	orr.w	r3, r3, r4, lsl #27
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002008:	7b0c      	ldrb	r4, [r1, #12]
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800200a:	ea43 53c4 	orr.w	r3, r3, r4, lsl #23
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800200e:	7b8c      	ldrb	r4, [r1, #14]
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002010:	ea43 5380 	orr.w	r3, r3, r0, lsl #22
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002014:	7bc8      	ldrb	r0, [r1, #15]
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002016:	ea43 5344 	orr.w	r3, r3, r4, lsl #21
               ((uint32_t)macconf->JumboPacket << 16) |
 800201a:	7c8c      	ldrb	r4, [r1, #18]
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800201c:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
               ((uint32_t)macconf->LoopbackMode << 12) |
 8002020:	7f08      	ldrb	r0, [r1, #28]
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002022:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8002026:	7f4c      	ldrb	r4, [r1, #29]
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002028:	ea43 3300 	orr.w	r3, r3, r0, lsl #12
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800202c:	7fc8      	ldrb	r0, [r1, #31]
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800202e:	ea43 23c4 	orr.w	r3, r3, r4, lsl #11
               ((uint32_t)macconf->DeferralCheck << 4) |
 8002032:	f891 4028 	ldrb.w	r4, [r1, #40]	; 0x28
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002036:	ea43 2340 	orr.w	r3, r3, r0, lsl #9
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800203a:	7c08      	ldrb	r0, [r1, #16]
 800203c:	fab0 f080 	clz	r0, r0
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002040:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002044:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002046:	0940      	lsrs	r0, r0, #5
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002048:	ea43 43c0 	orr.w	r3, r3, r0, lsl #19
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 800204c:	7f88      	ldrb	r0, [r1, #30]
 800204e:	fab0 f080 	clz	r0, r0
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002052:	ea43 434c 	orr.w	r3, r3, ip, lsl #17
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002056:	0940      	lsrs	r0, r0, #5
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002058:	ea43 2380 	orr.w	r3, r3, r0, lsl #10
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800205c:	f891 0020 	ldrb.w	r0, [r1, #32]
 8002060:	fab0 f080 	clz	r0, r0
 8002064:	0940      	lsrs	r0, r0, #5
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002066:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800206a:	6b48      	ldr	r0, [r1, #52]	; 0x34
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800206c:	6013      	str	r3, [r2, #0]
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800206e:	6853      	ldr	r3, [r2, #4]
 8002070:	402b      	ands	r3, r5
               macconf->PauseLowThreshold |
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
               (macconf->PauseTime << 16));

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8002072:	f64f 750d 	movw	r5, #65293	; 0xff0d
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8002076:	ea43 6344 	orr.w	r3, r3, r4, lsl #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800207a:	f891 4038 	ldrb.w	r4, [r1, #56]	; 0x38
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800207e:	4303      	orrs	r3, r0
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002080:	f891 0030 	ldrb.w	r0, [r1, #48]	; 0x30
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8002084:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002088:	f891 4031 	ldrb.w	r4, [r1, #49]	; 0x31
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800208c:	ea43 4380 	orr.w	r3, r3, r0, lsl #18
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8002090:	f891 0032 	ldrb.w	r0, [r1, #50]	; 0x32
 8002094:	fab0 f080 	clz	r0, r0
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8002098:	ea43 4344 	orr.w	r3, r3, r4, lsl #17
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 800209c:	0940      	lsrs	r0, r0, #5
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800209e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80020a2:	4828      	ldr	r0, [pc, #160]	; (8002144 <ETH_SetMACConfig+0x174>)
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80020a4:	6053      	str	r3, [r2, #4]
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80020a6:	68d3      	ldr	r3, [r2, #12]
               (macconf->PauseTime << 16));
 80020a8:	6c8c      	ldr	r4, [r1, #72]	; 0x48
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80020aa:	4018      	ands	r0, r3
 80020ac:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 80020ae:	4318      	orrs	r0, r3
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80020b0:	f891 3040 	ldrb.w	r3, [r1, #64]	; 0x40
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80020b4:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 80020b8:	60d0      	str	r0, [r2, #12]
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80020ba:	6f13      	ldr	r3, [r2, #112]	; 0x70
 80020bc:	6d08      	ldr	r0, [r1, #80]	; 0x50
 80020be:	402b      	ands	r3, r5
 80020c0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80020c4:	f891 4054 	ldrb.w	r4, [r1, #84]	; 0x54
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80020c8:	4303      	orrs	r3, r0
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 80020ca:	f891 004c 	ldrb.w	r0, [r1, #76]	; 0x4c
 80020ce:	fab0 f080 	clz	r0, r0
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80020d2:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 80020d6:	0940      	lsrs	r0, r0, #5
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80020d8:	ea43 13c0 	orr.w	r3, r3, r0, lsl #7
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80020dc:	e9d1 5416 	ldrd	r5, r4, [r1, #88]	; 0x58
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80020e0:	6713      	str	r3, [r2, #112]	; 0x70
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80020e2:	f8d2 0090 	ldr.w	r0, [r2, #144]	; 0x90
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80020e6:	f891 3056 	ldrb.w	r3, [r1, #86]	; 0x56
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80020ea:	f020 0003 	bic.w	r0, r0, #3
 80020ee:	4303      	orrs	r3, r0
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80020f0:	f891 0055 	ldrb.w	r0, [r1, #85]	; 0x55
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80020f4:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
 80020f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80020fc:	f8d2 3d00 	ldr.w	r3, [r2, #3328]	; 0xd00
 8002100:	f023 0372 	bic.w	r3, r3, #114	; 0x72
 8002104:	432b      	orrs	r3, r5
 8002106:	f8c2 3d00 	str.w	r3, [r2, #3328]	; 0xd00
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 800210a:	f8d2 3d30 	ldr.w	r3, [r2, #3376]	; 0xd30
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800210e:	f891 0061 	ldrb.w	r0, [r1, #97]	; 0x61
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8002112:	f023 037b 	bic.w	r3, r3, #123	; 0x7b
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8002116:	f891 c062 	ldrb.w	ip, [r1, #98]	; 0x62
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 800211a:	4323      	orrs	r3, r4
 800211c:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002120:	f891 0060 	ldrb.w	r0, [r1, #96]	; 0x60
 8002124:	fab0 f180 	clz	r1, r0
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8002128:	ea43 03cc 	orr.w	r3, r3, ip, lsl #3
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800212c:	0949      	lsrs	r1, r1, #5
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 800212e:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
}
 8002132:	bc30      	pop	{r4, r5}
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8002134:	f8c2 3d30 	str.w	r3, [r2, #3376]	; 0xd30
}
 8002138:	4770      	bx	lr
 800213a:	bf00      	nop
 800213c:	c0f88000 	.word	0xc0f88000
 8002140:	00048083 	.word	0x00048083
 8002144:	fffffef0 	.word	0xfffffef0

08002148 <ETH_SetDMAConfig>:
static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8002148:	6803      	ldr	r3, [r0, #0]
 800214a:	4a1e      	ldr	r2, [pc, #120]	; (80021c4 <ETH_SetDMAConfig+0x7c>)
 800214c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002150:	6808      	ldr	r0, [r1, #0]
{
 8002152:	b410      	push	{r4}
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8002154:	681c      	ldr	r4, [r3, #0]
 8002156:	4022      	ands	r2, r4
 8002158:	4302      	orrs	r2, r0
 800215a:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
               dmaconf->BurstMode |
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 800215c:	7b0a      	ldrb	r2, [r1, #12]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800215e:	790c      	ldrb	r4, [r1, #4]
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8002160:	03d2      	lsls	r2, r2, #15

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8002162:	6858      	ldr	r0, [r3, #4]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002164:	ea42 3204 	orr.w	r2, r2, r4, lsl #12
 8002168:	688c      	ldr	r4, [r1, #8]
 800216a:	4322      	orrs	r2, r4
  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800216c:	4c16      	ldr	r4, [pc, #88]	; (80021c8 <ETH_SetDMAConfig+0x80>)
 800216e:	4004      	ands	r4, r0

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002170:	6a08      	ldr	r0, [r1, #32]
  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8002172:	4322      	orrs	r2, r4
 8002174:	605a      	str	r2, [r3, #4]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002176:	7b4a      	ldrb	r2, [r1, #13]
               dmaconf->MaximumSegmentSize);

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8002178:	f8d3 4100 	ldr.w	r4, [r3, #256]	; 0x100
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800217c:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8002180:	4812      	ldr	r0, [pc, #72]	; (80021cc <ETH_SetDMAConfig+0x84>)
 8002182:	4020      	ands	r0, r4
 8002184:	4302      	orrs	r2, r0
 8002186:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 800218a:	7f4a      	ldrb	r2, [r1, #29]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 800218c:	7d0c      	ldrb	r4, [r1, #20]
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 800218e:	0312      	lsls	r2, r2, #12

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8002190:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
  dmaregval = (dmaconf->TxDMABurstLength |
 8002194:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
 8002198:	690c      	ldr	r4, [r1, #16]
 800219a:	4322      	orrs	r2, r4
  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800219c:	4c0c      	ldr	r4, [pc, #48]	; (80021d0 <ETH_SetDMAConfig+0x88>)
 800219e:	4004      	ands	r4, r0

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80021a0:	6988      	ldr	r0, [r1, #24]
  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80021a2:	4322      	orrs	r2, r4
 80021a4:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
               dmaconf->RxDMABurstLength);

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80021a8:	f8d3 4108 	ldr.w	r4, [r3, #264]	; 0x108
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80021ac:	7f0a      	ldrb	r2, [r1, #28]
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80021ae:	4909      	ldr	r1, [pc, #36]	; (80021d4 <ETH_SetDMAConfig+0x8c>)
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80021b0:	ea40 72c2 	orr.w	r2, r0, r2, lsl #31
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80021b4:	4021      	ands	r1, r4
}
 80021b6:	f85d 4b04 	ldr.w	r4, [sp], #4
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80021ba:	430a      	orrs	r2, r1
 80021bc:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}
 80021c0:	4770      	bx	lr
 80021c2:	bf00      	nop
 80021c4:	ffff87fd 	.word	0xffff87fd
 80021c8:	ffff2ffe 	.word	0xffff2ffe
 80021cc:	fffec000 	.word	0xfffec000
 80021d0:	ffc0efef 	.word	0xffc0efef
 80021d4:	7fc0ffff 	.word	0x7fc0ffff

080021d8 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 80021d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80021dc:	6a84      	ldr	r4, [r0, #40]	; 0x28
{
 80021de:	b083      	sub	sp, #12
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
  uint32_t idx;
  uint32_t descnbr = 0;
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80021e0:	688e      	ldr	r6, [r1, #8]
 80021e2:	eb00 0984 	add.w	r9, r0, r4, lsl #2
{
 80021e6:	9201      	str	r2, [sp, #4]
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80021e8:	f8d9 3018 	ldr.w	r3, [r9, #24]
  uint32_t           bd_count = 0;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 80021ec:	68da      	ldr	r2, [r3, #12]
 80021ee:	2a00      	cmp	r2, #0
 80021f0:	f2c0 8124 	blt.w	800243c <ETH_Prepare_Tx_Descriptors+0x264>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80021f4:	f8d9 202c 	ldr.w	r2, [r9, #44]	; 0x2c
 80021f8:	2a00      	cmp	r2, #0
 80021fa:	f040 811f 	bne.w	800243c <ETH_Prepare_Tx_Descriptors+0x264>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 80021fe:	f8d1 c000 	ldr.w	ip, [r1]
 8002202:	f01c 0704 	ands.w	r7, ip, #4
 8002206:	d02d      	beq.n	8002264 <ETH_Prepare_Tx_Descriptors+0x8c>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 8002208:	68da      	ldr	r2, [r3, #12]
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);

    /* if inner VLAN is enabled */
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != (uint32_t)RESET)
 800220a:	f01c 0f08 	tst.w	ip, #8
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 800220e:	4dae      	ldr	r5, [pc, #696]	; (80024c8 <ETH_Prepare_Tx_Descriptors+0x2f0>)
 8002210:	ea05 0502 	and.w	r5, r5, r2
 8002214:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8002216:	ea45 0502 	orr.w	r5, r5, r2
 800221a:	60dd      	str	r5, [r3, #12]
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 800221c:	68da      	ldr	r2, [r3, #12]
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 800221e:	6805      	ldr	r5, [r0, #0]
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 8002220:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002224:	60da      	str	r2, [r3, #12]
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 8002226:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 8002228:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800222c:	662a      	str	r2, [r5, #96]	; 0x60
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != (uint32_t)RESET)
 800222e:	d019      	beq.n	8002264 <ETH_Prepare_Tx_Descriptors+0x8c>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 8002230:	689a      	ldr	r2, [r3, #8]
 8002232:	fa1f fe82 	uxth.w	lr, r2
 8002236:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8002238:	ea4e 4202 	orr.w	r2, lr, r2, lsl #16
 800223c:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 800223e:	68da      	ldr	r2, [r3, #12]
 8002240:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002244:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 8002246:	68da      	ldr	r2, [r3, #12]
 8002248:	f422 2e40 	bic.w	lr, r2, #786432	; 0xc0000
 800224c:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 800224e:	ea4e 0202 	orr.w	r2, lr, r2
 8002252:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 8002254:	6e6a      	ldr	r2, [r5, #100]	; 0x64
 8002256:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800225a:	666a      	str	r2, [r5, #100]	; 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 800225c:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 800225e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002262:	652a      	str	r2, [r5, #80]	; 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8002264:	f01c 0810 	ands.w	r8, ip, #16
 8002268:	d009      	beq.n	800227e <ETH_Prepare_Tx_Descriptors+0xa6>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 800226a:	689a      	ldr	r2, [r3, #8]
 800226c:	4d97      	ldr	r5, [pc, #604]	; (80024cc <ETH_Prepare_Tx_Descriptors+0x2f4>)
 800226e:	4015      	ands	r5, r2
 8002270:	698a      	ldr	r2, [r1, #24]
 8002272:	4315      	orrs	r5, r2
 8002274:	609d      	str	r5, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 8002276:	68da      	ldr	r2, [r3, #12]
 8002278:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800227c:	60da      	str	r2, [r3, #12]
  }

  if ((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 800227e:	f01c 0f14 	tst.w	ip, #20
 8002282:	f040 80df 	bne.w	8002444 <ETH_Prepare_Tx_Descriptors+0x26c>
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8002286:	4622      	mov	r2, r4
 8002288:	f04f 0e01 	mov.w	lr, #1
  /***************************************************************************/

  descnbr += 1U;

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 800228c:	6835      	ldr	r5, [r6, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 800228e:	f8df a23c 	ldr.w	sl, [pc, #572]	; 80024cc <ETH_Prepare_Tx_Descriptors+0x2f4>
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8002292:	601d      	str	r5, [r3, #0]
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8002294:	689d      	ldr	r5, [r3, #8]
 8002296:	ea05 0a0a 	and.w	sl, r5, sl
 800229a:	6875      	ldr	r5, [r6, #4]
 800229c:	ea4a 0505 	orr.w	r5, sl, r5
 80022a0:	609d      	str	r5, [r3, #8]

  if (txbuffer->next != NULL)
 80022a2:	68b5      	ldr	r5, [r6, #8]
 80022a4:	2d00      	cmp	r5, #0
 80022a6:	f000 8133 	beq.w	8002510 <ETH_Prepare_Tx_Descriptors+0x338>
  {
    txbuffer = txbuffer->next;
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 80022aa:	682e      	ldr	r6, [r5, #0]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 80022ac:	f8df a220 	ldr.w	sl, [pc, #544]	; 80024d0 <ETH_Prepare_Tx_Descriptors+0x2f8>
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 80022b0:	605e      	str	r6, [r3, #4]
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 80022b2:	689e      	ldr	r6, [r3, #8]
 80022b4:	ea06 0a0a 	and.w	sl, r6, sl
 80022b8:	686e      	ldr	r6, [r5, #4]
 80022ba:	ea4a 4606 	orr.w	r6, sl, r6, lsl #16
 80022be:	609e      	str	r6, [r3, #8]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 80022c0:	68de      	ldr	r6, [r3, #12]
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 80022c2:	f1b8 0f00 	cmp.w	r8, #0
 80022c6:	f000 80e0 	beq.w	800248a <ETH_Prepare_Tx_Descriptors+0x2b2>
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 80022ca:	f426 0cf0 	bic.w	ip, r6, #7864320	; 0x780000
 80022ce:	6a0e      	ldr	r6, [r1, #32]
 80022d0:	ea4c 46c6 	orr.w	r6, ip, r6, lsl #19
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 80022d4:	f8df c1fc 	ldr.w	ip, [pc, #508]	; 80024d4 <ETH_Prepare_Tx_Descriptors+0x2fc>
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 80022d8:	60de      	str	r6, [r3, #12]
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 80022da:	68de      	ldr	r6, [r3, #12]
 80022dc:	ea06 0c0c 	and.w	ip, r6, ip
 80022e0:	69ce      	ldr	r6, [r1, #28]
 80022e2:	ea4c 0606 	orr.w	r6, ip, r6
 80022e6:	60de      	str	r6, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 80022e8:	68de      	ldr	r6, [r3, #12]
 80022ea:	f446 2680 	orr.w	r6, r6, #262144	; 0x40000
 80022ee:	60de      	str	r6, [r3, #12]
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
    }
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 80022f0:	b12f      	cbz	r7, 80022fe <ETH_Prepare_Tx_Descriptors+0x126>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 80022f2:	689f      	ldr	r7, [r3, #8]
 80022f4:	6a8e      	ldr	r6, [r1, #40]	; 0x28
 80022f6:	f427 4740 	bic.w	r7, r7, #49152	; 0xc000
 80022fa:	433e      	orrs	r6, r7
 80022fc:	609e      	str	r6, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 80022fe:	68de      	ldr	r6, [r3, #12]
 8002300:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
 8002304:	60de      	str	r6, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8002306:	68de      	ldr	r6, [r3, #12]
 8002308:	f026 4680 	bic.w	r6, r6, #1073741824	; 0x40000000
 800230c:	60de      	str	r6, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 800230e:	f3bf 8f5f 	dmb	sy
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8002312:	68de      	ldr	r6, [r3, #12]
 8002314:	f046 4600 	orr.w	r6, r6, #2147483648	; 0x80000000
 8002318:	60de      	str	r6, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != (uint32_t)RESET)
 800231a:	680e      	ldr	r6, [r1, #0]
 800231c:	07b6      	lsls	r6, r6, #30
 800231e:	d505      	bpl.n	800232c <ETH_Prepare_Tx_Descriptors+0x154>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 8002320:	68df      	ldr	r7, [r3, #12]
 8002322:	68ce      	ldr	r6, [r1, #12]
 8002324:	f027 7760 	bic.w	r7, r7, #58720256	; 0x3800000
 8002328:	433e      	orrs	r6, r7
 800232a:	60de      	str	r6, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 800232c:	f8d5 8008 	ldr.w	r8, [r5, #8]
 8002330:	f1b8 0f00 	cmp.w	r8, #0
 8002334:	f000 80d2 	beq.w	80024dc <ETH_Prepare_Tx_Descriptors+0x304>
 8002338:	f04f 0c00 	mov.w	ip, #0
    txbuffer = txbuffer->next;

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 800233c:	4d63      	ldr	r5, [pc, #396]	; (80024cc <ETH_Prepare_Tx_Descriptors+0x2f4>)
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0);
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 800233e:	4e64      	ldr	r6, [pc, #400]	; (80024d0 <ETH_Prepare_Tx_Descriptors+0x2f8>)
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8002340:	46a2      	mov	sl, r4
 8002342:	e01d      	b.n	8002380 <ETH_Prepare_Tx_Descriptors+0x1a8>
 8002344:	f8df 818c 	ldr.w	r8, [pc, #396]	; 80024d4 <ETH_Prepare_Tx_Descriptors+0x2fc>
 8002348:	ea04 0808 	and.w	r8, r4, r8
 800234c:	69cc      	ldr	r4, [r1, #28]
 800234e:	ea48 0404 	orr.w	r4, r8, r4
 8002352:	60dc      	str	r4, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8002354:	68dc      	ldr	r4, [r3, #12]
 8002356:	f444 2480 	orr.w	r4, r4, #262144	; 0x40000
 800235a:	60dc      	str	r4, [r3, #12]
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
      }
    }

    bd_count += 1U;
 800235c:	f10c 0c01 	add.w	ip, ip, #1
 8002360:	f3bf 8f5f 	dmb	sy

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8002364:	68dc      	ldr	r4, [r3, #12]
  while (txbuffer->next != NULL)
 8002366:	f8d7 8008 	ldr.w	r8, [r7, #8]
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 800236a:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
 800236e:	60dc      	str	r4, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8002370:	68dc      	ldr	r4, [r3, #12]
 8002372:	f024 4480 	bic.w	r4, r4, #1073741824	; 0x40000000
 8002376:	60dc      	str	r4, [r3, #12]
  while (txbuffer->next != NULL)
 8002378:	f1b8 0f00 	cmp.w	r8, #0
 800237c:	f000 80af 	beq.w	80024de <ETH_Prepare_Tx_Descriptors+0x306>
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8002380:	68dc      	ldr	r4, [r3, #12]
 8002382:	eb0e 0b0c 	add.w	fp, lr, ip
 8002386:	f024 5480 	bic.w	r4, r4, #268435456	; 0x10000000
 800238a:	60dc      	str	r4, [r3, #12]
    INCR_TX_DESC_INDEX(descidx, 1U);
 800238c:	1c53      	adds	r3, r2, #1
 800238e:	2b03      	cmp	r3, #3
 8002390:	bf94      	ite	ls
 8002392:	461a      	movls	r2, r3
 8002394:	3a03      	subhi	r2, #3
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002396:	eb00 0782 	add.w	r7, r0, r2, lsl #2
 800239a:	69bb      	ldr	r3, [r7, #24]
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 800239c:	68dc      	ldr	r4, [r3, #12]
 800239e:	f024 5400 	bic.w	r4, r4, #536870912	; 0x20000000
 80023a2:	60dc      	str	r4, [r3, #12]
    if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 80023a4:	68dc      	ldr	r4, [r3, #12]
 80023a6:	2c00      	cmp	r4, #0
 80023a8:	db30      	blt.n	800240c <ETH_Prepare_Tx_Descriptors+0x234>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80023aa:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 80023ac:	bb74      	cbnz	r4, 800240c <ETH_Prepare_Tx_Descriptors+0x234>
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 80023ae:	f8d8 4000 	ldr.w	r4, [r8]
 80023b2:	601c      	str	r4, [r3, #0]
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 80023b4:	689f      	ldr	r7, [r3, #8]
 80023b6:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80023ba:	402f      	ands	r7, r5
 80023bc:	433c      	orrs	r4, r7
    if (txbuffer->next != NULL)
 80023be:	f8d8 7008 	ldr.w	r7, [r8, #8]
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 80023c2:	609c      	str	r4, [r3, #8]
    if (txbuffer->next != NULL)
 80023c4:	2f00      	cmp	r7, #0
 80023c6:	d05a      	beq.n	800247e <ETH_Prepare_Tx_Descriptors+0x2a6>
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 80023c8:	683c      	ldr	r4, [r7, #0]
 80023ca:	605c      	str	r4, [r3, #4]
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 80023cc:	689c      	ldr	r4, [r3, #8]
 80023ce:	ea04 0806 	and.w	r8, r4, r6
 80023d2:	687c      	ldr	r4, [r7, #4]
 80023d4:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 80023d8:	609c      	str	r4, [r3, #8]
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 80023da:	f8d1 8000 	ldr.w	r8, [r1]
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 80023de:	68dc      	ldr	r4, [r3, #12]
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 80023e0:	f018 0f10 	tst.w	r8, #16
 80023e4:	d1ae      	bne.n	8002344 <ETH_Prepare_Tx_Descriptors+0x16c>
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 80023e6:	f8df b0f0 	ldr.w	fp, [pc, #240]	; 80024d8 <ETH_Prepare_Tx_Descriptors+0x300>
      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 80023ea:	f018 0f01 	tst.w	r8, #1
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 80023ee:	ea04 0b0b 	and.w	fp, r4, fp
 80023f2:	684c      	ldr	r4, [r1, #4]
 80023f4:	ea4b 0404 	orr.w	r4, fp, r4
 80023f8:	60dc      	str	r4, [r3, #12]
      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 80023fa:	d0af      	beq.n	800235c <ETH_Prepare_Tx_Descriptors+0x184>
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 80023fc:	68dc      	ldr	r4, [r3, #12]
 80023fe:	f424 3840 	bic.w	r8, r4, #196608	; 0x30000
 8002402:	694c      	ldr	r4, [r1, #20]
 8002404:	ea48 0404 	orr.w	r4, r8, r4
 8002408:	60dc      	str	r4, [r3, #12]
 800240a:	e7a7      	b.n	800235c <ETH_Prepare_Tx_Descriptors+0x184>
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800240c:	4654      	mov	r4, sl
 800240e:	f8d9 2018 	ldr.w	r2, [r9, #24]
      for (idx = 0; idx < descnbr; idx ++)
 8002412:	f1bb 0f00 	cmp.w	fp, #0
 8002416:	d011      	beq.n	800243c <ETH_Prepare_Tx_Descriptors+0x264>
 8002418:	2100      	movs	r1, #0
 800241a:	f3bf 8f5f 	dmb	sy
        INCR_TX_DESC_INDEX(descidx, 1U);
 800241e:	1c65      	adds	r5, r4, #1
        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8002420:	68d3      	ldr	r3, [r2, #12]
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002422:	3c03      	subs	r4, #3
      for (idx = 0; idx < descnbr; idx ++)
 8002424:	3101      	adds	r1, #1
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002426:	2d03      	cmp	r5, #3
        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8002428:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800242c:	bf98      	it	ls
 800242e:	462c      	movls	r4, r5
 8002430:	60d3      	str	r3, [r2, #12]
      for (idx = 0; idx < descnbr; idx ++)
 8002432:	4559      	cmp	r1, fp
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002434:	eb00 0384 	add.w	r3, r0, r4, lsl #2
 8002438:	699a      	ldr	r2, [r3, #24]
      for (idx = 0; idx < descnbr; idx ++)
 800243a:	d1ee      	bne.n	800241a <ETH_Prepare_Tx_Descriptors+0x242>
    return HAL_ETH_ERROR_BUSY;
 800243c:	2002      	movs	r0, #2
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
}
 800243e:	b003      	add	sp, #12
 8002440:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 8002444:	68da      	ldr	r2, [r3, #12]
 8002446:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800244a:	60da      	str	r2, [r3, #12]
 800244c:	f3bf 8f5f 	dmb	sy
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8002450:	68da      	ldr	r2, [r3, #12]
 8002452:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002456:	60da      	str	r2, [r3, #12]
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002458:	1c62      	adds	r2, r4, #1
 800245a:	2a03      	cmp	r2, #3
 800245c:	bf88      	it	hi
 800245e:	1ee2      	subhi	r2, r4, #3
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002460:	eb00 0382 	add.w	r3, r0, r2, lsl #2
 8002464:	699b      	ldr	r3, [r3, #24]
    if (READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8002466:	68dd      	ldr	r5, [r3, #12]
 8002468:	2d00      	cmp	r5, #0
 800246a:	db5f      	blt.n	800252c <ETH_Prepare_Tx_Descriptors+0x354>
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 800246c:	f8d1 c000 	ldr.w	ip, [r1]
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8002470:	f04f 0e02 	mov.w	lr, #2
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8002474:	f00c 0810 	and.w	r8, ip, #16
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8002478:	f00c 0704 	and.w	r7, ip, #4
 800247c:	e706      	b.n	800228c <ETH_Prepare_Tx_Descriptors+0xb4>
      WRITE_REG(dmatxdesc->DESC1, 0x0);
 800247e:	605f      	str	r7, [r3, #4]
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8002480:	4647      	mov	r7, r8
 8002482:	689c      	ldr	r4, [r3, #8]
 8002484:	4034      	ands	r4, r6
 8002486:	609c      	str	r4, [r3, #8]
 8002488:	e7a7      	b.n	80023da <ETH_Prepare_Tx_Descriptors+0x202>
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 800248a:	f8df 804c 	ldr.w	r8, [pc, #76]	; 80024d8 <ETH_Prepare_Tx_Descriptors+0x300>
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 800248e:	f01c 0f01 	tst.w	ip, #1
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8002492:	ea06 0808 	and.w	r8, r6, r8
 8002496:	684e      	ldr	r6, [r1, #4]
 8002498:	ea48 0606 	orr.w	r6, r8, r6
 800249c:	60de      	str	r6, [r3, #12]
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 800249e:	d006      	beq.n	80024ae <ETH_Prepare_Tx_Descriptors+0x2d6>
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 80024a0:	68de      	ldr	r6, [r3, #12]
 80024a2:	f426 3840 	bic.w	r8, r6, #196608	; 0x30000
 80024a6:	694e      	ldr	r6, [r1, #20]
 80024a8:	ea48 0606 	orr.w	r6, r8, r6
 80024ac:	60de      	str	r6, [r3, #12]
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != (uint32_t)RESET)
 80024ae:	f01c 0f20 	tst.w	ip, #32
 80024b2:	f43f af1d 	beq.w	80022f0 <ETH_Prepare_Tx_Descriptors+0x118>
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 80024b6:	68de      	ldr	r6, [r3, #12]
 80024b8:	f026 6c40 	bic.w	ip, r6, #201326592	; 0xc000000
 80024bc:	690e      	ldr	r6, [r1, #16]
 80024be:	ea4c 0606 	orr.w	r6, ip, r6
 80024c2:	60de      	str	r6, [r3, #12]
 80024c4:	e714      	b.n	80022f0 <ETH_Prepare_Tx_Descriptors+0x118>
 80024c6:	bf00      	nop
 80024c8:	ffff0000 	.word	0xffff0000
 80024cc:	ffffc000 	.word	0xffffc000
 80024d0:	c000ffff 	.word	0xc000ffff
 80024d4:	fffc0000 	.word	0xfffc0000
 80024d8:	ffff8000 	.word	0xffff8000
  while (txbuffer->next != NULL)
 80024dc:	46c4      	mov	ip, r8
  if (ItMode != ((uint32_t)RESET))
 80024de:	9901      	ldr	r1, [sp, #4]
 80024e0:	b1f9      	cbz	r1, 8002522 <ETH_Prepare_Tx_Descriptors+0x34a>
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 80024e2:	6899      	ldr	r1, [r3, #8]
 80024e4:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 80024e8:	6099      	str	r1, [r3, #8]
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 80024ea:	68d9      	ldr	r1, [r3, #12]
 80024ec:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80024f0:	60d9      	str	r1, [r3, #12]
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80024f2:	eb00 0382 	add.w	r3, r0, r2, lsl #2
 80024f6:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 80024f8:	62d9      	str	r1, [r3, #44]	; 0x2c
  dmatxdesclist->CurTxDesc = descidx;
 80024fa:	6282      	str	r2, [r0, #40]	; 0x28
  __ASM volatile ("cpsid i" : : : "memory");
 80024fc:	b672      	cpsid	i
  dmatxdesclist->BuffersInUse += bd_count + 1U;
 80024fe:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002500:	3301      	adds	r3, #1
 8002502:	4463      	add	r3, ip
 8002504:	6403      	str	r3, [r0, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002506:	b662      	cpsie	i
  return HAL_ETH_ERROR_NONE;
 8002508:	2000      	movs	r0, #0
}
 800250a:	b003      	add	sp, #12
 800250c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002510:	605d      	str	r5, [r3, #4]
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8002512:	4635      	mov	r5, r6
 8002514:	f8d3 a008 	ldr.w	sl, [r3, #8]
 8002518:	4e09      	ldr	r6, [pc, #36]	; (8002540 <ETH_Prepare_Tx_Descriptors+0x368>)
 800251a:	ea0a 0606 	and.w	r6, sl, r6
 800251e:	609e      	str	r6, [r3, #8]
 8002520:	e6ce      	b.n	80022c0 <ETH_Prepare_Tx_Descriptors+0xe8>
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8002522:	6899      	ldr	r1, [r3, #8]
 8002524:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8002528:	6099      	str	r1, [r3, #8]
 800252a:	e7de      	b.n	80024ea <ETH_Prepare_Tx_Descriptors+0x312>
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 800252c:	f8d9 2018 	ldr.w	r2, [r9, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8002530:	f3bf 8f5f 	dmb	sy
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8002534:	68d3      	ldr	r3, [r2, #12]
      return HAL_ETH_ERROR_BUSY;
 8002536:	2002      	movs	r0, #2
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8002538:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800253c:	60d3      	str	r3, [r2, #12]
      return HAL_ETH_ERROR_BUSY;
 800253e:	e77e      	b.n	800243e <ETH_Prepare_Tx_Descriptors+0x266>
 8002540:	c000ffff 	.word	0xc000ffff

08002544 <ETH_UpdateDescriptor>:
{
 8002544:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  uint8_t *buff = NULL;
 8002548:	2300      	movs	r3, #0
{
 800254a:	b083      	sub	sp, #12
  desccount = heth->RxDescList.RxBuildDescCnt;
 800254c:	e9d0 461a 	ldrd	r4, r6, [r0, #104]	; 0x68
  uint8_t *buff = NULL;
 8002550:	9301      	str	r3, [sp, #4]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002552:	f104 0312 	add.w	r3, r4, #18
 8002556:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
  while ((desccount > 0U) && (allocStatus != 0U))
 800255a:	b37e      	cbz	r6, 80025bc <ETH_UpdateDescriptor+0x78>
 800255c:	4607      	mov	r7, r0
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 800255e:	f04f 4901 	mov.w	r9, #2164260864	; 0x81000000
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 8002562:	f04f 4841 	mov.w	r8, #3238002688	; 0xc1000000
 8002566:	e00c      	b.n	8002582 <ETH_UpdateDescriptor+0x3e>
 8002568:	f8c5 800c 	str.w	r8, [r5, #12]
      INCR_RX_DESC_INDEX(descidx, 1U);
 800256c:	1c63      	adds	r3, r4, #1
 800256e:	3c03      	subs	r4, #3
 8002570:	2b03      	cmp	r3, #3
 8002572:	bf98      	it	ls
 8002574:	461c      	movls	r4, r3
  while ((desccount > 0U) && (allocStatus != 0U))
 8002576:	3e01      	subs	r6, #1
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002578:	f104 0312 	add.w	r3, r4, #18
 800257c:	f857 5023 	ldr.w	r5, [r7, r3, lsl #2]
  while ((desccount > 0U) && (allocStatus != 0U))
 8002580:	d011      	beq.n	80025a6 <ETH_UpdateDescriptor+0x62>
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8002582:	692b      	ldr	r3, [r5, #16]
 8002584:	b13b      	cbz	r3, 8002596 <ETH_UpdateDescriptor+0x52>
 8002586:	f3bf 8f5f 	dmb	sy
      if (heth->RxDescList.ItMode != 0U)
 800258a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800258c:	2b00      	cmp	r3, #0
 800258e:	d1eb      	bne.n	8002568 <ETH_UpdateDescriptor+0x24>
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 8002590:	f8c5 900c 	str.w	r9, [r5, #12]
 8002594:	e7ea      	b.n	800256c <ETH_UpdateDescriptor+0x28>
      HAL_ETH_RxAllocateCallback(&buff);
 8002596:	a801      	add	r0, sp, #4
 8002598:	f004 fa92 	bl	8006ac0 <HAL_ETH_RxAllocateCallback>
      if (buff == NULL)
 800259c:	9b01      	ldr	r3, [sp, #4]
 800259e:	b113      	cbz	r3, 80025a6 <ETH_UpdateDescriptor+0x62>
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 80025a0:	612b      	str	r3, [r5, #16]
        WRITE_REG(dmarxdesc->DESC0, (uint32_t)buff);
 80025a2:	602b      	str	r3, [r5, #0]
 80025a4:	e7ef      	b.n	8002586 <ETH_UpdateDescriptor+0x42>
  if (heth->RxDescList.RxBuildDescCnt != desccount)
 80025a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025a8:	42b3      	cmp	r3, r6
 80025aa:	d007      	beq.n	80025bc <ETH_UpdateDescriptor+0x78>
    WRITE_REG(heth->Instance->DMACRDTPR, 0);
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	2200      	movs	r2, #0
 80025b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025b4:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
    heth->RxDescList.RxBuildDescCnt = desccount;
 80025b8:	e9c7 461a 	strd	r4, r6, [r7, #104]	; 0x68
}
 80025bc:	b003      	add	sp, #12
 80025be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80025c2:	bf00      	nop

080025c4 <HAL_ETH_Start_IT>:
{
 80025c4:	b538      	push	{r3, r4, r5, lr}
  if (heth->gState == HAL_ETH_STATE_READY)
 80025c6:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 80025ca:	2b10      	cmp	r3, #16
 80025cc:	d001      	beq.n	80025d2 <HAL_ETH_Start_IT+0xe>
    return HAL_ERROR;
 80025ce:	2001      	movs	r0, #1
}
 80025d0:	bd38      	pop	{r3, r4, r5, pc}
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 80025d2:	6803      	ldr	r3, [r0, #0]
    heth->gState = HAL_ETH_STATE_BUSY;
 80025d4:	2523      	movs	r5, #35	; 0x23
    heth->RxDescList.ItMode = 1U;
 80025d6:	2201      	movs	r2, #1
 80025d8:	4604      	mov	r4, r0
    heth->gState = HAL_ETH_STATE_BUSY;
 80025da:	f8c0 5084 	str.w	r5, [r0, #132]	; 0x84
    heth->RxDescList.ItMode = 1U;
 80025de:	6582      	str	r2, [r0, #88]	; 0x58
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 80025e0:	f8d3 170c 	ldr.w	r1, [r3, #1804]	; 0x70c
 80025e4:	4a1d      	ldr	r2, [pc, #116]	; (800265c <HAL_ETH_Start_IT+0x98>)
 80025e6:	430a      	orrs	r2, r1
 80025e8:	f8c3 270c 	str.w	r2, [r3, #1804]	; 0x70c
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 80025ec:	4a1c      	ldr	r2, [pc, #112]	; (8002660 <HAL_ETH_Start_IT+0x9c>)
 80025ee:	f8d3 1710 	ldr.w	r1, [r3, #1808]	; 0x710
 80025f2:	430a      	orrs	r2, r1
 80025f4:	f8c3 2710 	str.w	r2, [r3, #1808]	; 0x710
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80025f8:	2304      	movs	r3, #4
 80025fa:	66c3      	str	r3, [r0, #108]	; 0x6c
    ETH_UpdateDescriptor(heth);
 80025fc:	f7ff ffa2 	bl	8002544 <ETH_UpdateDescriptor>
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8002600:	6822      	ldr	r2, [r4, #0]
    return HAL_OK;
 8002602:	2000      	movs	r0, #0
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8002604:	6811      	ldr	r1, [r2, #0]
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8002606:	f502 5380 	add.w	r3, r2, #4096	; 0x1000
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800260a:	f041 0102 	orr.w	r1, r1, #2
 800260e:	6011      	str	r1, [r2, #0]
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8002610:	6811      	ldr	r1, [r2, #0]
 8002612:	f041 0101 	orr.w	r1, r1, #1
 8002616:	6011      	str	r1, [r2, #0]
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8002618:	f8d2 1d00 	ldr.w	r1, [r2, #3328]	; 0xd00
 800261c:	f041 0101 	orr.w	r1, r1, #1
 8002620:	f8c2 1d00 	str.w	r1, [r2, #3328]	; 0xd00
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8002624:	f24d 02c1 	movw	r2, #53441	; 0xd0c1
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8002628:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
 800262c:	f041 0101 	orr.w	r1, r1, #1
 8002630:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8002634:	f8d3 1108 	ldr.w	r1, [r3, #264]	; 0x108
 8002638:	f041 0101 	orr.w	r1, r1, #1
 800263c:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 8002640:	f8d3 1160 	ldr.w	r1, [r3, #352]	; 0x160
 8002644:	f441 7181 	orr.w	r1, r1, #258	; 0x102
 8002648:	f8c3 1160 	str.w	r1, [r3, #352]	; 0x160
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 800264c:	f8d3 1134 	ldr.w	r1, [r3, #308]	; 0x134
 8002650:	430a      	orrs	r2, r1
 8002652:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
    heth->gState = HAL_ETH_STATE_STARTED;
 8002656:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
}
 800265a:	bd38      	pop	{r3, r4, r5, pc}
 800265c:	0c020060 	.word	0x0c020060
 8002660:	0c20c000 	.word	0x0c20c000

08002664 <HAL_ETH_Stop_IT>:
  if (heth->gState == HAL_ETH_STATE_STARTED)
 8002664:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 8002668:	2a23      	cmp	r2, #35	; 0x23
 800266a:	d001      	beq.n	8002670 <HAL_ETH_Stop_IT+0xc>
    return HAL_ERROR;
 800266c:	2001      	movs	r0, #1
}
 800266e:	4770      	bx	lr
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8002670:	4601      	mov	r1, r0
 8002672:	4603      	mov	r3, r0
{
 8002674:	b430      	push	{r4, r5}
    heth->gState = HAL_ETH_STATE_BUSY;
 8002676:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 800267a:	f103 0c54 	add.w	ip, r3, #84	; 0x54
 800267e:	f851 2b44 	ldr.w	r2, [r1], #68
 8002682:	4c19      	ldr	r4, [pc, #100]	; (80026e8 <HAL_ETH_Stop_IT+0x84>)
 8002684:	f502 5080 	add.w	r0, r2, #4096	; 0x1000
 8002688:	f8d0 5134 	ldr.w	r5, [r0, #308]	; 0x134
 800268c:	402c      	ands	r4, r5
 800268e:	f8c0 4134 	str.w	r4, [r0, #308]	; 0x134
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8002692:	f8d0 4104 	ldr.w	r4, [r0, #260]	; 0x104
 8002696:	f024 0401 	bic.w	r4, r4, #1
 800269a:	f8c0 4104 	str.w	r4, [r0, #260]	; 0x104
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 800269e:	f8d0 4108 	ldr.w	r4, [r0, #264]	; 0x108
 80026a2:	f024 0401 	bic.w	r4, r4, #1
 80026a6:	f8c0 4108 	str.w	r4, [r0, #264]	; 0x108
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80026aa:	6810      	ldr	r0, [r2, #0]
 80026ac:	f020 0001 	bic.w	r0, r0, #1
 80026b0:	6010      	str	r0, [r2, #0]
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 80026b2:	f8d2 0d00 	ldr.w	r0, [r2, #3328]	; 0xd00
 80026b6:	f040 0001 	orr.w	r0, r0, #1
 80026ba:	f8c2 0d00 	str.w	r0, [r2, #3328]	; 0xd00
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80026be:	6810      	ldr	r0, [r2, #0]
 80026c0:	f020 0002 	bic.w	r0, r0, #2
 80026c4:	6010      	str	r0, [r2, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 80026c6:	f851 0f04 	ldr.w	r0, [r1, #4]!
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 80026ca:	68c2      	ldr	r2, [r0, #12]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 80026cc:	4561      	cmp	r1, ip
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 80026ce:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 80026d2:	60c2      	str	r2, [r0, #12]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 80026d4:	d1f7      	bne.n	80026c6 <HAL_ETH_Stop_IT+0x62>
    heth->RxDescList.ItMode = 0U;
 80026d6:	2200      	movs	r2, #0
    heth->gState = HAL_ETH_STATE_READY;
 80026d8:	2110      	movs	r1, #16
    return HAL_OK;
 80026da:	4610      	mov	r0, r2
    heth->RxDescList.ItMode = 0U;
 80026dc:	659a      	str	r2, [r3, #88]	; 0x58
    heth->gState = HAL_ETH_STATE_READY;
 80026de:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
}
 80026e2:	bc30      	pop	{r4, r5}
 80026e4:	4770      	bx	lr
 80026e6:	bf00      	nop
 80026e8:	ffff2f3e 	.word	0xffff2f3e

080026ec <HAL_ETH_Transmit_IT>:
{
 80026ec:	b510      	push	{r4, lr}
 80026ee:	4604      	mov	r4, r0
  if (pTxConfig == NULL)
 80026f0:	b329      	cbz	r1, 800273e <HAL_ETH_Transmit_IT+0x52>
  if (heth->gState == HAL_ETH_STATE_STARTED)
 80026f2:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 80026f6:	2a23      	cmp	r2, #35	; 0x23
 80026f8:	d001      	beq.n	80026fe <HAL_ETH_Transmit_IT+0x12>
    return HAL_ERROR;
 80026fa:	2001      	movs	r0, #1
}
 80026fc:	bd10      	pop	{r4, pc}
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 80026fe:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8002700:	2201      	movs	r2, #1
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8002702:	63c3      	str	r3, [r0, #60]	; 0x3c
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8002704:	f7ff fd68 	bl	80021d8 <ETH_Prepare_Tx_Descriptors>
 8002708:	b138      	cbz	r0, 800271a <HAL_ETH_Transmit_IT+0x2e>
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 800270a:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
      return HAL_ERROR;
 800270e:	2001      	movs	r0, #1
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8002710:	f043 0302 	orr.w	r3, r3, #2
 8002714:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
}
 8002718:	bd10      	pop	{r4, pc}
  __ASM volatile ("dsb 0xF":::"memory");
 800271a:	f3bf 8f4f 	dsb	sy
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 800271e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    return HAL_OK;
 8002720:	2000      	movs	r0, #0
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8002722:	1c53      	adds	r3, r2, #1
 8002724:	2b03      	cmp	r3, #3
 8002726:	bf88      	it	hi
 8002728:	1ed3      	subhi	r3, r2, #3
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 800272a:	6822      	ldr	r2, [r4, #0]
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 800272c:	62a3      	str	r3, [r4, #40]	; 0x28
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 800272e:	3306      	adds	r3, #6
 8002730:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 8002734:	f502 5380 	add.w	r3, r2, #4096	; 0x1000
 8002738:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
}
 800273c:	bd10      	pop	{r4, pc}
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800273e:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
    return HAL_ERROR;
 8002742:	2001      	movs	r0, #1
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8002744:	4303      	orrs	r3, r0
 8002746:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
}
 800274a:	bd10      	pop	{r4, pc}

0800274c <HAL_ETH_ReadData>:
{
 800274c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002750:	b085      	sub	sp, #20
 8002752:	4604      	mov	r4, r0
  if (pAppBuff == NULL)
 8002754:	9103      	str	r1, [sp, #12]
 8002756:	2900      	cmp	r1, #0
 8002758:	d06d      	beq.n	8002836 <HAL_ETH_ReadData+0xea>
  if (heth->gState != HAL_ETH_STATE_STARTED)
 800275a:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 800275e:	2b23      	cmp	r3, #35	; 0x23
 8002760:	d15e      	bne.n	8002820 <HAL_ETH_ReadData+0xd4>
  descidx = heth->RxDescList.RxDescIdx;
 8002762:	f8d0 805c 	ldr.w	r8, [r0, #92]	; 0x5c
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002766:	f108 0312 	add.w	r3, r8, #18
 800276a:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 800276e:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002770:	68ea      	ldr	r2, [r5, #12]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8002772:	f1c3 0b04 	rsb	fp, r3, #4
         && (rxdataready == 0U))
 8002776:	2a00      	cmp	r2, #0
 8002778:	db6a      	blt.n	8002850 <HAL_ETH_ReadData+0x104>
 800277a:	f1bb 0f00 	cmp.w	fp, #0
 800277e:	d069      	beq.n	8002854 <HAL_ETH_ReadData+0x108>
  uint32_t desccnt = 0U;
 8002780:	f04f 0900 	mov.w	r9, #0
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8002784:	f100 0180 	add.w	r1, r0, #128	; 0x80
 8002788:	307c      	adds	r0, #124	; 0x7c
      dmarxdesc->BackupAddr0 = 0;
 800278a:	46ca      	mov	sl, r9
 800278c:	e003      	b.n	8002796 <HAL_ETH_ReadData+0x4a>
         && (rxdataready == 0U))
 800278e:	45cb      	cmp	fp, r9
 8002790:	d93f      	bls.n	8002812 <HAL_ETH_ReadData+0xc6>
 8002792:	2e00      	cmp	r6, #0
 8002794:	d13d      	bne.n	8002812 <HAL_ETH_ReadData+0xc6>
    if (READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 8002796:	68eb      	ldr	r3, [r5, #12]
 8002798:	005e      	lsls	r6, r3, #1
 800279a:	d503      	bpl.n	80027a4 <HAL_ETH_ReadData+0x58>
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC1;
 800279c:	686b      	ldr	r3, [r5, #4]
 800279e:	67a3      	str	r3, [r4, #120]	; 0x78
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC0;
 80027a0:	682b      	ldr	r3, [r5, #0]
 80027a2:	6763      	str	r3, [r4, #116]	; 0x74
    if ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 80027a4:	68eb      	ldr	r3, [r5, #12]
 80027a6:	009a      	lsls	r2, r3, #2
 80027a8:	d401      	bmi.n	80027ae <HAL_ETH_ReadData+0x62>
 80027aa:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
 80027ac:	b30e      	cbz	r6, 80027f2 <HAL_ETH_ReadData+0xa6>
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 80027ae:	68eb      	ldr	r3, [r5, #12]
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 80027b0:	68ee      	ldr	r6, [r5, #12]
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 80027b2:	009b      	lsls	r3, r3, #2
      bufflength = heth->Init.RxBuffLen;
 80027b4:	6967      	ldr	r7, [r4, #20]
        heth->RxDescList.RxDataLength = 0;
 80027b6:	bf48      	it	mi
 80027b8:	e9c4 aa18 	strdmi	sl, sl, [r4, #96]	; 0x60
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 80027bc:	f016 5680 	ands.w	r6, r6, #268435456	; 0x10000000
 80027c0:	d007      	beq.n	80027d2 <HAL_ETH_ReadData+0x86>
        bufflength = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - heth->RxDescList.RxDataLength;
 80027c2:	68ef      	ldr	r7, [r5, #12]
        rxdataready = 1;
 80027c4:	2601      	movs	r6, #1
        bufflength = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - heth->RxDescList.RxDataLength;
 80027c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80027c8:	f3c7 070e 	ubfx	r7, r7, #0, #15
 80027cc:	1aff      	subs	r7, r7, r3
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC3;
 80027ce:	68eb      	ldr	r3, [r5, #12]
 80027d0:	6723      	str	r3, [r4, #112]	; 0x70
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80027d2:	b2bb      	uxth	r3, r7
 80027d4:	692a      	ldr	r2, [r5, #16]
 80027d6:	e9cd 0101 	strd	r0, r1, [sp, #4]
 80027da:	f004 f995 	bl	8006b08 <HAL_ETH_RxLinkCallback>
      heth->RxDescList.RxDescCnt++;
 80027de:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80027e0:	3301      	adds	r3, #1
 80027e2:	6623      	str	r3, [r4, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 80027e4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80027e6:	e9dd 0101 	ldrd	r0, r1, [sp, #4]
 80027ea:	443b      	add	r3, r7
 80027ec:	6663      	str	r3, [r4, #100]	; 0x64
      dmarxdesc->BackupAddr0 = 0;
 80027ee:	f8c5 a010 	str.w	sl, [r5, #16]
    INCR_RX_DESC_INDEX(descidx, 1U);
 80027f2:	f108 0301 	add.w	r3, r8, #1
    desccnt++;
 80027f6:	f109 0901 	add.w	r9, r9, #1
    INCR_RX_DESC_INDEX(descidx, 1U);
 80027fa:	2b03      	cmp	r3, #3
 80027fc:	bf8c      	ite	hi
 80027fe:	f1a8 0803 	subhi.w	r8, r8, #3
 8002802:	4698      	movls	r8, r3
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002804:	f108 0312 	add.w	r3, r8, #18
 8002808:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800280c:	68eb      	ldr	r3, [r5, #12]
         && (rxdataready == 0U))
 800280e:	2b00      	cmp	r3, #0
 8002810:	dabd      	bge.n	800278e <HAL_ETH_ReadData+0x42>
  heth->RxDescList.RxBuildDescCnt += desccnt;
 8002812:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8002814:	444b      	add	r3, r9
 8002816:	66e3      	str	r3, [r4, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8002818:	b9b3      	cbnz	r3, 8002848 <HAL_ETH_ReadData+0xfc>
  heth->RxDescList.RxDescIdx = descidx;
 800281a:	f8c4 805c 	str.w	r8, [r4, #92]	; 0x5c
  if (rxdataready == 1U)
 800281e:	b91e      	cbnz	r6, 8002828 <HAL_ETH_ReadData+0xdc>
    return HAL_ERROR;
 8002820:	2001      	movs	r0, #1
}
 8002822:	b005      	add	sp, #20
 8002824:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    *pAppBuff = heth->RxDescList.pRxStart;
 8002828:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
    heth->RxDescList.pRxStart = NULL;
 800282a:	2300      	movs	r3, #0
    *pAppBuff = heth->RxDescList.pRxStart;
 800282c:	9903      	ldr	r1, [sp, #12]
    return HAL_OK;
 800282e:	4618      	mov	r0, r3
    *pAppBuff = heth->RxDescList.pRxStart;
 8002830:	600a      	str	r2, [r1, #0]
    heth->RxDescList.pRxStart = NULL;
 8002832:	67e3      	str	r3, [r4, #124]	; 0x7c
    return HAL_OK;
 8002834:	e7f5      	b.n	8002822 <HAL_ETH_ReadData+0xd6>
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8002836:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
    return HAL_ERROR;
 800283a:	2001      	movs	r0, #1
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800283c:	4303      	orrs	r3, r0
 800283e:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
}
 8002842:	b005      	add	sp, #20
 8002844:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ETH_UpdateDescriptor(heth);
 8002848:	4620      	mov	r0, r4
 800284a:	f7ff fe7b 	bl	8002544 <ETH_UpdateDescriptor>
 800284e:	e7e4      	b.n	800281a <HAL_ETH_ReadData+0xce>
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8002850:	2b00      	cmp	r3, #0
 8002852:	d0e5      	beq.n	8002820 <HAL_ETH_ReadData+0xd4>
    ETH_UpdateDescriptor(heth);
 8002854:	f7ff fe76 	bl	8002544 <ETH_UpdateDescriptor>
  heth->RxDescList.RxDescIdx = descidx;
 8002858:	f8c4 805c 	str.w	r8, [r4, #92]	; 0x5c
  if (rxdataready == 1U)
 800285c:	e7e0      	b.n	8002820 <HAL_ETH_ReadData+0xd4>
 800285e:	bf00      	nop

08002860 <HAL_ETH_ReleaseTxPacket>:
{
 8002860:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8002864:	e9d0 5410 	ldrd	r5, r4, [r0, #64]	; 0x40
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8002868:	b17d      	cbz	r5, 800288a <HAL_ETH_ReleaseTxPacket+0x2a>
 800286a:	4606      	mov	r6, r0
        dmatxdesclist->PacketAddress[idx] = NULL;
 800286c:	2700      	movs	r7, #0
      if ((heth->Init.TxDesc[idx].DESC3 & ETH_DMATXNDESCRF_OWN) == 0U)
 800286e:	eb06 0884 	add.w	r8, r6, r4, lsl #2
    numOfBuf--;
 8002872:	3d01      	subs	r5, #1
      if ((heth->Init.TxDesc[idx].DESC3 & ETH_DMATXNDESCRF_OWN) == 0U)
 8002874:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8002878:	f8d8 002c 	ldr.w	r0, [r8, #44]	; 0x2c
 800287c:	b140      	cbz	r0, 8002890 <HAL_ETH_ReleaseTxPacket+0x30>
      if ((heth->Init.TxDesc[idx].DESC3 & ETH_DMATXNDESCRF_OWN) == 0U)
 800287e:	68f3      	ldr	r3, [r6, #12]
 8002880:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002884:	68db      	ldr	r3, [r3, #12]
 8002886:	2b00      	cmp	r3, #0
 8002888:	da08      	bge.n	800289c <HAL_ETH_ReleaseTxPacket+0x3c>
}
 800288a:	2000      	movs	r0, #0
 800288c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8002890:	3401      	adds	r4, #1
 8002892:	f004 0403 	and.w	r4, r4, #3
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8002896:	2d00      	cmp	r5, #0
 8002898:	d1e9      	bne.n	800286e <HAL_ETH_ReleaseTxPacket+0xe>
 800289a:	e7f6      	b.n	800288a <HAL_ETH_ReleaseTxPacket+0x2a>
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 800289c:	3401      	adds	r4, #1
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 800289e:	f004 f963 	bl	8006b68 <HAL_ETH_TxFreeCallback>
        dmatxdesclist->PacketAddress[idx] = NULL;
 80028a2:	f8c8 702c 	str.w	r7, [r8, #44]	; 0x2c
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 80028a6:	f004 0403 	and.w	r4, r4, #3
        dmatxdesclist->BuffersInUse = numOfBuf;
 80028aa:	6435      	str	r5, [r6, #64]	; 0x40
        dmatxdesclist->releaseIndex = idx;
 80028ac:	6474      	str	r4, [r6, #68]	; 0x44
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 80028ae:	2d00      	cmp	r5, #0
 80028b0:	d1dd      	bne.n	800286e <HAL_ETH_ReleaseTxPacket+0xe>
 80028b2:	e7ea      	b.n	800288a <HAL_ETH_ReleaseTxPacket+0x2a>

080028b4 <HAL_ETH_PMTCallback>:
 80028b4:	4770      	bx	lr
 80028b6:	bf00      	nop

080028b8 <HAL_ETH_EEECallback>:
 80028b8:	4770      	bx	lr
 80028ba:	bf00      	nop

080028bc <HAL_ETH_WakeUpCallback>:
 80028bc:	4770      	bx	lr
 80028be:	bf00      	nop

080028c0 <HAL_ETH_IRQHandler>:
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_RI))
 80028c0:	6803      	ldr	r3, [r0, #0]
 80028c2:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 80028c6:	f8d2 1160 	ldr.w	r1, [r2, #352]	; 0x160
 80028ca:	0649      	lsls	r1, r1, #25
{
 80028cc:	b510      	push	{r4, lr}
 80028ce:	4604      	mov	r4, r0
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_RI))
 80028d0:	d504      	bpl.n	80028dc <HAL_ETH_IRQHandler+0x1c>
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_RIE))
 80028d2:	f8d2 1134 	ldr.w	r1, [r2, #308]	; 0x134
 80028d6:	0649      	lsls	r1, r1, #25
 80028d8:	f100 808a 	bmi.w	80029f0 <HAL_ETH_IRQHandler+0x130>
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_TI))
 80028dc:	f8d2 1160 	ldr.w	r1, [r2, #352]	; 0x160
 80028e0:	07c8      	lsls	r0, r1, #31
 80028e2:	d503      	bpl.n	80028ec <HAL_ETH_IRQHandler+0x2c>
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_TIE))
 80028e4:	f8d2 1134 	ldr.w	r1, [r2, #308]	; 0x134
 80028e8:	07c9      	lsls	r1, r1, #31
 80028ea:	d476      	bmi.n	80029da <HAL_ETH_IRQHandler+0x11a>
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_AIS))
 80028ec:	f8d2 1160 	ldr.w	r1, [r2, #352]	; 0x160
 80028f0:	0448      	lsls	r0, r1, #17
 80028f2:	d503      	bpl.n	80028fc <HAL_ETH_IRQHandler+0x3c>
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_AIE))
 80028f4:	f8d2 1134 	ldr.w	r1, [r2, #308]	; 0x134
 80028f8:	0449      	lsls	r1, r1, #17
 80028fa:	d41b      	bmi.n	8002934 <HAL_ETH_IRQHandler+0x74>
  macirqenable = heth->Instance->MACIER;
 80028fc:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
  if (((macirqenable & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 8002900:	f412 4fc0 	tst.w	r2, #24576	; 0x6000
 8002904:	d133      	bne.n	800296e <HAL_ETH_IRQHandler+0xae>
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8002906:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800290a:	06d0      	lsls	r0, r2, #27
 800290c:	d447      	bmi.n	800299e <HAL_ETH_IRQHandler+0xde>
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_LPI_IT))
 800290e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002912:	0691      	lsls	r1, r2, #26
 8002914:	d454      	bmi.n	80029c0 <HAL_ETH_IRQHandler+0x100>
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8002916:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800291a:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 800291e:	0252      	lsls	r2, r2, #9
 8002920:	d400      	bmi.n	8002924 <HAL_ETH_IRQHandler+0x64>
}
 8002922:	bd10      	pop	{r4, pc}
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8002924:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    HAL_ETH_WakeUpCallback(heth);
 8002928:	4620      	mov	r0, r4
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 800292a:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    HAL_ETH_WakeUpCallback(heth);
 800292e:	f7ff ffc5 	bl	80028bc <HAL_ETH_WakeUpCallback>
}
 8002932:	bd10      	pop	{r4, pc}
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8002934:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8002938:	f043 0308 	orr.w	r3, r3, #8
 800293c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_FBE))
 8002940:	f8d2 3160 	ldr.w	r3, [r2, #352]	; 0x160
 8002944:	f413 5f80 	tst.w	r3, #4096	; 0x1000
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 8002948:	f8d2 3160 	ldr.w	r3, [r2, #352]	; 0x160
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_FBE))
 800294c:	d15a      	bne.n	8002a04 <HAL_ETH_IRQHandler+0x144>
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 800294e:	f44f 41cd 	mov.w	r1, #26240	; 0x6680
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8002952:	400b      	ands	r3, r1
 8002954:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8002958:	f8c2 1160 	str.w	r1, [r2, #352]	; 0x160
      HAL_ETH_ErrorCallback(heth);
 800295c:	4620      	mov	r0, r4
 800295e:	f003 ff0d 	bl	800677c <HAL_ETH_ErrorCallback>
  macirqenable = heth->Instance->MACIER;
 8002962:	6823      	ldr	r3, [r4, #0]
 8002964:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
  if (((macirqenable & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 8002968:	f412 4fc0 	tst.w	r2, #24576	; 0x6000
 800296c:	d0cb      	beq.n	8002906 <HAL_ETH_IRQHandler+0x46>
    heth->ErrorCode |= HAL_ETH_ERROR_MAC;
 800296e:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
    heth->gState = HAL_ETH_STATE_ERROR;
 8002972:	21e0      	movs	r1, #224	; 0xe0
    HAL_ETH_ErrorCallback(heth);
 8002974:	4620      	mov	r0, r4
    heth->ErrorCode |= HAL_ETH_ERROR_MAC;
 8002976:	f042 0210 	orr.w	r2, r2, #16
 800297a:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 800297e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8002982:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
    heth->gState = HAL_ETH_STATE_ERROR;
 8002986:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
    HAL_ETH_ErrorCallback(heth);
 800298a:	f003 fef7 	bl	800677c <HAL_ETH_ErrorCallback>
    heth->MACErrorCode = (uint32_t)(0x0U);
 800298e:	2200      	movs	r2, #0
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8002990:	6823      	ldr	r3, [r4, #0]
    heth->MACErrorCode = (uint32_t)(0x0U);
 8002992:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8002996:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800299a:	06d0      	lsls	r0, r2, #27
 800299c:	d5b7      	bpl.n	800290e <HAL_ETH_IRQHandler+0x4e>
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 800299e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
    HAL_ETH_PMTCallback(heth);
 80029a2:	4620      	mov	r0, r4
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 80029a4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80029a8:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
    HAL_ETH_PMTCallback(heth);
 80029ac:	f7ff ff82 	bl	80028b4 <HAL_ETH_PMTCallback>
    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 80029b0:	2200      	movs	r2, #0
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_LPI_IT))
 80029b2:	6823      	ldr	r3, [r4, #0]
    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 80029b4:	f8c4 2094 	str.w	r2, [r4, #148]	; 0x94
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_LPI_IT))
 80029b8:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80029bc:	0691      	lsls	r1, r2, #26
 80029be:	d5aa      	bpl.n	8002916 <HAL_ETH_IRQHandler+0x56>
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACPCSR, 0x0000000FU);
 80029c0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
    HAL_ETH_EEECallback(heth);
 80029c4:	4620      	mov	r0, r4
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACPCSR, 0x0000000FU);
 80029c6:	f003 030f 	and.w	r3, r3, #15
 80029ca:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
    HAL_ETH_EEECallback(heth);
 80029ce:	f7ff ff73 	bl	80028b8 <HAL_ETH_EEECallback>
    heth->MACLPIEvent = (uint32_t)(0x0U);
 80029d2:	2300      	movs	r3, #0
 80029d4:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
 80029d8:	e79d      	b.n	8002916 <HAL_ETH_IRQHandler+0x56>
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 80029da:	f248 0301 	movw	r3, #32769	; 0x8001
      HAL_ETH_TxCpltCallback(heth);
 80029de:	4620      	mov	r0, r4
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 80029e0:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
      HAL_ETH_TxCpltCallback(heth);
 80029e4:	f003 fec4 	bl	8006770 <HAL_ETH_TxCpltCallback>
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_AIS))
 80029e8:	6823      	ldr	r3, [r4, #0]
 80029ea:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 80029ee:	e77d      	b.n	80028ec <HAL_ETH_IRQHandler+0x2c>
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 80029f0:	f248 0340 	movw	r3, #32832	; 0x8040
 80029f4:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
      HAL_ETH_RxCpltCallback(heth);
 80029f8:	f003 feb4 	bl	8006764 <HAL_ETH_RxCpltCallback>
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_TI))
 80029fc:	6823      	ldr	r3, [r4, #0]
 80029fe:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8002a02:	e76b      	b.n	80028dc <HAL_ETH_IRQHandler+0x1c>
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 8002a04:	f241 1002 	movw	r0, #4354	; 0x1102
        heth->gState = HAL_ETH_STATE_ERROR;
 8002a08:	21e0      	movs	r1, #224	; 0xe0
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 8002a0a:	4003      	ands	r3, r0
 8002a0c:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 8002a10:	f8d2 3134 	ldr.w	r3, [r2, #308]	; 0x134
 8002a14:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002a18:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
        heth->gState = HAL_ETH_STATE_ERROR;
 8002a1c:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
 8002a20:	e79c      	b.n	800295c <HAL_ETH_IRQHandler+0x9c>
 8002a22:	bf00      	nop

08002a24 <HAL_ETH_ReadPHYRegister>:
{
 8002a24:	b570      	push	{r4, r5, r6, lr}
 8002a26:	4604      	mov	r4, r0
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8002a28:	6800      	ldr	r0, [r0, #0]
{
 8002a2a:	461d      	mov	r5, r3
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8002a2c:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
 8002a30:	07db      	lsls	r3, r3, #31
 8002a32:	d501      	bpl.n	8002a38 <HAL_ETH_ReadPHYRegister+0x14>
    return HAL_ERROR;
 8002a34:	2001      	movs	r0, #1
}
 8002a36:	bd70      	pop	{r4, r5, r6, pc}
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8002a38:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8002a3c:	f023 7378 	bic.w	r3, r3, #65011712	; 0x3e00000
 8002a40:	ea43 5141 	orr.w	r1, r3, r1, lsl #21
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8002a44:	f421 13f8 	bic.w	r3, r1, #2031616	; 0x1f0000
 8002a48:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8002a4c:	f042 020d 	orr.w	r2, r2, #13
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 8002a50:	f8c0 2200 	str.w	r2, [r0, #512]	; 0x200
  tickstart = HAL_GetTick();
 8002a54:	f7fe ffb6 	bl	80019c4 <HAL_GetTick>
 8002a58:	4606      	mov	r6, r0
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8002a5a:	e005      	b.n	8002a68 <HAL_ETH_ReadPHYRegister+0x44>
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8002a5c:	f7fe ffb2 	bl	80019c4 <HAL_GetTick>
 8002a60:	1b82      	subs	r2, r0, r6
 8002a62:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 8002a66:	d8e5      	bhi.n	8002a34 <HAL_ETH_ReadPHYRegister+0x10>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8002a68:	6821      	ldr	r1, [r4, #0]
 8002a6a:	f8d1 2200 	ldr.w	r2, [r1, #512]	; 0x200
 8002a6e:	f012 0201 	ands.w	r2, r2, #1
 8002a72:	d1f3      	bne.n	8002a5c <HAL_ETH_ReadPHYRegister+0x38>
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 8002a74:	f8d1 3204 	ldr.w	r3, [r1, #516]	; 0x204
  return HAL_OK;
 8002a78:	4610      	mov	r0, r2
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 8002a7a:	b29b      	uxth	r3, r3
 8002a7c:	602b      	str	r3, [r5, #0]
}
 8002a7e:	bd70      	pop	{r4, r5, r6, pc}

08002a80 <HAL_ETH_WritePHYRegister>:
{
 8002a80:	b538      	push	{r3, r4, r5, lr}
 8002a82:	4604      	mov	r4, r0
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8002a84:	6800      	ldr	r0, [r0, #0]
 8002a86:	f8d0 5200 	ldr.w	r5, [r0, #512]	; 0x200
 8002a8a:	07ed      	lsls	r5, r5, #31
 8002a8c:	d501      	bpl.n	8002a92 <HAL_ETH_WritePHYRegister+0x12>
    return HAL_ERROR;
 8002a8e:	2001      	movs	r0, #1
}
 8002a90:	bd38      	pop	{r3, r4, r5, pc}
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8002a92:	f8d0 0200 	ldr.w	r0, [r0, #512]	; 0x200
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8002a96:	b29b      	uxth	r3, r3
 8002a98:	f020 7078 	bic.w	r0, r0, #65011712	; 0x3e00000
 8002a9c:	ea40 5141 	orr.w	r1, r0, r1, lsl #21
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 8002aa0:	480f      	ldr	r0, [pc, #60]	; (8002ae0 <HAL_ETH_WritePHYRegister+0x60>)
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8002aa2:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 8002aa6:	f8c0 3204 	str.w	r3, [r0, #516]	; 0x204
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8002aaa:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 8002aae:	f022 030c 	bic.w	r3, r2, #12
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8002ab2:	f043 0305 	orr.w	r3, r3, #5
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 8002ab6:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
  tickstart = HAL_GetTick();
 8002aba:	f7fe ff83 	bl	80019c4 <HAL_GetTick>
 8002abe:	4605      	mov	r5, r0
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8002ac0:	e005      	b.n	8002ace <HAL_ETH_WritePHYRegister+0x4e>
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8002ac2:	f7fe ff7f 	bl	80019c4 <HAL_GetTick>
 8002ac6:	1b43      	subs	r3, r0, r5
 8002ac8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002acc:	d8df      	bhi.n	8002a8e <HAL_ETH_WritePHYRegister+0xe>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8002ace:	6823      	ldr	r3, [r4, #0]
 8002ad0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002ad4:	f013 0301 	ands.w	r3, r3, #1
 8002ad8:	d1f3      	bne.n	8002ac2 <HAL_ETH_WritePHYRegister+0x42>
  return HAL_OK;
 8002ada:	4618      	mov	r0, r3
}
 8002adc:	bd38      	pop	{r3, r4, r5, pc}
 8002ade:	bf00      	nop
 8002ae0:	40028000 	.word	0x40028000

08002ae4 <HAL_ETH_GetMACConfig>:
  if (macconf == NULL)
 8002ae4:	2900      	cmp	r1, #0
 8002ae6:	f000 80c4 	beq.w	8002c72 <HAL_ETH_GetMACConfig+0x18e>
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8002aea:	6803      	ldr	r3, [r0, #0]
  return HAL_OK;
 8002aec:	2000      	movs	r0, #0
{
 8002aee:	b410      	push	{r4}
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8002af0:	681c      	ldr	r4, [r3, #0]
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8002af2:	681a      	ldr	r2, [r3, #0]
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8002af4:	f004 040c 	and.w	r4, r4, #12
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8002af8:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8002afc:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8002b00:	681a      	ldr	r2, [r3, #0]
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8002b02:	62cc      	str	r4, [r1, #44]	; 0x2c
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8002b04:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8002b08:	624a      	str	r2, [r1, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	f482 7280 	eor.w	r2, r2, #256	; 0x100
 8002b10:	f3c2 2200 	ubfx	r2, r2, #8, #1
 8002b14:	f881 2020 	strb.w	r2, [r1, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8002b18:	681a      	ldr	r2, [r3, #0]
                                        ? ENABLE : DISABLE;
 8002b1a:	f3c2 2240 	ubfx	r2, r2, #9, #1
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8002b1e:	77ca      	strb	r2, [r1, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	f482 6280 	eor.w	r2, r2, #1024	; 0x400
 8002b26:	f3c2 2280 	ubfx	r2, r2, #10, #1
 8002b2a:	778a      	strb	r2, [r1, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8002b2c:	681a      	ldr	r2, [r3, #0]
                                                   ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 8002b2e:	f3c2 22c0 	ubfx	r2, r2, #11, #1
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8002b32:	774a      	strb	r2, [r1, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	f3c2 3200 	ubfx	r2, r2, #12, #1
 8002b3a:	770a      	strb	r2, [r1, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8002b3c:	681c      	ldr	r4, [r3, #0]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8002b3e:	681a      	ldr	r2, [r3, #0]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8002b40:	f404 5400 	and.w	r4, r4, #8192	; 0x2000
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8002b44:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002b48:	e9c1 2405 	strd	r2, r4, [r1, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	f3c2 4200 	ubfx	r2, r2, #16, #1
 8002b52:	748a      	strb	r2, [r1, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 17) == 0U) ? ENABLE : DISABLE;
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	f482 3200 	eor.w	r2, r2, #131072	; 0x20000
 8002b5a:	f3c2 4240 	ubfx	r2, r2, #17, #1
 8002b5e:	744a      	strb	r2, [r1, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 19) == 0U) ? ENABLE : DISABLE;
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8002b66:	f3c2 42c0 	ubfx	r2, r2, #19, #1
 8002b6a:	740a      	strb	r2, [r1, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	f3c2 5200 	ubfx	r2, r2, #20, #1
 8002b72:	73ca      	strb	r2, [r1, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	f3c2 5240 	ubfx	r2, r2, #21, #1
 8002b7a:	738a      	strb	r2, [r1, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	f3c2 5280 	ubfx	r2, r2, #22, #1
 8002b82:	734a      	strb	r2, [r1, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8002b84:	681a      	ldr	r2, [r3, #0]
                                                    ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 8002b86:	f3c2 52c0 	ubfx	r2, r2, #23, #1
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8002b8a:	730a      	strb	r2, [r1, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 8002b8c:	681c      	ldr	r4, [r3, #0]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 8002b8e:	681a      	ldr	r2, [r3, #0]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 8002b90:	f004 64e0 	and.w	r4, r4, #117440512	; 0x7000000
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 8002b94:	f3c2 62c0 	ubfx	r2, r2, #27, #1
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 8002b98:	608c      	str	r4, [r1, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 8002b9a:	710a      	strb	r2, [r1, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 8002b9c:	681c      	ldr	r4, [r3, #0]
  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8002b9e:	685a      	ldr	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 8002ba0:	f004 44e0 	and.w	r4, r4, #1879048192	; 0x70000000
  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8002ba4:	f3c2 020d 	ubfx	r2, r2, #0, #14
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 8002ba8:	600c      	str	r4, [r1, #0]
  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8002baa:	634a      	str	r2, [r1, #52]	; 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 8002bac:	685a      	ldr	r2, [r3, #4]
 8002bae:	f482 3280 	eor.w	r2, r2, #65536	; 0x10000
 8002bb2:	f3c2 4200 	ubfx	r2, r2, #16, #1
 8002bb6:	f881 2032 	strb.w	r2, [r1, #50]	; 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 8002bba:	685a      	ldr	r2, [r3, #4]
 8002bbc:	f3c2 4240 	ubfx	r2, r2, #17, #1
 8002bc0:	f881 2031 	strb.w	r2, [r1, #49]	; 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8002bc4:	685a      	ldr	r2, [r3, #4]
                                                        ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 8002bc6:	f3c2 4280 	ubfx	r2, r2, #18, #1
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8002bca:	f881 2030 	strb.w	r2, [r1, #48]	; 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8002bce:	685a      	ldr	r2, [r3, #4]
                                    ? ENABLE : DISABLE;
 8002bd0:	f3c2 6200 	ubfx	r2, r2, #24, #1
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8002bd4:	f881 2038 	strb.w	r2, [r1, #56]	; 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 8002bd8:	685c      	ldr	r4, [r3, #4]
  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 8002bda:	68da      	ldr	r2, [r3, #12]
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 8002bdc:	f3c4 6444 	ubfx	r4, r4, #25, #5
  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 8002be0:	f3c2 2200 	ubfx	r2, r2, #8, #1
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 8002be4:	63cc      	str	r4, [r1, #60]	; 0x3c
  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 8002be6:	f881 2040 	strb.w	r2, [r1, #64]	; 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 8002bea:	68dc      	ldr	r4, [r3, #12]
  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 8002bec:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 8002bee:	f004 040f 	and.w	r4, r4, #15
  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 8002bf2:	f3c2 0240 	ubfx	r2, r2, #1, #1
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 8002bf6:	644c      	str	r4, [r1, #68]	; 0x44
  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 8002bf8:	f881 2054 	strb.w	r2, [r1, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 8002bfc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002bfe:	f082 0280 	eor.w	r2, r2, #128	; 0x80
 8002c02:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 8002c06:	f881 204c 	strb.w	r2, [r1, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8002c0a:	6f1c      	ldr	r4, [r3, #112]	; 0x70
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 8002c0c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8002c0e:	f004 0470 	and.w	r4, r4, #112	; 0x70
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 8002c12:	0c12      	lsrs	r2, r2, #16
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8002c14:	650c      	str	r4, [r1, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 8002c16:	648a      	str	r2, [r1, #72]	; 0x48
  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 8002c18:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002c1c:	f002 0201 	and.w	r2, r2, #1
 8002c20:	f881 2056 	strb.w	r2, [r1, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8002c24:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
                                      ? ENABLE : DISABLE;
 8002c28:	f3c2 0240 	ubfx	r2, r2, #1, #1
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8002c2c:	f881 2055 	strb.w	r2, [r1, #85]	; 0x55
  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 8002c30:	f8d3 4d00 	ldr.w	r4, [r3, #3328]	; 0xd00
  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 8002c34:	f8d3 2d30 	ldr.w	r2, [r3, #3376]	; 0xd30
  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 8002c38:	f004 0472 	and.w	r4, r4, #114	; 0x72
  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 8002c3c:	f002 0223 	and.w	r2, r2, #35	; 0x23
 8002c40:	e9c1 4216 	strd	r4, r2, [r1, #88]	; 0x58
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8002c44:	f8d3 2d30 	ldr.w	r2, [r3, #3376]	; 0xd30
}
 8002c48:	f85d 4b04 	ldr.w	r4, [sp], #4
                                                      ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 8002c4c:	f3c2 02c0 	ubfx	r2, r2, #3, #1
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8002c50:	f881 2062 	strb.w	r2, [r1, #98]	; 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 8002c54:	f8d3 2d30 	ldr.w	r2, [r3, #3376]	; 0xd30
 8002c58:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8002c5c:	f881 2061 	strb.w	r2, [r1, #97]	; 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8002c60:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
                                                     ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 8002c64:	f083 0340 	eor.w	r3, r3, #64	; 0x40
 8002c68:	f3c3 1380 	ubfx	r3, r3, #6, #1
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8002c6c:	f881 3060 	strb.w	r3, [r1, #96]	; 0x60
}
 8002c70:	4770      	bx	lr
    return HAL_ERROR;
 8002c72:	2001      	movs	r0, #1
}
 8002c74:	4770      	bx	lr
 8002c76:	bf00      	nop

08002c78 <HAL_ETH_SetMACConfig>:
  if (macconf == NULL)
 8002c78:	b131      	cbz	r1, 8002c88 <HAL_ETH_SetMACConfig+0x10>
{
 8002c7a:	b508      	push	{r3, lr}
  if (heth->gState == HAL_ETH_STATE_READY)
 8002c7c:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8002c80:	2b10      	cmp	r3, #16
 8002c82:	d003      	beq.n	8002c8c <HAL_ETH_SetMACConfig+0x14>
    return HAL_ERROR;
 8002c84:	2001      	movs	r0, #1
}
 8002c86:	bd08      	pop	{r3, pc}
    return HAL_ERROR;
 8002c88:	2001      	movs	r0, #1
}
 8002c8a:	4770      	bx	lr
    ETH_SetMACConfig(heth, macconf);
 8002c8c:	f7ff f9a0 	bl	8001fd0 <ETH_SetMACConfig>
    return HAL_OK;
 8002c90:	2000      	movs	r0, #0
}
 8002c92:	bd08      	pop	{r3, pc}

08002c94 <HAL_ETH_SetMDIOClockRange>:
{
 8002c94:	b538      	push	{r3, r4, r5, lr}
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002c96:	6803      	ldr	r3, [r0, #0]
{
 8002c98:	4605      	mov	r5, r0
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002c9a:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
  hclk = HAL_RCC_GetHCLKFreq();
 8002c9e:	f000 ff79 	bl	8003b94 <HAL_RCC_GetHCLKFreq>
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8002ca2:	4b15      	ldr	r3, [pc, #84]	; (8002cf8 <HAL_ETH_SetMDIOClockRange+0x64>)
 8002ca4:	4a15      	ldr	r2, [pc, #84]	; (8002cfc <HAL_ETH_SetMDIOClockRange+0x68>)
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8002ca6:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8002caa:	4403      	add	r3, r0
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d205      	bcs.n	8002cbc <HAL_ETH_SetMDIOClockRange+0x28>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002cb0:	f444 7400 	orr.w	r4, r4, #512	; 0x200
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8002cb4:	682b      	ldr	r3, [r5, #0]
 8002cb6:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
}
 8002cba:	bd38      	pop	{r3, r4, r5, pc}
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8002cbc:	4b10      	ldr	r3, [pc, #64]	; (8002d00 <HAL_ETH_SetMDIOClockRange+0x6c>)
 8002cbe:	4a11      	ldr	r2, [pc, #68]	; (8002d04 <HAL_ETH_SetMDIOClockRange+0x70>)
 8002cc0:	4403      	add	r3, r0
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d805      	bhi.n	8002cd2 <HAL_ETH_SetMDIOClockRange+0x3e>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8002cc6:	f444 7440 	orr.w	r4, r4, #768	; 0x300
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8002cca:	682b      	ldr	r3, [r5, #0]
 8002ccc:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
}
 8002cd0:	bd38      	pop	{r3, r4, r5, pc}
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8002cd2:	4b0d      	ldr	r3, [pc, #52]	; (8002d08 <HAL_ETH_SetMDIOClockRange+0x74>)
 8002cd4:	4a0d      	ldr	r2, [pc, #52]	; (8002d0c <HAL_ETH_SetMDIOClockRange+0x78>)
 8002cd6:	4403      	add	r3, r0
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d3eb      	bcc.n	8002cb4 <HAL_ETH_SetMDIOClockRange+0x20>
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8002cdc:	4b0c      	ldr	r3, [pc, #48]	; (8002d10 <HAL_ETH_SetMDIOClockRange+0x7c>)
 8002cde:	4a0d      	ldr	r2, [pc, #52]	; (8002d14 <HAL_ETH_SetMDIOClockRange+0x80>)
 8002ce0:	4403      	add	r3, r0
 8002ce2:	4293      	cmp	r3, r2
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8002ce4:	682b      	ldr	r3, [r5, #0]
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8002ce6:	bf94      	ite	ls
 8002ce8:	f444 7480 	orrls.w	r4, r4, #256	; 0x100
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8002cec:	f444 6480 	orrhi.w	r4, r4, #1024	; 0x400
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8002cf0:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
}
 8002cf4:	bd38      	pop	{r3, r4, r5, pc}
 8002cf6:	bf00      	nop
 8002cf8:	feced300 	.word	0xfeced300
 8002cfc:	00e4e1c0 	.word	0x00e4e1c0
 8002d00:	fde9f140 	.word	0xfde9f140
 8002d04:	017d783f 	.word	0x017d783f
 8002d08:	fc6c7900 	.word	0xfc6c7900
 8002d0c:	02625a00 	.word	0x02625a00
 8002d10:	fa0a1f00 	.word	0xfa0a1f00
 8002d14:	02faf07f 	.word	0x02faf07f

08002d18 <HAL_ETH_Init>:
  if (heth == NULL)
 8002d18:	2800      	cmp	r0, #0
 8002d1a:	f000 810e 	beq.w	8002f3a <HAL_ETH_Init+0x222>
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002d1e:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
{
 8002d22:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d24:	4605      	mov	r5, r0
 8002d26:	b0a5      	sub	sp, #148	; 0x94
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	f000 80b2 	beq.w	8002e92 <HAL_ETH_Init+0x17a>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d2e:	4b84      	ldr	r3, [pc, #528]	; (8002f40 <HAL_ETH_Init+0x228>)
 8002d30:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8002d34:	f042 0202 	orr.w	r2, r2, #2
 8002d38:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 8002d3c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8002d40:	7a28      	ldrb	r0, [r5, #8]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d42:	f003 0302 	and.w	r3, r3, #2
 8002d46:	9301      	str	r3, [sp, #4]
 8002d48:	9b01      	ldr	r3, [sp, #4]
  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8002d4a:	2800      	cmp	r0, #0
 8002d4c:	f040 8095 	bne.w	8002e7a <HAL_ETH_Init+0x162>
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8002d50:	f7fe fe44 	bl	80019dc <HAL_SYSCFG_ETHInterfaceSelect>
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8002d54:	682b      	ldr	r3, [r5, #0]
  (void)SYSCFG->PMCR;
 8002d56:	4a7b      	ldr	r2, [pc, #492]	; (8002f44 <HAL_ETH_Init+0x22c>)
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8002d58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  (void)SYSCFG->PMCR;
 8002d5c:	6852      	ldr	r2, [r2, #4]
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	f042 0201 	orr.w	r2, r2, #1
 8002d64:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8002d66:	f7fe fe2d 	bl	80019c4 <HAL_GetTick>
 8002d6a:	4606      	mov	r6, r0
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002d6c:	e006      	b.n	8002d7c <HAL_ETH_Init+0x64>
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002d6e:	f7fe fe29 	bl	80019c4 <HAL_GetTick>
 8002d72:	1b83      	subs	r3, r0, r6
 8002d74:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002d78:	f200 8082 	bhi.w	8002e80 <HAL_ETH_Init+0x168>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002d7c:	682b      	ldr	r3, [r5, #0]
 8002d7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d82:	681c      	ldr	r4, [r3, #0]
 8002d84:	f014 0401 	ands.w	r4, r4, #1
 8002d88:	d1f1      	bne.n	8002d6e <HAL_ETH_Init+0x56>
  HAL_ETH_SetMDIOClockRange(heth);
 8002d8a:	4628      	mov	r0, r5
  macDefaultConf.ChecksumOffload = ENABLE;
 8002d8c:	2601      	movs	r6, #1
  HAL_ETH_SetMDIOClockRange(heth);
 8002d8e:	f7ff ff81 	bl	8002c94 <HAL_ETH_SetMDIOClockRange>
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8002d92:	f000 feff 	bl	8003b94 <HAL_RCC_GetHCLKFreq>
 8002d96:	4b6c      	ldr	r3, [pc, #432]	; (8002f48 <HAL_ETH_Init+0x230>)
 8002d98:	682f      	ldr	r7, [r5, #0]
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8002d9a:	f04f 0e02 	mov.w	lr, #2
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8002d9e:	fba3 2300 	umull	r2, r3, r3, r0
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002da2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002da6:	a90b      	add	r1, sp, #44	; 0x2c
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002da8:	9414      	str	r4, [sp, #80]	; 0x50
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8002daa:	0c9b      	lsrs	r3, r3, #18
  macDefaultConf.DeferralCheck = DISABLE;
 8002dac:	f88d 4054 	strb.w	r4, [sp, #84]	; 0x54
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8002db0:	f88d 4064 	strb.w	r4, [sp, #100]	; 0x64
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8002db4:	3b01      	subs	r3, #1
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8002db6:	941a      	str	r4, [sp, #104]	; 0x68
  macDefaultConf.PauseTime = 0x0;
 8002db8:	941d      	str	r4, [sp, #116]	; 0x74
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8002dba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8002dbe:	f44f 63c3 	mov.w	r3, #1560	; 0x618
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8002dc2:	f88d 406c 	strb.w	r4, [sp, #108]	; 0x6c
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8002dc6:	9318      	str	r3, [sp, #96]	; 0x60
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8002dc8:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
  macDefaultConf.ChecksumOffload = ENABLE;
 8002dcc:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8002dd0:	930b      	str	r3, [sp, #44]	; 0x2c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002dd2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  macDefaultConf.RetryTransmission = ENABLE;
 8002dd6:	f88d 604c 	strb.w	r6, [sp, #76]	; 0x4c
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8002dda:	f8ad 608c 	strh.w	r6, [sp, #140]	; 0x8c
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8002dde:	f88d 408e 	strb.w	r4, [sp, #142]	; 0x8e
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8002de2:	941f      	str	r4, [sp, #124]	; 0x7c
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002de4:	f8ad 4080 	strh.w	r4, [sp, #128]	; 0x80
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002de8:	f88d 4082 	strb.w	r4, [sp, #130]	; 0x82
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8002dec:	9416      	str	r4, [sp, #88]	; 0x58
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8002dee:	f8ad 405c 	strh.w	r4, [sp, #92]	; 0x5c
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8002df2:	f88d 605e 	strb.w	r6, [sp, #94]	; 0x5e
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8002df6:	940d      	str	r4, [sp, #52]	; 0x34
  macDefaultConf.JumboPacket = DISABLE;
 8002df8:	f88d 403e 	strb.w	r4, [sp, #62]	; 0x3e
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8002dfc:	941c      	str	r4, [sp, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8002dfe:	f88d 6078 	strb.w	r6, [sp, #120]	; 0x78
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002e02:	e9cd 0310 	strd	r0, r3, [sp, #64]	; 0x40
  macDefaultConf.LoopbackMode = DISABLE;
 8002e06:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002e0a:	4628      	mov	r0, r5
  macDefaultConf.LoopbackMode = DISABLE;
 8002e0c:	9312      	str	r3, [sp, #72]	; 0x48
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8002e0e:	2320      	movs	r3, #32
 8002e10:	e9cd e321 	strd	lr, r3, [sp, #132]	; 0x84
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8002e14:	4b4d      	ldr	r3, [pc, #308]	; (8002f4c <HAL_ETH_Init+0x234>)
 8002e16:	930e      	str	r3, [sp, #56]	; 0x38
  macDefaultConf.Watchdog = ENABLE;
 8002e18:	f240 1301 	movw	r3, #257	; 0x101
 8002e1c:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002e20:	f7ff f8d6 	bl	8001fd0 <ETH_SetMACConfig>
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002e24:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002e28:	a902      	add	r1, sp, #8
 8002e2a:	4628      	mov	r0, r5
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002e2c:	f88d 600c 	strb.w	r6, [sp, #12]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002e30:	9306      	str	r3, [sp, #24]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002e32:	9308      	str	r3, [sp, #32]
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8002e34:	f44f 7306 	mov.w	r3, #536	; 0x218
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8002e38:	9402      	str	r4, [sp, #8]
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8002e3a:	930a      	str	r3, [sp, #40]	; 0x28
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002e3c:	9604      	str	r6, [sp, #16]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8002e3e:	f8ad 4014 	strh.w	r4, [sp, #20]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8002e42:	f88d 401c 	strb.w	r4, [sp, #28]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8002e46:	f8ad 4024 	strh.w	r4, [sp, #36]	; 0x24
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002e4a:	f7ff f97d 	bl	8002148 <ETH_SetDMAConfig>
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8002e4e:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 8002e52:	f8d1 3100 	ldr.w	r3, [r1, #256]	; 0x100
 8002e56:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8002e5a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002e5e:	f8c1 3100 	str.w	r3, [r1, #256]	; 0x100
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8002e62:	696b      	ldr	r3, [r5, #20]
 8002e64:	f013 0203 	ands.w	r2, r3, #3
 8002e68:	d019      	beq.n	8002e9e <HAL_ETH_Init+0x186>
    heth->gState = HAL_ETH_STATE_ERROR;
 8002e6a:	23e0      	movs	r3, #224	; 0xe0
    return HAL_ERROR;
 8002e6c:	4630      	mov	r0, r6
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8002e6e:	f8c5 6088 	str.w	r6, [r5, #136]	; 0x88
    heth->gState = HAL_ETH_STATE_ERROR;
 8002e72:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
}
 8002e76:	b025      	add	sp, #148	; 0x94
 8002e78:	bdf0      	pop	{r4, r5, r6, r7, pc}
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8002e7a:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8002e7e:	e767      	b.n	8002d50 <HAL_ETH_Init+0x38>
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002e80:	2204      	movs	r2, #4
      heth->gState = HAL_ETH_STATE_ERROR;
 8002e82:	23e0      	movs	r3, #224	; 0xe0
      return HAL_ERROR;
 8002e84:	2001      	movs	r0, #1
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002e86:	f8c5 2088 	str.w	r2, [r5, #136]	; 0x88
      heth->gState = HAL_ETH_STATE_ERROR;
 8002e8a:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
}
 8002e8e:	b025      	add	sp, #148	; 0x94
 8002e90:	bdf0      	pop	{r4, r5, r6, r7, pc}
    heth->gState = HAL_ETH_STATE_BUSY;
 8002e92:	2323      	movs	r3, #35	; 0x23
 8002e94:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    HAL_ETH_MspInit(heth);
 8002e98:	f003 fd6e 	bl	8006978 <HAL_ETH_MspInit>
 8002e9c:	e747      	b.n	8002d2e <HAL_ETH_Init+0x16>
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8002e9e:	f8d1 4108 	ldr.w	r4, [r1, #264]	; 0x108
 8002ea2:	482b      	ldr	r0, [pc, #172]	; (8002f50 <HAL_ETH_Init+0x238>)
 8002ea4:	68ee      	ldr	r6, [r5, #12]
 8002ea6:	4020      	ands	r0, r4
 8002ea8:	f106 0460 	add.w	r4, r6, #96	; 0x60
 8002eac:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
    dmatxdesc = heth->Init.TxDesc + i;
 8002eb0:	4633      	mov	r3, r6
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8002eb2:	f8c1 0108 	str.w	r0, [r1, #264]	; 0x108
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002eb6:	f105 0014 	add.w	r0, r5, #20
    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002eba:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002ebc:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002ebe:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002ec0:	60da      	str	r2, [r3, #12]
    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002ec2:	f840 3f04 	str.w	r3, [r0, #4]!
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002ec6:	3318      	adds	r3, #24
 8002ec8:	42a3      	cmp	r3, r4
 8002eca:	d1f6      	bne.n	8002eba <HAL_ETH_Init+0x1a2>
    dmarxdesc =  heth->Init.RxDesc + i;
 8002ecc:	692c      	ldr	r4, [r5, #16]
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8002ece:	2303      	movs	r3, #3
  heth->TxDescList.CurTxDesc = 0;
 8002ed0:	62aa      	str	r2, [r5, #40]	; 0x28
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8002ed2:	f105 0044 	add.w	r0, r5, #68	; 0x44
 8002ed6:	f8c1 312c 	str.w	r3, [r1, #300]	; 0x12c
    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002eda:	2200      	movs	r2, #0
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8002edc:	f8c1 6114 	str.w	r6, [r1, #276]	; 0x114
    dmarxdesc =  heth->Init.RxDesc + i;
 8002ee0:	4623      	mov	r3, r4
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8002ee2:	f8c1 6120 	str.w	r6, [r1, #288]	; 0x120
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002ee6:	f105 0654 	add.w	r6, r5, #84	; 0x54
    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002eea:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002eec:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002eee:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002ef0:	615a      	str	r2, [r3, #20]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002ef2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002ef4:	60da      	str	r2, [r3, #12]
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002ef6:	f840 3f04 	str.w	r3, [r0, #4]!
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002efa:	42b0      	cmp	r0, r6
 8002efc:	f103 0318 	add.w	r3, r3, #24
 8002f00:	d1f3      	bne.n	8002eea <HAL_ETH_Init+0x1d2>
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8002f02:	2003      	movs	r0, #3
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8002f04:	686b      	ldr	r3, [r5, #4]
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002f06:	65aa      	str	r2, [r5, #88]	; 0x58
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002f08:	e9c5 2217 	strd	r2, r2, [r5, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002f0c:	e9c5 221a 	strd	r2, r2, [r5, #104]	; 0x68
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8002f10:	f8c1 0130 	str.w	r0, [r1, #304]	; 0x130
  return HAL_OK;
 8002f14:	2000      	movs	r0, #0
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8002f16:	f8c1 411c 	str.w	r4, [r1, #284]	; 0x11c
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8002f1a:	3448      	adds	r4, #72	; 0x48
 8002f1c:	f8c1 4128 	str.w	r4, [r1, #296]	; 0x128
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8002f20:	8899      	ldrh	r1, [r3, #4]
 8002f22:	f8c7 1300 	str.w	r1, [r7, #768]	; 0x300
  heth->gState = HAL_ETH_STATE_READY;
 8002f26:	2110      	movs	r1, #16
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002f28:	681b      	ldr	r3, [r3, #0]
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002f2a:	f8c7 3304 	str.w	r3, [r7, #772]	; 0x304
  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002f2e:	f8c5 2088 	str.w	r2, [r5, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002f32:	f8c5 1084 	str.w	r1, [r5, #132]	; 0x84
}
 8002f36:	b025      	add	sp, #148	; 0x94
 8002f38:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8002f3a:	2001      	movs	r0, #1
}
 8002f3c:	4770      	bx	lr
 8002f3e:	bf00      	nop
 8002f40:	58024400 	.word	0x58024400
 8002f44:	58000400 	.word	0x58000400
 8002f48:	431bde83 	.word	0x431bde83
 8002f4c:	01010000 	.word	0x01010000
 8002f50:	ffff8001 	.word	0xffff8001

08002f54 <HAL_ETH_GetDMAError>:
  return heth->DMAErrorCode;
 8002f54:	f8d0 008c 	ldr.w	r0, [r0, #140]	; 0x8c
}
 8002f58:	4770      	bx	lr
 8002f5a:	bf00      	nop

08002f5c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002f60:	680c      	ldr	r4, [r1, #0]
{
 8002f62:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002f64:	2c00      	cmp	r4, #0
 8002f66:	f000 80a7 	beq.w	80030b8 <HAL_GPIO_Init+0x15c>
 8002f6a:	f04f 0c00 	mov.w	ip, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f6e:	4f8a      	ldr	r7, [pc, #552]	; (8003198 <HAL_GPIO_Init+0x23c>)
  uint32_t position = 0x00U;
 8002f70:	4663      	mov	r3, ip
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002f72:	2201      	movs	r2, #1
 8002f74:	409a      	lsls	r2, r3
    if (iocurrent != 0x00U)
 8002f76:	ea12 0e04 	ands.w	lr, r2, r4
 8002f7a:	f000 8096 	beq.w	80030aa <HAL_GPIO_Init+0x14e>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002f7e:	684d      	ldr	r5, [r1, #4]
 8002f80:	f005 0903 	and.w	r9, r5, #3
 8002f84:	f109 36ff 	add.w	r6, r9, #4294967295
 8002f88:	2e01      	cmp	r6, #1
 8002f8a:	f240 8098 	bls.w	80030be <HAL_GPIO_Init+0x162>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f8e:	f1b9 0f03 	cmp.w	r9, #3
 8002f92:	f040 80d2 	bne.w	800313a <HAL_GPIO_Init+0x1de>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002f96:	fa09 f20c 	lsl.w	r2, r9, ip
 8002f9a:	ea6f 0802 	mvn.w	r8, r2
      temp = GPIOx->MODER;
 8002f9e:	6806      	ldr	r6, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002fa0:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002fa4:	ea06 0608 	and.w	r6, r6, r8
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002fa8:	ea42 0206 	orr.w	r2, r2, r6
      GPIOx->MODER = temp;
 8002fac:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002fae:	d07c      	beq.n	80030aa <HAL_GPIO_Init+0x14e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fb0:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8002fb4:	f023 0803 	bic.w	r8, r3, #3

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002fb8:	f003 0903 	and.w	r9, r3, #3
 8002fbc:	260f      	movs	r6, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fbe:	f042 0202 	orr.w	r2, r2, #2
 8002fc2:	f108 48b0 	add.w	r8, r8, #1476395008	; 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002fc6:	ea4f 0989 	mov.w	r9, r9, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fca:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8002fce:	f508 6880 	add.w	r8, r8, #1024	; 0x400
 8002fd2:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002fd6:	fa06 f609 	lsl.w	r6, r6, r9
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fda:	f002 0202 	and.w	r2, r2, #2
 8002fde:	9201      	str	r2, [sp, #4]
 8002fe0:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8002fe2:	f8d8 2008 	ldr.w	r2, [r8, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002fe6:	ea22 0206 	bic.w	r2, r2, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002fea:	4e6c      	ldr	r6, [pc, #432]	; (800319c <HAL_GPIO_Init+0x240>)
 8002fec:	42b0      	cmp	r0, r6
 8002fee:	d028      	beq.n	8003042 <HAL_GPIO_Init+0xe6>
 8002ff0:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8002ff4:	42b0      	cmp	r0, r6
 8002ff6:	f000 80ac 	beq.w	8003152 <HAL_GPIO_Init+0x1f6>
 8002ffa:	4e69      	ldr	r6, [pc, #420]	; (80031a0 <HAL_GPIO_Init+0x244>)
 8002ffc:	42b0      	cmp	r0, r6
 8002ffe:	f000 80ad 	beq.w	800315c <HAL_GPIO_Init+0x200>
 8003002:	4e68      	ldr	r6, [pc, #416]	; (80031a4 <HAL_GPIO_Init+0x248>)
 8003004:	42b0      	cmp	r0, r6
 8003006:	f000 809f 	beq.w	8003148 <HAL_GPIO_Init+0x1ec>
 800300a:	4e67      	ldr	r6, [pc, #412]	; (80031a8 <HAL_GPIO_Init+0x24c>)
 800300c:	42b0      	cmp	r0, r6
 800300e:	f000 80af 	beq.w	8003170 <HAL_GPIO_Init+0x214>
 8003012:	4e66      	ldr	r6, [pc, #408]	; (80031ac <HAL_GPIO_Init+0x250>)
 8003014:	42b0      	cmp	r0, r6
 8003016:	f000 80b0 	beq.w	800317a <HAL_GPIO_Init+0x21e>
 800301a:	4e65      	ldr	r6, [pc, #404]	; (80031b0 <HAL_GPIO_Init+0x254>)
 800301c:	42b0      	cmp	r0, r6
 800301e:	f000 80a2 	beq.w	8003166 <HAL_GPIO_Init+0x20a>
 8003022:	4e64      	ldr	r6, [pc, #400]	; (80031b4 <HAL_GPIO_Init+0x258>)
 8003024:	42b0      	cmp	r0, r6
 8003026:	f000 80ad 	beq.w	8003184 <HAL_GPIO_Init+0x228>
 800302a:	4e63      	ldr	r6, [pc, #396]	; (80031b8 <HAL_GPIO_Init+0x25c>)
 800302c:	42b0      	cmp	r0, r6
 800302e:	f000 80ae 	beq.w	800318e <HAL_GPIO_Init+0x232>
 8003032:	4e62      	ldr	r6, [pc, #392]	; (80031bc <HAL_GPIO_Init+0x260>)
 8003034:	42b0      	cmp	r0, r6
 8003036:	bf0c      	ite	eq
 8003038:	2609      	moveq	r6, #9
 800303a:	260a      	movne	r6, #10
 800303c:	fa06 f609 	lsl.w	r6, r6, r9
 8003040:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003042:	f8c8 2008 	str.w	r2, [r8, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003046:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800304a:	f415 1f80 	tst.w	r5, #1048576	; 0x100000
        temp &= ~(iocurrent);
 800304e:	ea6f 060e 	mvn.w	r6, lr
        temp = EXTI->RTSR1;
 8003052:	6812      	ldr	r2, [r2, #0]
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 8003054:	f04f 48b0 	mov.w	r8, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 8003058:	bf0c      	ite	eq
 800305a:	4032      	andeq	r2, r6
          temp |= iocurrent;
 800305c:	ea4e 0202 	orrne.w	r2, lr, r2

        temp = EXTI->FTSR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003060:	f415 1f00 	tst.w	r5, #2097152	; 0x200000
        EXTI->RTSR1 = temp;
 8003064:	f8c8 2000 	str.w	r2, [r8]
        temp = EXTI->FTSR1;
 8003068:	f8d8 2004 	ldr.w	r2, [r8, #4]
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 800306c:	f04f 48b0 	mov.w	r8, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 8003070:	bf0c      	ite	eq
 8003072:	4032      	andeq	r2, r6
          temp |= iocurrent;
 8003074:	ea4e 0202 	orrne.w	r2, lr, r2

        temp = EXTI_CurrentCPU->EMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003078:	f415 3f00 	tst.w	r5, #131072	; 0x20000
        EXTI->FTSR1 = temp;
 800307c:	f8c8 2004 	str.w	r2, [r8, #4]
        temp = EXTI_CurrentCPU->EMR1;
 8003080:	f8d8 2084 	ldr.w	r2, [r8, #132]	; 0x84
        {
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003084:	f04f 48b0 	mov.w	r8, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 8003088:	bf0c      	ite	eq
 800308a:	4032      	andeq	r2, r6
          temp |= iocurrent;
 800308c:	ea4e 0202 	orrne.w	r2, lr, r2

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003090:	03ed      	lsls	r5, r5, #15
        {
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003092:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
        EXTI_CurrentCPU->EMR1 = temp;
 8003096:	f8c8 2084 	str.w	r2, [r8, #132]	; 0x84
        temp = EXTI_CurrentCPU->IMR1;
 800309a:	f8d8 2080 	ldr.w	r2, [r8, #128]	; 0x80
        temp &= ~(iocurrent);
 800309e:	bf54      	ite	pl
 80030a0:	4032      	andpl	r2, r6
          temp |= iocurrent;
 80030a2:	ea4e 0202 	orrmi.w	r2, lr, r2
        EXTI_CurrentCPU->IMR1 = temp;
 80030a6:	f8c5 2080 	str.w	r2, [r5, #128]	; 0x80
      }
    }

    position++;
 80030aa:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80030ac:	f10c 0c02 	add.w	ip, ip, #2
 80030b0:	fa34 f203 	lsrs.w	r2, r4, r3
 80030b4:	f47f af5d 	bne.w	8002f72 <HAL_GPIO_Init+0x16>
  }
}
 80030b8:	b003      	add	sp, #12
 80030ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80030be:	f04f 0803 	mov.w	r8, #3
        temp = GPIOx->OSPEEDR;
 80030c2:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80030c4:	fa08 f80c 	lsl.w	r8, r8, ip
 80030c8:	ea26 0a08 	bic.w	sl, r6, r8
        temp |= (GPIO_Init->Speed << (position * 2U));
 80030cc:	68ce      	ldr	r6, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80030ce:	ea6f 0808 	mvn.w	r8, r8
        temp |= (GPIO_Init->Speed << (position * 2U));
 80030d2:	fa06 f60c 	lsl.w	r6, r6, ip
 80030d6:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OSPEEDR = temp;
 80030da:	6086      	str	r6, [r0, #8]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80030dc:	f3c5 1600 	ubfx	r6, r5, #4, #1
        temp = GPIOx->OTYPER;
 80030e0:	f8d0 a004 	ldr.w	sl, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80030e4:	409e      	lsls	r6, r3
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80030e6:	ea2a 0202 	bic.w	r2, sl, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80030ea:	4332      	orrs	r2, r6
        GPIOx->OTYPER = temp;
 80030ec:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 80030ee:	68c2      	ldr	r2, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030f0:	f1b9 0f02 	cmp.w	r9, #2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80030f4:	688e      	ldr	r6, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80030f6:	ea02 0208 	and.w	r2, r2, r8
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80030fa:	fa06 f60c 	lsl.w	r6, r6, ip
 80030fe:	ea46 0602 	orr.w	r6, r6, r2
      GPIOx->PUPDR = temp;
 8003102:	fa09 f20c 	lsl.w	r2, r9, ip
 8003106:	60c6      	str	r6, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003108:	f47f af49 	bne.w	8002f9e <HAL_GPIO_Init+0x42>
        temp = GPIOx->AFR[position >> 3U];
 800310c:	ea4f 09d3 	mov.w	r9, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003110:	f003 0b07 	and.w	fp, r3, #7
 8003114:	260f      	movs	r6, #15
 8003116:	eb00 0989 	add.w	r9, r0, r9, lsl #2
 800311a:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3U];
 800311e:	f8d9 a020 	ldr.w	sl, [r9, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003122:	fa06 f60b 	lsl.w	r6, r6, fp
 8003126:	ea2a 0a06 	bic.w	sl, sl, r6
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800312a:	690e      	ldr	r6, [r1, #16]
 800312c:	fa06 f60b 	lsl.w	r6, r6, fp
 8003130:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->AFR[position >> 3U] = temp;
 8003134:	f8c9 6020 	str.w	r6, [r9, #32]
 8003138:	e731      	b.n	8002f9e <HAL_GPIO_Init+0x42>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800313a:	f04f 0803 	mov.w	r8, #3
 800313e:	fa08 f80c 	lsl.w	r8, r8, ip
 8003142:	ea6f 0808 	mvn.w	r8, r8
 8003146:	e7d2      	b.n	80030ee <HAL_GPIO_Init+0x192>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003148:	2603      	movs	r6, #3
 800314a:	fa06 f609 	lsl.w	r6, r6, r9
 800314e:	4332      	orrs	r2, r6
 8003150:	e777      	b.n	8003042 <HAL_GPIO_Init+0xe6>
 8003152:	2601      	movs	r6, #1
 8003154:	fa06 f609 	lsl.w	r6, r6, r9
 8003158:	4332      	orrs	r2, r6
 800315a:	e772      	b.n	8003042 <HAL_GPIO_Init+0xe6>
 800315c:	2602      	movs	r6, #2
 800315e:	fa06 f609 	lsl.w	r6, r6, r9
 8003162:	4332      	orrs	r2, r6
 8003164:	e76d      	b.n	8003042 <HAL_GPIO_Init+0xe6>
 8003166:	2606      	movs	r6, #6
 8003168:	fa06 f609 	lsl.w	r6, r6, r9
 800316c:	4332      	orrs	r2, r6
 800316e:	e768      	b.n	8003042 <HAL_GPIO_Init+0xe6>
 8003170:	2604      	movs	r6, #4
 8003172:	fa06 f609 	lsl.w	r6, r6, r9
 8003176:	4332      	orrs	r2, r6
 8003178:	e763      	b.n	8003042 <HAL_GPIO_Init+0xe6>
 800317a:	2605      	movs	r6, #5
 800317c:	fa06 f609 	lsl.w	r6, r6, r9
 8003180:	4332      	orrs	r2, r6
 8003182:	e75e      	b.n	8003042 <HAL_GPIO_Init+0xe6>
 8003184:	2607      	movs	r6, #7
 8003186:	fa06 f609 	lsl.w	r6, r6, r9
 800318a:	4332      	orrs	r2, r6
 800318c:	e759      	b.n	8003042 <HAL_GPIO_Init+0xe6>
 800318e:	2608      	movs	r6, #8
 8003190:	fa06 f609 	lsl.w	r6, r6, r9
 8003194:	4332      	orrs	r2, r6
 8003196:	e754      	b.n	8003042 <HAL_GPIO_Init+0xe6>
 8003198:	58024400 	.word	0x58024400
 800319c:	58020000 	.word	0x58020000
 80031a0:	58020800 	.word	0x58020800
 80031a4:	58020c00 	.word	0x58020c00
 80031a8:	58021000 	.word	0x58021000
 80031ac:	58021400 	.word	0x58021400
 80031b0:	58021800 	.word	0x58021800
 80031b4:	58021c00 	.word	0x58021c00
 80031b8:	58022000 	.word	0x58022000
 80031bc:	58022400 	.word	0x58022400

080031c0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80031c0:	b902      	cbnz	r2, 80031c4 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80031c2:	0409      	lsls	r1, r1, #16
 80031c4:	6181      	str	r1, [r0, #24]
  }
}
 80031c6:	4770      	bx	lr

080031c8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80031c8:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80031ca:	4c10      	ldr	r4, [pc, #64]	; (800320c <HAL_PWREx_ConfigSupply+0x44>)
 80031cc:	68e3      	ldr	r3, [r4, #12]
 80031ce:	f013 0f04 	tst.w	r3, #4
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80031d2:	68e3      	ldr	r3, [r4, #12]
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80031d4:	d105      	bne.n	80031e2 <HAL_PWREx_ConfigSupply+0x1a>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80031d6:	f003 0307 	and.w	r3, r3, #7
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80031da:	1a18      	subs	r0, r3, r0
 80031dc:	bf18      	it	ne
 80031de:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 80031e0:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80031e2:	f023 0307 	bic.w	r3, r3, #7
 80031e6:	4303      	orrs	r3, r0
 80031e8:	60e3      	str	r3, [r4, #12]
  tickstart = HAL_GetTick ();
 80031ea:	f7fe fbeb 	bl	80019c4 <HAL_GetTick>
 80031ee:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80031f0:	e005      	b.n	80031fe <HAL_PWREx_ConfigSupply+0x36>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80031f2:	f7fe fbe7 	bl	80019c4 <HAL_GetTick>
 80031f6:	1b40      	subs	r0, r0, r5
 80031f8:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80031fc:	d804      	bhi.n	8003208 <HAL_PWREx_ConfigSupply+0x40>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80031fe:	6863      	ldr	r3, [r4, #4]
 8003200:	049b      	lsls	r3, r3, #18
 8003202:	d5f6      	bpl.n	80031f2 <HAL_PWREx_ConfigSupply+0x2a>
  return HAL_OK;
 8003204:	2000      	movs	r0, #0
}
 8003206:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8003208:	2001      	movs	r0, #1
}
 800320a:	bd38      	pop	{r3, r4, r5, pc}
 800320c:	58024800 	.word	0x58024800

08003210 <HAL_RCC_GetSysClockFreq.part.0>:
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003210:	4b3b      	ldr	r3, [pc, #236]	; (8003300 <HAL_RCC_GetSysClockFreq.part.0+0xf0>)
uint32_t HAL_RCC_GetSysClockFreq(void)
 8003212:	b430      	push	{r4, r5}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003214:	6a9a      	ldr	r2, [r3, #40]	; 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003216:	6a9c      	ldr	r4, [r3, #40]	; 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003218:	6add      	ldr	r5, [r3, #44]	; 0x2c
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));

      if (pllm != 0U)
 800321a:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800321e:	6b59      	ldr	r1, [r3, #52]	; 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003220:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
 8003224:	d038      	beq.n	8003298 <HAL_RCC_GetSysClockFreq.part.0+0x88>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003226:	f3c1 01cc 	ubfx	r1, r1, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800322a:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800322e:	f002 0203 	and.w	r2, r2, #3
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003232:	fb05 f101 	mul.w	r1, r5, r1
 8003236:	2a01      	cmp	r2, #1
 8003238:	ee07 1a90 	vmov	s15, r1
 800323c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
      {
        switch (pllsource)
 8003240:	d002      	beq.n	8003248 <HAL_RCC_GetSysClockFreq.part.0+0x38>
 8003242:	2a02      	cmp	r2, #2
 8003244:	d04e      	beq.n	80032e4 <HAL_RCC_GetSysClockFreq.part.0+0xd4>
 8003246:	b34a      	cbz	r2, 800329c <HAL_RCC_GetSysClockFreq.part.0+0x8c>
          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            break;

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003248:	ee07 0a90 	vmov	s15, r0
 800324c:	ed9f 5a2d 	vldr	s10, [pc, #180]	; 8003304 <HAL_RCC_GetSysClockFreq.part.0+0xf4>
 8003250:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003256:	eec5 6a27 	vdiv.f32	s13, s10, s15
 800325a:	eddf 5a2b 	vldr	s11, [pc, #172]	; 8003308 <HAL_RCC_GetSysClockFreq.part.0+0xf8>
 800325e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003262:	ee07 3a90 	vmov	s15, r3
 8003266:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800326a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800326e:	eee7 7a25 	vfma.f32	s15, s14, s11
 8003272:	ee77 7a86 	vadd.f32	s15, s15, s12
 8003276:	ee66 6aa7 	vmul.f32	s13, s13, s15
            break;
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800327a:	4b21      	ldr	r3, [pc, #132]	; (8003300 <HAL_RCC_GetSysClockFreq.part.0+0xf0>)
 800327c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800327e:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8003282:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003284:	ee07 3a90 	vmov	s15, r3
 8003288:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800328c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003290:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003294:	ee17 0a90 	vmov	r0, s15
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
 8003298:	bc30      	pop	{r4, r5}
 800329a:	4770      	bx	lr
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800329c:	681a      	ldr	r2, [r3, #0]
 800329e:	0692      	lsls	r2, r2, #26
 80032a0:	d527      	bpl.n	80032f2 <HAL_RCC_GetSysClockFreq.part.0+0xe2>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80032a2:	6819      	ldr	r1, [r3, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80032a4:	ee07 0a90 	vmov	s15, r0
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80032a8:	4a18      	ldr	r2, [pc, #96]	; (800330c <HAL_RCC_GetSysClockFreq.part.0+0xfc>)
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80032aa:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 80032ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80032b0:	f3c1 01c1 	ubfx	r1, r1, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80032b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80032b8:	ed9f 5a13 	vldr	s10, [pc, #76]	; 8003308 <HAL_RCC_GetSysClockFreq.part.0+0xf8>
 80032bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80032c0:	40ca      	lsrs	r2, r1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80032c2:	ee06 3a90 	vmov	s13, r3
 80032c6:	ee06 2a10 	vmov	s12, r2
 80032ca:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80032ce:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 80032d2:	eee7 6a05 	vfma.f32	s13, s14, s10
 80032d6:	ee86 7a27 	vdiv.f32	s14, s12, s15
 80032da:	ee76 6aa5 	vadd.f32	s13, s13, s11
 80032de:	ee66 6a87 	vmul.f32	s13, s13, s14
 80032e2:	e7ca      	b.n	800327a <HAL_RCC_GetSysClockFreq.part.0+0x6a>
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80032e4:	ee07 0a90 	vmov	s15, r0
 80032e8:	ed9f 5a09 	vldr	s10, [pc, #36]	; 8003310 <HAL_RCC_GetSysClockFreq.part.0+0x100>
 80032ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80032f0:	e7b0      	b.n	8003254 <HAL_RCC_GetSysClockFreq.part.0+0x44>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80032f2:	ee07 0a90 	vmov	s15, r0
 80032f6:	ed9f 5a07 	vldr	s10, [pc, #28]	; 8003314 <HAL_RCC_GetSysClockFreq.part.0+0x104>
 80032fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80032fe:	e7a9      	b.n	8003254 <HAL_RCC_GetSysClockFreq.part.0+0x44>
 8003300:	58024400 	.word	0x58024400
 8003304:	4a742400 	.word	0x4a742400
 8003308:	39000000 	.word	0x39000000
 800330c:	03d09000 	.word	0x03d09000
 8003310:	4bbebc20 	.word	0x4bbebc20
 8003314:	4c742400 	.word	0x4c742400

08003318 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8003318:	2800      	cmp	r0, #0
 800331a:	f000 81e8 	beq.w	80036ee <HAL_RCC_OscConfig+0x3d6>
{
 800331e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003320:	6803      	ldr	r3, [r0, #0]
 8003322:	4604      	mov	r4, r0
 8003324:	07d9      	lsls	r1, r3, #31
 8003326:	d52e      	bpl.n	8003386 <HAL_RCC_OscConfig+0x6e>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003328:	49a4      	ldr	r1, [pc, #656]	; (80035bc <HAL_RCC_OscConfig+0x2a4>)
 800332a:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800332c:	6a89      	ldr	r1, [r1, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800332e:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003332:	2a10      	cmp	r2, #16
 8003334:	f000 8107 	beq.w	8003546 <HAL_RCC_OscConfig+0x22e>
 8003338:	2a18      	cmp	r2, #24
 800333a:	f000 80ff 	beq.w	800353c <HAL_RCC_OscConfig+0x224>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800333e:	6863      	ldr	r3, [r4, #4]
 8003340:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003344:	f000 812a 	beq.w	800359c <HAL_RCC_OscConfig+0x284>
 8003348:	2b00      	cmp	r3, #0
 800334a:	f000 8168 	beq.w	800361e <HAL_RCC_OscConfig+0x306>
 800334e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003352:	4b9a      	ldr	r3, [pc, #616]	; (80035bc <HAL_RCC_OscConfig+0x2a4>)
 8003354:	681a      	ldr	r2, [r3, #0]
 8003356:	f000 8289 	beq.w	800386c <HAL_RCC_OscConfig+0x554>
 800335a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800335e:	601a      	str	r2, [r3, #0]
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003366:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003368:	f7fe fb2c 	bl	80019c4 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800336c:	4e93      	ldr	r6, [pc, #588]	; (80035bc <HAL_RCC_OscConfig+0x2a4>)
        tickstart = HAL_GetTick();
 800336e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003370:	e005      	b.n	800337e <HAL_RCC_OscConfig+0x66>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003372:	f7fe fb27 	bl	80019c4 <HAL_GetTick>
 8003376:	1b40      	subs	r0, r0, r5
 8003378:	2864      	cmp	r0, #100	; 0x64
 800337a:	f200 814e 	bhi.w	800361a <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800337e:	6833      	ldr	r3, [r6, #0]
 8003380:	039b      	lsls	r3, r3, #14
 8003382:	d5f6      	bpl.n	8003372 <HAL_RCC_OscConfig+0x5a>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003384:	6823      	ldr	r3, [r4, #0]
 8003386:	079d      	lsls	r5, r3, #30
 8003388:	f100 808a 	bmi.w	80034a0 <HAL_RCC_OscConfig+0x188>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800338c:	06d9      	lsls	r1, r3, #27
 800338e:	d533      	bpl.n	80033f8 <HAL_RCC_OscConfig+0xe0>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003390:	4a8a      	ldr	r2, [pc, #552]	; (80035bc <HAL_RCC_OscConfig+0x2a4>)
 8003392:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003394:	6a92      	ldr	r2, [r2, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003396:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800339a:	2b08      	cmp	r3, #8
 800339c:	f000 80e3 	beq.w	8003566 <HAL_RCC_OscConfig+0x24e>
 80033a0:	2b18      	cmp	r3, #24
 80033a2:	f000 80db 	beq.w	800355c <HAL_RCC_OscConfig+0x244>
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80033a6:	69e3      	ldr	r3, [r4, #28]
        __HAL_RCC_CSI_ENABLE();
 80033a8:	4d84      	ldr	r5, [pc, #528]	; (80035bc <HAL_RCC_OscConfig+0x2a4>)
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	f000 816f 	beq.w	800368e <HAL_RCC_OscConfig+0x376>
        __HAL_RCC_CSI_ENABLE();
 80033b0:	682b      	ldr	r3, [r5, #0]
 80033b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033b6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80033b8:	f7fe fb04 	bl	80019c4 <HAL_GetTick>
 80033bc:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80033be:	e005      	b.n	80033cc <HAL_RCC_OscConfig+0xb4>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80033c0:	f7fe fb00 	bl	80019c4 <HAL_GetTick>
 80033c4:	1b80      	subs	r0, r0, r6
 80033c6:	2802      	cmp	r0, #2
 80033c8:	f200 8127 	bhi.w	800361a <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80033cc:	682b      	ldr	r3, [r5, #0]
 80033ce:	05db      	lsls	r3, r3, #23
 80033d0:	d5f6      	bpl.n	80033c0 <HAL_RCC_OscConfig+0xa8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80033d2:	f7fe fafd 	bl	80019d0 <HAL_GetREVID>
 80033d6:	f241 0303 	movw	r3, #4099	; 0x1003
 80033da:	4298      	cmp	r0, r3
 80033dc:	f200 826d 	bhi.w	80038ba <HAL_RCC_OscConfig+0x5a2>
 80033e0:	6a22      	ldr	r2, [r4, #32]
 80033e2:	686b      	ldr	r3, [r5, #4]
 80033e4:	2a20      	cmp	r2, #32
 80033e6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80033ea:	bf0c      	ite	eq
 80033ec:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 80033f0:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 80033f4:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033f6:	6823      	ldr	r3, [r4, #0]
 80033f8:	071d      	lsls	r5, r3, #28
 80033fa:	d516      	bpl.n	800342a <HAL_RCC_OscConfig+0x112>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80033fc:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 80033fe:	4d6f      	ldr	r5, [pc, #444]	; (80035bc <HAL_RCC_OscConfig+0x2a4>)
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003400:	2b00      	cmp	r3, #0
 8003402:	f000 8122 	beq.w	800364a <HAL_RCC_OscConfig+0x332>
      __HAL_RCC_LSI_ENABLE();
 8003406:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8003408:	f043 0301 	orr.w	r3, r3, #1
 800340c:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 800340e:	f7fe fad9 	bl	80019c4 <HAL_GetTick>
 8003412:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003414:	e005      	b.n	8003422 <HAL_RCC_OscConfig+0x10a>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003416:	f7fe fad5 	bl	80019c4 <HAL_GetTick>
 800341a:	1b80      	subs	r0, r0, r6
 800341c:	2802      	cmp	r0, #2
 800341e:	f200 80fc 	bhi.w	800361a <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003422:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8003424:	0798      	lsls	r0, r3, #30
 8003426:	d5f6      	bpl.n	8003416 <HAL_RCC_OscConfig+0xfe>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003428:	6823      	ldr	r3, [r4, #0]
 800342a:	069a      	lsls	r2, r3, #26
 800342c:	d516      	bpl.n	800345c <HAL_RCC_OscConfig+0x144>
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800342e:	69a3      	ldr	r3, [r4, #24]
      __HAL_RCC_HSI48_ENABLE();
 8003430:	4d62      	ldr	r5, [pc, #392]	; (80035bc <HAL_RCC_OscConfig+0x2a4>)
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003432:	2b00      	cmp	r3, #0
 8003434:	f000 811a 	beq.w	800366c <HAL_RCC_OscConfig+0x354>
      __HAL_RCC_HSI48_ENABLE();
 8003438:	682b      	ldr	r3, [r5, #0]
 800343a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800343e:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8003440:	f7fe fac0 	bl	80019c4 <HAL_GetTick>
 8003444:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003446:	e005      	b.n	8003454 <HAL_RCC_OscConfig+0x13c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003448:	f7fe fabc 	bl	80019c4 <HAL_GetTick>
 800344c:	1b80      	subs	r0, r0, r6
 800344e:	2802      	cmp	r0, #2
 8003450:	f200 80e3 	bhi.w	800361a <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003454:	682b      	ldr	r3, [r5, #0]
 8003456:	049f      	lsls	r7, r3, #18
 8003458:	d5f6      	bpl.n	8003448 <HAL_RCC_OscConfig+0x130>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800345a:	6823      	ldr	r3, [r4, #0]
 800345c:	0759      	lsls	r1, r3, #29
 800345e:	f100 80a3 	bmi.w	80035a8 <HAL_RCC_OscConfig+0x290>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003462:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8003464:	b1d0      	cbz	r0, 800349c <HAL_RCC_OscConfig+0x184>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003466:	4d55      	ldr	r5, [pc, #340]	; (80035bc <HAL_RCC_OscConfig+0x2a4>)
 8003468:	692b      	ldr	r3, [r5, #16]
 800346a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800346e:	2b18      	cmp	r3, #24
 8003470:	f000 81ae 	beq.w	80037d0 <HAL_RCC_OscConfig+0x4b8>
        __HAL_RCC_PLL_DISABLE();
 8003474:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003476:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8003478:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800347c:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800347e:	f000 8142 	beq.w	8003706 <HAL_RCC_OscConfig+0x3ee>
        tickstart = HAL_GetTick();
 8003482:	f7fe fa9f 	bl	80019c4 <HAL_GetTick>
 8003486:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003488:	e005      	b.n	8003496 <HAL_RCC_OscConfig+0x17e>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800348a:	f7fe fa9b 	bl	80019c4 <HAL_GetTick>
 800348e:	1b00      	subs	r0, r0, r4
 8003490:	2802      	cmp	r0, #2
 8003492:	f200 80c2 	bhi.w	800361a <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003496:	682b      	ldr	r3, [r5, #0]
 8003498:	019b      	lsls	r3, r3, #6
 800349a:	d4f6      	bmi.n	800348a <HAL_RCC_OscConfig+0x172>
  return HAL_OK;
 800349c:	2000      	movs	r0, #0
}
 800349e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80034a0:	4a46      	ldr	r2, [pc, #280]	; (80035bc <HAL_RCC_OscConfig+0x2a4>)
 80034a2:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80034a4:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80034a6:	f013 0338 	ands.w	r3, r3, #56	; 0x38
 80034aa:	d12d      	bne.n	8003508 <HAL_RCC_OscConfig+0x1f0>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80034ac:	4b43      	ldr	r3, [pc, #268]	; (80035bc <HAL_RCC_OscConfig+0x2a4>)
 80034ae:	68e2      	ldr	r2, [r4, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	0759      	lsls	r1, r3, #29
 80034b4:	d501      	bpl.n	80034ba <HAL_RCC_OscConfig+0x1a2>
 80034b6:	2a00      	cmp	r2, #0
 80034b8:	d04e      	beq.n	8003558 <HAL_RCC_OscConfig+0x240>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80034ba:	4d40      	ldr	r5, [pc, #256]	; (80035bc <HAL_RCC_OscConfig+0x2a4>)
 80034bc:	682b      	ldr	r3, [r5, #0]
 80034be:	f023 0319 	bic.w	r3, r3, #25
 80034c2:	4313      	orrs	r3, r2
 80034c4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80034c6:	f7fe fa7d 	bl	80019c4 <HAL_GetTick>
 80034ca:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80034cc:	e005      	b.n	80034da <HAL_RCC_OscConfig+0x1c2>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034ce:	f7fe fa79 	bl	80019c4 <HAL_GetTick>
 80034d2:	1b80      	subs	r0, r0, r6
 80034d4:	2802      	cmp	r0, #2
 80034d6:	f200 80a0 	bhi.w	800361a <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80034da:	682b      	ldr	r3, [r5, #0]
 80034dc:	075b      	lsls	r3, r3, #29
 80034de:	d5f6      	bpl.n	80034ce <HAL_RCC_OscConfig+0x1b6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034e0:	f7fe fa76 	bl	80019d0 <HAL_GetREVID>
 80034e4:	f241 0303 	movw	r3, #4099	; 0x1003
 80034e8:	4298      	cmp	r0, r3
 80034ea:	f200 80f7 	bhi.w	80036dc <HAL_RCC_OscConfig+0x3c4>
 80034ee:	6922      	ldr	r2, [r4, #16]
 80034f0:	686b      	ldr	r3, [r5, #4]
 80034f2:	2a40      	cmp	r2, #64	; 0x40
 80034f4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80034f8:	bf0c      	ite	eq
 80034fa:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
 80034fe:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 8003502:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003504:	6823      	ldr	r3, [r4, #0]
 8003506:	e741      	b.n	800338c <HAL_RCC_OscConfig+0x74>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003508:	2b18      	cmp	r3, #24
 800350a:	f000 80e3 	beq.w	80036d4 <HAL_RCC_OscConfig+0x3bc>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800350e:	4d2b      	ldr	r5, [pc, #172]	; (80035bc <HAL_RCC_OscConfig+0x2a4>)
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003510:	68e2      	ldr	r2, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003512:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003514:	2a00      	cmp	r2, #0
 8003516:	f000 80cc 	beq.w	80036b2 <HAL_RCC_OscConfig+0x39a>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800351a:	f023 0319 	bic.w	r3, r3, #25
 800351e:	4313      	orrs	r3, r2
 8003520:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003522:	f7fe fa4f 	bl	80019c4 <HAL_GetTick>
 8003526:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003528:	e004      	b.n	8003534 <HAL_RCC_OscConfig+0x21c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800352a:	f7fe fa4b 	bl	80019c4 <HAL_GetTick>
 800352e:	1b80      	subs	r0, r0, r6
 8003530:	2802      	cmp	r0, #2
 8003532:	d872      	bhi.n	800361a <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003534:	682b      	ldr	r3, [r5, #0]
 8003536:	075f      	lsls	r7, r3, #29
 8003538:	d5f7      	bpl.n	800352a <HAL_RCC_OscConfig+0x212>
 800353a:	e7d1      	b.n	80034e0 <HAL_RCC_OscConfig+0x1c8>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800353c:	f001 0103 	and.w	r1, r1, #3
 8003540:	2902      	cmp	r1, #2
 8003542:	f47f aefc 	bne.w	800333e <HAL_RCC_OscConfig+0x26>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003546:	4a1d      	ldr	r2, [pc, #116]	; (80035bc <HAL_RCC_OscConfig+0x2a4>)
 8003548:	6812      	ldr	r2, [r2, #0]
 800354a:	0392      	lsls	r2, r2, #14
 800354c:	f57f af1b 	bpl.w	8003386 <HAL_RCC_OscConfig+0x6e>
 8003550:	6862      	ldr	r2, [r4, #4]
 8003552:	2a00      	cmp	r2, #0
 8003554:	f47f af17 	bne.w	8003386 <HAL_RCC_OscConfig+0x6e>
        return HAL_ERROR;
 8003558:	2001      	movs	r0, #1
}
 800355a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800355c:	f002 0203 	and.w	r2, r2, #3
 8003560:	2a01      	cmp	r2, #1
 8003562:	f47f af20 	bne.w	80033a6 <HAL_RCC_OscConfig+0x8e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003566:	4b15      	ldr	r3, [pc, #84]	; (80035bc <HAL_RCC_OscConfig+0x2a4>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	05da      	lsls	r2, r3, #23
 800356c:	d502      	bpl.n	8003574 <HAL_RCC_OscConfig+0x25c>
 800356e:	69e3      	ldr	r3, [r4, #28]
 8003570:	2b80      	cmp	r3, #128	; 0x80
 8003572:	d1f1      	bne.n	8003558 <HAL_RCC_OscConfig+0x240>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003574:	f7fe fa2c 	bl	80019d0 <HAL_GetREVID>
 8003578:	f241 0303 	movw	r3, #4099	; 0x1003
 800357c:	4298      	cmp	r0, r3
 800357e:	f200 80b8 	bhi.w	80036f2 <HAL_RCC_OscConfig+0x3da>
 8003582:	6a22      	ldr	r2, [r4, #32]
 8003584:	2a20      	cmp	r2, #32
 8003586:	f000 81a7 	beq.w	80038d8 <HAL_RCC_OscConfig+0x5c0>
 800358a:	490c      	ldr	r1, [pc, #48]	; (80035bc <HAL_RCC_OscConfig+0x2a4>)
 800358c:	684b      	ldr	r3, [r1, #4]
 800358e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003592:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 8003596:	604b      	str	r3, [r1, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003598:	6823      	ldr	r3, [r4, #0]
 800359a:	e72d      	b.n	80033f8 <HAL_RCC_OscConfig+0xe0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800359c:	4a07      	ldr	r2, [pc, #28]	; (80035bc <HAL_RCC_OscConfig+0x2a4>)
 800359e:	6813      	ldr	r3, [r2, #0]
 80035a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035a4:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80035a6:	e6df      	b.n	8003368 <HAL_RCC_OscConfig+0x50>
    PWR->CR1 |= PWR_CR1_DBP;
 80035a8:	4d05      	ldr	r5, [pc, #20]	; (80035c0 <HAL_RCC_OscConfig+0x2a8>)
 80035aa:	682b      	ldr	r3, [r5, #0]
 80035ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035b0:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 80035b2:	f7fe fa07 	bl	80019c4 <HAL_GetTick>
 80035b6:	4606      	mov	r6, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80035b8:	e009      	b.n	80035ce <HAL_RCC_OscConfig+0x2b6>
 80035ba:	bf00      	nop
 80035bc:	58024400 	.word	0x58024400
 80035c0:	58024800 	.word	0x58024800
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035c4:	f7fe f9fe 	bl	80019c4 <HAL_GetTick>
 80035c8:	1b80      	subs	r0, r0, r6
 80035ca:	2864      	cmp	r0, #100	; 0x64
 80035cc:	d825      	bhi.n	800361a <HAL_RCC_OscConfig+0x302>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80035ce:	682b      	ldr	r3, [r5, #0]
 80035d0:	05da      	lsls	r2, r3, #23
 80035d2:	d5f7      	bpl.n	80035c4 <HAL_RCC_OscConfig+0x2ac>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035d4:	68a3      	ldr	r3, [r4, #8]
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	f000 8178 	beq.w	80038cc <HAL_RCC_OscConfig+0x5b4>
 80035dc:	2b00      	cmp	r3, #0
 80035de:	f000 8153 	beq.w	8003888 <HAL_RCC_OscConfig+0x570>
 80035e2:	2b05      	cmp	r3, #5
 80035e4:	4ba5      	ldr	r3, [pc, #660]	; (800387c <HAL_RCC_OscConfig+0x564>)
 80035e6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80035e8:	f000 817f 	beq.w	80038ea <HAL_RCC_OscConfig+0x5d2>
 80035ec:	f022 0201 	bic.w	r2, r2, #1
 80035f0:	671a      	str	r2, [r3, #112]	; 0x70
 80035f2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80035f4:	f022 0204 	bic.w	r2, r2, #4
 80035f8:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 80035fa:	f7fe f9e3 	bl	80019c4 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80035fe:	4e9f      	ldr	r6, [pc, #636]	; (800387c <HAL_RCC_OscConfig+0x564>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003600:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8003604:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003606:	e004      	b.n	8003612 <HAL_RCC_OscConfig+0x2fa>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003608:	f7fe f9dc 	bl	80019c4 <HAL_GetTick>
 800360c:	1b40      	subs	r0, r0, r5
 800360e:	42b8      	cmp	r0, r7
 8003610:	d803      	bhi.n	800361a <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003612:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8003614:	079b      	lsls	r3, r3, #30
 8003616:	d5f7      	bpl.n	8003608 <HAL_RCC_OscConfig+0x2f0>
 8003618:	e723      	b.n	8003462 <HAL_RCC_OscConfig+0x14a>
            return HAL_TIMEOUT;
 800361a:	2003      	movs	r0, #3
}
 800361c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800361e:	4d97      	ldr	r5, [pc, #604]	; (800387c <HAL_RCC_OscConfig+0x564>)
 8003620:	682b      	ldr	r3, [r5, #0]
 8003622:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003626:	602b      	str	r3, [r5, #0]
 8003628:	682b      	ldr	r3, [r5, #0]
 800362a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800362e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003630:	f7fe f9c8 	bl	80019c4 <HAL_GetTick>
 8003634:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003636:	e004      	b.n	8003642 <HAL_RCC_OscConfig+0x32a>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003638:	f7fe f9c4 	bl	80019c4 <HAL_GetTick>
 800363c:	1b80      	subs	r0, r0, r6
 800363e:	2864      	cmp	r0, #100	; 0x64
 8003640:	d8eb      	bhi.n	800361a <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003642:	682b      	ldr	r3, [r5, #0]
 8003644:	039f      	lsls	r7, r3, #14
 8003646:	d4f7      	bmi.n	8003638 <HAL_RCC_OscConfig+0x320>
 8003648:	e69c      	b.n	8003384 <HAL_RCC_OscConfig+0x6c>
      __HAL_RCC_LSI_DISABLE();
 800364a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800364c:	f023 0301 	bic.w	r3, r3, #1
 8003650:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8003652:	f7fe f9b7 	bl	80019c4 <HAL_GetTick>
 8003656:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003658:	e004      	b.n	8003664 <HAL_RCC_OscConfig+0x34c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800365a:	f7fe f9b3 	bl	80019c4 <HAL_GetTick>
 800365e:	1b80      	subs	r0, r0, r6
 8003660:	2802      	cmp	r0, #2
 8003662:	d8da      	bhi.n	800361a <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003664:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8003666:	0799      	lsls	r1, r3, #30
 8003668:	d4f7      	bmi.n	800365a <HAL_RCC_OscConfig+0x342>
 800366a:	e6dd      	b.n	8003428 <HAL_RCC_OscConfig+0x110>
      __HAL_RCC_HSI48_DISABLE();
 800366c:	682b      	ldr	r3, [r5, #0]
 800366e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003672:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8003674:	f7fe f9a6 	bl	80019c4 <HAL_GetTick>
 8003678:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800367a:	e004      	b.n	8003686 <HAL_RCC_OscConfig+0x36e>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800367c:	f7fe f9a2 	bl	80019c4 <HAL_GetTick>
 8003680:	1b80      	subs	r0, r0, r6
 8003682:	2802      	cmp	r0, #2
 8003684:	d8c9      	bhi.n	800361a <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003686:	682b      	ldr	r3, [r5, #0]
 8003688:	0498      	lsls	r0, r3, #18
 800368a:	d4f7      	bmi.n	800367c <HAL_RCC_OscConfig+0x364>
 800368c:	e6e5      	b.n	800345a <HAL_RCC_OscConfig+0x142>
        __HAL_RCC_CSI_DISABLE();
 800368e:	682b      	ldr	r3, [r5, #0]
 8003690:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003694:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003696:	f7fe f995 	bl	80019c4 <HAL_GetTick>
 800369a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800369c:	e004      	b.n	80036a8 <HAL_RCC_OscConfig+0x390>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800369e:	f7fe f991 	bl	80019c4 <HAL_GetTick>
 80036a2:	1b80      	subs	r0, r0, r6
 80036a4:	2802      	cmp	r0, #2
 80036a6:	d8b8      	bhi.n	800361a <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80036a8:	682b      	ldr	r3, [r5, #0]
 80036aa:	05df      	lsls	r7, r3, #23
 80036ac:	d4f7      	bmi.n	800369e <HAL_RCC_OscConfig+0x386>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036ae:	6823      	ldr	r3, [r4, #0]
 80036b0:	e6a2      	b.n	80033f8 <HAL_RCC_OscConfig+0xe0>
        __HAL_RCC_HSI_DISABLE();
 80036b2:	f023 0301 	bic.w	r3, r3, #1
 80036b6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80036b8:	f7fe f984 	bl	80019c4 <HAL_GetTick>
 80036bc:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80036be:	e004      	b.n	80036ca <HAL_RCC_OscConfig+0x3b2>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036c0:	f7fe f980 	bl	80019c4 <HAL_GetTick>
 80036c4:	1b80      	subs	r0, r0, r6
 80036c6:	2802      	cmp	r0, #2
 80036c8:	d8a7      	bhi.n	800361a <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80036ca:	682b      	ldr	r3, [r5, #0]
 80036cc:	0758      	lsls	r0, r3, #29
 80036ce:	d4f7      	bmi.n	80036c0 <HAL_RCC_OscConfig+0x3a8>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80036d0:	6823      	ldr	r3, [r4, #0]
 80036d2:	e65b      	b.n	800338c <HAL_RCC_OscConfig+0x74>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80036d4:	0790      	lsls	r0, r2, #30
 80036d6:	f47f af1a 	bne.w	800350e <HAL_RCC_OscConfig+0x1f6>
 80036da:	e6e7      	b.n	80034ac <HAL_RCC_OscConfig+0x194>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036dc:	686b      	ldr	r3, [r5, #4]
 80036de:	6922      	ldr	r2, [r4, #16]
 80036e0:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80036e4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80036e8:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80036ea:	6823      	ldr	r3, [r4, #0]
 80036ec:	e64e      	b.n	800338c <HAL_RCC_OscConfig+0x74>
    return HAL_ERROR;
 80036ee:	2001      	movs	r0, #1
}
 80036f0:	4770      	bx	lr
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80036f2:	4a62      	ldr	r2, [pc, #392]	; (800387c <HAL_RCC_OscConfig+0x564>)
 80036f4:	6a21      	ldr	r1, [r4, #32]
 80036f6:	68d3      	ldr	r3, [r2, #12]
 80036f8:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 80036fc:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8003700:	60d3      	str	r3, [r2, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003702:	6823      	ldr	r3, [r4, #0]
 8003704:	e678      	b.n	80033f8 <HAL_RCC_OscConfig+0xe0>
        tickstart = HAL_GetTick();
 8003706:	f7fe f95d 	bl	80019c4 <HAL_GetTick>
 800370a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800370c:	e004      	b.n	8003718 <HAL_RCC_OscConfig+0x400>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800370e:	f7fe f959 	bl	80019c4 <HAL_GetTick>
 8003712:	1b80      	subs	r0, r0, r6
 8003714:	2802      	cmp	r0, #2
 8003716:	d880      	bhi.n	800361a <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003718:	682b      	ldr	r3, [r5, #0]
 800371a:	0199      	lsls	r1, r3, #6
 800371c:	d4f7      	bmi.n	800370e <HAL_RCC_OscConfig+0x3f6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800371e:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8003720:	4b57      	ldr	r3, [pc, #348]	; (8003880 <HAL_RCC_OscConfig+0x568>)
 8003722:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003724:	400b      	ands	r3, r1
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003726:	4957      	ldr	r1, [pc, #348]	; (8003884 <HAL_RCC_OscConfig+0x56c>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003728:	4e54      	ldr	r6, [pc, #336]	; (800387c <HAL_RCC_OscConfig+0x564>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800372a:	4313      	orrs	r3, r2
 800372c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800372e:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8003732:	62ab      	str	r3, [r5, #40]	; 0x28
 8003734:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	; 0x34
 8003738:	3b01      	subs	r3, #1
 800373a:	3a01      	subs	r2, #1
 800373c:	025b      	lsls	r3, r3, #9
 800373e:	0412      	lsls	r2, r2, #16
 8003740:	b29b      	uxth	r3, r3
 8003742:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8003746:	4313      	orrs	r3, r2
 8003748:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800374a:	3a01      	subs	r2, #1
 800374c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003750:	4313      	orrs	r3, r2
 8003752:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003754:	3a01      	subs	r2, #1
 8003756:	0612      	lsls	r2, r2, #24
 8003758:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800375c:	4313      	orrs	r3, r2
 800375e:	632b      	str	r3, [r5, #48]	; 0x30
        __HAL_RCC_PLLFRACN_DISABLE();
 8003760:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8003762:	f023 0301 	bic.w	r3, r3, #1
 8003766:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003768:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800376a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800376c:	4011      	ands	r1, r2
 800376e:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 8003772:	6369      	str	r1, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003774:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8003776:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003778:	f023 030c 	bic.w	r3, r3, #12
 800377c:	4313      	orrs	r3, r2
 800377e:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003780:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8003782:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8003784:	f023 0302 	bic.w	r3, r3, #2
 8003788:	4313      	orrs	r3, r2
 800378a:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800378c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800378e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003792:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003794:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8003796:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800379a:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800379c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800379e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037a2:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_ENABLE();
 80037a4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80037a6:	f043 0301 	orr.w	r3, r3, #1
 80037aa:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 80037ac:	682b      	ldr	r3, [r5, #0]
 80037ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80037b2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80037b4:	f7fe f906 	bl	80019c4 <HAL_GetTick>
 80037b8:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80037ba:	e005      	b.n	80037c8 <HAL_RCC_OscConfig+0x4b0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037bc:	f7fe f902 	bl	80019c4 <HAL_GetTick>
 80037c0:	1b00      	subs	r0, r0, r4
 80037c2:	2802      	cmp	r0, #2
 80037c4:	f63f af29 	bhi.w	800361a <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80037c8:	6833      	ldr	r3, [r6, #0]
 80037ca:	019a      	lsls	r2, r3, #6
 80037cc:	d5f6      	bpl.n	80037bc <HAL_RCC_OscConfig+0x4a4>
 80037ce:	e665      	b.n	800349c <HAL_RCC_OscConfig+0x184>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037d0:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 80037d2:	6aaa      	ldr	r2, [r5, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 80037d4:	6b2e      	ldr	r6, [r5, #48]	; 0x30
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037d6:	f43f ae62 	beq.w	800349e <HAL_RCC_OscConfig+0x186>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037da:	f002 0303 	and.w	r3, r2, #3
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037de:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80037e0:	428b      	cmp	r3, r1
 80037e2:	f47f aeb9 	bne.w	8003558 <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80037e6:	f3c2 1205 	ubfx	r2, r2, #4, #6
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037ea:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80037ec:	429a      	cmp	r2, r3
 80037ee:	f47f aeb3 	bne.w	8003558 <HAL_RCC_OscConfig+0x240>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80037f2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80037f4:	f3c6 0208 	ubfx	r2, r6, #0, #9
 80037f8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80037fa:	429a      	cmp	r2, r3
 80037fc:	f47f aeac 	bne.w	8003558 <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003800:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003802:	f3c6 2246 	ubfx	r2, r6, #9, #7
 8003806:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003808:	429a      	cmp	r2, r3
 800380a:	f47f aea5 	bne.w	8003558 <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800380e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003810:	f3c6 4206 	ubfx	r2, r6, #16, #7
 8003814:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003816:	429a      	cmp	r2, r3
 8003818:	f47f ae9e 	bne.w	8003558 <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800381c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800381e:	f3c6 6606 	ubfx	r6, r6, #24, #7
 8003822:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003824:	429e      	cmp	r6, r3
 8003826:	f47f ae97 	bne.w	8003558 <HAL_RCC_OscConfig+0x240>
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800382a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800382c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800382e:	f3c3 03cc 	ubfx	r3, r3, #3, #13
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003832:	429a      	cmp	r2, r3
 8003834:	f43f ae32 	beq.w	800349c <HAL_RCC_OscConfig+0x184>
          __HAL_RCC_PLLFRACN_DISABLE();
 8003838:	4a10      	ldr	r2, [pc, #64]	; (800387c <HAL_RCC_OscConfig+0x564>)
 800383a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800383c:	f023 0301 	bic.w	r3, r3, #1
 8003840:	62d3      	str	r3, [r2, #44]	; 0x2c
          tickstart = HAL_GetTick();
 8003842:	f7fe f8bf 	bl	80019c4 <HAL_GetTick>
 8003846:	4605      	mov	r5, r0
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003848:	f7fe f8bc 	bl	80019c4 <HAL_GetTick>
 800384c:	42a8      	cmp	r0, r5
 800384e:	d0fb      	beq.n	8003848 <HAL_RCC_OscConfig+0x530>
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003850:	4a0a      	ldr	r2, [pc, #40]	; (800387c <HAL_RCC_OscConfig+0x564>)
  return HAL_OK;
 8003852:	2000      	movs	r0, #0
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003854:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8003856:	4b0b      	ldr	r3, [pc, #44]	; (8003884 <HAL_RCC_OscConfig+0x56c>)
 8003858:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800385a:	4023      	ands	r3, r4
 800385c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003860:	6353      	str	r3, [r2, #52]	; 0x34
          __HAL_RCC_PLLFRACN_ENABLE();
 8003862:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003864:	f043 0301 	orr.w	r3, r3, #1
 8003868:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 800386a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800386c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003870:	601a      	str	r2, [r3, #0]
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003878:	601a      	str	r2, [r3, #0]
 800387a:	e575      	b.n	8003368 <HAL_RCC_OscConfig+0x50>
 800387c:	58024400 	.word	0x58024400
 8003880:	fffffc0c 	.word	0xfffffc0c
 8003884:	ffff0007 	.word	0xffff0007
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003888:	4d1c      	ldr	r5, [pc, #112]	; (80038fc <HAL_RCC_OscConfig+0x5e4>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800388a:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800388e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8003890:	f023 0301 	bic.w	r3, r3, #1
 8003894:	672b      	str	r3, [r5, #112]	; 0x70
 8003896:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8003898:	f023 0304 	bic.w	r3, r3, #4
 800389c:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 800389e:	f7fe f891 	bl	80019c4 <HAL_GetTick>
 80038a2:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80038a4:	e005      	b.n	80038b2 <HAL_RCC_OscConfig+0x59a>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038a6:	f7fe f88d 	bl	80019c4 <HAL_GetTick>
 80038aa:	1b80      	subs	r0, r0, r6
 80038ac:	42b8      	cmp	r0, r7
 80038ae:	f63f aeb4 	bhi.w	800361a <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80038b2:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80038b4:	0798      	lsls	r0, r3, #30
 80038b6:	d4f6      	bmi.n	80038a6 <HAL_RCC_OscConfig+0x58e>
 80038b8:	e5d3      	b.n	8003462 <HAL_RCC_OscConfig+0x14a>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80038ba:	68eb      	ldr	r3, [r5, #12]
 80038bc:	6a22      	ldr	r2, [r4, #32]
 80038be:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 80038c2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80038c6:	60eb      	str	r3, [r5, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038c8:	6823      	ldr	r3, [r4, #0]
 80038ca:	e595      	b.n	80033f8 <HAL_RCC_OscConfig+0xe0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038cc:	4a0b      	ldr	r2, [pc, #44]	; (80038fc <HAL_RCC_OscConfig+0x5e4>)
 80038ce:	6f13      	ldr	r3, [r2, #112]	; 0x70
 80038d0:	f043 0301 	orr.w	r3, r3, #1
 80038d4:	6713      	str	r3, [r2, #112]	; 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80038d6:	e690      	b.n	80035fa <HAL_RCC_OscConfig+0x2e2>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80038d8:	4a08      	ldr	r2, [pc, #32]	; (80038fc <HAL_RCC_OscConfig+0x5e4>)
 80038da:	6853      	ldr	r3, [r2, #4]
 80038dc:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80038e0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80038e4:	6053      	str	r3, [r2, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038e6:	6823      	ldr	r3, [r4, #0]
 80038e8:	e586      	b.n	80033f8 <HAL_RCC_OscConfig+0xe0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038ea:	f042 0204 	orr.w	r2, r2, #4
 80038ee:	671a      	str	r2, [r3, #112]	; 0x70
 80038f0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80038f2:	f042 0201 	orr.w	r2, r2, #1
 80038f6:	671a      	str	r2, [r3, #112]	; 0x70
 80038f8:	e67f      	b.n	80035fa <HAL_RCC_OscConfig+0x2e2>
 80038fa:	bf00      	nop
 80038fc:	58024400 	.word	0x58024400

08003900 <HAL_RCC_GetSysClockFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003900:	4a0c      	ldr	r2, [pc, #48]	; (8003934 <HAL_RCC_GetSysClockFreq+0x34>)
 8003902:	6913      	ldr	r3, [r2, #16]
 8003904:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003908:	2b10      	cmp	r3, #16
 800390a:	d004      	beq.n	8003916 <HAL_RCC_GetSysClockFreq+0x16>
 800390c:	2b18      	cmp	r3, #24
 800390e:	d00d      	beq.n	800392c <HAL_RCC_GetSysClockFreq+0x2c>
 8003910:	b11b      	cbz	r3, 800391a <HAL_RCC_GetSysClockFreq+0x1a>
      sysclockfreq = CSI_VALUE;
 8003912:	4809      	ldr	r0, [pc, #36]	; (8003938 <HAL_RCC_GetSysClockFreq+0x38>)
 8003914:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003916:	4809      	ldr	r0, [pc, #36]	; (800393c <HAL_RCC_GetSysClockFreq+0x3c>)
 8003918:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800391a:	6813      	ldr	r3, [r2, #0]
 800391c:	069b      	lsls	r3, r3, #26
 800391e:	d507      	bpl.n	8003930 <HAL_RCC_GetSysClockFreq+0x30>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003920:	6813      	ldr	r3, [r2, #0]
 8003922:	4807      	ldr	r0, [pc, #28]	; (8003940 <HAL_RCC_GetSysClockFreq+0x40>)
 8003924:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8003928:	40d8      	lsrs	r0, r3
 800392a:	4770      	bx	lr
 800392c:	f7ff bc70 	b.w	8003210 <HAL_RCC_GetSysClockFreq.part.0>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003930:	4803      	ldr	r0, [pc, #12]	; (8003940 <HAL_RCC_GetSysClockFreq+0x40>)
}
 8003932:	4770      	bx	lr
 8003934:	58024400 	.word	0x58024400
 8003938:	003d0900 	.word	0x003d0900
 800393c:	017d7840 	.word	0x017d7840
 8003940:	03d09000 	.word	0x03d09000

08003944 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8003944:	2800      	cmp	r0, #0
 8003946:	f000 810c 	beq.w	8003b62 <HAL_RCC_ClockConfig+0x21e>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800394a:	4a8c      	ldr	r2, [pc, #560]	; (8003b7c <HAL_RCC_ClockConfig+0x238>)
 800394c:	6813      	ldr	r3, [r2, #0]
 800394e:	f003 030f 	and.w	r3, r3, #15
 8003952:	428b      	cmp	r3, r1
{
 8003954:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003958:	4604      	mov	r4, r0
 800395a:	460d      	mov	r5, r1
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800395c:	d20c      	bcs.n	8003978 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800395e:	6813      	ldr	r3, [r2, #0]
 8003960:	f023 030f 	bic.w	r3, r3, #15
 8003964:	430b      	orrs	r3, r1
 8003966:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003968:	6813      	ldr	r3, [r2, #0]
 800396a:	f003 030f 	and.w	r3, r3, #15
 800396e:	428b      	cmp	r3, r1
 8003970:	d002      	beq.n	8003978 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8003972:	2001      	movs	r0, #1
}
 8003974:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003978:	6823      	ldr	r3, [r4, #0]
 800397a:	075f      	lsls	r7, r3, #29
 800397c:	d50b      	bpl.n	8003996 <HAL_RCC_ClockConfig+0x52>
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800397e:	4980      	ldr	r1, [pc, #512]	; (8003b80 <HAL_RCC_ClockConfig+0x23c>)
 8003980:	6920      	ldr	r0, [r4, #16]
 8003982:	698a      	ldr	r2, [r1, #24]
 8003984:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8003988:	4290      	cmp	r0, r2
 800398a:	d904      	bls.n	8003996 <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800398c:	698a      	ldr	r2, [r1, #24]
 800398e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003992:	4302      	orrs	r2, r0
 8003994:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003996:	071e      	lsls	r6, r3, #28
 8003998:	d50b      	bpl.n	80039b2 <HAL_RCC_ClockConfig+0x6e>
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800399a:	4979      	ldr	r1, [pc, #484]	; (8003b80 <HAL_RCC_ClockConfig+0x23c>)
 800399c:	6960      	ldr	r0, [r4, #20]
 800399e:	69ca      	ldr	r2, [r1, #28]
 80039a0:	f002 0270 	and.w	r2, r2, #112	; 0x70
 80039a4:	4290      	cmp	r0, r2
 80039a6:	d904      	bls.n	80039b2 <HAL_RCC_ClockConfig+0x6e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80039a8:	69ca      	ldr	r2, [r1, #28]
 80039aa:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80039ae:	4302      	orrs	r2, r0
 80039b0:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039b2:	06d8      	lsls	r0, r3, #27
 80039b4:	d50b      	bpl.n	80039ce <HAL_RCC_ClockConfig+0x8a>
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80039b6:	4972      	ldr	r1, [pc, #456]	; (8003b80 <HAL_RCC_ClockConfig+0x23c>)
 80039b8:	69a0      	ldr	r0, [r4, #24]
 80039ba:	69ca      	ldr	r2, [r1, #28]
 80039bc:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 80039c0:	4290      	cmp	r0, r2
 80039c2:	d904      	bls.n	80039ce <HAL_RCC_ClockConfig+0x8a>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80039c4:	69ca      	ldr	r2, [r1, #28]
 80039c6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80039ca:	4302      	orrs	r2, r0
 80039cc:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80039ce:	0699      	lsls	r1, r3, #26
 80039d0:	d50b      	bpl.n	80039ea <HAL_RCC_ClockConfig+0xa6>
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80039d2:	496b      	ldr	r1, [pc, #428]	; (8003b80 <HAL_RCC_ClockConfig+0x23c>)
 80039d4:	69e0      	ldr	r0, [r4, #28]
 80039d6:	6a0a      	ldr	r2, [r1, #32]
 80039d8:	f002 0270 	and.w	r2, r2, #112	; 0x70
 80039dc:	4290      	cmp	r0, r2
 80039de:	d904      	bls.n	80039ea <HAL_RCC_ClockConfig+0xa6>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80039e0:	6a0a      	ldr	r2, [r1, #32]
 80039e2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80039e6:	4302      	orrs	r2, r0
 80039e8:	620a      	str	r2, [r1, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039ea:	079a      	lsls	r2, r3, #30
 80039ec:	f140 80ab 	bpl.w	8003b46 <HAL_RCC_ClockConfig+0x202>
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80039f0:	4863      	ldr	r0, [pc, #396]	; (8003b80 <HAL_RCC_ClockConfig+0x23c>)
 80039f2:	68e1      	ldr	r1, [r4, #12]
 80039f4:	6982      	ldr	r2, [r0, #24]
 80039f6:	f002 020f 	and.w	r2, r2, #15
 80039fa:	4291      	cmp	r1, r2
 80039fc:	d904      	bls.n	8003a08 <HAL_RCC_ClockConfig+0xc4>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039fe:	6982      	ldr	r2, [r0, #24]
 8003a00:	f022 020f 	bic.w	r2, r2, #15
 8003a04:	430a      	orrs	r2, r1
 8003a06:	6182      	str	r2, [r0, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a08:	07d8      	lsls	r0, r3, #31
 8003a0a:	d530      	bpl.n	8003a6e <HAL_RCC_ClockConfig+0x12a>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003a0c:	4a5c      	ldr	r2, [pc, #368]	; (8003b80 <HAL_RCC_ClockConfig+0x23c>)
 8003a0e:	68a1      	ldr	r1, [r4, #8]
 8003a10:	6993      	ldr	r3, [r2, #24]
 8003a12:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003a16:	430b      	orrs	r3, r1
 8003a18:	6193      	str	r3, [r2, #24]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a1a:	6861      	ldr	r1, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003a1c:	6813      	ldr	r3, [r2, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a1e:	2902      	cmp	r1, #2
 8003a20:	f000 80a1 	beq.w	8003b66 <HAL_RCC_ClockConfig+0x222>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a24:	2903      	cmp	r1, #3
 8003a26:	f000 8098 	beq.w	8003b5a <HAL_RCC_ClockConfig+0x216>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003a2a:	2901      	cmp	r1, #1
 8003a2c:	f000 80a1 	beq.w	8003b72 <HAL_RCC_ClockConfig+0x22e>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003a30:	0758      	lsls	r0, r3, #29
 8003a32:	d59e      	bpl.n	8003972 <HAL_RCC_ClockConfig+0x2e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003a34:	4e52      	ldr	r6, [pc, #328]	; (8003b80 <HAL_RCC_ClockConfig+0x23c>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a36:	f241 3888 	movw	r8, #5000	; 0x1388
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003a3a:	6933      	ldr	r3, [r6, #16]
 8003a3c:	f023 0307 	bic.w	r3, r3, #7
 8003a40:	430b      	orrs	r3, r1
 8003a42:	6133      	str	r3, [r6, #16]
    tickstart = HAL_GetTick();
 8003a44:	f7fd ffbe 	bl	80019c4 <HAL_GetTick>
 8003a48:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a4a:	e005      	b.n	8003a58 <HAL_RCC_ClockConfig+0x114>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a4c:	f7fd ffba 	bl	80019c4 <HAL_GetTick>
 8003a50:	1bc0      	subs	r0, r0, r7
 8003a52:	4540      	cmp	r0, r8
 8003a54:	f200 808b 	bhi.w	8003b6e <HAL_RCC_ClockConfig+0x22a>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a58:	6933      	ldr	r3, [r6, #16]
 8003a5a:	6862      	ldr	r2, [r4, #4]
 8003a5c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003a60:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 8003a64:	d1f2      	bne.n	8003a4c <HAL_RCC_ClockConfig+0x108>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a66:	6823      	ldr	r3, [r4, #0]
 8003a68:	0799      	lsls	r1, r3, #30
 8003a6a:	d506      	bpl.n	8003a7a <HAL_RCC_ClockConfig+0x136>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003a6c:	68e1      	ldr	r1, [r4, #12]
 8003a6e:	4844      	ldr	r0, [pc, #272]	; (8003b80 <HAL_RCC_ClockConfig+0x23c>)
 8003a70:	6982      	ldr	r2, [r0, #24]
 8003a72:	f002 020f 	and.w	r2, r2, #15
 8003a76:	428a      	cmp	r2, r1
 8003a78:	d869      	bhi.n	8003b4e <HAL_RCC_ClockConfig+0x20a>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a7a:	4940      	ldr	r1, [pc, #256]	; (8003b7c <HAL_RCC_ClockConfig+0x238>)
 8003a7c:	680a      	ldr	r2, [r1, #0]
 8003a7e:	f002 020f 	and.w	r2, r2, #15
 8003a82:	42aa      	cmp	r2, r5
 8003a84:	d90a      	bls.n	8003a9c <HAL_RCC_ClockConfig+0x158>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a86:	680a      	ldr	r2, [r1, #0]
 8003a88:	f022 020f 	bic.w	r2, r2, #15
 8003a8c:	432a      	orrs	r2, r5
 8003a8e:	600a      	str	r2, [r1, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a90:	680a      	ldr	r2, [r1, #0]
 8003a92:	f002 020f 	and.w	r2, r2, #15
 8003a96:	42aa      	cmp	r2, r5
 8003a98:	f47f af6b 	bne.w	8003972 <HAL_RCC_ClockConfig+0x2e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003a9c:	075a      	lsls	r2, r3, #29
 8003a9e:	d50b      	bpl.n	8003ab8 <HAL_RCC_ClockConfig+0x174>
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003aa0:	4937      	ldr	r1, [pc, #220]	; (8003b80 <HAL_RCC_ClockConfig+0x23c>)
 8003aa2:	6920      	ldr	r0, [r4, #16]
 8003aa4:	698a      	ldr	r2, [r1, #24]
 8003aa6:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8003aaa:	4290      	cmp	r0, r2
 8003aac:	d204      	bcs.n	8003ab8 <HAL_RCC_ClockConfig+0x174>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003aae:	698a      	ldr	r2, [r1, #24]
 8003ab0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003ab4:	4302      	orrs	r2, r0
 8003ab6:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ab8:	071f      	lsls	r7, r3, #28
 8003aba:	d50b      	bpl.n	8003ad4 <HAL_RCC_ClockConfig+0x190>
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003abc:	4930      	ldr	r1, [pc, #192]	; (8003b80 <HAL_RCC_ClockConfig+0x23c>)
 8003abe:	6960      	ldr	r0, [r4, #20]
 8003ac0:	69ca      	ldr	r2, [r1, #28]
 8003ac2:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8003ac6:	4290      	cmp	r0, r2
 8003ac8:	d204      	bcs.n	8003ad4 <HAL_RCC_ClockConfig+0x190>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003aca:	69ca      	ldr	r2, [r1, #28]
 8003acc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003ad0:	4302      	orrs	r2, r0
 8003ad2:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ad4:	06de      	lsls	r6, r3, #27
 8003ad6:	d50b      	bpl.n	8003af0 <HAL_RCC_ClockConfig+0x1ac>
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003ad8:	4929      	ldr	r1, [pc, #164]	; (8003b80 <HAL_RCC_ClockConfig+0x23c>)
 8003ada:	69a0      	ldr	r0, [r4, #24]
 8003adc:	69ca      	ldr	r2, [r1, #28]
 8003ade:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8003ae2:	4290      	cmp	r0, r2
 8003ae4:	d204      	bcs.n	8003af0 <HAL_RCC_ClockConfig+0x1ac>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003ae6:	69ca      	ldr	r2, [r1, #28]
 8003ae8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003aec:	4302      	orrs	r2, r0
 8003aee:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003af0:	069d      	lsls	r5, r3, #26
 8003af2:	d50b      	bpl.n	8003b0c <HAL_RCC_ClockConfig+0x1c8>
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003af4:	4a22      	ldr	r2, [pc, #136]	; (8003b80 <HAL_RCC_ClockConfig+0x23c>)
 8003af6:	69e1      	ldr	r1, [r4, #28]
 8003af8:	6a13      	ldr	r3, [r2, #32]
 8003afa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003afe:	4299      	cmp	r1, r3
 8003b00:	d204      	bcs.n	8003b0c <HAL_RCC_ClockConfig+0x1c8>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003b02:	6a13      	ldr	r3, [r2, #32]
 8003b04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b08:	430b      	orrs	r3, r1
 8003b0a:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003b0c:	f7ff fef8 	bl	8003900 <HAL_RCC_GetSysClockFreq>
 8003b10:	4a1b      	ldr	r2, [pc, #108]	; (8003b80 <HAL_RCC_ClockConfig+0x23c>)
 8003b12:	4603      	mov	r3, r0
 8003b14:	481b      	ldr	r0, [pc, #108]	; (8003b84 <HAL_RCC_ClockConfig+0x240>)
 8003b16:	6991      	ldr	r1, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003b18:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003b1a:	f3c1 2103 	ubfx	r1, r1, #8, #4
  SystemCoreClock = common_system_clock;
 8003b1e:	4d1a      	ldr	r5, [pc, #104]	; (8003b88 <HAL_RCC_ClockConfig+0x244>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003b20:	f002 020f 	and.w	r2, r2, #15
 8003b24:	4c19      	ldr	r4, [pc, #100]	; (8003b8c <HAL_RCC_ClockConfig+0x248>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003b26:	5c41      	ldrb	r1, [r0, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003b28:	5c82      	ldrb	r2, [r0, r2]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003b2a:	f001 011f 	and.w	r1, r1, #31
  halstatus = HAL_InitTick(uwTickPrio);
 8003b2e:	4818      	ldr	r0, [pc, #96]	; (8003b90 <HAL_RCC_ClockConfig+0x24c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003b30:	f002 021f 	and.w	r2, r2, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003b34:	40cb      	lsrs	r3, r1
  halstatus = HAL_InitTick(uwTickPrio);
 8003b36:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = common_system_clock;
 8003b38:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003b3a:	40d3      	lsrs	r3, r2
 8003b3c:	6023      	str	r3, [r4, #0]
}
 8003b3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick(uwTickPrio);
 8003b42:	f7fd bce9 	b.w	8001518 <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b46:	07da      	lsls	r2, r3, #31
 8003b48:	f53f af60 	bmi.w	8003a0c <HAL_RCC_ClockConfig+0xc8>
 8003b4c:	e795      	b.n	8003a7a <HAL_RCC_ClockConfig+0x136>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b4e:	6982      	ldr	r2, [r0, #24]
 8003b50:	f022 020f 	bic.w	r2, r2, #15
 8003b54:	430a      	orrs	r2, r1
 8003b56:	6182      	str	r2, [r0, #24]
 8003b58:	e78f      	b.n	8003a7a <HAL_RCC_ClockConfig+0x136>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003b5a:	019f      	lsls	r7, r3, #6
 8003b5c:	f53f af6a 	bmi.w	8003a34 <HAL_RCC_ClockConfig+0xf0>
 8003b60:	e707      	b.n	8003972 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8003b62:	2001      	movs	r0, #1
}
 8003b64:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003b66:	039b      	lsls	r3, r3, #14
 8003b68:	f53f af64 	bmi.w	8003a34 <HAL_RCC_ClockConfig+0xf0>
 8003b6c:	e701      	b.n	8003972 <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 8003b6e:	2003      	movs	r0, #3
 8003b70:	e700      	b.n	8003974 <HAL_RCC_ClockConfig+0x30>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003b72:	05de      	lsls	r6, r3, #23
 8003b74:	f53f af5e 	bmi.w	8003a34 <HAL_RCC_ClockConfig+0xf0>
 8003b78:	e6fb      	b.n	8003972 <HAL_RCC_ClockConfig+0x2e>
 8003b7a:	bf00      	nop
 8003b7c:	52002000 	.word	0x52002000
 8003b80:	58024400 	.word	0x58024400
 8003b84:	08013098 	.word	0x08013098
 8003b88:	24000000 	.word	0x24000000
 8003b8c:	24000004 	.word	0x24000004
 8003b90:	2400000c 	.word	0x2400000c

08003b94 <HAL_RCC_GetHCLKFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b94:	4a18      	ldr	r2, [pc, #96]	; (8003bf8 <HAL_RCC_GetHCLKFreq+0x64>)
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b96:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b98:	6913      	ldr	r3, [r2, #16]
 8003b9a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003b9e:	2b10      	cmp	r3, #16
 8003ba0:	d01a      	beq.n	8003bd8 <HAL_RCC_GetHCLKFreq+0x44>
 8003ba2:	2b18      	cmp	r3, #24
 8003ba4:	d023      	beq.n	8003bee <HAL_RCC_GetHCLKFreq+0x5a>
 8003ba6:	b1cb      	cbz	r3, 8003bdc <HAL_RCC_GetHCLKFreq+0x48>
      sysclockfreq = CSI_VALUE;
 8003ba8:	4814      	ldr	r0, [pc, #80]	; (8003bfc <HAL_RCC_GetHCLKFreq+0x68>)
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003baa:	4b13      	ldr	r3, [pc, #76]	; (8003bf8 <HAL_RCC_GetHCLKFreq+0x64>)
 8003bac:	4914      	ldr	r1, [pc, #80]	; (8003c00 <HAL_RCC_GetHCLKFreq+0x6c>)
 8003bae:	699a      	ldr	r2, [r3, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003bb0:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003bb2:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003bb6:	4c13      	ldr	r4, [pc, #76]	; (8003c04 <HAL_RCC_GetHCLKFreq+0x70>)
 8003bb8:	f003 030f 	and.w	r3, r3, #15
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003bbc:	4d12      	ldr	r5, [pc, #72]	; (8003c08 <HAL_RCC_GetHCLKFreq+0x74>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003bbe:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003bc0:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003bc2:	f002 021f 	and.w	r2, r2, #31
 8003bc6:	fa20 f202 	lsr.w	r2, r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003bca:	f003 001f 	and.w	r0, r3, #31
 8003bce:	fa22 f000 	lsr.w	r0, r2, r0
  SystemCoreClock = common_system_clock;
 8003bd2:	602a      	str	r2, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003bd4:	6020      	str	r0, [r4, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 8003bd6:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003bd8:	480c      	ldr	r0, [pc, #48]	; (8003c0c <HAL_RCC_GetHCLKFreq+0x78>)
 8003bda:	e7e6      	b.n	8003baa <HAL_RCC_GetHCLKFreq+0x16>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003bdc:	6813      	ldr	r3, [r2, #0]
 8003bde:	069b      	lsls	r3, r3, #26
 8003be0:	d508      	bpl.n	8003bf4 <HAL_RCC_GetHCLKFreq+0x60>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003be2:	6813      	ldr	r3, [r2, #0]
 8003be4:	480a      	ldr	r0, [pc, #40]	; (8003c10 <HAL_RCC_GetHCLKFreq+0x7c>)
 8003be6:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8003bea:	40d8      	lsrs	r0, r3
 8003bec:	e7dd      	b.n	8003baa <HAL_RCC_GetHCLKFreq+0x16>
 8003bee:	f7ff fb0f 	bl	8003210 <HAL_RCC_GetSysClockFreq.part.0>
 8003bf2:	e7da      	b.n	8003baa <HAL_RCC_GetHCLKFreq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003bf4:	4806      	ldr	r0, [pc, #24]	; (8003c10 <HAL_RCC_GetHCLKFreq+0x7c>)
 8003bf6:	e7d8      	b.n	8003baa <HAL_RCC_GetHCLKFreq+0x16>
 8003bf8:	58024400 	.word	0x58024400
 8003bfc:	003d0900 	.word	0x003d0900
 8003c00:	08013098 	.word	0x08013098
 8003c04:	24000004 	.word	0x24000004
 8003c08:	24000000 	.word	0x24000000
 8003c0c:	017d7840 	.word	0x017d7840
 8003c10:	03d09000 	.word	0x03d09000

08003c14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c14:	b508      	push	{r3, lr}
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003c16:	f7ff ffbd 	bl	8003b94 <HAL_RCC_GetHCLKFreq>
 8003c1a:	4b05      	ldr	r3, [pc, #20]	; (8003c30 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8003c1c:	4a05      	ldr	r2, [pc, #20]	; (8003c34 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c1e:	69db      	ldr	r3, [r3, #28]
 8003c20:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8003c24:	5cd3      	ldrb	r3, [r2, r3]
 8003c26:	f003 031f 	and.w	r3, r3, #31
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003c2a:	40d8      	lsrs	r0, r3
 8003c2c:	bd08      	pop	{r3, pc}
 8003c2e:	bf00      	nop
 8003c30:	58024400 	.word	0x58024400
 8003c34:	08013098 	.word	0x08013098

08003c38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c38:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003c3a:	f7ff ffab 	bl	8003b94 <HAL_RCC_GetHCLKFreq>
 8003c3e:	4b05      	ldr	r3, [pc, #20]	; (8003c54 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8003c40:	4a05      	ldr	r2, [pc, #20]	; (8003c58 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c42:	69db      	ldr	r3, [r3, #28]
 8003c44:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8003c48:	5cd3      	ldrb	r3, [r2, r3]
 8003c4a:	f003 031f 	and.w	r3, r3, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003c4e:	40d8      	lsrs	r0, r3
 8003c50:	bd08      	pop	{r3, pc}
 8003c52:	bf00      	nop
 8003c54:	58024400 	.word	0x58024400
 8003c58:	08013098 	.word	0x08013098

08003c5c <HAL_RCC_GetClockConfig>:
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003c5c:	4b13      	ldr	r3, [pc, #76]	; (8003cac <HAL_RCC_GetClockConfig+0x50>)
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8003c5e:	223f      	movs	r2, #63	; 0x3f
 8003c60:	6002      	str	r2, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003c62:	691a      	ldr	r2, [r3, #16]
 8003c64:	f002 0207 	and.w	r2, r2, #7
 8003c68:	6042      	str	r2, [r0, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8003c6a:	699a      	ldr	r2, [r3, #24]
 8003c6c:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
 8003c70:	6082      	str	r2, [r0, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8003c72:	699a      	ldr	r2, [r3, #24]
 8003c74:	f002 020f 	and.w	r2, r2, #15
 8003c78:	60c2      	str	r2, [r0, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8003c7a:	699a      	ldr	r2, [r3, #24]
 8003c7c:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8003c80:	6102      	str	r2, [r0, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8003c82:	69da      	ldr	r2, [r3, #28]
 8003c84:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8003c88:	6142      	str	r2, [r0, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8003c8a:	69da      	ldr	r2, [r3, #28]
 8003c8c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8003c90:	6182      	str	r2, [r0, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8003c92:	6a1b      	ldr	r3, [r3, #32]
{
 8003c94:	b410      	push	{r4}
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8003c96:	f003 0370 	and.w	r3, r3, #112	; 0x70
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003c9a:	4c05      	ldr	r4, [pc, #20]	; (8003cb0 <HAL_RCC_GetClockConfig+0x54>)
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8003c9c:	61c3      	str	r3, [r0, #28]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003c9e:	6823      	ldr	r3, [r4, #0]
}
 8003ca0:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003ca4:	f003 030f 	and.w	r3, r3, #15
 8003ca8:	600b      	str	r3, [r1, #0]
}
 8003caa:	4770      	bx	lr
 8003cac:	58024400 	.word	0x58024400
 8003cb0:	52002000 	.word	0x52002000

08003cb4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003cb6:	4c3a      	ldr	r4, [pc, #232]	; (8003da0 <RCCEx_PLL2_Config+0xec>)
 8003cb8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003cba:	f003 0303 	and.w	r3, r3, #3
 8003cbe:	2b03      	cmp	r3, #3
 8003cc0:	d067      	beq.n	8003d92 <RCCEx_PLL2_Config+0xde>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003cc2:	6823      	ldr	r3, [r4, #0]
 8003cc4:	4606      	mov	r6, r0
 8003cc6:	460f      	mov	r7, r1
 8003cc8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003ccc:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cce:	f7fd fe79 	bl	80019c4 <HAL_GetTick>
 8003cd2:	4605      	mov	r5, r0

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003cd4:	e004      	b.n	8003ce0 <RCCEx_PLL2_Config+0x2c>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003cd6:	f7fd fe75 	bl	80019c4 <HAL_GetTick>
 8003cda:	1b43      	subs	r3, r0, r5
 8003cdc:	2b02      	cmp	r3, #2
 8003cde:	d856      	bhi.n	8003d8e <RCCEx_PLL2_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003ce0:	6823      	ldr	r3, [r4, #0]
 8003ce2:	011a      	lsls	r2, r3, #4
 8003ce4:	d4f7      	bmi.n	8003cd6 <RCCEx_PLL2_Config+0x22>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003ce6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003ce8:	6832      	ldr	r2, [r6, #0]
 8003cea:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003cee:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8003cf2:	62a3      	str	r3, [r4, #40]	; 0x28
 8003cf4:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 8003cf8:	3b01      	subs	r3, #1
 8003cfa:	3a01      	subs	r2, #1
 8003cfc:	025b      	lsls	r3, r3, #9
 8003cfe:	0412      	lsls	r2, r2, #16
 8003d00:	b29b      	uxth	r3, r3
 8003d02:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8003d06:	4313      	orrs	r3, r2
 8003d08:	6872      	ldr	r2, [r6, #4]
 8003d0a:	3a01      	subs	r2, #1
 8003d0c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d10:	4313      	orrs	r3, r2
 8003d12:	6932      	ldr	r2, [r6, #16]
 8003d14:	3a01      	subs	r2, #1
 8003d16:	0612      	lsls	r2, r2, #24
 8003d18:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	63a3      	str	r3, [r4, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003d20:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003d22:	6972      	ldr	r2, [r6, #20]
 8003d24:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003d2c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003d2e:	69b3      	ldr	r3, [r6, #24]
 8003d30:	f022 0220 	bic.w	r2, r2, #32
 8003d34:	431a      	orrs	r2, r3

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003d36:	4b1b      	ldr	r3, [pc, #108]	; (8003da4 <RCCEx_PLL2_Config+0xf0>)
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003d38:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003d3a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003d3c:	f022 0210 	bic.w	r2, r2, #16
 8003d40:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003d42:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8003d44:	69f2      	ldr	r2, [r6, #28]
 8003d46:	400b      	ands	r3, r1
 8003d48:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8003d4c:	63e3      	str	r3, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003d4e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003d50:	f043 0310 	orr.w	r3, r3, #16
 8003d54:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003d56:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 8003d58:	b1ef      	cbz	r7, 8003d96 <RCCEx_PLL2_Config+0xe2>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8003d5a:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003d5c:	bf0c      	ite	eq
 8003d5e:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003d62:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 8003d66:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003d68:	4c0d      	ldr	r4, [pc, #52]	; (8003da0 <RCCEx_PLL2_Config+0xec>)
 8003d6a:	6823      	ldr	r3, [r4, #0]
 8003d6c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003d70:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d72:	f7fd fe27 	bl	80019c4 <HAL_GetTick>
 8003d76:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003d78:	e004      	b.n	8003d84 <RCCEx_PLL2_Config+0xd0>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003d7a:	f7fd fe23 	bl	80019c4 <HAL_GetTick>
 8003d7e:	1b40      	subs	r0, r0, r5
 8003d80:	2802      	cmp	r0, #2
 8003d82:	d804      	bhi.n	8003d8e <RCCEx_PLL2_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003d84:	6823      	ldr	r3, [r4, #0]
 8003d86:	011b      	lsls	r3, r3, #4
 8003d88:	d5f7      	bpl.n	8003d7a <RCCEx_PLL2_Config+0xc6>
    }

  }


  return status;
 8003d8a:	2000      	movs	r0, #0
}
 8003d8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8003d8e:	2003      	movs	r0, #3
}
 8003d90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8003d92:	2001      	movs	r0, #1
}
 8003d94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003d96:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003d9a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003d9c:	e7e4      	b.n	8003d68 <RCCEx_PLL2_Config+0xb4>
 8003d9e:	bf00      	nop
 8003da0:	58024400 	.word	0x58024400
 8003da4:	ffff0007 	.word	0xffff0007

08003da8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003daa:	4c3a      	ldr	r4, [pc, #232]	; (8003e94 <RCCEx_PLL3_Config+0xec>)
 8003dac:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003dae:	f003 0303 	and.w	r3, r3, #3
 8003db2:	2b03      	cmp	r3, #3
 8003db4:	d067      	beq.n	8003e86 <RCCEx_PLL3_Config+0xde>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003db6:	6823      	ldr	r3, [r4, #0]
 8003db8:	4606      	mov	r6, r0
 8003dba:	460f      	mov	r7, r1
 8003dbc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003dc0:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003dc2:	f7fd fdff 	bl	80019c4 <HAL_GetTick>
 8003dc6:	4605      	mov	r5, r0
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003dc8:	e004      	b.n	8003dd4 <RCCEx_PLL3_Config+0x2c>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003dca:	f7fd fdfb 	bl	80019c4 <HAL_GetTick>
 8003dce:	1b43      	subs	r3, r0, r5
 8003dd0:	2b02      	cmp	r3, #2
 8003dd2:	d856      	bhi.n	8003e82 <RCCEx_PLL3_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003dd4:	6823      	ldr	r3, [r4, #0]
 8003dd6:	009a      	lsls	r2, r3, #2
 8003dd8:	d4f7      	bmi.n	8003dca <RCCEx_PLL3_Config+0x22>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003dda:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003ddc:	6832      	ldr	r2, [r6, #0]
 8003dde:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 8003de2:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8003de6:	62a3      	str	r3, [r4, #40]	; 0x28
 8003de8:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 8003dec:	3b01      	subs	r3, #1
 8003dee:	3a01      	subs	r2, #1
 8003df0:	025b      	lsls	r3, r3, #9
 8003df2:	0412      	lsls	r2, r2, #16
 8003df4:	b29b      	uxth	r3, r3
 8003df6:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	6872      	ldr	r2, [r6, #4]
 8003dfe:	3a01      	subs	r2, #1
 8003e00:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e04:	4313      	orrs	r3, r2
 8003e06:	6932      	ldr	r2, [r6, #16]
 8003e08:	3a01      	subs	r2, #1
 8003e0a:	0612      	lsls	r2, r2, #24
 8003e0c:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8003e10:	4313      	orrs	r3, r2
 8003e12:	6423      	str	r3, [r4, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003e14:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003e16:	6972      	ldr	r2, [r6, #20]
 8003e18:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003e20:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003e22:	69b3      	ldr	r3, [r6, #24]
 8003e24:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003e28:	431a      	orrs	r2, r3

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003e2a:	4b1b      	ldr	r3, [pc, #108]	; (8003e98 <RCCEx_PLL3_Config+0xf0>)
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003e2c:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003e2e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003e30:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e34:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003e36:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8003e38:	69f2      	ldr	r2, [r6, #28]
 8003e3a:	400b      	ands	r3, r1
 8003e3c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8003e40:	6463      	str	r3, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8003e42:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003e44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e48:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003e4a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 8003e4c:	b1ef      	cbz	r7, 8003e8a <RCCEx_PLL3_Config+0xe2>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8003e4e:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003e50:	bf0c      	ite	eq
 8003e52:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003e56:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 8003e5a:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8003e5c:	4c0d      	ldr	r4, [pc, #52]	; (8003e94 <RCCEx_PLL3_Config+0xec>)
 8003e5e:	6823      	ldr	r3, [r4, #0]
 8003e60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e64:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e66:	f7fd fdad 	bl	80019c4 <HAL_GetTick>
 8003e6a:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003e6c:	e004      	b.n	8003e78 <RCCEx_PLL3_Config+0xd0>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003e6e:	f7fd fda9 	bl	80019c4 <HAL_GetTick>
 8003e72:	1b40      	subs	r0, r0, r5
 8003e74:	2802      	cmp	r0, #2
 8003e76:	d804      	bhi.n	8003e82 <RCCEx_PLL3_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003e78:	6823      	ldr	r3, [r4, #0]
 8003e7a:	009b      	lsls	r3, r3, #2
 8003e7c:	d5f7      	bpl.n	8003e6e <RCCEx_PLL3_Config+0xc6>
    }

  }


  return status;
 8003e7e:	2000      	movs	r0, #0
}
 8003e80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8003e82:	2003      	movs	r0, #3
}
 8003e84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8003e86:	2001      	movs	r0, #1
}
 8003e88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003e8a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003e8e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003e90:	e7e4      	b.n	8003e5c <RCCEx_PLL3_Config+0xb4>
 8003e92:	bf00      	nop
 8003e94:	58024400 	.word	0x58024400
 8003e98:	ffff0007 	.word	0xffff0007

08003e9c <HAL_RCCEx_PeriphCLKConfig>:
{
 8003e9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003ea0:	e9d0 3200 	ldrd	r3, r2, [r0]
{
 8003ea4:	4604      	mov	r4, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003ea6:	011d      	lsls	r5, r3, #4
 8003ea8:	f003 6600 	and.w	r6, r3, #134217728	; 0x8000000
 8003eac:	d523      	bpl.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    switch (PeriphClkInit->SpdifrxClockSelection)
 8003eae:	6e81      	ldr	r1, [r0, #104]	; 0x68
 8003eb0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8003eb4:	f000 8553 	beq.w	800495e <HAL_RCCEx_PeriphCLKConfig+0xac2>
 8003eb8:	d812      	bhi.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003eba:	2900      	cmp	r1, #0
 8003ebc:	f000 85a9 	beq.w	8004a12 <HAL_RCCEx_PeriphCLKConfig+0xb76>
 8003ec0:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8003ec4:	f040 85a2 	bne.w	8004a0c <HAL_RCCEx_PeriphCLKConfig+0xb70>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003ec8:	2102      	movs	r1, #2
 8003eca:	3008      	adds	r0, #8
 8003ecc:	f7ff fef2 	bl	8003cb4 <RCCEx_PLL2_Config>
 8003ed0:	4606      	mov	r6, r0
    if (ret == HAL_OK)
 8003ed2:	2e00      	cmp	r6, #0
 8003ed4:	f040 8522 	bne.w	800491c <HAL_RCCEx_PeriphCLKConfig+0xa80>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003ed8:	6ea1      	ldr	r1, [r4, #104]	; 0x68
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003eda:	e9d4 3200 	ldrd	r3, r2, [r4]
 8003ede:	e003      	b.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x4c>
    switch (PeriphClkInit->SpdifrxClockSelection)
 8003ee0:	f5b1 1f40 	cmp.w	r1, #3145728	; 0x300000
 8003ee4:	f040 8592 	bne.w	8004a0c <HAL_RCCEx_PeriphCLKConfig+0xb70>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003ee8:	4dae      	ldr	r5, [pc, #696]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003eea:	2600      	movs	r6, #0
 8003eec:	6d28      	ldr	r0, [r5, #80]	; 0x50
 8003eee:	f420 1040 	bic.w	r0, r0, #3145728	; 0x300000
 8003ef2:	4301      	orrs	r1, r0
 8003ef4:	6529      	str	r1, [r5, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003ef6:	05d8      	lsls	r0, r3, #23
 8003ef8:	d50a      	bpl.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x74>
    switch (PeriphClkInit->Sai1ClockSelection)
 8003efa:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8003efc:	2904      	cmp	r1, #4
 8003efe:	d806      	bhi.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x72>
 8003f00:	e8df f011 	tbh	[pc, r1, lsl #1]
 8003f04:	053d0536 	.word	0x053d0536
 8003f08:	0323051a 	.word	0x0323051a
 8003f0c:	0323      	.short	0x0323
 8003f0e:	2601      	movs	r6, #1
 8003f10:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003f12:	0599      	lsls	r1, r3, #22
 8003f14:	d51d      	bpl.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0xb6>
    switch (PeriphClkInit->Sai23ClockSelection)
 8003f16:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8003f18:	2980      	cmp	r1, #128	; 0x80
 8003f1a:	f000 8516 	beq.w	800494a <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8003f1e:	f200 80f9 	bhi.w	8004114 <HAL_RCCEx_PeriphCLKConfig+0x278>
 8003f22:	2900      	cmp	r1, #0
 8003f24:	f000 8433 	beq.w	800478e <HAL_RCCEx_PeriphCLKConfig+0x8f2>
 8003f28:	2940      	cmp	r1, #64	; 0x40
 8003f2a:	f040 80fa 	bne.w	8004122 <HAL_RCCEx_PeriphCLKConfig+0x286>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003f2e:	2100      	movs	r1, #0
 8003f30:	f104 0008 	add.w	r0, r4, #8
 8003f34:	f7ff febe 	bl	8003cb4 <RCCEx_PLL2_Config>
 8003f38:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003f3a:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8003f3e:	2d00      	cmp	r5, #0
 8003f40:	f040 83fe 	bne.w	8004740 <HAL_RCCEx_PeriphCLKConfig+0x8a4>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003f44:	4f97      	ldr	r7, [pc, #604]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003f46:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8003f48:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003f4a:	f421 71e0 	bic.w	r1, r1, #448	; 0x1c0
 8003f4e:	4301      	orrs	r1, r0
 8003f50:	6539      	str	r1, [r7, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003f52:	055f      	lsls	r7, r3, #21
 8003f54:	d521      	bpl.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0xfe>
    switch (PeriphClkInit->Sai4AClockSelection)
 8003f56:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
 8003f5a:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 8003f5e:	f000 8521 	beq.w	80049a4 <HAL_RCCEx_PeriphCLKConfig+0xb08>
 8003f62:	f200 80e1 	bhi.w	8004128 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 8003f66:	2900      	cmp	r1, #0
 8003f68:	f000 8418 	beq.w	800479c <HAL_RCCEx_PeriphCLKConfig+0x900>
 8003f6c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8003f70:	f040 80e2 	bne.w	8004138 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003f74:	2100      	movs	r1, #0
 8003f76:	f104 0008 	add.w	r0, r4, #8
 8003f7a:	f7ff fe9b 	bl	8003cb4 <RCCEx_PLL2_Config>
 8003f7e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003f80:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8003f84:	2d00      	cmp	r5, #0
 8003f86:	f040 83e2 	bne.w	800474e <HAL_RCCEx_PeriphCLKConfig+0x8b2>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003f8a:	4f86      	ldr	r7, [pc, #536]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003f8c:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
 8003f90:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003f92:	f421 0160 	bic.w	r1, r1, #14680064	; 0xe00000
 8003f96:	4301      	orrs	r1, r0
 8003f98:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003f9a:	0518      	lsls	r0, r3, #20
 8003f9c:	d521      	bpl.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x146>
    switch (PeriphClkInit->Sai4BClockSelection)
 8003f9e:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 8003fa2:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
 8003fa6:	f000 84bd 	beq.w	8004924 <HAL_RCCEx_PeriphCLKConfig+0xa88>
 8003faa:	f200 80c8 	bhi.w	800413e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
 8003fae:	2900      	cmp	r1, #0
 8003fb0:	f000 83e7 	beq.w	8004782 <HAL_RCCEx_PeriphCLKConfig+0x8e6>
 8003fb4:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 8003fb8:	f040 80c9 	bne.w	800414e <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003fbc:	2100      	movs	r1, #0
 8003fbe:	f104 0008 	add.w	r0, r4, #8
 8003fc2:	f7ff fe77 	bl	8003cb4 <RCCEx_PLL2_Config>
 8003fc6:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003fc8:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8003fcc:	2d00      	cmp	r5, #0
 8003fce:	f040 83b5 	bne.w	800473c <HAL_RCCEx_PeriphCLKConfig+0x8a0>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003fd2:	4f74      	ldr	r7, [pc, #464]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003fd4:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 8003fd8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003fda:	f021 61e0 	bic.w	r1, r1, #117440512	; 0x7000000
 8003fde:	4301      	orrs	r1, r0
 8003fe0:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003fe2:	0199      	lsls	r1, r3, #6
 8003fe4:	d518      	bpl.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x17c>
    switch (PeriphClkInit->QspiClockSelection)
 8003fe6:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8003fe8:	2920      	cmp	r1, #32
 8003fea:	f000 841f 	beq.w	800482c <HAL_RCCEx_PeriphCLKConfig+0x990>
 8003fee:	f200 80b1 	bhi.w	8004154 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8003ff2:	b139      	cbz	r1, 8004004 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8003ff4:	2910      	cmp	r1, #16
 8003ff6:	f040 80b0 	bne.w	800415a <HAL_RCCEx_PeriphCLKConfig+0x2be>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ffa:	486a      	ldr	r0, [pc, #424]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003ffc:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8003ffe:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8004002:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
 8004004:	2d00      	cmp	r5, #0
 8004006:	f040 83d8 	bne.w	80047ba <HAL_RCCEx_PeriphCLKConfig+0x91e>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800400a:	4f66      	ldr	r7, [pc, #408]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800400c:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800400e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8004010:	f021 0130 	bic.w	r1, r1, #48	; 0x30
 8004014:	4301      	orrs	r1, r0
 8004016:	64f9      	str	r1, [r7, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004018:	04df      	lsls	r7, r3, #19
 800401a:	d51f      	bpl.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    switch (PeriphClkInit->Spi123ClockSelection)
 800401c:	6e21      	ldr	r1, [r4, #96]	; 0x60
 800401e:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 8004022:	f000 84b5 	beq.w	8004990 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
 8004026:	f200 809b 	bhi.w	8004160 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
 800402a:	2900      	cmp	r1, #0
 800402c:	f000 83a3 	beq.w	8004776 <HAL_RCCEx_PeriphCLKConfig+0x8da>
 8004030:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8004034:	f040 809c 	bne.w	8004170 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004038:	2100      	movs	r1, #0
 800403a:	f104 0008 	add.w	r0, r4, #8
 800403e:	f7ff fe39 	bl	8003cb4 <RCCEx_PLL2_Config>
 8004042:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004044:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8004048:	2d00      	cmp	r5, #0
 800404a:	f040 837b 	bne.w	8004744 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800404e:	4f55      	ldr	r7, [pc, #340]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004050:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8004052:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004054:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 8004058:	4301      	orrs	r1, r0
 800405a:	6539      	str	r1, [r7, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800405c:	0498      	lsls	r0, r3, #18
 800405e:	d51d      	bpl.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x200>
    switch (PeriphClkInit->Spi45ClockSelection)
 8004060:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8004062:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 8004066:	f000 8410 	beq.w	800488a <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 800406a:	f200 8084 	bhi.w	8004176 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800406e:	b159      	cbz	r1, 8004088 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
 8004070:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8004074:	f040 8087 	bne.w	8004186 <HAL_RCCEx_PeriphCLKConfig+0x2ea>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004078:	2101      	movs	r1, #1
 800407a:	f104 0008 	add.w	r0, r4, #8
 800407e:	f7ff fe19 	bl	8003cb4 <RCCEx_PLL2_Config>
 8004082:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004084:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8004088:	2d00      	cmp	r5, #0
 800408a:	f040 839a 	bne.w	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x926>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800408e:	4f45      	ldr	r7, [pc, #276]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8004090:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8004092:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004094:	f421 21e0 	bic.w	r1, r1, #458752	; 0x70000
 8004098:	4301      	orrs	r1, r0
 800409a:	6539      	str	r1, [r7, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800409c:	0459      	lsls	r1, r3, #17
 800409e:	d51d      	bpl.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x240>
    switch (PeriphClkInit->Spi6ClockSelection)
 80040a0:	f8d4 10b0 	ldr.w	r1, [r4, #176]	; 0xb0
 80040a4:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 80040a8:	f000 83fb 	beq.w	80048a2 <HAL_RCCEx_PeriphCLKConfig+0xa06>
 80040ac:	d86e      	bhi.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
 80040ae:	b151      	cbz	r1, 80040c6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80040b0:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 80040b4:	d172      	bne.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x300>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80040b6:	2101      	movs	r1, #1
 80040b8:	f104 0008 	add.w	r0, r4, #8
 80040bc:	f7ff fdfa 	bl	8003cb4 <RCCEx_PLL2_Config>
 80040c0:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80040c2:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80040c6:	2d00      	cmp	r5, #0
 80040c8:	f040 837f 	bne.w	80047ca <HAL_RCCEx_PeriphCLKConfig+0x92e>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80040cc:	4f35      	ldr	r7, [pc, #212]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80040ce:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 80040d2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80040d4:	f021 41e0 	bic.w	r1, r1, #1879048192	; 0x70000000
 80040d8:	4301      	orrs	r1, r0
 80040da:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80040dc:	041f      	lsls	r7, r3, #16
 80040de:	d50d      	bpl.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x260>
    switch (PeriphClkInit->FdcanClockSelection)
 80040e0:	6f21      	ldr	r1, [r4, #112]	; 0x70
 80040e2:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 80040e6:	f000 83c8 	beq.w	800487a <HAL_RCCEx_PeriphCLKConfig+0x9de>
 80040ea:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 80040ee:	f000 823b 	beq.w	8004568 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 80040f2:	2900      	cmp	r1, #0
 80040f4:	f000 8240 	beq.w	8004578 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
 80040f8:	2601      	movs	r6, #1
 80040fa:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80040fc:	01d8      	lsls	r0, r3, #7
 80040fe:	d562      	bpl.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x32a>
    switch (PeriphClkInit->FmcClockSelection)
 8004100:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8004102:	2903      	cmp	r1, #3
 8004104:	f200 84bf 	bhi.w	8004a86 <HAL_RCCEx_PeriphCLKConfig+0xbea>
 8004108:	e8df f011 	tbh	[pc, r1, lsl #1]
 800410c:	004e0053 	.word	0x004e0053
 8004110:	005303e2 	.word	0x005303e2
    switch (PeriphClkInit->Sai23ClockSelection)
 8004114:	29c0      	cmp	r1, #192	; 0xc0
 8004116:	f43f af12 	beq.w	8003f3e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800411a:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800411e:	f43f af0e 	beq.w	8003f3e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8004122:	2601      	movs	r6, #1
 8004124:	4635      	mov	r5, r6
 8004126:	e714      	b.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0xb6>
    switch (PeriphClkInit->Sai4AClockSelection)
 8004128:	f5b1 0fc0 	cmp.w	r1, #6291456	; 0x600000
 800412c:	f43f af2a 	beq.w	8003f84 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8004130:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8004134:	f43f af26 	beq.w	8003f84 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8004138:	2601      	movs	r6, #1
 800413a:	4635      	mov	r5, r6
 800413c:	e72d      	b.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0xfe>
    switch (PeriphClkInit->Sai4BClockSelection)
 800413e:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
 8004142:	f43f af43 	beq.w	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x130>
 8004146:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 800414a:	f43f af3f 	beq.w	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x130>
 800414e:	2601      	movs	r6, #1
 8004150:	4635      	mov	r5, r6
 8004152:	e746      	b.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x146>
    switch (PeriphClkInit->QspiClockSelection)
 8004154:	2930      	cmp	r1, #48	; 0x30
 8004156:	f43f af55 	beq.w	8004004 <HAL_RCCEx_PeriphCLKConfig+0x168>
 800415a:	2601      	movs	r6, #1
 800415c:	4635      	mov	r5, r6
 800415e:	e75b      	b.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x17c>
    switch (PeriphClkInit->Spi123ClockSelection)
 8004160:	f5b1 5f40 	cmp.w	r1, #12288	; 0x3000
 8004164:	f43f af70 	beq.w	8004048 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
 8004168:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 800416c:	f43f af6c 	beq.w	8004048 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
 8004170:	2601      	movs	r6, #1
 8004172:	4635      	mov	r5, r6
 8004174:	e772      	b.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    switch (PeriphClkInit->Spi45ClockSelection)
 8004176:	f421 3080 	bic.w	r0, r1, #65536	; 0x10000
 800417a:	f5b0 2f80 	cmp.w	r0, #262144	; 0x40000
 800417e:	d083      	beq.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
 8004180:	f5b1 3f40 	cmp.w	r1, #196608	; 0x30000
 8004184:	d080      	beq.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
 8004186:	2601      	movs	r6, #1
 8004188:	4635      	mov	r5, r6
 800418a:	e787      	b.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x200>
    switch (PeriphClkInit->Spi6ClockSelection)
 800418c:	f021 5080 	bic.w	r0, r1, #268435456	; 0x10000000
 8004190:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8004194:	d097      	beq.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004196:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
 800419a:	d094      	beq.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800419c:	2601      	movs	r6, #1
 800419e:	4635      	mov	r5, r6
 80041a0:	e79c      	b.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x240>
 80041a2:	bf00      	nop
 80041a4:	58024400 	.word	0x58024400
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041a8:	4839      	ldr	r0, [pc, #228]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80041aa:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80041ac:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 80041b0:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
 80041b2:	2d00      	cmp	r5, #0
 80041b4:	f040 8303 	bne.w	80047be <HAL_RCCEx_PeriphCLKConfig+0x922>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80041b8:	4f35      	ldr	r7, [pc, #212]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80041ba:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80041bc:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80041be:	f021 0103 	bic.w	r1, r1, #3
 80041c2:	4301      	orrs	r1, r0
 80041c4:	64f9      	str	r1, [r7, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80041c6:	0259      	lsls	r1, r3, #9
 80041c8:	f100 826a 	bmi.w	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x804>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80041cc:	07d8      	lsls	r0, r3, #31
 80041ce:	d52f      	bpl.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x394>
    switch (PeriphClkInit->Usart16ClockSelection)
 80041d0:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 80041d2:	2928      	cmp	r1, #40	; 0x28
 80041d4:	d82a      	bhi.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x390>
 80041d6:	e8df f011 	tbh	[pc, r1, lsl #1]
 80041da:	020a      	.short	0x020a
 80041dc:	00290029 	.word	0x00290029
 80041e0:	00290029 	.word	0x00290029
 80041e4:	00290029 	.word	0x00290029
 80041e8:	02020029 	.word	0x02020029
 80041ec:	00290029 	.word	0x00290029
 80041f0:	00290029 	.word	0x00290029
 80041f4:	00290029 	.word	0x00290029
 80041f8:	04070029 	.word	0x04070029
 80041fc:	00290029 	.word	0x00290029
 8004200:	00290029 	.word	0x00290029
 8004204:	00290029 	.word	0x00290029
 8004208:	020a0029 	.word	0x020a0029
 800420c:	00290029 	.word	0x00290029
 8004210:	00290029 	.word	0x00290029
 8004214:	00290029 	.word	0x00290029
 8004218:	020a0029 	.word	0x020a0029
 800421c:	00290029 	.word	0x00290029
 8004220:	00290029 	.word	0x00290029
 8004224:	00290029 	.word	0x00290029
 8004228:	020a0029 	.word	0x020a0029
 800422c:	2601      	movs	r6, #1
 800422e:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004230:	0799      	lsls	r1, r3, #30
 8004232:	d51d      	bpl.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004234:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8004236:	2905      	cmp	r1, #5
 8004238:	f200 8421 	bhi.w	8004a7e <HAL_RCCEx_PeriphCLKConfig+0xbe2>
 800423c:	e8df f011 	tbh	[pc, r1, lsl #1]
 8004240:	0006000e 	.word	0x0006000e
 8004244:	000e03c8 	.word	0x000e03c8
 8004248:	000e000e 	.word	0x000e000e
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800424c:	2101      	movs	r1, #1
 800424e:	f104 0008 	add.w	r0, r4, #8
 8004252:	f7ff fd2f 	bl	8003cb4 <RCCEx_PLL2_Config>
 8004256:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004258:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800425c:	2d00      	cmp	r5, #0
 800425e:	f040 82b8 	bne.w	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x936>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004262:	4f0b      	ldr	r7, [pc, #44]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004264:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8004266:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004268:	f021 0107 	bic.w	r1, r1, #7
 800426c:	4301      	orrs	r1, r0
 800426e:	6579      	str	r1, [r7, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004270:	075f      	lsls	r7, r3, #29
 8004272:	d522      	bpl.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x41e>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004274:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 8004278:	2905      	cmp	r1, #5
 800427a:	f200 8408 	bhi.w	8004a8e <HAL_RCCEx_PeriphCLKConfig+0xbf2>
 800427e:	e8df f011 	tbh	[pc, r1, lsl #1]
 8004282:	0011      	.short	0x0011
 8004284:	039b0009 	.word	0x039b0009
 8004288:	00110011 	.word	0x00110011
 800428c:	0011      	.short	0x0011
 800428e:	bf00      	nop
 8004290:	58024400 	.word	0x58024400
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004294:	2101      	movs	r1, #1
 8004296:	f104 0008 	add.w	r0, r4, #8
 800429a:	f7ff fd0b 	bl	8003cb4 <RCCEx_PLL2_Config>
 800429e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80042a0:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80042a4:	2d00      	cmp	r5, #0
 80042a6:	f040 8286 	bne.w	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x91a>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80042aa:	4fae      	ldr	r7, [pc, #696]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80042ac:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
 80042b0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80042b2:	f021 0107 	bic.w	r1, r1, #7
 80042b6:	4301      	orrs	r1, r0
 80042b8:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80042ba:	0698      	lsls	r0, r3, #26
 80042bc:	d51f      	bpl.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0x462>
    switch (PeriphClkInit->Lptim1ClockSelection)
 80042be:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 80042c2:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 80042c6:	f000 82f7 	beq.w	80048b8 <HAL_RCCEx_PeriphCLKConfig+0xa1c>
 80042ca:	f200 810b 	bhi.w	80044e4 <HAL_RCCEx_PeriphCLKConfig+0x648>
 80042ce:	b159      	cbz	r1, 80042e8 <HAL_RCCEx_PeriphCLKConfig+0x44c>
 80042d0:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 80042d4:	f040 8110 	bne.w	80044f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80042d8:	2100      	movs	r1, #0
 80042da:	f104 0008 	add.w	r0, r4, #8
 80042de:	f7ff fce9 	bl	8003cb4 <RCCEx_PLL2_Config>
 80042e2:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80042e4:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80042e8:	2d00      	cmp	r5, #0
 80042ea:	f040 8260 	bne.w	80047ae <HAL_RCCEx_PeriphCLKConfig+0x912>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80042ee:	4f9d      	ldr	r7, [pc, #628]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80042f0:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 80042f4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80042f6:	f021 41e0 	bic.w	r1, r1, #1879048192	; 0x70000000
 80042fa:	4301      	orrs	r1, r0
 80042fc:	6579      	str	r1, [r7, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80042fe:	0659      	lsls	r1, r3, #25
 8004300:	d51f      	bpl.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004302:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 8004306:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 800430a:	f000 829b 	beq.w	8004844 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
 800430e:	f200 80f6 	bhi.w	80044fe <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004312:	b159      	cbz	r1, 800432c <HAL_RCCEx_PeriphCLKConfig+0x490>
 8004314:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8004318:	f040 80fb 	bne.w	8004512 <HAL_RCCEx_PeriphCLKConfig+0x676>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800431c:	2100      	movs	r1, #0
 800431e:	f104 0008 	add.w	r0, r4, #8
 8004322:	f7ff fcc7 	bl	8003cb4 <RCCEx_PLL2_Config>
 8004326:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004328:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800432c:	2d00      	cmp	r5, #0
 800432e:	f040 824e 	bne.w	80047ce <HAL_RCCEx_PeriphCLKConfig+0x932>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004332:	4f8c      	ldr	r7, [pc, #560]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004334:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
 8004338:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800433a:	f421 51e0 	bic.w	r1, r1, #7168	; 0x1c00
 800433e:	4301      	orrs	r1, r0
 8004340:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004342:	061f      	lsls	r7, r3, #24
 8004344:	d51f      	bpl.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0x4ea>
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004346:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 800434a:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 800434e:	f000 8289 	beq.w	8004864 <HAL_RCCEx_PeriphCLKConfig+0x9c8>
 8004352:	f200 80e1 	bhi.w	8004518 <HAL_RCCEx_PeriphCLKConfig+0x67c>
 8004356:	b159      	cbz	r1, 8004370 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8004358:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 800435c:	f040 80e6 	bne.w	800452c <HAL_RCCEx_PeriphCLKConfig+0x690>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004360:	2100      	movs	r1, #0
 8004362:	f104 0008 	add.w	r0, r4, #8
 8004366:	f7ff fca5 	bl	8003cb4 <RCCEx_PLL2_Config>
 800436a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800436c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8004370:	2d00      	cmp	r5, #0
 8004372:	f040 8228 	bne.w	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x92a>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004376:	4f7b      	ldr	r7, [pc, #492]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004378:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
 800437c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800437e:	f421 4160 	bic.w	r1, r1, #57344	; 0xe000
 8004382:	4301      	orrs	r1, r0
 8004384:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004386:	0718      	lsls	r0, r3, #28
 8004388:	d50b      	bpl.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0x506>
    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800438a:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 800438e:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 8004392:	f000 82a9 	beq.w	80048e8 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004396:	4f73      	ldr	r7, [pc, #460]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004398:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800439a:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 800439e:	4301      	orrs	r1, r0
 80043a0:	6579      	str	r1, [r7, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80043a2:	06d9      	lsls	r1, r3, #27
 80043a4:	d50b      	bpl.n	80043be <HAL_RCCEx_PeriphCLKConfig+0x522>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80043a6:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
 80043aa:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 80043ae:	f000 82a8 	beq.w	8004902 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80043b2:	4f6c      	ldr	r7, [pc, #432]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80043b4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80043b6:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 80043ba:	4301      	orrs	r1, r0
 80043bc:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80043be:	031f      	lsls	r7, r3, #12
 80043c0:	d50e      	bpl.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x544>
    switch (PeriphClkInit->AdcClockSelection)
 80043c2:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 80043c6:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 80043ca:	f000 80f4 	beq.w	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x71a>
 80043ce:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 80043d2:	f000 80f8 	beq.w	80045c6 <HAL_RCCEx_PeriphCLKConfig+0x72a>
 80043d6:	2900      	cmp	r1, #0
 80043d8:	f000 821c 	beq.w	8004814 <HAL_RCCEx_PeriphCLKConfig+0x978>
 80043dc:	2601      	movs	r6, #1
 80043de:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80043e0:	0358      	lsls	r0, r3, #13
 80043e2:	d50f      	bpl.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x568>
    switch (PeriphClkInit->UsbClockSelection)
 80043e4:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 80043e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80043ec:	f000 80cf 	beq.w	800458e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80043f0:	f5b1 1f40 	cmp.w	r1, #3145728	; 0x300000
 80043f4:	f000 80d3 	beq.w	800459e <HAL_RCCEx_PeriphCLKConfig+0x702>
 80043f8:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80043fc:	f000 8202 	beq.w	8004804 <HAL_RCCEx_PeriphCLKConfig+0x968>
 8004400:	2601      	movs	r6, #1
 8004402:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004404:	03d9      	lsls	r1, r3, #15
 8004406:	d509      	bpl.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x580>
    switch (PeriphClkInit->SdmmcClockSelection)
 8004408:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800440a:	2900      	cmp	r1, #0
 800440c:	f000 81f1 	beq.w	80047f2 <HAL_RCCEx_PeriphCLKConfig+0x956>
 8004410:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8004414:	f000 819d 	beq.w	8004752 <HAL_RCCEx_PeriphCLKConfig+0x8b6>
 8004418:	2601      	movs	r6, #1
 800441a:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800441c:	009f      	lsls	r7, r3, #2
 800441e:	f100 80f1 	bmi.w	8004604 <HAL_RCCEx_PeriphCLKConfig+0x768>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004422:	0398      	lsls	r0, r3, #14
 8004424:	d50c      	bpl.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x5a4>
    switch (PeriphClkInit->RngClockSelection)
 8004426:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 800442a:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800442e:	f000 81d8 	beq.w	80047e2 <HAL_RCCEx_PeriphCLKConfig+0x946>
 8004432:	d97e      	bls.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0x696>
 8004434:	f421 7080 	bic.w	r0, r1, #256	; 0x100
 8004438:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800443c:	d07b      	beq.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0x69a>
 800443e:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004440:	02d9      	lsls	r1, r3, #11
 8004442:	d506      	bpl.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004444:	4847      	ldr	r0, [pc, #284]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004446:	6f65      	ldr	r5, [r4, #116]	; 0x74
 8004448:	6d01      	ldr	r1, [r0, #80]	; 0x50
 800444a:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800444e:	4329      	orrs	r1, r5
 8004450:	6501      	str	r1, [r0, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004452:	00df      	lsls	r7, r3, #3
 8004454:	d507      	bpl.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004456:	4843      	ldr	r0, [pc, #268]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004458:	f8d4 50b8 	ldr.w	r5, [r4, #184]	; 0xb8
 800445c:	6901      	ldr	r1, [r0, #16]
 800445e:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 8004462:	4329      	orrs	r1, r5
 8004464:	6101      	str	r1, [r0, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004466:	029d      	lsls	r5, r3, #10
 8004468:	d506      	bpl.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800446a:	483e      	ldr	r0, [pc, #248]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800446c:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 800446e:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8004470:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8004474:	4329      	orrs	r1, r5
 8004476:	6501      	str	r1, [r0, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004478:	0058      	lsls	r0, r3, #1
 800447a:	d509      	bpl.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800447c:	4939      	ldr	r1, [pc, #228]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800447e:	6908      	ldr	r0, [r1, #16]
 8004480:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
 8004484:	6108      	str	r0, [r1, #16]
 8004486:	6908      	ldr	r0, [r1, #16]
 8004488:	f8d4 50bc 	ldr.w	r5, [r4, #188]	; 0xbc
 800448c:	4328      	orrs	r0, r5
 800448e:	6108      	str	r0, [r1, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004490:	2b00      	cmp	r3, #0
 8004492:	da06      	bge.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x606>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004494:	4833      	ldr	r0, [pc, #204]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004496:	6d65      	ldr	r5, [r4, #84]	; 0x54
 8004498:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 800449a:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
 800449e:	4329      	orrs	r1, r5
 80044a0:	64c1      	str	r1, [r0, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80044a2:	0219      	lsls	r1, r3, #8
 80044a4:	d507      	bpl.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0x61a>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80044a6:	492f      	ldr	r1, [pc, #188]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80044a8:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 80044ac:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 80044ae:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80044b2:	4303      	orrs	r3, r0
 80044b4:	654b      	str	r3, [r1, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80044b6:	07d3      	lsls	r3, r2, #31
 80044b8:	f100 80b0 	bmi.w	800461c <HAL_RCCEx_PeriphCLKConfig+0x780>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80044bc:	0797      	lsls	r7, r2, #30
 80044be:	f100 80ba 	bmi.w	8004636 <HAL_RCCEx_PeriphCLKConfig+0x79a>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80044c2:	0755      	lsls	r5, r2, #29
 80044c4:	f100 80c4 	bmi.w	8004650 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80044c8:	0710      	lsls	r0, r2, #28
 80044ca:	f100 80ce 	bmi.w	800466a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80044ce:	06d1      	lsls	r1, r2, #27
 80044d0:	f100 80d8 	bmi.w	8004684 <HAL_RCCEx_PeriphCLKConfig+0x7e8>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80044d4:	0692      	lsls	r2, r2, #26
 80044d6:	f100 8125 	bmi.w	8004724 <HAL_RCCEx_PeriphCLKConfig+0x888>
    return HAL_OK;
 80044da:	1e30      	subs	r0, r6, #0
 80044dc:	bf18      	it	ne
 80044de:	2001      	movne	r0, #1
}
 80044e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch (PeriphClkInit->Lptim1ClockSelection)
 80044e4:	f021 5080 	bic.w	r0, r1, #268435456	; 0x10000000
 80044e8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80044ec:	f43f aefc 	beq.w	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x44c>
 80044f0:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
 80044f4:	f43f aef8 	beq.w	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x44c>
 80044f8:	2601      	movs	r6, #1
 80044fa:	4635      	mov	r5, r6
 80044fc:	e6ff      	b.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0x462>
    switch (PeriphClkInit->Lptim2ClockSelection)
 80044fe:	f421 6080 	bic.w	r0, r1, #1024	; 0x400
 8004502:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 8004506:	f43f af11 	beq.w	800432c <HAL_RCCEx_PeriphCLKConfig+0x490>
 800450a:	f5b1 6f40 	cmp.w	r1, #3072	; 0xc00
 800450e:	f43f af0d 	beq.w	800432c <HAL_RCCEx_PeriphCLKConfig+0x490>
 8004512:	2601      	movs	r6, #1
 8004514:	4635      	mov	r5, r6
 8004516:	e714      	b.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004518:	f421 5000 	bic.w	r0, r1, #8192	; 0x2000
 800451c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8004520:	f43f af26 	beq.w	8004370 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8004524:	f5b1 4fc0 	cmp.w	r1, #24576	; 0x6000
 8004528:	f43f af22 	beq.w	8004370 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 800452c:	2601      	movs	r6, #1
 800452e:	4635      	mov	r5, r6
 8004530:	e729      	b.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0x4ea>
    switch (PeriphClkInit->RngClockSelection)
 8004532:	2900      	cmp	r1, #0
 8004534:	d183      	bne.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
    if (ret == HAL_OK)
 8004536:	2d00      	cmp	r5, #0
 8004538:	f040 8151 	bne.w	80047de <HAL_RCCEx_PeriphCLKConfig+0x942>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800453c:	4d09      	ldr	r5, [pc, #36]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800453e:	6d68      	ldr	r0, [r5, #84]	; 0x54
 8004540:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 8004544:	4301      	orrs	r1, r0
 8004546:	6569      	str	r1, [r5, #84]	; 0x54
 8004548:	e77a      	b.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x5a4>
    switch (PeriphClkInit->Sai1ClockSelection)
 800454a:	4635      	mov	r5, r6
    if (ret == HAL_OK)
 800454c:	2d00      	cmp	r5, #0
 800454e:	f040 80fb 	bne.w	8004748 <HAL_RCCEx_PeriphCLKConfig+0x8ac>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004552:	4f04      	ldr	r7, [pc, #16]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004554:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004556:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004558:	f021 0107 	bic.w	r1, r1, #7
 800455c:	4301      	orrs	r1, r0
 800455e:	6539      	str	r1, [r7, #80]	; 0x50
 8004560:	e4d7      	b.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004562:	bf00      	nop
 8004564:	58024400 	.word	0x58024400
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004568:	2101      	movs	r1, #1
 800456a:	f104 0008 	add.w	r0, r4, #8
 800456e:	f7ff fba1 	bl	8003cb4 <RCCEx_PLL2_Config>
 8004572:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004574:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8004578:	2d00      	cmp	r5, #0
 800457a:	f040 811a 	bne.w	80047b2 <HAL_RCCEx_PeriphCLKConfig+0x916>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800457e:	4fb7      	ldr	r7, [pc, #732]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 8004580:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8004582:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004584:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
 8004588:	4301      	orrs	r1, r0
 800458a:	6539      	str	r1, [r7, #80]	; 0x50
 800458c:	e5b6      	b.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x260>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800458e:	2101      	movs	r1, #1
 8004590:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8004594:	f7ff fc08 	bl	8003da8 <RCCEx_PLL3_Config>
 8004598:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800459a:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800459e:	2d00      	cmp	r5, #0
 80045a0:	f040 811b 	bne.w	80047da <HAL_RCCEx_PeriphCLKConfig+0x93e>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80045a4:	4fad      	ldr	r7, [pc, #692]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 80045a6:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 80045aa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80045ac:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 80045b0:	4301      	orrs	r1, r0
 80045b2:	6579      	str	r1, [r7, #84]	; 0x54
 80045b4:	e726      	b.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x568>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80045b6:	2102      	movs	r1, #2
 80045b8:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80045bc:	f7ff fbf4 	bl	8003da8 <RCCEx_PLL3_Config>
 80045c0:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80045c2:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80045c6:	2d00      	cmp	r5, #0
 80045c8:	f040 8105 	bne.w	80047d6 <HAL_RCCEx_PeriphCLKConfig+0x93a>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80045cc:	4fa3      	ldr	r7, [pc, #652]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 80045ce:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
 80045d2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80045d4:	f421 3140 	bic.w	r1, r1, #196608	; 0x30000
 80045d8:	4301      	orrs	r1, r0
 80045da:	65b9      	str	r1, [r7, #88]	; 0x58
 80045dc:	e700      	b.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x544>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80045de:	2101      	movs	r1, #1
 80045e0:	f104 0008 	add.w	r0, r4, #8
 80045e4:	f7ff fb66 	bl	8003cb4 <RCCEx_PLL2_Config>
 80045e8:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80045ea:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80045ee:	2d00      	cmp	r5, #0
 80045f0:	f040 80db 	bne.w	80047aa <HAL_RCCEx_PeriphCLKConfig+0x90e>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80045f4:	4f99      	ldr	r7, [pc, #612]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 80045f6:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 80045f8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80045fa:	f021 0138 	bic.w	r1, r1, #56	; 0x38
 80045fe:	4301      	orrs	r1, r0
 8004600:	6579      	str	r1, [r7, #84]	; 0x54
 8004602:	e615      	b.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x394>
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004604:	2102      	movs	r1, #2
 8004606:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800460a:	f7ff fbcd 	bl	8003da8 <RCCEx_PLL3_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800460e:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004612:	2800      	cmp	r0, #0
 8004614:	f43f af05 	beq.w	8004422 <HAL_RCCEx_PeriphCLKConfig+0x586>
      status = HAL_ERROR;
 8004618:	2601      	movs	r6, #1
 800461a:	e702      	b.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0x586>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800461c:	2100      	movs	r1, #0
 800461e:	f104 0008 	add.w	r0, r4, #8
 8004622:	f7ff fb47 	bl	8003cb4 <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004626:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8004628:	2800      	cmp	r0, #0
 800462a:	f43f af47 	beq.w	80044bc <HAL_RCCEx_PeriphCLKConfig+0x620>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800462e:	0797      	lsls	r7, r2, #30
 8004630:	4606      	mov	r6, r0
 8004632:	f57f af46 	bpl.w	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x626>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004636:	2101      	movs	r1, #1
 8004638:	f104 0008 	add.w	r0, r4, #8
 800463c:	f7ff fb3a 	bl	8003cb4 <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004640:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8004642:	2800      	cmp	r0, #0
 8004644:	f43f af3d 	beq.w	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x626>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004648:	0755      	lsls	r5, r2, #29
 800464a:	4606      	mov	r6, r0
 800464c:	f57f af3c 	bpl.w	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004650:	2102      	movs	r1, #2
 8004652:	f104 0008 	add.w	r0, r4, #8
 8004656:	f7ff fb2d 	bl	8003cb4 <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800465a:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 800465c:	2800      	cmp	r0, #0
 800465e:	f43f af33 	beq.w	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x62c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004662:	4606      	mov	r6, r0
 8004664:	0710      	lsls	r0, r2, #28
 8004666:	f57f af32 	bpl.w	80044ce <HAL_RCCEx_PeriphCLKConfig+0x632>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800466a:	2100      	movs	r1, #0
 800466c:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8004670:	f7ff fb9a 	bl	8003da8 <RCCEx_PLL3_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004674:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8004676:	2800      	cmp	r0, #0
 8004678:	f43f af29 	beq.w	80044ce <HAL_RCCEx_PeriphCLKConfig+0x632>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800467c:	06d1      	lsls	r1, r2, #27
 800467e:	4606      	mov	r6, r0
 8004680:	f57f af28 	bpl.w	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x638>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004684:	f104 0528 	add.w	r5, r4, #40	; 0x28
 8004688:	2101      	movs	r1, #1
 800468a:	4628      	mov	r0, r5
 800468c:	f7ff fb8c 	bl	8003da8 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 8004690:	2800      	cmp	r0, #0
 8004692:	f000 80c9 	beq.w	8004828 <HAL_RCCEx_PeriphCLKConfig+0x98c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004696:	6863      	ldr	r3, [r4, #4]
 8004698:	069b      	lsls	r3, r3, #26
 800469a:	d54c      	bpl.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0x89a>
 800469c:	4606      	mov	r6, r0
 800469e:	e043      	b.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x88c>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80046a0:	4f6f      	ldr	r7, [pc, #444]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0x9c4>)
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046a8:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 80046aa:	f7fd f98b 	bl	80019c4 <HAL_GetTick>
 80046ae:	4680      	mov	r8, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80046b0:	e006      	b.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0x824>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046b2:	f7fd f987 	bl	80019c4 <HAL_GetTick>
 80046b6:	eba0 0008 	sub.w	r0, r0, r8
 80046ba:	2864      	cmp	r0, #100	; 0x64
 80046bc:	f200 81a0 	bhi.w	8004a00 <HAL_RCCEx_PeriphCLKConfig+0xb64>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	05da      	lsls	r2, r3, #23
 80046c4:	d5f5      	bpl.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x816>
    if (ret == HAL_OK)
 80046c6:	2d00      	cmp	r5, #0
 80046c8:	f040 81d4 	bne.w	8004a74 <HAL_RCCEx_PeriphCLKConfig+0xbd8>
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80046cc:	4a63      	ldr	r2, [pc, #396]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 80046ce:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
 80046d2:	6f11      	ldr	r1, [r2, #112]	; 0x70
 80046d4:	4059      	eors	r1, r3
 80046d6:	f411 7f40 	tst.w	r1, #768	; 0x300
 80046da:	d00b      	beq.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x858>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80046dc:	6f11      	ldr	r1, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 80046de:	6f10      	ldr	r0, [r2, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80046e0:	f421 7140 	bic.w	r1, r1, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 80046e4:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 80046e8:	6710      	str	r0, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80046ea:	6f10      	ldr	r0, [r2, #112]	; 0x70
 80046ec:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 80046f0:	6710      	str	r0, [r2, #112]	; 0x70
        RCC->BDCR = tmpreg;
 80046f2:	6711      	str	r1, [r2, #112]	; 0x70
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80046f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046f8:	f000 819e 	beq.w	8004a38 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80046fc:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8004700:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8004704:	f000 81ac 	beq.w	8004a60 <HAL_RCCEx_PeriphCLKConfig+0xbc4>
 8004708:	4954      	ldr	r1, [pc, #336]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 800470a:	690a      	ldr	r2, [r1, #16]
 800470c:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8004710:	610a      	str	r2, [r1, #16]
 8004712:	4852      	ldr	r0, [pc, #328]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 8004714:	f3c3 010b 	ubfx	r1, r3, #0, #12
 8004718:	6f07      	ldr	r7, [r0, #112]	; 0x70
 800471a:	4339      	orrs	r1, r7
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800471c:	e9d4 3200 	ldrd	r3, r2, [r4]
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004720:	6701      	str	r1, [r0, #112]	; 0x70
 8004722:	e553      	b.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x330>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004724:	f104 0528 	add.w	r5, r4, #40	; 0x28
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004728:	2102      	movs	r1, #2
 800472a:	4628      	mov	r0, r5
 800472c:	f7ff fb3c 	bl	8003da8 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 8004730:	2800      	cmp	r0, #0
 8004732:	f43f aed2 	beq.w	80044da <HAL_RCCEx_PeriphCLKConfig+0x63e>
  return HAL_ERROR;
 8004736:	2001      	movs	r0, #1
}
 8004738:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800473c:	462e      	mov	r6, r5
 800473e:	e450      	b.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x146>
 8004740:	462e      	mov	r6, r5
 8004742:	e406      	b.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0xb6>
 8004744:	462e      	mov	r6, r5
 8004746:	e489      	b.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8004748:	462e      	mov	r6, r5
 800474a:	f7ff bbe2 	b.w	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800474e:	462e      	mov	r6, r5
 8004750:	e423      	b.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004752:	2102      	movs	r1, #2
 8004754:	f104 0008 	add.w	r0, r4, #8
 8004758:	f7ff faac 	bl	8003cb4 <RCCEx_PLL2_Config>
 800475c:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800475e:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8004762:	2d00      	cmp	r5, #0
 8004764:	d14c      	bne.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x964>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004766:	4f3d      	ldr	r7, [pc, #244]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 8004768:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800476a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800476c:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8004770:	4301      	orrs	r1, r0
 8004772:	64f9      	str	r1, [r7, #76]	; 0x4c
 8004774:	e652      	b.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x580>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004776:	4839      	ldr	r0, [pc, #228]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 8004778:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800477a:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 800477e:	62c1      	str	r1, [r0, #44]	; 0x2c
        break;
 8004780:	e462      	b.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004782:	4836      	ldr	r0, [pc, #216]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 8004784:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8004786:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 800478a:	62c1      	str	r1, [r0, #44]	; 0x2c
        break;
 800478c:	e41e      	b.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x130>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800478e:	4833      	ldr	r0, [pc, #204]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 8004790:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8004792:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8004796:	62c1      	str	r1, [r0, #44]	; 0x2c
        break;
 8004798:	f7ff bbd1 	b.w	8003f3e <HAL_RCCEx_PeriphCLKConfig+0xa2>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800479c:	482f      	ldr	r0, [pc, #188]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 800479e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80047a0:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 80047a4:	62c1      	str	r1, [r0, #44]	; 0x2c
        break;
 80047a6:	f7ff bbed 	b.w	8003f84 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80047aa:	462e      	mov	r6, r5
 80047ac:	e540      	b.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x394>
 80047ae:	462e      	mov	r6, r5
 80047b0:	e5a5      	b.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0x462>
 80047b2:	462e      	mov	r6, r5
 80047b4:	e4a2      	b.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x260>
 80047b6:	462e      	mov	r6, r5
 80047b8:	e57f      	b.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x41e>
 80047ba:	462e      	mov	r6, r5
 80047bc:	e42c      	b.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80047be:	462e      	mov	r6, r5
 80047c0:	e501      	b.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 80047c2:	462e      	mov	r6, r5
 80047c4:	e46a      	b.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x200>
 80047c6:	462e      	mov	r6, r5
 80047c8:	e5dd      	b.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0x4ea>
 80047ca:	462e      	mov	r6, r5
 80047cc:	e486      	b.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x240>
 80047ce:	462e      	mov	r6, r5
 80047d0:	e5b7      	b.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80047d2:	462e      	mov	r6, r5
 80047d4:	e54c      	b.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
 80047d6:	462e      	mov	r6, r5
 80047d8:	e602      	b.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x544>
 80047da:	462e      	mov	r6, r5
 80047dc:	e612      	b.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x568>
 80047de:	462e      	mov	r6, r5
 80047e0:	e62e      	b.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x5a4>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047e2:	4f1e      	ldr	r7, [pc, #120]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 80047e4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80047e6:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 80047ea:	62f8      	str	r0, [r7, #44]	; 0x2c
    if (ret == HAL_OK)
 80047ec:	2d00      	cmp	r5, #0
 80047ee:	d1f6      	bne.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x942>
 80047f0:	e6a4      	b.n	800453c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047f2:	481a      	ldr	r0, [pc, #104]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 80047f4:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80047f6:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 80047fa:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
 80047fc:	2d00      	cmp	r5, #0
 80047fe:	d0b2      	beq.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
 8004800:	462e      	mov	r6, r5
 8004802:	e60b      	b.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x580>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004804:	4815      	ldr	r0, [pc, #84]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 8004806:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8004808:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 800480c:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
 800480e:	2d00      	cmp	r5, #0
 8004810:	d1e3      	bne.n	80047da <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8004812:	e6c7      	b.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x708>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004814:	f104 0008 	add.w	r0, r4, #8
 8004818:	f7ff fa4c 	bl	8003cb4 <RCCEx_PLL2_Config>
 800481c:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800481e:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8004822:	2d00      	cmp	r5, #0
 8004824:	d1d7      	bne.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0x93a>
 8004826:	e6d1      	b.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0x730>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004828:	6862      	ldr	r2, [r4, #4]
 800482a:	e653      	b.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x638>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800482c:	2102      	movs	r1, #2
 800482e:	f104 0008 	add.w	r0, r4, #8
 8004832:	f7ff fa3f 	bl	8003cb4 <RCCEx_PLL2_Config>
 8004836:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004838:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800483c:	2d00      	cmp	r5, #0
 800483e:	d1bc      	bne.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x91e>
 8004840:	f7ff bbe3 	b.w	800400a <HAL_RCCEx_PeriphCLKConfig+0x16e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004844:	2102      	movs	r1, #2
 8004846:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800484a:	f7ff faad 	bl	8003da8 <RCCEx_PLL3_Config>
 800484e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004850:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8004854:	2d00      	cmp	r5, #0
 8004856:	d1ba      	bne.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0x932>
 8004858:	e56b      	b.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x496>
 800485a:	bf00      	nop
 800485c:	58024400 	.word	0x58024400
 8004860:	58024800 	.word	0x58024800
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004864:	2102      	movs	r1, #2
 8004866:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800486a:	f7ff fa9d 	bl	8003da8 <RCCEx_PLL3_Config>
 800486e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004870:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8004874:	2d00      	cmp	r5, #0
 8004876:	d1a6      	bne.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x92a>
 8004878:	e57d      	b.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0x4da>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800487a:	4886      	ldr	r0, [pc, #536]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0xbf8>)
 800487c:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800487e:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8004882:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
 8004884:	2d00      	cmp	r5, #0
 8004886:	d194      	bne.n	80047b2 <HAL_RCCEx_PeriphCLKConfig+0x916>
 8004888:	e679      	b.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x6e2>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800488a:	2101      	movs	r1, #1
 800488c:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8004890:	f7ff fa8a 	bl	8003da8 <RCCEx_PLL3_Config>
 8004894:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004896:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800489a:	2d00      	cmp	r5, #0
 800489c:	d191      	bne.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x926>
 800489e:	f7ff bbf6 	b.w	800408e <HAL_RCCEx_PeriphCLKConfig+0x1f2>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80048a2:	2101      	movs	r1, #1
 80048a4:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80048a8:	f7ff fa7e 	bl	8003da8 <RCCEx_PLL3_Config>
 80048ac:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80048ae:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80048b2:	2d00      	cmp	r5, #0
 80048b4:	d189      	bne.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0x92e>
 80048b6:	e409      	b.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x230>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80048b8:	2102      	movs	r1, #2
 80048ba:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80048be:	f7ff fa73 	bl	8003da8 <RCCEx_PLL3_Config>
 80048c2:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80048c4:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80048c8:	2d00      	cmp	r5, #0
 80048ca:	f47f af70 	bne.w	80047ae <HAL_RCCEx_PeriphCLKConfig+0x912>
 80048ce:	e50e      	b.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0x452>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80048d0:	2102      	movs	r1, #2
 80048d2:	f104 0008 	add.w	r0, r4, #8
 80048d6:	f7ff f9ed 	bl	8003cb4 <RCCEx_PLL2_Config>
 80048da:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80048dc:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80048e0:	2d00      	cmp	r5, #0
 80048e2:	f47f af6c 	bne.w	80047be <HAL_RCCEx_PeriphCLKConfig+0x922>
 80048e6:	e467      	b.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x31c>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80048e8:	2102      	movs	r1, #2
 80048ea:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80048ee:	f7ff fa5b 	bl	8003da8 <RCCEx_PLL3_Config>
 80048f2:	2800      	cmp	r0, #0
 80048f4:	f040 8094 	bne.w	8004a20 <HAL_RCCEx_PeriphCLKConfig+0xb84>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80048f8:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80048fc:	e9d4 3200 	ldrd	r3, r2, [r4]
 8004900:	e549      	b.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004902:	2102      	movs	r1, #2
 8004904:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8004908:	f7ff fa4e 	bl	8003da8 <RCCEx_PLL3_Config>
 800490c:	2800      	cmp	r0, #0
 800490e:	f040 808d 	bne.w	8004a2c <HAL_RCCEx_PeriphCLKConfig+0xb90>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004912:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004916:	e9d4 3200 	ldrd	r3, r2, [r4]
 800491a:	e54a      	b.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x516>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800491c:	e9d4 3200 	ldrd	r3, r2, [r4]
 8004920:	f7ff bae9 	b.w	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004924:	2100      	movs	r1, #0
 8004926:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800492a:	f7ff fa3d 	bl	8003da8 <RCCEx_PLL3_Config>
 800492e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004930:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
 8004934:	f7ff bb4a 	b.w	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x130>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004938:	2100      	movs	r1, #0
 800493a:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800493e:	f7ff fa33 	bl	8003da8 <RCCEx_PLL3_Config>
 8004942:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004944:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
 8004948:	e600      	b.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x6b0>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800494a:	2100      	movs	r1, #0
 800494c:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8004950:	f7ff fa2a 	bl	8003da8 <RCCEx_PLL3_Config>
 8004954:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004956:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
 800495a:	f7ff baf0 	b.w	8003f3e <HAL_RCCEx_PeriphCLKConfig+0xa2>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800495e:	2102      	movs	r1, #2
 8004960:	3028      	adds	r0, #40	; 0x28
 8004962:	f7ff fa21 	bl	8003da8 <RCCEx_PLL3_Config>
 8004966:	4606      	mov	r6, r0
    if (ret == HAL_OK)
 8004968:	2e00      	cmp	r6, #0
 800496a:	f43f aab5 	beq.w	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 800496e:	e7d5      	b.n	800491c <HAL_RCCEx_PeriphCLKConfig+0xa80>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004970:	4848      	ldr	r0, [pc, #288]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0xbf8>)
        break;
 8004972:	4635      	mov	r5, r6
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004974:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8004976:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 800497a:	62c1      	str	r1, [r0, #44]	; 0x2c
        break;
 800497c:	e5e6      	b.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x6b0>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800497e:	2100      	movs	r1, #0
 8004980:	f104 0008 	add.w	r0, r4, #8
 8004984:	f7ff f996 	bl	8003cb4 <RCCEx_PLL2_Config>
 8004988:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800498a:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
 800498e:	e5dd      	b.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x6b0>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004990:	2100      	movs	r1, #0
 8004992:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8004996:	f7ff fa07 	bl	8003da8 <RCCEx_PLL3_Config>
 800499a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800499c:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
 80049a0:	f7ff bb52 	b.w	8004048 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80049a4:	2100      	movs	r1, #0
 80049a6:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80049aa:	f7ff f9fd 	bl	8003da8 <RCCEx_PLL3_Config>
 80049ae:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80049b0:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
 80049b4:	f7ff bae6 	b.w	8003f84 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80049b8:	2101      	movs	r1, #1
 80049ba:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80049be:	f7ff f9f3 	bl	8003da8 <RCCEx_PLL3_Config>
 80049c2:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80049c4:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80049c8:	2d00      	cmp	r5, #0
 80049ca:	f47f aef4 	bne.w	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x91a>
 80049ce:	e46c      	b.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x40e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80049d0:	2101      	movs	r1, #1
 80049d2:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80049d6:	f7ff f9e7 	bl	8003da8 <RCCEx_PLL3_Config>
 80049da:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80049dc:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80049e0:	2d00      	cmp	r5, #0
 80049e2:	f47f aef6 	bne.w	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x936>
 80049e6:	e43c      	b.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x3c6>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80049e8:	2101      	movs	r1, #1
 80049ea:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80049ee:	f7ff f9db 	bl	8003da8 <RCCEx_PLL3_Config>
 80049f2:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80049f4:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80049f8:	2d00      	cmp	r5, #0
 80049fa:	f47f aed6 	bne.w	80047aa <HAL_RCCEx_PeriphCLKConfig+0x90e>
 80049fe:	e5f9      	b.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x758>
        status = ret;
 8004a00:	2603      	movs	r6, #3
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004a02:	e9d4 3200 	ldrd	r3, r2, [r4]
 8004a06:	4635      	mov	r5, r6
 8004a08:	f7ff bbe0 	b.w	80041cc <HAL_RCCEx_PeriphCLKConfig+0x330>
    switch (PeriphClkInit->SpdifrxClockSelection)
 8004a0c:	2601      	movs	r6, #1
 8004a0e:	f7ff ba72 	b.w	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a12:	4d20      	ldr	r5, [pc, #128]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0xbf8>)
 8004a14:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8004a16:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 8004a1a:	62e8      	str	r0, [r5, #44]	; 0x2c
    if (ret == HAL_OK)
 8004a1c:	f7ff ba64 	b.w	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x4c>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004a20:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
        status = HAL_ERROR;
 8004a24:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004a26:	e9d4 3200 	ldrd	r3, r2, [r4]
 8004a2a:	e4b4      	b.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004a2c:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
        status = HAL_ERROR;
 8004a30:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004a32:	e9d4 3200 	ldrd	r3, r2, [r4]
 8004a36:	e4bc      	b.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x516>
        tickstart = HAL_GetTick();
 8004a38:	f7fc ffc4 	bl	80019c4 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004a3c:	f8df 8054 	ldr.w	r8, [pc, #84]	; 8004a94 <HAL_RCCEx_PeriphCLKConfig+0xbf8>
        tickstart = HAL_GetTick();
 8004a40:	4607      	mov	r7, r0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a42:	f241 3988 	movw	r9, #5000	; 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004a46:	e004      	b.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0xbb6>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a48:	f7fc ffbc 	bl	80019c4 <HAL_GetTick>
 8004a4c:	1bc0      	subs	r0, r0, r7
 8004a4e:	4548      	cmp	r0, r9
 8004a50:	d8d6      	bhi.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0xb64>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004a52:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 8004a56:	079b      	lsls	r3, r3, #30
 8004a58:	d5f6      	bpl.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0xbac>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a5a:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
 8004a5e:	e64d      	b.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x860>
 8004a60:	480c      	ldr	r0, [pc, #48]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0xbf8>)
 8004a62:	4a0d      	ldr	r2, [pc, #52]	; (8004a98 <HAL_RCCEx_PeriphCLKConfig+0xbfc>)
 8004a64:	6901      	ldr	r1, [r0, #16]
 8004a66:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 8004a6a:	f421 517c 	bic.w	r1, r1, #16128	; 0x3f00
 8004a6e:	430a      	orrs	r2, r1
 8004a70:	6102      	str	r2, [r0, #16]
 8004a72:	e64e      	b.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0x876>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004a74:	e9d4 3200 	ldrd	r3, r2, [r4]
 8004a78:	462e      	mov	r6, r5
 8004a7a:	f7ff bba7 	b.w	80041cc <HAL_RCCEx_PeriphCLKConfig+0x330>
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004a7e:	2601      	movs	r6, #1
 8004a80:	4635      	mov	r5, r6
 8004a82:	f7ff bbf5 	b.w	8004270 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
    switch (PeriphClkInit->FmcClockSelection)
 8004a86:	2601      	movs	r6, #1
 8004a88:	4635      	mov	r5, r6
 8004a8a:	f7ff bb9c 	b.w	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x32a>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004a8e:	2601      	movs	r6, #1
 8004a90:	4635      	mov	r5, r6
 8004a92:	e412      	b.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x41e>
 8004a94:	58024400 	.word	0x58024400
 8004a98:	00ffffcf 	.word	0x00ffffcf

08004a9c <HAL_RCCEx_GetD3PCLK1Freq>:
{
 8004a9c:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004a9e:	f7ff f879 	bl	8003b94 <HAL_RCC_GetHCLKFreq>
 8004aa2:	4b05      	ldr	r3, [pc, #20]	; (8004ab8 <HAL_RCCEx_GetD3PCLK1Freq+0x1c>)
 8004aa4:	4a05      	ldr	r2, [pc, #20]	; (8004abc <HAL_RCCEx_GetD3PCLK1Freq+0x20>)
 8004aa6:	6a1b      	ldr	r3, [r3, #32]
 8004aa8:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8004aac:	5cd3      	ldrb	r3, [r2, r3]
 8004aae:	f003 031f 	and.w	r3, r3, #31
}
 8004ab2:	40d8      	lsrs	r0, r3
 8004ab4:	bd08      	pop	{r3, pc}
 8004ab6:	bf00      	nop
 8004ab8:	58024400 	.word	0x58024400
 8004abc:	08013098 	.word	0x08013098

08004ac0 <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004ac0:	4a4f      	ldr	r2, [pc, #316]	; (8004c00 <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
{
 8004ac2:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004ac4:	6a91      	ldr	r1, [r2, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004ac6:	6a95      	ldr	r5, [r2, #40]	; 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004ac8:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
  if (pll2m != 0U)
 8004aca:	f415 3f7c 	tst.w	r5, #258048	; 0x3f000
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004ace:	f3c5 3305 	ubfx	r3, r5, #12, #6
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004ad2:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
  if (pll2m != 0U)
 8004ad4:	d05d      	beq.n	8004b92 <HAL_RCCEx_GetPLL2ClockFreq+0xd2>
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004ad6:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004ada:	f3c6 1600 	ubfx	r6, r6, #4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004ade:	f001 0103 	and.w	r1, r1, #3
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004ae2:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
 8004ae6:	2901      	cmp	r1, #1
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004ae8:	ee07 4a90 	vmov	s15, r4
 8004aec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 8004af0:	d003      	beq.n	8004afa <HAL_RCCEx_GetPLL2ClockFreq+0x3a>
 8004af2:	2902      	cmp	r1, #2
 8004af4:	d076      	beq.n	8004be4 <HAL_RCCEx_GetPLL2ClockFreq+0x124>
 8004af6:	2900      	cmp	r1, #0
 8004af8:	d050      	beq.n	8004b9c <HAL_RCCEx_GetPLL2ClockFreq+0xdc>
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004afa:	ee07 3a90 	vmov	s15, r3
 8004afe:	ed9f 5a41 	vldr	s10, [pc, #260]	; 8004c04 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
 8004b02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004b06:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8004b08:	eec5 6a27 	vdiv.f32	s13, s10, s15
 8004b0c:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8004c08 <HAL_RCCEx_GetPLL2ClockFreq+0x148>
 8004b10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b14:	ee07 3a90 	vmov	s15, r3
 8004b18:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8004b1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004b20:	eee7 7a25 	vfma.f32	s15, s14, s11
 8004b24:	ee77 7a86 	vadd.f32	s15, s15, s12
 8004b28:	ee66 6aa7 	vmul.f32	s13, s13, s15
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004b2c:	4a34      	ldr	r2, [pc, #208]	; (8004c00 <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
 8004b2e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8004b32:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8004b34:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8004b38:	ee07 3a90 	vmov	s15, r3
 8004b3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 8004b40:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004b42:	ee77 7a86 	vadd.f32	s15, s15, s12
 8004b46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b4a:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8004b4e:	ed80 7a00 	vstr	s14, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004b52:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8004b54:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8004b58:	ee07 3a90 	vmov	s15, r3
 8004b5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004b60:	ee77 7a86 	vadd.f32	s15, s15, s12
 8004b64:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b68:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8004b6c:	ed80 7a01 	vstr	s14, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004b70:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8004b72:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8004b76:	ee07 3a10 	vmov	s14, r3
 8004b7a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004b7e:	ee37 7a06 	vadd.f32	s14, s14, s12
 8004b82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b8a:	ee17 3a90 	vmov	r3, s15
 8004b8e:	6083      	str	r3, [r0, #8]
}
 8004b90:	4770      	bx	lr
 8004b92:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004b94:	e9c0 3300 	strd	r3, r3, [r0]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004b98:	6083      	str	r3, [r0, #8]
}
 8004b9a:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004b9c:	6811      	ldr	r1, [r2, #0]
 8004b9e:	0689      	lsls	r1, r1, #26
 8004ba0:	d527      	bpl.n	8004bf2 <HAL_RCCEx_GetPLL2ClockFreq+0x132>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004ba2:	6814      	ldr	r4, [r2, #0]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004ba4:	ee07 3a90 	vmov	s15, r3
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004ba8:	4918      	ldr	r1, [pc, #96]	; (8004c0c <HAL_RCCEx_GetPLL2ClockFreq+0x14c>)
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004baa:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8004bae:	6b93      	ldr	r3, [r2, #56]	; 0x38
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004bb0:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004bb4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004bb8:	ed9f 5a13 	vldr	s10, [pc, #76]	; 8004c08 <HAL_RCCEx_GetPLL2ClockFreq+0x148>
 8004bbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004bc0:	40d1      	lsrs	r1, r2
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004bc2:	ee06 3a90 	vmov	s13, r3
 8004bc6:	ee06 1a10 	vmov	s12, r1
 8004bca:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8004bce:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8004bd2:	eee7 6a05 	vfma.f32	s13, s14, s10
 8004bd6:	ee86 7a27 	vdiv.f32	s14, s12, s15
 8004bda:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8004bde:	ee66 6a87 	vmul.f32	s13, s13, s14
 8004be2:	e7a3      	b.n	8004b2c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004be4:	ee07 3a90 	vmov	s15, r3
 8004be8:	ed9f 5a09 	vldr	s10, [pc, #36]	; 8004c10 <HAL_RCCEx_GetPLL2ClockFreq+0x150>
 8004bec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004bf0:	e789      	b.n	8004b06 <HAL_RCCEx_GetPLL2ClockFreq+0x46>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004bf2:	ee07 3a90 	vmov	s15, r3
 8004bf6:	ed9f 5a07 	vldr	s10, [pc, #28]	; 8004c14 <HAL_RCCEx_GetPLL2ClockFreq+0x154>
 8004bfa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004bfe:	e782      	b.n	8004b06 <HAL_RCCEx_GetPLL2ClockFreq+0x46>
 8004c00:	58024400 	.word	0x58024400
 8004c04:	4a742400 	.word	0x4a742400
 8004c08:	39000000 	.word	0x39000000
 8004c0c:	03d09000 	.word	0x03d09000
 8004c10:	4bbebc20 	.word	0x4bbebc20
 8004c14:	4c742400 	.word	0x4c742400

08004c18 <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004c18:	4a4f      	ldr	r2, [pc, #316]	; (8004d58 <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
{
 8004c1a:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004c1c:	6a91      	ldr	r1, [r2, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004c1e:	6a95      	ldr	r5, [r2, #40]	; 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004c20:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
  if (pll3m != 0U)
 8004c22:	f015 7f7c 	tst.w	r5, #66060288	; 0x3f00000
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004c26:	f3c5 5305 	ubfx	r3, r5, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004c2a:	6c54      	ldr	r4, [r2, #68]	; 0x44
  if (pll3m != 0U)
 8004c2c:	d05d      	beq.n	8004cea <HAL_RCCEx_GetPLL3ClockFreq+0xd2>
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004c2e:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004c32:	f3c6 2600 	ubfx	r6, r6, #8, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004c36:	f001 0103 	and.w	r1, r1, #3
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004c3a:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
 8004c3e:	2901      	cmp	r1, #1
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004c40:	ee07 4a90 	vmov	s15, r4
 8004c44:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 8004c48:	d003      	beq.n	8004c52 <HAL_RCCEx_GetPLL3ClockFreq+0x3a>
 8004c4a:	2902      	cmp	r1, #2
 8004c4c:	d076      	beq.n	8004d3c <HAL_RCCEx_GetPLL3ClockFreq+0x124>
 8004c4e:	2900      	cmp	r1, #0
 8004c50:	d050      	beq.n	8004cf4 <HAL_RCCEx_GetPLL3ClockFreq+0xdc>
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004c52:	ee07 3a90 	vmov	s15, r3
 8004c56:	ed9f 5a41 	vldr	s10, [pc, #260]	; 8004d5c <HAL_RCCEx_GetPLL3ClockFreq+0x144>
 8004c5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004c5e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004c60:	eec5 6a27 	vdiv.f32	s13, s10, s15
 8004c64:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8004d60 <HAL_RCCEx_GetPLL3ClockFreq+0x148>
 8004c68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c6c:	ee07 3a90 	vmov	s15, r3
 8004c70:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8004c74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004c78:	eee7 7a25 	vfma.f32	s15, s14, s11
 8004c7c:	ee77 7a86 	vadd.f32	s15, s15, s12
 8004c80:	ee66 6aa7 	vmul.f32	s13, s13, s15
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004c84:	4a34      	ldr	r2, [pc, #208]	; (8004d58 <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
 8004c86:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8004c8a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004c8c:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8004c90:	ee07 3a90 	vmov	s15, r3
 8004c94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 8004c98:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004c9a:	ee77 7a86 	vadd.f32	s15, s15, s12
 8004c9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ca2:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8004ca6:	ed80 7a00 	vstr	s14, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004caa:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004cac:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8004cb0:	ee07 3a90 	vmov	s15, r3
 8004cb4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004cb8:	ee77 7a86 	vadd.f32	s15, s15, s12
 8004cbc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004cc0:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8004cc4:	ed80 7a01 	vstr	s14, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004cc8:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004cca:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8004cce:	ee07 3a10 	vmov	s14, r3
 8004cd2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004cd6:	ee37 7a06 	vadd.f32	s14, s14, s12
 8004cda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004cde:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ce2:	ee17 3a90 	vmov	r3, s15
 8004ce6:	6083      	str	r3, [r0, #8]
}
 8004ce8:	4770      	bx	lr
 8004cea:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004cec:	e9c0 3300 	strd	r3, r3, [r0]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004cf0:	6083      	str	r3, [r0, #8]
}
 8004cf2:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004cf4:	6811      	ldr	r1, [r2, #0]
 8004cf6:	0689      	lsls	r1, r1, #26
 8004cf8:	d527      	bpl.n	8004d4a <HAL_RCCEx_GetPLL3ClockFreq+0x132>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004cfa:	6814      	ldr	r4, [r2, #0]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004cfc:	ee07 3a90 	vmov	s15, r3
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004d00:	4918      	ldr	r1, [pc, #96]	; (8004d64 <HAL_RCCEx_GetPLL3ClockFreq+0x14c>)
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004d02:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8004d06:	6c13      	ldr	r3, [r2, #64]	; 0x40
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004d08:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004d0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004d10:	ed9f 5a13 	vldr	s10, [pc, #76]	; 8004d60 <HAL_RCCEx_GetPLL3ClockFreq+0x148>
 8004d14:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004d18:	40d1      	lsrs	r1, r2
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004d1a:	ee06 3a90 	vmov	s13, r3
 8004d1e:	ee06 1a10 	vmov	s12, r1
 8004d22:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8004d26:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8004d2a:	eee7 6a05 	vfma.f32	s13, s14, s10
 8004d2e:	ee86 7a27 	vdiv.f32	s14, s12, s15
 8004d32:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8004d36:	ee66 6a87 	vmul.f32	s13, s13, s14
 8004d3a:	e7a3      	b.n	8004c84 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004d3c:	ee07 3a90 	vmov	s15, r3
 8004d40:	ed9f 5a09 	vldr	s10, [pc, #36]	; 8004d68 <HAL_RCCEx_GetPLL3ClockFreq+0x150>
 8004d44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004d48:	e789      	b.n	8004c5e <HAL_RCCEx_GetPLL3ClockFreq+0x46>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004d4a:	ee07 3a90 	vmov	s15, r3
 8004d4e:	ed9f 5a07 	vldr	s10, [pc, #28]	; 8004d6c <HAL_RCCEx_GetPLL3ClockFreq+0x154>
 8004d52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004d56:	e782      	b.n	8004c5e <HAL_RCCEx_GetPLL3ClockFreq+0x46>
 8004d58:	58024400 	.word	0x58024400
 8004d5c:	4a742400 	.word	0x4a742400
 8004d60:	39000000 	.word	0x39000000
 8004d64:	03d09000 	.word	0x03d09000
 8004d68:	4bbebc20 	.word	0x4bbebc20
 8004d6c:	4c742400 	.word	0x4c742400

08004d70 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004d70:	4770      	bx	lr
 8004d72:	bf00      	nop

08004d74 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004d74:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	d141      	bne.n	8004e00 <HAL_TIM_Base_Start_IT+0x8c>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004d7c:	6802      	ldr	r2, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8004d7e:	2102      	movs	r1, #2

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d80:	4b24      	ldr	r3, [pc, #144]	; (8004e14 <HAL_TIM_Base_Start_IT+0xa0>)
 8004d82:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8004d86:	bf18      	it	ne
 8004d88:	429a      	cmpne	r2, r3
{
 8004d8a:	b430      	push	{r4, r5}
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d8c:	bf0c      	ite	eq
 8004d8e:	2301      	moveq	r3, #1
 8004d90:	2300      	movne	r3, #0
 8004d92:	4d21      	ldr	r5, [pc, #132]	; (8004e18 <HAL_TIM_Base_Start_IT+0xa4>)
 8004d94:	4c21      	ldr	r4, [pc, #132]	; (8004e1c <HAL_TIM_Base_Start_IT+0xa8>)
 8004d96:	42aa      	cmp	r2, r5
 8004d98:	bf08      	it	eq
 8004d9a:	f043 0301 	orreq.w	r3, r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8004d9e:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004da2:	68d1      	ldr	r1, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004da4:	42a2      	cmp	r2, r4
 8004da6:	bf08      	it	eq
 8004da8:	f043 0301 	orreq.w	r3, r3, #1
 8004dac:	f504 6480 	add.w	r4, r4, #1024	; 0x400
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004db0:	f041 0101 	orr.w	r1, r1, #1
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004db4:	481a      	ldr	r0, [pc, #104]	; (8004e20 <HAL_TIM_Base_Start_IT+0xac>)
 8004db6:	42a2      	cmp	r2, r4
 8004db8:	bf08      	it	eq
 8004dba:	f043 0301 	orreq.w	r3, r3, #1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004dbe:	60d1      	str	r1, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004dc0:	4282      	cmp	r2, r0
 8004dc2:	bf08      	it	eq
 8004dc4:	f043 0301 	orreq.w	r3, r3, #1
 8004dc8:	4916      	ldr	r1, [pc, #88]	; (8004e24 <HAL_TIM_Base_Start_IT+0xb0>)
 8004dca:	428a      	cmp	r2, r1
 8004dcc:	bf08      	it	eq
 8004dce:	f043 0301 	orreq.w	r3, r3, #1
 8004dd2:	b933      	cbnz	r3, 8004de2 <HAL_TIM_Base_Start_IT+0x6e>
 8004dd4:	f500 5070 	add.w	r0, r0, #15360	; 0x3c00
 8004dd8:	1a10      	subs	r0, r2, r0
 8004dda:	fab0 f080 	clz	r0, r0
 8004dde:	0940      	lsrs	r0, r0, #5
 8004de0:	b198      	cbz	r0, 8004e0a <HAL_TIM_Base_Start_IT+0x96>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004de2:	6891      	ldr	r1, [r2, #8]
 8004de4:	4b10      	ldr	r3, [pc, #64]	; (8004e28 <HAL_TIM_Base_Start_IT+0xb4>)
 8004de6:	400b      	ands	r3, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004de8:	2b06      	cmp	r3, #6
 8004dea:	d00b      	beq.n	8004e04 <HAL_TIM_Base_Start_IT+0x90>
 8004dec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004df0:	d008      	beq.n	8004e04 <HAL_TIM_Base_Start_IT+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8004df2:	6813      	ldr	r3, [r2, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 8004df4:	2000      	movs	r0, #0
      __HAL_TIM_ENABLE(htim);
 8004df6:	f043 0301 	orr.w	r3, r3, #1
 8004dfa:	6013      	str	r3, [r2, #0]
}
 8004dfc:	bc30      	pop	{r4, r5}
 8004dfe:	4770      	bx	lr
    return HAL_ERROR;
 8004e00:	2001      	movs	r0, #1
}
 8004e02:	4770      	bx	lr
  return HAL_OK;
 8004e04:	2000      	movs	r0, #0
}
 8004e06:	bc30      	pop	{r4, r5}
 8004e08:	4770      	bx	lr
    __HAL_TIM_ENABLE(htim);
 8004e0a:	6813      	ldr	r3, [r2, #0]
 8004e0c:	f043 0301 	orr.w	r3, r3, #1
 8004e10:	6013      	str	r3, [r2, #0]
 8004e12:	e7f3      	b.n	8004dfc <HAL_TIM_Base_Start_IT+0x88>
 8004e14:	40010000 	.word	0x40010000
 8004e18:	40000400 	.word	0x40000400
 8004e1c:	40000800 	.word	0x40000800
 8004e20:	40010400 	.word	0x40010400
 8004e24:	40001800 	.word	0x40001800
 8004e28:	00010007 	.word	0x00010007

08004e2c <HAL_TIM_OC_DelayElapsedCallback>:
 8004e2c:	4770      	bx	lr
 8004e2e:	bf00      	nop

08004e30 <HAL_TIM_IC_CaptureCallback>:
 8004e30:	4770      	bx	lr
 8004e32:	bf00      	nop

08004e34 <HAL_TIM_PWM_PulseFinishedCallback>:
 8004e34:	4770      	bx	lr
 8004e36:	bf00      	nop

08004e38 <HAL_TIM_TriggerCallback>:
 8004e38:	4770      	bx	lr
 8004e3a:	bf00      	nop

08004e3c <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004e3c:	6803      	ldr	r3, [r0, #0]
 8004e3e:	691a      	ldr	r2, [r3, #16]
 8004e40:	0791      	lsls	r1, r2, #30
{
 8004e42:	b510      	push	{r4, lr}
 8004e44:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004e46:	d502      	bpl.n	8004e4e <HAL_TIM_IRQHandler+0x12>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004e48:	68da      	ldr	r2, [r3, #12]
 8004e4a:	0792      	lsls	r2, r2, #30
 8004e4c:	d468      	bmi.n	8004f20 <HAL_TIM_IRQHandler+0xe4>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004e4e:	691a      	ldr	r2, [r3, #16]
 8004e50:	0752      	lsls	r2, r2, #29
 8004e52:	d502      	bpl.n	8004e5a <HAL_TIM_IRQHandler+0x1e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004e54:	68da      	ldr	r2, [r3, #12]
 8004e56:	0750      	lsls	r0, r2, #29
 8004e58:	d44f      	bmi.n	8004efa <HAL_TIM_IRQHandler+0xbe>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004e5a:	691a      	ldr	r2, [r3, #16]
 8004e5c:	0711      	lsls	r1, r2, #28
 8004e5e:	d502      	bpl.n	8004e66 <HAL_TIM_IRQHandler+0x2a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004e60:	68da      	ldr	r2, [r3, #12]
 8004e62:	0712      	lsls	r2, r2, #28
 8004e64:	d437      	bmi.n	8004ed6 <HAL_TIM_IRQHandler+0x9a>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004e66:	691a      	ldr	r2, [r3, #16]
 8004e68:	06d0      	lsls	r0, r2, #27
 8004e6a:	d502      	bpl.n	8004e72 <HAL_TIM_IRQHandler+0x36>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004e6c:	68da      	ldr	r2, [r3, #12]
 8004e6e:	06d1      	lsls	r1, r2, #27
 8004e70:	d41e      	bmi.n	8004eb0 <HAL_TIM_IRQHandler+0x74>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004e72:	691a      	ldr	r2, [r3, #16]
 8004e74:	07d2      	lsls	r2, r2, #31
 8004e76:	d502      	bpl.n	8004e7e <HAL_TIM_IRQHandler+0x42>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004e78:	68da      	ldr	r2, [r3, #12]
 8004e7a:	07d0      	lsls	r0, r2, #31
 8004e7c:	d469      	bmi.n	8004f52 <HAL_TIM_IRQHandler+0x116>
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004e7e:	691a      	ldr	r2, [r3, #16]
 8004e80:	0611      	lsls	r1, r2, #24
 8004e82:	d502      	bpl.n	8004e8a <HAL_TIM_IRQHandler+0x4e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004e84:	68da      	ldr	r2, [r3, #12]
 8004e86:	0612      	lsls	r2, r2, #24
 8004e88:	d46b      	bmi.n	8004f62 <HAL_TIM_IRQHandler+0x126>
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004e8a:	691a      	ldr	r2, [r3, #16]
 8004e8c:	05d0      	lsls	r0, r2, #23
 8004e8e:	d502      	bpl.n	8004e96 <HAL_TIM_IRQHandler+0x5a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004e90:	68da      	ldr	r2, [r3, #12]
 8004e92:	0611      	lsls	r1, r2, #24
 8004e94:	d46d      	bmi.n	8004f72 <HAL_TIM_IRQHandler+0x136>
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004e96:	691a      	ldr	r2, [r3, #16]
 8004e98:	0652      	lsls	r2, r2, #25
 8004e9a:	d502      	bpl.n	8004ea2 <HAL_TIM_IRQHandler+0x66>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004e9c:	68da      	ldr	r2, [r3, #12]
 8004e9e:	0650      	lsls	r0, r2, #25
 8004ea0:	d46f      	bmi.n	8004f82 <HAL_TIM_IRQHandler+0x146>
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004ea2:	691a      	ldr	r2, [r3, #16]
 8004ea4:	0691      	lsls	r1, r2, #26
 8004ea6:	d502      	bpl.n	8004eae <HAL_TIM_IRQHandler+0x72>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004ea8:	68da      	ldr	r2, [r3, #12]
 8004eaa:	0692      	lsls	r2, r2, #26
 8004eac:	d449      	bmi.n	8004f42 <HAL_TIM_IRQHandler+0x106>
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004eae:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004eb0:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004eb4:	2208      	movs	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 8004eb6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004eb8:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004eba:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ebc:	69db      	ldr	r3, [r3, #28]
 8004ebe:	f413 7f40 	tst.w	r3, #768	; 0x300
 8004ec2:	d16f      	bne.n	8004fa4 <HAL_TIM_IRQHandler+0x168>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ec4:	f7ff ffb2 	bl	8004e2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ec8:	4620      	mov	r0, r4
 8004eca:	f7ff ffb3 	bl	8004e34 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ece:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004ed0:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ed2:	7722      	strb	r2, [r4, #28]
 8004ed4:	e7cd      	b.n	8004e72 <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004ed6:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004eda:	2204      	movs	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 8004edc:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004ede:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ee0:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ee2:	69db      	ldr	r3, [r3, #28]
 8004ee4:	079b      	lsls	r3, r3, #30
 8004ee6:	d15a      	bne.n	8004f9e <HAL_TIM_IRQHandler+0x162>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ee8:	f7ff ffa0 	bl	8004e2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004eec:	4620      	mov	r0, r4
 8004eee:	f7ff ffa1 	bl	8004e34 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ef2:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004ef4:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ef6:	7722      	strb	r2, [r4, #28]
 8004ef8:	e7b5      	b.n	8004e66 <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004efa:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004efe:	2202      	movs	r2, #2
        HAL_TIM_IC_CaptureCallback(htim);
 8004f00:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004f02:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f04:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004f06:	699b      	ldr	r3, [r3, #24]
 8004f08:	f413 7f40 	tst.w	r3, #768	; 0x300
 8004f0c:	d144      	bne.n	8004f98 <HAL_TIM_IRQHandler+0x15c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f0e:	f7ff ff8d 	bl	8004e2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f12:	4620      	mov	r0, r4
 8004f14:	f7ff ff8e 	bl	8004e34 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f18:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004f1a:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f1c:	7722      	strb	r2, [r4, #28]
 8004f1e:	e79c      	b.n	8004e5a <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004f20:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004f24:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004f26:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004f28:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004f2a:	699b      	ldr	r3, [r3, #24]
 8004f2c:	0799      	lsls	r1, r3, #30
 8004f2e:	d130      	bne.n	8004f92 <HAL_TIM_IRQHandler+0x156>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f30:	f7ff ff7c 	bl	8004e2c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f34:	4620      	mov	r0, r4
 8004f36:	f7ff ff7d 	bl	8004e34 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f3a:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004f3c:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f3e:	7722      	strb	r2, [r4, #28]
 8004f40:	e785      	b.n	8004e4e <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004f42:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8004f46:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004f48:	611a      	str	r2, [r3, #16]
}
 8004f4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8004f4e:	f000 b8eb 	b.w	8005128 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004f52:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8004f56:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004f58:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8004f5a:	f7fc fa5d 	bl	8001418 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004f5e:	6823      	ldr	r3, [r4, #0]
 8004f60:	e78d      	b.n	8004e7e <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004f62:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8004f66:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004f68:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8004f6a:	f000 f8df 	bl	800512c <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004f6e:	6823      	ldr	r3, [r4, #0]
 8004f70:	e78b      	b.n	8004e8a <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004f72:	f46f 7280 	mvn.w	r2, #256	; 0x100
      HAL_TIMEx_Break2Callback(htim);
 8004f76:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004f78:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8004f7a:	f000 f8d9 	bl	8005130 <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004f7e:	6823      	ldr	r3, [r4, #0]
 8004f80:	e789      	b.n	8004e96 <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004f82:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 8004f86:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004f88:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8004f8a:	f7ff ff55 	bl	8004e38 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004f8e:	6823      	ldr	r3, [r4, #0]
 8004f90:	e787      	b.n	8004ea2 <HAL_TIM_IRQHandler+0x66>
          HAL_TIM_IC_CaptureCallback(htim);
 8004f92:	f7ff ff4d 	bl	8004e30 <HAL_TIM_IC_CaptureCallback>
 8004f96:	e7d0      	b.n	8004f3a <HAL_TIM_IRQHandler+0xfe>
        HAL_TIM_IC_CaptureCallback(htim);
 8004f98:	f7ff ff4a 	bl	8004e30 <HAL_TIM_IC_CaptureCallback>
 8004f9c:	e7bc      	b.n	8004f18 <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
 8004f9e:	f7ff ff47 	bl	8004e30 <HAL_TIM_IC_CaptureCallback>
 8004fa2:	e7a6      	b.n	8004ef2 <HAL_TIM_IRQHandler+0xb6>
        HAL_TIM_IC_CaptureCallback(htim);
 8004fa4:	f7ff ff44 	bl	8004e30 <HAL_TIM_IC_CaptureCallback>
 8004fa8:	e791      	b.n	8004ece <HAL_TIM_IRQHandler+0x92>
 8004faa:	bf00      	nop

08004fac <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004fac:	4a3f      	ldr	r2, [pc, #252]	; (80050ac <TIM_Base_SetConfig+0x100>)
 8004fae:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
  tmpcr1 = TIMx->CR1;
 8004fb2:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004fb4:	eba0 0202 	sub.w	r2, r0, r2
 8004fb8:	fab2 f282 	clz	r2, r2
{
 8004fbc:	b430      	push	{r4, r5}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004fbe:	ea4f 1252 	mov.w	r2, r2, lsr #5
 8004fc2:	d023      	beq.n	800500c <TIM_Base_SetConfig+0x60>
 8004fc4:	bb12      	cbnz	r2, 800500c <TIM_Base_SetConfig+0x60>
 8004fc6:	4c3a      	ldr	r4, [pc, #232]	; (80050b0 <TIM_Base_SetConfig+0x104>)
 8004fc8:	42a0      	cmp	r0, r4
 8004fca:	d047      	beq.n	800505c <TIM_Base_SetConfig+0xb0>
 8004fcc:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004fd0:	42a0      	cmp	r0, r4
 8004fd2:	d043      	beq.n	800505c <TIM_Base_SetConfig+0xb0>
 8004fd4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004fd8:	42a0      	cmp	r0, r4
 8004fda:	d049      	beq.n	8005070 <TIM_Base_SetConfig+0xc4>
 8004fdc:	f504 4478 	add.w	r4, r4, #63488	; 0xf800
 8004fe0:	42a0      	cmp	r0, r4
 8004fe2:	d045      	beq.n	8005070 <TIM_Base_SetConfig+0xc4>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004fe4:	4c33      	ldr	r4, [pc, #204]	; (80050b4 <TIM_Base_SetConfig+0x108>)
 8004fe6:	4a34      	ldr	r2, [pc, #208]	; (80050b8 <TIM_Base_SetConfig+0x10c>)
 8004fe8:	4290      	cmp	r0, r2
 8004fea:	bf18      	it	ne
 8004fec:	42a0      	cmpne	r0, r4
 8004fee:	d04f      	beq.n	8005090 <TIM_Base_SetConfig+0xe4>
 8004ff0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004ff4:	4290      	cmp	r0, r2
 8004ff6:	d04b      	beq.n	8005090 <TIM_Base_SetConfig+0xe4>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ff8:	694d      	ldr	r5, [r1, #20]
 8004ffa:	f023 0380 	bic.w	r3, r3, #128	; 0x80

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ffe:	688c      	ldr	r4, [r1, #8]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005000:	680a      	ldr	r2, [r1, #0]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005002:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8005004:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005006:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005008:	6282      	str	r2, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800500a:	e023      	b.n	8005054 <TIM_Base_SetConfig+0xa8>
    tmpcr1 |= Structure->CounterMode;
 800500c:	684c      	ldr	r4, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800500e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005012:	4323      	orrs	r3, r4
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005014:	4c29      	ldr	r4, [pc, #164]	; (80050bc <TIM_Base_SetConfig+0x110>)
 8005016:	1b04      	subs	r4, r0, r4
 8005018:	fab4 f484 	clz	r4, r4
 800501c:	0964      	lsrs	r4, r4, #5
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800501e:	68cd      	ldr	r5, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8005020:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005024:	432b      	orrs	r3, r5
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005026:	694d      	ldr	r5, [r1, #20]
 8005028:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800502c:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 800502e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005030:	688b      	ldr	r3, [r1, #8]
 8005032:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005034:	680b      	ldr	r3, [r1, #0]
 8005036:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005038:	b952      	cbnz	r2, 8005050 <TIM_Base_SetConfig+0xa4>
 800503a:	b94c      	cbnz	r4, 8005050 <TIM_Base_SetConfig+0xa4>
 800503c:	4a1d      	ldr	r2, [pc, #116]	; (80050b4 <TIM_Base_SetConfig+0x108>)
 800503e:	4b1e      	ldr	r3, [pc, #120]	; (80050b8 <TIM_Base_SetConfig+0x10c>)
 8005040:	4298      	cmp	r0, r3
 8005042:	bf18      	it	ne
 8005044:	4290      	cmpne	r0, r2
 8005046:	d003      	beq.n	8005050 <TIM_Base_SetConfig+0xa4>
 8005048:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800504c:	4298      	cmp	r0, r3
 800504e:	d101      	bne.n	8005054 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005050:	690b      	ldr	r3, [r1, #16]
 8005052:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005054:	2301      	movs	r3, #1
}
 8005056:	bc30      	pop	{r4, r5}
  TIMx->EGR = TIM_EGR_UG;
 8005058:	6143      	str	r3, [r0, #20]
}
 800505a:	4770      	bx	lr
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800505c:	4c17      	ldr	r4, [pc, #92]	; (80050bc <TIM_Base_SetConfig+0x110>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800505e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005062:	684d      	ldr	r5, [r1, #4]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005064:	1b04      	subs	r4, r0, r4
    tmpcr1 |= Structure->CounterMode;
 8005066:	432b      	orrs	r3, r5
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005068:	fab4 f484 	clz	r4, r4
 800506c:	0964      	lsrs	r4, r4, #5
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800506e:	e7d6      	b.n	800501e <TIM_Base_SetConfig+0x72>
    tmpcr1 |= Structure->CounterMode;
 8005070:	684d      	ldr	r5, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005072:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005076:	4c11      	ldr	r4, [pc, #68]	; (80050bc <TIM_Base_SetConfig+0x110>)
    tmpcr1 |= Structure->CounterMode;
 8005078:	432b      	orrs	r3, r5
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800507a:	4d11      	ldr	r5, [pc, #68]	; (80050c0 <TIM_Base_SetConfig+0x114>)
 800507c:	1b04      	subs	r4, r0, r4
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800507e:	42a8      	cmp	r0, r5
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005080:	fab4 f484 	clz	r4, r4
 8005084:	ea4f 1454 	mov.w	r4, r4, lsr #5
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005088:	d0c9      	beq.n	800501e <TIM_Base_SetConfig+0x72>
 800508a:	2c00      	cmp	r4, #0
 800508c:	d1c7      	bne.n	800501e <TIM_Base_SetConfig+0x72>
 800508e:	e7a9      	b.n	8004fe4 <TIM_Base_SetConfig+0x38>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005090:	68cc      	ldr	r4, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8005092:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005096:	694a      	ldr	r2, [r1, #20]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005098:	4323      	orrs	r3, r4
  TIMx->ARR = (uint32_t)Structure->Period ;
 800509a:	688c      	ldr	r4, [r1, #8]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800509c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80050a0:	4313      	orrs	r3, r2
  TIMx->PSC = Structure->Prescaler;
 80050a2:	680a      	ldr	r2, [r1, #0]
  TIMx->CR1 = tmpcr1;
 80050a4:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80050a6:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80050a8:	6282      	str	r2, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80050aa:	e7c7      	b.n	800503c <TIM_Base_SetConfig+0x90>
 80050ac:	40010000 	.word	0x40010000
 80050b0:	40000400 	.word	0x40000400
 80050b4:	40014000 	.word	0x40014000
 80050b8:	40014400 	.word	0x40014400
 80050bc:	40010400 	.word	0x40010400
 80050c0:	40000c00 	.word	0x40000c00

080050c4 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 80050c4:	b370      	cbz	r0, 8005124 <HAL_TIM_Base_Init+0x60>
{
 80050c6:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 80050c8:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80050cc:	4604      	mov	r4, r0
 80050ce:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80050d2:	b313      	cbz	r3, 800511a <HAL_TIM_Base_Init+0x56>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050d4:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 80050d6:	2302      	movs	r3, #2
 80050d8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050dc:	f851 0b04 	ldr.w	r0, [r1], #4
 80050e0:	f7ff ff64 	bl	8004fac <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050e4:	2301      	movs	r3, #1
  return HAL_OK;
 80050e6:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050e8:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050ec:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80050f0:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80050f4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80050f8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 80050fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005100:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005104:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8005108:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800510c:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8005110:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8005114:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8005118:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800511a:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800511e:	f7ff fe27 	bl	8004d70 <HAL_TIM_Base_MspInit>
 8005122:	e7d7      	b.n	80050d4 <HAL_TIM_Base_Init+0x10>
    return HAL_ERROR;
 8005124:	2001      	movs	r0, #1
}
 8005126:	4770      	bx	lr

08005128 <HAL_TIMEx_CommutCallback>:
 8005128:	4770      	bx	lr
 800512a:	bf00      	nop

0800512c <HAL_TIMEx_BreakCallback>:
 800512c:	4770      	bx	lr
 800512e:	bf00      	nop

08005130 <HAL_TIMEx_Break2Callback>:
 8005130:	4770      	bx	lr
 8005132:	bf00      	nop

08005134 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005134:	6802      	ldr	r2, [r0, #0]
 8005136:	b410      	push	{r4}
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005138:	e852 3f00 	ldrex	r3, [r2]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800513c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005140:	e842 3100 	strex	r1, r3, [r2]
 8005144:	2900      	cmp	r1, #0
 8005146:	d1f7      	bne.n	8005138 <UART_EndRxTransfer+0x4>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005148:	4c14      	ldr	r4, [pc, #80]	; (800519c <UART_EndRxTransfer+0x68>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800514a:	f102 0308 	add.w	r3, r2, #8
 800514e:	e853 3f00 	ldrex	r3, [r3]
 8005152:	4023      	ands	r3, r4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005154:	f102 0c08 	add.w	ip, r2, #8
 8005158:	e84c 3100 	strex	r1, r3, [ip]
 800515c:	2900      	cmp	r1, #0
 800515e:	d1f4      	bne.n	800514a <UART_EndRxTransfer+0x16>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005160:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8005162:	2b01      	cmp	r3, #1
 8005164:	d008      	beq.n	8005178 <UART_EndRxTransfer+0x44>
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005166:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 8005168:	2220      	movs	r2, #32

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
}
 800516a:	f85d 4b04 	ldr.w	r4, [sp], #4
  huart->RxState = HAL_UART_STATE_READY;
 800516e:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
  huart->RxISR = NULL;
 8005172:	6743      	str	r3, [r0, #116]	; 0x74
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005174:	66c3      	str	r3, [r0, #108]	; 0x6c
}
 8005176:	4770      	bx	lr
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005178:	e852 3f00 	ldrex	r3, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800517c:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005180:	e842 3100 	strex	r1, r3, [r2]
 8005184:	2900      	cmp	r1, #0
 8005186:	d0ee      	beq.n	8005166 <UART_EndRxTransfer+0x32>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005188:	e852 3f00 	ldrex	r3, [r2]
 800518c:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005190:	e842 3100 	strex	r1, r3, [r2]
 8005194:	2900      	cmp	r1, #0
 8005196:	d1ef      	bne.n	8005178 <UART_EndRxTransfer+0x44>
 8005198:	e7e5      	b.n	8005166 <UART_EndRxTransfer+0x32>
 800519a:	bf00      	nop
 800519c:	effffffe 	.word	0xeffffffe

080051a0 <HAL_UART_TxCpltCallback>:
 80051a0:	4770      	bx	lr
 80051a2:	bf00      	nop

080051a4 <HAL_UART_ErrorCallback>:
 80051a4:	4770      	bx	lr
 80051a6:	bf00      	nop

080051a8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80051a8:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80051aa:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 80051ac:	2300      	movs	r3, #0
 80051ae:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80051b2:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80051b6:	f7ff fff5 	bl	80051a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80051ba:	bd08      	pop	{r3, pc}

080051bc <HAL_UARTEx_RxEventCallback>:
}
 80051bc:	4770      	bx	lr
 80051be:	bf00      	nop

080051c0 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80051c0:	6803      	ldr	r3, [r0, #0]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80051c2:	f640 0c0f 	movw	ip, #2063	; 0x80f
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80051c6:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80051c8:	6819      	ldr	r1, [r3, #0]
  if (errorflags == 0U)
 80051ca:	ea12 0f0c 	tst.w	r2, ip
{
 80051ce:	b570      	push	{r4, r5, r6, lr}
 80051d0:	4604      	mov	r4, r0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80051d2:	689d      	ldr	r5, [r3, #8]
  if (errorflags == 0U)
 80051d4:	f000 80f1 	beq.w	80053ba <HAL_UART_IRQHandler+0x1fa>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80051d8:	489f      	ldr	r0, [pc, #636]	; (8005458 <HAL_UART_IRQHandler+0x298>)
 80051da:	ea05 0c00 	and.w	ip, r5, r0
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80051de:	489f      	ldr	r0, [pc, #636]	; (800545c <HAL_UART_IRQHandler+0x29c>)
 80051e0:	4008      	ands	r0, r1
 80051e2:	ea50 000c 	orrs.w	r0, r0, ip
 80051e6:	d175      	bne.n	80052d4 <HAL_UART_IRQHandler+0x114>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051e8:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80051ea:	2801      	cmp	r0, #1
 80051ec:	d01d      	beq.n	800522a <HAL_UART_IRQHandler+0x6a>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80051ee:	02d6      	lsls	r6, r2, #11
 80051f0:	d502      	bpl.n	80051f8 <HAL_UART_IRQHandler+0x38>
 80051f2:	0268      	lsls	r0, r5, #9
 80051f4:	f100 8118 	bmi.w	8005428 <HAL_UART_IRQHandler+0x268>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80051f8:	0616      	lsls	r6, r2, #24
 80051fa:	d506      	bpl.n	800520a <HAL_UART_IRQHandler+0x4a>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80051fc:	f405 0500 	and.w	r5, r5, #8388608	; 0x800000
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005200:	f001 0080 	and.w	r0, r1, #128	; 0x80
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005204:	4328      	orrs	r0, r5
 8005206:	f040 8107 	bne.w	8005418 <HAL_UART_IRQHandler+0x258>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800520a:	0650      	lsls	r0, r2, #25
 800520c:	d502      	bpl.n	8005214 <HAL_UART_IRQHandler+0x54>
 800520e:	064e      	lsls	r6, r1, #25
 8005210:	f100 80e5 	bmi.w	80053de <HAL_UART_IRQHandler+0x21e>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005214:	0215      	lsls	r5, r2, #8
 8005216:	d502      	bpl.n	800521e <HAL_UART_IRQHandler+0x5e>
 8005218:	0048      	lsls	r0, r1, #1
 800521a:	f100 8111 	bmi.w	8005440 <HAL_UART_IRQHandler+0x280>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800521e:	01d3      	lsls	r3, r2, #7
 8005220:	d502      	bpl.n	8005228 <HAL_UART_IRQHandler+0x68>
 8005222:	2900      	cmp	r1, #0
 8005224:	f2c0 8154 	blt.w	80054d0 <HAL_UART_IRQHandler+0x310>
}
 8005228:	bd70      	pop	{r4, r5, r6, pc}
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800522a:	06d6      	lsls	r6, r2, #27
 800522c:	d5df      	bpl.n	80051ee <HAL_UART_IRQHandler+0x2e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800522e:	06c8      	lsls	r0, r1, #27
 8005230:	d5dd      	bpl.n	80051ee <HAL_UART_IRQHandler+0x2e>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005232:	2210      	movs	r2, #16
 8005234:	621a      	str	r2, [r3, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005236:	689a      	ldr	r2, [r3, #8]
 8005238:	0652      	lsls	r2, r2, #25
 800523a:	f140 8113 	bpl.w	8005464 <HAL_UART_IRQHandler+0x2a4>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800523e:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8005242:	6801      	ldr	r1, [r0, #0]
 8005244:	684a      	ldr	r2, [r1, #4]
 8005246:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 8005248:	2a00      	cmp	r2, #0
 800524a:	d0ed      	beq.n	8005228 <HAL_UART_IRQHandler+0x68>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800524c:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8005250:	4291      	cmp	r1, r2
 8005252:	d9e9      	bls.n	8005228 <HAL_UART_IRQHandler+0x68>
        huart->RxXferCount = nb_remaining_rx_data;
 8005254:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005258:	69c2      	ldr	r2, [r0, #28]
 800525a:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800525e:	d02f      	beq.n	80052c0 <HAL_UART_IRQHandler+0x100>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005260:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005264:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005268:	e843 2100 	strex	r1, r2, [r3]
 800526c:	2900      	cmp	r1, #0
 800526e:	d1f7      	bne.n	8005260 <HAL_UART_IRQHandler+0xa0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005270:	f103 0208 	add.w	r2, r3, #8
 8005274:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005278:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800527c:	f103 0508 	add.w	r5, r3, #8
 8005280:	e845 2100 	strex	r1, r2, [r5]
 8005284:	2900      	cmp	r1, #0
 8005286:	d1f3      	bne.n	8005270 <HAL_UART_IRQHandler+0xb0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005288:	f103 0208 	add.w	r2, r3, #8
 800528c:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005290:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005294:	f103 0508 	add.w	r5, r3, #8
 8005298:	e845 2100 	strex	r1, r2, [r5]
 800529c:	2900      	cmp	r1, #0
 800529e:	d1f3      	bne.n	8005288 <HAL_UART_IRQHandler+0xc8>
          huart->RxState = HAL_UART_STATE_READY;
 80052a0:	2220      	movs	r2, #32
 80052a2:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052a6:	66e1      	str	r1, [r4, #108]	; 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052a8:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052ac:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052b0:	e843 2100 	strex	r1, r2, [r3]
 80052b4:	2900      	cmp	r1, #0
 80052b6:	d1f7      	bne.n	80052a8 <HAL_UART_IRQHandler+0xe8>
          (void)HAL_DMA_Abort(huart->hdmarx);
 80052b8:	f7fc fc48 	bl	8001b4c <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80052bc:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80052c0:	2302      	movs	r3, #2
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80052c2:	4620      	mov	r0, r4
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80052c4:	6723      	str	r3, [r4, #112]	; 0x70
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80052c6:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 80052ca:	1ac9      	subs	r1, r1, r3
 80052cc:	b289      	uxth	r1, r1
 80052ce:	f7ff ff75 	bl	80051bc <HAL_UARTEx_RxEventCallback>
}
 80052d2:	bd70      	pop	{r4, r5, r6, pc}
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80052d4:	07d0      	lsls	r0, r2, #31
 80052d6:	461e      	mov	r6, r3
 80052d8:	d509      	bpl.n	80052ee <HAL_UART_IRQHandler+0x12e>
 80052da:	05c8      	lsls	r0, r1, #23
 80052dc:	d507      	bpl.n	80052ee <HAL_UART_IRQHandler+0x12e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80052de:	2001      	movs	r0, #1
 80052e0:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80052e2:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 80052e6:	f040 0001 	orr.w	r0, r0, #1
 80052ea:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80052ee:	0790      	lsls	r0, r2, #30
 80052f0:	f140 8085 	bpl.w	80053fe <HAL_UART_IRQHandler+0x23e>
 80052f4:	07e8      	lsls	r0, r5, #31
 80052f6:	d509      	bpl.n	800530c <HAL_UART_IRQHandler+0x14c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80052f8:	2002      	movs	r0, #2
 80052fa:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80052fc:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 8005300:	f040 0004 	orr.w	r0, r0, #4
 8005304:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005308:	0750      	lsls	r0, r2, #29
 800530a:	d47c      	bmi.n	8005406 <HAL_UART_IRQHandler+0x246>
    if (((isrflags & USART_ISR_ORE) != 0U)
 800530c:	0710      	lsls	r0, r2, #28
 800530e:	d50c      	bpl.n	800532a <HAL_UART_IRQHandler+0x16a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005310:	f001 0020 	and.w	r0, r1, #32
 8005314:	ea50 000c 	orrs.w	r0, r0, ip
 8005318:	d007      	beq.n	800532a <HAL_UART_IRQHandler+0x16a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800531a:	2008      	movs	r0, #8
 800531c:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800531e:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 8005322:	f040 0008 	orr.w	r0, r0, #8
 8005326:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800532a:	0510      	lsls	r0, r2, #20
 800532c:	d50a      	bpl.n	8005344 <HAL_UART_IRQHandler+0x184>
 800532e:	0148      	lsls	r0, r1, #5
 8005330:	d508      	bpl.n	8005344 <HAL_UART_IRQHandler+0x184>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005332:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005336:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005338:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800533c:	f043 0320 	orr.w	r3, r3, #32
 8005340:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005344:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8005348:	2b00      	cmp	r3, #0
 800534a:	f43f af6d 	beq.w	8005228 <HAL_UART_IRQHandler+0x68>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800534e:	0692      	lsls	r2, r2, #26
 8005350:	d505      	bpl.n	800535e <HAL_UART_IRQHandler+0x19e>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005352:	f001 0120 	and.w	r1, r1, #32
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005356:	f005 5580 	and.w	r5, r5, #268435456	; 0x10000000
 800535a:	4329      	orrs	r1, r5
 800535c:	d175      	bne.n	800544a <HAL_UART_IRQHandler+0x28a>
      errorcode = huart->ErrorCode;
 800535e:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
        UART_EndRxTransfer(huart);
 8005362:	4620      	mov	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005364:	68b3      	ldr	r3, [r6, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005366:	f002 0228 	and.w	r2, r2, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800536a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800536e:	ea53 0502 	orrs.w	r5, r3, r2
 8005372:	f000 80b2 	beq.w	80054da <HAL_UART_IRQHandler+0x31a>
        UART_EndRxTransfer(huart);
 8005376:	f7ff fedd 	bl	8005134 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800537a:	68b3      	ldr	r3, [r6, #8]
 800537c:	065b      	lsls	r3, r3, #25
 800537e:	d55b      	bpl.n	8005438 <HAL_UART_IRQHandler+0x278>
 8005380:	e000      	b.n	8005384 <HAL_UART_IRQHandler+0x1c4>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005382:	6826      	ldr	r6, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005384:	f106 0308 	add.w	r3, r6, #8
 8005388:	e853 3f00 	ldrex	r3, [r3]
 800538c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005390:	f106 0108 	add.w	r1, r6, #8
 8005394:	e841 3200 	strex	r2, r3, [r1]
 8005398:	2a00      	cmp	r2, #0
 800539a:	d1f2      	bne.n	8005382 <HAL_UART_IRQHandler+0x1c2>
          if (huart->hdmarx != NULL)
 800539c:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 80053a0:	2800      	cmp	r0, #0
 80053a2:	d049      	beq.n	8005438 <HAL_UART_IRQHandler+0x278>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80053a4:	4b2e      	ldr	r3, [pc, #184]	; (8005460 <HAL_UART_IRQHandler+0x2a0>)
 80053a6:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80053a8:	f7fc fd48 	bl	8001e3c <HAL_DMA_Abort_IT>
 80053ac:	2800      	cmp	r0, #0
 80053ae:	f43f af3b 	beq.w	8005228 <HAL_UART_IRQHandler+0x68>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80053b2:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 80053b6:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80053b8:	e00e      	b.n	80053d8 <HAL_UART_IRQHandler+0x218>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80053ba:	0696      	lsls	r6, r2, #26
 80053bc:	f57f af14 	bpl.w	80051e8 <HAL_UART_IRQHandler+0x28>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80053c0:	f001 0620 	and.w	r6, r1, #32
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80053c4:	f005 5c80 	and.w	ip, r5, #268435456	; 0x10000000
 80053c8:	ea56 060c 	orrs.w	r6, r6, ip
 80053cc:	f43f af0c 	beq.w	80051e8 <HAL_UART_IRQHandler+0x28>
      if (huart->RxISR != NULL)
 80053d0:	6f43      	ldr	r3, [r0, #116]	; 0x74
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	f43f af28 	beq.w	8005228 <HAL_UART_IRQHandler+0x68>
}
 80053d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80053dc:	4718      	bx	r3
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053de:	e853 2f00 	ldrex	r2, [r3]
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80053e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053e6:	e843 2100 	strex	r1, r2, [r3]
 80053ea:	2900      	cmp	r1, #0
 80053ec:	d1f7      	bne.n	80053de <HAL_UART_IRQHandler+0x21e>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80053ee:	2320      	movs	r3, #32
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80053f0:	4620      	mov	r0, r4
  huart->TxISR = NULL;
 80053f2:	67a1      	str	r1, [r4, #120]	; 0x78
  huart->gState = HAL_UART_STATE_READY;
 80053f4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  HAL_UART_TxCpltCallback(huart);
 80053f8:	f7ff fed2 	bl	80051a0 <HAL_UART_TxCpltCallback>
}
 80053fc:	bd70      	pop	{r4, r5, r6, pc}
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80053fe:	0750      	lsls	r0, r2, #29
 8005400:	d584      	bpl.n	800530c <HAL_UART_IRQHandler+0x14c>
 8005402:	07e8      	lsls	r0, r5, #31
 8005404:	d582      	bpl.n	800530c <HAL_UART_IRQHandler+0x14c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005406:	2004      	movs	r0, #4
 8005408:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800540a:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 800540e:	f040 0002 	orr.w	r0, r0, #2
 8005412:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
 8005416:	e779      	b.n	800530c <HAL_UART_IRQHandler+0x14c>
    if (huart->TxISR != NULL)
 8005418:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800541a:	2b00      	cmp	r3, #0
 800541c:	f43f af04 	beq.w	8005228 <HAL_UART_IRQHandler+0x68>
      huart->TxISR(huart);
 8005420:	4620      	mov	r0, r4
}
 8005422:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      huart->TxISR(huart);
 8005426:	4718      	bx	r3
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005428:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 800542c:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800542e:	621a      	str	r2, [r3, #32]
}
 8005430:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
 8005434:	f001 b860 	b.w	80064f8 <HAL_UARTEx_WakeupCallback>
            HAL_UART_ErrorCallback(huart);
 8005438:	4620      	mov	r0, r4
 800543a:	f7ff feb3 	bl	80051a4 <HAL_UART_ErrorCallback>
}
 800543e:	bd70      	pop	{r4, r5, r6, pc}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005440:	4620      	mov	r0, r4
}
 8005442:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005446:	f001 b85b 	b.w	8006500 <HAL_UARTEx_TxFifoEmptyCallback>
        if (huart->RxISR != NULL)
 800544a:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800544c:	2b00      	cmp	r3, #0
 800544e:	d086      	beq.n	800535e <HAL_UART_IRQHandler+0x19e>
          huart->RxISR(huart);
 8005450:	4620      	mov	r0, r4
 8005452:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005454:	6826      	ldr	r6, [r4, #0]
 8005456:	e782      	b.n	800535e <HAL_UART_IRQHandler+0x19e>
 8005458:	10000001 	.word	0x10000001
 800545c:	04000120 	.word	0x04000120
 8005460:	080051a9 	.word	0x080051a9
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005464:	f8b4 005e 	ldrh.w	r0, [r4, #94]	; 0x5e
 8005468:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
      if ((huart->RxXferCount > 0U)
 800546c:	f8b4 205e 	ldrh.w	r2, [r4, #94]	; 0x5e
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005470:	1a09      	subs	r1, r1, r0
      if ((huart->RxXferCount > 0U)
 8005472:	b292      	uxth	r2, r2
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005474:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 8005476:	2a00      	cmp	r2, #0
 8005478:	f43f aed6 	beq.w	8005228 <HAL_UART_IRQHandler+0x68>
 800547c:	2900      	cmp	r1, #0
 800547e:	f43f aed3 	beq.w	8005228 <HAL_UART_IRQHandler+0x68>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005482:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005486:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800548a:	e843 2000 	strex	r0, r2, [r3]
 800548e:	2800      	cmp	r0, #0
 8005490:	d1f7      	bne.n	8005482 <HAL_UART_IRQHandler+0x2c2>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005492:	4d14      	ldr	r5, [pc, #80]	; (80054e4 <HAL_UART_IRQHandler+0x324>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005494:	f103 0208 	add.w	r2, r3, #8
 8005498:	e852 2f00 	ldrex	r2, [r2]
 800549c:	402a      	ands	r2, r5
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800549e:	f103 0608 	add.w	r6, r3, #8
 80054a2:	e846 2000 	strex	r0, r2, [r6]
 80054a6:	2800      	cmp	r0, #0
 80054a8:	d1f4      	bne.n	8005494 <HAL_UART_IRQHandler+0x2d4>
        huart->RxState = HAL_UART_STATE_READY;
 80054aa:	2220      	movs	r2, #32
        huart->RxISR = NULL;
 80054ac:	6760      	str	r0, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80054ae:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054b2:	66e0      	str	r0, [r4, #108]	; 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054b4:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054b8:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054bc:	e843 2000 	strex	r0, r2, [r3]
 80054c0:	2800      	cmp	r0, #0
 80054c2:	d1f7      	bne.n	80054b4 <HAL_UART_IRQHandler+0x2f4>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80054c4:	2302      	movs	r3, #2
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80054c6:	4620      	mov	r0, r4
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80054c8:	6723      	str	r3, [r4, #112]	; 0x70
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80054ca:	f7ff fe77 	bl	80051bc <HAL_UARTEx_RxEventCallback>
}
 80054ce:	bd70      	pop	{r4, r5, r6, pc}
    HAL_UARTEx_RxFifoFullCallback(huart);
 80054d0:	4620      	mov	r0, r4
}
 80054d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_RxFifoFullCallback(huart);
 80054d6:	f001 b811 	b.w	80064fc <HAL_UARTEx_RxFifoFullCallback>
        HAL_UART_ErrorCallback(huart);
 80054da:	f7ff fe63 	bl	80051a4 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054de:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
}
 80054e2:	bd70      	pop	{r4, r5, r6, pc}
 80054e4:	effffffe 	.word	0xeffffffe

080054e8 <UART_RxISR_8BIT>:
{
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80054e8:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
  uint16_t uhMask = huart->Mask;
 80054ec:	f8b0 2060 	ldrh.w	r2, [r0, #96]	; 0x60
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80054f0:	2b22      	cmp	r3, #34	; 0x22
 80054f2:	d005      	beq.n	8005500 <UART_RxISR_8BIT+0x18>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80054f4:	6802      	ldr	r2, [r0, #0]
 80054f6:	6993      	ldr	r3, [r2, #24]
 80054f8:	f043 0308 	orr.w	r3, r3, #8
 80054fc:	6193      	str	r3, [r2, #24]
  }
}
 80054fe:	4770      	bx	lr
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005500:	6803      	ldr	r3, [r0, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005502:	6d81      	ldr	r1, [r0, #88]	; 0x58
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005506:	4013      	ands	r3, r2
 8005508:	700b      	strb	r3, [r1, #0]
    huart->RxXferCount--;
 800550a:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
    huart->pRxBuffPtr++;
 800550e:	6d82      	ldr	r2, [r0, #88]	; 0x58
    huart->RxXferCount--;
 8005510:	3b01      	subs	r3, #1
    huart->pRxBuffPtr++;
 8005512:	3201      	adds	r2, #1
    huart->RxXferCount--;
 8005514:	b29b      	uxth	r3, r3
    huart->pRxBuffPtr++;
 8005516:	6582      	str	r2, [r0, #88]	; 0x58
    huart->RxXferCount--;
 8005518:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
    if (huart->RxXferCount == 0U)
 800551c:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 8005520:	b29b      	uxth	r3, r3
 8005522:	2b00      	cmp	r3, #0
 8005524:	d137      	bne.n	8005596 <UART_RxISR_8BIT+0xae>
 8005526:	6803      	ldr	r3, [r0, #0]
{
 8005528:	b510      	push	{r4, lr}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800552a:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800552e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005532:	e843 2100 	strex	r1, r2, [r3]
 8005536:	2900      	cmp	r1, #0
 8005538:	d1f7      	bne.n	800552a <UART_RxISR_8BIT+0x42>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800553a:	f103 0208 	add.w	r2, r3, #8
 800553e:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005542:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005546:	f103 0408 	add.w	r4, r3, #8
 800554a:	e844 2100 	strex	r1, r2, [r4]
 800554e:	2900      	cmp	r1, #0
 8005550:	d1f3      	bne.n	800553a <UART_RxISR_8BIT+0x52>
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005552:	4a1b      	ldr	r2, [pc, #108]	; (80055c0 <UART_RxISR_8BIT+0xd8>)
      huart->RxState = HAL_UART_STATE_READY;
 8005554:	2420      	movs	r4, #32
      huart->RxISR = NULL;
 8005556:	6741      	str	r1, [r0, #116]	; 0x74
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005558:	4293      	cmp	r3, r2
      huart->RxState = HAL_UART_STATE_READY;
 800555a:	f8c0 408c 	str.w	r4, [r0, #140]	; 0x8c
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800555e:	6701      	str	r1, [r0, #112]	; 0x70
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005560:	d002      	beq.n	8005568 <UART_RxISR_8BIT+0x80>
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005562:	685a      	ldr	r2, [r3, #4]
 8005564:	0211      	lsls	r1, r2, #8
 8005566:	d417      	bmi.n	8005598 <UART_RxISR_8BIT+0xb0>
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005568:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 800556a:	2a01      	cmp	r2, #1
 800556c:	d125      	bne.n	80055ba <UART_RxISR_8BIT+0xd2>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800556e:	2200      	movs	r2, #0
 8005570:	66c2      	str	r2, [r0, #108]	; 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005572:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005576:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800557a:	e843 2100 	strex	r1, r2, [r3]
 800557e:	2900      	cmp	r1, #0
 8005580:	d1f7      	bne.n	8005572 <UART_RxISR_8BIT+0x8a>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005582:	69da      	ldr	r2, [r3, #28]
 8005584:	06d2      	lsls	r2, r2, #27
 8005586:	d501      	bpl.n	800558c <UART_RxISR_8BIT+0xa4>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005588:	2210      	movs	r2, #16
 800558a:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800558c:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 8005590:	f7ff fe14 	bl	80051bc <HAL_UARTEx_RxEventCallback>
}
 8005594:	bd10      	pop	{r4, pc}
 8005596:	4770      	bx	lr
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005598:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800559c:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055a0:	e843 2100 	strex	r1, r2, [r3]
 80055a4:	2900      	cmp	r1, #0
 80055a6:	d0df      	beq.n	8005568 <UART_RxISR_8BIT+0x80>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055a8:	e853 2f00 	ldrex	r2, [r3]
 80055ac:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055b0:	e843 2100 	strex	r1, r2, [r3]
 80055b4:	2900      	cmp	r1, #0
 80055b6:	d1ef      	bne.n	8005598 <UART_RxISR_8BIT+0xb0>
 80055b8:	e7d6      	b.n	8005568 <UART_RxISR_8BIT+0x80>
        HAL_UART_RxCpltCallback(huart);
 80055ba:	f00b fd8b 	bl	80110d4 <HAL_UART_RxCpltCallback>
}
 80055be:	bd10      	pop	{r4, pc}
 80055c0:	58000c00 	.word	0x58000c00

080055c4 <UART_RxISR_16BIT>:
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80055c4:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
  uint16_t uhMask = huart->Mask;
 80055c8:	f8b0 2060 	ldrh.w	r2, [r0, #96]	; 0x60
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80055cc:	2b22      	cmp	r3, #34	; 0x22
 80055ce:	d005      	beq.n	80055dc <UART_RxISR_16BIT+0x18>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80055d0:	6802      	ldr	r2, [r0, #0]
 80055d2:	6993      	ldr	r3, [r2, #24]
 80055d4:	f043 0308 	orr.w	r3, r3, #8
 80055d8:	6193      	str	r3, [r2, #24]
 80055da:	4770      	bx	lr
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80055dc:	6803      	ldr	r3, [r0, #0]
    *tmp = (uint16_t)(uhdata & uhMask);
 80055de:	6d81      	ldr	r1, [r0, #88]	; 0x58
{
 80055e0:	b510      	push	{r4, lr}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80055e2:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    *tmp = (uint16_t)(uhdata & uhMask);
 80055e4:	4022      	ands	r2, r4
 80055e6:	f821 2b02 	strh.w	r2, [r1], #2
    huart->RxXferCount--;
 80055ea:	f8b0 205e 	ldrh.w	r2, [r0, #94]	; 0x5e
    huart->pRxBuffPtr += 2U;
 80055ee:	6581      	str	r1, [r0, #88]	; 0x58
    huart->RxXferCount--;
 80055f0:	3a01      	subs	r2, #1
 80055f2:	b292      	uxth	r2, r2
 80055f4:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
    if (huart->RxXferCount == 0U)
 80055f8:	f8b0 205e 	ldrh.w	r2, [r0, #94]	; 0x5e
 80055fc:	b292      	uxth	r2, r2
 80055fe:	2a00      	cmp	r2, #0
 8005600:	d134      	bne.n	800566c <UART_RxISR_16BIT+0xa8>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005602:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005606:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800560a:	e843 2100 	strex	r1, r2, [r3]
 800560e:	2900      	cmp	r1, #0
 8005610:	d1f7      	bne.n	8005602 <UART_RxISR_16BIT+0x3e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005612:	f103 0208 	add.w	r2, r3, #8
 8005616:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800561a:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800561e:	f103 0408 	add.w	r4, r3, #8
 8005622:	e844 2100 	strex	r1, r2, [r4]
 8005626:	2900      	cmp	r1, #0
 8005628:	d1f3      	bne.n	8005612 <UART_RxISR_16BIT+0x4e>
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800562a:	4a1b      	ldr	r2, [pc, #108]	; (8005698 <UART_RxISR_16BIT+0xd4>)
      huart->RxState = HAL_UART_STATE_READY;
 800562c:	2420      	movs	r4, #32
      huart->RxISR = NULL;
 800562e:	6741      	str	r1, [r0, #116]	; 0x74
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005630:	4293      	cmp	r3, r2
      huart->RxState = HAL_UART_STATE_READY;
 8005632:	f8c0 408c 	str.w	r4, [r0, #140]	; 0x8c
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005636:	6701      	str	r1, [r0, #112]	; 0x70
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005638:	d002      	beq.n	8005640 <UART_RxISR_16BIT+0x7c>
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800563a:	685a      	ldr	r2, [r3, #4]
 800563c:	0211      	lsls	r1, r2, #8
 800563e:	d416      	bmi.n	800566e <UART_RxISR_16BIT+0xaa>
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005640:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8005642:	2a01      	cmp	r2, #1
 8005644:	d124      	bne.n	8005690 <UART_RxISR_16BIT+0xcc>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005646:	2200      	movs	r2, #0
 8005648:	66c2      	str	r2, [r0, #108]	; 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800564a:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800564e:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005652:	e843 2100 	strex	r1, r2, [r3]
 8005656:	2900      	cmp	r1, #0
 8005658:	d1f7      	bne.n	800564a <UART_RxISR_16BIT+0x86>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800565a:	69da      	ldr	r2, [r3, #28]
 800565c:	06d2      	lsls	r2, r2, #27
 800565e:	d501      	bpl.n	8005664 <UART_RxISR_16BIT+0xa0>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005660:	2210      	movs	r2, #16
 8005662:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005664:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 8005668:	f7ff fda8 	bl	80051bc <HAL_UARTEx_RxEventCallback>
  }
}
 800566c:	bd10      	pop	{r4, pc}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800566e:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005672:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005676:	e843 2100 	strex	r1, r2, [r3]
 800567a:	2900      	cmp	r1, #0
 800567c:	d0e0      	beq.n	8005640 <UART_RxISR_16BIT+0x7c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800567e:	e853 2f00 	ldrex	r2, [r3]
 8005682:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005686:	e843 2100 	strex	r1, r2, [r3]
 800568a:	2900      	cmp	r1, #0
 800568c:	d1ef      	bne.n	800566e <UART_RxISR_16BIT+0xaa>
 800568e:	e7d7      	b.n	8005640 <UART_RxISR_16BIT+0x7c>
        HAL_UART_RxCpltCallback(huart);
 8005690:	f00b fd20 	bl	80110d4 <HAL_UART_RxCpltCallback>
}
 8005694:	bd10      	pop	{r4, pc}
 8005696:	bf00      	nop
 8005698:	58000c00 	.word	0x58000c00

0800569c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800569c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint16_t  uhMask = huart->Mask;
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80056a0:	6802      	ldr	r2, [r0, #0]
{
 80056a2:	4604      	mov	r4, r0
  uint16_t  uhMask = huart->Mask;
 80056a4:	f8b0 a060 	ldrh.w	sl, [r0, #96]	; 0x60
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80056a8:	69d0      	ldr	r0, [r2, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80056aa:	6816      	ldr	r6, [r2, #0]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80056ac:	6895      	ldr	r5, [r2, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80056ae:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 80056b2:	2922      	cmp	r1, #34	; 0x22
 80056b4:	d006      	beq.n	80056c4 <UART_RxISR_8BIT_FIFOEN+0x28>
 80056b6:	4613      	mov	r3, r2
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80056b8:	6992      	ldr	r2, [r2, #24]
 80056ba:	f042 0208 	orr.w	r2, r2, #8
 80056be:	619a      	str	r2, [r3, #24]
  }
}
 80056c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80056c4:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	f000 80d3 	beq.w	8005874 <UART_RxISR_8BIT_FIFOEN+0x1d8>
 80056ce:	0680      	lsls	r0, r0, #26
 80056d0:	f140 8087 	bpl.w	80057e2 <UART_RxISR_8BIT_FIFOEN+0x146>
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80056d4:	fa5f fa8a 	uxtb.w	sl, sl
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056d8:	f04f 0800 	mov.w	r8, #0
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80056dc:	f8df 91a4 	ldr.w	r9, [pc, #420]	; 8005884 <UART_RxISR_8BIT_FIFOEN+0x1e8>
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80056e0:	4f66      	ldr	r7, [pc, #408]	; (800587c <UART_RxISR_8BIT_FIFOEN+0x1e0>)
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80056e2:	6a52      	ldr	r2, [r2, #36]	; 0x24
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80056e4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80056e6:	ea0a 0202 	and.w	r2, sl, r2
 80056ea:	701a      	strb	r2, [r3, #0]
      huart->RxXferCount--;
 80056ec:	f8b4 105e 	ldrh.w	r1, [r4, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80056f0:	6823      	ldr	r3, [r4, #0]
      huart->RxXferCount--;
 80056f2:	3901      	subs	r1, #1
      huart->pRxBuffPtr++;
 80056f4:	6da2      	ldr	r2, [r4, #88]	; 0x58
      huart->RxXferCount--;
 80056f6:	b289      	uxth	r1, r1
      huart->pRxBuffPtr++;
 80056f8:	3201      	adds	r2, #1
      huart->RxXferCount--;
 80056fa:	f8a4 105e 	strh.w	r1, [r4, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80056fe:	f8d3 b01c 	ldr.w	fp, [r3, #28]
      huart->pRxBuffPtr++;
 8005702:	65a2      	str	r2, [r4, #88]	; 0x58
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005704:	f01b 0f07 	tst.w	fp, #7
 8005708:	d01f      	beq.n	800574a <UART_RxISR_8BIT_FIFOEN+0xae>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800570a:	f01b 0f01 	tst.w	fp, #1
 800570e:	d009      	beq.n	8005724 <UART_RxISR_8BIT_FIFOEN+0x88>
 8005710:	05f1      	lsls	r1, r6, #23
 8005712:	d507      	bpl.n	8005724 <UART_RxISR_8BIT_FIFOEN+0x88>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005714:	2201      	movs	r2, #1
 8005716:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005718:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 800571c:	f042 0201 	orr.w	r2, r2, #1
 8005720:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005724:	f01b 0f02 	tst.w	fp, #2
 8005728:	d018      	beq.n	800575c <UART_RxISR_8BIT_FIFOEN+0xc0>
 800572a:	07ea      	lsls	r2, r5, #31
 800572c:	d50a      	bpl.n	8005744 <UART_RxISR_8BIT_FIFOEN+0xa8>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800572e:	2202      	movs	r2, #2
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005730:	f01b 0f04 	tst.w	fp, #4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005734:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005736:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 800573a:	f042 0204 	orr.w	r2, r2, #4
 800573e:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005742:	d110      	bne.n	8005766 <UART_RxISR_8BIT_FIFOEN+0xca>
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005744:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8005748:	b9cb      	cbnz	r3, 800577e <UART_RxISR_8BIT_FIFOEN+0xe2>
      if (huart->RxXferCount == 0U)
 800574a:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800574e:	b29b      	uxth	r3, r3
 8005750:	b1fb      	cbz	r3, 8005792 <UART_RxISR_8BIT_FIFOEN+0xf6>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005752:	f01b 0f20 	tst.w	fp, #32
 8005756:	d044      	beq.n	80057e2 <UART_RxISR_8BIT_FIFOEN+0x146>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005758:	6822      	ldr	r2, [r4, #0]
 800575a:	e7c2      	b.n	80056e2 <UART_RxISR_8BIT_FIFOEN+0x46>
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800575c:	f01b 0f04 	tst.w	fp, #4
 8005760:	d0f0      	beq.n	8005744 <UART_RxISR_8BIT_FIFOEN+0xa8>
 8005762:	07e8      	lsls	r0, r5, #31
 8005764:	d5ee      	bpl.n	8005744 <UART_RxISR_8BIT_FIFOEN+0xa8>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005766:	2204      	movs	r2, #4
 8005768:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800576a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800576e:	f043 0302 	orr.w	r3, r3, #2
 8005772:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005776:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800577a:	2b00      	cmp	r3, #0
 800577c:	d0e5      	beq.n	800574a <UART_RxISR_8BIT_FIFOEN+0xae>
          HAL_UART_ErrorCallback(huart);
 800577e:	4620      	mov	r0, r4
 8005780:	f7ff fd10 	bl	80051a4 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005784:	f8c4 8090 	str.w	r8, [r4, #144]	; 0x90
      if (huart->RxXferCount == 0U)
 8005788:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800578c:	b29b      	uxth	r3, r3
 800578e:	2b00      	cmp	r3, #0
 8005790:	d1df      	bne.n	8005752 <UART_RxISR_8BIT_FIFOEN+0xb6>
 8005792:	6823      	ldr	r3, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005794:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005798:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800579c:	e843 2100 	strex	r1, r2, [r3]
 80057a0:	2900      	cmp	r1, #0
 80057a2:	d1f7      	bne.n	8005794 <UART_RxISR_8BIT_FIFOEN+0xf8>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057a4:	f103 0208 	add.w	r2, r3, #8
 80057a8:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80057ac:	ea02 0209 	and.w	r2, r2, r9
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057b0:	f103 0008 	add.w	r0, r3, #8
 80057b4:	e840 2100 	strex	r1, r2, [r0]
 80057b8:	2900      	cmp	r1, #0
 80057ba:	d1f3      	bne.n	80057a4 <UART_RxISR_8BIT_FIFOEN+0x108>
        huart->RxState = HAL_UART_STATE_READY;
 80057bc:	2220      	movs	r2, #32
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80057be:	42bb      	cmp	r3, r7
        huart->RxISR = NULL;
 80057c0:	6761      	str	r1, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80057c2:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80057c6:	6721      	str	r1, [r4, #112]	; 0x70
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80057c8:	d002      	beq.n	80057d0 <UART_RxISR_8BIT_FIFOEN+0x134>
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80057ca:	685a      	ldr	r2, [r3, #4]
 80057cc:	0211      	lsls	r1, r2, #8
 80057ce:	d42b      	bmi.n	8005828 <UART_RxISR_8BIT_FIFOEN+0x18c>
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057d0:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80057d2:	2a01      	cmp	r2, #1
 80057d4:	d039      	beq.n	800584a <UART_RxISR_8BIT_FIFOEN+0x1ae>
          HAL_UART_RxCpltCallback(huart);
 80057d6:	4620      	mov	r0, r4
 80057d8:	f00b fc7c 	bl	80110d4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80057dc:	f01b 0f20 	tst.w	fp, #32
 80057e0:	d1ba      	bne.n	8005758 <UART_RxISR_8BIT_FIFOEN+0xbc>
    rxdatacount = huart->RxXferCount;
 80057e2:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 80057e6:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	f43f af69 	beq.w	80056c0 <UART_RxISR_8BIT_FIFOEN+0x24>
 80057ee:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 80057f2:	429a      	cmp	r2, r3
 80057f4:	f67f af64 	bls.w	80056c0 <UART_RxISR_8BIT_FIFOEN+0x24>
 80057f8:	6823      	ldr	r3, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057fa:	f103 0208 	add.w	r2, r3, #8
 80057fe:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005802:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005806:	f103 0008 	add.w	r0, r3, #8
 800580a:	e840 2100 	strex	r1, r2, [r0]
 800580e:	2900      	cmp	r1, #0
 8005810:	d1f3      	bne.n	80057fa <UART_RxISR_8BIT_FIFOEN+0x15e>
      huart->RxISR = UART_RxISR_8BIT;
 8005812:	4a1b      	ldr	r2, [pc, #108]	; (8005880 <UART_RxISR_8BIT_FIFOEN+0x1e4>)
 8005814:	6762      	str	r2, [r4, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005816:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800581a:	f042 0220 	orr.w	r2, r2, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800581e:	e843 2100 	strex	r1, r2, [r3]
 8005822:	2900      	cmp	r1, #0
 8005824:	d1f7      	bne.n	8005816 <UART_RxISR_8BIT_FIFOEN+0x17a>
 8005826:	e74b      	b.n	80056c0 <UART_RxISR_8BIT_FIFOEN+0x24>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005828:	e853 2f00 	ldrex	r2, [r3]
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800582c:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005830:	e843 2100 	strex	r1, r2, [r3]
 8005834:	2900      	cmp	r1, #0
 8005836:	d0cb      	beq.n	80057d0 <UART_RxISR_8BIT_FIFOEN+0x134>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005838:	e853 2f00 	ldrex	r2, [r3]
 800583c:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005840:	e843 2100 	strex	r1, r2, [r3]
 8005844:	2900      	cmp	r1, #0
 8005846:	d1ef      	bne.n	8005828 <UART_RxISR_8BIT_FIFOEN+0x18c>
 8005848:	e7c2      	b.n	80057d0 <UART_RxISR_8BIT_FIFOEN+0x134>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800584a:	f8c4 806c 	str.w	r8, [r4, #108]	; 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800584e:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005852:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005856:	e843 2100 	strex	r1, r2, [r3]
 800585a:	2900      	cmp	r1, #0
 800585c:	d1f7      	bne.n	800584e <UART_RxISR_8BIT_FIFOEN+0x1b2>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800585e:	69da      	ldr	r2, [r3, #28]
 8005860:	06d2      	lsls	r2, r2, #27
 8005862:	d501      	bpl.n	8005868 <UART_RxISR_8BIT_FIFOEN+0x1cc>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005864:	2210      	movs	r2, #16
 8005866:	621a      	str	r2, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005868:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 800586c:	4620      	mov	r0, r4
 800586e:	f7ff fca5 	bl	80051bc <HAL_UARTEx_RxEventCallback>
 8005872:	e76e      	b.n	8005752 <UART_RxISR_8BIT_FIFOEN+0xb6>
    rxdatacount = huart->RxXferCount;
 8005874:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005878:	e722      	b.n	80056c0 <UART_RxISR_8BIT_FIFOEN+0x24>
 800587a:	bf00      	nop
 800587c:	58000c00 	.word	0x58000c00
 8005880:	080054e9 	.word	0x080054e9
 8005884:	effffffe 	.word	0xeffffffe

08005888 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005888:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800588c:	6803      	ldr	r3, [r0, #0]
  uint16_t  uhMask = huart->Mask;
 800588e:	f8b0 a060 	ldrh.w	sl, [r0, #96]	; 0x60
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005892:	69d9      	ldr	r1, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005894:	681e      	ldr	r6, [r3, #0]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005896:	689d      	ldr	r5, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005898:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 800589c:	2a22      	cmp	r2, #34	; 0x22
 800589e:	d005      	beq.n	80058ac <UART_RxISR_16BIT_FIFOEN+0x24>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80058a0:	699a      	ldr	r2, [r3, #24]
 80058a2:	f042 0208 	orr.w	r2, r2, #8
 80058a6:	619a      	str	r2, [r3, #24]
  }
}
 80058a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80058ac:	f8b0 2068 	ldrh.w	r2, [r0, #104]	; 0x68
 80058b0:	4683      	mov	fp, r0
 80058b2:	2a00      	cmp	r2, #0
 80058b4:	f000 80d0 	beq.w	8005a58 <UART_RxISR_16BIT_FIFOEN+0x1d0>
 80058b8:	0689      	lsls	r1, r1, #26
 80058ba:	f140 8082 	bpl.w	80059c2 <UART_RxISR_16BIT_FIFOEN+0x13a>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058be:	f04f 0800 	mov.w	r8, #0
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80058c2:	f8df 91a4 	ldr.w	r9, [pc, #420]	; 8005a68 <UART_RxISR_16BIT_FIFOEN+0x1e0>
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80058c6:	4f66      	ldr	r7, [pc, #408]	; (8005a60 <UART_RxISR_16BIT_FIFOEN+0x1d8>)
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80058c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
      *tmp = (uint16_t)(uhdata & uhMask);
 80058ca:	f8db 1058 	ldr.w	r1, [fp, #88]	; 0x58
 80058ce:	ea0a 0202 	and.w	r2, sl, r2
 80058d2:	f821 2b02 	strh.w	r2, [r1], #2
      huart->RxXferCount--;
 80058d6:	f8bb 205e 	ldrh.w	r2, [fp, #94]	; 0x5e
      huart->pRxBuffPtr += 2U;
 80058da:	f8cb 1058 	str.w	r1, [fp, #88]	; 0x58
      huart->RxXferCount--;
 80058de:	3a01      	subs	r2, #1
 80058e0:	b292      	uxth	r2, r2
 80058e2:	f8ab 205e 	strh.w	r2, [fp, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80058e6:	69dc      	ldr	r4, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80058e8:	0762      	lsls	r2, r4, #29
 80058ea:	d01c      	beq.n	8005926 <UART_RxISR_16BIT_FIFOEN+0x9e>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80058ec:	07e0      	lsls	r0, r4, #31
 80058ee:	d509      	bpl.n	8005904 <UART_RxISR_16BIT_FIFOEN+0x7c>
 80058f0:	05f1      	lsls	r1, r6, #23
 80058f2:	d507      	bpl.n	8005904 <UART_RxISR_16BIT_FIFOEN+0x7c>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80058f4:	2201      	movs	r2, #1
 80058f6:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80058f8:	f8db 2090 	ldr.w	r2, [fp, #144]	; 0x90
 80058fc:	f042 0201 	orr.w	r2, r2, #1
 8005900:	f8cb 2090 	str.w	r2, [fp, #144]	; 0x90
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005904:	07a2      	lsls	r2, r4, #30
 8005906:	d517      	bpl.n	8005938 <UART_RxISR_16BIT_FIFOEN+0xb0>
 8005908:	07e8      	lsls	r0, r5, #31
 800590a:	d509      	bpl.n	8005920 <UART_RxISR_16BIT_FIFOEN+0x98>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800590c:	2202      	movs	r2, #2
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800590e:	0761      	lsls	r1, r4, #29
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005910:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005912:	f8db 2090 	ldr.w	r2, [fp, #144]	; 0x90
 8005916:	f042 0204 	orr.w	r2, r2, #4
 800591a:	f8cb 2090 	str.w	r2, [fp, #144]	; 0x90
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800591e:	d40f      	bmi.n	8005940 <UART_RxISR_16BIT_FIFOEN+0xb8>
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005920:	f8db 3090 	ldr.w	r3, [fp, #144]	; 0x90
 8005924:	b9c3      	cbnz	r3, 8005958 <UART_RxISR_16BIT_FIFOEN+0xd0>
      if (huart->RxXferCount == 0U)
 8005926:	f8bb 305e 	ldrh.w	r3, [fp, #94]	; 0x5e
 800592a:	b29b      	uxth	r3, r3
 800592c:	b1f3      	cbz	r3, 800596c <UART_RxISR_16BIT_FIFOEN+0xe4>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800592e:	06a3      	lsls	r3, r4, #26
 8005930:	d547      	bpl.n	80059c2 <UART_RxISR_16BIT_FIFOEN+0x13a>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005932:	f8db 3000 	ldr.w	r3, [fp]
 8005936:	e7c7      	b.n	80058c8 <UART_RxISR_16BIT_FIFOEN+0x40>
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005938:	0762      	lsls	r2, r4, #29
 800593a:	d5f1      	bpl.n	8005920 <UART_RxISR_16BIT_FIFOEN+0x98>
 800593c:	07e8      	lsls	r0, r5, #31
 800593e:	d5ef      	bpl.n	8005920 <UART_RxISR_16BIT_FIFOEN+0x98>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005940:	2204      	movs	r2, #4
 8005942:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005944:	f8db 3090 	ldr.w	r3, [fp, #144]	; 0x90
 8005948:	f043 0302 	orr.w	r3, r3, #2
 800594c:	f8cb 3090 	str.w	r3, [fp, #144]	; 0x90
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005950:	f8db 3090 	ldr.w	r3, [fp, #144]	; 0x90
 8005954:	2b00      	cmp	r3, #0
 8005956:	d0e6      	beq.n	8005926 <UART_RxISR_16BIT_FIFOEN+0x9e>
          HAL_UART_ErrorCallback(huart);
 8005958:	4658      	mov	r0, fp
 800595a:	f7ff fc23 	bl	80051a4 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800595e:	f8cb 8090 	str.w	r8, [fp, #144]	; 0x90
      if (huart->RxXferCount == 0U)
 8005962:	f8bb 305e 	ldrh.w	r3, [fp, #94]	; 0x5e
 8005966:	b29b      	uxth	r3, r3
 8005968:	2b00      	cmp	r3, #0
 800596a:	d1e0      	bne.n	800592e <UART_RxISR_16BIT_FIFOEN+0xa6>
 800596c:	f8db 3000 	ldr.w	r3, [fp]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005970:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005974:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005978:	e843 2100 	strex	r1, r2, [r3]
 800597c:	2900      	cmp	r1, #0
 800597e:	d1f7      	bne.n	8005970 <UART_RxISR_16BIT_FIFOEN+0xe8>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005980:	f103 0208 	add.w	r2, r3, #8
 8005984:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005988:	ea02 0209 	and.w	r2, r2, r9
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800598c:	f103 0008 	add.w	r0, r3, #8
 8005990:	e840 2100 	strex	r1, r2, [r0]
 8005994:	2900      	cmp	r1, #0
 8005996:	d1f3      	bne.n	8005980 <UART_RxISR_16BIT_FIFOEN+0xf8>
        huart->RxState = HAL_UART_STATE_READY;
 8005998:	2220      	movs	r2, #32
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800599a:	42bb      	cmp	r3, r7
        huart->RxISR = NULL;
 800599c:	f8cb 1074 	str.w	r1, [fp, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80059a0:	f8cb 208c 	str.w	r2, [fp, #140]	; 0x8c
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80059a4:	f8cb 1070 	str.w	r1, [fp, #112]	; 0x70
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80059a8:	d002      	beq.n	80059b0 <UART_RxISR_16BIT_FIFOEN+0x128>
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80059aa:	685a      	ldr	r2, [r3, #4]
 80059ac:	0211      	lsls	r1, r2, #8
 80059ae:	d42d      	bmi.n	8005a0c <UART_RxISR_16BIT_FIFOEN+0x184>
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059b0:	f8db 206c 	ldr.w	r2, [fp, #108]	; 0x6c
 80059b4:	2a01      	cmp	r2, #1
 80059b6:	d03a      	beq.n	8005a2e <UART_RxISR_16BIT_FIFOEN+0x1a6>
          HAL_UART_RxCpltCallback(huart);
 80059b8:	4658      	mov	r0, fp
 80059ba:	f00b fb8b 	bl	80110d4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80059be:	06a3      	lsls	r3, r4, #26
 80059c0:	d4b7      	bmi.n	8005932 <UART_RxISR_16BIT_FIFOEN+0xaa>
    rxdatacount = huart->RxXferCount;
 80059c2:	f8bb 305e 	ldrh.w	r3, [fp, #94]	; 0x5e
 80059c6:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	f43f af6d 	beq.w	80058a8 <UART_RxISR_16BIT_FIFOEN+0x20>
 80059ce:	f8bb 2068 	ldrh.w	r2, [fp, #104]	; 0x68
 80059d2:	429a      	cmp	r2, r3
 80059d4:	f67f af68 	bls.w	80058a8 <UART_RxISR_16BIT_FIFOEN+0x20>
 80059d8:	f8db 3000 	ldr.w	r3, [fp]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059dc:	f103 0208 	add.w	r2, r3, #8
 80059e0:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80059e4:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059e8:	f103 0008 	add.w	r0, r3, #8
 80059ec:	e840 2100 	strex	r1, r2, [r0]
 80059f0:	2900      	cmp	r1, #0
 80059f2:	d1f3      	bne.n	80059dc <UART_RxISR_16BIT_FIFOEN+0x154>
      huart->RxISR = UART_RxISR_16BIT;
 80059f4:	4a1b      	ldr	r2, [pc, #108]	; (8005a64 <UART_RxISR_16BIT_FIFOEN+0x1dc>)
 80059f6:	f8cb 2074 	str.w	r2, [fp, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059fa:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80059fe:	f042 0220 	orr.w	r2, r2, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a02:	e843 2100 	strex	r1, r2, [r3]
 8005a06:	2900      	cmp	r1, #0
 8005a08:	d1f7      	bne.n	80059fa <UART_RxISR_16BIT_FIFOEN+0x172>
 8005a0a:	e74d      	b.n	80058a8 <UART_RxISR_16BIT_FIFOEN+0x20>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a0c:	e853 2f00 	ldrex	r2, [r3]
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005a10:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a14:	e843 2100 	strex	r1, r2, [r3]
 8005a18:	2900      	cmp	r1, #0
 8005a1a:	d0c9      	beq.n	80059b0 <UART_RxISR_16BIT_FIFOEN+0x128>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a1c:	e853 2f00 	ldrex	r2, [r3]
 8005a20:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a24:	e843 2100 	strex	r1, r2, [r3]
 8005a28:	2900      	cmp	r1, #0
 8005a2a:	d1ef      	bne.n	8005a0c <UART_RxISR_16BIT_FIFOEN+0x184>
 8005a2c:	e7c0      	b.n	80059b0 <UART_RxISR_16BIT_FIFOEN+0x128>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a2e:	f8cb 806c 	str.w	r8, [fp, #108]	; 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a32:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a36:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a3a:	e843 2100 	strex	r1, r2, [r3]
 8005a3e:	2900      	cmp	r1, #0
 8005a40:	d1f7      	bne.n	8005a32 <UART_RxISR_16BIT_FIFOEN+0x1aa>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005a42:	69da      	ldr	r2, [r3, #28]
 8005a44:	06d2      	lsls	r2, r2, #27
 8005a46:	d501      	bpl.n	8005a4c <UART_RxISR_16BIT_FIFOEN+0x1c4>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005a48:	2210      	movs	r2, #16
 8005a4a:	621a      	str	r2, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005a4c:	f8bb 105c 	ldrh.w	r1, [fp, #92]	; 0x5c
 8005a50:	4658      	mov	r0, fp
 8005a52:	f7ff fbb3 	bl	80051bc <HAL_UARTEx_RxEventCallback>
 8005a56:	e76a      	b.n	800592e <UART_RxISR_16BIT_FIFOEN+0xa6>
    rxdatacount = huart->RxXferCount;
 8005a58:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005a5c:	e724      	b.n	80058a8 <UART_RxISR_16BIT_FIFOEN+0x20>
 8005a5e:	bf00      	nop
 8005a60:	58000c00 	.word	0x58000c00
 8005a64:	080055c5 	.word	0x080055c5
 8005a68:	effffffe 	.word	0xeffffffe

08005a6c <UART_SetConfig>:
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005a6c:	6901      	ldr	r1, [r0, #16]
 8005a6e:	6882      	ldr	r2, [r0, #8]
  if (UART_INSTANCE_LOWPOWER(huart))
 8005a70:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005a72:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005a74:	49c0      	ldr	r1, [pc, #768]	; (8005d78 <UART_SetConfig+0x30c>)
{
 8005a76:	b530      	push	{r4, r5, lr}
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005a78:	6945      	ldr	r5, [r0, #20]
{
 8005a7a:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005a7c:	69c0      	ldr	r0, [r0, #28]
{
 8005a7e:	b087      	sub	sp, #28
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005a80:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005a82:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005a84:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005a86:	4029      	ands	r1, r5
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005a88:	4dbc      	ldr	r5, [pc, #752]	; (8005d7c <UART_SetConfig+0x310>)
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005a8a:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a8c:	68e1      	ldr	r1, [r4, #12]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005a8e:	42ab      	cmp	r3, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005a90:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a92:	685a      	ldr	r2, [r3, #4]
 8005a94:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8005a98:	ea42 0201 	orr.w	r2, r2, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005a9c:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a9e:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005aa0:	f000 80e0 	beq.w	8005c64 <UART_SetConfig+0x1f8>
    tmpreg |= huart->Init.OneBitSampling;
 8005aa4:	6a22      	ldr	r2, [r4, #32]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005aa6:	689d      	ldr	r5, [r3, #8]
    tmpreg |= huart->Init.OneBitSampling;
 8005aa8:	4311      	orrs	r1, r2
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005aaa:	4ab5      	ldr	r2, [pc, #724]	; (8005d80 <UART_SetConfig+0x314>)
 8005aac:	402a      	ands	r2, r5
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005aae:	6a65      	ldr	r5, [r4, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005ab0:	4311      	orrs	r1, r2
 8005ab2:	6099      	str	r1, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005ab4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ab6:	f022 020f 	bic.w	r2, r2, #15
 8005aba:	432a      	orrs	r2, r5
 8005abc:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005abe:	4ab1      	ldr	r2, [pc, #708]	; (8005d84 <UART_SetConfig+0x318>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d023      	beq.n	8005b0c <UART_SetConfig+0xa0>
 8005ac4:	4ab0      	ldr	r2, [pc, #704]	; (8005d88 <UART_SetConfig+0x31c>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d076      	beq.n	8005bb8 <UART_SetConfig+0x14c>
 8005aca:	4ab0      	ldr	r2, [pc, #704]	; (8005d8c <UART_SetConfig+0x320>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	f000 818f 	beq.w	8005df0 <UART_SetConfig+0x384>
 8005ad2:	4aaf      	ldr	r2, [pc, #700]	; (8005d90 <UART_SetConfig+0x324>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	f000 81e2 	beq.w	8005e9e <UART_SetConfig+0x432>
 8005ada:	4aae      	ldr	r2, [pc, #696]	; (8005d94 <UART_SetConfig+0x328>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	f000 8121 	beq.w	8005d24 <UART_SetConfig+0x2b8>
 8005ae2:	4aad      	ldr	r2, [pc, #692]	; (8005d98 <UART_SetConfig+0x32c>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	f000 81e4 	beq.w	8005eb2 <UART_SetConfig+0x446>
 8005aea:	4aac      	ldr	r2, [pc, #688]	; (8005d9c <UART_SetConfig+0x330>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	f000 823a 	beq.w	8005f66 <UART_SetConfig+0x4fa>
 8005af2:	4aab      	ldr	r2, [pc, #684]	; (8005da0 <UART_SetConfig+0x334>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	f000 81e8 	beq.w	8005eca <UART_SetConfig+0x45e>
        ret = HAL_ERROR;
 8005afa:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 8005afc:	2300      	movs	r3, #0
  huart->NbRxDataToProcess = 1;
 8005afe:	f04f 1201 	mov.w	r2, #65537	; 0x10001
  huart->RxISR = NULL;
 8005b02:	6763      	str	r3, [r4, #116]	; 0x74
  huart->NbRxDataToProcess = 1;
 8005b04:	66a2      	str	r2, [r4, #104]	; 0x68
  huart->TxISR = NULL;
 8005b06:	67a3      	str	r3, [r4, #120]	; 0x78
}
 8005b08:	b007      	add	sp, #28
 8005b0a:	bd30      	pop	{r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005b0c:	4ba5      	ldr	r3, [pc, #660]	; (8005da4 <UART_SetConfig+0x338>)
 8005b0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b10:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005b14:	2b28      	cmp	r3, #40	; 0x28
 8005b16:	d8f0      	bhi.n	8005afa <UART_SetConfig+0x8e>
 8005b18:	4aa3      	ldr	r2, [pc, #652]	; (8005da8 <UART_SetConfig+0x33c>)
 8005b1a:	5cd3      	ldrb	r3, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b1c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8005b20:	d055      	beq.n	8005bce <UART_SetConfig+0x162>
    switch (clocksource)
 8005b22:	2b20      	cmp	r3, #32
 8005b24:	f200 814a 	bhi.w	8005dbc <UART_SetConfig+0x350>
 8005b28:	2b20      	cmp	r3, #32
 8005b2a:	d8e6      	bhi.n	8005afa <UART_SetConfig+0x8e>
 8005b2c:	a201      	add	r2, pc, #4	; (adr r2, 8005b34 <UART_SetConfig+0xc8>)
 8005b2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b32:	bf00      	nop
 8005b34:	08005d73 	.word	0x08005d73
 8005b38:	08005d6d 	.word	0x08005d6d
 8005b3c:	08005afb 	.word	0x08005afb
 8005b40:	08005afb 	.word	0x08005afb
 8005b44:	08005d5d 	.word	0x08005d5d
 8005b48:	08005afb 	.word	0x08005afb
 8005b4c:	08005afb 	.word	0x08005afb
 8005b50:	08005afb 	.word	0x08005afb
 8005b54:	08005d4f 	.word	0x08005d4f
 8005b58:	08005afb 	.word	0x08005afb
 8005b5c:	08005afb 	.word	0x08005afb
 8005b60:	08005afb 	.word	0x08005afb
 8005b64:	08005afb 	.word	0x08005afb
 8005b68:	08005afb 	.word	0x08005afb
 8005b6c:	08005afb 	.word	0x08005afb
 8005b70:	08005afb 	.word	0x08005afb
 8005b74:	08005d39 	.word	0x08005d39
 8005b78:	08005afb 	.word	0x08005afb
 8005b7c:	08005afb 	.word	0x08005afb
 8005b80:	08005afb 	.word	0x08005afb
 8005b84:	08005afb 	.word	0x08005afb
 8005b88:	08005afb 	.word	0x08005afb
 8005b8c:	08005afb 	.word	0x08005afb
 8005b90:	08005afb 	.word	0x08005afb
 8005b94:	08005afb 	.word	0x08005afb
 8005b98:	08005afb 	.word	0x08005afb
 8005b9c:	08005afb 	.word	0x08005afb
 8005ba0:	08005afb 	.word	0x08005afb
 8005ba4:	08005afb 	.word	0x08005afb
 8005ba8:	08005afb 	.word	0x08005afb
 8005bac:	08005afb 	.word	0x08005afb
 8005bb0:	08005afb 	.word	0x08005afb
 8005bb4:	08005edf 	.word	0x08005edf
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005bb8:	4b7a      	ldr	r3, [pc, #488]	; (8005da4 <UART_SetConfig+0x338>)
 8005bba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bbc:	f003 0307 	and.w	r3, r3, #7
 8005bc0:	2b05      	cmp	r3, #5
 8005bc2:	d89a      	bhi.n	8005afa <UART_SetConfig+0x8e>
 8005bc4:	4a79      	ldr	r2, [pc, #484]	; (8005dac <UART_SetConfig+0x340>)
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005bc6:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8005bca:	5cd3      	ldrb	r3, [r2, r3]
 8005bcc:	d1a9      	bne.n	8005b22 <UART_SetConfig+0xb6>
    switch (clocksource)
 8005bce:	2b20      	cmp	r3, #32
 8005bd0:	f200 8146 	bhi.w	8005e60 <UART_SetConfig+0x3f4>
 8005bd4:	2b20      	cmp	r3, #32
 8005bd6:	d890      	bhi.n	8005afa <UART_SetConfig+0x8e>
 8005bd8:	a201      	add	r2, pc, #4	; (adr r2, 8005be0 <UART_SetConfig+0x174>)
 8005bda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bde:	bf00      	nop
 8005be0:	08005f53 	.word	0x08005f53
 8005be4:	08005f4d 	.word	0x08005f4d
 8005be8:	08005afb 	.word	0x08005afb
 8005bec:	08005afb 	.word	0x08005afb
 8005bf0:	08005f59 	.word	0x08005f59
 8005bf4:	08005afb 	.word	0x08005afb
 8005bf8:	08005afb 	.word	0x08005afb
 8005bfc:	08005afb 	.word	0x08005afb
 8005c00:	08005f3b 	.word	0x08005f3b
 8005c04:	08005afb 	.word	0x08005afb
 8005c08:	08005afb 	.word	0x08005afb
 8005c0c:	08005afb 	.word	0x08005afb
 8005c10:	08005afb 	.word	0x08005afb
 8005c14:	08005afb 	.word	0x08005afb
 8005c18:	08005afb 	.word	0x08005afb
 8005c1c:	08005afb 	.word	0x08005afb
 8005c20:	08005f27 	.word	0x08005f27
 8005c24:	08005afb 	.word	0x08005afb
 8005c28:	08005afb 	.word	0x08005afb
 8005c2c:	08005afb 	.word	0x08005afb
 8005c30:	08005afb 	.word	0x08005afb
 8005c34:	08005afb 	.word	0x08005afb
 8005c38:	08005afb 	.word	0x08005afb
 8005c3c:	08005afb 	.word	0x08005afb
 8005c40:	08005afb 	.word	0x08005afb
 8005c44:	08005afb 	.word	0x08005afb
 8005c48:	08005afb 	.word	0x08005afb
 8005c4c:	08005afb 	.word	0x08005afb
 8005c50:	08005afb 	.word	0x08005afb
 8005c54:	08005afb 	.word	0x08005afb
 8005c58:	08005afb 	.word	0x08005afb
 8005c5c:	08005afb 	.word	0x08005afb
 8005c60:	08005f63 	.word	0x08005f63
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005c64:	6898      	ldr	r0, [r3, #8]
 8005c66:	4a46      	ldr	r2, [pc, #280]	; (8005d80 <UART_SetConfig+0x314>)
 8005c68:	4002      	ands	r2, r0
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005c6a:	484e      	ldr	r0, [pc, #312]	; (8005da4 <UART_SetConfig+0x338>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005c6c:	430a      	orrs	r2, r1
 8005c6e:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005c70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c72:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005c74:	f022 020f 	bic.w	r2, r2, #15
 8005c78:	430a      	orrs	r2, r1
 8005c7a:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005c7c:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8005c7e:	f003 0307 	and.w	r3, r3, #7
 8005c82:	2b05      	cmp	r3, #5
 8005c84:	f63f af39 	bhi.w	8005afa <UART_SetConfig+0x8e>
 8005c88:	4a49      	ldr	r2, [pc, #292]	; (8005db0 <UART_SetConfig+0x344>)
 8005c8a:	5cd3      	ldrb	r3, [r2, r3]
    switch (clocksource)
 8005c8c:	2b20      	cmp	r3, #32
 8005c8e:	f200 80b9 	bhi.w	8005e04 <UART_SetConfig+0x398>
 8005c92:	2b01      	cmp	r3, #1
 8005c94:	f67f af31 	bls.w	8005afa <UART_SetConfig+0x8e>
 8005c98:	3b02      	subs	r3, #2
 8005c9a:	2b1e      	cmp	r3, #30
 8005c9c:	f63f af2d 	bhi.w	8005afa <UART_SetConfig+0x8e>
 8005ca0:	a201      	add	r2, pc, #4	; (adr r2, 8005ca8 <UART_SetConfig+0x23c>)
 8005ca2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ca6:	bf00      	nop
 8005ca8:	08005f17 	.word	0x08005f17
 8005cac:	08005afb 	.word	0x08005afb
 8005cb0:	08005f07 	.word	0x08005f07
 8005cb4:	08005afb 	.word	0x08005afb
 8005cb8:	08005afb 	.word	0x08005afb
 8005cbc:	08005afb 	.word	0x08005afb
 8005cc0:	08005ef7 	.word	0x08005ef7
 8005cc4:	08005afb 	.word	0x08005afb
 8005cc8:	08005afb 	.word	0x08005afb
 8005ccc:	08005afb 	.word	0x08005afb
 8005cd0:	08005afb 	.word	0x08005afb
 8005cd4:	08005afb 	.word	0x08005afb
 8005cd8:	08005afb 	.word	0x08005afb
 8005cdc:	08005afb 	.word	0x08005afb
 8005ce0:	08005ee3 	.word	0x08005ee3
 8005ce4:	08005afb 	.word	0x08005afb
 8005ce8:	08005afb 	.word	0x08005afb
 8005cec:	08005afb 	.word	0x08005afb
 8005cf0:	08005afb 	.word	0x08005afb
 8005cf4:	08005afb 	.word	0x08005afb
 8005cf8:	08005afb 	.word	0x08005afb
 8005cfc:	08005afb 	.word	0x08005afb
 8005d00:	08005afb 	.word	0x08005afb
 8005d04:	08005afb 	.word	0x08005afb
 8005d08:	08005afb 	.word	0x08005afb
 8005d0c:	08005afb 	.word	0x08005afb
 8005d10:	08005afb 	.word	0x08005afb
 8005d14:	08005afb 	.word	0x08005afb
 8005d18:	08005afb 	.word	0x08005afb
 8005d1c:	08005afb 	.word	0x08005afb
 8005d20:	08005f23 	.word	0x08005f23
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005d24:	4b1f      	ldr	r3, [pc, #124]	; (8005da4 <UART_SetConfig+0x338>)
 8005d26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d28:	f003 0307 	and.w	r3, r3, #7
 8005d2c:	2b05      	cmp	r3, #5
 8005d2e:	f63f aee4 	bhi.w	8005afa <UART_SetConfig+0x8e>
 8005d32:	4a20      	ldr	r2, [pc, #128]	; (8005db4 <UART_SetConfig+0x348>)
 8005d34:	5cd3      	ldrb	r3, [r2, r3]
 8005d36:	e6f1      	b.n	8005b1c <UART_SetConfig+0xb0>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005d38:	4b1a      	ldr	r3, [pc, #104]	; (8005da4 <UART_SetConfig+0x338>)
 8005d3a:	681a      	ldr	r2, [r3, #0]
 8005d3c:	0692      	lsls	r2, r2, #26
 8005d3e:	f140 80c2 	bpl.w	8005ec6 <UART_SetConfig+0x45a>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	481c      	ldr	r0, [pc, #112]	; (8005db8 <UART_SetConfig+0x34c>)
 8005d46:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8005d4a:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 8005d4c:	e03b      	b.n	8005dc6 <UART_SetConfig+0x35a>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005d4e:	a803      	add	r0, sp, #12
 8005d50:	f7fe ff62 	bl	8004c18 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005d54:	9804      	ldr	r0, [sp, #16]
    if (pclk != 0U)
 8005d56:	b938      	cbnz	r0, 8005d68 <UART_SetConfig+0x2fc>
        ret = HAL_ERROR;
 8005d58:	2000      	movs	r0, #0
 8005d5a:	e6cf      	b.n	8005afc <UART_SetConfig+0x90>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005d5c:	4668      	mov	r0, sp
 8005d5e:	f7fe feaf 	bl	8004ac0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005d62:	9801      	ldr	r0, [sp, #4]
    if (pclk != 0U)
 8005d64:	2800      	cmp	r0, #0
 8005d66:	d0f7      	beq.n	8005d58 <UART_SetConfig+0x2ec>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005d68:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8005d6a:	e02c      	b.n	8005dc6 <UART_SetConfig+0x35a>
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d6c:	f7fd ff64 	bl	8003c38 <HAL_RCC_GetPCLK2Freq>
        break;
 8005d70:	e7f1      	b.n	8005d56 <UART_SetConfig+0x2ea>
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d72:	f7fd ff4f 	bl	8003c14 <HAL_RCC_GetPCLK1Freq>
        break;
 8005d76:	e7ee      	b.n	8005d56 <UART_SetConfig+0x2ea>
 8005d78:	cfff69f3 	.word	0xcfff69f3
 8005d7c:	58000c00 	.word	0x58000c00
 8005d80:	11fff4ff 	.word	0x11fff4ff
 8005d84:	40011000 	.word	0x40011000
 8005d88:	40004400 	.word	0x40004400
 8005d8c:	40004800 	.word	0x40004800
 8005d90:	40004c00 	.word	0x40004c00
 8005d94:	40005000 	.word	0x40005000
 8005d98:	40011400 	.word	0x40011400
 8005d9c:	40007800 	.word	0x40007800
 8005da0:	40007c00 	.word	0x40007c00
 8005da4:	58024400 	.word	0x58024400
 8005da8:	080130a8 	.word	0x080130a8
 8005dac:	080130d4 	.word	0x080130d4
 8005db0:	080130dc 	.word	0x080130dc
 8005db4:	080130d4 	.word	0x080130d4
 8005db8:	03d09000 	.word	0x03d09000
    switch (clocksource)
 8005dbc:	2b40      	cmp	r3, #64	; 0x40
 8005dbe:	f47f ae9c 	bne.w	8005afa <UART_SetConfig+0x8e>
 8005dc2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005dc6:	4b6f      	ldr	r3, [pc, #444]	; (8005f84 <UART_SetConfig+0x518>)
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005dc8:	f64f 71ef 	movw	r1, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005dcc:	6862      	ldr	r2, [r4, #4]
 8005dce:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
 8005dd2:	fbb0 f3f3 	udiv	r3, r0, r3
 8005dd6:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8005dda:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005dde:	f1a3 0210 	sub.w	r2, r3, #16
 8005de2:	428a      	cmp	r2, r1
 8005de4:	f63f ae89 	bhi.w	8005afa <UART_SetConfig+0x8e>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005de8:	6822      	ldr	r2, [r4, #0]
 8005dea:	2000      	movs	r0, #0
 8005dec:	60d3      	str	r3, [r2, #12]
 8005dee:	e685      	b.n	8005afc <UART_SetConfig+0x90>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005df0:	4b65      	ldr	r3, [pc, #404]	; (8005f88 <UART_SetConfig+0x51c>)
 8005df2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005df4:	f003 0307 	and.w	r3, r3, #7
 8005df8:	2b05      	cmp	r3, #5
 8005dfa:	f63f ae7e 	bhi.w	8005afa <UART_SetConfig+0x8e>
 8005dfe:	4a63      	ldr	r2, [pc, #396]	; (8005f8c <UART_SetConfig+0x520>)
 8005e00:	5cd3      	ldrb	r3, [r2, r3]
 8005e02:	e68b      	b.n	8005b1c <UART_SetConfig+0xb0>
    switch (clocksource)
 8005e04:	2b40      	cmp	r3, #64	; 0x40
 8005e06:	f47f ae78 	bne.w	8005afa <UART_SetConfig+0x8e>
 8005e0a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005e0e:	4b5d      	ldr	r3, [pc, #372]	; (8005f84 <UART_SetConfig+0x518>)
 8005e10:	6a62      	ldr	r2, [r4, #36]	; 0x24
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005e12:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005e14:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005e18:	eb05 0145 	add.w	r1, r5, r5, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005e1c:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005e20:	4299      	cmp	r1, r3
 8005e22:	f63f ae6a 	bhi.w	8005afa <UART_SetConfig+0x8e>
 8005e26:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 8005e2a:	f63f ae66 	bhi.w	8005afa <UART_SetConfig+0x8e>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005e2e:	2300      	movs	r3, #0
 8005e30:	4619      	mov	r1, r3
 8005e32:	f7fa faad 	bl	8000390 <__aeabi_uldivmod>
 8005e36:	462a      	mov	r2, r5
 8005e38:	0209      	lsls	r1, r1, #8
 8005e3a:	0203      	lsls	r3, r0, #8
 8005e3c:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 8005e40:	0868      	lsrs	r0, r5, #1
 8005e42:	1818      	adds	r0, r3, r0
 8005e44:	f04f 0300 	mov.w	r3, #0
 8005e48:	f141 0100 	adc.w	r1, r1, #0
 8005e4c:	f7fa faa0 	bl	8000390 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005e50:	4a4f      	ldr	r2, [pc, #316]	; (8005f90 <UART_SetConfig+0x524>)
 8005e52:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005e56:	4603      	mov	r3, r0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005e58:	4291      	cmp	r1, r2
 8005e5a:	f63f ae4e 	bhi.w	8005afa <UART_SetConfig+0x8e>
 8005e5e:	e7c3      	b.n	8005de8 <UART_SetConfig+0x37c>
    switch (clocksource)
 8005e60:	2b40      	cmp	r3, #64	; 0x40
 8005e62:	f47f ae4a 	bne.w	8005afa <UART_SetConfig+0x8e>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005e66:	4b47      	ldr	r3, [pc, #284]	; (8005f84 <UART_SetConfig+0x518>)
 8005e68:	6862      	ldr	r2, [r4, #4]
 8005e6a:	f833 1015 	ldrh.w	r1, [r3, r5, lsl #1]
 8005e6e:	0853      	lsrs	r3, r2, #1
 8005e70:	fbb0 f0f1 	udiv	r0, r0, r1
 8005e74:	eb03 0340 	add.w	r3, r3, r0, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e78:	f64f 71ef 	movw	r1, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005e7c:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e80:	f1a3 0210 	sub.w	r2, r3, #16
 8005e84:	428a      	cmp	r2, r1
 8005e86:	f63f ae38 	bhi.w	8005afa <UART_SetConfig+0x8e>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005e8a:	f023 020f 	bic.w	r2, r3, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005e8e:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 8005e92:	6821      	ldr	r1, [r4, #0]
 8005e94:	2000      	movs	r0, #0
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005e96:	b292      	uxth	r2, r2
        huart->Instance->BRR = brrtemp;
 8005e98:	4313      	orrs	r3, r2
 8005e9a:	60cb      	str	r3, [r1, #12]
 8005e9c:	e62e      	b.n	8005afc <UART_SetConfig+0x90>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005e9e:	4b3a      	ldr	r3, [pc, #232]	; (8005f88 <UART_SetConfig+0x51c>)
 8005ea0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ea2:	f003 0307 	and.w	r3, r3, #7
 8005ea6:	2b05      	cmp	r3, #5
 8005ea8:	f63f ae27 	bhi.w	8005afa <UART_SetConfig+0x8e>
 8005eac:	4a39      	ldr	r2, [pc, #228]	; (8005f94 <UART_SetConfig+0x528>)
 8005eae:	5cd3      	ldrb	r3, [r2, r3]
 8005eb0:	e634      	b.n	8005b1c <UART_SetConfig+0xb0>
 8005eb2:	4b35      	ldr	r3, [pc, #212]	; (8005f88 <UART_SetConfig+0x51c>)
 8005eb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005eb6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005eba:	2b28      	cmp	r3, #40	; 0x28
 8005ebc:	f63f ae1d 	bhi.w	8005afa <UART_SetConfig+0x8e>
 8005ec0:	4a35      	ldr	r2, [pc, #212]	; (8005f98 <UART_SetConfig+0x52c>)
 8005ec2:	5cd3      	ldrb	r3, [r2, r3]
 8005ec4:	e62a      	b.n	8005b1c <UART_SetConfig+0xb0>
          pclk = (uint32_t) HSI_VALUE;
 8005ec6:	4835      	ldr	r0, [pc, #212]	; (8005f9c <UART_SetConfig+0x530>)
 8005ec8:	e77d      	b.n	8005dc6 <UART_SetConfig+0x35a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005eca:	4b2f      	ldr	r3, [pc, #188]	; (8005f88 <UART_SetConfig+0x51c>)
 8005ecc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ece:	f003 0307 	and.w	r3, r3, #7
 8005ed2:	2b05      	cmp	r3, #5
 8005ed4:	f63f ae11 	bhi.w	8005afa <UART_SetConfig+0x8e>
 8005ed8:	4a31      	ldr	r2, [pc, #196]	; (8005fa0 <UART_SetConfig+0x534>)
 8005eda:	5cd3      	ldrb	r3, [r2, r3]
 8005edc:	e61e      	b.n	8005b1c <UART_SetConfig+0xb0>
        pclk = (uint32_t) CSI_VALUE;
 8005ede:	4831      	ldr	r0, [pc, #196]	; (8005fa4 <UART_SetConfig+0x538>)
 8005ee0:	e771      	b.n	8005dc6 <UART_SetConfig+0x35a>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005ee2:	4b29      	ldr	r3, [pc, #164]	; (8005f88 <UART_SetConfig+0x51c>)
 8005ee4:	681a      	ldr	r2, [r3, #0]
 8005ee6:	0690      	lsls	r0, r2, #26
 8005ee8:	d547      	bpl.n	8005f7a <UART_SetConfig+0x50e>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	482b      	ldr	r0, [pc, #172]	; (8005f9c <UART_SetConfig+0x530>)
 8005eee:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8005ef2:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 8005ef4:	e78b      	b.n	8005e0e <UART_SetConfig+0x3a2>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005ef6:	a803      	add	r0, sp, #12
 8005ef8:	f7fe fe8e 	bl	8004c18 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005efc:	9804      	ldr	r0, [sp, #16]
    if (pclk != 0U)
 8005efe:	2800      	cmp	r0, #0
 8005f00:	f43f af2a 	beq.w	8005d58 <UART_SetConfig+0x2ec>
 8005f04:	e783      	b.n	8005e0e <UART_SetConfig+0x3a2>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005f06:	4668      	mov	r0, sp
 8005f08:	f7fe fdda 	bl	8004ac0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005f0c:	9801      	ldr	r0, [sp, #4]
    if (pclk != 0U)
 8005f0e:	2800      	cmp	r0, #0
 8005f10:	f43f af22 	beq.w	8005d58 <UART_SetConfig+0x2ec>
 8005f14:	e77b      	b.n	8005e0e <UART_SetConfig+0x3a2>
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005f16:	f7fe fdc1 	bl	8004a9c <HAL_RCCEx_GetD3PCLK1Freq>
    if (pclk != 0U)
 8005f1a:	2800      	cmp	r0, #0
 8005f1c:	f43f af1c 	beq.w	8005d58 <UART_SetConfig+0x2ec>
 8005f20:	e775      	b.n	8005e0e <UART_SetConfig+0x3a2>
        pclk = (uint32_t) CSI_VALUE;
 8005f22:	4820      	ldr	r0, [pc, #128]	; (8005fa4 <UART_SetConfig+0x538>)
 8005f24:	e773      	b.n	8005e0e <UART_SetConfig+0x3a2>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005f26:	4b18      	ldr	r3, [pc, #96]	; (8005f88 <UART_SetConfig+0x51c>)
 8005f28:	681a      	ldr	r2, [r3, #0]
 8005f2a:	0691      	lsls	r1, r2, #26
 8005f2c:	d527      	bpl.n	8005f7e <UART_SetConfig+0x512>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	481a      	ldr	r0, [pc, #104]	; (8005f9c <UART_SetConfig+0x530>)
 8005f32:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8005f36:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 8005f38:	e795      	b.n	8005e66 <UART_SetConfig+0x3fa>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005f3a:	a803      	add	r0, sp, #12
 8005f3c:	f7fe fe6c 	bl	8004c18 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005f40:	9804      	ldr	r0, [sp, #16]
    if (pclk != 0U)
 8005f42:	2800      	cmp	r0, #0
 8005f44:	f43f af08 	beq.w	8005d58 <UART_SetConfig+0x2ec>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005f48:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8005f4a:	e78c      	b.n	8005e66 <UART_SetConfig+0x3fa>
        pclk = HAL_RCC_GetPCLK2Freq();
 8005f4c:	f7fd fe74 	bl	8003c38 <HAL_RCC_GetPCLK2Freq>
        break;
 8005f50:	e7f7      	b.n	8005f42 <UART_SetConfig+0x4d6>
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f52:	f7fd fe5f 	bl	8003c14 <HAL_RCC_GetPCLK1Freq>
        break;
 8005f56:	e7f4      	b.n	8005f42 <UART_SetConfig+0x4d6>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005f58:	4668      	mov	r0, sp
 8005f5a:	f7fe fdb1 	bl	8004ac0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005f5e:	9801      	ldr	r0, [sp, #4]
        break;
 8005f60:	e7ef      	b.n	8005f42 <UART_SetConfig+0x4d6>
        pclk = (uint32_t) CSI_VALUE;
 8005f62:	4810      	ldr	r0, [pc, #64]	; (8005fa4 <UART_SetConfig+0x538>)
 8005f64:	e77f      	b.n	8005e66 <UART_SetConfig+0x3fa>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005f66:	4b08      	ldr	r3, [pc, #32]	; (8005f88 <UART_SetConfig+0x51c>)
 8005f68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f6a:	f003 0307 	and.w	r3, r3, #7
 8005f6e:	2b05      	cmp	r3, #5
 8005f70:	f63f adc3 	bhi.w	8005afa <UART_SetConfig+0x8e>
 8005f74:	4a0c      	ldr	r2, [pc, #48]	; (8005fa8 <UART_SetConfig+0x53c>)
 8005f76:	5cd3      	ldrb	r3, [r2, r3]
 8005f78:	e5d0      	b.n	8005b1c <UART_SetConfig+0xb0>
          pclk = (uint32_t) HSI_VALUE;
 8005f7a:	4808      	ldr	r0, [pc, #32]	; (8005f9c <UART_SetConfig+0x530>)
 8005f7c:	e747      	b.n	8005e0e <UART_SetConfig+0x3a2>
          pclk = (uint32_t) HSI_VALUE;
 8005f7e:	4807      	ldr	r0, [pc, #28]	; (8005f9c <UART_SetConfig+0x530>)
 8005f80:	e771      	b.n	8005e66 <UART_SetConfig+0x3fa>
 8005f82:	bf00      	nop
 8005f84:	080130e4 	.word	0x080130e4
 8005f88:	58024400 	.word	0x58024400
 8005f8c:	080130d4 	.word	0x080130d4
 8005f90:	000ffcff 	.word	0x000ffcff
 8005f94:	080130d4 	.word	0x080130d4
 8005f98:	080130a8 	.word	0x080130a8
 8005f9c:	03d09000 	.word	0x03d09000
 8005fa0:	080130d4 	.word	0x080130d4
 8005fa4:	003d0900 	.word	0x003d0900
 8005fa8:	080130d4 	.word	0x080130d4

08005fac <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005fac:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005fae:	07da      	lsls	r2, r3, #31
{
 8005fb0:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005fb2:	d506      	bpl.n	8005fc2 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005fb4:	6801      	ldr	r1, [r0, #0]
 8005fb6:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8005fb8:	684a      	ldr	r2, [r1, #4]
 8005fba:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8005fbe:	4322      	orrs	r2, r4
 8005fc0:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005fc2:	079c      	lsls	r4, r3, #30
 8005fc4:	d506      	bpl.n	8005fd4 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005fc6:	6801      	ldr	r1, [r0, #0]
 8005fc8:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8005fca:	684a      	ldr	r2, [r1, #4]
 8005fcc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005fd0:	4322      	orrs	r2, r4
 8005fd2:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005fd4:	0759      	lsls	r1, r3, #29
 8005fd6:	d506      	bpl.n	8005fe6 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005fd8:	6801      	ldr	r1, [r0, #0]
 8005fda:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8005fdc:	684a      	ldr	r2, [r1, #4]
 8005fde:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005fe2:	4322      	orrs	r2, r4
 8005fe4:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005fe6:	071a      	lsls	r2, r3, #28
 8005fe8:	d506      	bpl.n	8005ff8 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005fea:	6801      	ldr	r1, [r0, #0]
 8005fec:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8005fee:	684a      	ldr	r2, [r1, #4]
 8005ff0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005ff4:	4322      	orrs	r2, r4
 8005ff6:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005ff8:	06dc      	lsls	r4, r3, #27
 8005ffa:	d506      	bpl.n	800600a <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005ffc:	6801      	ldr	r1, [r0, #0]
 8005ffe:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8006000:	688a      	ldr	r2, [r1, #8]
 8006002:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006006:	4322      	orrs	r2, r4
 8006008:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800600a:	0699      	lsls	r1, r3, #26
 800600c:	d506      	bpl.n	800601c <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800600e:	6801      	ldr	r1, [r0, #0]
 8006010:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8006012:	688a      	ldr	r2, [r1, #8]
 8006014:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006018:	4322      	orrs	r2, r4
 800601a:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800601c:	065a      	lsls	r2, r3, #25
 800601e:	d50a      	bpl.n	8006036 <UART_AdvFeatureConfig+0x8a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006020:	6801      	ldr	r1, [r0, #0]
 8006022:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8006024:	684a      	ldr	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006026:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800602a:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800602e:	ea42 0204 	orr.w	r2, r2, r4
 8006032:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006034:	d00b      	beq.n	800604e <UART_AdvFeatureConfig+0xa2>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006036:	061b      	lsls	r3, r3, #24
 8006038:	d506      	bpl.n	8006048 <UART_AdvFeatureConfig+0x9c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800603a:	6802      	ldr	r2, [r0, #0]
 800603c:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 800603e:	6853      	ldr	r3, [r2, #4]
 8006040:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8006044:	430b      	orrs	r3, r1
 8006046:	6053      	str	r3, [r2, #4]
}
 8006048:	f85d 4b04 	ldr.w	r4, [sp], #4
 800604c:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800604e:	684a      	ldr	r2, [r1, #4]
 8006050:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8006052:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8006056:	4322      	orrs	r2, r4
 8006058:	604a      	str	r2, [r1, #4]
 800605a:	e7ec      	b.n	8006036 <UART_AdvFeatureConfig+0x8a>

0800605c <UART_WaitOnFlagUntilTimeout>:
{
 800605c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006060:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 8006064:	4681      	mov	r9, r0
 8006066:	460f      	mov	r7, r1
 8006068:	4616      	mov	r6, r2
 800606a:	469a      	mov	sl, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800606c:	6805      	ldr	r5, [r0, #0]
 800606e:	e002      	b.n	8006076 <UART_WaitOnFlagUntilTimeout+0x1a>
    if (Timeout != HAL_MAX_DELAY)
 8006070:	f1b8 3fff 	cmp.w	r8, #4294967295
 8006074:	d10b      	bne.n	800608e <UART_WaitOnFlagUntilTimeout+0x32>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006076:	69ec      	ldr	r4, [r5, #28]
 8006078:	ea37 0404 	bics.w	r4, r7, r4
 800607c:	bf0c      	ite	eq
 800607e:	2401      	moveq	r4, #1
 8006080:	2400      	movne	r4, #0
 8006082:	42b4      	cmp	r4, r6
 8006084:	d0f4      	beq.n	8006070 <UART_WaitOnFlagUntilTimeout+0x14>
  return HAL_OK;
 8006086:	2300      	movs	r3, #0
}
 8006088:	4618      	mov	r0, r3
 800608a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800608e:	f7fb fc99 	bl	80019c4 <HAL_GetTick>
 8006092:	eba0 000a 	sub.w	r0, r0, sl
 8006096:	fab8 f488 	clz	r4, r8
 800609a:	4540      	cmp	r0, r8
 800609c:	ea4f 1454 	mov.w	r4, r4, lsr #5
 80060a0:	d81b      	bhi.n	80060da <UART_WaitOnFlagUntilTimeout+0x7e>
 80060a2:	f1b8 0f00 	cmp.w	r8, #0
 80060a6:	d018      	beq.n	80060da <UART_WaitOnFlagUntilTimeout+0x7e>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80060a8:	f8d9 5000 	ldr.w	r5, [r9]
 80060ac:	682b      	ldr	r3, [r5, #0]
 80060ae:	075a      	lsls	r2, r3, #29
 80060b0:	d5e1      	bpl.n	8006076 <UART_WaitOnFlagUntilTimeout+0x1a>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80060b2:	69eb      	ldr	r3, [r5, #28]
 80060b4:	f013 0b08 	ands.w	fp, r3, #8
 80060b8:	d111      	bne.n	80060de <UART_WaitOnFlagUntilTimeout+0x82>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80060ba:	69eb      	ldr	r3, [r5, #28]
 80060bc:	051b      	lsls	r3, r3, #20
 80060be:	d5da      	bpl.n	8006076 <UART_WaitOnFlagUntilTimeout+0x1a>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80060c0:	f44f 6300 	mov.w	r3, #2048	; 0x800
          UART_EndRxTransfer(huart);
 80060c4:	4648      	mov	r0, r9
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80060c6:	622b      	str	r3, [r5, #32]
          UART_EndRxTransfer(huart);
 80060c8:	f7ff f834 	bl	8005134 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80060cc:	2220      	movs	r2, #32
          return HAL_TIMEOUT;
 80060ce:	2303      	movs	r3, #3
          __HAL_UNLOCK(huart);
 80060d0:	f889 b084 	strb.w	fp, [r9, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80060d4:	f8c9 2090 	str.w	r2, [r9, #144]	; 0x90
          return HAL_TIMEOUT;
 80060d8:	e7d6      	b.n	8006088 <UART_WaitOnFlagUntilTimeout+0x2c>
        return HAL_TIMEOUT;
 80060da:	2303      	movs	r3, #3
 80060dc:	e7d4      	b.n	8006088 <UART_WaitOnFlagUntilTimeout+0x2c>
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80060de:	2608      	movs	r6, #8
           UART_EndRxTransfer(huart);
 80060e0:	4648      	mov	r0, r9
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80060e2:	622e      	str	r6, [r5, #32]
           UART_EndRxTransfer(huart);
 80060e4:	f7ff f826 	bl	8005134 <UART_EndRxTransfer>
           return HAL_ERROR;
 80060e8:	2301      	movs	r3, #1
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80060ea:	f8c9 6090 	str.w	r6, [r9, #144]	; 0x90
           __HAL_UNLOCK(huart);
 80060ee:	f889 4084 	strb.w	r4, [r9, #132]	; 0x84
           return HAL_ERROR;
 80060f2:	e7c9      	b.n	8006088 <UART_WaitOnFlagUntilTimeout+0x2c>

080060f4 <HAL_UART_Transmit>:
{
 80060f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80060f8:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80060fa:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
{
 80060fe:	b083      	sub	sp, #12
  if (huart->gState == HAL_UART_STATE_READY)
 8006100:	2b20      	cmp	r3, #32
 8006102:	d141      	bne.n	8006188 <HAL_UART_Transmit+0x94>
    if ((pData == NULL) || (Size == 0U))
 8006104:	460d      	mov	r5, r1
 8006106:	2900      	cmp	r1, #0
 8006108:	d03a      	beq.n	8006180 <HAL_UART_Transmit+0x8c>
 800610a:	fab2 f982 	clz	r9, r2
 800610e:	4617      	mov	r7, r2
 8006110:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8006114:	b3a2      	cbz	r2, 8006180 <HAL_UART_Transmit+0x8c>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006116:	2321      	movs	r3, #33	; 0x21
 8006118:	4604      	mov	r4, r0
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800611a:	f8c0 9090 	str.w	r9, [r0, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800611e:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
    tickstart = HAL_GetTick();
 8006122:	f7fb fc4f 	bl	80019c4 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006126:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 8006128:	4680      	mov	r8, r0
    huart->TxXferSize  = Size;
 800612a:	f8a4 7054 	strh.w	r7, [r4, #84]	; 0x54
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800612e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferCount = Size;
 8006132:	f8a4 7056 	strh.w	r7, [r4, #86]	; 0x56
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006136:	d040      	beq.n	80061ba <HAL_UART_Transmit+0xc6>
    while (huart->TxXferCount > 0U)
 8006138:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
 800613c:	b29b      	uxth	r3, r3
 800613e:	b973      	cbnz	r3, 800615e <HAL_UART_Transmit+0x6a>
 8006140:	e026      	b.n	8006190 <HAL_UART_Transmit+0x9c>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006142:	f815 2b01 	ldrb.w	r2, [r5], #1
 8006146:	6823      	ldr	r3, [r4, #0]
 8006148:	629a      	str	r2, [r3, #40]	; 0x28
      huart->TxXferCount--;
 800614a:	f8b4 2056 	ldrh.w	r2, [r4, #86]	; 0x56
 800614e:	3a01      	subs	r2, #1
 8006150:	b292      	uxth	r2, r2
 8006152:	f8a4 2056 	strh.w	r2, [r4, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006156:	f8b4 2056 	ldrh.w	r2, [r4, #86]	; 0x56
 800615a:	b292      	uxth	r2, r2
 800615c:	b1c2      	cbz	r2, 8006190 <HAL_UART_Transmit+0x9c>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800615e:	4643      	mov	r3, r8
 8006160:	2200      	movs	r2, #0
 8006162:	2180      	movs	r1, #128	; 0x80
 8006164:	4620      	mov	r0, r4
 8006166:	9600      	str	r6, [sp, #0]
 8006168:	f7ff ff78 	bl	800605c <UART_WaitOnFlagUntilTimeout>
 800616c:	b9f0      	cbnz	r0, 80061ac <HAL_UART_Transmit+0xb8>
      if (pdata8bits == NULL)
 800616e:	2d00      	cmp	r5, #0
 8006170:	d1e7      	bne.n	8006142 <HAL_UART_Transmit+0x4e>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006172:	f839 3b02 	ldrh.w	r3, [r9], #2
 8006176:	6822      	ldr	r2, [r4, #0]
 8006178:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800617c:	6293      	str	r3, [r2, #40]	; 0x28
        pdata16bits++;
 800617e:	e7e4      	b.n	800614a <HAL_UART_Transmit+0x56>
      return  HAL_ERROR;
 8006180:	2001      	movs	r0, #1
}
 8006182:	b003      	add	sp, #12
 8006184:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return HAL_BUSY;
 8006188:	2002      	movs	r0, #2
}
 800618a:	b003      	add	sp, #12
 800618c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006190:	4643      	mov	r3, r8
 8006192:	2200      	movs	r2, #0
 8006194:	2140      	movs	r1, #64	; 0x40
 8006196:	4620      	mov	r0, r4
 8006198:	9600      	str	r6, [sp, #0]
 800619a:	f7ff ff5f 	bl	800605c <UART_WaitOnFlagUntilTimeout>
      huart->gState = HAL_UART_STATE_READY;
 800619e:	2320      	movs	r3, #32
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80061a0:	b988      	cbnz	r0, 80061c6 <HAL_UART_Transmit+0xd2>
    huart->gState = HAL_UART_STATE_READY;
 80061a2:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
}
 80061a6:	b003      	add	sp, #12
 80061a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        huart->gState = HAL_UART_STATE_READY;
 80061ac:	2320      	movs	r3, #32
        return HAL_TIMEOUT;
 80061ae:	2003      	movs	r0, #3
        huart->gState = HAL_UART_STATE_READY;
 80061b0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
}
 80061b4:	b003      	add	sp, #12
 80061b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061ba:	6923      	ldr	r3, [r4, #16]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d1bb      	bne.n	8006138 <HAL_UART_Transmit+0x44>
 80061c0:	46a9      	mov	r9, r5
      pdata8bits  = NULL;
 80061c2:	461d      	mov	r5, r3
 80061c4:	e7b8      	b.n	8006138 <HAL_UART_Transmit+0x44>
      return HAL_TIMEOUT;
 80061c6:	2003      	movs	r0, #3
      huart->gState = HAL_UART_STATE_READY;
 80061c8:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
      return HAL_TIMEOUT;
 80061cc:	e7d9      	b.n	8006182 <HAL_UART_Transmit+0x8e>
 80061ce:	bf00      	nop

080061d0 <UART_CheckIdleState>:
{
 80061d0:	b570      	push	{r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061d2:	2600      	movs	r6, #0
{
 80061d4:	4604      	mov	r4, r0
 80061d6:	b082      	sub	sp, #8
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061d8:	f8c0 6090 	str.w	r6, [r0, #144]	; 0x90
  tickstart = HAL_GetTick();
 80061dc:	f7fb fbf2 	bl	80019c4 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80061e0:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 80061e2:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80061e4:	681a      	ldr	r2, [r3, #0]
 80061e6:	0712      	lsls	r2, r2, #28
 80061e8:	d410      	bmi.n	800620c <UART_CheckIdleState+0x3c>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	075b      	lsls	r3, r3, #29
 80061ee:	d427      	bmi.n	8006240 <UART_CheckIdleState+0x70>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061f0:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 80061f2:	2220      	movs	r2, #32
  return HAL_OK;
 80061f4:	4618      	mov	r0, r3
  huart->gState = HAL_UART_STATE_READY;
 80061f6:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80061fa:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061fe:	66e3      	str	r3, [r4, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006200:	6723      	str	r3, [r4, #112]	; 0x70
      __HAL_UNLOCK(huart);
 8006202:	2300      	movs	r3, #0
 8006204:	f884 3084 	strb.w	r3, [r4, #132]	; 0x84
}
 8006208:	b002      	add	sp, #8
 800620a:	bd70      	pop	{r4, r5, r6, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800620c:	f06f 417e 	mvn.w	r1, #4261412864	; 0xfe000000
 8006210:	4603      	mov	r3, r0
 8006212:	4632      	mov	r2, r6
 8006214:	4620      	mov	r0, r4
 8006216:	9100      	str	r1, [sp, #0]
 8006218:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800621c:	f7ff ff1e 	bl	800605c <UART_WaitOnFlagUntilTimeout>
 8006220:	6823      	ldr	r3, [r4, #0]
 8006222:	2800      	cmp	r0, #0
 8006224:	d0e1      	beq.n	80061ea <UART_CheckIdleState+0x1a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006226:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800622a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800622e:	e843 2100 	strex	r1, r2, [r3]
 8006232:	2900      	cmp	r1, #0
 8006234:	d1f7      	bne.n	8006226 <UART_CheckIdleState+0x56>
      huart->gState = HAL_UART_STATE_READY;
 8006236:	2320      	movs	r3, #32
      return HAL_TIMEOUT;
 8006238:	2003      	movs	r0, #3
      huart->gState = HAL_UART_STATE_READY;
 800623a:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
      return HAL_TIMEOUT;
 800623e:	e7e0      	b.n	8006202 <UART_CheckIdleState+0x32>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006240:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
 8006244:	462b      	mov	r3, r5
 8006246:	2200      	movs	r2, #0
 8006248:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800624c:	9000      	str	r0, [sp, #0]
 800624e:	4620      	mov	r0, r4
 8006250:	f7ff ff04 	bl	800605c <UART_WaitOnFlagUntilTimeout>
 8006254:	2800      	cmp	r0, #0
 8006256:	d0cb      	beq.n	80061f0 <UART_CheckIdleState+0x20>
 8006258:	6823      	ldr	r3, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800625a:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800625e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006262:	e843 2100 	strex	r1, r2, [r3]
 8006266:	2900      	cmp	r1, #0
 8006268:	d1f7      	bne.n	800625a <UART_CheckIdleState+0x8a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800626a:	f103 0208 	add.w	r2, r3, #8
 800626e:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006272:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006276:	f103 0008 	add.w	r0, r3, #8
 800627a:	e840 2100 	strex	r1, r2, [r0]
 800627e:	2900      	cmp	r1, #0
 8006280:	d1f3      	bne.n	800626a <UART_CheckIdleState+0x9a>
      huart->RxState = HAL_UART_STATE_READY;
 8006282:	2320      	movs	r3, #32
      return HAL_TIMEOUT;
 8006284:	2003      	movs	r0, #3
      huart->RxState = HAL_UART_STATE_READY;
 8006286:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
      return HAL_TIMEOUT;
 800628a:	e7ba      	b.n	8006202 <UART_CheckIdleState+0x32>

0800628c <HAL_UART_Init>:
  if (huart == NULL)
 800628c:	b380      	cbz	r0, 80062f0 <HAL_UART_Init+0x64>
  if (huart->gState == HAL_UART_STATE_RESET)
 800628e:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
{
 8006292:	b510      	push	{r4, lr}
 8006294:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8006296:	b333      	cbz	r3, 80062e6 <HAL_UART_Init+0x5a>
  __HAL_UART_DISABLE(huart);
 8006298:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800629a:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 800629c:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 800629e:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  __HAL_UART_DISABLE(huart);
 80062a2:	6813      	ldr	r3, [r2, #0]
 80062a4:	f023 0301 	bic.w	r3, r3, #1
 80062a8:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80062aa:	f7ff fbdf 	bl	8005a6c <UART_SetConfig>
 80062ae:	2801      	cmp	r0, #1
 80062b0:	d017      	beq.n	80062e2 <HAL_UART_Init+0x56>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80062b2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80062b4:	b98b      	cbnz	r3, 80062da <HAL_UART_Init+0x4e>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80062b6:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 80062b8:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80062ba:	685a      	ldr	r2, [r3, #4]
 80062bc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80062c0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80062c2:	689a      	ldr	r2, [r3, #8]
 80062c4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80062c8:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80062ca:	681a      	ldr	r2, [r3, #0]
 80062cc:	f042 0201 	orr.w	r2, r2, #1
}
 80062d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 80062d4:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 80062d6:	f7ff bf7b 	b.w	80061d0 <UART_CheckIdleState>
    UART_AdvFeatureConfig(huart);
 80062da:	4620      	mov	r0, r4
 80062dc:	f7ff fe66 	bl	8005fac <UART_AdvFeatureConfig>
 80062e0:	e7e9      	b.n	80062b6 <HAL_UART_Init+0x2a>
}
 80062e2:	2001      	movs	r0, #1
 80062e4:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 80062e6:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
    HAL_UART_MspInit(huart);
 80062ea:	f7fb f8c7 	bl	800147c <HAL_UART_MspInit>
 80062ee:	e7d3      	b.n	8006298 <HAL_UART_Init+0xc>
}
 80062f0:	2001      	movs	r0, #1
 80062f2:	4770      	bx	lr

080062f4 <UART_Start_Receive_IT>:
{
 80062f4:	b410      	push	{r4}
  UART_MASK_COMPUTATION(huart);
 80062f6:	6884      	ldr	r4, [r0, #8]
  huart->RxISR       = NULL;
 80062f8:	2300      	movs	r3, #0
  huart->pRxBuffPtr  = pData;
 80062fa:	6581      	str	r1, [r0, #88]	; 0x58
  UART_MASK_COMPUTATION(huart);
 80062fc:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  huart->RxXferSize  = Size;
 8006300:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
  huart->RxXferCount = Size;
 8006304:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
  huart->RxISR       = NULL;
 8006308:	6743      	str	r3, [r0, #116]	; 0x74
  UART_MASK_COMPUTATION(huart);
 800630a:	d052      	beq.n	80063b2 <UART_Start_Receive_IT+0xbe>
 800630c:	2c00      	cmp	r4, #0
 800630e:	d131      	bne.n	8006374 <UART_Start_Receive_IT+0x80>
 8006310:	6903      	ldr	r3, [r0, #16]
 8006312:	2b00      	cmp	r3, #0
 8006314:	bf14      	ite	ne
 8006316:	237f      	movne	r3, #127	; 0x7f
 8006318:	23ff      	moveq	r3, #255	; 0xff
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800631a:	2100      	movs	r1, #0
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800631c:	2422      	movs	r4, #34	; 0x22
  UART_MASK_COMPUTATION(huart);
 800631e:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006322:	f8c0 1090 	str.w	r1, [r0, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006326:	6801      	ldr	r1, [r0, #0]
 8006328:	f8c0 408c 	str.w	r4, [r0, #140]	; 0x8c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800632c:	f101 0308 	add.w	r3, r1, #8
 8006330:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006334:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006338:	f101 0c08 	add.w	ip, r1, #8
 800633c:	e84c 3400 	strex	r4, r3, [ip]
 8006340:	2c00      	cmp	r4, #0
 8006342:	d1f3      	bne.n	800632c <UART_Start_Receive_IT+0x38>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006344:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8006346:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800634a:	d039      	beq.n	80063c0 <UART_Start_Receive_IT+0xcc>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800634c:	6883      	ldr	r3, [r0, #8]
 800634e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006352:	d018      	beq.n	8006386 <UART_Start_Receive_IT+0x92>
 8006354:	4a30      	ldr	r2, [pc, #192]	; (8006418 <UART_Start_Receive_IT+0x124>)
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006356:	6903      	ldr	r3, [r0, #16]
      huart->RxISR = UART_RxISR_8BIT;
 8006358:	6742      	str	r2, [r0, #116]	; 0x74
    if (huart->Init.Parity != UART_PARITY_NONE)
 800635a:	b1cb      	cbz	r3, 8006390 <UART_Start_Receive_IT+0x9c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800635c:	e851 3f00 	ldrex	r3, [r1]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8006360:	f443 7390 	orr.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006364:	e841 3200 	strex	r2, r3, [r1]
 8006368:	2a00      	cmp	r2, #0
 800636a:	d1f7      	bne.n	800635c <UART_Start_Receive_IT+0x68>
}
 800636c:	2000      	movs	r0, #0
 800636e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006372:	4770      	bx	lr
  UART_MASK_COMPUTATION(huart);
 8006374:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
 8006378:	d1cf      	bne.n	800631a <UART_Start_Receive_IT+0x26>
 800637a:	6903      	ldr	r3, [r0, #16]
 800637c:	2b00      	cmp	r3, #0
 800637e:	bf0c      	ite	eq
 8006380:	237f      	moveq	r3, #127	; 0x7f
 8006382:	233f      	movne	r3, #63	; 0x3f
 8006384:	e7c9      	b.n	800631a <UART_Start_Receive_IT+0x26>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006386:	6903      	ldr	r3, [r0, #16]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d13a      	bne.n	8006402 <UART_Start_Receive_IT+0x10e>
 800638c:	4b23      	ldr	r3, [pc, #140]	; (800641c <UART_Start_Receive_IT+0x128>)
 800638e:	6743      	str	r3, [r0, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006390:	e851 3f00 	ldrex	r3, [r1]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006394:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006398:	e841 3200 	strex	r2, r3, [r1]
 800639c:	2a00      	cmp	r2, #0
 800639e:	d0e5      	beq.n	800636c <UART_Start_Receive_IT+0x78>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063a0:	e851 3f00 	ldrex	r3, [r1]
 80063a4:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063a8:	e841 3200 	strex	r2, r3, [r1]
 80063ac:	2a00      	cmp	r2, #0
 80063ae:	d1ef      	bne.n	8006390 <UART_Start_Receive_IT+0x9c>
 80063b0:	e7dc      	b.n	800636c <UART_Start_Receive_IT+0x78>
  UART_MASK_COMPUTATION(huart);
 80063b2:	6901      	ldr	r1, [r0, #16]
 80063b4:	f240 13ff 	movw	r3, #511	; 0x1ff
 80063b8:	2900      	cmp	r1, #0
 80063ba:	bf18      	it	ne
 80063bc:	23ff      	movne	r3, #255	; 0xff
 80063be:	e7ac      	b.n	800631a <UART_Start_Receive_IT+0x26>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80063c0:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d8c1      	bhi.n	800634c <UART_Start_Receive_IT+0x58>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063c8:	6883      	ldr	r3, [r0, #8]
 80063ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063ce:	d01b      	beq.n	8006408 <UART_Start_Receive_IT+0x114>
 80063d0:	4a13      	ldr	r2, [pc, #76]	; (8006420 <UART_Start_Receive_IT+0x12c>)
 80063d2:	6903      	ldr	r3, [r0, #16]
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80063d4:	6742      	str	r2, [r0, #116]	; 0x74
    if (huart->Init.Parity != UART_PARITY_NONE)
 80063d6:	b13b      	cbz	r3, 80063e8 <UART_Start_Receive_IT+0xf4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063d8:	e851 3f00 	ldrex	r3, [r1]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80063dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063e0:	e841 3200 	strex	r2, r3, [r1]
 80063e4:	2a00      	cmp	r2, #0
 80063e6:	d1f7      	bne.n	80063d8 <UART_Start_Receive_IT+0xe4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063e8:	f101 0308 	add.w	r3, r1, #8
 80063ec:	e853 3f00 	ldrex	r3, [r3]
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80063f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063f4:	f101 0008 	add.w	r0, r1, #8
 80063f8:	e840 3200 	strex	r2, r3, [r0]
 80063fc:	2a00      	cmp	r2, #0
 80063fe:	d1f3      	bne.n	80063e8 <UART_Start_Receive_IT+0xf4>
 8006400:	e7b4      	b.n	800636c <UART_Start_Receive_IT+0x78>
      huart->RxISR = UART_RxISR_8BIT;
 8006402:	4b05      	ldr	r3, [pc, #20]	; (8006418 <UART_Start_Receive_IT+0x124>)
 8006404:	6743      	str	r3, [r0, #116]	; 0x74
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006406:	e7a9      	b.n	800635c <UART_Start_Receive_IT+0x68>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006408:	6903      	ldr	r3, [r0, #16]
 800640a:	b913      	cbnz	r3, 8006412 <UART_Start_Receive_IT+0x11e>
 800640c:	4b05      	ldr	r3, [pc, #20]	; (8006424 <UART_Start_Receive_IT+0x130>)
 800640e:	6743      	str	r3, [r0, #116]	; 0x74
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006410:	e7ea      	b.n	80063e8 <UART_Start_Receive_IT+0xf4>
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8006412:	4b03      	ldr	r3, [pc, #12]	; (8006420 <UART_Start_Receive_IT+0x12c>)
 8006414:	6743      	str	r3, [r0, #116]	; 0x74
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006416:	e7df      	b.n	80063d8 <UART_Start_Receive_IT+0xe4>
 8006418:	080054e9 	.word	0x080054e9
 800641c:	080055c5 	.word	0x080055c5
 8006420:	0800569d 	.word	0x0800569d
 8006424:	08005889 	.word	0x08005889

08006428 <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8006428:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 800642c:	2b20      	cmp	r3, #32
 800642e:	d11a      	bne.n	8006466 <HAL_UART_Receive_IT+0x3e>
    if ((pData == NULL) || (Size == 0U))
 8006430:	b1b9      	cbz	r1, 8006462 <HAL_UART_Receive_IT+0x3a>
 8006432:	fab2 f382 	clz	r3, r2
 8006436:	095b      	lsrs	r3, r3, #5
 8006438:	b19a      	cbz	r2, 8006462 <HAL_UART_Receive_IT+0x3a>
{
 800643a:	b430      	push	{r4, r5}
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800643c:	6804      	ldr	r4, [r0, #0]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800643e:	66c3      	str	r3, [r0, #108]	; 0x6c
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006440:	4b0a      	ldr	r3, [pc, #40]	; (800646c <HAL_UART_Receive_IT+0x44>)
 8006442:	429c      	cmp	r4, r3
 8006444:	d00a      	beq.n	800645c <HAL_UART_Receive_IT+0x34>
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006446:	6863      	ldr	r3, [r4, #4]
 8006448:	021b      	lsls	r3, r3, #8
 800644a:	d507      	bpl.n	800645c <HAL_UART_Receive_IT+0x34>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800644c:	e854 3f00 	ldrex	r3, [r4]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006450:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006454:	e844 3500 	strex	r5, r3, [r4]
 8006458:	2d00      	cmp	r5, #0
 800645a:	d1f7      	bne.n	800644c <HAL_UART_Receive_IT+0x24>
}
 800645c:	bc30      	pop	{r4, r5}
    return (UART_Start_Receive_IT(huart, pData, Size));
 800645e:	f7ff bf49 	b.w	80062f4 <UART_Start_Receive_IT>
      return HAL_ERROR;
 8006462:	2001      	movs	r0, #1
}
 8006464:	4770      	bx	lr
    return HAL_BUSY;
 8006466:	2002      	movs	r0, #2
 8006468:	4770      	bx	lr
 800646a:	bf00      	nop
 800646c:	58000c00 	.word	0x58000c00

08006470 <HAL_RS485Ex_Init>:
                                   uint32_t DeassertionTime)
{
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 8006470:	2800      	cmp	r0, #0
 8006472:	d03c      	beq.n	80064ee <HAL_RS485Ex_Init+0x7e>
{
 8006474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006476:	461d      	mov	r5, r3
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006478:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 800647c:	460e      	mov	r6, r1
 800647e:	4617      	mov	r7, r2
 8006480:	4604      	mov	r4, r0
 8006482:	b37b      	cbz	r3, 80064e4 <HAL_RS485Ex_Init+0x74>
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8006484:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8006486:	2324      	movs	r3, #36	; 0x24

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006488:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 800648a:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  __HAL_UART_DISABLE(huart);
 800648e:	6813      	ldr	r3, [r2, #0]
 8006490:	f023 0301 	bic.w	r3, r3, #1
 8006494:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006496:	f7ff fae9 	bl	8005a6c <UART_SetConfig>
 800649a:	2801      	cmp	r0, #1
 800649c:	d020      	beq.n	80064e0 <HAL_RS485Ex_Init+0x70>
  {
    return HAL_ERROR;
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800649e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80064a0:	b9d3      	cbnz	r3, 80064d8 <HAL_RS485Ex_Init+0x68>
  {
    UART_AdvFeatureConfig(huart);
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 80064a2:	6823      	ldr	r3, [r4, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80064a4:	4620      	mov	r0, r4
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 80064a6:	042d      	lsls	r5, r5, #16
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 80064a8:	6899      	ldr	r1, [r3, #8]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 80064aa:	ea45 5247 	orr.w	r2, r5, r7, lsl #21
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 80064ae:	4d11      	ldr	r5, [pc, #68]	; (80064f4 <HAL_RS485Ex_Init+0x84>)
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 80064b0:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 80064b4:	6099      	str	r1, [r3, #8]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 80064b6:	689c      	ldr	r4, [r3, #8]
 80064b8:	f424 4400 	bic.w	r4, r4, #32768	; 0x8000
 80064bc:	4334      	orrs	r4, r6
 80064be:	609c      	str	r4, [r3, #8]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 80064c0:	6819      	ldr	r1, [r3, #0]
 80064c2:	400d      	ands	r5, r1
 80064c4:	4315      	orrs	r5, r2
 80064c6:	601d      	str	r5, [r3, #0]
  __HAL_UART_ENABLE(huart);
 80064c8:	681a      	ldr	r2, [r3, #0]
 80064ca:	f042 0201 	orr.w	r2, r2, #1
 80064ce:	601a      	str	r2, [r3, #0]
}
 80064d0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return (UART_CheckIdleState(huart));
 80064d4:	f7ff be7c 	b.w	80061d0 <UART_CheckIdleState>
    UART_AdvFeatureConfig(huart);
 80064d8:	4620      	mov	r0, r4
 80064da:	f7ff fd67 	bl	8005fac <UART_AdvFeatureConfig>
 80064de:	e7e0      	b.n	80064a2 <HAL_RS485Ex_Init+0x32>
}
 80064e0:	2001      	movs	r0, #1
 80064e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    huart->Lock = HAL_UNLOCKED;
 80064e4:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
    HAL_UART_MspInit(huart);
 80064e8:	f7fa ffc8 	bl	800147c <HAL_UART_MspInit>
 80064ec:	e7ca      	b.n	8006484 <HAL_RS485Ex_Init+0x14>
}
 80064ee:	2001      	movs	r0, #1
 80064f0:	4770      	bx	lr
 80064f2:	bf00      	nop
 80064f4:	fc00ffff 	.word	0xfc00ffff

080064f8 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80064f8:	4770      	bx	lr
 80064fa:	bf00      	nop

080064fc <HAL_UARTEx_RxFifoFullCallback>:
 80064fc:	4770      	bx	lr
 80064fe:	bf00      	nop

08006500 <HAL_UARTEx_TxFifoEmptyCallback>:
 8006500:	4770      	bx	lr
 8006502:	bf00      	nop

08006504 <ethernet_link_status_updated>:
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8006504:	4770      	bx	lr
 8006506:	bf00      	nop

08006508 <MX_LWIP_Init>:
{
 8006508:	b5f0      	push	{r4, r5, r6, r7, lr}
  IP_ADDRESS[0] = 192;
 800650a:	4b25      	ldr	r3, [pc, #148]	; (80065a0 <MX_LWIP_Init+0x98>)
  GATEWAY_ADDRESS[0] = 0;
 800650c:	2400      	movs	r4, #0
  IP_ADDRESS[0] = 192;
 800650e:	4f25      	ldr	r7, [pc, #148]	; (80065a4 <MX_LWIP_Init+0x9c>)
{
 8006510:	b085      	sub	sp, #20
  NETMASK_ADDRESS[0] = 255;
 8006512:	4e25      	ldr	r6, [pc, #148]	; (80065a8 <MX_LWIP_Init+0xa0>)
	tcpip_init(tcpip_init_done, arg);
 8006514:	4621      	mov	r1, r4
  GATEWAY_ADDRESS[0] = 0;
 8006516:	4d25      	ldr	r5, [pc, #148]	; (80065ac <MX_LWIP_Init+0xa4>)
	tcpip_init(tcpip_init_done, arg);
 8006518:	4620      	mov	r0, r4
  IP_ADDRESS[0] = 192;
 800651a:	603b      	str	r3, [r7, #0]
  NETMASK_ADDRESS[0] = 255;
 800651c:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
  GATEWAY_ADDRESS[0] = 0;
 8006520:	602c      	str	r4, [r5, #0]
  NETMASK_ADDRESS[0] = 255;
 8006522:	6033      	str	r3, [r6, #0]
	tcpip_init(tcpip_init_done, arg);
 8006524:	f003 f896 	bl	8009654 <tcpip_init>
	LOCK_TCPIP_CORE();
 8006528:	f000 fb20 	bl	8006b6c <sys_lock_tcpip_core>
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800652c:	4920      	ldr	r1, [pc, #128]	; (80065b0 <MX_LWIP_Init+0xa8>)
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800652e:	4a21      	ldr	r2, [pc, #132]	; (80065b4 <MX_LWIP_Init+0xac>)
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8006530:	683b      	ldr	r3, [r7, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8006532:	6830      	ldr	r0, [r6, #0]
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8006534:	9400      	str	r4, [sp, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8006536:	6010      	str	r0, [r2, #0]
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8006538:	600b      	str	r3, [r1, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800653a:	6828      	ldr	r0, [r5, #0]
 800653c:	4b1e      	ldr	r3, [pc, #120]	; (80065b8 <MX_LWIP_Init+0xb0>)
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800653e:	4c1f      	ldr	r4, [pc, #124]	; (80065bc <MX_LWIP_Init+0xb4>)
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8006540:	6018      	str	r0, [r3, #0]
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8006542:	481f      	ldr	r0, [pc, #124]	; (80065c0 <MX_LWIP_Init+0xb8>)
 8006544:	9002      	str	r0, [sp, #8]
 8006546:	481f      	ldr	r0, [pc, #124]	; (80065c4 <MX_LWIP_Init+0xbc>)
 8006548:	9001      	str	r0, [sp, #4]
 800654a:	4620      	mov	r0, r4
 800654c:	f003 fd5c 	bl	800a008 <netif_add>
  netif_set_default(&gnetif);
 8006550:	4620      	mov	r0, r4
 8006552:	f003 fe0f 	bl	800a174 <netif_set_default>
  if (netif_is_link_up(&gnetif))
 8006556:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
    netif_set_up(&gnetif);
 800655a:	4620      	mov	r0, r4
  if (netif_is_link_up(&gnetif))
 800655c:	075b      	lsls	r3, r3, #29
 800655e:	d51c      	bpl.n	800659a <MX_LWIP_Init+0x92>
    netif_set_up(&gnetif);
 8006560:	f003 fe12 	bl	800a188 <netif_set_up>
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8006564:	4c18      	ldr	r4, [pc, #96]	; (80065c8 <MX_LWIP_Init+0xc0>)
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8006566:	4919      	ldr	r1, [pc, #100]	; (80065cc <MX_LWIP_Init+0xc4>)
 8006568:	4814      	ldr	r0, [pc, #80]	; (80065bc <MX_LWIP_Init+0xb4>)
 800656a:	f003 fea1 	bl	800a2b0 <netif_set_link_callback>
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 800656e:	2220      	movs	r2, #32
 8006570:	2100      	movs	r1, #0
 8006572:	1d20      	adds	r0, r4, #4
 8006574:	f00b f9f6 	bl	8011964 <memset>
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8006578:	f44f 6180 	mov.w	r1, #1024	; 0x400
  attributes.name = "EthLink";
 800657c:	4814      	ldr	r0, [pc, #80]	; (80065d0 <MX_LWIP_Init+0xc8>)
  attributes.priority = osPriorityBelowNormal;
 800657e:	2310      	movs	r3, #16
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8006580:	6161      	str	r1, [r4, #20]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 8006582:	4622      	mov	r2, r4
 8006584:	490d      	ldr	r1, [pc, #52]	; (80065bc <MX_LWIP_Init+0xb4>)
  attributes.name = "EthLink";
 8006586:	6020      	str	r0, [r4, #0]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 8006588:	4812      	ldr	r0, [pc, #72]	; (80065d4 <MX_LWIP_Init+0xcc>)
  attributes.priority = osPriorityBelowNormal;
 800658a:	61a3      	str	r3, [r4, #24]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 800658c:	f000 fbf2 	bl	8006d74 <osThreadNew>
}
 8006590:	b005      	add	sp, #20
 8006592:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  UNLOCK_TCPIP_CORE();
 8006596:	f000 bb67 	b.w	8006c68 <sys_unlock_tcpip_core>
    netif_set_down(&gnetif);
 800659a:	f003 fe19 	bl	800a1d0 <netif_set_down>
 800659e:	e7e1      	b.n	8006564 <MX_LWIP_Init+0x5c>
 80065a0:	0a01a8c0 	.word	0x0a01a8c0
 80065a4:	24000138 	.word	0x24000138
 80065a8:	2400013c 	.word	0x2400013c
 80065ac:	24000134 	.word	0x24000134
 80065b0:	2400019c 	.word	0x2400019c
 80065b4:	240001a0 	.word	0x240001a0
 80065b8:	24000198 	.word	0x24000198
 80065bc:	24000164 	.word	0x24000164
 80065c0:	080095d5 	.word	0x080095d5
 80065c4:	08006799 	.word	0x08006799
 80065c8:	24000140 	.word	0x24000140
 80065cc:	08006505 	.word	0x08006505
 80065d0:	080130fc 	.word	0x080130fc
 80065d4:	08006b89 	.word	0x08006b89

080065d8 <ETH_PHY_IO_DeInit>:
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
  return 0;
}
 80065d8:	2000      	movs	r0, #0
 80065da:	4770      	bx	lr

080065dc <low_level_output>:
{
 80065dc:	b570      	push	{r4, r5, r6, lr}
 80065de:	b08c      	sub	sp, #48	; 0x30
 80065e0:	460c      	mov	r4, r1
  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 80065e2:	2230      	movs	r2, #48	; 0x30
 80065e4:	2100      	movs	r1, #0
 80065e6:	4668      	mov	r0, sp
 80065e8:	f00b f9bc 	bl	8011964 <memset>
  for(q = p; q != NULL; q = q->next)
 80065ec:	b1fc      	cbz	r4, 800662e <low_level_output+0x52>
    Txbuffer[i].len = q->len;
 80065ee:	8962      	ldrh	r2, [r4, #10]
 80065f0:	466b      	mov	r3, sp
    Txbuffer[i].buffer = q->payload;
 80065f2:	6861      	ldr	r1, [r4, #4]
  uint32_t i = 0U;
 80065f4:	f04f 0c00 	mov.w	ip, #0
    if(i >= ETH_TX_DESC_CNT)
 80065f8:	330c      	adds	r3, #12
    Txbuffer[i].len = q->len;
 80065fa:	e9cd 1200 	strd	r1, r2, [sp]
 80065fe:	4622      	mov	r2, r4
    if(q->next == NULL)
 8006600:	6812      	ldr	r2, [r2, #0]
 8006602:	b16a      	cbz	r2, 8006620 <low_level_output+0x44>
    i++;
 8006604:	f10c 0c01 	add.w	ip, ip, #1
    if(i >= ETH_TX_DESC_CNT)
 8006608:	f1bc 0f04 	cmp.w	ip, #4
 800660c:	d02b      	beq.n	8006666 <low_level_output+0x8a>
    Txbuffer[i].buffer = q->payload;
 800660e:	6850      	ldr	r0, [r2, #4]
    Txbuffer[i].len = q->len;
 8006610:	8951      	ldrh	r1, [r2, #10]
    if(q->next == NULL)
 8006612:	6812      	ldr	r2, [r2, #0]
    Txbuffer[i].len = q->len;
 8006614:	6059      	str	r1, [r3, #4]
    Txbuffer[i].buffer = q->payload;
 8006616:	e943 3001 	strd	r3, r0, [r3, #-4]
    if(i >= ETH_TX_DESC_CNT)
 800661a:	330c      	adds	r3, #12
    if(q->next == NULL)
 800661c:	2a00      	cmp	r2, #0
 800661e:	d1f1      	bne.n	8006604 <low_level_output+0x28>
      Txbuffer[i].next = NULL;
 8006620:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8006624:	ab0c      	add	r3, sp, #48	; 0x30
 8006626:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 800662a:	f84c 2c28 	str.w	r2, [ip, #-40]
  TxConfig.Length = p->tot_len;
 800662e:	4e10      	ldr	r6, [pc, #64]	; (8006670 <low_level_output+0x94>)
  pbuf_ref(p);
 8006630:	4620      	mov	r0, r4
  TxConfig.Length = p->tot_len;
 8006632:	8923      	ldrh	r3, [r4, #8]
  TxConfig.TxBuffer = Txbuffer;
 8006634:	f8c6 d008 	str.w	sp, [r6, #8]
  TxConfig.Length = p->tot_len;
 8006638:	6073      	str	r3, [r6, #4]
  TxConfig.pData = p;
 800663a:	6374      	str	r4, [r6, #52]	; 0x34
  pbuf_ref(p);
 800663c:	f004 f974 	bl	800a928 <pbuf_ref>
  HAL_ETH_Transmit_IT(&heth, &TxConfig);
 8006640:	4631      	mov	r1, r6
 8006642:	480c      	ldr	r0, [pc, #48]	; (8006674 <low_level_output+0x98>)
 8006644:	4d0c      	ldr	r5, [pc, #48]	; (8006678 <low_level_output+0x9c>)
 8006646:	f7fc f851 	bl	80026ec <HAL_ETH_Transmit_IT>
  while(osSemaphoreAcquire(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 800664a:	f04f 31ff 	mov.w	r1, #4294967295
 800664e:	6828      	ldr	r0, [r5, #0]
 8006650:	f000 fcc2 	bl	8006fd8 <osSemaphoreAcquire>
 8006654:	4604      	mov	r4, r0
 8006656:	2800      	cmp	r0, #0
 8006658:	d1f7      	bne.n	800664a <low_level_output+0x6e>
  HAL_ETH_ReleaseTxPacket(&heth);
 800665a:	4806      	ldr	r0, [pc, #24]	; (8006674 <low_level_output+0x98>)
 800665c:	f7fc f900 	bl	8002860 <HAL_ETH_ReleaseTxPacket>
  return errval;
 8006660:	4620      	mov	r0, r4
}
 8006662:	b00c      	add	sp, #48	; 0x30
 8006664:	bd70      	pop	{r4, r5, r6, pc}
      return ERR_IF;
 8006666:	f06f 000b 	mvn.w	r0, #11
}
 800666a:	b00c      	add	sp, #48	; 0x30
 800666c:	bd70      	pop	{r4, r5, r6, pc}
 800666e:	bf00      	nop
 8006670:	240001cc 	.word	0x240001cc
 8006674:	24000208 	.word	0x24000208
 8006678:	24000204 	.word	0x24000204

0800667c <ETH_PHY_IO_GetTick>:
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
  return HAL_GetTick();
 800667c:	f7fb b9a2 	b.w	80019c4 <HAL_GetTick>

08006680 <ETH_PHY_IO_Init>:
  HAL_ETH_SetMDIOClockRange(&heth);
 8006680:	4802      	ldr	r0, [pc, #8]	; (800668c <ETH_PHY_IO_Init+0xc>)
{
 8006682:	b508      	push	{r3, lr}
  HAL_ETH_SetMDIOClockRange(&heth);
 8006684:	f7fc fb06 	bl	8002c94 <HAL_ETH_SetMDIOClockRange>
}
 8006688:	2000      	movs	r0, #0
 800668a:	bd08      	pop	{r3, pc}
 800668c:	24000208 	.word	0x24000208

08006690 <ETH_PHY_IO_ReadReg>:
{
 8006690:	4684      	mov	ip, r0
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8006692:	4806      	ldr	r0, [pc, #24]	; (80066ac <ETH_PHY_IO_ReadReg+0x1c>)
{
 8006694:	b508      	push	{r3, lr}
 8006696:	4613      	mov	r3, r2
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8006698:	460a      	mov	r2, r1
 800669a:	4661      	mov	r1, ip
 800669c:	f7fc f9c2 	bl	8002a24 <HAL_ETH_ReadPHYRegister>
 80066a0:	3800      	subs	r0, #0
 80066a2:	bf18      	it	ne
 80066a4:	2001      	movne	r0, #1
}
 80066a6:	4240      	negs	r0, r0
 80066a8:	bd08      	pop	{r3, pc}
 80066aa:	bf00      	nop
 80066ac:	24000208 	.word	0x24000208

080066b0 <ETH_PHY_IO_WriteReg>:
{
 80066b0:	4684      	mov	ip, r0
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 80066b2:	4806      	ldr	r0, [pc, #24]	; (80066cc <ETH_PHY_IO_WriteReg+0x1c>)
{
 80066b4:	b508      	push	{r3, lr}
 80066b6:	4613      	mov	r3, r2
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 80066b8:	460a      	mov	r2, r1
 80066ba:	4661      	mov	r1, ip
 80066bc:	f7fc f9e0 	bl	8002a80 <HAL_ETH_WritePHYRegister>
 80066c0:	3800      	subs	r0, #0
 80066c2:	bf18      	it	ne
 80066c4:	2001      	movne	r0, #1
}
 80066c6:	4240      	negs	r0, r0
 80066c8:	bd08      	pop	{r3, pc}
 80066ca:	bf00      	nop
 80066cc:	24000208 	.word	0x24000208

080066d0 <pbuf_free_custom>:
{
 80066d0:	4601      	mov	r1, r0
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 80066d2:	4808      	ldr	r0, [pc, #32]	; (80066f4 <pbuf_free_custom+0x24>)
{
 80066d4:	b508      	push	{r3, lr}
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 80066d6:	f003 fbb5 	bl	8009e44 <memp_free_pool>
  if (RxAllocStatus == RX_ALLOC_ERROR)
 80066da:	4b07      	ldr	r3, [pc, #28]	; (80066f8 <pbuf_free_custom+0x28>)
 80066dc:	781a      	ldrb	r2, [r3, #0]
 80066de:	2a01      	cmp	r2, #1
 80066e0:	d000      	beq.n	80066e4 <pbuf_free_custom+0x14>
}
 80066e2:	bd08      	pop	{r3, pc}
    osSemaphoreRelease(RxPktSemaphore);
 80066e4:	4905      	ldr	r1, [pc, #20]	; (80066fc <pbuf_free_custom+0x2c>)
    RxAllocStatus = RX_ALLOC_OK;
 80066e6:	2200      	movs	r2, #0
    osSemaphoreRelease(RxPktSemaphore);
 80066e8:	6808      	ldr	r0, [r1, #0]
    RxAllocStatus = RX_ALLOC_OK;
 80066ea:	701a      	strb	r2, [r3, #0]
}
 80066ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    osSemaphoreRelease(RxPktSemaphore);
 80066f0:	f000 bca6 	b.w	8007040 <osSemaphoreRelease>
 80066f4:	080131bc 	.word	0x080131bc
 80066f8:	240001c4 	.word	0x240001c4
 80066fc:	240001c8 	.word	0x240001c8

08006700 <ethernetif_input>:
{
 8006700:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006704:	4c14      	ldr	r4, [pc, #80]	; (8006758 <ethernetif_input+0x58>)
 8006706:	b083      	sub	sp, #12
 8006708:	f8df 8050 	ldr.w	r8, [pc, #80]	; 800675c <ethernetif_input+0x5c>
 800670c:	4606      	mov	r6, r0
  struct pbuf *p = NULL;
 800670e:	2700      	movs	r7, #0
    HAL_ETH_ReadData(&heth, (void **)&p);
 8006710:	f8df 904c 	ldr.w	r9, [pc, #76]	; 8006760 <ethernetif_input+0x60>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8006714:	f04f 31ff 	mov.w	r1, #4294967295
 8006718:	6820      	ldr	r0, [r4, #0]
 800671a:	f000 fc5d 	bl	8006fd8 <osSemaphoreAcquire>
 800671e:	2800      	cmp	r0, #0
 8006720:	d1f8      	bne.n	8006714 <ethernetif_input+0x14>
  if(RxAllocStatus == RX_ALLOC_OK)
 8006722:	f898 3000 	ldrb.w	r3, [r8]
  struct pbuf *p = NULL;
 8006726:	9701      	str	r7, [sp, #4]
  if(RxAllocStatus == RX_ALLOC_OK)
 8006728:	2b00      	cmp	r3, #0
 800672a:	d1f3      	bne.n	8006714 <ethernetif_input+0x14>
    HAL_ETH_ReadData(&heth, (void **)&p);
 800672c:	a901      	add	r1, sp, #4
 800672e:	4648      	mov	r0, r9
 8006730:	f7fc f80c 	bl	800274c <HAL_ETH_ReadData>
  return p;
 8006734:	9d01      	ldr	r5, [sp, #4]
          if (netif->input( p, netif) != ERR_OK )
 8006736:	4631      	mov	r1, r6
 8006738:	4628      	mov	r0, r5
        if (p != NULL)
 800673a:	2d00      	cmp	r5, #0
 800673c:	d0ea      	beq.n	8006714 <ethernetif_input+0x14>
          if (netif->input( p, netif) != ERR_OK )
 800673e:	6933      	ldr	r3, [r6, #16]
 8006740:	4798      	blx	r3
 8006742:	2800      	cmp	r0, #0
 8006744:	d0ed      	beq.n	8006722 <ethernetif_input+0x22>
            pbuf_free(p);
 8006746:	4628      	mov	r0, r5
 8006748:	f003 ff6c 	bl	800a624 <pbuf_free>
  if(RxAllocStatus == RX_ALLOC_OK)
 800674c:	f898 3000 	ldrb.w	r3, [r8]
  struct pbuf *p = NULL;
 8006750:	9701      	str	r7, [sp, #4]
  if(RxAllocStatus == RX_ALLOC_OK)
 8006752:	2b00      	cmp	r3, #0
 8006754:	d1de      	bne.n	8006714 <ethernetif_input+0x14>
 8006756:	e7e9      	b.n	800672c <ethernetif_input+0x2c>
 8006758:	240001c8 	.word	0x240001c8
 800675c:	240001c4 	.word	0x240001c4
 8006760:	24000208 	.word	0x24000208

08006764 <HAL_ETH_RxCpltCallback>:
  osSemaphoreRelease(RxPktSemaphore);
 8006764:	4b01      	ldr	r3, [pc, #4]	; (800676c <HAL_ETH_RxCpltCallback+0x8>)
 8006766:	6818      	ldr	r0, [r3, #0]
 8006768:	f000 bc6a 	b.w	8007040 <osSemaphoreRelease>
 800676c:	240001c8 	.word	0x240001c8

08006770 <HAL_ETH_TxCpltCallback>:
  osSemaphoreRelease(TxPktSemaphore);
 8006770:	4b01      	ldr	r3, [pc, #4]	; (8006778 <HAL_ETH_TxCpltCallback+0x8>)
 8006772:	6818      	ldr	r0, [r3, #0]
 8006774:	f000 bc64 	b.w	8007040 <osSemaphoreRelease>
 8006778:	24000204 	.word	0x24000204

0800677c <HAL_ETH_ErrorCallback>:
{
 800677c:	b508      	push	{r3, lr}
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMACSR_RBU) == ETH_DMACSR_RBU)
 800677e:	f7fc fbe9 	bl	8002f54 <HAL_ETH_GetDMAError>
 8006782:	0603      	lsls	r3, r0, #24
 8006784:	d400      	bmi.n	8006788 <HAL_ETH_ErrorCallback+0xc>
}
 8006786:	bd08      	pop	{r3, pc}
     osSemaphoreRelease(RxPktSemaphore);
 8006788:	4b02      	ldr	r3, [pc, #8]	; (8006794 <HAL_ETH_ErrorCallback+0x18>)
 800678a:	6818      	ldr	r0, [r3, #0]
}
 800678c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
     osSemaphoreRelease(RxPktSemaphore);
 8006790:	f000 bc56 	b.w	8007040 <osSemaphoreRelease>
 8006794:	240001c8 	.word	0x240001c8

08006798 <ethernetif_init>:
{
 8006798:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800679c:	4604      	mov	r4, r0
{
 800679e:	b0a5      	sub	sp, #148	; 0x94
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80067a0:	2800      	cmp	r0, #0
 80067a2:	f000 80b7 	beq.w	8006914 <ethernetif_init+0x17c>
  netif->linkoutput = low_level_output;
 80067a6:	4b5f      	ldr	r3, [pc, #380]	; (8006924 <ethernetif_init+0x18c>)
  netif->name[0] = IFNAME0;
 80067a8:	f247 4173 	movw	r1, #29811	; 0x7473
  netif->output = etharp_output;
 80067ac:	4a5e      	ldr	r2, [pc, #376]	; (8006928 <ethernetif_init+0x190>)
  ETH_MACConfigTypeDef MACConf = {0};
 80067ae:	a80b      	add	r0, sp, #44	; 0x2c
  netif->name[0] = IFNAME0;
 80067b0:	85e1      	strh	r1, [r4, #46]	; 0x2e
  ETH_MACConfigTypeDef MACConf = {0};
 80067b2:	2100      	movs	r1, #0
  netif->output = etharp_output;
 80067b4:	6162      	str	r2, [r4, #20]
  ETH_MACConfigTypeDef MACConf = {0};
 80067b6:	2264      	movs	r2, #100	; 0x64
  netif->linkoutput = low_level_output;
 80067b8:	61a3      	str	r3, [r4, #24]
  MACAddr[4] = 0x00;
 80067ba:	2600      	movs	r6, #0
  ETH_MACConfigTypeDef MACConf = {0};
 80067bc:	f00b f8d2 	bl	8011964 <memset>
  heth.Instance = ETH;
 80067c0:	4d5a      	ldr	r5, [pc, #360]	; (800692c <ethernetif_init+0x194>)
 80067c2:	4b5b      	ldr	r3, [pc, #364]	; (8006930 <ethernetif_init+0x198>)
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80067c4:	2701      	movs	r7, #1
  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80067c6:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 8006970 <ethernetif_init+0x1d8>
  hal_eth_init_status = HAL_ETH_Init(&heth);
 80067ca:	4628      	mov	r0, r5
  heth.Instance = ETH;
 80067cc:	602b      	str	r3, [r5, #0]
  MACAddr[0] = 0x00;
 80067ce:	4b59      	ldr	r3, [pc, #356]	; (8006934 <ethernetif_init+0x19c>)
  MACAddr[4] = 0x00;
 80067d0:	f8ad 6004 	strh.w	r6, [sp, #4]
  MACAddr[0] = 0x00;
 80067d4:	9300      	str	r3, [sp, #0]
  heth.Init.TxDesc = DMATxDscrTab;
 80067d6:	4b58      	ldr	r3, [pc, #352]	; (8006938 <ethernetif_init+0x1a0>)
  heth.Init.MACAddr = &MACAddr[0];
 80067d8:	f8c5 d004 	str.w	sp, [r5, #4]
  heth.Init.TxDesc = DMATxDscrTab;
 80067dc:	60eb      	str	r3, [r5, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80067de:	4b57      	ldr	r3, [pc, #348]	; (800693c <ethernetif_init+0x1a4>)
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80067e0:	722f      	strb	r7, [r5, #8]
  heth.Init.RxDesc = DMARxDscrTab;
 80067e2:	612b      	str	r3, [r5, #16]
  heth.Init.RxBuffLen = 1536;
 80067e4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80067e8:	616b      	str	r3, [r5, #20]
  hal_eth_init_status = HAL_ETH_Init(&heth);
 80067ea:	f7fc fa95 	bl	8002d18 <HAL_ETH_Init>
  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80067ee:	2234      	movs	r2, #52	; 0x34
 80067f0:	4631      	mov	r1, r6
  hal_eth_init_status = HAL_ETH_Init(&heth);
 80067f2:	4680      	mov	r8, r0
  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80067f4:	f109 0004 	add.w	r0, r9, #4
 80067f8:	f00b f8b4 	bl	8011964 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80067fc:	2321      	movs	r3, #33	; 0x21
  LWIP_MEMPOOL_INIT(RX_POOL);
 80067fe:	4850      	ldr	r0, [pc, #320]	; (8006940 <ethernetif_init+0x1a8>)
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8006800:	f8c9 3000 	str.w	r3, [r9]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8006804:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8006808:	f8c9 3014 	str.w	r3, [r9, #20]
  LWIP_MEMPOOL_INIT(RX_POOL);
 800680c:	f003 faa2 	bl	8009d54 <memp_init_pool>
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8006810:	686b      	ldr	r3, [r5, #4]
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8006812:	2206      	movs	r2, #6
  RxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 8006814:	4638      	mov	r0, r7
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8006816:	f884 202c 	strb.w	r2, [r4, #44]	; 0x2c
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800681a:	781a      	ldrb	r2, [r3, #0]
 800681c:	f884 2026 	strb.w	r2, [r4, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8006820:	785a      	ldrb	r2, [r3, #1]
 8006822:	f884 2027 	strb.w	r2, [r4, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8006826:	789a      	ldrb	r2, [r3, #2]
 8006828:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800682c:	78da      	ldrb	r2, [r3, #3]
 800682e:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8006832:	7919      	ldrb	r1, [r3, #4]
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8006834:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8006838:	f884 102a 	strb.w	r1, [r4, #42]	; 0x2a
  RxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 800683c:	4639      	mov	r1, r7
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800683e:	795b      	ldrb	r3, [r3, #5]
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8006840:	f042 020a 	orr.w	r2, r2, #10
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8006844:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
  netif->mtu = ETH_MAX_PAYLOAD;
 8006848:	f240 53dc 	movw	r3, #1500	; 0x5dc
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800684c:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
  RxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 8006850:	4632      	mov	r2, r6
  netif->mtu = ETH_MAX_PAYLOAD;
 8006852:	84a3      	strh	r3, [r4, #36]	; 0x24
  RxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 8006854:	f000 fb70 	bl	8006f38 <osSemaphoreNew>
 8006858:	4b3a      	ldr	r3, [pc, #232]	; (8006944 <ethernetif_init+0x1ac>)
  TxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 800685a:	4632      	mov	r2, r6
 800685c:	4639      	mov	r1, r7
  RxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 800685e:	6018      	str	r0, [r3, #0]
  TxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 8006860:	4638      	mov	r0, r7
 8006862:	f000 fb69 	bl	8006f38 <osSemaphoreNew>
 8006866:	4b38      	ldr	r3, [pc, #224]	; (8006948 <ethernetif_init+0x1b0>)
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8006868:	4631      	mov	r1, r6
 800686a:	2220      	movs	r2, #32
  TxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 800686c:	6018      	str	r0, [r3, #0]
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 800686e:	a803      	add	r0, sp, #12
 8006870:	f00b f878 	bl	8011964 <memset>
  attributes.name = "EthIf";
 8006874:	4b35      	ldr	r3, [pc, #212]	; (800694c <ethernetif_init+0x1b4>)
  attributes.priority = osPriorityRealtime;
 8006876:	f44f 6180 	mov.w	r1, #1024	; 0x400
  osThreadNew(ethernetif_input, netif, &attributes);
 800687a:	aa02      	add	r2, sp, #8
  attributes.name = "EthIf";
 800687c:	9302      	str	r3, [sp, #8]
  attributes.priority = osPriorityRealtime;
 800687e:	2330      	movs	r3, #48	; 0x30
  osThreadNew(ethernetif_input, netif, &attributes);
 8006880:	4833      	ldr	r0, [pc, #204]	; (8006950 <ethernetif_init+0x1b8>)
  attributes.priority = osPriorityRealtime;
 8006882:	e9cd 1307 	strd	r1, r3, [sp, #28]
  osThreadNew(ethernetif_input, netif, &attributes);
 8006886:	4621      	mov	r1, r4
 8006888:	f000 fa74 	bl	8006d74 <osThreadNew>
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800688c:	4931      	ldr	r1, [pc, #196]	; (8006954 <ethernetif_init+0x1bc>)
 800688e:	4832      	ldr	r0, [pc, #200]	; (8006958 <ethernetif_init+0x1c0>)
 8006890:	f7fa ff8a 	bl	80017a8 <LAN8742_RegisterBusIO>
  LAN8742_Init(&LAN8742);
 8006894:	4830      	ldr	r0, [pc, #192]	; (8006958 <ethernetif_init+0x1c0>)
 8006896:	f7fa ffa1 	bl	80017dc <LAN8742_Init>
  if (hal_eth_init_status == HAL_OK)
 800689a:	f1b8 0f00 	cmp.w	r8, #0
 800689e:	d124      	bne.n	80068ea <ethernetif_init+0x152>
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80068a0:	482d      	ldr	r0, [pc, #180]	; (8006958 <ethernetif_init+0x1c0>)
 80068a2:	f7fb f805 	bl	80018b0 <LAN8742_GetLinkState>
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 80068a6:	42b8      	cmp	r0, r7
 80068a8:	dd2a      	ble.n	8006900 <ethernetif_init+0x168>
      switch (PHYLinkState)
 80068aa:	3803      	subs	r0, #3
 80068ac:	2802      	cmp	r0, #2
 80068ae:	d822      	bhi.n	80068f6 <ethernetif_init+0x15e>
 80068b0:	4a2a      	ldr	r2, [pc, #168]	; (800695c <ethernetif_init+0x1c4>)
 80068b2:	4b2b      	ldr	r3, [pc, #172]	; (8006960 <ethernetif_init+0x1c8>)
 80068b4:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 80068b8:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 80068bc:	a90b      	add	r1, sp, #44	; 0x2c
 80068be:	481b      	ldr	r0, [pc, #108]	; (800692c <ethernetif_init+0x194>)
 80068c0:	f7fc f910 	bl	8002ae4 <HAL_ETH_GetMACConfig>
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 80068c4:	a90b      	add	r1, sp, #44	; 0x2c
 80068c6:	4819      	ldr	r0, [pc, #100]	; (800692c <ethernetif_init+0x194>)
    MACConf.Speed = speed;
 80068c8:	e9cd 5610 	strd	r5, r6, [sp, #64]	; 0x40
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 80068cc:	f7fc f9d4 	bl	8002c78 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 80068d0:	4816      	ldr	r0, [pc, #88]	; (800692c <ethernetif_init+0x194>)
 80068d2:	f7fb fe77 	bl	80025c4 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 80068d6:	4620      	mov	r0, r4
 80068d8:	f003 fc56 	bl	800a188 <netif_set_up>
    netif_set_link_up(netif);
 80068dc:	4620      	mov	r0, r4
 80068de:	f003 fc9b 	bl	800a218 <netif_set_link_up>
}
 80068e2:	2000      	movs	r0, #0
 80068e4:	b025      	add	sp, #148	; 0x94
 80068e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    Error_Handler();
 80068ea:	f7fa fd9f 	bl	800142c <Error_Handler>
}
 80068ee:	2000      	movs	r0, #0
 80068f0:	b025      	add	sp, #148	; 0x94
 80068f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      switch (PHYLinkState)
 80068f6:	f44f 4580 	mov.w	r5, #16384	; 0x4000
 80068fa:	f44f 5600 	mov.w	r6, #8192	; 0x2000
 80068fe:	e7dd      	b.n	80068bc <ethernetif_init+0x124>
      netif_set_link_down(netif);
 8006900:	4620      	mov	r0, r4
 8006902:	f003 fcb1 	bl	800a268 <netif_set_link_down>
      netif_set_down(netif);
 8006906:	4620      	mov	r0, r4
 8006908:	f003 fc62 	bl	800a1d0 <netif_set_down>
}
 800690c:	2000      	movs	r0, #0
 800690e:	b025      	add	sp, #148	; 0x94
 8006910:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8006914:	4b13      	ldr	r3, [pc, #76]	; (8006964 <ethernetif_init+0x1cc>)
 8006916:	f240 2215 	movw	r2, #533	; 0x215
 800691a:	4913      	ldr	r1, [pc, #76]	; (8006968 <ethernetif_init+0x1d0>)
 800691c:	4813      	ldr	r0, [pc, #76]	; (800696c <ethernetif_init+0x1d4>)
 800691e:	f00a fe75 	bl	801160c <iprintf>
 8006922:	e740      	b.n	80067a6 <ethernetif_init+0xe>
 8006924:	080065dd 	.word	0x080065dd
 8006928:	0800f989 	.word	0x0800f989
 800692c:	24000208 	.word	0x24000208
 8006930:	40028000 	.word	0x40028000
 8006934:	00e18000 	.word	0x00e18000
 8006938:	30040060 	.word	0x30040060
 800693c:	30040000 	.word	0x30040000
 8006940:	080131bc 	.word	0x080131bc
 8006944:	240001c8 	.word	0x240001c8
 8006948:	24000204 	.word	0x24000204
 800694c:	08013130 	.word	0x08013130
 8006950:	08006701 	.word	0x08006701
 8006954:	24000010 	.word	0x24000010
 8006958:	240001a4 	.word	0x240001a4
 800695c:	08013184 	.word	0x08013184
 8006960:	08013190 	.word	0x08013190
 8006964:	08013104 	.word	0x08013104
 8006968:	08013120 	.word	0x08013120
 800696c:	080128dc 	.word	0x080128dc
 8006970:	240001cc 	.word	0x240001cc

08006974 <sys_now>:
  return HAL_GetTick();
 8006974:	f7fb b826 	b.w	80019c4 <HAL_GetTick>

08006978 <HAL_ETH_MspInit>:
  if(ethHandle->Instance==ETH)
 8006978:	4b4b      	ldr	r3, [pc, #300]	; (8006aa8 <HAL_ETH_MspInit+0x130>)
 800697a:	6802      	ldr	r2, [r0, #0]
{
 800697c:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(ethHandle->Instance==ETH)
 800697e:	429a      	cmp	r2, r3
{
 8006980:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006982:	f04f 0400 	mov.w	r4, #0
 8006986:	e9cd 4407 	strd	r4, r4, [sp, #28]
 800698a:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 800698e:	940b      	str	r4, [sp, #44]	; 0x2c
  if(ethHandle->Instance==ETH)
 8006990:	d001      	beq.n	8006996 <HAL_ETH_MspInit+0x1e>
}
 8006992:	b00d      	add	sp, #52	; 0x34
 8006994:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8006996:	4b45      	ldr	r3, [pc, #276]	; (8006aac <HAL_ETH_MspInit+0x134>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006998:	2702      	movs	r7, #2
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800699a:	2132      	movs	r1, #50	; 0x32
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800699c:	2603      	movs	r6, #3
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 800699e:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80069a2:	250b      	movs	r5, #11
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80069a4:	4842      	ldr	r0, [pc, #264]	; (8006ab0 <HAL_ETH_MspInit+0x138>)
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 80069a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80069aa:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 80069ae:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 80069b2:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 80069b6:	9200      	str	r2, [sp, #0]
 80069b8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 80069ba:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 80069be:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80069c2:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 80069c6:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 80069ca:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
 80069ce:	9201      	str	r2, [sp, #4]
 80069d0:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 80069d2:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 80069d6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80069da:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 80069de:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 80069e2:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80069e6:	9202      	str	r2, [sp, #8]
 80069e8:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80069ea:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80069ee:	f042 0204 	orr.w	r2, r2, #4
 80069f2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80069f6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80069fa:	f002 0204 	and.w	r2, r2, #4
 80069fe:	9203      	str	r2, [sp, #12]
 8006a00:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006a02:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8006a06:	f042 0201 	orr.w	r2, r2, #1
 8006a0a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8006a0e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8006a12:	f002 0201 	and.w	r2, r2, #1
 8006a16:	9204      	str	r2, [sp, #16]
 8006a18:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006a1a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8006a1e:	433a      	orrs	r2, r7
 8006a20:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8006a24:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8006a28:	403a      	ands	r2, r7
 8006a2a:	9205      	str	r2, [sp, #20]
 8006a2c:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8006a2e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8006a32:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006a36:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8006a3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006a3e:	960a      	str	r6, [sp, #40]	; 0x28
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8006a40:	f003 0340 	and.w	r3, r3, #64	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006a44:	950b      	str	r5, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a46:	e9cd 1707 	strd	r1, r7, [sp, #28]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8006a4a:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006a4c:	a907      	add	r1, sp, #28
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8006a4e:	9b06      	ldr	r3, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006a50:	f7fc fa84 	bl	8002f5c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8006a54:	2386      	movs	r3, #134	; 0x86
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006a56:	a907      	add	r1, sp, #28
 8006a58:	4816      	ldr	r0, [pc, #88]	; (8006ab4 <HAL_ETH_MspInit+0x13c>)
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8006a5a:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a5c:	e9cd 7408 	strd	r7, r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006a60:	e9cd 650a 	strd	r6, r5, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006a64:	f7fc fa7a 	bl	8002f5c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8006a68:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006a6c:	a907      	add	r1, sp, #28
 8006a6e:	4812      	ldr	r0, [pc, #72]	; (8006ab8 <HAL_ETH_MspInit+0x140>)
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8006a70:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a72:	e9cd 7408 	strd	r7, r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006a76:	e9cd 650a 	strd	r6, r5, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006a7a:	f7fc fa6f 	bl	8002f5c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8006a7e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8006a82:	a907      	add	r1, sp, #28
 8006a84:	480d      	ldr	r0, [pc, #52]	; (8006abc <HAL_ETH_MspInit+0x144>)
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8006a86:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a88:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006a8a:	950b      	str	r5, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006a8c:	e9cd 4609 	strd	r4, r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8006a90:	f7fc fa64 	bl	8002f5c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8006a94:	4622      	mov	r2, r4
 8006a96:	2105      	movs	r1, #5
 8006a98:	203d      	movs	r0, #61	; 0x3d
 8006a9a:	f7fa ffbb 	bl	8001a14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8006a9e:	203d      	movs	r0, #61	; 0x3d
 8006aa0:	f7fa fff6 	bl	8001a90 <HAL_NVIC_EnableIRQ>
}
 8006aa4:	b00d      	add	sp, #52	; 0x34
 8006aa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006aa8:	40028000 	.word	0x40028000
 8006aac:	58024400 	.word	0x58024400
 8006ab0:	58020800 	.word	0x58020800
 8006ab4:	58020000 	.word	0x58020000
 8006ab8:	58020400 	.word	0x58020400
 8006abc:	58021800 	.word	0x58021800

08006ac0 <HAL_ETH_RxAllocateCallback>:
    osDelay(100);
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8006ac0:	b530      	push	{r4, r5, lr}
 8006ac2:	4604      	mov	r4, r0
 8006ac4:	b083      	sub	sp, #12
/* USER CODE BEGIN HAL ETH RxAllocateCallback */

  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8006ac6:	480d      	ldr	r0, [pc, #52]	; (8006afc <HAL_ETH_RxAllocateCallback+0x3c>)
 8006ac8:	f003 f98c 	bl	8009de4 <memp_malloc_pool>
  if (p)
 8006acc:	4603      	mov	r3, r0
 8006ace:	b178      	cbz	r0, 8006af0 <HAL_ETH_RxAllocateCallback+0x30>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8006ad0:	f100 0520 	add.w	r5, r0, #32
    p->custom_free_function = pbuf_free_custom;
 8006ad4:	4a0a      	ldr	r2, [pc, #40]	; (8006b00 <HAL_ETH_RxAllocateCallback+0x40>)
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 8006ad6:	2100      	movs	r1, #0
 8006ad8:	f44f 60c0 	mov.w	r0, #1536	; 0x600
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8006adc:	6025      	str	r5, [r4, #0]
    p->custom_free_function = pbuf_free_custom;
 8006ade:	611a      	str	r2, [r3, #16]
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 8006ae0:	2241      	movs	r2, #65	; 0x41
 8006ae2:	9001      	str	r0, [sp, #4]
 8006ae4:	4608      	mov	r0, r1
 8006ae6:	9500      	str	r5, [sp, #0]
 8006ae8:	f003 fce0 	bl	800a4ac <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8006aec:	b003      	add	sp, #12
 8006aee:	bd30      	pop	{r4, r5, pc}
    RxAllocStatus = RX_ALLOC_ERROR;
 8006af0:	4a04      	ldr	r2, [pc, #16]	; (8006b04 <HAL_ETH_RxAllocateCallback+0x44>)
 8006af2:	2101      	movs	r1, #1
    *buff = NULL;
 8006af4:	6020      	str	r0, [r4, #0]
    RxAllocStatus = RX_ALLOC_ERROR;
 8006af6:	7011      	strb	r1, [r2, #0]
}
 8006af8:	b003      	add	sp, #12
 8006afa:	bd30      	pop	{r4, r5, pc}
 8006afc:	080131bc 	.word	0x080131bc
 8006b00:	080066d1 	.word	0x080066d1
 8006b04:	240001c4 	.word	0x240001c4

08006b08 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8006b08:	b430      	push	{r4, r5}
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
  struct pbuf *p = NULL;

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
  p->next = NULL;
 8006b0a:	2500      	movs	r5, #0
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8006b0c:	f1a2 0420 	sub.w	r4, r2, #32
  p->tot_len = 0;
  p->len = Length;
 8006b10:	f822 3c16 	strh.w	r3, [r2, #-22]
  p->next = NULL;
 8006b14:	f842 5c20 	str.w	r5, [r2, #-32]
  p->tot_len = 0;
 8006b18:	f822 5c18 	strh.w	r5, [r2, #-24]

  /* Chain the buffer. */
  if (!*ppStart)
 8006b1c:	6805      	ldr	r5, [r0, #0]
 8006b1e:	b1f5      	cbz	r5, 8006b5e <HAL_ETH_RxLinkCallback+0x56>
    *ppStart = p;
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8006b20:	680d      	ldr	r5, [r1, #0]
 8006b22:	602c      	str	r4, [r5, #0]
  }
  *ppEnd  = p;
 8006b24:	600c      	str	r4, [r1, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8006b26:	6801      	ldr	r1, [r0, #0]
 8006b28:	b129      	cbz	r1, 8006b36 <HAL_ETH_RxLinkCallback+0x2e>
  {
    p->tot_len += Length;
 8006b2a:	8908      	ldrh	r0, [r1, #8]
 8006b2c:	4418      	add	r0, r3
 8006b2e:	8108      	strh	r0, [r1, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8006b30:	6809      	ldr	r1, [r1, #0]
 8006b32:	2900      	cmp	r1, #0
 8006b34:	d1f9      	bne.n	8006b2a <HAL_ETH_RxLinkCallback+0x22>
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 8006b36:	b183      	cbz	r3, 8006b5a <HAL_ETH_RxLinkCallback+0x52>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8006b38:	f002 011f 	and.w	r1, r2, #31
 8006b3c:	4419      	add	r1, r3
  __ASM volatile ("dsb 0xF":::"memory");
 8006b3e:	f3bf 8f4f 	dsb	sy
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8006b42:	4808      	ldr	r0, [pc, #32]	; (8006b64 <HAL_ETH_RxLinkCallback+0x5c>)
 8006b44:	4411      	add	r1, r2
 8006b46:	f8c0 225c 	str.w	r2, [r0, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8006b4a:	3220      	adds	r2, #32
        op_size -= __SCB_DCACHE_LINE_SIZE;
      } while ( op_size > 0 );
 8006b4c:	1a8b      	subs	r3, r1, r2
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	dcf9      	bgt.n	8006b46 <HAL_ETH_RxLinkCallback+0x3e>
 8006b52:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8006b56:	f3bf 8f6f 	isb	sy

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);

/* USER CODE END HAL ETH RxLinkCallback */
}
 8006b5a:	bc30      	pop	{r4, r5}
 8006b5c:	4770      	bx	lr
    *ppStart = p;
 8006b5e:	6004      	str	r4, [r0, #0]
 8006b60:	e7e0      	b.n	8006b24 <HAL_ETH_RxLinkCallback+0x1c>
 8006b62:	bf00      	nop
 8006b64:	e000ed00 	.word	0xe000ed00

08006b68 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 8006b68:	f003 bd5c 	b.w	800a624 <pbuf_free>

08006b6c <sys_lock_tcpip_core>:
/* ETH_CODE: add functions needed for proper multithreading support and check */

static osThreadId_t lwip_core_lock_holder_thread_id;
static osThreadId_t lwip_tcpip_thread_id;

void sys_lock_tcpip_core(void){
 8006b6c:	b508      	push	{r3, lr}
	sys_mutex_lock(&lock_tcpip_core);
 8006b6e:	4804      	ldr	r0, [pc, #16]	; (8006b80 <sys_lock_tcpip_core+0x14>)
 8006b70:	f009 ffd8 	bl	8010b24 <sys_mutex_lock>
	lwip_core_lock_holder_thread_id = osThreadGetId();
 8006b74:	f000 f94a 	bl	8006e0c <osThreadGetId>
 8006b78:	4b02      	ldr	r3, [pc, #8]	; (8006b84 <sys_lock_tcpip_core+0x18>)
 8006b7a:	6018      	str	r0, [r3, #0]
}
 8006b7c:	bd08      	pop	{r3, pc}
 8006b7e:	bf00      	nop
 8006b80:	24009aa8 	.word	0x24009aa8
 8006b84:	240002b8 	.word	0x240002b8

08006b88 <ethernet_link_thread>:
{
 8006b88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b8c:	b09b      	sub	sp, #108	; 0x6c
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8006b8e:	f04f 0900 	mov.w	r9, #0
  ETH_MACConfigTypeDef MACConf = {0};
 8006b92:	2264      	movs	r2, #100	; 0x64
 8006b94:	2100      	movs	r1, #0
{
 8006b96:	4606      	mov	r6, r0
  ETH_MACConfigTypeDef MACConf = {0};
 8006b98:	a801      	add	r0, sp, #4
 8006b9a:	f00a fee3 	bl	8011964 <memset>
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8006b9e:	46cb      	mov	fp, r9
 8006ba0:	46ca      	mov	sl, r9
 8006ba2:	4d2b      	ldr	r5, [pc, #172]	; (8006c50 <ethernet_link_thread+0xc8>)
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8006ba4:	4f2b      	ldr	r7, [pc, #172]	; (8006c54 <ethernet_link_thread+0xcc>)
  LOCK_TCPIP_CORE();
 8006ba6:	f7ff ffe1 	bl	8006b6c <sys_lock_tcpip_core>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8006baa:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8006c64 <ethernet_link_thread+0xdc>

void sys_unlock_tcpip_core(void){
	lwip_core_lock_holder_thread_id = 0;
	sys_mutex_unlock(&lock_tcpip_core);
 8006bae:	4c2a      	ldr	r4, [pc, #168]	; (8006c58 <ethernet_link_thread+0xd0>)
 8006bb0:	e018      	b.n	8006be4 <ethernet_link_thread+0x5c>
  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8006bb2:	2801      	cmp	r0, #1
 8006bb4:	dc42      	bgt.n	8006c3c <ethernet_link_thread+0xb4>
    HAL_ETH_Stop_IT(&heth);
 8006bb6:	4640      	mov	r0, r8
 8006bb8:	f7fb fd54 	bl	8002664 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 8006bbc:	4630      	mov	r0, r6
 8006bbe:	f003 fb07 	bl	800a1d0 <netif_set_down>
    netif_set_link_down(netif);
 8006bc2:	4630      	mov	r0, r6
 8006bc4:	f003 fb50 	bl	800a268 <netif_set_link_down>
	lwip_core_lock_holder_thread_id = 0;
 8006bc8:	2300      	movs	r3, #0
	sys_mutex_unlock(&lock_tcpip_core);
 8006bca:	4620      	mov	r0, r4
	lwip_core_lock_holder_thread_id = 0;
 8006bcc:	602b      	str	r3, [r5, #0]
	sys_mutex_unlock(&lock_tcpip_core);
 8006bce:	f009 ffaf 	bl	8010b30 <sys_mutex_unlock>
  osDelay(100);
 8006bd2:	2064      	movs	r0, #100	; 0x64
 8006bd4:	f000 f91c 	bl	8006e10 <osDelay>
	sys_mutex_lock(&lock_tcpip_core);
 8006bd8:	4620      	mov	r0, r4
 8006bda:	f009 ffa3 	bl	8010b24 <sys_mutex_lock>
	lwip_core_lock_holder_thread_id = osThreadGetId();
 8006bde:	f000 f915 	bl	8006e0c <osThreadGetId>
 8006be2:	6028      	str	r0, [r5, #0]
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8006be4:	4638      	mov	r0, r7
 8006be6:	f7fa fe63 	bl	80018b0 <LAN8742_GetLinkState>
  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8006bea:	f896 302d 	ldrb.w	r3, [r6, #45]	; 0x2d
 8006bee:	0759      	lsls	r1, r3, #29
 8006bf0:	ea4f 0293 	mov.w	r2, r3, lsr #2
 8006bf4:	d4dd      	bmi.n	8006bb2 <ethernet_link_thread+0x2a>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8006bf6:	07d2      	lsls	r2, r2, #31
 8006bf8:	d4e6      	bmi.n	8006bc8 <ethernet_link_thread+0x40>
 8006bfa:	2801      	cmp	r0, #1
 8006bfc:	dde4      	ble.n	8006bc8 <ethernet_link_thread+0x40>
    switch (PHYLinkState)
 8006bfe:	3802      	subs	r0, #2
 8006c00:	2803      	cmp	r0, #3
 8006c02:	d820      	bhi.n	8006c46 <ethernet_link_thread+0xbe>
 8006c04:	4b15      	ldr	r3, [pc, #84]	; (8006c5c <ethernet_link_thread+0xd4>)
 8006c06:	f853 b020 	ldr.w	fp, [r3, r0, lsl #2]
 8006c0a:	4b15      	ldr	r3, [pc, #84]	; (8006c60 <ethernet_link_thread+0xd8>)
 8006c0c:	f853 9020 	ldr.w	r9, [r3, r0, lsl #2]
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8006c10:	a901      	add	r1, sp, #4
 8006c12:	4640      	mov	r0, r8
 8006c14:	f7fb ff66 	bl	8002ae4 <HAL_ETH_GetMACConfig>
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8006c18:	a901      	add	r1, sp, #4
 8006c1a:	4640      	mov	r0, r8
      netif_set_link_up(netif);
 8006c1c:	f04f 0a01 	mov.w	sl, #1
      MACConf.Speed = speed;
 8006c20:	e9cd b906 	strd	fp, r9, [sp, #24]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8006c24:	f7fc f828 	bl	8002c78 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 8006c28:	4640      	mov	r0, r8
 8006c2a:	f7fb fccb 	bl	80025c4 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 8006c2e:	4630      	mov	r0, r6
 8006c30:	f003 faaa 	bl	800a188 <netif_set_up>
      netif_set_link_up(netif);
 8006c34:	4630      	mov	r0, r6
 8006c36:	f003 faef 	bl	800a218 <netif_set_link_up>
 8006c3a:	e7c5      	b.n	8006bc8 <ethernet_link_thread+0x40>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8006c3c:	075b      	lsls	r3, r3, #29
 8006c3e:	d4c3      	bmi.n	8006bc8 <ethernet_link_thread+0x40>
    switch (PHYLinkState)
 8006c40:	3802      	subs	r0, #2
 8006c42:	2803      	cmp	r0, #3
 8006c44:	d9de      	bls.n	8006c04 <ethernet_link_thread+0x7c>
    if(linkchanged)
 8006c46:	f1ba 0f00 	cmp.w	sl, #0
 8006c4a:	d0bd      	beq.n	8006bc8 <ethernet_link_thread+0x40>
 8006c4c:	e7e0      	b.n	8006c10 <ethernet_link_thread+0x88>
 8006c4e:	bf00      	nop
 8006c50:	240002b8 	.word	0x240002b8
 8006c54:	240001a4 	.word	0x240001a4
 8006c58:	24009aa8 	.word	0x24009aa8
 8006c5c:	0801319c 	.word	0x0801319c
 8006c60:	080131ac 	.word	0x080131ac
 8006c64:	24000208 	.word	0x24000208

08006c68 <sys_unlock_tcpip_core>:
	lwip_core_lock_holder_thread_id = 0;
 8006c68:	4b02      	ldr	r3, [pc, #8]	; (8006c74 <sys_unlock_tcpip_core+0xc>)
 8006c6a:	2200      	movs	r2, #0
	sys_mutex_unlock(&lock_tcpip_core);
 8006c6c:	4802      	ldr	r0, [pc, #8]	; (8006c78 <sys_unlock_tcpip_core+0x10>)
	lwip_core_lock_holder_thread_id = 0;
 8006c6e:	601a      	str	r2, [r3, #0]
	sys_mutex_unlock(&lock_tcpip_core);
 8006c70:	f009 bf5e 	b.w	8010b30 <sys_mutex_unlock>
 8006c74:	240002b8 	.word	0x240002b8
 8006c78:	24009aa8 	.word	0x24009aa8

08006c7c <sys_check_core_locking>:
}

void sys_check_core_locking(void){
 8006c7c:	b538      	push	{r3, r4, r5, lr}
  /* Embedded systems should check we are NOT in an interrupt context here */

  LWIP_ASSERT("Function called from interrupt context", (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0);
 8006c7e:	4b11      	ldr	r3, [pc, #68]	; (8006cc4 <sys_check_core_locking+0x48>)
 8006c80:	685b      	ldr	r3, [r3, #4]
 8006c82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c86:	b9ab      	cbnz	r3, 8006cb4 <sys_check_core_locking+0x38>

  if (lwip_tcpip_thread_id != 0) {
 8006c88:	4b0f      	ldr	r3, [pc, #60]	; (8006cc8 <sys_check_core_locking+0x4c>)
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	b18b      	cbz	r3, 8006cb2 <sys_check_core_locking+0x36>
	  osThreadId_t current_thread_id = osThreadGetId();

#if LWIP_TCPIP_CORE_LOCKING
	LWIP_ASSERT("Function called without core lock", current_thread_id == lwip_core_lock_holder_thread_id);
 8006c8e:	4d0f      	ldr	r5, [pc, #60]	; (8006ccc <sys_check_core_locking+0x50>)
	  osThreadId_t current_thread_id = osThreadGetId();
 8006c90:	f000 f8bc 	bl	8006e0c <osThreadGetId>
 8006c94:	4604      	mov	r4, r0
	LWIP_ASSERT("Function called without core lock", current_thread_id == lwip_core_lock_holder_thread_id);
 8006c96:	682b      	ldr	r3, [r5, #0]
 8006c98:	4283      	cmp	r3, r0
 8006c9a:	d00a      	beq.n	8006cb2 <sys_check_core_locking+0x36>
 8006c9c:	4b0c      	ldr	r3, [pc, #48]	; (8006cd0 <sys_check_core_locking+0x54>)
 8006c9e:	f44f 7275 	mov.w	r2, #980	; 0x3d4
 8006ca2:	490c      	ldr	r1, [pc, #48]	; (8006cd4 <sys_check_core_locking+0x58>)
 8006ca4:	480c      	ldr	r0, [pc, #48]	; (8006cd8 <sys_check_core_locking+0x5c>)
 8006ca6:	f00a fcb1 	bl	801160c <iprintf>
	/* ETH_CODE: to easily check that example has correct handling of core lock
	 * This will trigger breakpoint (__BKPT)
	 */
#warning Below check should be removed in production code
	if(current_thread_id != lwip_core_lock_holder_thread_id) __BKPT(0);
 8006caa:	682b      	ldr	r3, [r5, #0]
 8006cac:	42a3      	cmp	r3, r4
 8006cae:	d000      	beq.n	8006cb2 <sys_check_core_locking+0x36>
 8006cb0:	be00      	bkpt	0x0000
#else /* LWIP_TCPIP_CORE_LOCKING */
	LWIP_ASSERT("Function called from wrong thread", current_thread_id == lwip_tcpip_thread_id);
#endif /* LWIP_TCPIP_CORE_LOCKING */
	LWIP_UNUSED_ARG(current_thread_id); /* for LWIP_NOASSERT */
  }
}
 8006cb2:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("Function called from interrupt context", (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0);
 8006cb4:	4b06      	ldr	r3, [pc, #24]	; (8006cd0 <sys_check_core_locking+0x54>)
 8006cb6:	f240 32ce 	movw	r2, #974	; 0x3ce
 8006cba:	4908      	ldr	r1, [pc, #32]	; (8006cdc <sys_check_core_locking+0x60>)
 8006cbc:	4806      	ldr	r0, [pc, #24]	; (8006cd8 <sys_check_core_locking+0x5c>)
 8006cbe:	f00a fca5 	bl	801160c <iprintf>
 8006cc2:	e7e1      	b.n	8006c88 <sys_check_core_locking+0xc>
 8006cc4:	e000ed00 	.word	0xe000ed00
 8006cc8:	240002bc 	.word	0x240002bc
 8006ccc:	240002b8 	.word	0x240002b8
 8006cd0:	08013104 	.word	0x08013104
 8006cd4:	08013160 	.word	0x08013160
 8006cd8:	080128dc 	.word	0x080128dc
 8006cdc:	08013138 	.word	0x08013138

08006ce0 <sys_mark_tcpip_thread>:
void sys_mark_tcpip_thread(void){
 8006ce0:	b508      	push	{r3, lr}
	lwip_tcpip_thread_id = osThreadGetId();
 8006ce2:	f000 f893 	bl	8006e0c <osThreadGetId>
 8006ce6:	4b01      	ldr	r3, [pc, #4]	; (8006cec <sys_mark_tcpip_thread+0xc>)
 8006ce8:	6018      	str	r0, [r3, #0]
}
 8006cea:	bd08      	pop	{r3, pc}
 8006cec:	240002bc 	.word	0x240002bc

08006cf0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006cf0:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
 8006cf2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006cf6:	691b      	ldr	r3, [r3, #16]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006cf8:	f001 fe02 	bl	8008900 <xTaskGetSchedulerState>
 8006cfc:	2801      	cmp	r0, #1
 8006cfe:	d100      	bne.n	8006d02 <SysTick_Handler+0x12>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
 8006d00:	bd08      	pop	{r3, pc}
 8006d02:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 8006d06:	f002 b9dd 	b.w	80090c4 <xPortSysTickHandler>
 8006d0a:	bf00      	nop

08006d0c <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006d0c:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8006d10:	b92b      	cbnz	r3, 8006d1e <osKernelInitialize+0x12>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 8006d12:	4b06      	ldr	r3, [pc, #24]	; (8006d2c <osKernelInitialize+0x20>)
 8006d14:	6818      	ldr	r0, [r3, #0]
 8006d16:	b928      	cbnz	r0, 8006d24 <osKernelInitialize+0x18>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006d18:	2201      	movs	r2, #1
 8006d1a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006d1c:	4770      	bx	lr
    stat = osErrorISR;
 8006d1e:	f06f 0005 	mvn.w	r0, #5
 8006d22:	4770      	bx	lr
    } else {
      stat = osError;
 8006d24:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 8006d28:	4770      	bx	lr
 8006d2a:	bf00      	nop
 8006d2c:	24000b6c 	.word	0x24000b6c

08006d30 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006d30:	b510      	push	{r4, lr}
 8006d32:	f3ef 8405 	mrs	r4, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8006d36:	b974      	cbnz	r4, 8006d56 <osKernelStart+0x26>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 8006d38:	4b08      	ldr	r3, [pc, #32]	; (8006d5c <osKernelStart+0x2c>)
 8006d3a:	681a      	ldr	r2, [r3, #0]
 8006d3c:	2a01      	cmp	r2, #1
 8006d3e:	d107      	bne.n	8006d50 <osKernelStart+0x20>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006d40:	4907      	ldr	r1, [pc, #28]	; (8006d60 <osKernelStart+0x30>)
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006d42:	2202      	movs	r2, #2
 8006d44:	77cc      	strb	r4, [r1, #31]
 8006d46:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006d48:	f001 fabe 	bl	80082c8 <vTaskStartScheduler>
      stat = osOK;
 8006d4c:	4620      	mov	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
 8006d4e:	bd10      	pop	{r4, pc}
      stat = osError;
 8006d50:	f04f 30ff 	mov.w	r0, #4294967295
}
 8006d54:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 8006d56:	f06f 0005 	mvn.w	r0, #5
}
 8006d5a:	bd10      	pop	{r4, pc}
 8006d5c:	24000b6c 	.word	0x24000b6c
 8006d60:	e000ed00 	.word	0xe000ed00

08006d64 <osKernelGetTickCount>:
 8006d64:	f3ef 8305 	mrs	r3, IPSR
}

uint32_t osKernelGetTickCount (void) {
  TickType_t ticks;

  if (IS_IRQ()) {
 8006d68:	b10b      	cbz	r3, 8006d6e <osKernelGetTickCount+0xa>
    ticks = xTaskGetTickCountFromISR();
 8006d6a:	f001 bb0b 	b.w	8008384 <xTaskGetTickCountFromISR>
  } else {
    ticks = xTaskGetTickCount();
 8006d6e:	f001 bb03 	b.w	8008378 <xTaskGetTickCount>
 8006d72:	bf00      	nop

08006d74 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006d74:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006d76:	2500      	movs	r5, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006d78:	b087      	sub	sp, #28
 8006d7a:	4614      	mov	r4, r2
  hTask = NULL;
 8006d7c:	9505      	str	r5, [sp, #20]
 8006d7e:	f3ef 8205 	mrs	r2, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 8006d82:	bb62      	cbnz	r2, 8006dde <osThreadNew+0x6a>
 8006d84:	4606      	mov	r6, r0
 8006d86:	b350      	cbz	r0, 8006dde <osThreadNew+0x6a>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 8006d88:	b1e4      	cbz	r4, 8006dc4 <osThreadNew+0x50>
      if (attr->name != NULL) {
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 8006d8a:	69a7      	ldr	r7, [r4, #24]
 8006d8c:	bb57      	cbnz	r7, 8006de4 <osThreadNew+0x70>
 8006d8e:	2718      	movs	r7, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006d90:	6863      	ldr	r3, [r4, #4]
 8006d92:	07db      	lsls	r3, r3, #31
 8006d94:	d423      	bmi.n	8006dde <osThreadNew+0x6a>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 8006d96:	6963      	ldr	r3, [r4, #20]
 8006d98:	b343      	cbz	r3, 8006dec <osThreadNew+0x78>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006d9a:	ea4f 0c93 	mov.w	ip, r3, lsr #2
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006d9e:	68a0      	ldr	r0, [r4, #8]
      if (attr->name != NULL) {
 8006da0:	6825      	ldr	r5, [r4, #0]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006da2:	b340      	cbz	r0, 8006df6 <osThreadNew+0x82>
 8006da4:	68e2      	ldr	r2, [r4, #12]
 8006da6:	2aa7      	cmp	r2, #167	; 0xa7
 8006da8:	d919      	bls.n	8006dde <osThreadNew+0x6a>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006daa:	6924      	ldr	r4, [r4, #16]
 8006dac:	b1bb      	cbz	r3, 8006dde <osThreadNew+0x6a>
 8006dae:	b1b4      	cbz	r4, 8006dde <osThreadNew+0x6a>
      mem = 0;
    }

    if (mem == 1) {
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006db0:	460b      	mov	r3, r1
 8006db2:	4662      	mov	r2, ip
 8006db4:	4629      	mov	r1, r5
 8006db6:	9700      	str	r7, [sp, #0]
 8006db8:	e9cd 4001 	strd	r4, r0, [sp, #4]
 8006dbc:	4630      	mov	r0, r6
 8006dbe:	f001 fa17 	bl	80081f0 <xTaskCreateStatic>
 8006dc2:	e00d      	b.n	8006de0 <osThreadNew+0x6c>
 8006dc4:	f44f 7200 	mov.w	r2, #512	; 0x200
    prio  = (UBaseType_t)osPriorityNormal;
 8006dc8:	2718      	movs	r7, #24
      #endif
    }
    else {
      if (mem == 0) {
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006dca:	460b      	mov	r3, r1
 8006dcc:	4621      	mov	r1, r4
 8006dce:	ac05      	add	r4, sp, #20
 8006dd0:	4630      	mov	r0, r6
 8006dd2:	9700      	str	r7, [sp, #0]
 8006dd4:	9401      	str	r4, [sp, #4]
 8006dd6:	f001 fa45 	bl	8008264 <xTaskCreate>
 8006dda:	2801      	cmp	r0, #1
 8006ddc:	d009      	beq.n	8006df2 <osThreadNew+0x7e>
        return (NULL);
 8006dde:	2000      	movs	r0, #0
      }
    }
  }

  return ((osThreadId_t)hTask);
}
 8006de0:	b007      	add	sp, #28
 8006de2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006de4:	1e7a      	subs	r2, r7, #1
 8006de6:	2a37      	cmp	r2, #55	; 0x37
 8006de8:	d9d2      	bls.n	8006d90 <osThreadNew+0x1c>
 8006dea:	e7f8      	b.n	8006dde <osThreadNew+0x6a>
    stack = configMINIMAL_STACK_SIZE;
 8006dec:	f44f 7c00 	mov.w	ip, #512	; 0x200
 8006df0:	e7d5      	b.n	8006d9e <osThreadNew+0x2a>
  return ((osThreadId_t)hTask);
 8006df2:	9805      	ldr	r0, [sp, #20]
 8006df4:	e7f4      	b.n	8006de0 <osThreadNew+0x6c>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006df6:	68e3      	ldr	r3, [r4, #12]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d1f1      	bne.n	8006de0 <osThreadNew+0x6c>
 8006dfc:	6923      	ldr	r3, [r4, #16]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d1ee      	bne.n	8006de0 <osThreadNew+0x6c>
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006e02:	fa1f f28c 	uxth.w	r2, ip
 8006e06:	462c      	mov	r4, r5
 8006e08:	e7df      	b.n	8006dca <osThreadNew+0x56>
 8006e0a:	bf00      	nop

08006e0c <osThreadGetId>:
}

osThreadId_t osThreadGetId (void) {
  osThreadId_t id;

  id = (osThreadId_t)xTaskGetCurrentTaskHandle();
 8006e0c:	f001 bd72 	b.w	80088f4 <xTaskGetCurrentTaskHandle>

08006e10 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006e10:	b510      	push	{r4, lr}
 8006e12:	f3ef 8405 	mrs	r4, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8006e16:	b92c      	cbnz	r4, 8006e24 <osDelay+0x14>
    stat = osErrorISR;
  }
  else {
    stat = osOK;

    if (ticks != 0U) {
 8006e18:	b900      	cbnz	r0, 8006e1c <osDelay+0xc>
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
 8006e1a:	bd10      	pop	{r4, pc}
      vTaskDelay(ticks);
 8006e1c:	f001 fc08 	bl	8008630 <vTaskDelay>
    stat = osOK;
 8006e20:	4620      	mov	r0, r4
}
 8006e22:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 8006e24:	f06f 0005 	mvn.w	r0, #5
}
 8006e28:	bd10      	pop	{r4, pc}
 8006e2a:	bf00      	nop

08006e2c <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8006e2c:	b570      	push	{r4, r5, r6, lr}
 8006e2e:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hMutex = NULL;

  if (!IS_IRQ()) {
 8006e32:	b9db      	cbnz	r3, 8006e6c <osMutexNew+0x40>
    if (attr != NULL) {
 8006e34:	4604      	mov	r4, r0
 8006e36:	b1e0      	cbz	r0, 8006e72 <osMutexNew+0x46>
      type = attr->attr_bits;
 8006e38:	6846      	ldr	r6, [r0, #4]
      rmtx = 1U;
    } else {
      rmtx = 0U;
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8006e3a:	0733      	lsls	r3, r6, #28
 8006e3c:	d416      	bmi.n	8006e6c <osMutexNew+0x40>
      mem = -1;

      if (attr != NULL) {
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8006e3e:	6881      	ldr	r1, [r0, #8]
    if ((type & osMutexRecursive) == osMutexRecursive) {
 8006e40:	f006 0601 	and.w	r6, r6, #1
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8006e44:	68c3      	ldr	r3, [r0, #12]
 8006e46:	b181      	cbz	r1, 8006e6a <osMutexNew+0x3e>
 8006e48:	2b4f      	cmp	r3, #79	; 0x4f
 8006e4a:	d90f      	bls.n	8006e6c <osMutexNew+0x40>
        mem = 0;
      }

      if (mem == 1) {
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8006e4c:	b31e      	cbz	r6, 8006e96 <osMutexNew+0x6a>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8006e4e:	2004      	movs	r0, #4
 8006e50:	f000 fc9a 	bl	8007788 <xQueueCreateMutexStatic>
 8006e54:	4605      	mov	r5, r0
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8006e56:	b14d      	cbz	r5, 8006e6c <osMutexNew+0x40>
        if (attr != NULL) {
          name = attr->name;
        } else {
          name = NULL;
        }
        vQueueAddToRegistry (hMutex, name);
 8006e58:	6821      	ldr	r1, [r4, #0]
 8006e5a:	4628      	mov	r0, r5
 8006e5c:	f001 f812 	bl	8007e84 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8006e60:	b12e      	cbz	r6, 8006e6e <osMutexNew+0x42>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8006e62:	f045 0501 	orr.w	r5, r5, #1
      }
    }
  }

  return ((osMutexId_t)hMutex);
}
 8006e66:	4628      	mov	r0, r5
 8006e68:	bd70      	pop	{r4, r5, r6, pc}
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006e6a:	b163      	cbz	r3, 8006e86 <osMutexNew+0x5a>
  hMutex = NULL;
 8006e6c:	2500      	movs	r5, #0
}
 8006e6e:	4628      	mov	r0, r5
 8006e70:	bd70      	pop	{r4, r5, r6, pc}
              hMutex = xSemaphoreCreateMutex ();
 8006e72:	2001      	movs	r0, #1
 8006e74:	f000 fcde 	bl	8007834 <xQueueCreateMutex>
      if (hMutex != NULL) {
 8006e78:	4605      	mov	r5, r0
 8006e7a:	2800      	cmp	r0, #0
 8006e7c:	d0f6      	beq.n	8006e6c <osMutexNew+0x40>
        vQueueAddToRegistry (hMutex, name);
 8006e7e:	4621      	mov	r1, r4
 8006e80:	f001 f800 	bl	8007e84 <vQueueAddToRegistry>
      if ((hMutex != NULL) && (rmtx != 0U)) {
 8006e84:	e7f3      	b.n	8006e6e <osMutexNew+0x42>
            if (rmtx != 0U) {
 8006e86:	b15e      	cbz	r6, 8006ea0 <osMutexNew+0x74>
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8006e88:	2004      	movs	r0, #4
 8006e8a:	f000 fcd3 	bl	8007834 <xQueueCreateMutex>
      if (hMutex != NULL) {
 8006e8e:	4605      	mov	r5, r0
 8006e90:	2800      	cmp	r0, #0
 8006e92:	d1e1      	bne.n	8006e58 <osMutexNew+0x2c>
 8006e94:	e7ea      	b.n	8006e6c <osMutexNew+0x40>
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8006e96:	2001      	movs	r0, #1
 8006e98:	f000 fc76 	bl	8007788 <xQueueCreateMutexStatic>
 8006e9c:	4605      	mov	r5, r0
 8006e9e:	e7da      	b.n	8006e56 <osMutexNew+0x2a>
              hMutex = xSemaphoreCreateMutex ();
 8006ea0:	2001      	movs	r0, #1
 8006ea2:	f000 fcc7 	bl	8007834 <xQueueCreateMutex>
      if (hMutex != NULL) {
 8006ea6:	4605      	mov	r5, r0
 8006ea8:	e7d5      	b.n	8006e56 <osMutexNew+0x2a>
 8006eaa:	bf00      	nop

08006eac <osMutexAcquire>:
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8006eac:	f020 0201 	bic.w	r2, r0, #1

  rmtx = (uint32_t)mutex_id & 1U;
 8006eb0:	f000 0301 	and.w	r3, r0, #1
 8006eb4:	f3ef 8005 	mrs	r0, IPSR

  stat = osOK;

  if (IS_IRQ()) {
 8006eb8:	b9a8      	cbnz	r0, 8006ee6 <osMutexAcquire+0x3a>
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 8006eba:	b1ba      	cbz	r2, 8006eec <osMutexAcquire+0x40>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8006ebc:	4610      	mov	r0, r2
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8006ebe:	b510      	push	{r4, lr}
 8006ec0:	460c      	mov	r4, r1
    if (rmtx != 0U) {
 8006ec2:	b953      	cbnz	r3, 8006eda <osMutexAcquire+0x2e>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8006ec4:	f000 fe58 	bl	8007b78 <xQueueSemaphoreTake>
 8006ec8:	2801      	cmp	r0, #1
 8006eca:	d00a      	beq.n	8006ee2 <osMutexAcquire+0x36>
          stat = osErrorResource;
 8006ecc:	2c00      	cmp	r4, #0
 8006ece:	bf14      	ite	ne
 8006ed0:	f06f 0001 	mvnne.w	r0, #1
 8006ed4:	f06f 0002 	mvneq.w	r0, #2
      }
    }
  }

  return (stat);
}
 8006ed8:	bd10      	pop	{r4, pc}
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8006eda:	f000 ff29 	bl	8007d30 <xQueueTakeMutexRecursive>
 8006ede:	2801      	cmp	r0, #1
 8006ee0:	d1f4      	bne.n	8006ecc <osMutexAcquire+0x20>
  stat = osOK;
 8006ee2:	2000      	movs	r0, #0
}
 8006ee4:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 8006ee6:	f06f 0005 	mvn.w	r0, #5
 8006eea:	4770      	bx	lr
    stat = osErrorParameter;
 8006eec:	f06f 0003 	mvn.w	r0, #3
}
 8006ef0:	4770      	bx	lr
 8006ef2:	bf00      	nop

08006ef4 <osMutexRelease>:
 8006ef4:	f3ef 8205 	mrs	r2, IPSR

  rmtx = (uint32_t)mutex_id & 1U;

  stat = osOK;

  if (IS_IRQ()) {
 8006ef8:	b9ba      	cbnz	r2, 8006f2a <osMutexRelease+0x36>
osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8006efa:	b510      	push	{r4, lr}
 8006efc:	f020 0401 	bic.w	r4, r0, #1
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 8006f00:	b1b4      	cbz	r4, 8006f30 <osMutexRelease+0x3c>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
 8006f02:	f000 0301 	and.w	r3, r0, #1
 8006f06:	b943      	cbnz	r3, 8006f1a <osMutexRelease+0x26>
        stat = osErrorResource;
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8006f08:	461a      	mov	r2, r3
 8006f0a:	4619      	mov	r1, r3
 8006f0c:	4620      	mov	r0, r4
 8006f0e:	f000 fb77 	bl	8007600 <xQueueGenericSend>
 8006f12:	2801      	cmp	r0, #1
 8006f14:	d106      	bne.n	8006f24 <osMutexRelease+0x30>
  stat = osOK;
 8006f16:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 8006f18:	bd10      	pop	{r4, pc}
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8006f1a:	4620      	mov	r0, r4
 8006f1c:	f000 fc6a 	bl	80077f4 <xQueueGiveMutexRecursive>
 8006f20:	2801      	cmp	r0, #1
 8006f22:	d0f8      	beq.n	8006f16 <osMutexRelease+0x22>
        stat = osErrorResource;
 8006f24:	f06f 0002 	mvn.w	r0, #2
}
 8006f28:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 8006f2a:	f06f 0005 	mvn.w	r0, #5
}
 8006f2e:	4770      	bx	lr
    stat = osErrorParameter;
 8006f30:	f06f 0003 	mvn.w	r0, #3
}
 8006f34:	bd10      	pop	{r4, pc}
 8006f36:	bf00      	nop

08006f38 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8006f38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f3a:	b083      	sub	sp, #12
 8006f3c:	f3ef 8605 	mrs	r6, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8006f40:	b98e      	cbnz	r6, 8006f66 <osSemaphoreNew+0x2e>
 8006f42:	4605      	mov	r5, r0
 8006f44:	b178      	cbz	r0, 8006f66 <osSemaphoreNew+0x2e>
 8006f46:	4288      	cmp	r0, r1
 8006f48:	460f      	mov	r7, r1
 8006f4a:	d30c      	bcc.n	8006f66 <osSemaphoreNew+0x2e>
    mem = -1;

    if (attr != NULL) {
 8006f4c:	4614      	mov	r4, r2
 8006f4e:	b182      	cbz	r2, 8006f72 <osSemaphoreNew+0x3a>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8006f50:	e9d2 2302 	ldrd	r2, r3, [r2, #8]
 8006f54:	b15a      	cbz	r2, 8006f6e <osSemaphoreNew+0x36>
 8006f56:	2b4f      	cmp	r3, #79	; 0x4f
 8006f58:	d905      	bls.n	8006f66 <osSemaphoreNew+0x2e>
    else {
      mem = 0;
    }

    if (mem != -1) {
      if (max_count == 1U) {
 8006f5a:	2801      	cmp	r0, #1
 8006f5c:	d032      	beq.n	8006fc4 <osSemaphoreNew+0x8c>
        }
      }
      else {
        if (mem == 1) {
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8006f5e:	f000 fb0d 	bl	800757c <xQueueCreateCountingSemaphoreStatic>
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8006f62:	4605      	mov	r5, r0
 8006f64:	b978      	cbnz	r0, 8006f86 <osSemaphoreNew+0x4e>
  hSemaphore = NULL;
 8006f66:	2500      	movs	r5, #0
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 8006f68:	4628      	mov	r0, r5
 8006f6a:	b003      	add	sp, #12
 8006f6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d1f9      	bne.n	8006f66 <osSemaphoreNew+0x2e>
      if (max_count == 1U) {
 8006f72:	2d01      	cmp	r5, #1
 8006f74:	d00f      	beq.n	8006f96 <osSemaphoreNew+0x5e>
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8006f76:	4628      	mov	r0, r5
 8006f78:	4639      	mov	r1, r7
 8006f7a:	f000 fb23 	bl	80075c4 <xQueueCreateCountingSemaphore>
 8006f7e:	4605      	mov	r5, r0
      if (hSemaphore != NULL) {
 8006f80:	2d00      	cmp	r5, #0
 8006f82:	d0f0      	beq.n	8006f66 <osSemaphoreNew+0x2e>
        if (attr != NULL) {
 8006f84:	b104      	cbz	r4, 8006f88 <osSemaphoreNew+0x50>
          name = attr->name;
 8006f86:	6824      	ldr	r4, [r4, #0]
        vQueueAddToRegistry (hSemaphore, name);
 8006f88:	4628      	mov	r0, r5
 8006f8a:	4621      	mov	r1, r4
 8006f8c:	f000 ff7a 	bl	8007e84 <vQueueAddToRegistry>
}
 8006f90:	4628      	mov	r0, r5
 8006f92:	b003      	add	sp, #12
 8006f94:	bdf0      	pop	{r4, r5, r6, r7, pc}
            hSemaphore = xSemaphoreCreateBinary();
 8006f96:	4628      	mov	r0, r5
 8006f98:	2203      	movs	r2, #3
 8006f9a:	2100      	movs	r1, #0
 8006f9c:	f000 fac6 	bl	800752c <xQueueGenericCreate>
 8006fa0:	4605      	mov	r5, r0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8006fa2:	2d00      	cmp	r5, #0
 8006fa4:	d0df      	beq.n	8006f66 <osSemaphoreNew+0x2e>
 8006fa6:	2f00      	cmp	r7, #0
 8006fa8:	d0ea      	beq.n	8006f80 <osSemaphoreNew+0x48>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006faa:	2300      	movs	r3, #0
 8006fac:	4628      	mov	r0, r5
 8006fae:	461a      	mov	r2, r3
 8006fb0:	4619      	mov	r1, r3
 8006fb2:	f000 fb25 	bl	8007600 <xQueueGenericSend>
 8006fb6:	2801      	cmp	r0, #1
 8006fb8:	d0e4      	beq.n	8006f84 <osSemaphoreNew+0x4c>
            vSemaphoreDelete (hSemaphore);
 8006fba:	4628      	mov	r0, r5
            hSemaphore = NULL;
 8006fbc:	2500      	movs	r5, #0
            vSemaphoreDelete (hSemaphore);
 8006fbe:	f000 ff37 	bl	8007e30 <vQueueDelete>
      if (hSemaphore != NULL) {
 8006fc2:	e7d1      	b.n	8006f68 <osSemaphoreNew+0x30>
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8006fc4:	4613      	mov	r3, r2
 8006fc6:	2203      	movs	r2, #3
 8006fc8:	4631      	mov	r1, r6
 8006fca:	9200      	str	r2, [sp, #0]
 8006fcc:	4632      	mov	r2, r6
 8006fce:	f000 fa5b 	bl	8007488 <xQueueGenericCreateStatic>
 8006fd2:	4605      	mov	r5, r0
 8006fd4:	e7e5      	b.n	8006fa2 <osSemaphoreNew+0x6a>
 8006fd6:	bf00      	nop

08006fd8 <osSemaphoreAcquire>:
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 8006fd8:	b370      	cbz	r0, 8007038 <osSemaphoreAcquire+0x60>
osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8006fda:	b510      	push	{r4, lr}
 8006fdc:	460c      	mov	r4, r1
 8006fde:	b082      	sub	sp, #8
 8006fe0:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 8006fe4:	b1c3      	cbz	r3, 8007018 <osSemaphoreAcquire+0x40>
    if (timeout != 0U) {
 8006fe6:	bb21      	cbnz	r1, 8007032 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8006fe8:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 8006fea:	9101      	str	r1, [sp, #4]
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8006fec:	f000 fec0 	bl	8007d70 <xQueueReceiveFromISR>
 8006ff0:	2801      	cmp	r0, #1
 8006ff2:	d11a      	bne.n	800702a <osSemaphoreAcquire+0x52>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 8006ff4:	9b01      	ldr	r3, [sp, #4]
 8006ff6:	b913      	cbnz	r3, 8006ffe <osSemaphoreAcquire+0x26>
  stat = osOK;
 8006ff8:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 8006ffa:	b002      	add	sp, #8
 8006ffc:	bd10      	pop	{r4, pc}
        portYIELD_FROM_ISR (yield);
 8006ffe:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007002:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007006:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800700a:	f3bf 8f4f 	dsb	sy
 800700e:	f3bf 8f6f 	isb	sy
  stat = osOK;
 8007012:	4620      	mov	r0, r4
}
 8007014:	b002      	add	sp, #8
 8007016:	bd10      	pop	{r4, pc}
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8007018:	f000 fdae 	bl	8007b78 <xQueueSemaphoreTake>
 800701c:	2801      	cmp	r0, #1
 800701e:	d0eb      	beq.n	8006ff8 <osSemaphoreAcquire+0x20>
      if (timeout != 0U) {
 8007020:	b11c      	cbz	r4, 800702a <osSemaphoreAcquire+0x52>
        stat = osErrorTimeout;
 8007022:	f06f 0001 	mvn.w	r0, #1
}
 8007026:	b002      	add	sp, #8
 8007028:	bd10      	pop	{r4, pc}
        stat = osErrorResource;
 800702a:	f06f 0002 	mvn.w	r0, #2
}
 800702e:	b002      	add	sp, #8
 8007030:	bd10      	pop	{r4, pc}
    stat = osErrorParameter;
 8007032:	f06f 0003 	mvn.w	r0, #3
 8007036:	e7e0      	b.n	8006ffa <osSemaphoreAcquire+0x22>
 8007038:	f06f 0003 	mvn.w	r0, #3
}
 800703c:	4770      	bx	lr
 800703e:	bf00      	nop

08007040 <osSemaphoreRelease>:
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 8007040:	b330      	cbz	r0, 8007090 <osSemaphoreRelease+0x50>
osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8007042:	b510      	push	{r4, lr}
 8007044:	b082      	sub	sp, #8
 8007046:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 800704a:	b1ab      	cbz	r3, 8007078 <osSemaphoreRelease+0x38>
    yield = pdFALSE;
 800704c:	2400      	movs	r4, #0

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800704e:	a901      	add	r1, sp, #4
    yield = pdFALSE;
 8007050:	9401      	str	r4, [sp, #4]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8007052:	f000 fc77 	bl	8007944 <xQueueGiveFromISR>
 8007056:	2801      	cmp	r0, #1
 8007058:	d117      	bne.n	800708a <osSemaphoreRelease+0x4a>
      stat = osErrorResource;
    } else {
      portYIELD_FROM_ISR (yield);
 800705a:	9b01      	ldr	r3, [sp, #4]
 800705c:	b193      	cbz	r3, 8007084 <osSemaphoreRelease+0x44>
 800705e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007062:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007066:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800706a:	f3bf 8f4f 	dsb	sy
 800706e:	f3bf 8f6f 	isb	sy
  stat = osOK;
 8007072:	4620      	mov	r0, r4
      stat = osErrorResource;
    }
  }

  return (stat);
}
 8007074:	b002      	add	sp, #8
 8007076:	bd10      	pop	{r4, pc}
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8007078:	461a      	mov	r2, r3
 800707a:	4619      	mov	r1, r3
 800707c:	f000 fac0 	bl	8007600 <xQueueGenericSend>
 8007080:	2801      	cmp	r0, #1
 8007082:	d102      	bne.n	800708a <osSemaphoreRelease+0x4a>
  stat = osOK;
 8007084:	2000      	movs	r0, #0
}
 8007086:	b002      	add	sp, #8
 8007088:	bd10      	pop	{r4, pc}
      stat = osErrorResource;
 800708a:	f06f 0002 	mvn.w	r0, #2
 800708e:	e7fa      	b.n	8007086 <osSemaphoreRelease+0x46>
    stat = osErrorParameter;
 8007090:	f06f 0003 	mvn.w	r0, #3
}
 8007094:	4770      	bx	lr
 8007096:	bf00      	nop

08007098 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8007098:	b5f0      	push	{r4, r5, r6, r7, lr}
 800709a:	b083      	sub	sp, #12
 800709c:	f3ef 8705 	mrs	r7, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80070a0:	b987      	cbnz	r7, 80070c4 <osMessageQueueNew+0x2c>
 80070a2:	4605      	mov	r5, r0
 80070a4:	b170      	cbz	r0, 80070c4 <osMessageQueueNew+0x2c>
 80070a6:	b169      	cbz	r1, 80070c4 <osMessageQueueNew+0x2c>
    mem = -1;

    if (attr != NULL) {
 80070a8:	4614      	mov	r4, r2
 80070aa:	b17a      	cbz	r2, 80070cc <osMessageQueueNew+0x34>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80070ac:	6893      	ldr	r3, [r2, #8]
 80070ae:	b1cb      	cbz	r3, 80070e4 <osMessageQueueNew+0x4c>
 80070b0:	68d2      	ldr	r2, [r2, #12]
 80070b2:	2a4f      	cmp	r2, #79	; 0x4f
 80070b4:	d906      	bls.n	80070c4 <osMessageQueueNew+0x2c>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80070b6:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80070b8:	b122      	cbz	r2, 80070c4 <osMessageQueueNew+0x2c>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80070ba:	fb01 f505 	mul.w	r5, r1, r5
 80070be:	6966      	ldr	r6, [r4, #20]
 80070c0:	42ae      	cmp	r6, r5
 80070c2:	d21f      	bcs.n	8007104 <osMessageQueueNew+0x6c>
  hQueue = NULL;
 80070c4:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 80070c6:	4628      	mov	r0, r5
 80070c8:	b003      	add	sp, #12
 80070ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
          hQueue = xQueueCreate (msg_count, msg_size);
 80070cc:	f000 fa2e 	bl	800752c <xQueueGenericCreate>
    if (hQueue != NULL) {
 80070d0:	4605      	mov	r5, r0
 80070d2:	2800      	cmp	r0, #0
 80070d4:	d0f6      	beq.n	80070c4 <osMessageQueueNew+0x2c>
      vQueueAddToRegistry (hQueue, name);
 80070d6:	4628      	mov	r0, r5
 80070d8:	4621      	mov	r1, r4
 80070da:	f000 fed3 	bl	8007e84 <vQueueAddToRegistry>
}
 80070de:	4628      	mov	r0, r5
 80070e0:	b003      	add	sp, #12
 80070e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80070e4:	68d3      	ldr	r3, [r2, #12]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d1ec      	bne.n	80070c4 <osMessageQueueNew+0x2c>
 80070ea:	6913      	ldr	r3, [r2, #16]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d1e9      	bne.n	80070c4 <osMessageQueueNew+0x2c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80070f0:	6952      	ldr	r2, [r2, #20]
 80070f2:	2a00      	cmp	r2, #0
 80070f4:	d1e6      	bne.n	80070c4 <osMessageQueueNew+0x2c>
          hQueue = xQueueCreate (msg_count, msg_size);
 80070f6:	f000 fa19 	bl	800752c <xQueueGenericCreate>
    if (hQueue != NULL) {
 80070fa:	4605      	mov	r5, r0
 80070fc:	2800      	cmp	r0, #0
 80070fe:	d0e1      	beq.n	80070c4 <osMessageQueueNew+0x2c>
        name = attr->name;
 8007100:	6824      	ldr	r4, [r4, #0]
 8007102:	e7e8      	b.n	80070d6 <osMessageQueueNew+0x3e>
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8007104:	9700      	str	r7, [sp, #0]
 8007106:	f000 f9bf 	bl	8007488 <xQueueGenericCreateStatic>
    if (hQueue != NULL) {
 800710a:	4605      	mov	r5, r0
 800710c:	2800      	cmp	r0, #0
 800710e:	d1f7      	bne.n	8007100 <osMessageQueueNew+0x68>
 8007110:	e7d8      	b.n	80070c4 <osMessageQueueNew+0x2c>
 8007112:	bf00      	nop

08007114 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8007114:	b530      	push	{r4, r5, lr}
 8007116:	461c      	mov	r4, r3
 8007118:	b083      	sub	sp, #12
 800711a:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 800711e:	b30b      	cbz	r3, 8007164 <osMessageQueuePut+0x50>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007120:	3c00      	subs	r4, #0
 8007122:	bf18      	it	ne
 8007124:	2401      	movne	r4, #1
 8007126:	2900      	cmp	r1, #0
 8007128:	bf08      	it	eq
 800712a:	f044 0401 	orreq.w	r4, r4, #1
 800712e:	bb7c      	cbnz	r4, 8007190 <osMessageQueuePut+0x7c>
 8007130:	fab0 f480 	clz	r4, r0
 8007134:	0964      	lsrs	r4, r4, #5
 8007136:	b358      	cbz	r0, 8007190 <osMessageQueuePut+0x7c>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8007138:	4623      	mov	r3, r4
 800713a:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 800713c:	9401      	str	r4, [sp, #4]
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800713e:	f000 fb97 	bl	8007870 <xQueueGenericSendFromISR>
 8007142:	2801      	cmp	r0, #1
 8007144:	d120      	bne.n	8007188 <osMessageQueuePut+0x74>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 8007146:	9b01      	ldr	r3, [sp, #4]
 8007148:	b1db      	cbz	r3, 8007182 <osMessageQueuePut+0x6e>
 800714a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800714e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007152:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8007156:	f3bf 8f4f 	dsb	sy
 800715a:	f3bf 8f6f 	isb	sy
  stat = osOK;
 800715e:	4620      	mov	r0, r4
      }
    }
  }

  return (stat);
}
 8007160:	b003      	add	sp, #12
 8007162:	bd30      	pop	{r4, r5, pc}
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8007164:	b1a0      	cbz	r0, 8007190 <osMessageQueuePut+0x7c>
 8007166:	fab1 f381 	clz	r3, r1
 800716a:	095b      	lsrs	r3, r3, #5
 800716c:	b181      	cbz	r1, 8007190 <osMessageQueuePut+0x7c>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800716e:	4622      	mov	r2, r4
 8007170:	f000 fa46 	bl	8007600 <xQueueGenericSend>
 8007174:	2801      	cmp	r0, #1
 8007176:	d004      	beq.n	8007182 <osMessageQueuePut+0x6e>
        if (timeout != 0U) {
 8007178:	b134      	cbz	r4, 8007188 <osMessageQueuePut+0x74>
          stat = osErrorTimeout;
 800717a:	f06f 0001 	mvn.w	r0, #1
}
 800717e:	b003      	add	sp, #12
 8007180:	bd30      	pop	{r4, r5, pc}
  stat = osOK;
 8007182:	2000      	movs	r0, #0
}
 8007184:	b003      	add	sp, #12
 8007186:	bd30      	pop	{r4, r5, pc}
          stat = osErrorResource;
 8007188:	f06f 0002 	mvn.w	r0, #2
}
 800718c:	b003      	add	sp, #12
 800718e:	bd30      	pop	{r4, r5, pc}
      stat = osErrorParameter;
 8007190:	f06f 0003 	mvn.w	r0, #3
 8007194:	e7e4      	b.n	8007160 <osMessageQueuePut+0x4c>
 8007196:	bf00      	nop

08007198 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8007198:	b530      	push	{r4, r5, lr}
 800719a:	461c      	mov	r4, r3
 800719c:	b083      	sub	sp, #12
 800719e:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 80071a2:	b303      	cbz	r3, 80071e6 <osMessageQueueGet+0x4e>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80071a4:	3c00      	subs	r4, #0
 80071a6:	bf18      	it	ne
 80071a8:	2401      	movne	r4, #1
 80071aa:	2900      	cmp	r1, #0
 80071ac:	bf08      	it	eq
 80071ae:	f044 0401 	orreq.w	r4, r4, #1
 80071b2:	bb5c      	cbnz	r4, 800720c <osMessageQueueGet+0x74>
 80071b4:	fab0 f480 	clz	r4, r0
 80071b8:	0964      	lsrs	r4, r4, #5
 80071ba:	b338      	cbz	r0, 800720c <osMessageQueueGet+0x74>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80071bc:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 80071be:	9401      	str	r4, [sp, #4]
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80071c0:	f000 fdd6 	bl	8007d70 <xQueueReceiveFromISR>
 80071c4:	2801      	cmp	r0, #1
 80071c6:	d11d      	bne.n	8007204 <osMessageQueueGet+0x6c>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 80071c8:	9b01      	ldr	r3, [sp, #4]
 80071ca:	b1c3      	cbz	r3, 80071fe <osMessageQueueGet+0x66>
 80071cc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80071d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071d4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80071d8:	f3bf 8f4f 	dsb	sy
 80071dc:	f3bf 8f6f 	isb	sy
  stat = osOK;
 80071e0:	4620      	mov	r0, r4
      }
    }
  }

  return (stat);
}
 80071e2:	b003      	add	sp, #12
 80071e4:	bd30      	pop	{r4, r5, pc}
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80071e6:	b188      	cbz	r0, 800720c <osMessageQueueGet+0x74>
 80071e8:	b181      	cbz	r1, 800720c <osMessageQueueGet+0x74>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80071ea:	4622      	mov	r2, r4
 80071ec:	f000 fc02 	bl	80079f4 <xQueueReceive>
 80071f0:	2801      	cmp	r0, #1
 80071f2:	d004      	beq.n	80071fe <osMessageQueueGet+0x66>
        if (timeout != 0U) {
 80071f4:	b134      	cbz	r4, 8007204 <osMessageQueueGet+0x6c>
          stat = osErrorTimeout;
 80071f6:	f06f 0001 	mvn.w	r0, #1
}
 80071fa:	b003      	add	sp, #12
 80071fc:	bd30      	pop	{r4, r5, pc}
  stat = osOK;
 80071fe:	2000      	movs	r0, #0
}
 8007200:	b003      	add	sp, #12
 8007202:	bd30      	pop	{r4, r5, pc}
          stat = osErrorResource;
 8007204:	f06f 0002 	mvn.w	r0, #2
}
 8007208:	b003      	add	sp, #12
 800720a:	bd30      	pop	{r4, r5, pc}
      stat = osErrorParameter;
 800720c:	f06f 0003 	mvn.w	r0, #3
 8007210:	e7e7      	b.n	80071e2 <osMessageQueueGet+0x4a>
 8007212:	bf00      	nop

08007214 <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007214:	4b05      	ldr	r3, [pc, #20]	; (800722c <vApplicationGetIdleTaskMemory+0x18>)
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007216:	b410      	push	{r4}
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007218:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800721a:	f44f 7300 	mov.w	r3, #512	; 0x200
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800721e:	4c04      	ldr	r4, [pc, #16]	; (8007230 <vApplicationGetIdleTaskMemory+0x1c>)
 8007220:	600c      	str	r4, [r1, #0]
}
 8007222:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007226:	6013      	str	r3, [r2, #0]
}
 8007228:	4770      	bx	lr
 800722a:	bf00      	nop
 800722c:	24000ac4 	.word	0x24000ac4
 8007230:	240002c4 	.word	0x240002c4

08007234 <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007234:	4b05      	ldr	r3, [pc, #20]	; (800724c <vApplicationGetTimerTaskMemory+0x18>)
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007236:	b410      	push	{r4}
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007238:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800723a:	f44f 6380 	mov.w	r3, #1024	; 0x400
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800723e:	4c04      	ldr	r4, [pc, #16]	; (8007250 <vApplicationGetTimerTaskMemory+0x1c>)
 8007240:	600c      	str	r4, [r1, #0]
}
 8007242:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007246:	6013      	str	r3, [r2, #0]
}
 8007248:	4770      	bx	lr
 800724a:	bf00      	nop
 800724c:	24001b70 	.word	0x24001b70
 8007250:	24000b70 	.word	0x24000b70

08007254 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007254:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007258:	f04f 31ff 	mov.w	r1, #4294967295
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800725c:	2200      	movs	r2, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800725e:	6081      	str	r1, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007260:	6002      	str	r2, [r0, #0]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007262:	6043      	str	r3, [r0, #4]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007264:	e9c0 3303 	strd	r3, r3, [r0, #12]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007268:	4770      	bx	lr
 800726a:	bf00      	nop

0800726c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800726c:	2300      	movs	r3, #0
 800726e:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007270:	4770      	bx	lr
 8007272:	bf00      	nop

08007274 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8007274:	6843      	ldr	r3, [r0, #4]
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8007276:	6802      	ldr	r2, [r0, #0]
{
 8007278:	b410      	push	{r4}
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800727a:	689c      	ldr	r4, [r3, #8]
	( pxList->uxNumberOfItems )++;
 800727c:	3201      	adds	r2, #1
	pxNewListItem->pxNext = pxIndex;
 800727e:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007280:	608c      	str	r4, [r1, #8]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007282:	689c      	ldr	r4, [r3, #8]
 8007284:	6061      	str	r1, [r4, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007286:	6099      	str	r1, [r3, #8]
}
 8007288:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxNewListItem->pxContainer = pxList;
 800728c:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800728e:	6002      	str	r2, [r0, #0]
}
 8007290:	4770      	bx	lr
 8007292:	bf00      	nop

08007294 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007294:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007296:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007298:	1c6b      	adds	r3, r5, #1
 800729a:	d010      	beq.n	80072be <vListInsert+0x2a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800729c:	f100 0308 	add.w	r3, r0, #8
 80072a0:	461c      	mov	r4, r3
 80072a2:	685b      	ldr	r3, [r3, #4]
 80072a4:	681a      	ldr	r2, [r3, #0]
 80072a6:	42aa      	cmp	r2, r5
 80072a8:	d9fa      	bls.n	80072a0 <vListInsert+0xc>

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 80072aa:	6802      	ldr	r2, [r0, #0]
	pxNewListItem->pxNext = pxIterator->pxNext;
 80072ac:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
 80072ae:	3201      	adds	r2, #1
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80072b0:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80072b2:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 80072b4:	6061      	str	r1, [r4, #4]
	pxNewListItem->pxContainer = pxList;
 80072b6:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80072b8:	6002      	str	r2, [r0, #0]
}
 80072ba:	bc30      	pop	{r4, r5}
 80072bc:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 80072be:	6904      	ldr	r4, [r0, #16]
	pxNewListItem->pxNext = pxIterator->pxNext;
 80072c0:	6863      	ldr	r3, [r4, #4]
 80072c2:	e7f2      	b.n	80072aa <vListInsert+0x16>

080072c4 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80072c4:	6903      	ldr	r3, [r0, #16]
{
 80072c6:	b410      	push	{r4}

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80072c8:	685c      	ldr	r4, [r3, #4]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80072ca:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
	if( pxList->pxIndex == pxItemToRemove )
 80072ce:	4284      	cmp	r4, r0

	pxItemToRemove->pxContainer = NULL;
	( pxList->uxNumberOfItems )--;

	return pxList->uxNumberOfItems;
}
 80072d0:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80072d4:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80072d6:	6051      	str	r1, [r2, #4]
	pxItemToRemove->pxContainer = NULL;
 80072d8:	f04f 0100 	mov.w	r1, #0
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80072dc:	bf08      	it	eq
 80072de:	605a      	streq	r2, [r3, #4]
	( pxList->uxNumberOfItems )--;
 80072e0:	681a      	ldr	r2, [r3, #0]
	pxItemToRemove->pxContainer = NULL;
 80072e2:	6101      	str	r1, [r0, #16]
	( pxList->uxNumberOfItems )--;
 80072e4:	3a01      	subs	r2, #1
 80072e6:	601a      	str	r2, [r3, #0]
	return pxList->uxNumberOfItems;
 80072e8:	6818      	ldr	r0, [r3, #0]
}
 80072ea:	4770      	bx	lr

080072ec <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80072ec:	b570      	push	{r4, r5, r6, lr}
 80072ee:	4615      	mov	r5, r2

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80072f0:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 80072f2:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80072f4:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80072f6:	b92a      	cbnz	r2, 8007304 <prvCopyDataToQueue+0x18>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80072f8:	6805      	ldr	r5, [r0, #0]
 80072fa:	b365      	cbz	r5, 8007356 <prvCopyDataToQueue+0x6a>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80072fc:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
 80072fe:	4610      	mov	r0, r2
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007300:	63a6      	str	r6, [r4, #56]	; 0x38

	return xReturn;
}
 8007302:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8007304:	b97d      	cbnz	r5, 8007326 <prvCopyDataToQueue+0x3a>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007306:	6840      	ldr	r0, [r0, #4]
 8007308:	f00a fc08 	bl	8011b1c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800730c:	6863      	ldr	r3, [r4, #4]
 800730e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8007310:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007312:	68a2      	ldr	r2, [r4, #8]
 8007314:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007316:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007318:	d319      	bcc.n	800734e <prvCopyDataToQueue+0x62>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800731a:	6822      	ldr	r2, [r4, #0]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800731c:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
 800731e:	4628      	mov	r0, r5
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007320:	6062      	str	r2, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007322:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8007324:	bd70      	pop	{r4, r5, r6, pc}
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007326:	68c0      	ldr	r0, [r0, #12]
 8007328:	f00a fbf8 	bl	8011b1c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800732c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800732e:	68e3      	ldr	r3, [r4, #12]
 8007330:	4251      	negs	r1, r2
 8007332:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007334:	6822      	ldr	r2, [r4, #0]
 8007336:	4293      	cmp	r3, r2
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007338:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800733a:	d202      	bcs.n	8007342 <prvCopyDataToQueue+0x56>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800733c:	68a3      	ldr	r3, [r4, #8]
 800733e:	440b      	add	r3, r1
 8007340:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8007342:	2d02      	cmp	r5, #2
 8007344:	d00d      	beq.n	8007362 <prvCopyDataToQueue+0x76>
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007346:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
 8007348:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800734a:	63a6      	str	r6, [r4, #56]	; 0x38
}
 800734c:	bd70      	pop	{r4, r5, r6, pc}
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800734e:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
 8007350:	4628      	mov	r0, r5
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007352:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8007354:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007356:	6880      	ldr	r0, [r0, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007358:	3601      	adds	r6, #1
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800735a:	f001 fb27 	bl	80089ac <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800735e:	60a5      	str	r5, [r4, #8]
 8007360:	e7ce      	b.n	8007300 <prvCopyDataToQueue+0x14>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007362:	2e01      	cmp	r6, #1
BaseType_t xReturn = pdFALSE;
 8007364:	f04f 0000 	mov.w	r0, #0
 8007368:	bf38      	it	cc
 800736a:	2601      	movcc	r6, #1
 800736c:	e7c8      	b.n	8007300 <prvCopyDataToQueue+0x14>
 800736e:	bf00      	nop

08007370 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007370:	b570      	push	{r4, r5, r6, lr}
 8007372:	4605      	mov	r5, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007374:	f001 fe3e 	bl	8008ff4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007378:	f895 3045 	ldrb.w	r3, [r5, #69]	; 0x45
 800737c:	b25c      	sxtb	r4, r3

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800737e:	2c00      	cmp	r4, #0
 8007380:	dd14      	ble.n	80073ac <prvUnlockQueue+0x3c>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007382:	f105 0624 	add.w	r6, r5, #36	; 0x24
 8007386:	e003      	b.n	8007390 <prvUnlockQueue+0x20>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007388:	1e63      	subs	r3, r4, #1
 800738a:	b2da      	uxtb	r2, r3
 800738c:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800738e:	b16a      	cbz	r2, 80073ac <prvUnlockQueue+0x3c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007390:	6a6b      	ldr	r3, [r5, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007392:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007394:	b153      	cbz	r3, 80073ac <prvUnlockQueue+0x3c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007396:	f001 fa09 	bl	80087ac <xTaskRemoveFromEventList>
 800739a:	2800      	cmp	r0, #0
 800739c:	d0f4      	beq.n	8007388 <prvUnlockQueue+0x18>
						vTaskMissedYield();
 800739e:	f001 faa3 	bl	80088e8 <vTaskMissedYield>
			--cTxLock;
 80073a2:	1e63      	subs	r3, r4, #1
 80073a4:	b2da      	uxtb	r2, r3
 80073a6:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80073a8:	2a00      	cmp	r2, #0
 80073aa:	d1f1      	bne.n	8007390 <prvUnlockQueue+0x20>
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80073ac:	23ff      	movs	r3, #255	; 0xff
 80073ae:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80073b2:	f001 fe41 	bl	8009038 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80073b6:	f001 fe1d 	bl	8008ff4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80073ba:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
 80073be:	b25c      	sxtb	r4, r3

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80073c0:	2c00      	cmp	r4, #0
 80073c2:	dd14      	ble.n	80073ee <prvUnlockQueue+0x7e>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80073c4:	f105 0610 	add.w	r6, r5, #16
 80073c8:	e003      	b.n	80073d2 <prvUnlockQueue+0x62>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80073ca:	1e63      	subs	r3, r4, #1
 80073cc:	b2da      	uxtb	r2, r3
 80073ce:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80073d0:	b16a      	cbz	r2, 80073ee <prvUnlockQueue+0x7e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80073d2:	692b      	ldr	r3, [r5, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80073d4:	4630      	mov	r0, r6
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80073d6:	b153      	cbz	r3, 80073ee <prvUnlockQueue+0x7e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80073d8:	f001 f9e8 	bl	80087ac <xTaskRemoveFromEventList>
 80073dc:	2800      	cmp	r0, #0
 80073de:	d0f4      	beq.n	80073ca <prvUnlockQueue+0x5a>
					vTaskMissedYield();
 80073e0:	f001 fa82 	bl	80088e8 <vTaskMissedYield>
				--cRxLock;
 80073e4:	1e63      	subs	r3, r4, #1
 80073e6:	b2da      	uxtb	r2, r3
 80073e8:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80073ea:	2a00      	cmp	r2, #0
 80073ec:	d1f1      	bne.n	80073d2 <prvUnlockQueue+0x62>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80073ee:	23ff      	movs	r3, #255	; 0xff
 80073f0:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
}
 80073f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 80073f8:	f001 be1e 	b.w	8009038 <vPortExitCritical>

080073fc <xQueueGenericReset>:
{
 80073fc:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 80073fe:	b1e0      	cbz	r0, 800743a <xQueueGenericReset+0x3e>
 8007400:	4604      	mov	r4, r0
 8007402:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
 8007404:	f001 fdf6 	bl	8008ff4 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007408:	6822      	ldr	r2, [r4, #0]
 800740a:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	; 0x3c
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800740e:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007410:	fb01 f303 	mul.w	r3, r1, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007414:	1a59      	subs	r1, r3, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007416:	4413      	add	r3, r2
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007418:	440a      	add	r2, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800741a:	60a3      	str	r3, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800741c:	2100      	movs	r1, #0
		pxQueue->cRxLock = queueUNLOCKED;
 800741e:	23ff      	movs	r3, #255	; 0xff
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007420:	60e2      	str	r2, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007422:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 8007424:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007428:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 800742c:	b975      	cbnz	r5, 800744c <xQueueGenericReset+0x50>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800742e:	6923      	ldr	r3, [r4, #16]
 8007430:	b9c3      	cbnz	r3, 8007464 <xQueueGenericReset+0x68>
	taskEXIT_CRITICAL();
 8007432:	f001 fe01 	bl	8009038 <vPortExitCritical>
}
 8007436:	2001      	movs	r0, #1
 8007438:	bd38      	pop	{r3, r4, r5, pc}

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800743a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800743e:	f383 8811 	msr	BASEPRI, r3
 8007442:	f3bf 8f6f 	isb	sy
 8007446:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800744a:	e7fe      	b.n	800744a <xQueueGenericReset+0x4e>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800744c:	f104 0010 	add.w	r0, r4, #16
 8007450:	f7ff ff00 	bl	8007254 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007454:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007458:	f7ff fefc 	bl	8007254 <vListInitialise>
	taskEXIT_CRITICAL();
 800745c:	f001 fdec 	bl	8009038 <vPortExitCritical>
}
 8007460:	2001      	movs	r0, #1
 8007462:	bd38      	pop	{r3, r4, r5, pc}
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007464:	f104 0010 	add.w	r0, r4, #16
 8007468:	f001 f9a0 	bl	80087ac <xTaskRemoveFromEventList>
 800746c:	2800      	cmp	r0, #0
 800746e:	d0e0      	beq.n	8007432 <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 8007470:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007474:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007478:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800747c:	f3bf 8f4f 	dsb	sy
 8007480:	f3bf 8f6f 	isb	sy
 8007484:	e7d5      	b.n	8007432 <xQueueGenericReset+0x36>
 8007486:	bf00      	nop

08007488 <xQueueGenericCreateStatic>:
	{
 8007488:	b530      	push	{r4, r5, lr}
 800748a:	b085      	sub	sp, #20
 800748c:	f89d 4020 	ldrb.w	r4, [sp, #32]
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007490:	b940      	cbnz	r0, 80074a4 <xQueueGenericCreateStatic+0x1c>
 8007492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007496:	f383 8811 	msr	BASEPRI, r3
 800749a:	f3bf 8f6f 	isb	sy
 800749e:	f3bf 8f4f 	dsb	sy
 80074a2:	e7fe      	b.n	80074a2 <xQueueGenericCreateStatic+0x1a>
		configASSERT( pxStaticQueue != NULL );
 80074a4:	b153      	cbz	r3, 80074bc <xQueueGenericCreateStatic+0x34>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80074a6:	b30a      	cbz	r2, 80074ec <xQueueGenericCreateStatic+0x64>
 80074a8:	b989      	cbnz	r1, 80074ce <xQueueGenericCreateStatic+0x46>
 80074aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074ae:	f383 8811 	msr	BASEPRI, r3
 80074b2:	f3bf 8f6f 	isb	sy
 80074b6:	f3bf 8f4f 	dsb	sy
 80074ba:	e7fe      	b.n	80074ba <xQueueGenericCreateStatic+0x32>
 80074bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074c0:	f383 8811 	msr	BASEPRI, r3
 80074c4:	f3bf 8f6f 	isb	sy
 80074c8:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
 80074cc:	e7fe      	b.n	80074cc <xQueueGenericCreateStatic+0x44>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80074ce:	b16a      	cbz	r2, 80074ec <xQueueGenericCreateStatic+0x64>
			volatile size_t xSize = sizeof( StaticQueue_t );
 80074d0:	2550      	movs	r5, #80	; 0x50
 80074d2:	9503      	str	r5, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 80074d4:	9d03      	ldr	r5, [sp, #12]
 80074d6:	2d50      	cmp	r5, #80	; 0x50
 80074d8:	d013      	beq.n	8007502 <xQueueGenericCreateStatic+0x7a>
 80074da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074de:	f383 8811 	msr	BASEPRI, r3
 80074e2:	f3bf 8f6f 	isb	sy
 80074e6:	f3bf 8f4f 	dsb	sy
 80074ea:	e7fe      	b.n	80074ea <xQueueGenericCreateStatic+0x62>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80074ec:	2900      	cmp	r1, #0
 80074ee:	d0ef      	beq.n	80074d0 <xQueueGenericCreateStatic+0x48>
 80074f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074f4:	f383 8811 	msr	BASEPRI, r3
 80074f8:	f3bf 8f6f 	isb	sy
 80074fc:	f3bf 8f4f 	dsb	sy
 8007500:	e7fe      	b.n	8007500 <xQueueGenericCreateStatic+0x78>
	if( uxItemSize == ( UBaseType_t ) 0 )
 8007502:	2900      	cmp	r1, #0
 8007504:	bf08      	it	eq
 8007506:	461a      	moveq	r2, r3
	pxNewQueue->uxItemSize = uxItemSize;
 8007508:	6419      	str	r1, [r3, #64]	; 0x40
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800750a:	2101      	movs	r1, #1
	pxNewQueue->uxLength = uxQueueLength;
 800750c:	63d8      	str	r0, [r3, #60]	; 0x3c
 800750e:	601a      	str	r2, [r3, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007510:	4618      	mov	r0, r3
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007512:	f883 1046 	strb.w	r1, [r3, #70]	; 0x46
 8007516:	9301      	str	r3, [sp, #4]
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007518:	9a03      	ldr	r2, [sp, #12]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800751a:	f7ff ff6f 	bl	80073fc <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800751e:	9b01      	ldr	r3, [sp, #4]
	}
 8007520:	4618      	mov	r0, r3
		pxNewQueue->ucQueueType = ucQueueType;
 8007522:	f883 404c 	strb.w	r4, [r3, #76]	; 0x4c
	}
 8007526:	b005      	add	sp, #20
 8007528:	bd30      	pop	{r4, r5, pc}
 800752a:	bf00      	nop

0800752c <xQueueGenericCreate>:
	{
 800752c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800752e:	b940      	cbnz	r0, 8007542 <xQueueGenericCreate+0x16>
 8007530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007534:	f383 8811 	msr	BASEPRI, r3
 8007538:	f3bf 8f6f 	isb	sy
 800753c:	f3bf 8f4f 	dsb	sy
 8007540:	e7fe      	b.n	8007540 <xQueueGenericCreate+0x14>
 8007542:	4604      	mov	r4, r0
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007544:	fb01 f000 	mul.w	r0, r1, r0
 8007548:	460d      	mov	r5, r1
 800754a:	4616      	mov	r6, r2
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800754c:	3050      	adds	r0, #80	; 0x50
 800754e:	f001 fecd 	bl	80092ec <pvPortMalloc>
		if( pxNewQueue != NULL )
 8007552:	4607      	mov	r7, r0
 8007554:	b170      	cbz	r0, 8007574 <xQueueGenericCreate+0x48>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007556:	2300      	movs	r3, #0
 8007558:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 800755c:	b165      	cbz	r5, 8007578 <xQueueGenericCreate+0x4c>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800755e:	f100 0350 	add.w	r3, r0, #80	; 0x50
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007562:	2101      	movs	r1, #1
 8007564:	4638      	mov	r0, r7
 8007566:	603b      	str	r3, [r7, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 8007568:	e9c7 450f 	strd	r4, r5, [r7, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800756c:	f7ff ff46 	bl	80073fc <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8007570:	f887 604c 	strb.w	r6, [r7, #76]	; 0x4c
	}
 8007574:	4638      	mov	r0, r7
 8007576:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007578:	4603      	mov	r3, r0
 800757a:	e7f2      	b.n	8007562 <xQueueGenericCreate+0x36>

0800757c <xQueueCreateCountingSemaphoreStatic>:
		configASSERT( uxMaxCount != 0 );
 800757c:	b940      	cbnz	r0, 8007590 <xQueueCreateCountingSemaphoreStatic+0x14>
 800757e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007582:	f383 8811 	msr	BASEPRI, r3
 8007586:	f3bf 8f6f 	isb	sy
 800758a:	f3bf 8f4f 	dsb	sy
 800758e:	e7fe      	b.n	800758e <xQueueCreateCountingSemaphoreStatic+0x12>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007590:	4288      	cmp	r0, r1
	{
 8007592:	b510      	push	{r4, lr}
 8007594:	460c      	mov	r4, r1
 8007596:	b082      	sub	sp, #8
		configASSERT( uxInitialCount <= uxMaxCount );
 8007598:	d208      	bcs.n	80075ac <xQueueCreateCountingSemaphoreStatic+0x30>
 800759a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800759e:	f383 8811 	msr	BASEPRI, r3
 80075a2:	f3bf 8f6f 	isb	sy
 80075a6:	f3bf 8f4f 	dsb	sy
 80075aa:	e7fe      	b.n	80075aa <xQueueCreateCountingSemaphoreStatic+0x2e>
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80075ac:	2102      	movs	r1, #2
 80075ae:	4613      	mov	r3, r2
 80075b0:	2200      	movs	r2, #0
 80075b2:	9100      	str	r1, [sp, #0]
 80075b4:	4611      	mov	r1, r2
 80075b6:	f7ff ff67 	bl	8007488 <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 80075ba:	b100      	cbz	r0, 80075be <xQueueCreateCountingSemaphoreStatic+0x42>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80075bc:	6384      	str	r4, [r0, #56]	; 0x38
	}
 80075be:	b002      	add	sp, #8
 80075c0:	bd10      	pop	{r4, pc}
 80075c2:	bf00      	nop

080075c4 <xQueueCreateCountingSemaphore>:
		configASSERT( uxMaxCount != 0 );
 80075c4:	b940      	cbnz	r0, 80075d8 <xQueueCreateCountingSemaphore+0x14>
 80075c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075ca:	f383 8811 	msr	BASEPRI, r3
 80075ce:	f3bf 8f6f 	isb	sy
 80075d2:	f3bf 8f4f 	dsb	sy
 80075d6:	e7fe      	b.n	80075d6 <xQueueCreateCountingSemaphore+0x12>
		configASSERT( uxInitialCount <= uxMaxCount );
 80075d8:	4288      	cmp	r0, r1
	{
 80075da:	b510      	push	{r4, lr}
 80075dc:	460c      	mov	r4, r1
		configASSERT( uxInitialCount <= uxMaxCount );
 80075de:	d208      	bcs.n	80075f2 <xQueueCreateCountingSemaphore+0x2e>
 80075e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075e4:	f383 8811 	msr	BASEPRI, r3
 80075e8:	f3bf 8f6f 	isb	sy
 80075ec:	f3bf 8f4f 	dsb	sy
 80075f0:	e7fe      	b.n	80075f0 <xQueueCreateCountingSemaphore+0x2c>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80075f2:	2202      	movs	r2, #2
 80075f4:	2100      	movs	r1, #0
 80075f6:	f7ff ff99 	bl	800752c <xQueueGenericCreate>
		if( xHandle != NULL )
 80075fa:	b100      	cbz	r0, 80075fe <xQueueCreateCountingSemaphore+0x3a>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80075fc:	6384      	str	r4, [r0, #56]	; 0x38
	}
 80075fe:	bd10      	pop	{r4, pc}

08007600 <xQueueGenericSend>:
{
 8007600:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007604:	b085      	sub	sp, #20
 8007606:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8007608:	2800      	cmp	r0, #0
 800760a:	d07e      	beq.n	800770a <xQueueGenericSend+0x10a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800760c:	460f      	mov	r7, r1
 800760e:	4604      	mov	r4, r0
 8007610:	461e      	mov	r6, r3
 8007612:	2900      	cmp	r1, #0
 8007614:	d069      	beq.n	80076ea <xQueueGenericSend+0xea>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007616:	2e02      	cmp	r6, #2
 8007618:	d10b      	bne.n	8007632 <xQueueGenericSend+0x32>
 800761a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800761c:	2b01      	cmp	r3, #1
 800761e:	d008      	beq.n	8007632 <xQueueGenericSend+0x32>
 8007620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007624:	f383 8811 	msr	BASEPRI, r3
 8007628:	f3bf 8f6f 	isb	sy
 800762c:	f3bf 8f4f 	dsb	sy
 8007630:	e7fe      	b.n	8007630 <xQueueGenericSend+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007632:	f001 f965 	bl	8008900 <xTaskGetSchedulerState>
 8007636:	2800      	cmp	r0, #0
 8007638:	d070      	beq.n	800771c <xQueueGenericSend+0x11c>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800763a:	f1a6 0802 	sub.w	r8, r6, #2
 800763e:	2500      	movs	r5, #0
 8007640:	fab8 f888 	clz	r8, r8
		prvLockQueue( pxQueue );
 8007644:	46a9      	mov	r9, r5
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007646:	ea4f 1858 	mov.w	r8, r8, lsr #5
 800764a:	e007      	b.n	800765c <xQueueGenericSend+0x5c>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800764c:	f001 fcf4 	bl	8009038 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8007650:	4620      	mov	r0, r4
 8007652:	f7ff fe8d 	bl	8007370 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007656:	f000 ffdb 	bl	8008610 <xTaskResumeAll>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800765a:	2501      	movs	r5, #1
		taskENTER_CRITICAL();
 800765c:	f001 fcca 	bl	8008ff4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007660:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8007662:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8007664:	4290      	cmp	r0, r2
 8007666:	d365      	bcc.n	8007734 <xQueueGenericSend+0x134>
 8007668:	f1b8 0f00 	cmp.w	r8, #0
 800766c:	d162      	bne.n	8007734 <xQueueGenericSend+0x134>
				if( xTicksToWait == ( TickType_t ) 0 )
 800766e:	9b01      	ldr	r3, [sp, #4]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d077      	beq.n	8007764 <xQueueGenericSend+0x164>
				else if( xEntryTimeSet == pdFALSE )
 8007674:	2d00      	cmp	r5, #0
 8007676:	d044      	beq.n	8007702 <xQueueGenericSend+0x102>
		taskEXIT_CRITICAL();
 8007678:	f001 fcde 	bl	8009038 <vPortExitCritical>
		vTaskSuspendAll();
 800767c:	f000 fe74 	bl	8008368 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007680:	f001 fcb8 	bl	8008ff4 <vPortEnterCritical>
 8007684:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8007688:	2bff      	cmp	r3, #255	; 0xff
 800768a:	d101      	bne.n	8007690 <xQueueGenericSend+0x90>
 800768c:	f884 9044 	strb.w	r9, [r4, #68]	; 0x44
 8007690:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8007694:	2bff      	cmp	r3, #255	; 0xff
 8007696:	d101      	bne.n	800769c <xQueueGenericSend+0x9c>
 8007698:	f884 9045 	strb.w	r9, [r4, #69]	; 0x45
 800769c:	f001 fccc 	bl	8009038 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80076a0:	a901      	add	r1, sp, #4
 80076a2:	a802      	add	r0, sp, #8
 80076a4:	f001 f8d8 	bl	8008858 <xTaskCheckForTimeOut>
 80076a8:	2800      	cmp	r0, #0
 80076aa:	d15f      	bne.n	800776c <xQueueGenericSend+0x16c>
	taskENTER_CRITICAL();
 80076ac:	f001 fca2 	bl	8008ff4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80076b0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80076b2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80076b4:	429a      	cmp	r2, r3
 80076b6:	d1c9      	bne.n	800764c <xQueueGenericSend+0x4c>
	taskEXIT_CRITICAL();
 80076b8:	f001 fcbe 	bl	8009038 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80076bc:	9901      	ldr	r1, [sp, #4]
 80076be:	f104 0010 	add.w	r0, r4, #16
 80076c2:	f001 f83b 	bl	800873c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80076c6:	4620      	mov	r0, r4
 80076c8:	f7ff fe52 	bl	8007370 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80076cc:	f000 ffa0 	bl	8008610 <xTaskResumeAll>
 80076d0:	2800      	cmp	r0, #0
 80076d2:	d1c2      	bne.n	800765a <xQueueGenericSend+0x5a>
					portYIELD_WITHIN_API();
 80076d4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80076d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076dc:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80076e0:	f3bf 8f4f 	dsb	sy
 80076e4:	f3bf 8f6f 	isb	sy
 80076e8:	e7b7      	b.n	800765a <xQueueGenericSend+0x5a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80076ea:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d092      	beq.n	8007616 <xQueueGenericSend+0x16>
 80076f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076f4:	f383 8811 	msr	BASEPRI, r3
 80076f8:	f3bf 8f6f 	isb	sy
 80076fc:	f3bf 8f4f 	dsb	sy
 8007700:	e7fe      	b.n	8007700 <xQueueGenericSend+0x100>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007702:	a802      	add	r0, sp, #8
 8007704:	f001 f89c 	bl	8008840 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007708:	e7b6      	b.n	8007678 <xQueueGenericSend+0x78>
 800770a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800770e:	f383 8811 	msr	BASEPRI, r3
 8007712:	f3bf 8f6f 	isb	sy
 8007716:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800771a:	e7fe      	b.n	800771a <xQueueGenericSend+0x11a>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800771c:	9b01      	ldr	r3, [sp, #4]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d08b      	beq.n	800763a <xQueueGenericSend+0x3a>
 8007722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007726:	f383 8811 	msr	BASEPRI, r3
 800772a:	f3bf 8f6f 	isb	sy
 800772e:	f3bf 8f4f 	dsb	sy
 8007732:	e7fe      	b.n	8007732 <xQueueGenericSend+0x132>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007734:	4632      	mov	r2, r6
 8007736:	4639      	mov	r1, r7
 8007738:	4620      	mov	r0, r4
 800773a:	f7ff fdd7 	bl	80072ec <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800773e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007740:	b9db      	cbnz	r3, 800777a <xQueueGenericSend+0x17a>
					else if( xYieldRequired != pdFALSE )
 8007742:	b148      	cbz	r0, 8007758 <xQueueGenericSend+0x158>
						queueYIELD_IF_USING_PREEMPTION();
 8007744:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007748:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800774c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8007750:	f3bf 8f4f 	dsb	sy
 8007754:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8007758:	f001 fc6e 	bl	8009038 <vPortExitCritical>
				return pdPASS;
 800775c:	2001      	movs	r0, #1
}
 800775e:	b005      	add	sp, #20
 8007760:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					taskEXIT_CRITICAL();
 8007764:	f001 fc68 	bl	8009038 <vPortExitCritical>
					return errQUEUE_FULL;
 8007768:	4640      	mov	r0, r8
 800776a:	e7f8      	b.n	800775e <xQueueGenericSend+0x15e>
			prvUnlockQueue( pxQueue );
 800776c:	4620      	mov	r0, r4
 800776e:	f7ff fdff 	bl	8007370 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007772:	f000 ff4d 	bl	8008610 <xTaskResumeAll>
			return errQUEUE_FULL;
 8007776:	2000      	movs	r0, #0
 8007778:	e7f1      	b.n	800775e <xQueueGenericSend+0x15e>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800777a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800777e:	f001 f815 	bl	80087ac <xTaskRemoveFromEventList>
 8007782:	2800      	cmp	r0, #0
 8007784:	d0e8      	beq.n	8007758 <xQueueGenericSend+0x158>
 8007786:	e7dd      	b.n	8007744 <xQueueGenericSend+0x144>

08007788 <xQueueCreateMutexStatic>:
		configASSERT( pxStaticQueue != NULL );
 8007788:	b179      	cbz	r1, 80077aa <xQueueCreateMutexStatic+0x22>
			volatile size_t xSize = sizeof( StaticQueue_t );
 800778a:	2350      	movs	r3, #80	; 0x50
	{
 800778c:	b570      	push	{r4, r5, r6, lr}
 800778e:	b082      	sub	sp, #8
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007790:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007792:	9b01      	ldr	r3, [sp, #4]
 8007794:	2b50      	cmp	r3, #80	; 0x50
 8007796:	d011      	beq.n	80077bc <xQueueCreateMutexStatic+0x34>
 8007798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800779c:	f383 8811 	msr	BASEPRI, r3
 80077a0:	f3bf 8f6f 	isb	sy
 80077a4:	f3bf 8f4f 	dsb	sy
 80077a8:	e7fe      	b.n	80077a8 <xQueueCreateMutexStatic+0x20>
 80077aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077ae:	f383 8811 	msr	BASEPRI, r3
 80077b2:	f3bf 8f6f 	isb	sy
 80077b6:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
 80077ba:	e7fe      	b.n	80077ba <xQueueCreateMutexStatic+0x32>
 80077bc:	460c      	mov	r4, r1
	pxNewQueue->uxItemSize = uxItemSize;
 80077be:	2600      	movs	r6, #0
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80077c0:	2101      	movs	r1, #1
 80077c2:	4605      	mov	r5, r0
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80077c4:	6024      	str	r4, [r4, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80077c6:	4620      	mov	r0, r4
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80077c8:	f884 1046 	strb.w	r1, [r4, #70]	; 0x46
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80077cc:	9a01      	ldr	r2, [sp, #4]
	pxNewQueue->uxItemSize = uxItemSize;
 80077ce:	e9c4 160f 	strd	r1, r6, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80077d2:	f7ff fe13 	bl	80073fc <xQueueGenericReset>
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80077d6:	4633      	mov	r3, r6
 80077d8:	4632      	mov	r2, r6
 80077da:	4631      	mov	r1, r6
 80077dc:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 80077de:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80077e2:	60a6      	str	r6, [r4, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80077e4:	6026      	str	r6, [r4, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80077e6:	60e6      	str	r6, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80077e8:	f7ff ff0a 	bl	8007600 <xQueueGenericSend>
	}
 80077ec:	4620      	mov	r0, r4
 80077ee:	b002      	add	sp, #8
 80077f0:	bd70      	pop	{r4, r5, r6, pc}
 80077f2:	bf00      	nop

080077f4 <xQueueGiveMutexRecursive>:
	{
 80077f4:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxMutex );
 80077f6:	b138      	cbz	r0, 8007808 <xQueueGiveMutexRecursive+0x14>
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80077f8:	6885      	ldr	r5, [r0, #8]
 80077fa:	4604      	mov	r4, r0
 80077fc:	f001 f87a 	bl	80088f4 <xTaskGetCurrentTaskHandle>
 8007800:	4285      	cmp	r5, r0
 8007802:	d00a      	beq.n	800781a <xQueueGiveMutexRecursive+0x26>
			xReturn = pdFAIL;
 8007804:	2000      	movs	r0, #0
	}
 8007806:	bd38      	pop	{r3, r4, r5, pc}
 8007808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800780c:	f383 8811 	msr	BASEPRI, r3
 8007810:	f3bf 8f6f 	isb	sy
 8007814:	f3bf 8f4f 	dsb	sy
		configASSERT( pxMutex );
 8007818:	e7fe      	b.n	8007818 <xQueueGiveMutexRecursive+0x24>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800781a:	68e3      	ldr	r3, [r4, #12]
 800781c:	3b01      	subs	r3, #1
 800781e:	60e3      	str	r3, [r4, #12]
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8007820:	b10b      	cbz	r3, 8007826 <xQueueGiveMutexRecursive+0x32>
			xReturn = pdPASS;
 8007822:	2001      	movs	r0, #1
	}
 8007824:	bd38      	pop	{r3, r4, r5, pc}
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8007826:	461a      	mov	r2, r3
 8007828:	4619      	mov	r1, r3
 800782a:	4620      	mov	r0, r4
 800782c:	f7ff fee8 	bl	8007600 <xQueueGenericSend>
			xReturn = pdPASS;
 8007830:	2001      	movs	r0, #1
	}
 8007832:	bd38      	pop	{r3, r4, r5, pc}

08007834 <xQueueCreateMutex>:
	{
 8007834:	b570      	push	{r4, r5, r6, lr}
 8007836:	4605      	mov	r5, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007838:	2050      	movs	r0, #80	; 0x50
 800783a:	f001 fd57 	bl	80092ec <pvPortMalloc>
		if( pxNewQueue != NULL )
 800783e:	4604      	mov	r4, r0
 8007840:	b198      	cbz	r0, 800786a <xQueueCreateMutex+0x36>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007842:	2600      	movs	r6, #0
	pxNewQueue->uxLength = uxQueueLength;
 8007844:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007846:	6020      	str	r0, [r4, #0]
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007848:	f880 6046 	strb.w	r6, [r0, #70]	; 0x46
	pxNewQueue->uxItemSize = uxItemSize;
 800784c:	e9c0 160f 	strd	r1, r6, [r0, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007850:	f7ff fdd4 	bl	80073fc <xQueueGenericReset>
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8007854:	4633      	mov	r3, r6
 8007856:	4632      	mov	r2, r6
 8007858:	4631      	mov	r1, r6
 800785a:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 800785c:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8007860:	60a6      	str	r6, [r4, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8007862:	6026      	str	r6, [r4, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8007864:	60e6      	str	r6, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8007866:	f7ff fecb 	bl	8007600 <xQueueGenericSend>
	}
 800786a:	4620      	mov	r0, r4
 800786c:	bd70      	pop	{r4, r5, r6, pc}
 800786e:	bf00      	nop

08007870 <xQueueGenericSendFromISR>:
	configASSERT( pxQueue );
 8007870:	2800      	cmp	r0, #0
 8007872:	d04e      	beq.n	8007912 <xQueueGenericSendFromISR+0xa2>
{
 8007874:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007878:	460e      	mov	r6, r1
 800787a:	4604      	mov	r4, r0
 800787c:	4617      	mov	r7, r2
 800787e:	461d      	mov	r5, r3
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007880:	b339      	cbz	r1, 80078d2 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007882:	2d02      	cmp	r5, #2
 8007884:	d10b      	bne.n	800789e <xQueueGenericSendFromISR+0x2e>
 8007886:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007888:	2b01      	cmp	r3, #1
 800788a:	d008      	beq.n	800789e <xQueueGenericSendFromISR+0x2e>
 800788c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007890:	f383 8811 	msr	BASEPRI, r3
 8007894:	f3bf 8f6f 	isb	sy
 8007898:	f3bf 8f4f 	dsb	sy
 800789c:	e7fe      	b.n	800789c <xQueueGenericSendFromISR+0x2c>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800789e:	f001 fcc5 	bl	800922c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80078a2:	f3ef 8811 	mrs	r8, BASEPRI
 80078a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078aa:	f383 8811 	msr	BASEPRI, r3
 80078ae:	f3bf 8f6f 	isb	sy
 80078b2:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80078b6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80078b8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80078ba:	429a      	cmp	r2, r3
 80078bc:	d315      	bcc.n	80078ea <xQueueGenericSendFromISR+0x7a>
 80078be:	f1a5 0002 	sub.w	r0, r5, #2
 80078c2:	fab0 f080 	clz	r0, r0
 80078c6:	0940      	lsrs	r0, r0, #5
 80078c8:	b978      	cbnz	r0, 80078ea <xQueueGenericSendFromISR+0x7a>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80078ca:	f388 8811 	msr	BASEPRI, r8
}
 80078ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80078d2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d0d4      	beq.n	8007882 <xQueueGenericSendFromISR+0x12>
	__asm volatile
 80078d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078dc:	f383 8811 	msr	BASEPRI, r3
 80078e0:	f3bf 8f6f 	isb	sy
 80078e4:	f3bf 8f4f 	dsb	sy
 80078e8:	e7fe      	b.n	80078e8 <xQueueGenericSendFromISR+0x78>
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80078ea:	462a      	mov	r2, r5
			const int8_t cTxLock = pxQueue->cTxLock;
 80078ec:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80078f0:	4631      	mov	r1, r6
 80078f2:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 80078f4:	b26d      	sxtb	r5, r5
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80078f6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80078f8:	f7ff fcf8 	bl	80072ec <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 80078fc:	1c6b      	adds	r3, r5, #1
 80078fe:	d011      	beq.n	8007924 <xQueueGenericSendFromISR+0xb4>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007900:	1c6b      	adds	r3, r5, #1
			xReturn = pdPASS;
 8007902:	2001      	movs	r0, #1
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007904:	b25b      	sxtb	r3, r3
 8007906:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	__asm volatile
 800790a:	f388 8811 	msr	BASEPRI, r8
}
 800790e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm volatile
 8007912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007916:	f383 8811 	msr	BASEPRI, r3
 800791a:	f3bf 8f6f 	isb	sy
 800791e:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8007922:	e7fe      	b.n	8007922 <xQueueGenericSendFromISR+0xb2>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007924:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007926:	b90b      	cbnz	r3, 800792c <xQueueGenericSendFromISR+0xbc>
			xReturn = pdPASS;
 8007928:	2001      	movs	r0, #1
 800792a:	e7ce      	b.n	80078ca <xQueueGenericSendFromISR+0x5a>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800792c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007930:	f000 ff3c 	bl	80087ac <xTaskRemoveFromEventList>
							if( pxHigherPriorityTaskWoken != NULL )
 8007934:	2800      	cmp	r0, #0
 8007936:	d0f7      	beq.n	8007928 <xQueueGenericSendFromISR+0xb8>
 8007938:	2f00      	cmp	r7, #0
 800793a:	d0f5      	beq.n	8007928 <xQueueGenericSendFromISR+0xb8>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800793c:	2301      	movs	r3, #1
			xReturn = pdPASS;
 800793e:	4618      	mov	r0, r3
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007940:	603b      	str	r3, [r7, #0]
 8007942:	e7c2      	b.n	80078ca <xQueueGenericSendFromISR+0x5a>

08007944 <xQueueGiveFromISR>:
	configASSERT( pxQueue );
 8007944:	b360      	cbz	r0, 80079a0 <xQueueGiveFromISR+0x5c>
	configASSERT( pxQueue->uxItemSize == 0 );
 8007946:	6c03      	ldr	r3, [r0, #64]	; 0x40
{
 8007948:	b570      	push	{r4, r5, r6, lr}
 800794a:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 800794c:	b143      	cbz	r3, 8007960 <xQueueGiveFromISR+0x1c>
 800794e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007952:	f383 8811 	msr	BASEPRI, r3
 8007956:	f3bf 8f6f 	isb	sy
 800795a:	f3bf 8f4f 	dsb	sy
 800795e:	e7fe      	b.n	800795e <xQueueGiveFromISR+0x1a>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8007960:	6803      	ldr	r3, [r0, #0]
 8007962:	460d      	mov	r5, r1
 8007964:	b32b      	cbz	r3, 80079b2 <xQueueGiveFromISR+0x6e>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007966:	f001 fc61 	bl	800922c <vPortValidateInterruptPriority>
	__asm volatile
 800796a:	f3ef 8611 	mrs	r6, BASEPRI
 800796e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007972:	f383 8811 	msr	BASEPRI, r3
 8007976:	f3bf 8f6f 	isb	sy
 800797a:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800797e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 8007980:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8007982:	429a      	cmp	r2, r3
 8007984:	d921      	bls.n	80079ca <xQueueGiveFromISR+0x86>
			const int8_t cTxLock = pxQueue->cTxLock;
 8007986:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800798a:	3301      	adds	r3, #1
			if( cTxLock == queueUNLOCKED )
 800798c:	2aff      	cmp	r2, #255	; 0xff
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800798e:	63a3      	str	r3, [r4, #56]	; 0x38
			const int8_t cTxLock = pxQueue->cTxLock;
 8007990:	b253      	sxtb	r3, r2
			if( cTxLock == queueUNLOCKED )
 8007992:	d01e      	beq.n	80079d2 <xQueueGiveFromISR+0x8e>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007994:	3301      	adds	r3, #1
			xReturn = pdPASS;
 8007996:	2001      	movs	r0, #1
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007998:	b25b      	sxtb	r3, r3
 800799a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800799e:	e015      	b.n	80079cc <xQueueGiveFromISR+0x88>
	__asm volatile
 80079a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079a4:	f383 8811 	msr	BASEPRI, r3
 80079a8:	f3bf 8f6f 	isb	sy
 80079ac:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 80079b0:	e7fe      	b.n	80079b0 <xQueueGiveFromISR+0x6c>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80079b2:	6883      	ldr	r3, [r0, #8]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d0d6      	beq.n	8007966 <xQueueGiveFromISR+0x22>
 80079b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079bc:	f383 8811 	msr	BASEPRI, r3
 80079c0:	f3bf 8f6f 	isb	sy
 80079c4:	f3bf 8f4f 	dsb	sy
 80079c8:	e7fe      	b.n	80079c8 <xQueueGiveFromISR+0x84>
			xReturn = errQUEUE_FULL;
 80079ca:	2000      	movs	r0, #0
	__asm volatile
 80079cc:	f386 8811 	msr	BASEPRI, r6
}
 80079d0:	bd70      	pop	{r4, r5, r6, pc}
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80079d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80079d4:	b90b      	cbnz	r3, 80079da <xQueueGiveFromISR+0x96>
			xReturn = pdPASS;
 80079d6:	2001      	movs	r0, #1
 80079d8:	e7f8      	b.n	80079cc <xQueueGiveFromISR+0x88>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80079da:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80079de:	f000 fee5 	bl	80087ac <xTaskRemoveFromEventList>
							if( pxHigherPriorityTaskWoken != NULL )
 80079e2:	2d00      	cmp	r5, #0
 80079e4:	d0f7      	beq.n	80079d6 <xQueueGiveFromISR+0x92>
 80079e6:	2800      	cmp	r0, #0
 80079e8:	d0f5      	beq.n	80079d6 <xQueueGiveFromISR+0x92>
								*pxHigherPriorityTaskWoken = pdTRUE;
 80079ea:	2301      	movs	r3, #1
			xReturn = pdPASS;
 80079ec:	4618      	mov	r0, r3
								*pxHigherPriorityTaskWoken = pdTRUE;
 80079ee:	602b      	str	r3, [r5, #0]
 80079f0:	e7ec      	b.n	80079cc <xQueueGiveFromISR+0x88>
 80079f2:	bf00      	nop

080079f4 <xQueueReceive>:
{
 80079f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80079f8:	b085      	sub	sp, #20
 80079fa:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 80079fc:	2800      	cmp	r0, #0
 80079fe:	f000 80a0 	beq.w	8007b42 <xQueueReceive+0x14e>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007a02:	460d      	mov	r5, r1
 8007a04:	4604      	mov	r4, r0
 8007a06:	2900      	cmp	r1, #0
 8007a08:	d047      	beq.n	8007a9a <xQueueReceive+0xa6>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007a0a:	f000 ff79 	bl	8008900 <xTaskGetSchedulerState>
 8007a0e:	2800      	cmp	r0, #0
 8007a10:	d04f      	beq.n	8007ab2 <xQueueReceive+0xbe>
		taskENTER_CRITICAL();
 8007a12:	f001 faef 	bl	8008ff4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007a16:	6ba6      	ldr	r6, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007a18:	2e00      	cmp	r6, #0
 8007a1a:	d17d      	bne.n	8007b18 <xQueueReceive+0x124>
				if( xTicksToWait == ( TickType_t ) 0 )
 8007a1c:	9b01      	ldr	r3, [sp, #4]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d035      	beq.n	8007a8e <xQueueReceive+0x9a>
		prvLockQueue( pxQueue );
 8007a22:	4637      	mov	r7, r6
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007a24:	f104 0824 	add.w	r8, r4, #36	; 0x24
					portYIELD_WITHIN_API();
 8007a28:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007a2c:	a802      	add	r0, sp, #8
 8007a2e:	f000 ff07 	bl	8008840 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8007a32:	f001 fb01 	bl	8009038 <vPortExitCritical>
		vTaskSuspendAll();
 8007a36:	f000 fc97 	bl	8008368 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007a3a:	f001 fadb 	bl	8008ff4 <vPortEnterCritical>
 8007a3e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8007a42:	2bff      	cmp	r3, #255	; 0xff
 8007a44:	d101      	bne.n	8007a4a <xQueueReceive+0x56>
 8007a46:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
 8007a4a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8007a4e:	2bff      	cmp	r3, #255	; 0xff
 8007a50:	d101      	bne.n	8007a56 <xQueueReceive+0x62>
 8007a52:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007a56:	f001 faef 	bl	8009038 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007a5a:	a901      	add	r1, sp, #4
 8007a5c:	a802      	add	r0, sp, #8
 8007a5e:	f000 fefb 	bl	8008858 <xTaskCheckForTimeOut>
 8007a62:	2800      	cmp	r0, #0
 8007a64:	d131      	bne.n	8007aca <xQueueReceive+0xd6>
	taskENTER_CRITICAL();
 8007a66:	f001 fac5 	bl	8008ff4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007a6a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d039      	beq.n	8007ae4 <xQueueReceive+0xf0>
	taskEXIT_CRITICAL();
 8007a70:	f001 fae2 	bl	8009038 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8007a74:	4620      	mov	r0, r4
 8007a76:	f7ff fc7b 	bl	8007370 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007a7a:	f000 fdc9 	bl	8008610 <xTaskResumeAll>
		taskENTER_CRITICAL();
 8007a7e:	f001 fab9 	bl	8008ff4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007a82:	6ba6      	ldr	r6, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007a84:	2e00      	cmp	r6, #0
 8007a86:	d147      	bne.n	8007b18 <xQueueReceive+0x124>
				if( xTicksToWait == ( TickType_t ) 0 )
 8007a88:	9b01      	ldr	r3, [sp, #4]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d1d1      	bne.n	8007a32 <xQueueReceive+0x3e>
					taskEXIT_CRITICAL();
 8007a8e:	f001 fad3 	bl	8009038 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8007a92:	2000      	movs	r0, #0
}
 8007a94:	b005      	add	sp, #20
 8007a96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007a9a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d0b4      	beq.n	8007a0a <xQueueReceive+0x16>
	__asm volatile
 8007aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aa4:	f383 8811 	msr	BASEPRI, r3
 8007aa8:	f3bf 8f6f 	isb	sy
 8007aac:	f3bf 8f4f 	dsb	sy
 8007ab0:	e7fe      	b.n	8007ab0 <xQueueReceive+0xbc>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007ab2:	9b01      	ldr	r3, [sp, #4]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d0ac      	beq.n	8007a12 <xQueueReceive+0x1e>
 8007ab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007abc:	f383 8811 	msr	BASEPRI, r3
 8007ac0:	f3bf 8f6f 	isb	sy
 8007ac4:	f3bf 8f4f 	dsb	sy
 8007ac8:	e7fe      	b.n	8007ac8 <xQueueReceive+0xd4>
			prvUnlockQueue( pxQueue );
 8007aca:	4620      	mov	r0, r4
 8007acc:	f7ff fc50 	bl	8007370 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007ad0:	f000 fd9e 	bl	8008610 <xTaskResumeAll>
	taskENTER_CRITICAL();
 8007ad4:	f001 fa8e 	bl	8008ff4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007ad8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d0d7      	beq.n	8007a8e <xQueueReceive+0x9a>
	taskEXIT_CRITICAL();
 8007ade:	f001 faab 	bl	8009038 <vPortExitCritical>
 8007ae2:	e7cc      	b.n	8007a7e <xQueueReceive+0x8a>
 8007ae4:	f001 faa8 	bl	8009038 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007ae8:	9901      	ldr	r1, [sp, #4]
 8007aea:	4640      	mov	r0, r8
 8007aec:	f000 fe26 	bl	800873c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007af0:	4620      	mov	r0, r4
 8007af2:	f7ff fc3d 	bl	8007370 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007af6:	f000 fd8b 	bl	8008610 <xTaskResumeAll>
 8007afa:	2800      	cmp	r0, #0
 8007afc:	d1bf      	bne.n	8007a7e <xQueueReceive+0x8a>
					portYIELD_WITHIN_API();
 8007afe:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007b02:	f8c9 3d04 	str.w	r3, [r9, #3332]	; 0xd04
 8007b06:	f3bf 8f4f 	dsb	sy
 8007b0a:	f3bf 8f6f 	isb	sy
		taskENTER_CRITICAL();
 8007b0e:	f001 fa71 	bl	8008ff4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007b12:	6ba6      	ldr	r6, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007b14:	2e00      	cmp	r6, #0
 8007b16:	d0b7      	beq.n	8007a88 <xQueueReceive+0x94>
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007b18:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8007b1a:	b152      	cbz	r2, 8007b32 <xQueueReceive+0x13e>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007b1c:	68e1      	ldr	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007b1e:	68a3      	ldr	r3, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007b20:	4411      	add	r1, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007b22:	4299      	cmp	r1, r3
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007b24:	60e1      	str	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007b26:	d301      	bcc.n	8007b2c <xQueueReceive+0x138>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007b28:	6821      	ldr	r1, [r4, #0]
 8007b2a:	60e1      	str	r1, [r4, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007b2c:	4628      	mov	r0, r5
 8007b2e:	f009 fff5 	bl	8011b1c <memcpy>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007b32:	3e01      	subs	r6, #1
 8007b34:	63a6      	str	r6, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007b36:	6923      	ldr	r3, [r4, #16]
 8007b38:	b963      	cbnz	r3, 8007b54 <xQueueReceive+0x160>
				taskEXIT_CRITICAL();
 8007b3a:	f001 fa7d 	bl	8009038 <vPortExitCritical>
				return pdPASS;
 8007b3e:	2001      	movs	r0, #1
 8007b40:	e7a8      	b.n	8007a94 <xQueueReceive+0xa0>
 8007b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b46:	f383 8811 	msr	BASEPRI, r3
 8007b4a:	f3bf 8f6f 	isb	sy
 8007b4e:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 8007b52:	e7fe      	b.n	8007b52 <xQueueReceive+0x15e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007b54:	f104 0010 	add.w	r0, r4, #16
 8007b58:	f000 fe28 	bl	80087ac <xTaskRemoveFromEventList>
 8007b5c:	2800      	cmp	r0, #0
 8007b5e:	d0ec      	beq.n	8007b3a <xQueueReceive+0x146>
						queueYIELD_IF_USING_PREEMPTION();
 8007b60:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007b64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b68:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8007b6c:	f3bf 8f4f 	dsb	sy
 8007b70:	f3bf 8f6f 	isb	sy
 8007b74:	e7e1      	b.n	8007b3a <xQueueReceive+0x146>
 8007b76:	bf00      	nop

08007b78 <xQueueSemaphoreTake>:
{
 8007b78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b7a:	b085      	sub	sp, #20
 8007b7c:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 8007b7e:	2800      	cmp	r0, #0
 8007b80:	d055      	beq.n	8007c2e <xQueueSemaphoreTake+0xb6>
	configASSERT( pxQueue->uxItemSize == 0 );
 8007b82:	6c06      	ldr	r6, [r0, #64]	; 0x40
 8007b84:	4604      	mov	r4, r0
 8007b86:	b146      	cbz	r6, 8007b9a <xQueueSemaphoreTake+0x22>
 8007b88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b8c:	f383 8811 	msr	BASEPRI, r3
 8007b90:	f3bf 8f6f 	isb	sy
 8007b94:	f3bf 8f4f 	dsb	sy
 8007b98:	e7fe      	b.n	8007b98 <xQueueSemaphoreTake+0x20>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007b9a:	f000 feb1 	bl	8008900 <xTaskGetSchedulerState>
 8007b9e:	4605      	mov	r5, r0
 8007ba0:	2800      	cmp	r0, #0
 8007ba2:	d04d      	beq.n	8007c40 <xQueueSemaphoreTake+0xc8>
 8007ba4:	4635      	mov	r5, r6
		taskENTER_CRITICAL();
 8007ba6:	f001 fa25 	bl	8008ff4 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007baa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
		prvLockQueue( pxQueue );
 8007bac:	2700      	movs	r7, #0
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007bae:	bb8b      	cbnz	r3, 8007c14 <xQueueSemaphoreTake+0x9c>
				if( xTicksToWait == ( TickType_t ) 0 )
 8007bb0:	9b01      	ldr	r3, [sp, #4]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	f000 809b 	beq.w	8007cee <xQueueSemaphoreTake+0x176>
				else if( xEntryTimeSet == pdFALSE )
 8007bb8:	2d00      	cmp	r5, #0
 8007bba:	d059      	beq.n	8007c70 <xQueueSemaphoreTake+0xf8>
		taskEXIT_CRITICAL();
 8007bbc:	f001 fa3c 	bl	8009038 <vPortExitCritical>
		vTaskSuspendAll();
 8007bc0:	f000 fbd2 	bl	8008368 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007bc4:	f001 fa16 	bl	8008ff4 <vPortEnterCritical>
 8007bc8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8007bcc:	2bff      	cmp	r3, #255	; 0xff
 8007bce:	d101      	bne.n	8007bd4 <xQueueSemaphoreTake+0x5c>
 8007bd0:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
 8007bd4:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8007bd8:	2bff      	cmp	r3, #255	; 0xff
 8007bda:	d101      	bne.n	8007be0 <xQueueSemaphoreTake+0x68>
 8007bdc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007be0:	f001 fa2a 	bl	8009038 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007be4:	a901      	add	r1, sp, #4
 8007be6:	a802      	add	r0, sp, #8
 8007be8:	f000 fe36 	bl	8008858 <xTaskCheckForTimeOut>
 8007bec:	2800      	cmp	r0, #0
 8007bee:	d133      	bne.n	8007c58 <xQueueSemaphoreTake+0xe0>
	taskENTER_CRITICAL();
 8007bf0:	f001 fa00 	bl	8008ff4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007bf4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d03e      	beq.n	8007c78 <xQueueSemaphoreTake+0x100>
	taskEXIT_CRITICAL();
 8007bfa:	f001 fa1d 	bl	8009038 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8007bfe:	4620      	mov	r0, r4
 8007c00:	f7ff fbb6 	bl	8007370 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007c04:	f000 fd04 	bl	8008610 <xTaskResumeAll>
		taskENTER_CRITICAL();
 8007c08:	f001 f9f4 	bl	8008ff4 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007c0c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007c0e:	2501      	movs	r5, #1
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d0cd      	beq.n	8007bb0 <xQueueSemaphoreTake+0x38>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007c14:	3b01      	subs	r3, #1
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007c16:	6822      	ldr	r2, [r4, #0]
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007c18:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007c1a:	2a00      	cmp	r2, #0
 8007c1c:	f000 8083 	beq.w	8007d26 <xQueueSemaphoreTake+0x1ae>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007c20:	6923      	ldr	r3, [r4, #16]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d16e      	bne.n	8007d04 <xQueueSemaphoreTake+0x18c>
				return pdPASS;
 8007c26:	2601      	movs	r6, #1
				taskEXIT_CRITICAL();
 8007c28:	f001 fa06 	bl	8009038 <vPortExitCritical>
				return pdPASS;
 8007c2c:	e042      	b.n	8007cb4 <xQueueSemaphoreTake+0x13c>
 8007c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c32:	f383 8811 	msr	BASEPRI, r3
 8007c36:	f3bf 8f6f 	isb	sy
 8007c3a:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 8007c3e:	e7fe      	b.n	8007c3e <xQueueSemaphoreTake+0xc6>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007c40:	9b01      	ldr	r3, [sp, #4]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d039      	beq.n	8007cba <xQueueSemaphoreTake+0x142>
 8007c46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c4a:	f383 8811 	msr	BASEPRI, r3
 8007c4e:	f3bf 8f6f 	isb	sy
 8007c52:	f3bf 8f4f 	dsb	sy
 8007c56:	e7fe      	b.n	8007c56 <xQueueSemaphoreTake+0xde>
			prvUnlockQueue( pxQueue );
 8007c58:	4620      	mov	r0, r4
 8007c5a:	f7ff fb89 	bl	8007370 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007c5e:	f000 fcd7 	bl	8008610 <xTaskResumeAll>
	taskENTER_CRITICAL();
 8007c62:	f001 f9c7 	bl	8008ff4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007c66:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007c68:	b30b      	cbz	r3, 8007cae <xQueueSemaphoreTake+0x136>
	taskEXIT_CRITICAL();
 8007c6a:	f001 f9e5 	bl	8009038 <vPortExitCritical>
	return xReturn;
 8007c6e:	e7cb      	b.n	8007c08 <xQueueSemaphoreTake+0x90>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007c70:	a802      	add	r0, sp, #8
 8007c72:	f000 fde5 	bl	8008840 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007c76:	e7a1      	b.n	8007bbc <xQueueSemaphoreTake+0x44>
	taskEXIT_CRITICAL();
 8007c78:	f001 f9de 	bl	8009038 <vPortExitCritical>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007c7c:	6823      	ldr	r3, [r4, #0]
 8007c7e:	b36b      	cbz	r3, 8007cdc <xQueueSemaphoreTake+0x164>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007c80:	9901      	ldr	r1, [sp, #4]
 8007c82:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007c86:	f000 fd59 	bl	800873c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007c8a:	4620      	mov	r0, r4
 8007c8c:	f7ff fb70 	bl	8007370 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007c90:	f000 fcbe 	bl	8008610 <xTaskResumeAll>
 8007c94:	2800      	cmp	r0, #0
 8007c96:	d1b7      	bne.n	8007c08 <xQueueSemaphoreTake+0x90>
					portYIELD_WITHIN_API();
 8007c98:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007c9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ca0:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8007ca4:	f3bf 8f4f 	dsb	sy
 8007ca8:	f3bf 8f6f 	isb	sy
 8007cac:	e7ac      	b.n	8007c08 <xQueueSemaphoreTake+0x90>
	taskEXIT_CRITICAL();
 8007cae:	f001 f9c3 	bl	8009038 <vPortExitCritical>
					if( xInheritanceOccurred != pdFALSE )
 8007cb2:	b926      	cbnz	r6, 8007cbe <xQueueSemaphoreTake+0x146>
}
 8007cb4:	4630      	mov	r0, r6
 8007cb6:	b005      	add	sp, #20
 8007cb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007cba:	4606      	mov	r6, r0
 8007cbc:	e773      	b.n	8007ba6 <xQueueSemaphoreTake+0x2e>
						taskENTER_CRITICAL();
 8007cbe:	f001 f999 	bl	8008ff4 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007cc2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007cc4:	b119      	cbz	r1, 8007cce <xQueueSemaphoreTake+0x156>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007cc6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007cc8:	6819      	ldr	r1, [r3, #0]
 8007cca:	f1c1 0138 	rsb	r1, r1, #56	; 0x38
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007cce:	68a0      	ldr	r0, [r4, #8]
				return errQUEUE_EMPTY;
 8007cd0:	2600      	movs	r6, #0
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007cd2:	f000 feb1 	bl	8008a38 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 8007cd6:	f001 f9af 	bl	8009038 <vPortExitCritical>
 8007cda:	e7eb      	b.n	8007cb4 <xQueueSemaphoreTake+0x13c>
						taskENTER_CRITICAL();
 8007cdc:	f001 f98a 	bl	8008ff4 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007ce0:	68a0      	ldr	r0, [r4, #8]
 8007ce2:	f000 fe1d 	bl	8008920 <xTaskPriorityInherit>
 8007ce6:	4606      	mov	r6, r0
						taskEXIT_CRITICAL();
 8007ce8:	f001 f9a6 	bl	8009038 <vPortExitCritical>
 8007cec:	e7c8      	b.n	8007c80 <xQueueSemaphoreTake+0x108>
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007cee:	2e00      	cmp	r6, #0
 8007cf0:	d0f1      	beq.n	8007cd6 <xQueueSemaphoreTake+0x15e>
 8007cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cf6:	f383 8811 	msr	BASEPRI, r3
 8007cfa:	f3bf 8f6f 	isb	sy
 8007cfe:	f3bf 8f4f 	dsb	sy
 8007d02:	e7fe      	b.n	8007d02 <xQueueSemaphoreTake+0x18a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007d04:	f104 0010 	add.w	r0, r4, #16
 8007d08:	f000 fd50 	bl	80087ac <xTaskRemoveFromEventList>
 8007d0c:	2800      	cmp	r0, #0
 8007d0e:	d08a      	beq.n	8007c26 <xQueueSemaphoreTake+0xae>
						queueYIELD_IF_USING_PREEMPTION();
 8007d10:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007d14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d18:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8007d1c:	f3bf 8f4f 	dsb	sy
 8007d20:	f3bf 8f6f 	isb	sy
 8007d24:	e77f      	b.n	8007c26 <xQueueSemaphoreTake+0xae>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007d26:	f000 fedb 	bl	8008ae0 <pvTaskIncrementMutexHeldCount>
 8007d2a:	60a0      	str	r0, [r4, #8]
 8007d2c:	e778      	b.n	8007c20 <xQueueSemaphoreTake+0xa8>
 8007d2e:	bf00      	nop

08007d30 <xQueueTakeMutexRecursive>:
		configASSERT( pxMutex );
 8007d30:	b1a8      	cbz	r0, 8007d5e <xQueueTakeMutexRecursive+0x2e>
	{
 8007d32:	b570      	push	{r4, r5, r6, lr}
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8007d34:	6886      	ldr	r6, [r0, #8]
 8007d36:	4604      	mov	r4, r0
 8007d38:	460d      	mov	r5, r1
 8007d3a:	f000 fddb 	bl	80088f4 <xTaskGetCurrentTaskHandle>
 8007d3e:	4286      	cmp	r6, r0
 8007d40:	d008      	beq.n	8007d54 <xQueueTakeMutexRecursive+0x24>
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8007d42:	4629      	mov	r1, r5
 8007d44:	4620      	mov	r0, r4
 8007d46:	f7ff ff17 	bl	8007b78 <xQueueSemaphoreTake>
			if( xReturn != pdFAIL )
 8007d4a:	b110      	cbz	r0, 8007d52 <xQueueTakeMutexRecursive+0x22>
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8007d4c:	68e3      	ldr	r3, [r4, #12]
 8007d4e:	3301      	adds	r3, #1
 8007d50:	60e3      	str	r3, [r4, #12]
	}
 8007d52:	bd70      	pop	{r4, r5, r6, pc}
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8007d54:	68e3      	ldr	r3, [r4, #12]
			xReturn = pdPASS;
 8007d56:	2001      	movs	r0, #1
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8007d58:	4403      	add	r3, r0
 8007d5a:	60e3      	str	r3, [r4, #12]
	}
 8007d5c:	bd70      	pop	{r4, r5, r6, pc}
 8007d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d62:	f383 8811 	msr	BASEPRI, r3
 8007d66:	f3bf 8f6f 	isb	sy
 8007d6a:	f3bf 8f4f 	dsb	sy
		configASSERT( pxMutex );
 8007d6e:	e7fe      	b.n	8007d6e <xQueueTakeMutexRecursive+0x3e>

08007d70 <xQueueReceiveFromISR>:
{
 8007d70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8007d74:	b310      	cbz	r0, 8007dbc <xQueueReceiveFromISR+0x4c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007d76:	460e      	mov	r6, r1
 8007d78:	4604      	mov	r4, r0
 8007d7a:	4617      	mov	r7, r2
 8007d7c:	b191      	cbz	r1, 8007da4 <xQueueReceiveFromISR+0x34>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007d7e:	f001 fa55 	bl	800922c <vPortValidateInterruptPriority>
	__asm volatile
 8007d82:	f3ef 8911 	mrs	r9, BASEPRI
 8007d86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d8a:	f383 8811 	msr	BASEPRI, r3
 8007d8e:	f3bf 8f6f 	isb	sy
 8007d92:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007d96:	6ba5      	ldr	r5, [r4, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007d98:	b9cd      	cbnz	r5, 8007dce <xQueueReceiveFromISR+0x5e>
			xReturn = pdFAIL;
 8007d9a:	4628      	mov	r0, r5
	__asm volatile
 8007d9c:	f389 8811 	msr	BASEPRI, r9
}
 8007da0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007da4:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d0e9      	beq.n	8007d7e <xQueueReceiveFromISR+0xe>
	__asm volatile
 8007daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dae:	f383 8811 	msr	BASEPRI, r3
 8007db2:	f3bf 8f6f 	isb	sy
 8007db6:	f3bf 8f4f 	dsb	sy
 8007dba:	e7fe      	b.n	8007dba <xQueueReceiveFromISR+0x4a>
 8007dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dc0:	f383 8811 	msr	BASEPRI, r3
 8007dc4:	f3bf 8f6f 	isb	sy
 8007dc8:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8007dcc:	e7fe      	b.n	8007dcc <xQueueReceiveFromISR+0x5c>
			const int8_t cRxLock = pxQueue->cRxLock;
 8007dce:	f894 8044 	ldrb.w	r8, [r4, #68]	; 0x44
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007dd2:	6c22      	ldr	r2, [r4, #64]	; 0x40
			const int8_t cRxLock = pxQueue->cRxLock;
 8007dd4:	fa4f f888 	sxtb.w	r8, r8
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007dd8:	b142      	cbz	r2, 8007dec <xQueueReceiveFromISR+0x7c>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007dda:	68e1      	ldr	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007ddc:	68a3      	ldr	r3, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007dde:	4411      	add	r1, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007de0:	4299      	cmp	r1, r3
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007de2:	60e1      	str	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007de4:	d215      	bcs.n	8007e12 <xQueueReceiveFromISR+0xa2>
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007de6:	4630      	mov	r0, r6
 8007de8:	f009 fe98 	bl	8011b1c <memcpy>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007dec:	3d01      	subs	r5, #1
			if( cRxLock == queueUNLOCKED )
 8007dee:	f1b8 3fff 	cmp.w	r8, #4294967295
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007df2:	63a5      	str	r5, [r4, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 8007df4:	d009      	beq.n	8007e0a <xQueueReceiveFromISR+0x9a>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007df6:	f108 0301 	add.w	r3, r8, #1
			xReturn = pdPASS;
 8007dfa:	2001      	movs	r0, #1
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007dfc:	b25b      	sxtb	r3, r3
 8007dfe:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	__asm volatile
 8007e02:	f389 8811 	msr	BASEPRI, r9
}
 8007e06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007e0a:	6923      	ldr	r3, [r4, #16]
 8007e0c:	b923      	cbnz	r3, 8007e18 <xQueueReceiveFromISR+0xa8>
			xReturn = pdPASS;
 8007e0e:	2001      	movs	r0, #1
 8007e10:	e7c4      	b.n	8007d9c <xQueueReceiveFromISR+0x2c>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007e12:	6821      	ldr	r1, [r4, #0]
 8007e14:	60e1      	str	r1, [r4, #12]
 8007e16:	e7e6      	b.n	8007de6 <xQueueReceiveFromISR+0x76>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007e18:	f104 0010 	add.w	r0, r4, #16
 8007e1c:	f000 fcc6 	bl	80087ac <xTaskRemoveFromEventList>
						if( pxHigherPriorityTaskWoken != NULL )
 8007e20:	2f00      	cmp	r7, #0
 8007e22:	d0f4      	beq.n	8007e0e <xQueueReceiveFromISR+0x9e>
 8007e24:	2800      	cmp	r0, #0
 8007e26:	d0f2      	beq.n	8007e0e <xQueueReceiveFromISR+0x9e>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007e28:	2301      	movs	r3, #1
			xReturn = pdPASS;
 8007e2a:	4618      	mov	r0, r3
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007e2c:	603b      	str	r3, [r7, #0]
 8007e2e:	e7b5      	b.n	8007d9c <xQueueReceiveFromISR+0x2c>

08007e30 <vQueueDelete>:
	configASSERT( pxQueue );
 8007e30:	b180      	cbz	r0, 8007e54 <vQueueDelete+0x24>
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007e32:	2300      	movs	r3, #0
{
 8007e34:	b410      	push	{r4}
 8007e36:	4c12      	ldr	r4, [pc, #72]	; (8007e80 <vQueueDelete+0x50>)
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8007e38:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
 8007e3c:	6851      	ldr	r1, [r2, #4]
 8007e3e:	4288      	cmp	r0, r1
 8007e40:	d015      	beq.n	8007e6e <vQueueDelete+0x3e>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007e42:	3301      	adds	r3, #1
 8007e44:	2b08      	cmp	r3, #8
 8007e46:	d1f7      	bne.n	8007e38 <vQueueDelete+0x8>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007e48:	f890 3046 	ldrb.w	r3, [r0, #70]	; 0x46
 8007e4c:	b15b      	cbz	r3, 8007e66 <vQueueDelete+0x36>
}
 8007e4e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007e52:	4770      	bx	lr
	__asm volatile
 8007e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e58:	f383 8811 	msr	BASEPRI, r3
 8007e5c:	f3bf 8f6f 	isb	sy
 8007e60:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8007e64:	e7fe      	b.n	8007e64 <vQueueDelete+0x34>
}
 8007e66:	f85d 4b04 	ldr.w	r4, [sp], #4
			vPortFree( pxQueue );
 8007e6a:	f001 bad5 	b.w	8009418 <vPortFree>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8007e6e:	2100      	movs	r1, #0
 8007e70:	f844 1033 	str.w	r1, [r4, r3, lsl #3]
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007e74:	f890 3046 	ldrb.w	r3, [r0, #70]	; 0x46

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8007e78:	6051      	str	r1, [r2, #4]
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d1e7      	bne.n	8007e4e <vQueueDelete+0x1e>
 8007e7e:	e7f2      	b.n	8007e66 <vQueueDelete+0x36>
 8007e80:	24001c18 	.word	0x24001c18

08007e84 <vQueueAddToRegistry>:
	{
 8007e84:	b410      	push	{r4}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007e86:	2300      	movs	r3, #0
 8007e88:	4c08      	ldr	r4, [pc, #32]	; (8007eac <vQueueAddToRegistry+0x28>)
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007e8a:	f854 2033 	ldr.w	r2, [r4, r3, lsl #3]
 8007e8e:	b12a      	cbz	r2, 8007e9c <vQueueAddToRegistry+0x18>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007e90:	3301      	adds	r3, #1
 8007e92:	2b08      	cmp	r3, #8
 8007e94:	d1f9      	bne.n	8007e8a <vQueueAddToRegistry+0x6>
	}
 8007e96:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007e9a:	4770      	bx	lr
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007e9c:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007ea0:	f844 1033 	str.w	r1, [r4, r3, lsl #3]
	}
 8007ea4:	f85d 4b04 	ldr.w	r4, [sp], #4
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007ea8:	6050      	str	r0, [r2, #4]
	}
 8007eaa:	4770      	bx	lr
 8007eac:	24001c18 	.word	0x24001c18

08007eb0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007eb0:	b570      	push	{r4, r5, r6, lr}
 8007eb2:	4604      	mov	r4, r0
 8007eb4:	460e      	mov	r6, r1
 8007eb6:	4615      	mov	r5, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007eb8:	f001 f89c 	bl	8008ff4 <vPortEnterCritical>
 8007ebc:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8007ec0:	2bff      	cmp	r3, #255	; 0xff
 8007ec2:	d102      	bne.n	8007eca <vQueueWaitForMessageRestricted+0x1a>
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8007eca:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8007ece:	2bff      	cmp	r3, #255	; 0xff
 8007ed0:	d102      	bne.n	8007ed8 <vQueueWaitForMessageRestricted+0x28>
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007ed8:	f001 f8ae 	bl	8009038 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007edc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007ede:	b123      	cbz	r3, 8007eea <vQueueWaitForMessageRestricted+0x3a>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007ee0:	4620      	mov	r0, r4
	}
 8007ee2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 8007ee6:	f7ff ba43 	b.w	8007370 <prvUnlockQueue>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007eea:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007eee:	462a      	mov	r2, r5
 8007ef0:	4631      	mov	r1, r6
 8007ef2:	f000 fc3d 	bl	8008770 <vTaskPlaceOnEventListRestricted>
		prvUnlockQueue( pxQueue );
 8007ef6:	4620      	mov	r0, r4
	}
 8007ef8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 8007efc:	f7ff ba38 	b.w	8007370 <prvUnlockQueue>

08007f00 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007f00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f04:	4605      	mov	r5, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007f06:	f001 f875 	bl	8008ff4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007f0a:	4a34      	ldr	r2, [pc, #208]	; (8007fdc <prvAddNewTaskToReadyList+0xdc>)
		if( pxCurrentTCB == NULL )
 8007f0c:	4e34      	ldr	r6, [pc, #208]	; (8007fe0 <prvAddNewTaskToReadyList+0xe0>)
		uxCurrentNumberOfTasks++;
 8007f0e:	6813      	ldr	r3, [r2, #0]
 8007f10:	3301      	adds	r3, #1
 8007f12:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007f14:	6833      	ldr	r3, [r6, #0]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d032      	beq.n	8007f80 <prvAddNewTaskToReadyList+0x80>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007f1a:	4c32      	ldr	r4, [pc, #200]	; (8007fe4 <prvAddNewTaskToReadyList+0xe4>)
 8007f1c:	6823      	ldr	r3, [r4, #0]
 8007f1e:	b33b      	cbz	r3, 8007f70 <prvAddNewTaskToReadyList+0x70>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007f20:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8007f22:	4f31      	ldr	r7, [pc, #196]	; (8007fe8 <prvAddNewTaskToReadyList+0xe8>)
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007f24:	4a31      	ldr	r2, [pc, #196]	; (8007fec <prvAddNewTaskToReadyList+0xec>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007f26:	4932      	ldr	r1, [pc, #200]	; (8007ff0 <prvAddNewTaskToReadyList+0xf0>)
		uxTaskNumber++;
 8007f28:	6813      	ldr	r3, [r2, #0]
 8007f2a:	3301      	adds	r3, #1
 8007f2c:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007f2e:	646b      	str	r3, [r5, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 8007f30:	680b      	ldr	r3, [r1, #0]
 8007f32:	4283      	cmp	r3, r0
 8007f34:	d200      	bcs.n	8007f38 <prvAddNewTaskToReadyList+0x38>
 8007f36:	6008      	str	r0, [r1, #0]
 8007f38:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8007f3c:	1d29      	adds	r1, r5, #4
 8007f3e:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 8007f42:	f7ff f997 	bl	8007274 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007f46:	f001 f877 	bl	8009038 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007f4a:	6823      	ldr	r3, [r4, #0]
 8007f4c:	b173      	cbz	r3, 8007f6c <prvAddNewTaskToReadyList+0x6c>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007f4e:	6832      	ldr	r2, [r6, #0]
 8007f50:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8007f52:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007f54:	429a      	cmp	r2, r3
 8007f56:	d209      	bcs.n	8007f6c <prvAddNewTaskToReadyList+0x6c>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007f58:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8007f5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f60:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8007f64:	f3bf 8f4f 	dsb	sy
 8007f68:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007f6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007f70:	6833      	ldr	r3, [r6, #0]
 8007f72:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8007f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f76:	4f1c      	ldr	r7, [pc, #112]	; (8007fe8 <prvAddNewTaskToReadyList+0xe8>)
 8007f78:	4283      	cmp	r3, r0
 8007f7a:	d8d3      	bhi.n	8007f24 <prvAddNewTaskToReadyList+0x24>
					pxCurrentTCB = pxNewTCB;
 8007f7c:	6035      	str	r5, [r6, #0]
 8007f7e:	e7d1      	b.n	8007f24 <prvAddNewTaskToReadyList+0x24>
			pxCurrentTCB = pxNewTCB;
 8007f80:	6035      	str	r5, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007f82:	6813      	ldr	r3, [r2, #0]
 8007f84:	2b01      	cmp	r3, #1
 8007f86:	d003      	beq.n	8007f90 <prvAddNewTaskToReadyList+0x90>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007f88:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8007f8a:	4f17      	ldr	r7, [pc, #92]	; (8007fe8 <prvAddNewTaskToReadyList+0xe8>)
 8007f8c:	4c15      	ldr	r4, [pc, #84]	; (8007fe4 <prvAddNewTaskToReadyList+0xe4>)
 8007f8e:	e7c9      	b.n	8007f24 <prvAddNewTaskToReadyList+0x24>
 8007f90:	4f15      	ldr	r7, [pc, #84]	; (8007fe8 <prvAddNewTaskToReadyList+0xe8>)
 8007f92:	463c      	mov	r4, r7
 8007f94:	f507 688c 	add.w	r8, r7, #1120	; 0x460
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007f98:	4620      	mov	r0, r4
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007f9a:	3414      	adds	r4, #20
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007f9c:	f7ff f95a 	bl	8007254 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007fa0:	45a0      	cmp	r8, r4
 8007fa2:	d1f9      	bne.n	8007f98 <prvAddNewTaskToReadyList+0x98>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007fa4:	f8df 9060 	ldr.w	r9, [pc, #96]	; 8008008 <prvAddNewTaskToReadyList+0x108>
	vListInitialise( &xDelayedTaskList2 );
 8007fa8:	f8df 8060 	ldr.w	r8, [pc, #96]	; 800800c <prvAddNewTaskToReadyList+0x10c>
	vListInitialise( &xDelayedTaskList1 );
 8007fac:	4648      	mov	r0, r9
 8007fae:	4c0d      	ldr	r4, [pc, #52]	; (8007fe4 <prvAddNewTaskToReadyList+0xe4>)
 8007fb0:	f7ff f950 	bl	8007254 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007fb4:	4640      	mov	r0, r8
 8007fb6:	f7ff f94d 	bl	8007254 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007fba:	480e      	ldr	r0, [pc, #56]	; (8007ff4 <prvAddNewTaskToReadyList+0xf4>)
 8007fbc:	f7ff f94a 	bl	8007254 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007fc0:	480d      	ldr	r0, [pc, #52]	; (8007ff8 <prvAddNewTaskToReadyList+0xf8>)
 8007fc2:	f7ff f947 	bl	8007254 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007fc6:	480d      	ldr	r0, [pc, #52]	; (8007ffc <prvAddNewTaskToReadyList+0xfc>)
 8007fc8:	f7ff f944 	bl	8007254 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007fcc:	4b0c      	ldr	r3, [pc, #48]	; (8008000 <prvAddNewTaskToReadyList+0x100>)
		prvAddTaskToReadyList( pxNewTCB );
 8007fce:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
	pxDelayedTaskList = &xDelayedTaskList1;
 8007fd0:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007fd4:	4b0b      	ldr	r3, [pc, #44]	; (8008004 <prvAddNewTaskToReadyList+0x104>)
 8007fd6:	f8c3 8000 	str.w	r8, [r3]
}
 8007fda:	e7a3      	b.n	8007f24 <prvAddNewTaskToReadyList+0x24>
 8007fdc:	240020c4 	.word	0x240020c4
 8007fe0:	24001c58 	.word	0x24001c58
 8007fe4:	24002120 	.word	0x24002120
 8007fe8:	24001c64 	.word	0x24001c64
 8007fec:	240020d0 	.word	0x240020d0
 8007ff0:	240020d4 	.word	0x240020d4
 8007ff4:	2400210c 	.word	0x2400210c
 8007ff8:	24002138 	.word	0x24002138
 8007ffc:	24002124 	.word	0x24002124
 8008000:	24001c5c 	.word	0x24001c5c
 8008004:	24001c60 	.word	0x24001c60
 8008008:	240020d8 	.word	0x240020d8
 800800c:	240020ec 	.word	0x240020ec

08008010 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008012:	4b15      	ldr	r3, [pc, #84]	; (8008068 <prvAddCurrentTaskToDelayedList+0x58>)
{
 8008014:	4604      	mov	r4, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008016:	4e15      	ldr	r6, [pc, #84]	; (800806c <prvAddCurrentTaskToDelayedList+0x5c>)
{
 8008018:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 800801a:	681d      	ldr	r5, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800801c:	6833      	ldr	r3, [r6, #0]
 800801e:	1d18      	adds	r0, r3, #4
 8008020:	f7ff f950 	bl	80072c4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008024:	1c63      	adds	r3, r4, #1
 8008026:	d100      	bne.n	800802a <prvAddCurrentTaskToDelayedList+0x1a>
 8008028:	b9bf      	cbnz	r7, 800805a <prvAddCurrentTaskToDelayedList+0x4a>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 800802a:	192d      	adds	r5, r5, r4

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800802c:	6833      	ldr	r3, [r6, #0]
 800802e:	605d      	str	r5, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8008030:	d307      	bcc.n	8008042 <prvAddCurrentTaskToDelayedList+0x32>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008032:	4b0f      	ldr	r3, [pc, #60]	; (8008070 <prvAddCurrentTaskToDelayedList+0x60>)
 8008034:	6818      	ldr	r0, [r3, #0]
 8008036:	6831      	ldr	r1, [r6, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008038:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800803c:	3104      	adds	r1, #4
 800803e:	f7ff b929 	b.w	8007294 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008042:	4b0c      	ldr	r3, [pc, #48]	; (8008074 <prvAddCurrentTaskToDelayedList+0x64>)
 8008044:	6818      	ldr	r0, [r3, #0]
 8008046:	6831      	ldr	r1, [r6, #0]
 8008048:	3104      	adds	r1, #4
 800804a:	f7ff f923 	bl	8007294 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800804e:	4b0a      	ldr	r3, [pc, #40]	; (8008078 <prvAddCurrentTaskToDelayedList+0x68>)
 8008050:	681a      	ldr	r2, [r3, #0]
 8008052:	42aa      	cmp	r2, r5
 8008054:	d900      	bls.n	8008058 <prvAddCurrentTaskToDelayedList+0x48>
					xNextTaskUnblockTime = xTimeToWake;
 8008056:	601d      	str	r5, [r3, #0]
}
 8008058:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800805a:	6831      	ldr	r1, [r6, #0]
 800805c:	4807      	ldr	r0, [pc, #28]	; (800807c <prvAddCurrentTaskToDelayedList+0x6c>)
 800805e:	3104      	adds	r1, #4
}
 8008060:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008064:	f7ff b906 	b.w	8007274 <vListInsertEnd>
 8008068:	2400214c 	.word	0x2400214c
 800806c:	24001c58 	.word	0x24001c58
 8008070:	24001c60 	.word	0x24001c60
 8008074:	24001c5c 	.word	0x24001c5c
 8008078:	24002100 	.word	0x24002100
 800807c:	24002124 	.word	0x24002124

08008080 <prvDeleteTCB>:
	{
 8008080:	b510      	push	{r4, lr}
 8008082:	4604      	mov	r4, r0
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008084:	3054      	adds	r0, #84	; 0x54
 8008086:	f009 fc97 	bl	80119b8 <_reclaim_reent>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800808a:	f894 30a5 	ldrb.w	r3, [r4, #165]	; 0xa5
 800808e:	b163      	cbz	r3, 80080aa <prvDeleteTCB+0x2a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008090:	2b01      	cmp	r3, #1
 8008092:	d013      	beq.n	80080bc <prvDeleteTCB+0x3c>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008094:	2b02      	cmp	r3, #2
 8008096:	d010      	beq.n	80080ba <prvDeleteTCB+0x3a>
 8008098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800809c:	f383 8811 	msr	BASEPRI, r3
 80080a0:	f3bf 8f6f 	isb	sy
 80080a4:	f3bf 8f4f 	dsb	sy
 80080a8:	e7fe      	b.n	80080a8 <prvDeleteTCB+0x28>
				vPortFree( pxTCB->pxStack );
 80080aa:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80080ac:	f001 f9b4 	bl	8009418 <vPortFree>
				vPortFree( pxTCB );
 80080b0:	4620      	mov	r0, r4
	}
 80080b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 80080b6:	f001 b9af 	b.w	8009418 <vPortFree>
	}
 80080ba:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 80080bc:	4620      	mov	r0, r4
	}
 80080be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 80080c2:	f001 b9a9 	b.w	8009418 <vPortFree>
 80080c6:	bf00      	nop

080080c8 <prvIdleTask>:
{
 80080c8:	4c15      	ldr	r4, [pc, #84]	; (8008120 <prvIdleTask+0x58>)
				taskYIELD();
 80080ca:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
 80080ce:	4e15      	ldr	r6, [pc, #84]	; (8008124 <prvIdleTask+0x5c>)
 80080d0:	f04f 5880 	mov.w	r8, #268435456	; 0x10000000
 80080d4:	4d14      	ldr	r5, [pc, #80]	; (8008128 <prvIdleTask+0x60>)
 80080d6:	f8df a054 	ldr.w	sl, [pc, #84]	; 800812c <prvIdleTask+0x64>
{
 80080da:	b580      	push	{r7, lr}
 80080dc:	e011      	b.n	8008102 <prvIdleTask+0x3a>
			taskENTER_CRITICAL();
 80080de:	f000 ff89 	bl	8008ff4 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80080e2:	68f3      	ldr	r3, [r6, #12]
 80080e4:	68df      	ldr	r7, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80080e6:	1d38      	adds	r0, r7, #4
 80080e8:	f7ff f8ec 	bl	80072c4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80080ec:	682b      	ldr	r3, [r5, #0]
 80080ee:	3b01      	subs	r3, #1
 80080f0:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 80080f2:	6823      	ldr	r3, [r4, #0]
 80080f4:	3b01      	subs	r3, #1
 80080f6:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 80080f8:	f000 ff9e 	bl	8009038 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 80080fc:	4638      	mov	r0, r7
 80080fe:	f7ff ffbf 	bl	8008080 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008102:	6823      	ldr	r3, [r4, #0]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d1ea      	bne.n	80080de <prvIdleTask+0x16>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008108:	f8da 3000 	ldr.w	r3, [sl]
 800810c:	2b01      	cmp	r3, #1
 800810e:	d9f8      	bls.n	8008102 <prvIdleTask+0x3a>
				taskYIELD();
 8008110:	f8c9 8d04 	str.w	r8, [r9, #3332]	; 0xd04
 8008114:	f3bf 8f4f 	dsb	sy
 8008118:	f3bf 8f6f 	isb	sy
 800811c:	e7f1      	b.n	8008102 <prvIdleTask+0x3a>
 800811e:	bf00      	nop
 8008120:	240020c8 	.word	0x240020c8
 8008124:	24002138 	.word	0x24002138
 8008128:	240020c4 	.word	0x240020c4
 800812c:	24001c64 	.word	0x24001c64

08008130 <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8008130:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008134:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008136:	ea4f 0982 	mov.w	r9, r2, lsl #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800813a:	4606      	mov	r6, r0
 800813c:	460d      	mov	r5, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800813e:	464a      	mov	r2, r9
 8008140:	21a5      	movs	r1, #165	; 0xa5
 8008142:	6b20      	ldr	r0, [r4, #48]	; 0x30
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8008144:	461f      	mov	r7, r3
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008146:	f1a9 0904 	sub.w	r9, r9, #4
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800814a:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800814e:	f009 fc09 	bl	8011964 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008152:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8008154:	444b      	add	r3, r9
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008156:	f023 0907 	bic.w	r9, r3, #7
	if( pcName != NULL )
 800815a:	2d00      	cmp	r5, #0
 800815c:	d043      	beq.n	80081e6 <prvInitialiseNewTask.constprop.0+0xb6>
 800815e:	f105 3cff 	add.w	ip, r5, #4294967295
 8008162:	f105 030f 	add.w	r3, r5, #15
 8008166:	f104 0e33 	add.w	lr, r4, #51	; 0x33
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800816a:	f81c 5f01 	ldrb.w	r5, [ip, #1]!
 800816e:	f80e 5f01 	strb.w	r5, [lr, #1]!
			if( pcName[ x ] == ( char ) 0x00 )
 8008172:	b10d      	cbz	r5, 8008178 <prvInitialiseNewTask.constprop.0+0x48>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008174:	459c      	cmp	ip, r3
 8008176:	d1f8      	bne.n	800816a <prvInitialiseNewTask.constprop.0+0x3a>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008178:	2300      	movs	r3, #0
 800817a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800817e:	9d08      	ldr	r5, [sp, #32]
		pxNewTCB->uxMutexesHeld = 0;
 8008180:	f04f 0a00 	mov.w	sl, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008184:	1d20      	adds	r0, r4, #4
 8008186:	2d37      	cmp	r5, #55	; 0x37
		pxNewTCB->uxMutexesHeld = 0;
 8008188:	f8c4 a050 	str.w	sl, [r4, #80]	; 0x50
 800818c:	bf28      	it	cs
 800818e:	2537      	movcs	r5, #55	; 0x37
	pxNewTCB->uxPriority = uxPriority;
 8008190:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8008192:	64e5      	str	r5, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008194:	f1c5 0538 	rsb	r5, r5, #56	; 0x38
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008198:	f7ff f868 	bl	800726c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800819c:	f104 0018 	add.w	r0, r4, #24
 80081a0:	f7ff f864 	bl	800726c <vListInitialiseItem>
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80081a4:	4651      	mov	r1, sl
 80081a6:	224c      	movs	r2, #76	; 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80081a8:	61a5      	str	r5, [r4, #24]
		pxNewTCB->ulNotifiedValue = 0;
 80081aa:	f8c4 a0a0 	str.w	sl, [r4, #160]	; 0xa0
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80081ae:	f104 0054 	add.w	r0, r4, #84	; 0x54
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80081b2:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80081b4:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80081b6:	f884 a0a4 	strb.w	sl, [r4, #164]	; 0xa4
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80081ba:	f009 fbd3 	bl	8011964 <memset>
 80081be:	4b0b      	ldr	r3, [pc, #44]	; (80081ec <prvInitialiseNewTask.constprop.0+0xbc>)
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80081c0:	463a      	mov	r2, r7
 80081c2:	4631      	mov	r1, r6
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80081c4:	f103 0568 	add.w	r5, r3, #104	; 0x68
 80081c8:	65a3      	str	r3, [r4, #88]	; 0x58
 80081ca:	33d0      	adds	r3, #208	; 0xd0
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80081cc:	4648      	mov	r0, r9
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80081ce:	65e5      	str	r5, [r4, #92]	; 0x5c
 80081d0:	6623      	str	r3, [r4, #96]	; 0x60
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80081d2:	f000 fee5 	bl	8008fa0 <pxPortInitialiseStack>
 80081d6:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 80081d8:	f1b8 0f00 	cmp.w	r8, #0
 80081dc:	d001      	beq.n	80081e2 <prvInitialiseNewTask.constprop.0+0xb2>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80081de:	f8c8 4000 	str.w	r4, [r8]
}
 80081e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80081e6:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
 80081ea:	e7c8      	b.n	800817e <prvInitialiseNewTask.constprop.0+0x4e>
 80081ec:	24011bb8 	.word	0x24011bb8

080081f0 <xTaskCreateStatic>:
	{
 80081f0:	b530      	push	{r4, r5, lr}
 80081f2:	b087      	sub	sp, #28
 80081f4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 80081f6:	b1c4      	cbz	r4, 800822a <xTaskCreateStatic+0x3a>
		configASSERT( pxTaskBuffer != NULL );
 80081f8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80081fa:	b16d      	cbz	r5, 8008218 <xTaskCreateStatic+0x28>
			volatile size_t xSize = sizeof( StaticTask_t );
 80081fc:	25a8      	movs	r5, #168	; 0xa8
 80081fe:	9505      	str	r5, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008200:	9d05      	ldr	r5, [sp, #20]
 8008202:	2da8      	cmp	r5, #168	; 0xa8
 8008204:	d01a      	beq.n	800823c <xTaskCreateStatic+0x4c>
 8008206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800820a:	f383 8811 	msr	BASEPRI, r3
 800820e:	f3bf 8f6f 	isb	sy
 8008212:	f3bf 8f4f 	dsb	sy
 8008216:	e7fe      	b.n	8008216 <xTaskCreateStatic+0x26>
 8008218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800821c:	f383 8811 	msr	BASEPRI, r3
 8008220:	f3bf 8f6f 	isb	sy
 8008224:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 8008228:	e7fe      	b.n	8008228 <xTaskCreateStatic+0x38>
 800822a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800822e:	f383 8811 	msr	BASEPRI, r3
 8008232:	f3bf 8f6f 	isb	sy
 8008236:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 800823a:	e7fe      	b.n	800823a <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800823c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800823e:	632c      	str	r4, [r5, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008240:	2402      	movs	r4, #2
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008242:	9502      	str	r5, [sp, #8]
 8008244:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8008246:	9500      	str	r5, [sp, #0]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008248:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800824a:	f885 40a5 	strb.w	r4, [r5, #165]	; 0xa5
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800824e:	ac04      	add	r4, sp, #16
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008250:	9d05      	ldr	r5, [sp, #20]
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008252:	9401      	str	r4, [sp, #4]
 8008254:	f7ff ff6c 	bl	8008130 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008258:	980c      	ldr	r0, [sp, #48]	; 0x30
 800825a:	f7ff fe51 	bl	8007f00 <prvAddNewTaskToReadyList>
	}
 800825e:	9804      	ldr	r0, [sp, #16]
 8008260:	b007      	add	sp, #28
 8008262:	bd30      	pop	{r4, r5, pc}

08008264 <xTaskCreate>:
	{
 8008264:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008268:	4607      	mov	r7, r0
 800826a:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800826c:	0090      	lsls	r0, r2, #2
	{
 800826e:	4615      	mov	r5, r2
 8008270:	4688      	mov	r8, r1
 8008272:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008274:	f001 f83a 	bl	80092ec <pvPortMalloc>
			if( pxStack != NULL )
 8008278:	b1d8      	cbz	r0, 80082b2 <xTaskCreate+0x4e>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800827a:	4604      	mov	r4, r0
 800827c:	20a8      	movs	r0, #168	; 0xa8
 800827e:	f001 f835 	bl	80092ec <pvPortMalloc>
				if( pxNewTCB != NULL )
 8008282:	4606      	mov	r6, r0
 8008284:	b1d0      	cbz	r0, 80082bc <xTaskCreate+0x58>
					pxNewTCB->pxStack = pxStack;
 8008286:	6304      	str	r4, [r0, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008288:	2400      	movs	r4, #0
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800828a:	464b      	mov	r3, r9
 800828c:	462a      	mov	r2, r5
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800828e:	f886 40a5 	strb.w	r4, [r6, #165]	; 0xa5
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008292:	4641      	mov	r1, r8
 8008294:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8008296:	4638      	mov	r0, r7
 8008298:	9602      	str	r6, [sp, #8]
 800829a:	9401      	str	r4, [sp, #4]
 800829c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800829e:	9400      	str	r4, [sp, #0]
 80082a0:	f7ff ff46 	bl	8008130 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 80082a4:	4630      	mov	r0, r6
 80082a6:	f7ff fe2b 	bl	8007f00 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80082aa:	2001      	movs	r0, #1
	}
 80082ac:	b005      	add	sp, #20
 80082ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80082b2:	f04f 30ff 	mov.w	r0, #4294967295
	}
 80082b6:	b005      	add	sp, #20
 80082b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 80082bc:	4620      	mov	r0, r4
 80082be:	f001 f8ab 	bl	8009418 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80082c2:	f04f 30ff 	mov.w	r0, #4294967295
 80082c6:	e7f1      	b.n	80082ac <xTaskCreate+0x48>

080082c8 <vTaskStartScheduler>:
{
 80082c8:	b510      	push	{r4, lr}
 80082ca:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80082cc:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80082ce:	aa07      	add	r2, sp, #28
 80082d0:	a906      	add	r1, sp, #24
 80082d2:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80082d4:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80082d8:	f7fe ff9c 	bl	8007214 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80082dc:	4623      	mov	r3, r4
 80082de:	9a07      	ldr	r2, [sp, #28]
 80082e0:	9400      	str	r4, [sp, #0]
 80082e2:	e9dd 0105 	ldrd	r0, r1, [sp, #20]
 80082e6:	e9cd 1001 	strd	r1, r0, [sp, #4]
 80082ea:	4918      	ldr	r1, [pc, #96]	; (800834c <vTaskStartScheduler+0x84>)
 80082ec:	4818      	ldr	r0, [pc, #96]	; (8008350 <vTaskStartScheduler+0x88>)
 80082ee:	f7ff ff7f 	bl	80081f0 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 80082f2:	b1e8      	cbz	r0, 8008330 <vTaskStartScheduler+0x68>
			xReturn = xTimerCreateTimerTask();
 80082f4:	f000 fc36 	bl	8008b64 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 80082f8:	2801      	cmp	r0, #1
 80082fa:	d11b      	bne.n	8008334 <vTaskStartScheduler+0x6c>
 80082fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008300:	f383 8811 	msr	BASEPRI, r3
 8008304:	f3bf 8f6f 	isb	sy
 8008308:	f3bf 8f4f 	dsb	sy
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800830c:	4b11      	ldr	r3, [pc, #68]	; (8008354 <vTaskStartScheduler+0x8c>)
 800830e:	4a12      	ldr	r2, [pc, #72]	; (8008358 <vTaskStartScheduler+0x90>)
 8008310:	681b      	ldr	r3, [r3, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 8008312:	4912      	ldr	r1, [pc, #72]	; (800835c <vTaskStartScheduler+0x94>)
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008314:	3354      	adds	r3, #84	; 0x54
 8008316:	6013      	str	r3, [r2, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 8008318:	f04f 33ff 	mov.w	r3, #4294967295
		xSchedulerRunning = pdTRUE;
 800831c:	4a10      	ldr	r2, [pc, #64]	; (8008360 <vTaskStartScheduler+0x98>)
		xNextTaskUnblockTime = portMAX_DELAY;
 800831e:	600b      	str	r3, [r1, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008320:	4b10      	ldr	r3, [pc, #64]	; (8008364 <vTaskStartScheduler+0x9c>)
		xSchedulerRunning = pdTRUE;
 8008322:	6010      	str	r0, [r2, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008324:	601c      	str	r4, [r3, #0]
}
 8008326:	b008      	add	sp, #32
 8008328:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 800832c:	f000 bef4 	b.w	8009118 <xPortStartScheduler>
}
 8008330:	b008      	add	sp, #32
 8008332:	bd10      	pop	{r4, pc}
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008334:	3001      	adds	r0, #1
 8008336:	d1fb      	bne.n	8008330 <vTaskStartScheduler+0x68>
 8008338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800833c:	f383 8811 	msr	BASEPRI, r3
 8008340:	f3bf 8f6f 	isb	sy
 8008344:	f3bf 8f4f 	dsb	sy
 8008348:	e7fe      	b.n	8008348 <vTaskStartScheduler+0x80>
 800834a:	bf00      	nop
 800834c:	080131c8 	.word	0x080131c8
 8008350:	080080c9 	.word	0x080080c9
 8008354:	24001c58 	.word	0x24001c58
 8008358:	240000b8 	.word	0x240000b8
 800835c:	24002100 	.word	0x24002100
 8008360:	24002120 	.word	0x24002120
 8008364:	2400214c 	.word	0x2400214c

08008368 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8008368:	4a02      	ldr	r2, [pc, #8]	; (8008374 <vTaskSuspendAll+0xc>)
 800836a:	6813      	ldr	r3, [r2, #0]
 800836c:	3301      	adds	r3, #1
 800836e:	6013      	str	r3, [r2, #0]
}
 8008370:	4770      	bx	lr
 8008372:	bf00      	nop
 8008374:	240020cc 	.word	0x240020cc

08008378 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8008378:	4b01      	ldr	r3, [pc, #4]	; (8008380 <xTaskGetTickCount+0x8>)
 800837a:	6818      	ldr	r0, [r3, #0]
}
 800837c:	4770      	bx	lr
 800837e:	bf00      	nop
 8008380:	2400214c 	.word	0x2400214c

08008384 <xTaskGetTickCountFromISR>:
{
 8008384:	b508      	push	{r3, lr}
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008386:	f000 ff51 	bl	800922c <vPortValidateInterruptPriority>
		xReturn = xTickCount;
 800838a:	4b01      	ldr	r3, [pc, #4]	; (8008390 <xTaskGetTickCountFromISR+0xc>)
 800838c:	6818      	ldr	r0, [r3, #0]
}
 800838e:	bd08      	pop	{r3, pc}
 8008390:	2400214c 	.word	0x2400214c

08008394 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008394:	4b50      	ldr	r3, [pc, #320]	; (80084d8 <xTaskIncrementTick+0x144>)
 8008396:	681b      	ldr	r3, [r3, #0]
{
 8008398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800839c:	b083      	sub	sp, #12
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d146      	bne.n	8008430 <xTaskIncrementTick+0x9c>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80083a2:	4b4e      	ldr	r3, [pc, #312]	; (80084dc <xTaskIncrementTick+0x148>)
 80083a4:	681e      	ldr	r6, [r3, #0]
 80083a6:	3601      	adds	r6, #1
		xTickCount = xConstTickCount;
 80083a8:	601e      	str	r6, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80083aa:	2e00      	cmp	r6, #0
 80083ac:	d049      	beq.n	8008442 <xTaskIncrementTick+0xae>
 80083ae:	f8df b144 	ldr.w	fp, [pc, #324]	; 80084f4 <xTaskIncrementTick+0x160>
		if( xConstTickCount >= xNextTaskUnblockTime )
 80083b2:	f8db 3000 	ldr.w	r3, [fp]
 80083b6:	429e      	cmp	r6, r3
 80083b8:	d350      	bcc.n	800845c <xTaskIncrementTick+0xc8>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80083ba:	4f49      	ldr	r7, [pc, #292]	; (80084e0 <xTaskIncrementTick+0x14c>)
 80083bc:	683b      	ldr	r3, [r7, #0]
 80083be:	681d      	ldr	r5, [r3, #0]
 80083c0:	2d00      	cmp	r5, #0
 80083c2:	d077      	beq.n	80084b4 <xTaskIncrementTick+0x120>
BaseType_t xSwitchRequired = pdFALSE;
 80083c4:	2500      	movs	r5, #0
 80083c6:	f8df 9130 	ldr.w	r9, [pc, #304]	; 80084f8 <xTaskIncrementTick+0x164>
 80083ca:	f8df a130 	ldr.w	sl, [pc, #304]	; 80084fc <xTaskIncrementTick+0x168>
					prvAddTaskToReadyList( pxTCB );
 80083ce:	f8df 8130 	ldr.w	r8, [pc, #304]	; 8008500 <xTaskIncrementTick+0x16c>
 80083d2:	e022      	b.n	800841a <xTaskIncrementTick+0x86>
 80083d4:	9101      	str	r1, [sp, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80083d6:	f7fe ff75 	bl	80072c4 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80083da:	6aa3      	ldr	r3, [r4, #40]	; 0x28
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80083dc:	f104 0018 	add.w	r0, r4, #24
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80083e0:	9901      	ldr	r1, [sp, #4]
 80083e2:	b113      	cbz	r3, 80083ea <xTaskIncrementTick+0x56>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80083e4:	f7fe ff6e 	bl	80072c4 <uxListRemove>
 80083e8:	9901      	ldr	r1, [sp, #4]
					prvAddTaskToReadyList( pxTCB );
 80083ea:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80083ec:	f8d8 3000 	ldr.w	r3, [r8]
 80083f0:	4298      	cmp	r0, r3
 80083f2:	d901      	bls.n	80083f8 <xTaskIncrementTick+0x64>
 80083f4:	f8c8 0000 	str.w	r0, [r8]
 80083f8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80083fc:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 8008400:	f7fe ff38 	bl	8007274 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008404:	f8da 3000 	ldr.w	r3, [sl]
 8008408:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800840a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 800840c:	429a      	cmp	r2, r3
 800840e:	bf28      	it	cs
 8008410:	2501      	movcs	r5, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d050      	beq.n	80084bc <xTaskIncrementTick+0x128>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800841a:	683b      	ldr	r3, [r7, #0]
 800841c:	68db      	ldr	r3, [r3, #12]
 800841e:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008420:	6863      	ldr	r3, [r4, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008422:	1d21      	adds	r1, r4, #4
					if( xConstTickCount < xItemValue )
 8008424:	429e      	cmp	r6, r3
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008426:	4608      	mov	r0, r1
					if( xConstTickCount < xItemValue )
 8008428:	d2d4      	bcs.n	80083d4 <xTaskIncrementTick+0x40>
						xNextTaskUnblockTime = xItemValue;
 800842a:	f8cb 3000 	str.w	r3, [fp]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800842e:	e01a      	b.n	8008466 <xTaskIncrementTick+0xd2>
		++xPendedTicks;
 8008430:	4a2c      	ldr	r2, [pc, #176]	; (80084e4 <xTaskIncrementTick+0x150>)
BaseType_t xSwitchRequired = pdFALSE;
 8008432:	2500      	movs	r5, #0
		++xPendedTicks;
 8008434:	6813      	ldr	r3, [r2, #0]
}
 8008436:	4628      	mov	r0, r5
		++xPendedTicks;
 8008438:	3301      	adds	r3, #1
 800843a:	6013      	str	r3, [r2, #0]
}
 800843c:	b003      	add	sp, #12
 800843e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			taskSWITCH_DELAYED_LISTS();
 8008442:	4b27      	ldr	r3, [pc, #156]	; (80084e0 <xTaskIncrementTick+0x14c>)
 8008444:	681a      	ldr	r2, [r3, #0]
 8008446:	6812      	ldr	r2, [r2, #0]
 8008448:	b30a      	cbz	r2, 800848e <xTaskIncrementTick+0xfa>
 800844a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800844e:	f383 8811 	msr	BASEPRI, r3
 8008452:	f3bf 8f6f 	isb	sy
 8008456:	f3bf 8f4f 	dsb	sy
 800845a:	e7fe      	b.n	800845a <xTaskIncrementTick+0xc6>
BaseType_t xSwitchRequired = pdFALSE;
 800845c:	2500      	movs	r5, #0
 800845e:	f8df 9098 	ldr.w	r9, [pc, #152]	; 80084f8 <xTaskIncrementTick+0x164>
 8008462:	f8df a098 	ldr.w	sl, [pc, #152]	; 80084fc <xTaskIncrementTick+0x168>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008466:	f8da 3000 	ldr.w	r3, [sl]
			if( xYieldPending != pdFALSE )
 800846a:	491f      	ldr	r1, [pc, #124]	; (80084e8 <xTaskIncrementTick+0x154>)
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800846c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800846e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8008472:	009b      	lsls	r3, r3, #2
 8008474:	f859 2003 	ldr.w	r2, [r9, r3]
			if( xYieldPending != pdFALSE )
 8008478:	680b      	ldr	r3, [r1, #0]
				xSwitchRequired = pdTRUE;
 800847a:	2a02      	cmp	r2, #2
 800847c:	bf28      	it	cs
 800847e:	2501      	movcs	r5, #1
				xSwitchRequired = pdTRUE;
 8008480:	2b00      	cmp	r3, #0
 8008482:	bf18      	it	ne
 8008484:	2501      	movne	r5, #1
}
 8008486:	4628      	mov	r0, r5
 8008488:	b003      	add	sp, #12
 800848a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			taskSWITCH_DELAYED_LISTS();
 800848e:	4a17      	ldr	r2, [pc, #92]	; (80084ec <xTaskIncrementTick+0x158>)
 8008490:	6818      	ldr	r0, [r3, #0]
 8008492:	6811      	ldr	r1, [r2, #0]
 8008494:	6019      	str	r1, [r3, #0]
 8008496:	4916      	ldr	r1, [pc, #88]	; (80084f0 <xTaskIncrementTick+0x15c>)
 8008498:	6010      	str	r0, [r2, #0]
 800849a:	680a      	ldr	r2, [r1, #0]
 800849c:	3201      	adds	r2, #1
 800849e:	600a      	str	r2, [r1, #0]
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80084a0:	681a      	ldr	r2, [r3, #0]
 80084a2:	6812      	ldr	r2, [r2, #0]
 80084a4:	b97a      	cbnz	r2, 80084c6 <xTaskIncrementTick+0x132>
		xNextTaskUnblockTime = portMAX_DELAY;
 80084a6:	f8df b04c 	ldr.w	fp, [pc, #76]	; 80084f4 <xTaskIncrementTick+0x160>
 80084aa:	f04f 33ff 	mov.w	r3, #4294967295
 80084ae:	f8cb 3000 	str.w	r3, [fp]
 80084b2:	e77e      	b.n	80083b2 <xTaskIncrementTick+0x1e>
 80084b4:	f8df 9040 	ldr.w	r9, [pc, #64]	; 80084f8 <xTaskIncrementTick+0x164>
 80084b8:	f8df a040 	ldr.w	sl, [pc, #64]	; 80084fc <xTaskIncrementTick+0x168>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80084bc:	f04f 33ff 	mov.w	r3, #4294967295
 80084c0:	f8cb 3000 	str.w	r3, [fp]
					break;
 80084c4:	e7cf      	b.n	8008466 <xTaskIncrementTick+0xd2>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80084c6:	681b      	ldr	r3, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80084c8:	f8df b028 	ldr.w	fp, [pc, #40]	; 80084f4 <xTaskIncrementTick+0x160>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80084cc:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80084ce:	68db      	ldr	r3, [r3, #12]
 80084d0:	685b      	ldr	r3, [r3, #4]
 80084d2:	f8cb 3000 	str.w	r3, [fp]
}
 80084d6:	e76c      	b.n	80083b2 <xTaskIncrementTick+0x1e>
 80084d8:	240020cc 	.word	0x240020cc
 80084dc:	2400214c 	.word	0x2400214c
 80084e0:	24001c5c 	.word	0x24001c5c
 80084e4:	24002108 	.word	0x24002108
 80084e8:	24002150 	.word	0x24002150
 80084ec:	24001c60 	.word	0x24001c60
 80084f0:	24002104 	.word	0x24002104
 80084f4:	24002100 	.word	0x24002100
 80084f8:	24001c64 	.word	0x24001c64
 80084fc:	24001c58 	.word	0x24001c58
 8008500:	240020d4 	.word	0x240020d4

08008504 <xTaskResumeAll.part.0>:
BaseType_t xTaskResumeAll( void )
 8008504:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008508:	b083      	sub	sp, #12
	taskENTER_CRITICAL();
 800850a:	f000 fd73 	bl	8008ff4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800850e:	4b36      	ldr	r3, [pc, #216]	; (80085e8 <xTaskResumeAll.part.0+0xe4>)
 8008510:	681a      	ldr	r2, [r3, #0]
 8008512:	3a01      	subs	r2, #1
 8008514:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d155      	bne.n	80085c8 <xTaskResumeAll.part.0+0xc4>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800851c:	4b33      	ldr	r3, [pc, #204]	; (80085ec <xTaskResumeAll.part.0+0xe8>)
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	2b00      	cmp	r3, #0
 8008522:	d051      	beq.n	80085c8 <xTaskResumeAll.part.0+0xc4>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008524:	4d32      	ldr	r5, [pc, #200]	; (80085f0 <xTaskResumeAll.part.0+0xec>)
 8008526:	682b      	ldr	r3, [r5, #0]
 8008528:	2b00      	cmp	r3, #0
 800852a:	d05a      	beq.n	80085e2 <xTaskResumeAll.part.0+0xde>
 800852c:	4e31      	ldr	r6, [pc, #196]	; (80085f4 <xTaskResumeAll.part.0+0xf0>)
						xYieldPending = pdTRUE;
 800852e:	f04f 0a01 	mov.w	sl, #1
 8008532:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 8008608 <xTaskResumeAll.part.0+0x104>
 8008536:	4f30      	ldr	r7, [pc, #192]	; (80085f8 <xTaskResumeAll.part.0+0xf4>)
 8008538:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 800860c <xTaskResumeAll.part.0+0x108>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800853c:	68eb      	ldr	r3, [r5, #12]
 800853e:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008540:	f104 0b04 	add.w	fp, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008544:	f104 0018 	add.w	r0, r4, #24
 8008548:	f7fe febc 	bl	80072c4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800854c:	4658      	mov	r0, fp
 800854e:	f7fe feb9 	bl	80072c4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008552:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008554:	6832      	ldr	r2, [r6, #0]
 8008556:	4659      	mov	r1, fp
 8008558:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 800855c:	4293      	cmp	r3, r2
 800855e:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 8008562:	d900      	bls.n	8008566 <xTaskResumeAll.part.0+0x62>
 8008564:	6033      	str	r3, [r6, #0]
 8008566:	f7fe fe85 	bl	8007274 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800856a:	683b      	ldr	r3, [r7, #0]
 800856c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800856e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008570:	429a      	cmp	r2, r3
 8008572:	d301      	bcc.n	8008578 <xTaskResumeAll.part.0+0x74>
						xYieldPending = pdTRUE;
 8008574:	f8c9 a000 	str.w	sl, [r9]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008578:	682b      	ldr	r3, [r5, #0]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d1de      	bne.n	800853c <xTaskResumeAll.part.0+0x38>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800857e:	4b1f      	ldr	r3, [pc, #124]	; (80085fc <xTaskResumeAll.part.0+0xf8>)
 8008580:	681a      	ldr	r2, [r3, #0]
 8008582:	6812      	ldr	r2, [r2, #0]
 8008584:	b342      	cbz	r2, 80085d8 <xTaskResumeAll.part.0+0xd4>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008586:	681a      	ldr	r2, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008588:	4b1d      	ldr	r3, [pc, #116]	; (8008600 <xTaskResumeAll.part.0+0xfc>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800858a:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800858c:	68d2      	ldr	r2, [r2, #12]
 800858e:	6852      	ldr	r2, [r2, #4]
 8008590:	601a      	str	r2, [r3, #0]
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008592:	4e1c      	ldr	r6, [pc, #112]	; (8008604 <xTaskResumeAll.part.0+0x100>)
 8008594:	6834      	ldr	r4, [r6, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 8008596:	b144      	cbz	r4, 80085aa <xTaskResumeAll.part.0+0xa6>
								xYieldPending = pdTRUE;
 8008598:	2501      	movs	r5, #1
							if( xTaskIncrementTick() != pdFALSE )
 800859a:	f7ff fefb 	bl	8008394 <xTaskIncrementTick>
 800859e:	b108      	cbz	r0, 80085a4 <xTaskResumeAll.part.0+0xa0>
								xYieldPending = pdTRUE;
 80085a0:	f8c9 5000 	str.w	r5, [r9]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80085a4:	3c01      	subs	r4, #1
 80085a6:	d1f8      	bne.n	800859a <xTaskResumeAll.part.0+0x96>
						xPendedTicks = 0;
 80085a8:	6034      	str	r4, [r6, #0]
				if( xYieldPending != pdFALSE )
 80085aa:	f8d9 3000 	ldr.w	r3, [r9]
 80085ae:	b15b      	cbz	r3, 80085c8 <xTaskResumeAll.part.0+0xc4>
					taskYIELD_IF_USING_PREEMPTION();
 80085b0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80085b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085b8:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80085bc:	f3bf 8f4f 	dsb	sy
 80085c0:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 80085c4:	2001      	movs	r0, #1
 80085c6:	e000      	b.n	80085ca <xTaskResumeAll.part.0+0xc6>
BaseType_t xAlreadyYielded = pdFALSE;
 80085c8:	2000      	movs	r0, #0
 80085ca:	9001      	str	r0, [sp, #4]
	taskEXIT_CRITICAL();
 80085cc:	f000 fd34 	bl	8009038 <vPortExitCritical>
}
 80085d0:	9801      	ldr	r0, [sp, #4]
 80085d2:	b003      	add	sp, #12
 80085d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		xNextTaskUnblockTime = portMAX_DELAY;
 80085d8:	4b09      	ldr	r3, [pc, #36]	; (8008600 <xTaskResumeAll.part.0+0xfc>)
 80085da:	f04f 32ff 	mov.w	r2, #4294967295
 80085de:	601a      	str	r2, [r3, #0]
 80085e0:	e7d7      	b.n	8008592 <xTaskResumeAll.part.0+0x8e>
 80085e2:	f8df 9028 	ldr.w	r9, [pc, #40]	; 800860c <xTaskResumeAll.part.0+0x108>
 80085e6:	e7d4      	b.n	8008592 <xTaskResumeAll.part.0+0x8e>
 80085e8:	240020cc 	.word	0x240020cc
 80085ec:	240020c4 	.word	0x240020c4
 80085f0:	2400210c 	.word	0x2400210c
 80085f4:	240020d4 	.word	0x240020d4
 80085f8:	24001c58 	.word	0x24001c58
 80085fc:	24001c5c 	.word	0x24001c5c
 8008600:	24002100 	.word	0x24002100
 8008604:	24002108 	.word	0x24002108
 8008608:	24001c64 	.word	0x24001c64
 800860c:	24002150 	.word	0x24002150

08008610 <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
 8008610:	4b06      	ldr	r3, [pc, #24]	; (800862c <xTaskResumeAll+0x1c>)
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	b943      	cbnz	r3, 8008628 <xTaskResumeAll+0x18>
 8008616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800861a:	f383 8811 	msr	BASEPRI, r3
 800861e:	f3bf 8f6f 	isb	sy
 8008622:	f3bf 8f4f 	dsb	sy
 8008626:	e7fe      	b.n	8008626 <xTaskResumeAll+0x16>
 8008628:	f7ff bf6c 	b.w	8008504 <xTaskResumeAll.part.0>
 800862c:	240020cc 	.word	0x240020cc

08008630 <vTaskDelay>:
	{
 8008630:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008632:	b950      	cbnz	r0, 800864a <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 8008634:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8008638:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800863c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8008640:	f3bf 8f4f 	dsb	sy
 8008644:	f3bf 8f6f 	isb	sy
	}
 8008648:	bd10      	pop	{r4, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 800864a:	4c10      	ldr	r4, [pc, #64]	; (800868c <vTaskDelay+0x5c>)
 800864c:	6821      	ldr	r1, [r4, #0]
 800864e:	b141      	cbz	r1, 8008662 <vTaskDelay+0x32>
 8008650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008654:	f383 8811 	msr	BASEPRI, r3
 8008658:	f3bf 8f6f 	isb	sy
 800865c:	f3bf 8f4f 	dsb	sy
 8008660:	e7fe      	b.n	8008660 <vTaskDelay+0x30>
	++uxSchedulerSuspended;
 8008662:	6823      	ldr	r3, [r4, #0]
 8008664:	3301      	adds	r3, #1
 8008666:	6023      	str	r3, [r4, #0]
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008668:	f7ff fcd2 	bl	8008010 <prvAddCurrentTaskToDelayedList>
	configASSERT( uxSchedulerSuspended );
 800866c:	6823      	ldr	r3, [r4, #0]
 800866e:	b943      	cbnz	r3, 8008682 <vTaskDelay+0x52>
 8008670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008674:	f383 8811 	msr	BASEPRI, r3
 8008678:	f3bf 8f6f 	isb	sy
 800867c:	f3bf 8f4f 	dsb	sy
 8008680:	e7fe      	b.n	8008680 <vTaskDelay+0x50>
 8008682:	f7ff ff3f 	bl	8008504 <xTaskResumeAll.part.0>
		if( xAlreadyYielded == pdFALSE )
 8008686:	2800      	cmp	r0, #0
 8008688:	d0d4      	beq.n	8008634 <vTaskDelay+0x4>
	}
 800868a:	bd10      	pop	{r4, pc}
 800868c:	240020cc 	.word	0x240020cc

08008690 <vTaskSwitchContext>:
{
 8008690:	b538      	push	{r3, r4, r5, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008692:	4b24      	ldr	r3, [pc, #144]	; (8008724 <vTaskSwitchContext+0x94>)
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	b11b      	cbz	r3, 80086a0 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8008698:	4b23      	ldr	r3, [pc, #140]	; (8008728 <vTaskSwitchContext+0x98>)
 800869a:	2201      	movs	r2, #1
 800869c:	601a      	str	r2, [r3, #0]
}
 800869e:	bd38      	pop	{r3, r4, r5, pc}
		taskCHECK_FOR_STACK_OVERFLOW();
 80086a0:	4c22      	ldr	r4, [pc, #136]	; (800872c <vTaskSwitchContext+0x9c>)
		xYieldPending = pdFALSE;
 80086a2:	4a21      	ldr	r2, [pc, #132]	; (8008728 <vTaskSwitchContext+0x98>)
 80086a4:	6013      	str	r3, [r2, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 80086a6:	6822      	ldr	r2, [r4, #0]
 80086a8:	6823      	ldr	r3, [r4, #0]
 80086aa:	6812      	ldr	r2, [r2, #0]
 80086ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086ae:	429a      	cmp	r2, r3
 80086b0:	d92e      	bls.n	8008710 <vTaskSwitchContext+0x80>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80086b2:	4d1f      	ldr	r5, [pc, #124]	; (8008730 <vTaskSwitchContext+0xa0>)
 80086b4:	491f      	ldr	r1, [pc, #124]	; (8008734 <vTaskSwitchContext+0xa4>)
 80086b6:	682b      	ldr	r3, [r5, #0]
 80086b8:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80086bc:	0098      	lsls	r0, r3, #2
 80086be:	0092      	lsls	r2, r2, #2
 80086c0:	588a      	ldr	r2, [r1, r2]
 80086c2:	b942      	cbnz	r2, 80086d6 <vTaskSwitchContext+0x46>
 80086c4:	b1db      	cbz	r3, 80086fe <vTaskSwitchContext+0x6e>
 80086c6:	3b01      	subs	r3, #1
 80086c8:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80086cc:	0098      	lsls	r0, r3, #2
 80086ce:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80086d2:	2a00      	cmp	r2, #0
 80086d4:	d0f6      	beq.n	80086c4 <vTaskSwitchContext+0x34>
 80086d6:	4418      	add	r0, r3
 80086d8:	eb01 0c80 	add.w	ip, r1, r0, lsl #2
 80086dc:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80086e0:	4662      	mov	r2, ip
 80086e2:	6849      	ldr	r1, [r1, #4]
 80086e4:	3208      	adds	r2, #8
 80086e6:	4291      	cmp	r1, r2
 80086e8:	f8cc 1004 	str.w	r1, [ip, #4]
 80086ec:	d016      	beq.n	800871c <vTaskSwitchContext+0x8c>
 80086ee:	68c9      	ldr	r1, [r1, #12]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80086f0:	4a11      	ldr	r2, [pc, #68]	; (8008738 <vTaskSwitchContext+0xa8>)
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80086f2:	6021      	str	r1, [r4, #0]
 80086f4:	602b      	str	r3, [r5, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80086f6:	6823      	ldr	r3, [r4, #0]
 80086f8:	3354      	adds	r3, #84	; 0x54
 80086fa:	6013      	str	r3, [r2, #0]
}
 80086fc:	bd38      	pop	{r3, r4, r5, pc}
 80086fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008702:	f383 8811 	msr	BASEPRI, r3
 8008706:	f3bf 8f6f 	isb	sy
 800870a:	f3bf 8f4f 	dsb	sy
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800870e:	e7fe      	b.n	800870e <vTaskSwitchContext+0x7e>
		taskCHECK_FOR_STACK_OVERFLOW();
 8008710:	6820      	ldr	r0, [r4, #0]
 8008712:	6821      	ldr	r1, [r4, #0]
 8008714:	3134      	adds	r1, #52	; 0x34
 8008716:	f7f7 ffb9 	bl	800068c <vApplicationStackOverflowHook>
 800871a:	e7ca      	b.n	80086b2 <vTaskSwitchContext+0x22>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800871c:	6849      	ldr	r1, [r1, #4]
 800871e:	f8cc 1004 	str.w	r1, [ip, #4]
 8008722:	e7e4      	b.n	80086ee <vTaskSwitchContext+0x5e>
 8008724:	240020cc 	.word	0x240020cc
 8008728:	24002150 	.word	0x24002150
 800872c:	24001c58 	.word	0x24001c58
 8008730:	240020d4 	.word	0x240020d4
 8008734:	24001c64 	.word	0x24001c64
 8008738:	240000b8 	.word	0x240000b8

0800873c <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 800873c:	b160      	cbz	r0, 8008758 <vTaskPlaceOnEventList+0x1c>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800873e:	4b0b      	ldr	r3, [pc, #44]	; (800876c <vTaskPlaceOnEventList+0x30>)
{
 8008740:	b510      	push	{r4, lr}
 8008742:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008744:	6819      	ldr	r1, [r3, #0]
 8008746:	3118      	adds	r1, #24
 8008748:	f7fe fda4 	bl	8007294 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800874c:	4620      	mov	r0, r4
 800874e:	2101      	movs	r1, #1
}
 8008750:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008754:	f7ff bc5c 	b.w	8008010 <prvAddCurrentTaskToDelayedList>
 8008758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800875c:	f383 8811 	msr	BASEPRI, r3
 8008760:	f3bf 8f6f 	isb	sy
 8008764:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 8008768:	e7fe      	b.n	8008768 <vTaskPlaceOnEventList+0x2c>
 800876a:	bf00      	nop
 800876c:	24001c58 	.word	0x24001c58

08008770 <vTaskPlaceOnEventListRestricted>:
	{
 8008770:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 8008772:	b180      	cbz	r0, 8008796 <vTaskPlaceOnEventListRestricted+0x26>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008774:	4b0c      	ldr	r3, [pc, #48]	; (80087a8 <vTaskPlaceOnEventListRestricted+0x38>)
 8008776:	460d      	mov	r5, r1
 8008778:	4614      	mov	r4, r2
 800877a:	6819      	ldr	r1, [r3, #0]
 800877c:	3118      	adds	r1, #24
 800877e:	f7fe fd79 	bl	8007274 <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 8008782:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008784:	4621      	mov	r1, r4
 8008786:	bf0c      	ite	eq
 8008788:	4628      	moveq	r0, r5
 800878a:	f04f 30ff 	movne.w	r0, #4294967295
	}
 800878e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008792:	f7ff bc3d 	b.w	8008010 <prvAddCurrentTaskToDelayedList>
 8008796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800879a:	f383 8811 	msr	BASEPRI, r3
 800879e:	f3bf 8f6f 	isb	sy
 80087a2:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventList );
 80087a6:	e7fe      	b.n	80087a6 <vTaskPlaceOnEventListRestricted+0x36>
 80087a8:	24001c58 	.word	0x24001c58

080087ac <xTaskRemoveFromEventList>:
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80087ac:	68c3      	ldr	r3, [r0, #12]
{
 80087ae:	b530      	push	{r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80087b0:	68dc      	ldr	r4, [r3, #12]
{
 80087b2:	b083      	sub	sp, #12
	configASSERT( pxUnblockedTCB );
 80087b4:	b35c      	cbz	r4, 800880e <xTaskRemoveFromEventList+0x62>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80087b6:	f104 0518 	add.w	r5, r4, #24
 80087ba:	4628      	mov	r0, r5
 80087bc:	f7fe fd82 	bl	80072c4 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80087c0:	4b19      	ldr	r3, [pc, #100]	; (8008828 <xTaskRemoveFromEventList+0x7c>)
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	b17b      	cbz	r3, 80087e6 <xTaskRemoveFromEventList+0x3a>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80087c6:	4629      	mov	r1, r5
 80087c8:	4818      	ldr	r0, [pc, #96]	; (800882c <xTaskRemoveFromEventList+0x80>)
 80087ca:	f7fe fd53 	bl	8007274 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80087ce:	4b18      	ldr	r3, [pc, #96]	; (8008830 <xTaskRemoveFromEventList+0x84>)
 80087d0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087d6:	429a      	cmp	r2, r3
 80087d8:	d922      	bls.n	8008820 <xTaskRemoveFromEventList+0x74>
		xYieldPending = pdTRUE;
 80087da:	2301      	movs	r3, #1
 80087dc:	4a15      	ldr	r2, [pc, #84]	; (8008834 <xTaskRemoveFromEventList+0x88>)
		xReturn = pdTRUE;
 80087de:	4618      	mov	r0, r3
		xYieldPending = pdTRUE;
 80087e0:	6013      	str	r3, [r2, #0]
}
 80087e2:	b003      	add	sp, #12
 80087e4:	bd30      	pop	{r4, r5, pc}
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80087e6:	1d21      	adds	r1, r4, #4
 80087e8:	4608      	mov	r0, r1
 80087ea:	9101      	str	r1, [sp, #4]
 80087ec:	f7fe fd6a 	bl	80072c4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80087f0:	4a11      	ldr	r2, [pc, #68]	; (8008838 <xTaskRemoveFromEventList+0x8c>)
 80087f2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80087f4:	6810      	ldr	r0, [r2, #0]
 80087f6:	9901      	ldr	r1, [sp, #4]
 80087f8:	4283      	cmp	r3, r0
 80087fa:	d900      	bls.n	80087fe <xTaskRemoveFromEventList+0x52>
 80087fc:	6013      	str	r3, [r2, #0]
 80087fe:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8008802:	480e      	ldr	r0, [pc, #56]	; (800883c <xTaskRemoveFromEventList+0x90>)
 8008804:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8008808:	f7fe fd34 	bl	8007274 <vListInsertEnd>
 800880c:	e7df      	b.n	80087ce <xTaskRemoveFromEventList+0x22>
 800880e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008812:	f383 8811 	msr	BASEPRI, r3
 8008816:	f3bf 8f6f 	isb	sy
 800881a:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 800881e:	e7fe      	b.n	800881e <xTaskRemoveFromEventList+0x72>
		xReturn = pdFALSE;
 8008820:	2000      	movs	r0, #0
}
 8008822:	b003      	add	sp, #12
 8008824:	bd30      	pop	{r4, r5, pc}
 8008826:	bf00      	nop
 8008828:	240020cc 	.word	0x240020cc
 800882c:	2400210c 	.word	0x2400210c
 8008830:	24001c58 	.word	0x24001c58
 8008834:	24002150 	.word	0x24002150
 8008838:	240020d4 	.word	0x240020d4
 800883c:	24001c64 	.word	0x24001c64

08008840 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008840:	4a03      	ldr	r2, [pc, #12]	; (8008850 <vTaskInternalSetTimeOutState+0x10>)
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008842:	4b04      	ldr	r3, [pc, #16]	; (8008854 <vTaskInternalSetTimeOutState+0x14>)
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008844:	6812      	ldr	r2, [r2, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	e9c0 2300 	strd	r2, r3, [r0]
}
 800884c:	4770      	bx	lr
 800884e:	bf00      	nop
 8008850:	24002104 	.word	0x24002104
 8008854:	2400214c 	.word	0x2400214c

08008858 <xTaskCheckForTimeOut>:
	configASSERT( pxTimeOut );
 8008858:	b328      	cbz	r0, 80088a6 <xTaskCheckForTimeOut+0x4e>
{
 800885a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800885c:	460d      	mov	r5, r1
 800885e:	b083      	sub	sp, #12
	configASSERT( pxTicksToWait );
 8008860:	b1c1      	cbz	r1, 8008894 <xTaskCheckForTimeOut+0x3c>
 8008862:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8008864:	f000 fbc6 	bl	8008ff4 <vPortEnterCritical>
			if( *pxTicksToWait == portMAX_DELAY )
 8008868:	682b      	ldr	r3, [r5, #0]
		const TickType_t xConstTickCount = xTickCount;
 800886a:	4a1d      	ldr	r2, [pc, #116]	; (80088e0 <xTaskCheckForTimeOut+0x88>)
			if( *pxTicksToWait == portMAX_DELAY )
 800886c:	1c58      	adds	r0, r3, #1
		const TickType_t xConstTickCount = xTickCount;
 800886e:	6811      	ldr	r1, [r2, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8008870:	d030      	beq.n	80088d4 <xTaskCheckForTimeOut+0x7c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008872:	f8df c070 	ldr.w	ip, [pc, #112]	; 80088e4 <xTaskCheckForTimeOut+0x8c>
 8008876:	6826      	ldr	r6, [r4, #0]
 8008878:	f8dc 7000 	ldr.w	r7, [ip]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800887c:	6860      	ldr	r0, [r4, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800887e:	42be      	cmp	r6, r7
 8008880:	d01a      	beq.n	80088b8 <xTaskCheckForTimeOut+0x60>
 8008882:	4288      	cmp	r0, r1
 8008884:	d818      	bhi.n	80088b8 <xTaskCheckForTimeOut+0x60>
			xReturn = pdTRUE;
 8008886:	2001      	movs	r0, #1
 8008888:	9001      	str	r0, [sp, #4]
	taskEXIT_CRITICAL();
 800888a:	f000 fbd5 	bl	8009038 <vPortExitCritical>
}
 800888e:	9801      	ldr	r0, [sp, #4]
 8008890:	b003      	add	sp, #12
 8008892:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008898:	f383 8811 	msr	BASEPRI, r3
 800889c:	f3bf 8f6f 	isb	sy
 80088a0:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
 80088a4:	e7fe      	b.n	80088a4 <xTaskCheckForTimeOut+0x4c>
 80088a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088aa:	f383 8811 	msr	BASEPRI, r3
 80088ae:	f3bf 8f6f 	isb	sy
 80088b2:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
 80088b6:	e7fe      	b.n	80088b6 <xTaskCheckForTimeOut+0x5e>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80088b8:	eba1 0e00 	sub.w	lr, r1, r0
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80088bc:	4573      	cmp	r3, lr
 80088be:	d90b      	bls.n	80088d8 <xTaskCheckForTimeOut+0x80>
			*pxTicksToWait -= xElapsedTime;
 80088c0:	1a5b      	subs	r3, r3, r1
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80088c2:	f8dc 1000 	ldr.w	r1, [ip]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80088c6:	6812      	ldr	r2, [r2, #0]
			*pxTicksToWait -= xElapsedTime;
 80088c8:	4403      	add	r3, r0
			xReturn = pdFALSE;
 80088ca:	2000      	movs	r0, #0
			*pxTicksToWait -= xElapsedTime;
 80088cc:	602b      	str	r3, [r5, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80088ce:	e9c4 1200 	strd	r1, r2, [r4]
			xReturn = pdFALSE;
 80088d2:	e7d9      	b.n	8008888 <xTaskCheckForTimeOut+0x30>
				xReturn = pdFALSE;
 80088d4:	2000      	movs	r0, #0
 80088d6:	e7d7      	b.n	8008888 <xTaskCheckForTimeOut+0x30>
			*pxTicksToWait = 0;
 80088d8:	2300      	movs	r3, #0
			xReturn = pdTRUE;
 80088da:	2001      	movs	r0, #1
			*pxTicksToWait = 0;
 80088dc:	602b      	str	r3, [r5, #0]
			xReturn = pdTRUE;
 80088de:	e7d3      	b.n	8008888 <xTaskCheckForTimeOut+0x30>
 80088e0:	2400214c 	.word	0x2400214c
 80088e4:	24002104 	.word	0x24002104

080088e8 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 80088e8:	4b01      	ldr	r3, [pc, #4]	; (80088f0 <vTaskMissedYield+0x8>)
 80088ea:	2201      	movs	r2, #1
 80088ec:	601a      	str	r2, [r3, #0]
}
 80088ee:	4770      	bx	lr
 80088f0:	24002150 	.word	0x24002150

080088f4 <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 80088f4:	4b01      	ldr	r3, [pc, #4]	; (80088fc <xTaskGetCurrentTaskHandle+0x8>)
 80088f6:	6818      	ldr	r0, [r3, #0]
	}
 80088f8:	4770      	bx	lr
 80088fa:	bf00      	nop
 80088fc:	24001c58 	.word	0x24001c58

08008900 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8008900:	4b05      	ldr	r3, [pc, #20]	; (8008918 <xTaskGetSchedulerState+0x18>)
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	b133      	cbz	r3, 8008914 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008906:	4b05      	ldr	r3, [pc, #20]	; (800891c <xTaskGetSchedulerState+0x1c>)
 8008908:	6818      	ldr	r0, [r3, #0]
 800890a:	fab0 f080 	clz	r0, r0
 800890e:	0940      	lsrs	r0, r0, #5
 8008910:	0040      	lsls	r0, r0, #1
 8008912:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008914:	2001      	movs	r0, #1
	}
 8008916:	4770      	bx	lr
 8008918:	24002120 	.word	0x24002120
 800891c:	240020cc 	.word	0x240020cc

08008920 <xTaskPriorityInherit>:
	{
 8008920:	b570      	push	{r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 8008922:	4604      	mov	r4, r0
	{
 8008924:	b082      	sub	sp, #8
		if( pxMutexHolder != NULL )
 8008926:	b1c8      	cbz	r0, 800895c <xTaskPriorityInherit+0x3c>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008928:	4d1d      	ldr	r5, [pc, #116]	; (80089a0 <xTaskPriorityInherit+0x80>)
 800892a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800892c:	682a      	ldr	r2, [r5, #0]
 800892e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008930:	4293      	cmp	r3, r2
 8008932:	d215      	bcs.n	8008960 <xTaskPriorityInherit+0x40>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008934:	6982      	ldr	r2, [r0, #24]
 8008936:	2a00      	cmp	r2, #0
 8008938:	db04      	blt.n	8008944 <xTaskPriorityInherit+0x24>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800893a:	682a      	ldr	r2, [r5, #0]
 800893c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800893e:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8008942:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008944:	4e17      	ldr	r6, [pc, #92]	; (80089a4 <xTaskPriorityInherit+0x84>)
 8008946:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800894a:	6962      	ldr	r2, [r4, #20]
 800894c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008950:	429a      	cmp	r2, r3
 8008952:	d00e      	beq.n	8008972 <xTaskPriorityInherit+0x52>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008954:	682b      	ldr	r3, [r5, #0]
				xReturn = pdTRUE;
 8008956:	2001      	movs	r0, #1
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800895a:	62e3      	str	r3, [r4, #44]	; 0x2c
	}
 800895c:	b002      	add	sp, #8
 800895e:	bd70      	pop	{r4, r5, r6, pc}
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008960:	682b      	ldr	r3, [r5, #0]
 8008962:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8008964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008966:	4298      	cmp	r0, r3
 8008968:	bf2c      	ite	cs
 800896a:	2000      	movcs	r0, #0
 800896c:	2001      	movcc	r0, #1
	}
 800896e:	b002      	add	sp, #8
 8008970:	bd70      	pop	{r4, r5, r6, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008972:	1d21      	adds	r1, r4, #4
 8008974:	4608      	mov	r0, r1
 8008976:	9101      	str	r1, [sp, #4]
 8008978:	f7fe fca4 	bl	80072c4 <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800897c:	682a      	ldr	r2, [r5, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800897e:	4b0a      	ldr	r3, [pc, #40]	; (80089a8 <xTaskPriorityInherit+0x88>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008980:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008982:	681a      	ldr	r2, [r3, #0]
 8008984:	9901      	ldr	r1, [sp, #4]
 8008986:	4290      	cmp	r0, r2
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008988:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800898a:	d900      	bls.n	800898e <xTaskPriorityInherit+0x6e>
 800898c:	6018      	str	r0, [r3, #0]
 800898e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8008992:	eb06 0080 	add.w	r0, r6, r0, lsl #2
 8008996:	f7fe fc6d 	bl	8007274 <vListInsertEnd>
				xReturn = pdTRUE;
 800899a:	2001      	movs	r0, #1
 800899c:	e7de      	b.n	800895c <xTaskPriorityInherit+0x3c>
 800899e:	bf00      	nop
 80089a0:	24001c58 	.word	0x24001c58
 80089a4:	24001c64 	.word	0x24001c64
 80089a8:	240020d4 	.word	0x240020d4

080089ac <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 80089ac:	b318      	cbz	r0, 80089f6 <xTaskPriorityDisinherit+0x4a>
			configASSERT( pxTCB == pxCurrentTCB );
 80089ae:	4b1f      	ldr	r3, [pc, #124]	; (8008a2c <xTaskPriorityDisinherit+0x80>)
	{
 80089b0:	b510      	push	{r4, lr}
			configASSERT( pxTCB == pxCurrentTCB );
 80089b2:	681c      	ldr	r4, [r3, #0]
	{
 80089b4:	b082      	sub	sp, #8
			configASSERT( pxTCB == pxCurrentTCB );
 80089b6:	4284      	cmp	r4, r0
 80089b8:	d008      	beq.n	80089cc <xTaskPriorityDisinherit+0x20>
 80089ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089be:	f383 8811 	msr	BASEPRI, r3
 80089c2:	f3bf 8f6f 	isb	sy
 80089c6:	f3bf 8f4f 	dsb	sy
 80089ca:	e7fe      	b.n	80089ca <xTaskPriorityDisinherit+0x1e>
			configASSERT( pxTCB->uxMutexesHeld );
 80089cc:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80089ce:	b14b      	cbz	r3, 80089e4 <xTaskPriorityDisinherit+0x38>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80089d0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
			( pxTCB->uxMutexesHeld )--;
 80089d2:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80089d4:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
			( pxTCB->uxMutexesHeld )--;
 80089d6:	6523      	str	r3, [r4, #80]	; 0x50
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80089d8:	4291      	cmp	r1, r2
 80089da:	d000      	beq.n	80089de <xTaskPriorityDisinherit+0x32>
 80089dc:	b16b      	cbz	r3, 80089fa <xTaskPriorityDisinherit+0x4e>
	BaseType_t xReturn = pdFALSE;
 80089de:	2000      	movs	r0, #0
	}
 80089e0:	b002      	add	sp, #8
 80089e2:	bd10      	pop	{r4, pc}
 80089e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089e8:	f383 8811 	msr	BASEPRI, r3
 80089ec:	f3bf 8f6f 	isb	sy
 80089f0:	f3bf 8f4f 	dsb	sy
			configASSERT( pxTCB->uxMutexesHeld );
 80089f4:	e7fe      	b.n	80089f4 <xTaskPriorityDisinherit+0x48>
	BaseType_t xReturn = pdFALSE;
 80089f6:	2000      	movs	r0, #0
	}
 80089f8:	4770      	bx	lr
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80089fa:	1d21      	adds	r1, r4, #4
 80089fc:	4608      	mov	r0, r1
 80089fe:	9101      	str	r1, [sp, #4]
 8008a00:	f7fe fc60 	bl	80072c4 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008a04:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
					prvAddTaskToReadyList( pxTCB );
 8008a06:	4b0a      	ldr	r3, [pc, #40]	; (8008a30 <xTaskPriorityDisinherit+0x84>)
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a08:	f1c0 0238 	rsb	r2, r0, #56	; 0x38
					prvAddTaskToReadyList( pxTCB );
 8008a0c:	9901      	ldr	r1, [sp, #4]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008a0e:	62e0      	str	r0, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a10:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8008a12:	681a      	ldr	r2, [r3, #0]
 8008a14:	4290      	cmp	r0, r2
 8008a16:	d900      	bls.n	8008a1a <xTaskPriorityDisinherit+0x6e>
 8008a18:	6018      	str	r0, [r3, #0]
 8008a1a:	4b06      	ldr	r3, [pc, #24]	; (8008a34 <xTaskPriorityDisinherit+0x88>)
 8008a1c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8008a20:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008a24:	f7fe fc26 	bl	8007274 <vListInsertEnd>
					xReturn = pdTRUE;
 8008a28:	2001      	movs	r0, #1
		return xReturn;
 8008a2a:	e7d9      	b.n	80089e0 <xTaskPriorityDisinherit+0x34>
 8008a2c:	24001c58 	.word	0x24001c58
 8008a30:	240020d4 	.word	0x240020d4
 8008a34:	24001c64 	.word	0x24001c64

08008a38 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
 8008a38:	2800      	cmp	r0, #0
 8008a3a:	d040      	beq.n	8008abe <vTaskPriorityDisinheritAfterTimeout+0x86>
			configASSERT( pxTCB->uxMutexesHeld );
 8008a3c:	6d03      	ldr	r3, [r0, #80]	; 0x50
	{
 8008a3e:	b530      	push	{r4, r5, lr}
 8008a40:	4604      	mov	r4, r0
 8008a42:	b083      	sub	sp, #12
			configASSERT( pxTCB->uxMutexesHeld );
 8008a44:	b153      	cbz	r3, 8008a5c <vTaskPriorityDisinheritAfterTimeout+0x24>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008a46:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008a48:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8008a4a:	4281      	cmp	r1, r0
 8008a4c:	bf38      	it	cc
 8008a4e:	4601      	movcc	r1, r0
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008a50:	2b01      	cmp	r3, #1
 8008a52:	d101      	bne.n	8008a58 <vTaskPriorityDisinheritAfterTimeout+0x20>
 8008a54:	428a      	cmp	r2, r1
 8008a56:	d10a      	bne.n	8008a6e <vTaskPriorityDisinheritAfterTimeout+0x36>
	}
 8008a58:	b003      	add	sp, #12
 8008a5a:	bd30      	pop	{r4, r5, pc}
 8008a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a60:	f383 8811 	msr	BASEPRI, r3
 8008a64:	f3bf 8f6f 	isb	sy
 8008a68:	f3bf 8f4f 	dsb	sy
			configASSERT( pxTCB->uxMutexesHeld );
 8008a6c:	e7fe      	b.n	8008a6c <vTaskPriorityDisinheritAfterTimeout+0x34>
					configASSERT( pxTCB != pxCurrentTCB );
 8008a6e:	4b19      	ldr	r3, [pc, #100]	; (8008ad4 <vTaskPriorityDisinheritAfterTimeout+0x9c>)
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	42a3      	cmp	r3, r4
 8008a74:	d024      	beq.n	8008ac0 <vTaskPriorityDisinheritAfterTimeout+0x88>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008a76:	69a3      	ldr	r3, [r4, #24]
					pxTCB->uxPriority = uxPriorityToUse;
 8008a78:	62e1      	str	r1, [r4, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	db02      	blt.n	8008a84 <vTaskPriorityDisinheritAfterTimeout+0x4c>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a7e:	f1c1 0138 	rsb	r1, r1, #56	; 0x38
 8008a82:	61a1      	str	r1, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008a84:	4d14      	ldr	r5, [pc, #80]	; (8008ad8 <vTaskPriorityDisinheritAfterTimeout+0xa0>)
 8008a86:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8008a8a:	6961      	ldr	r1, [r4, #20]
 8008a8c:	eb05 0382 	add.w	r3, r5, r2, lsl #2
 8008a90:	4299      	cmp	r1, r3
 8008a92:	d1e1      	bne.n	8008a58 <vTaskPriorityDisinheritAfterTimeout+0x20>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008a94:	1d21      	adds	r1, r4, #4
 8008a96:	4608      	mov	r0, r1
 8008a98:	9101      	str	r1, [sp, #4]
 8008a9a:	f7fe fc13 	bl	80072c4 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 8008a9e:	4b0f      	ldr	r3, [pc, #60]	; (8008adc <vTaskPriorityDisinheritAfterTimeout+0xa4>)
 8008aa0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8008aa2:	681a      	ldr	r2, [r3, #0]
 8008aa4:	9901      	ldr	r1, [sp, #4]
 8008aa6:	4290      	cmp	r0, r2
 8008aa8:	d900      	bls.n	8008aac <vTaskPriorityDisinheritAfterTimeout+0x74>
 8008aaa:	6018      	str	r0, [r3, #0]
 8008aac:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8008ab0:	eb05 0080 	add.w	r0, r5, r0, lsl #2
	}
 8008ab4:	b003      	add	sp, #12
 8008ab6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
						prvAddTaskToReadyList( pxTCB );
 8008aba:	f7fe bbdb 	b.w	8007274 <vListInsertEnd>
 8008abe:	4770      	bx	lr
 8008ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ac4:	f383 8811 	msr	BASEPRI, r3
 8008ac8:	f3bf 8f6f 	isb	sy
 8008acc:	f3bf 8f4f 	dsb	sy
					configASSERT( pxTCB != pxCurrentTCB );
 8008ad0:	e7fe      	b.n	8008ad0 <vTaskPriorityDisinheritAfterTimeout+0x98>
 8008ad2:	bf00      	nop
 8008ad4:	24001c58 	.word	0x24001c58
 8008ad8:	24001c64 	.word	0x24001c64
 8008adc:	240020d4 	.word	0x240020d4

08008ae0 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8008ae0:	4b04      	ldr	r3, [pc, #16]	; (8008af4 <pvTaskIncrementMutexHeldCount+0x14>)
 8008ae2:	681a      	ldr	r2, [r3, #0]
 8008ae4:	b11a      	cbz	r2, 8008aee <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 8008ae6:	6819      	ldr	r1, [r3, #0]
 8008ae8:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8008aea:	3201      	adds	r2, #1
 8008aec:	650a      	str	r2, [r1, #80]	; 0x50
		return pxCurrentTCB;
 8008aee:	6818      	ldr	r0, [r3, #0]
	}
 8008af0:	4770      	bx	lr
 8008af2:	bf00      	nop
 8008af4:	24001c58 	.word	0x24001c58

08008af8 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008af8:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 8008afa:	4c12      	ldr	r4, [pc, #72]	; (8008b44 <prvCheckForValidListAndQueue+0x4c>)
{
 8008afc:	b083      	sub	sp, #12
	taskENTER_CRITICAL();
 8008afe:	f000 fa79 	bl	8008ff4 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 8008b02:	6825      	ldr	r5, [r4, #0]
 8008b04:	b125      	cbz	r5, 8008b10 <prvCheckForValidListAndQueue+0x18>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 8008b06:	b003      	add	sp, #12
 8008b08:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 8008b0c:	f000 ba94 	b.w	8009038 <vPortExitCritical>
			vListInitialise( &xActiveTimerList1 );
 8008b10:	4f0d      	ldr	r7, [pc, #52]	; (8008b48 <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList2 );
 8008b12:	4e0e      	ldr	r6, [pc, #56]	; (8008b4c <prvCheckForValidListAndQueue+0x54>)
			vListInitialise( &xActiveTimerList1 );
 8008b14:	4638      	mov	r0, r7
 8008b16:	f7fe fb9d 	bl	8007254 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008b1a:	4630      	mov	r0, r6
 8008b1c:	f7fe fb9a 	bl	8007254 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008b20:	4a0b      	ldr	r2, [pc, #44]	; (8008b50 <prvCheckForValidListAndQueue+0x58>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008b22:	9500      	str	r5, [sp, #0]
 8008b24:	2110      	movs	r1, #16
			pxCurrentTimerList = &xActiveTimerList1;
 8008b26:	6017      	str	r7, [r2, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008b28:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
 8008b2a:	4a0a      	ldr	r2, [pc, #40]	; (8008b54 <prvCheckForValidListAndQueue+0x5c>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008b2c:	4b0a      	ldr	r3, [pc, #40]	; (8008b58 <prvCheckForValidListAndQueue+0x60>)
			pxOverflowTimerList = &xActiveTimerList2;
 8008b2e:	6016      	str	r6, [r2, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008b30:	4a0a      	ldr	r2, [pc, #40]	; (8008b5c <prvCheckForValidListAndQueue+0x64>)
 8008b32:	f7fe fca9 	bl	8007488 <xQueueGenericCreateStatic>
 8008b36:	6020      	str	r0, [r4, #0]
				if( xTimerQueue != NULL )
 8008b38:	2800      	cmp	r0, #0
 8008b3a:	d0e4      	beq.n	8008b06 <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008b3c:	4908      	ldr	r1, [pc, #32]	; (8008b60 <prvCheckForValidListAndQueue+0x68>)
 8008b3e:	f7ff f9a1 	bl	8007e84 <vQueueAddToRegistry>
 8008b42:	e7e0      	b.n	8008b06 <prvCheckForValidListAndQueue+0xe>
 8008b44:	24002278 	.word	0x24002278
 8008b48:	240021fc 	.word	0x240021fc
 8008b4c:	24002210 	.word	0x24002210
 8008b50:	24002154 	.word	0x24002154
 8008b54:	24002158 	.word	0x24002158
 8008b58:	24002228 	.word	0x24002228
 8008b5c:	2400215c 	.word	0x2400215c
 8008b60:	080131d0 	.word	0x080131d0

08008b64 <xTimerCreateTimerTask>:
{
 8008b64:	b530      	push	{r4, r5, lr}
 8008b66:	b089      	sub	sp, #36	; 0x24
	prvCheckForValidListAndQueue();
 8008b68:	f7ff ffc6 	bl	8008af8 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 8008b6c:	4b12      	ldr	r3, [pc, #72]	; (8008bb8 <xTimerCreateTimerTask+0x54>)
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	b1cb      	cbz	r3, 8008ba6 <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008b72:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008b74:	aa07      	add	r2, sp, #28
 8008b76:	a906      	add	r1, sp, #24
 8008b78:	a805      	add	r0, sp, #20
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008b7a:	2502      	movs	r5, #2
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008b7c:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008b80:	f7fe fb58 	bl	8007234 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008b84:	4623      	mov	r3, r4
 8008b86:	9a07      	ldr	r2, [sp, #28]
 8008b88:	9500      	str	r5, [sp, #0]
 8008b8a:	e9dd 0105 	ldrd	r0, r1, [sp, #20]
 8008b8e:	e9cd 1001 	strd	r1, r0, [sp, #4]
 8008b92:	490a      	ldr	r1, [pc, #40]	; (8008bbc <xTimerCreateTimerTask+0x58>)
 8008b94:	480a      	ldr	r0, [pc, #40]	; (8008bc0 <xTimerCreateTimerTask+0x5c>)
 8008b96:	f7ff fb2b 	bl	80081f0 <xTaskCreateStatic>
 8008b9a:	4b0a      	ldr	r3, [pc, #40]	; (8008bc4 <xTimerCreateTimerTask+0x60>)
 8008b9c:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 8008b9e:	b110      	cbz	r0, 8008ba6 <xTimerCreateTimerTask+0x42>
}
 8008ba0:	2001      	movs	r0, #1
 8008ba2:	b009      	add	sp, #36	; 0x24
 8008ba4:	bd30      	pop	{r4, r5, pc}
 8008ba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008baa:	f383 8811 	msr	BASEPRI, r3
 8008bae:	f3bf 8f6f 	isb	sy
 8008bb2:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 8008bb6:	e7fe      	b.n	8008bb6 <xTimerCreateTimerTask+0x52>
 8008bb8:	24002278 	.word	0x24002278
 8008bbc:	080131d8 	.word	0x080131d8
 8008bc0:	08008cb5 	.word	0x08008cb5
 8008bc4:	2400227c 	.word	0x2400227c

08008bc8 <xTimerGenericCommand>:
	configASSERT( xTimer );
 8008bc8:	b1c8      	cbz	r0, 8008bfe <xTimerGenericCommand+0x36>
{
 8008bca:	b570      	push	{r4, r5, r6, lr}
	if( xTimerQueue != NULL )
 8008bcc:	4e17      	ldr	r6, [pc, #92]	; (8008c2c <xTimerGenericCommand+0x64>)
{
 8008bce:	b084      	sub	sp, #16
	if( xTimerQueue != NULL )
 8008bd0:	6834      	ldr	r4, [r6, #0]
 8008bd2:	b18c      	cbz	r4, 8008bf8 <xTimerGenericCommand+0x30>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008bd4:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008bd6:	9002      	str	r0, [sp, #8]
		xMessage.xMessageID = xCommandID;
 8008bd8:	e9cd 1200 	strd	r1, r2, [sp]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008bdc:	dc18      	bgt.n	8008c10 <xTimerGenericCommand+0x48>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008bde:	f7ff fe8f 	bl	8008900 <xTaskGetSchedulerState>
 8008be2:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008be4:	f04f 0300 	mov.w	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008be8:	d01a      	beq.n	8008c20 <xTimerGenericCommand+0x58>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008bea:	4669      	mov	r1, sp
 8008bec:	461a      	mov	r2, r3
 8008bee:	6830      	ldr	r0, [r6, #0]
 8008bf0:	f7fe fd06 	bl	8007600 <xQueueGenericSend>
}
 8008bf4:	b004      	add	sp, #16
 8008bf6:	bd70      	pop	{r4, r5, r6, pc}
BaseType_t xReturn = pdFAIL;
 8008bf8:	4620      	mov	r0, r4
}
 8008bfa:	b004      	add	sp, #16
 8008bfc:	bd70      	pop	{r4, r5, r6, pc}
 8008bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c02:	f383 8811 	msr	BASEPRI, r3
 8008c06:	f3bf 8f6f 	isb	sy
 8008c0a:	f3bf 8f4f 	dsb	sy
	configASSERT( xTimer );
 8008c0e:	e7fe      	b.n	8008c0e <xTimerGenericCommand+0x46>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008c10:	461a      	mov	r2, r3
 8008c12:	4669      	mov	r1, sp
 8008c14:	2300      	movs	r3, #0
 8008c16:	4620      	mov	r0, r4
 8008c18:	f7fe fe2a 	bl	8007870 <xQueueGenericSendFromISR>
}
 8008c1c:	b004      	add	sp, #16
 8008c1e:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008c20:	9a08      	ldr	r2, [sp, #32]
 8008c22:	4669      	mov	r1, sp
 8008c24:	6830      	ldr	r0, [r6, #0]
 8008c26:	f7fe fceb 	bl	8007600 <xQueueGenericSend>
 8008c2a:	e7e6      	b.n	8008bfa <xTimerGenericCommand+0x32>
 8008c2c:	24002278 	.word	0x24002278

08008c30 <prvSwitchTimerLists>:
{
 8008c30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c34:	4e1d      	ldr	r6, [pc, #116]	; (8008cac <prvSwitchTimerLists+0x7c>)
 8008c36:	b082      	sub	sp, #8
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008c38:	f04f 0800 	mov.w	r8, #0
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008c3c:	e00d      	b.n	8008c5a <prvSwitchTimerLists+0x2a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008c3e:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c40:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008c42:	681f      	ldr	r7, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008c44:	1d25      	adds	r5, r4, #4
 8008c46:	4628      	mov	r0, r5
 8008c48:	f7fe fb3c 	bl	80072c4 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008c4c:	6a23      	ldr	r3, [r4, #32]
 8008c4e:	4620      	mov	r0, r4
 8008c50:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008c52:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8008c56:	075b      	lsls	r3, r3, #29
 8008c58:	d40a      	bmi.n	8008c70 <prvSwitchTimerLists+0x40>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008c5a:	6833      	ldr	r3, [r6, #0]
 8008c5c:	681a      	ldr	r2, [r3, #0]
 8008c5e:	2a00      	cmp	r2, #0
 8008c60:	d1ed      	bne.n	8008c3e <prvSwitchTimerLists+0xe>
	pxCurrentTimerList = pxOverflowTimerList;
 8008c62:	4a13      	ldr	r2, [pc, #76]	; (8008cb0 <prvSwitchTimerLists+0x80>)
 8008c64:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008c66:	6013      	str	r3, [r2, #0]
	pxCurrentTimerList = pxOverflowTimerList;
 8008c68:	6031      	str	r1, [r6, #0]
}
 8008c6a:	b002      	add	sp, #8
 8008c6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008c70:	69a2      	ldr	r2, [r4, #24]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008c72:	4629      	mov	r1, r5
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008c74:	2300      	movs	r3, #0
 8008c76:	4620      	mov	r0, r4
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008c78:	18bd      	adds	r5, r7, r2
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008c7a:	463a      	mov	r2, r7
			if( xReloadTime > xNextExpireTime )
 8008c7c:	42af      	cmp	r7, r5
 8008c7e:	d205      	bcs.n	8008c8c <prvSwitchTimerLists+0x5c>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008c80:	6830      	ldr	r0, [r6, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008c82:	6065      	str	r5, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008c84:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008c86:	f7fe fb05 	bl	8007294 <vListInsert>
 8008c8a:	e7e6      	b.n	8008c5a <prvSwitchTimerLists+0x2a>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008c8c:	4619      	mov	r1, r3
 8008c8e:	f8cd 8000 	str.w	r8, [sp]
 8008c92:	f7ff ff99 	bl	8008bc8 <xTimerGenericCommand>
				configASSERT( xResult );
 8008c96:	2800      	cmp	r0, #0
 8008c98:	d1df      	bne.n	8008c5a <prvSwitchTimerLists+0x2a>
 8008c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c9e:	f383 8811 	msr	BASEPRI, r3
 8008ca2:	f3bf 8f6f 	isb	sy
 8008ca6:	f3bf 8f4f 	dsb	sy
 8008caa:	e7fe      	b.n	8008caa <prvSwitchTimerLists+0x7a>
 8008cac:	24002154 	.word	0x24002154
 8008cb0:	24002158 	.word	0x24002158

08008cb4 <prvTimerTask>:
{
 8008cb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cb8:	4e96      	ldr	r6, [pc, #600]	; (8008f14 <prvTimerTask+0x260>)
 8008cba:	b087      	sub	sp, #28
 8008cbc:	4d96      	ldr	r5, [pc, #600]	; (8008f18 <prvTimerTask+0x264>)
					portYIELD_WITHIN_API();
 8008cbe:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
 8008cc2:	4c96      	ldr	r4, [pc, #600]	; (8008f1c <prvTimerTask+0x268>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008cc4:	6833      	ldr	r3, [r6, #0]
 8008cc6:	681f      	ldr	r7, [r3, #0]
 8008cc8:	2f00      	cmp	r7, #0
 8008cca:	f000 80a9 	beq.w	8008e20 <prvTimerTask+0x16c>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008cce:	68db      	ldr	r3, [r3, #12]
 8008cd0:	681f      	ldr	r7, [r3, #0]
	vTaskSuspendAll();
 8008cd2:	f7ff fb49 	bl	8008368 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 8008cd6:	f7ff fb4f 	bl	8008378 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8008cda:	682a      	ldr	r2, [r5, #0]
	xTimeNow = xTaskGetTickCount();
 8008cdc:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
 8008cde:	4290      	cmp	r0, r2
 8008ce0:	f0c0 80a6 	bcc.w	8008e30 <prvTimerTask+0x17c>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008ce4:	4287      	cmp	r7, r0
	xLastTime = xTimeNow;
 8008ce6:	6028      	str	r0, [r5, #0]
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008ce8:	f200 80c7 	bhi.w	8008e7a <prvTimerTask+0x1c6>
				( void ) xTaskResumeAll();
 8008cec:	f7ff fc90 	bl	8008610 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008cf0:	6832      	ldr	r2, [r6, #0]
 8008cf2:	68d2      	ldr	r2, [r2, #12]
 8008cf4:	f8d2 b00c 	ldr.w	fp, [r2, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008cf8:	f10b 0804 	add.w	r8, fp, #4
 8008cfc:	4640      	mov	r0, r8
 8008cfe:	f7fe fae1 	bl	80072c4 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008d02:	f89b 0028 	ldrb.w	r0, [fp, #40]	; 0x28
 8008d06:	0743      	lsls	r3, r0, #29
 8008d08:	f100 80c6 	bmi.w	8008e98 <prvTimerTask+0x1e4>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008d0c:	f020 0001 	bic.w	r0, r0, #1
 8008d10:	f88b 0028 	strb.w	r0, [fp, #40]	; 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008d14:	f8db 3020 	ldr.w	r3, [fp, #32]
 8008d18:	4658      	mov	r0, fp
 8008d1a:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008d1c:	2200      	movs	r2, #0
 8008d1e:	a902      	add	r1, sp, #8
 8008d20:	6820      	ldr	r0, [r4, #0]
 8008d22:	f7fe fe67 	bl	80079f4 <xQueueReceive>
 8008d26:	2800      	cmp	r0, #0
 8008d28:	d0cc      	beq.n	8008cc4 <prvTimerTask+0x10>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008d2a:	9b02      	ldr	r3, [sp, #8]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	db6e      	blt.n	8008e0e <prvTimerTask+0x15a>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008d30:	9f04      	ldr	r7, [sp, #16]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008d32:	697b      	ldr	r3, [r7, #20]
 8008d34:	b113      	cbz	r3, 8008d3c <prvTimerTask+0x88>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008d36:	1d38      	adds	r0, r7, #4
 8008d38:	f7fe fac4 	bl	80072c4 <uxListRemove>
	xTimeNow = xTaskGetTickCount();
 8008d3c:	f7ff fb1c 	bl	8008378 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8008d40:	682b      	ldr	r3, [r5, #0]
	xTimeNow = xTaskGetTickCount();
 8008d42:	4680      	mov	r8, r0
	if( xTimeNow < xLastTime )
 8008d44:	4298      	cmp	r0, r3
 8008d46:	d37a      	bcc.n	8008e3e <prvTimerTask+0x18a>
			switch( xMessage.xMessageID )
 8008d48:	9b02      	ldr	r3, [sp, #8]
	xLastTime = xTimeNow;
 8008d4a:	f8c5 8000 	str.w	r8, [r5]
			switch( xMessage.xMessageID )
 8008d4e:	2b09      	cmp	r3, #9
 8008d50:	d8e4      	bhi.n	8008d1c <prvTimerTask+0x68>
 8008d52:	e8df f003 	tbb	[pc, r3]
 8008d56:	0505      	.short	0x0505
 8008d58:	53364c05 	.word	0x53364c05
 8008d5c:	364c0505 	.word	0x364c0505
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008d60:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008d64:	9b03      	ldr	r3, [sp, #12]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008d66:	f042 0201 	orr.w	r2, r2, #1
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008d6a:	69b9      	ldr	r1, [r7, #24]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008d6c:	613f      	str	r7, [r7, #16]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008d6e:	f887 2028 	strb.w	r2, [r7, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008d72:	185a      	adds	r2, r3, r1
 8008d74:	bf2c      	ite	cs
 8008d76:	2001      	movcs	r0, #1
 8008d78:	2000      	movcc	r0, #0
	if( xNextExpiryTime <= xTimeNow )
 8008d7a:	4542      	cmp	r2, r8
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008d7c:	607a      	str	r2, [r7, #4]
	if( xNextExpiryTime <= xTimeNow )
 8008d7e:	d87e      	bhi.n	8008e7e <prvTimerTask+0x1ca>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008d80:	eba8 0303 	sub.w	r3, r8, r3
 8008d84:	4299      	cmp	r1, r3
 8008d86:	f200 80b0 	bhi.w	8008eea <prvTimerTask+0x236>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008d8a:	6a3b      	ldr	r3, [r7, #32]
 8008d8c:	4638      	mov	r0, r7
 8008d8e:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008d90:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008d94:	0759      	lsls	r1, r3, #29
 8008d96:	d5c1      	bpl.n	8008d1c <prvTimerTask+0x68>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008d98:	2200      	movs	r2, #0
 8008d9a:	69bb      	ldr	r3, [r7, #24]
 8008d9c:	4638      	mov	r0, r7
 8008d9e:	9200      	str	r2, [sp, #0]
 8008da0:	9a03      	ldr	r2, [sp, #12]
 8008da2:	441a      	add	r2, r3
 8008da4:	2300      	movs	r3, #0
 8008da6:	4619      	mov	r1, r3
 8008da8:	f7ff ff0e 	bl	8008bc8 <xTimerGenericCommand>
							configASSERT( xResult );
 8008dac:	2800      	cmp	r0, #0
 8008dae:	d1b5      	bne.n	8008d1c <prvTimerTask+0x68>
 8008db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008db4:	f383 8811 	msr	BASEPRI, r3
 8008db8:	f3bf 8f6f 	isb	sy
 8008dbc:	f3bf 8f4f 	dsb	sy
 8008dc0:	e7fe      	b.n	8008dc0 <prvTimerTask+0x10c>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008dc2:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008dc6:	9b03      	ldr	r3, [sp, #12]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008dc8:	f042 0201 	orr.w	r2, r2, #1
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008dcc:	61bb      	str	r3, [r7, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008dce:	f887 2028 	strb.w	r2, [r7, #40]	; 0x28
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	f000 8095 	beq.w	8008f02 <prvTimerTask+0x24e>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008dd8:	4443      	add	r3, r8
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008dda:	1d39      	adds	r1, r7, #4
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008ddc:	613f      	str	r7, [r7, #16]
	if( xNextExpiryTime <= xTimeNow )
 8008dde:	4543      	cmp	r3, r8
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008de0:	607b      	str	r3, [r7, #4]
	if( xNextExpiryTime <= xTimeNow )
 8008de2:	d855      	bhi.n	8008e90 <prvTimerTask+0x1dc>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008de4:	4b4e      	ldr	r3, [pc, #312]	; (8008f20 <prvTimerTask+0x26c>)
 8008de6:	6818      	ldr	r0, [r3, #0]
 8008de8:	f7fe fa54 	bl	8007294 <vListInsert>
	return xProcessTimerNow;
 8008dec:	e796      	b.n	8008d1c <prvTimerTask+0x68>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008dee:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008df2:	f023 0301 	bic.w	r3, r3, #1
 8008df6:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
					break;
 8008dfa:	e78f      	b.n	8008d1c <prvTimerTask+0x68>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008dfc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008e00:	079a      	lsls	r2, r3, #30
 8008e02:	d569      	bpl.n	8008ed8 <prvTimerTask+0x224>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008e04:	f023 0301 	bic.w	r3, r3, #1
 8008e08:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8008e0c:	e786      	b.n	8008d1c <prvTimerTask+0x68>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008e0e:	9b03      	ldr	r3, [sp, #12]
 8008e10:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008e14:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008e16:	9b02      	ldr	r3, [sp, #8]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	f6ff af7f 	blt.w	8008d1c <prvTimerTask+0x68>
 8008e1e:	e787      	b.n	8008d30 <prvTimerTask+0x7c>
	vTaskSuspendAll();
 8008e20:	f7ff faa2 	bl	8008368 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 8008e24:	f7ff faa8 	bl	8008378 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8008e28:	682a      	ldr	r2, [r5, #0]
	xTimeNow = xTaskGetTickCount();
 8008e2a:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
 8008e2c:	4290      	cmp	r0, r2
 8008e2e:	d209      	bcs.n	8008e44 <prvTimerTask+0x190>
		prvSwitchTimerLists();
 8008e30:	f7ff fefe 	bl	8008c30 <prvSwitchTimerLists>
	xLastTime = xTimeNow;
 8008e34:	f8c5 a000 	str.w	sl, [r5]
			( void ) xTaskResumeAll();
 8008e38:	f7ff fbea 	bl	8008610 <xTaskResumeAll>
 8008e3c:	e76e      	b.n	8008d1c <prvTimerTask+0x68>
		prvSwitchTimerLists();
 8008e3e:	f7ff fef7 	bl	8008c30 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008e42:	e781      	b.n	8008d48 <prvTimerTask+0x94>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008e44:	4b36      	ldr	r3, [pc, #216]	; (8008f20 <prvTimerTask+0x26c>)
	xLastTime = xTimeNow;
 8008e46:	f8c5 a000 	str.w	sl, [r5]
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008e4a:	681a      	ldr	r2, [r3, #0]
 8008e4c:	6812      	ldr	r2, [r2, #0]
 8008e4e:	fab2 f282 	clz	r2, r2
 8008e52:	0952      	lsrs	r2, r2, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008e54:	eba7 010a 	sub.w	r1, r7, sl
 8008e58:	6820      	ldr	r0, [r4, #0]
 8008e5a:	f7ff f829 	bl	8007eb0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008e5e:	f7ff fbd7 	bl	8008610 <xTaskResumeAll>
 8008e62:	2800      	cmp	r0, #0
 8008e64:	f47f af5a 	bne.w	8008d1c <prvTimerTask+0x68>
					portYIELD_WITHIN_API();
 8008e68:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008e6c:	f8c9 3d04 	str.w	r3, [r9, #3332]	; 0xd04
 8008e70:	f3bf 8f4f 	dsb	sy
 8008e74:	f3bf 8f6f 	isb	sy
 8008e78:	e750      	b.n	8008d1c <prvTimerTask+0x68>
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	e7ea      	b.n	8008e54 <prvTimerTask+0x1a0>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008e7e:	4543      	cmp	r3, r8
 8008e80:	d901      	bls.n	8008e86 <prvTimerTask+0x1d2>
 8008e82:	2800      	cmp	r0, #0
 8008e84:	d081      	beq.n	8008d8a <prvTimerTask+0xd6>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008e86:	1d39      	adds	r1, r7, #4
 8008e88:	6830      	ldr	r0, [r6, #0]
 8008e8a:	f7fe fa03 	bl	8007294 <vListInsert>
	return xProcessTimerNow;
 8008e8e:	e745      	b.n	8008d1c <prvTimerTask+0x68>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008e90:	6830      	ldr	r0, [r6, #0]
 8008e92:	f7fe f9ff 	bl	8007294 <vListInsert>
 8008e96:	e741      	b.n	8008d1c <prvTimerTask+0x68>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008e98:	f8db 2018 	ldr.w	r2, [fp, #24]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008e9c:	f8cb b010 	str.w	fp, [fp, #16]
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008ea0:	18b8      	adds	r0, r7, r2
	if( xNextExpiryTime <= xTimeNow )
 8008ea2:	4582      	cmp	sl, r0
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008ea4:	f8cb 0004 	str.w	r0, [fp, #4]
	if( xNextExpiryTime <= xTimeNow )
 8008ea8:	d31a      	bcc.n	8008ee0 <prvTimerTask+0x22c>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008eaa:	ebaa 0307 	sub.w	r3, sl, r7
 8008eae:	429a      	cmp	r2, r3
 8008eb0:	d821      	bhi.n	8008ef6 <prvTimerTask+0x242>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	463a      	mov	r2, r7
 8008eb6:	4658      	mov	r0, fp
 8008eb8:	4619      	mov	r1, r3
 8008eba:	9300      	str	r3, [sp, #0]
 8008ebc:	f7ff fe84 	bl	8008bc8 <xTimerGenericCommand>
			configASSERT( xResult );
 8008ec0:	2800      	cmp	r0, #0
 8008ec2:	f47f af27 	bne.w	8008d14 <prvTimerTask+0x60>
 8008ec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eca:	f383 8811 	msr	BASEPRI, r3
 8008ece:	f3bf 8f6f 	isb	sy
 8008ed2:	f3bf 8f4f 	dsb	sy
 8008ed6:	e7fe      	b.n	8008ed6 <prvTimerTask+0x222>
							vPortFree( pxTimer );
 8008ed8:	4638      	mov	r0, r7
 8008eda:	f000 fa9d 	bl	8009418 <vPortFree>
 8008ede:	e71d      	b.n	8008d1c <prvTimerTask+0x68>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008ee0:	4641      	mov	r1, r8
 8008ee2:	6830      	ldr	r0, [r6, #0]
 8008ee4:	f7fe f9d6 	bl	8007294 <vListInsert>
	return xProcessTimerNow;
 8008ee8:	e714      	b.n	8008d14 <prvTimerTask+0x60>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008eea:	4b0d      	ldr	r3, [pc, #52]	; (8008f20 <prvTimerTask+0x26c>)
 8008eec:	1d39      	adds	r1, r7, #4
 8008eee:	6818      	ldr	r0, [r3, #0]
 8008ef0:	f7fe f9d0 	bl	8007294 <vListInsert>
	return xProcessTimerNow;
 8008ef4:	e712      	b.n	8008d1c <prvTimerTask+0x68>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008ef6:	4b0a      	ldr	r3, [pc, #40]	; (8008f20 <prvTimerTask+0x26c>)
 8008ef8:	4641      	mov	r1, r8
 8008efa:	6818      	ldr	r0, [r3, #0]
 8008efc:	f7fe f9ca 	bl	8007294 <vListInsert>
	return xProcessTimerNow;
 8008f00:	e708      	b.n	8008d14 <prvTimerTask+0x60>
 8008f02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f06:	f383 8811 	msr	BASEPRI, r3
 8008f0a:	f3bf 8f6f 	isb	sy
 8008f0e:	f3bf 8f4f 	dsb	sy
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008f12:	e7fe      	b.n	8008f12 <prvTimerTask+0x25e>
 8008f14:	24002154 	.word	0x24002154
 8008f18:	24002224 	.word	0x24002224
 8008f1c:	24002278 	.word	0x24002278
 8008f20:	24002158 	.word	0x24002158

08008f24 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008f24:	4808      	ldr	r0, [pc, #32]	; (8008f48 <prvPortStartFirstTask+0x24>)
 8008f26:	6800      	ldr	r0, [r0, #0]
 8008f28:	6800      	ldr	r0, [r0, #0]
 8008f2a:	f380 8808 	msr	MSP, r0
 8008f2e:	f04f 0000 	mov.w	r0, #0
 8008f32:	f380 8814 	msr	CONTROL, r0
 8008f36:	b662      	cpsie	i
 8008f38:	b661      	cpsie	f
 8008f3a:	f3bf 8f4f 	dsb	sy
 8008f3e:	f3bf 8f6f 	isb	sy
 8008f42:	df00      	svc	0
 8008f44:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008f46:	0000      	.short	0x0000
 8008f48:	e000ed08 	.word	0xe000ed08

08008f4c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008f4c:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008f5c <vPortEnableVFP+0x10>
 8008f50:	6801      	ldr	r1, [r0, #0]
 8008f52:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008f56:	6001      	str	r1, [r0, #0]
 8008f58:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008f5a:	0000      	.short	0x0000
 8008f5c:	e000ed88 	.word	0xe000ed88

08008f60 <prvTaskExitError>:
	configASSERT( uxCriticalNesting == ~0UL );
 8008f60:	4b0e      	ldr	r3, [pc, #56]	; (8008f9c <prvTaskExitError+0x3c>)
{
 8008f62:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8008f64:	2200      	movs	r2, #0
	configASSERT( uxCriticalNesting == ~0UL );
 8008f66:	681b      	ldr	r3, [r3, #0]
volatile uint32_t ulDummy = 0;
 8008f68:	9201      	str	r2, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 8008f6a:	3301      	adds	r3, #1
 8008f6c:	d008      	beq.n	8008f80 <prvTaskExitError+0x20>
 8008f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f72:	f383 8811 	msr	BASEPRI, r3
 8008f76:	f3bf 8f6f 	isb	sy
 8008f7a:	f3bf 8f4f 	dsb	sy
 8008f7e:	e7fe      	b.n	8008f7e <prvTaskExitError+0x1e>
 8008f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f84:	f383 8811 	msr	BASEPRI, r3
 8008f88:	f3bf 8f6f 	isb	sy
 8008f8c:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 8008f90:	9b01      	ldr	r3, [sp, #4]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d0fc      	beq.n	8008f90 <prvTaskExitError+0x30>
}
 8008f96:	b002      	add	sp, #8
 8008f98:	4770      	bx	lr
 8008f9a:	bf00      	nop
 8008f9c:	24000024 	.word	0x24000024

08008fa0 <pxPortInitialiseStack>:
{
 8008fa0:	4603      	mov	r3, r0
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008fa2:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008fa6:	4809      	ldr	r0, [pc, #36]	; (8008fcc <pxPortInitialiseStack+0x2c>)
{
 8008fa8:	b410      	push	{r4}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008faa:	f04f 7480 	mov.w	r4, #16777216	; 0x1000000
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008fae:	f843 0c0c 	str.w	r0, [r3, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008fb2:	f843 2c20 	str.w	r2, [r3, #-32]
}
 8008fb6:	f1a3 0044 	sub.w	r0, r3, #68	; 0x44
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008fba:	e943 1402 	strd	r1, r4, [r3, #-8]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008fbe:	f06f 0102 	mvn.w	r1, #2
}
 8008fc2:	f85d 4b04 	ldr.w	r4, [sp], #4
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008fc6:	f843 1c24 	str.w	r1, [r3, #-36]
}
 8008fca:	4770      	bx	lr
 8008fcc:	08008f61 	.word	0x08008f61

08008fd0 <SVC_Handler>:
	__asm volatile (
 8008fd0:	4b07      	ldr	r3, [pc, #28]	; (8008ff0 <pxCurrentTCBConst2>)
 8008fd2:	6819      	ldr	r1, [r3, #0]
 8008fd4:	6808      	ldr	r0, [r1, #0]
 8008fd6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fda:	f380 8809 	msr	PSP, r0
 8008fde:	f3bf 8f6f 	isb	sy
 8008fe2:	f04f 0000 	mov.w	r0, #0
 8008fe6:	f380 8811 	msr	BASEPRI, r0
 8008fea:	4770      	bx	lr
 8008fec:	f3af 8000 	nop.w

08008ff0 <pxCurrentTCBConst2>:
 8008ff0:	24001c58 	.word	0x24001c58

08008ff4 <vPortEnterCritical>:
 8008ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ff8:	f383 8811 	msr	BASEPRI, r3
 8008ffc:	f3bf 8f6f 	isb	sy
 8009000:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8009004:	4a0b      	ldr	r2, [pc, #44]	; (8009034 <vPortEnterCritical+0x40>)
 8009006:	6813      	ldr	r3, [r2, #0]
 8009008:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800900a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800900c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800900e:	d000      	beq.n	8009012 <vPortEnterCritical+0x1e>
}
 8009010:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009012:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009016:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 800901a:	b2db      	uxtb	r3, r3
 800901c:	2b00      	cmp	r3, #0
 800901e:	d0f7      	beq.n	8009010 <vPortEnterCritical+0x1c>
 8009020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009024:	f383 8811 	msr	BASEPRI, r3
 8009028:	f3bf 8f6f 	isb	sy
 800902c:	f3bf 8f4f 	dsb	sy
 8009030:	e7fe      	b.n	8009030 <vPortEnterCritical+0x3c>
 8009032:	bf00      	nop
 8009034:	24000024 	.word	0x24000024

08009038 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8009038:	4a08      	ldr	r2, [pc, #32]	; (800905c <vPortExitCritical+0x24>)
 800903a:	6813      	ldr	r3, [r2, #0]
 800903c:	b943      	cbnz	r3, 8009050 <vPortExitCritical+0x18>
 800903e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009042:	f383 8811 	msr	BASEPRI, r3
 8009046:	f3bf 8f6f 	isb	sy
 800904a:	f3bf 8f4f 	dsb	sy
 800904e:	e7fe      	b.n	800904e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8009050:	3b01      	subs	r3, #1
 8009052:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009054:	b90b      	cbnz	r3, 800905a <vPortExitCritical+0x22>
	__asm volatile
 8009056:	f383 8811 	msr	BASEPRI, r3
}
 800905a:	4770      	bx	lr
 800905c:	24000024 	.word	0x24000024

08009060 <PendSV_Handler>:
	__asm volatile
 8009060:	f3ef 8009 	mrs	r0, PSP
 8009064:	f3bf 8f6f 	isb	sy
 8009068:	4b15      	ldr	r3, [pc, #84]	; (80090c0 <pxCurrentTCBConst>)
 800906a:	681a      	ldr	r2, [r3, #0]
 800906c:	f01e 0f10 	tst.w	lr, #16
 8009070:	bf08      	it	eq
 8009072:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009076:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800907a:	6010      	str	r0, [r2, #0]
 800907c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009080:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009084:	f380 8811 	msr	BASEPRI, r0
 8009088:	f3bf 8f4f 	dsb	sy
 800908c:	f3bf 8f6f 	isb	sy
 8009090:	f7ff fafe 	bl	8008690 <vTaskSwitchContext>
 8009094:	f04f 0000 	mov.w	r0, #0
 8009098:	f380 8811 	msr	BASEPRI, r0
 800909c:	bc09      	pop	{r0, r3}
 800909e:	6819      	ldr	r1, [r3, #0]
 80090a0:	6808      	ldr	r0, [r1, #0]
 80090a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090a6:	f01e 0f10 	tst.w	lr, #16
 80090aa:	bf08      	it	eq
 80090ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80090b0:	f380 8809 	msr	PSP, r0
 80090b4:	f3bf 8f6f 	isb	sy
 80090b8:	4770      	bx	lr
 80090ba:	bf00      	nop
 80090bc:	f3af 8000 	nop.w

080090c0 <pxCurrentTCBConst>:
 80090c0:	24001c58 	.word	0x24001c58

080090c4 <xPortSysTickHandler>:
{
 80090c4:	b508      	push	{r3, lr}
	__asm volatile
 80090c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090ca:	f383 8811 	msr	BASEPRI, r3
 80090ce:	f3bf 8f6f 	isb	sy
 80090d2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 80090d6:	f7ff f95d 	bl	8008394 <xTaskIncrementTick>
 80090da:	b128      	cbz	r0, 80090e8 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80090dc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80090e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090e4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
 80090e8:	2300      	movs	r3, #0
 80090ea:	f383 8811 	msr	BASEPRI, r3
}
 80090ee:	bd08      	pop	{r3, pc}

080090f0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80090f0:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 80090f4:	2300      	movs	r3, #0
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80090f6:	4806      	ldr	r0, [pc, #24]	; (8009110 <vPortSetupTimerInterrupt+0x20>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80090f8:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80090fa:	4906      	ldr	r1, [pc, #24]	; (8009114 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80090fc:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80090fe:	6803      	ldr	r3, [r0, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009100:	2007      	movs	r0, #7
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009102:	fba1 1303 	umull	r1, r3, r1, r3
 8009106:	099b      	lsrs	r3, r3, #6
 8009108:	3b01      	subs	r3, #1
 800910a:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800910c:	6110      	str	r0, [r2, #16]
}
 800910e:	4770      	bx	lr
 8009110:	24000000 	.word	0x24000000
 8009114:	10624dd3 	.word	0x10624dd3

08009118 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009118:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800911c:	4a3d      	ldr	r2, [pc, #244]	; (8009214 <xPortStartScheduler+0xfc>)
 800911e:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	; 0xd00
 8009122:	4291      	cmp	r1, r2
 8009124:	d041      	beq.n	80091aa <xPortStartScheduler+0x92>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009126:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 800912a:	4b3b      	ldr	r3, [pc, #236]	; (8009218 <xPortStartScheduler+0x100>)
 800912c:	429a      	cmp	r2, r3
 800912e:	d033      	beq.n	8009198 <xPortStartScheduler+0x80>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009130:	4b3a      	ldr	r3, [pc, #232]	; (800921c <xPortStartScheduler+0x104>)
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009132:	20ff      	movs	r0, #255	; 0xff
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009134:	493a      	ldr	r1, [pc, #232]	; (8009220 <xPortStartScheduler+0x108>)
{
 8009136:	b530      	push	{r4, r5, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009138:	781a      	ldrb	r2, [r3, #0]
{
 800913a:	b083      	sub	sp, #12
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800913c:	4c39      	ldr	r4, [pc, #228]	; (8009224 <xPortStartScheduler+0x10c>)
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800913e:	b2d2      	uxtb	r2, r2
 8009140:	9201      	str	r2, [sp, #4]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009142:	2207      	movs	r2, #7
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009144:	7018      	strb	r0, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009146:	781b      	ldrb	r3, [r3, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009148:	6022      	str	r2, [r4, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800914a:	b2db      	uxtb	r3, r3
 800914c:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009150:	f89d 3003 	ldrb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009154:	f89d 2003 	ldrb.w	r2, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009158:	f003 0350 	and.w	r3, r3, #80	; 0x50
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800915c:	0610      	lsls	r0, r2, #24
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800915e:	700b      	strb	r3, [r1, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009160:	d511      	bpl.n	8009186 <xPortStartScheduler+0x6e>
 8009162:	2206      	movs	r2, #6
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009164:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8009168:	4610      	mov	r0, r2
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800916a:	3a01      	subs	r2, #1
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800916c:	005b      	lsls	r3, r3, #1
 800916e:	b2db      	uxtb	r3, r3
 8009170:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009174:	f89d 1003 	ldrb.w	r1, [sp, #3]
 8009178:	0609      	lsls	r1, r1, #24
 800917a:	d4f3      	bmi.n	8009164 <xPortStartScheduler+0x4c>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800917c:	2803      	cmp	r0, #3
 800917e:	6020      	str	r0, [r4, #0]
 8009180:	f88d 3003 	strb.w	r3, [sp, #3]
 8009184:	d01a      	beq.n	80091bc <xPortStartScheduler+0xa4>
	__asm volatile
 8009186:	f04f 0350 	mov.w	r3, #80	; 0x50
 800918a:	f383 8811 	msr	BASEPRI, r3
 800918e:	f3bf 8f6f 	isb	sy
 8009192:	f3bf 8f4f 	dsb	sy
 8009196:	e7fe      	b.n	8009196 <xPortStartScheduler+0x7e>
 8009198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800919c:	f383 8811 	msr	BASEPRI, r3
 80091a0:	f3bf 8f6f 	isb	sy
 80091a4:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80091a8:	e7fe      	b.n	80091a8 <xPortStartScheduler+0x90>
 80091aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091ae:	f383 8811 	msr	BASEPRI, r3
 80091b2:	f3bf 8f6f 	isb	sy
 80091b6:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80091ba:	e7fe      	b.n	80091ba <xPortStartScheduler+0xa2>
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80091bc:	9b01      	ldr	r3, [sp, #4]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80091be:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80091c2:	4a16      	ldr	r2, [pc, #88]	; (800921c <xPortStartScheduler+0x104>)
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80091c4:	f44f 7140 	mov.w	r1, #768	; 0x300
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80091c8:	b2db      	uxtb	r3, r3
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80091ca:	6021      	str	r1, [r4, #0]
	uxCriticalNesting = 0;
 80091cc:	2400      	movs	r4, #0
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80091ce:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80091d0:	f8d5 3d20 	ldr.w	r3, [r5, #3360]	; 0xd20
 80091d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80091d8:	f8c5 3d20 	str.w	r3, [r5, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80091dc:	f8d5 3d20 	ldr.w	r3, [r5, #3360]	; 0xd20
 80091e0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80091e4:	f8c5 3d20 	str.w	r3, [r5, #3360]	; 0xd20
	vPortSetupTimerInterrupt();
 80091e8:	f7ff ff82 	bl	80090f0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 80091ec:	4b0e      	ldr	r3, [pc, #56]	; (8009228 <xPortStartScheduler+0x110>)
 80091ee:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 80091f0:	f7ff feac 	bl	8008f4c <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80091f4:	f8d5 3f34 	ldr.w	r3, [r5, #3892]	; 0xf34
 80091f8:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80091fc:	f8c5 3f34 	str.w	r3, [r5, #3892]	; 0xf34
	prvPortStartFirstTask();
 8009200:	f7ff fe90 	bl	8008f24 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8009204:	f7ff fa44 	bl	8008690 <vTaskSwitchContext>
}
 8009208:	4620      	mov	r0, r4
	prvTaskExitError();
 800920a:	f7ff fea9 	bl	8008f60 <prvTaskExitError>
}
 800920e:	b003      	add	sp, #12
 8009210:	bd30      	pop	{r4, r5, pc}
 8009212:	bf00      	nop
 8009214:	410fc271 	.word	0x410fc271
 8009218:	410fc270 	.word	0x410fc270
 800921c:	e000e400 	.word	0xe000e400
 8009220:	24002280 	.word	0x24002280
 8009224:	24002284 	.word	0x24002284
 8009228:	24000024 	.word	0x24000024

0800922c <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800922c:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009230:	2b0f      	cmp	r3, #15
 8009232:	d90e      	bls.n	8009252 <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009234:	4911      	ldr	r1, [pc, #68]	; (800927c <vPortValidateInterruptPriority+0x50>)
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009236:	4a12      	ldr	r2, [pc, #72]	; (8009280 <vPortValidateInterruptPriority+0x54>)
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009238:	5c5b      	ldrb	r3, [r3, r1]
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800923a:	7812      	ldrb	r2, [r2, #0]
 800923c:	429a      	cmp	r2, r3
 800923e:	d908      	bls.n	8009252 <vPortValidateInterruptPriority+0x26>
 8009240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009244:	f383 8811 	msr	BASEPRI, r3
 8009248:	f3bf 8f6f 	isb	sy
 800924c:	f3bf 8f4f 	dsb	sy
 8009250:	e7fe      	b.n	8009250 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009252:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009256:	4a0b      	ldr	r2, [pc, #44]	; (8009284 <vPortValidateInterruptPriority+0x58>)
 8009258:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 800925c:	6812      	ldr	r2, [r2, #0]
 800925e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009262:	4293      	cmp	r3, r2
 8009264:	d908      	bls.n	8009278 <vPortValidateInterruptPriority+0x4c>
 8009266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800926a:	f383 8811 	msr	BASEPRI, r3
 800926e:	f3bf 8f6f 	isb	sy
 8009272:	f3bf 8f4f 	dsb	sy
 8009276:	e7fe      	b.n	8009276 <vPortValidateInterruptPriority+0x4a>
	}
 8009278:	4770      	bx	lr
 800927a:	bf00      	nop
 800927c:	e000e3f0 	.word	0xe000e3f0
 8009280:	24002280 	.word	0x24002280
 8009284:	24002284 	.word	0x24002284

08009288 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009288:	4b16      	ldr	r3, [pc, #88]	; (80092e4 <prvInsertBlockIntoFreeList+0x5c>)
 800928a:	461a      	mov	r2, r3
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	4283      	cmp	r3, r0
 8009290:	d3fb      	bcc.n	800928a <prvInsertBlockIntoFreeList+0x2>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009292:	6851      	ldr	r1, [r2, #4]
 8009294:	eb02 0c01 	add.w	ip, r2, r1
 8009298:	4560      	cmp	r0, ip
 800929a:	d01a      	beq.n	80092d2 <prvInsertBlockIntoFreeList+0x4a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800929c:	6841      	ldr	r1, [r0, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800929e:	eb00 0c01 	add.w	ip, r0, r1
 80092a2:	4563      	cmp	r3, ip
 80092a4:	d005      	beq.n	80092b2 <prvInsertBlockIntoFreeList+0x2a>

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80092a6:	4282      	cmp	r2, r0
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80092a8:	6003      	str	r3, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80092aa:	bf18      	it	ne
 80092ac:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
 80092ae:	4770      	bx	lr
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80092b0:	4610      	mov	r0, r2
{
 80092b2:	b410      	push	{r4}
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80092b4:	4c0c      	ldr	r4, [pc, #48]	; (80092e8 <prvInsertBlockIntoFreeList+0x60>)
 80092b6:	6824      	ldr	r4, [r4, #0]
 80092b8:	42a3      	cmp	r3, r4
 80092ba:	d003      	beq.n	80092c4 <prvInsertBlockIntoFreeList+0x3c>
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80092bc:	e9d3 3400 	ldrd	r3, r4, [r3]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80092c0:	4421      	add	r1, r4
 80092c2:	6041      	str	r1, [r0, #4]
	if( pxIterator != pxBlockToInsert )
 80092c4:	4282      	cmp	r2, r0
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80092c6:	6003      	str	r3, [r0, #0]
	if( pxIterator != pxBlockToInsert )
 80092c8:	d000      	beq.n	80092cc <prvInsertBlockIntoFreeList+0x44>
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80092ca:	6010      	str	r0, [r2, #0]
	}
}
 80092cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80092d0:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80092d2:	6840      	ldr	r0, [r0, #4]
 80092d4:	4401      	add	r1, r0
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80092d6:	1850      	adds	r0, r2, r1
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80092d8:	6051      	str	r1, [r2, #4]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80092da:	4283      	cmp	r3, r0
 80092dc:	d0e8      	beq.n	80092b0 <prvInsertBlockIntoFreeList+0x28>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80092de:	6013      	str	r3, [r2, #0]
	if( pxIterator != pxBlockToInsert )
 80092e0:	4770      	bx	lr
 80092e2:	bf00      	nop
 80092e4:	24009aa0 	.word	0x24009aa0
 80092e8:	24002288 	.word	0x24002288

080092ec <pvPortMalloc>:
{
 80092ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if( pxEnd == NULL )
 80092f0:	4e42      	ldr	r6, [pc, #264]	; (80093fc <pvPortMalloc+0x110>)
{
 80092f2:	4604      	mov	r4, r0
	vTaskSuspendAll();
 80092f4:	f7ff f838 	bl	8008368 <vTaskSuspendAll>
		if( pxEnd == NULL )
 80092f8:	6833      	ldr	r3, [r6, #0]
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d05a      	beq.n	80093b4 <pvPortMalloc+0xc8>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80092fe:	4b40      	ldr	r3, [pc, #256]	; (8009400 <pvPortMalloc+0x114>)
 8009300:	681d      	ldr	r5, [r3, #0]
			if( xWantedSize > 0 )
 8009302:	422c      	tst	r4, r5
 8009304:	d12e      	bne.n	8009364 <pvPortMalloc+0x78>
 8009306:	b36c      	cbz	r4, 8009364 <pvPortMalloc+0x78>
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009308:	0760      	lsls	r0, r4, #29
				xWantedSize += xHeapStructSize;
 800930a:	f104 0108 	add.w	r1, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800930e:	d002      	beq.n	8009316 <pvPortMalloc+0x2a>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009310:	f021 0107 	bic.w	r1, r1, #7
 8009314:	3108      	adds	r1, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009316:	b329      	cbz	r1, 8009364 <pvPortMalloc+0x78>
 8009318:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 8009414 <pvPortMalloc+0x128>
 800931c:	f8d8 7000 	ldr.w	r7, [r8]
 8009320:	428f      	cmp	r7, r1
 8009322:	d31f      	bcc.n	8009364 <pvPortMalloc+0x78>
				pxBlock = xStart.pxNextFreeBlock;
 8009324:	4837      	ldr	r0, [pc, #220]	; (8009404 <pvPortMalloc+0x118>)
 8009326:	6804      	ldr	r4, [r0, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009328:	e003      	b.n	8009332 <pvPortMalloc+0x46>
 800932a:	6823      	ldr	r3, [r4, #0]
 800932c:	b123      	cbz	r3, 8009338 <pvPortMalloc+0x4c>
 800932e:	4620      	mov	r0, r4
 8009330:	461c      	mov	r4, r3
 8009332:	6862      	ldr	r2, [r4, #4]
 8009334:	428a      	cmp	r2, r1
 8009336:	d3f8      	bcc.n	800932a <pvPortMalloc+0x3e>
				if( pxBlock != pxEnd )
 8009338:	6833      	ldr	r3, [r6, #0]
 800933a:	42a3      	cmp	r3, r4
 800933c:	d012      	beq.n	8009364 <pvPortMalloc+0x78>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800933e:	6823      	ldr	r3, [r4, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009340:	6806      	ldr	r6, [r0, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009342:	6003      	str	r3, [r0, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009344:	1a53      	subs	r3, r2, r1
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009346:	3608      	adds	r6, #8
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009348:	2b10      	cmp	r3, #16
 800934a:	d916      	bls.n	800937a <pvPortMalloc+0x8e>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800934c:	1860      	adds	r0, r4, r1
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800934e:	0742      	lsls	r2, r0, #29
 8009350:	d00e      	beq.n	8009370 <pvPortMalloc+0x84>
 8009352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009356:	f383 8811 	msr	BASEPRI, r3
 800935a:	f3bf 8f6f 	isb	sy
 800935e:	f3bf 8f4f 	dsb	sy
 8009362:	e7fe      	b.n	8009362 <pvPortMalloc+0x76>
	( void ) xTaskResumeAll();
 8009364:	2600      	movs	r6, #0
 8009366:	f7ff f953 	bl	8008610 <xTaskResumeAll>
}
 800936a:	4630      	mov	r0, r6
 800936c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009370:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009372:	6061      	str	r1, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009374:	f7ff ff88 	bl	8009288 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009378:	6862      	ldr	r2, [r4, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800937a:	4b23      	ldr	r3, [pc, #140]	; (8009408 <pvPortMalloc+0x11c>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800937c:	1abf      	subs	r7, r7, r2
					xNumberOfSuccessfulAllocations++;
 800937e:	4923      	ldr	r1, [pc, #140]	; (800940c <pvPortMalloc+0x120>)
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009380:	4315      	orrs	r5, r2
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009382:	6818      	ldr	r0, [r3, #0]
					pxBlock->pxNextFreeBlock = NULL;
 8009384:	2200      	movs	r2, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009386:	f8c8 7000 	str.w	r7, [r8]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800938a:	4287      	cmp	r7, r0
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800938c:	bf38      	it	cc
 800938e:	601f      	strcc	r7, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009390:	680b      	ldr	r3, [r1, #0]
 8009392:	3301      	adds	r3, #1
					pxBlock->pxNextFreeBlock = NULL;
 8009394:	e9c4 2500 	strd	r2, r5, [r4]
					xNumberOfSuccessfulAllocations++;
 8009398:	600b      	str	r3, [r1, #0]
	( void ) xTaskResumeAll();
 800939a:	f7ff f939 	bl	8008610 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800939e:	0773      	lsls	r3, r6, #29
 80093a0:	d0e3      	beq.n	800936a <pvPortMalloc+0x7e>
 80093a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093a6:	f383 8811 	msr	BASEPRI, r3
 80093aa:	f3bf 8f6f 	isb	sy
 80093ae:	f3bf 8f4f 	dsb	sy
 80093b2:	e7fe      	b.n	80093b2 <pvPortMalloc+0xc6>
	uxAddress = ( size_t ) ucHeap;
 80093b4:	4b16      	ldr	r3, [pc, #88]	; (8009410 <pvPortMalloc+0x124>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80093b6:	075d      	lsls	r5, r3, #29
 80093b8:	d119      	bne.n	80093ee <pvPortMalloc+0x102>
 80093ba:	f503 42f0 	add.w	r2, r3, #30720	; 0x7800
 80093be:	4619      	mov	r1, r3
	uxAddress -= xHeapStructSize;
 80093c0:	3a08      	subs	r2, #8
	xStart.xBlockSize = ( size_t ) 0;
 80093c2:	2000      	movs	r0, #0
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80093c4:	4d0f      	ldr	r5, [pc, #60]	; (8009404 <pvPortMalloc+0x118>)
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80093c6:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80093ca:	f022 0207 	bic.w	r2, r2, #7
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80093ce:	1ad3      	subs	r3, r2, r3
	pxEnd = ( void * ) uxAddress;
 80093d0:	6032      	str	r2, [r6, #0]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80093d2:	e9c5 1000 	strd	r1, r0, [r5]
	pxEnd->pxNextFreeBlock = NULL;
 80093d6:	e9c2 0000 	strd	r0, r0, [r2]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80093da:	e9c1 2300 	strd	r2, r3, [r1]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80093de:	4a0a      	ldr	r2, [pc, #40]	; (8009408 <pvPortMalloc+0x11c>)
}
 80093e0:	463d      	mov	r5, r7
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80093e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80093e4:	4a0b      	ldr	r2, [pc, #44]	; (8009414 <pvPortMalloc+0x128>)
 80093e6:	6013      	str	r3, [r2, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80093e8:	4b05      	ldr	r3, [pc, #20]	; (8009400 <pvPortMalloc+0x114>)
 80093ea:	601f      	str	r7, [r3, #0]
}
 80093ec:	e789      	b.n	8009302 <pvPortMalloc+0x16>
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80093ee:	1dd9      	adds	r1, r3, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80093f0:	f503 42f0 	add.w	r2, r3, #30720	; 0x7800
	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80093f4:	f021 0107 	bic.w	r1, r1, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80093f8:	460b      	mov	r3, r1
 80093fa:	e7e1      	b.n	80093c0 <pvPortMalloc+0xd4>
 80093fc:	24002288 	.word	0x24002288
 8009400:	24009a8c 	.word	0x24009a8c
 8009404:	24009aa0 	.word	0x24009aa0
 8009408:	24009a94 	.word	0x24009a94
 800940c:	24009a98 	.word	0x24009a98
 8009410:	2400228c 	.word	0x2400228c
 8009414:	24009a90 	.word	0x24009a90

08009418 <vPortFree>:
	if( pv != NULL )
 8009418:	b1d0      	cbz	r0, 8009450 <vPortFree+0x38>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800941a:	4a1c      	ldr	r2, [pc, #112]	; (800948c <vPortFree+0x74>)
 800941c:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8009420:	6812      	ldr	r2, [r2, #0]
 8009422:	4213      	tst	r3, r2
 8009424:	d00b      	beq.n	800943e <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009426:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800942a:	b191      	cbz	r1, 8009452 <vPortFree+0x3a>
 800942c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009430:	f383 8811 	msr	BASEPRI, r3
 8009434:	f3bf 8f6f 	isb	sy
 8009438:	f3bf 8f4f 	dsb	sy
 800943c:	e7fe      	b.n	800943c <vPortFree+0x24>
 800943e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009442:	f383 8811 	msr	BASEPRI, r3
 8009446:	f3bf 8f6f 	isb	sy
 800944a:	f3bf 8f4f 	dsb	sy
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800944e:	e7fe      	b.n	800944e <vPortFree+0x36>
 8009450:	4770      	bx	lr
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009452:	ea23 0302 	bic.w	r3, r3, r2
{
 8009456:	b500      	push	{lr}
 8009458:	b083      	sub	sp, #12
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800945a:	f840 3c04 	str.w	r3, [r0, #-4]
 800945e:	9001      	str	r0, [sp, #4]
				vTaskSuspendAll();
 8009460:	f7fe ff82 	bl	8008368 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009464:	4a0a      	ldr	r2, [pc, #40]	; (8009490 <vPortFree+0x78>)
 8009466:	9801      	ldr	r0, [sp, #4]
 8009468:	6811      	ldr	r1, [r2, #0]
 800946a:	f850 3c04 	ldr.w	r3, [r0, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800946e:	3808      	subs	r0, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009470:	440b      	add	r3, r1
 8009472:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009474:	f7ff ff08 	bl	8009288 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009478:	4a06      	ldr	r2, [pc, #24]	; (8009494 <vPortFree+0x7c>)
 800947a:	6813      	ldr	r3, [r2, #0]
 800947c:	3301      	adds	r3, #1
 800947e:	6013      	str	r3, [r2, #0]
}
 8009480:	b003      	add	sp, #12
 8009482:	f85d eb04 	ldr.w	lr, [sp], #4
				( void ) xTaskResumeAll();
 8009486:	f7ff b8c3 	b.w	8008610 <xTaskResumeAll>
 800948a:	bf00      	nop
 800948c:	24009a8c 	.word	0x24009a8c
 8009490:	24009a90 	.word	0x24009a90
 8009494:	24009a9c 	.word	0x24009a9c

08009498 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8009498:	b580      	push	{r7, lr}
 800949a:	b082      	sub	sp, #8
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();
 800949c:	f7fd fc20 	bl	8006ce0 <sys_mark_tcpip_thread>

  LOCK_TCPIP_CORE();
 80094a0:	f7fd fb64 	bl	8006b6c <sys_lock_tcpip_core>
  if (tcpip_init_done != NULL) {
 80094a4:	4b2c      	ldr	r3, [pc, #176]	; (8009558 <tcpip_thread+0xc0>)
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	b113      	cbz	r3, 80094b0 <tcpip_thread+0x18>
    tcpip_init_done(tcpip_init_done_arg);
 80094aa:	4a2c      	ldr	r2, [pc, #176]	; (800955c <tcpip_thread+0xc4>)
 80094ac:	6810      	ldr	r0, [r2, #0]
 80094ae:	4798      	blx	r3
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 80094b0:	4d2b      	ldr	r5, [pc, #172]	; (8009560 <tcpip_thread+0xc8>)
      msg->msg.cb.function(msg->msg.cb.ctx);
      break;

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80094b2:	4f2c      	ldr	r7, [pc, #176]	; (8009564 <tcpip_thread+0xcc>)
 80094b4:	4e2c      	ldr	r6, [pc, #176]	; (8009568 <tcpip_thread+0xd0>)
 80094b6:	e00e      	b.n	80094d6 <tcpip_thread+0x3e>
  } else if (sleeptime == 0) {
 80094b8:	b158      	cbz	r0, 80094d2 <tcpip_thread+0x3a>
  UNLOCK_TCPIP_CORE();
 80094ba:	f7fd fbd5 	bl	8006c68 <sys_unlock_tcpip_core>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 80094be:	4622      	mov	r2, r4
 80094c0:	a901      	add	r1, sp, #4
 80094c2:	4628      	mov	r0, r5
 80094c4:	f007 faf2 	bl	8010aac <sys_arch_mbox_fetch>
 80094c8:	4604      	mov	r4, r0
  LOCK_TCPIP_CORE();
 80094ca:	f7fd fb4f 	bl	8006b6c <sys_lock_tcpip_core>
  if (res == SYS_ARCH_TIMEOUT) {
 80094ce:	3401      	adds	r4, #1
 80094d0:	d111      	bne.n	80094f6 <tcpip_thread+0x5e>
    sys_check_timeouts();
 80094d2:	f005 fd71 	bl	800efb8 <sys_check_timeouts>
  LWIP_ASSERT_CORE_LOCKED();
 80094d6:	f7fd fbd1 	bl	8006c7c <sys_check_core_locking>
  sleeptime = sys_timeouts_sleeptime();
 80094da:	f005 fd97 	bl	800f00c <sys_timeouts_sleeptime>
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 80094de:	1c43      	adds	r3, r0, #1
  sleeptime = sys_timeouts_sleeptime();
 80094e0:	4604      	mov	r4, r0
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 80094e2:	d1e9      	bne.n	80094b8 <tcpip_thread+0x20>
    UNLOCK_TCPIP_CORE();
 80094e4:	f7fd fbc0 	bl	8006c68 <sys_unlock_tcpip_core>
    sys_arch_mbox_fetch(mbox, msg, 0);
 80094e8:	2200      	movs	r2, #0
 80094ea:	a901      	add	r1, sp, #4
 80094ec:	4628      	mov	r0, r5
 80094ee:	f007 fadd 	bl	8010aac <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 80094f2:	f7fd fb3b 	bl	8006b6c <sys_lock_tcpip_core>
    if (msg == NULL) {
 80094f6:	9c01      	ldr	r4, [sp, #4]
 80094f8:	b164      	cbz	r4, 8009514 <tcpip_thread+0x7c>
  switch (msg->type) {
 80094fa:	7823      	ldrb	r3, [r4, #0]
 80094fc:	2b01      	cmp	r3, #1
 80094fe:	d01e      	beq.n	800953e <tcpip_thread+0xa6>
 8009500:	2b02      	cmp	r3, #2
 8009502:	d018      	beq.n	8009536 <tcpip_thread+0x9e>
 8009504:	b16b      	cbz	r3, 8009522 <tcpip_thread+0x8a>
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8009506:	463b      	mov	r3, r7
 8009508:	22cf      	movs	r2, #207	; 0xcf
 800950a:	4631      	mov	r1, r6
 800950c:	4817      	ldr	r0, [pc, #92]	; (800956c <tcpip_thread+0xd4>)
 800950e:	f008 f87d 	bl	801160c <iprintf>
      break;
 8009512:	e7e0      	b.n	80094d6 <tcpip_thread+0x3e>
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8009514:	463b      	mov	r3, r7
 8009516:	2291      	movs	r2, #145	; 0x91
 8009518:	4631      	mov	r1, r6
 800951a:	4814      	ldr	r0, [pc, #80]	; (800956c <tcpip_thread+0xd4>)
 800951c:	f008 f876 	bl	801160c <iprintf>
      continue;
 8009520:	e7d9      	b.n	80094d6 <tcpip_thread+0x3e>
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8009522:	e9d4 1302 	ldrd	r1, r3, [r4, #8]
 8009526:	6860      	ldr	r0, [r4, #4]
 8009528:	4798      	blx	r3
 800952a:	b980      	cbnz	r0, 800954e <tcpip_thread+0xb6>
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800952c:	4621      	mov	r1, r4
 800952e:	2009      	movs	r0, #9
 8009530:	f000 fcb2 	bl	8009e98 <memp_free>
      break;
 8009534:	e7cf      	b.n	80094d6 <tcpip_thread+0x3e>
      msg->msg.cb.function(msg->msg.cb.ctx);
 8009536:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 800953a:	4798      	blx	r3
      break;
 800953c:	e7cb      	b.n	80094d6 <tcpip_thread+0x3e>
      msg->msg.cb.function(msg->msg.cb.ctx);
 800953e:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 8009542:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8009544:	4621      	mov	r1, r4
 8009546:	2008      	movs	r0, #8
 8009548:	f000 fca6 	bl	8009e98 <memp_free>
      break;
 800954c:	e7c3      	b.n	80094d6 <tcpip_thread+0x3e>
        pbuf_free(msg->msg.inp.p);
 800954e:	6860      	ldr	r0, [r4, #4]
 8009550:	f001 f868 	bl	800a624 <pbuf_free>
 8009554:	e7ea      	b.n	800952c <tcpip_thread+0x94>
 8009556:	bf00      	nop
 8009558:	24009aac 	.word	0x24009aac
 800955c:	24009ab0 	.word	0x24009ab0
 8009560:	24009ab4 	.word	0x24009ab4
 8009564:	080131e0 	.word	0x080131e0
 8009568:	08013210 	.word	0x08013210
 800956c:	080128dc 	.word	0x080128dc

08009570 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8009570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009572:	4607      	mov	r7, r0
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8009574:	4813      	ldr	r0, [pc, #76]	; (80095c4 <tcpip_inpkt+0x54>)
{
 8009576:	460e      	mov	r6, r1
 8009578:	4615      	mov	r5, r2
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800957a:	f007 fab7 	bl	8010aec <sys_mbox_valid>
 800957e:	b178      	cbz	r0, 80095a0 <tcpip_inpkt+0x30>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8009580:	2009      	movs	r0, #9
 8009582:	f000 fc43 	bl	8009e0c <memp_malloc>
  if (msg == NULL) {
 8009586:	4604      	mov	r4, r0
 8009588:	b1c0      	cbz	r0, 80095bc <tcpip_inpkt+0x4c>
    return ERR_MEM;
  }

  msg->type = TCPIP_MSG_INPKT;
 800958a:	2300      	movs	r3, #0
  msg->msg.inp.p = p;
 800958c:	6047      	str	r7, [r0, #4]
  msg->msg.inp.netif = inp;
 800958e:	6086      	str	r6, [r0, #8]
  msg->msg.inp.input_fn = input_fn;
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8009590:	4601      	mov	r1, r0
  msg->type = TCPIP_MSG_INPKT;
 8009592:	7003      	strb	r3, [r0, #0]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8009594:	480b      	ldr	r0, [pc, #44]	; (80095c4 <tcpip_inpkt+0x54>)
  msg->msg.inp.input_fn = input_fn;
 8009596:	60e5      	str	r5, [r4, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8009598:	f007 fa78 	bl	8010a8c <sys_mbox_trypost>
 800959c:	b938      	cbnz	r0, 80095ae <tcpip_inpkt+0x3e>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
    return ERR_MEM;
  }
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800959e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80095a0:	4b09      	ldr	r3, [pc, #36]	; (80095c8 <tcpip_inpkt+0x58>)
 80095a2:	22fc      	movs	r2, #252	; 0xfc
 80095a4:	4909      	ldr	r1, [pc, #36]	; (80095cc <tcpip_inpkt+0x5c>)
 80095a6:	480a      	ldr	r0, [pc, #40]	; (80095d0 <tcpip_inpkt+0x60>)
 80095a8:	f008 f830 	bl	801160c <iprintf>
 80095ac:	e7e8      	b.n	8009580 <tcpip_inpkt+0x10>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 80095ae:	4621      	mov	r1, r4
 80095b0:	2009      	movs	r0, #9
 80095b2:	f000 fc71 	bl	8009e98 <memp_free>
    return ERR_MEM;
 80095b6:	f04f 30ff 	mov.w	r0, #4294967295
}
 80095ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return ERR_MEM;
 80095bc:	f04f 30ff 	mov.w	r0, #4294967295
}
 80095c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80095c2:	bf00      	nop
 80095c4:	24009ab4 	.word	0x24009ab4
 80095c8:	080131e0 	.word	0x080131e0
 80095cc:	08013230 	.word	0x08013230
 80095d0:	080128dc 	.word	0x080128dc

080095d4 <tcpip_input>:
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 80095d4:	f891 302d 	ldrb.w	r3, [r1, #45]	; 0x2d
 80095d8:	f013 0f18 	tst.w	r3, #24
 80095dc:	d002      	beq.n	80095e4 <tcpip_input+0x10>
    return tcpip_inpkt(p, inp, ethernet_input);
 80095de:	4a03      	ldr	r2, [pc, #12]	; (80095ec <tcpip_input+0x18>)
 80095e0:	f7ff bfc6 	b.w	8009570 <tcpip_inpkt>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 80095e4:	4a02      	ldr	r2, [pc, #8]	; (80095f0 <tcpip_input+0x1c>)
 80095e6:	f7ff bfc3 	b.w	8009570 <tcpip_inpkt>
 80095ea:	bf00      	nop
 80095ec:	08010955 	.word	0x08010955
 80095f0:	0800fd81 	.word	0x0800fd81

080095f4 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 80095f4:	b570      	push	{r4, r5, r6, lr}
 80095f6:	4606      	mov	r6, r0
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80095f8:	4812      	ldr	r0, [pc, #72]	; (8009644 <tcpip_try_callback+0x50>)
{
 80095fa:	460d      	mov	r5, r1
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80095fc:	f007 fa76 	bl	8010aec <sys_mbox_valid>
 8009600:	b170      	cbz	r0, 8009620 <tcpip_try_callback+0x2c>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8009602:	2008      	movs	r0, #8
 8009604:	f000 fc02 	bl	8009e0c <memp_malloc>
  if (msg == NULL) {
 8009608:	4604      	mov	r4, r0
 800960a:	b1c0      	cbz	r0, 800963e <tcpip_try_callback+0x4a>
    return ERR_MEM;
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800960c:	2301      	movs	r3, #1
  msg->msg.cb.function = function;
  msg->msg.cb.ctx = ctx;

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800960e:	4601      	mov	r1, r0
  msg->msg.cb.ctx = ctx;
 8009610:	e9c0 6501 	strd	r6, r5, [r0, #4]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8009614:	480b      	ldr	r0, [pc, #44]	; (8009644 <tcpip_try_callback+0x50>)
  msg->type = TCPIP_MSG_CALLBACK;
 8009616:	7023      	strb	r3, [r4, #0]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8009618:	f007 fa38 	bl	8010a8c <sys_mbox_trypost>
 800961c:	b940      	cbnz	r0, 8009630 <tcpip_try_callback+0x3c>
    memp_free(MEMP_TCPIP_MSG_API, msg);
    return ERR_MEM;
  }
  return ERR_OK;
}
 800961e:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8009620:	4b09      	ldr	r3, [pc, #36]	; (8009648 <tcpip_try_callback+0x54>)
 8009622:	f240 125d 	movw	r2, #349	; 0x15d
 8009626:	4909      	ldr	r1, [pc, #36]	; (800964c <tcpip_try_callback+0x58>)
 8009628:	4809      	ldr	r0, [pc, #36]	; (8009650 <tcpip_try_callback+0x5c>)
 800962a:	f007 ffef 	bl	801160c <iprintf>
 800962e:	e7e8      	b.n	8009602 <tcpip_try_callback+0xe>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8009630:	4621      	mov	r1, r4
 8009632:	2008      	movs	r0, #8
 8009634:	f000 fc30 	bl	8009e98 <memp_free>
    return ERR_MEM;
 8009638:	f04f 30ff 	mov.w	r0, #4294967295
}
 800963c:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_MEM;
 800963e:	f04f 30ff 	mov.w	r0, #4294967295
}
 8009642:	bd70      	pop	{r4, r5, r6, pc}
 8009644:	24009ab4 	.word	0x24009ab4
 8009648:	080131e0 	.word	0x080131e0
 800964c:	08013230 	.word	0x08013230
 8009650:	080128dc 	.word	0x080128dc

08009654 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8009654:	b530      	push	{r4, r5, lr}
 8009656:	b083      	sub	sp, #12
 8009658:	4605      	mov	r5, r0
 800965a:	460c      	mov	r4, r1
  lwip_init();
 800965c:	f000 f8b2 	bl	80097c4 <lwip_init>

  tcpip_init_done = initfunc;
 8009660:	4a15      	ldr	r2, [pc, #84]	; (80096b8 <tcpip_init+0x64>)
  tcpip_init_done_arg = arg;
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8009662:	2106      	movs	r1, #6
  tcpip_init_done_arg = arg;
 8009664:	4b15      	ldr	r3, [pc, #84]	; (80096bc <tcpip_init+0x68>)
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8009666:	4816      	ldr	r0, [pc, #88]	; (80096c0 <tcpip_init+0x6c>)
  tcpip_init_done = initfunc;
 8009668:	6015      	str	r5, [r2, #0]
  tcpip_init_done_arg = arg;
 800966a:	601c      	str	r4, [r3, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800966c:	f007 fa00 	bl	8010a70 <sys_mbox_new>
 8009670:	b970      	cbnz	r0, 8009690 <tcpip_init+0x3c>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8009672:	4814      	ldr	r0, [pc, #80]	; (80096c4 <tcpip_init+0x70>)
 8009674:	f007 fa4a 	bl	8010b0c <sys_mutex_new>
 8009678:	b9b0      	cbnz	r0, 80096a8 <tcpip_init+0x54>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800967a:	2418      	movs	r4, #24
 800967c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009680:	2200      	movs	r2, #0
 8009682:	4911      	ldr	r1, [pc, #68]	; (80096c8 <tcpip_init+0x74>)
 8009684:	9400      	str	r4, [sp, #0]
 8009686:	4811      	ldr	r0, [pc, #68]	; (80096cc <tcpip_init+0x78>)
 8009688:	f007 fa56 	bl	8010b38 <sys_thread_new>
}
 800968c:	b003      	add	sp, #12
 800968e:	bd30      	pop	{r4, r5, pc}
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8009690:	4b0f      	ldr	r3, [pc, #60]	; (80096d0 <tcpip_init+0x7c>)
 8009692:	f240 2261 	movw	r2, #609	; 0x261
 8009696:	490f      	ldr	r1, [pc, #60]	; (80096d4 <tcpip_init+0x80>)
 8009698:	480f      	ldr	r0, [pc, #60]	; (80096d8 <tcpip_init+0x84>)
 800969a:	f007 ffb7 	bl	801160c <iprintf>
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800969e:	4809      	ldr	r0, [pc, #36]	; (80096c4 <tcpip_init+0x70>)
 80096a0:	f007 fa34 	bl	8010b0c <sys_mutex_new>
 80096a4:	2800      	cmp	r0, #0
 80096a6:	d0e8      	beq.n	800967a <tcpip_init+0x26>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 80096a8:	4b09      	ldr	r3, [pc, #36]	; (80096d0 <tcpip_init+0x7c>)
 80096aa:	f240 2265 	movw	r2, #613	; 0x265
 80096ae:	490b      	ldr	r1, [pc, #44]	; (80096dc <tcpip_init+0x88>)
 80096b0:	4809      	ldr	r0, [pc, #36]	; (80096d8 <tcpip_init+0x84>)
 80096b2:	f007 ffab 	bl	801160c <iprintf>
 80096b6:	e7e0      	b.n	800967a <tcpip_init+0x26>
 80096b8:	24009aac 	.word	0x24009aac
 80096bc:	24009ab0 	.word	0x24009ab0
 80096c0:	24009ab4 	.word	0x24009ab4
 80096c4:	24009aa8 	.word	0x24009aa8
 80096c8:	08009499 	.word	0x08009499
 80096cc:	08013288 	.word	0x08013288
 80096d0:	080131e0 	.word	0x080131e0
 80096d4:	08013240 	.word	0x08013240
 80096d8:	080128dc 	.word	0x080128dc
 80096dc:	08013264 	.word	0x08013264

080096e0 <lwip_htons>:
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
  return PP_HTONS(n);
 80096e0:	ba40      	rev16	r0, r0
}
 80096e2:	b280      	uxth	r0, r0
 80096e4:	4770      	bx	lr
 80096e6:	bf00      	nop

080096e8 <lwip_htonl>:
 */
u32_t
lwip_htonl(u32_t n)
{
  return PP_HTONL(n);
}
 80096e8:	ba00      	rev	r0, r0
 80096ea:	4770      	bx	lr

080096ec <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 80096ec:	b530      	push	{r4, r5, lr}
  const u8_t *pb = (const u8_t *)dataptr;
  const u16_t *ps;
  u16_t t = 0;
 80096ee:	f04f 0e00 	mov.w	lr, #0
  u32_t sum = 0;
  int odd = ((mem_ptr_t)pb & 1);
 80096f2:	f000 0501 	and.w	r5, r0, #1

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 80096f6:	4571      	cmp	r1, lr
 80096f8:	dd05      	ble.n	8009706 <lwip_standard_chksum+0x1a>
 80096fa:	b125      	cbz	r5, 8009706 <lwip_standard_chksum+0x1a>
    ((u8_t *)&t)[1] = *pb++;
 80096fc:	f810 3b01 	ldrb.w	r3, [r0], #1
    len--;
 8009700:	3901      	subs	r1, #1
    ((u8_t *)&t)[1] = *pb++;
 8009702:	f363 2e1f 	bfi	lr, r3, #8, #24
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
  while (len > 1) {
 8009706:	2901      	cmp	r1, #1
 8009708:	dd27      	ble.n	800975a <lwip_standard_chksum+0x6e>
 800970a:	3902      	subs	r1, #2
  u32_t sum = 0;
 800970c:	2300      	movs	r3, #0
 800970e:	084c      	lsrs	r4, r1, #1
 8009710:	f104 0c01 	add.w	ip, r4, #1
 8009714:	eb00 0c4c 	add.w	ip, r0, ip, lsl #1
    sum += *ps++;
 8009718:	f830 2b02 	ldrh.w	r2, [r0], #2
  while (len > 1) {
 800971c:	4584      	cmp	ip, r0
    sum += *ps++;
 800971e:	4413      	add	r3, r2
  while (len > 1) {
 8009720:	d1fa      	bne.n	8009718 <lwip_standard_chksum+0x2c>
    len -= 2;
 8009722:	ebc4 74c4 	rsb	r4, r4, r4, lsl #31
 8009726:	eb01 0144 	add.w	r1, r1, r4, lsl #1
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 800972a:	2901      	cmp	r1, #1
 800972c:	d105      	bne.n	800973a <lwip_standard_chksum+0x4e>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 800972e:	f89c 2000 	ldrb.w	r2, [ip]
 8009732:	f362 0e07 	bfi	lr, r2, #0, #8
 8009736:	fa1f fe8e 	uxth.w	lr, lr
  }

  /* Add end bytes */
  sum += t;
 800973a:	449e      	add	lr, r3

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 800973c:	fa1f f38e 	uxth.w	r3, lr
 8009740:	eb03 431e 	add.w	r3, r3, lr, lsr #16
  sum = FOLD_U32T(sum);
 8009744:	b298      	uxth	r0, r3
 8009746:	eb00 4013 	add.w	r0, r0, r3, lsr #16

  /* Swap if alignment was odd */
  if (odd) {
 800974a:	b125      	cbz	r5, 8009756 <lwip_standard_chksum+0x6a>
    sum = SWAP_BYTES_IN_WORD(sum);
 800974c:	0203      	lsls	r3, r0, #8
 800974e:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8009752:	b29b      	uxth	r3, r3
 8009754:	4318      	orrs	r0, r3
  }

  return (u16_t)sum;
}
 8009756:	b280      	uxth	r0, r0
 8009758:	bd30      	pop	{r4, r5, pc}
  ps = (const u16_t *)(const void *)pb;
 800975a:	4684      	mov	ip, r0
  u32_t sum = 0;
 800975c:	2300      	movs	r3, #0
 800975e:	e7e4      	b.n	800972a <lwip_standard_chksum+0x3e>

08009760 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 8009760:	b508      	push	{r3, lr}
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 8009762:	f7ff ffc3 	bl	80096ec <lwip_standard_chksum>
 8009766:	43c0      	mvns	r0, r0
}
 8009768:	b280      	uxth	r0, r0
 800976a:	bd08      	pop	{r3, pc}

0800976c <inet_chksum_pbuf>:
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;

  acc = 0;
  for (q = p; q != NULL; q = q->next) {
 800976c:	b338      	cbz	r0, 80097be <inet_chksum_pbuf+0x52>
{
 800976e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  int swapped = 0;
 8009770:	2700      	movs	r7, #0
 8009772:	4605      	mov	r5, r0
  acc = 0;
 8009774:	463c      	mov	r4, r7
    acc += LWIP_CHKSUM(q->payload, q->len);
 8009776:	896e      	ldrh	r6, [r5, #10]
 8009778:	6868      	ldr	r0, [r5, #4]
 800977a:	4631      	mov	r1, r6
 800977c:	f7ff ffb6 	bl	80096ec <lwip_standard_chksum>
 8009780:	4404      	add	r4, r0
    acc = FOLD_U32T(acc);
    if (q->len % 2 != 0) {
 8009782:	f016 0f01 	tst.w	r6, #1
    acc = FOLD_U32T(acc);
 8009786:	b2a3      	uxth	r3, r4
 8009788:	eb03 4414 	add.w	r4, r3, r4, lsr #16
      swapped = !swapped;
      acc = SWAP_BYTES_IN_WORD(acc);
 800978c:	ea4f 2304 	mov.w	r3, r4, lsl #8
 8009790:	f3c4 2207 	ubfx	r2, r4, #8, #8
    if (q->len % 2 != 0) {
 8009794:	d004      	beq.n	80097a0 <inet_chksum_pbuf+0x34>
      acc = SWAP_BYTES_IN_WORD(acc);
 8009796:	b29b      	uxth	r3, r3
 8009798:	f087 0701 	eor.w	r7, r7, #1
 800979c:	ea43 0402 	orr.w	r4, r3, r2
  for (q = p; q != NULL; q = q->next) {
 80097a0:	682d      	ldr	r5, [r5, #0]
 80097a2:	2d00      	cmp	r5, #0
 80097a4:	d1e7      	bne.n	8009776 <inet_chksum_pbuf+0xa>
    }
  }

  if (swapped) {
 80097a6:	b13f      	cbz	r7, 80097b8 <inet_chksum_pbuf+0x4c>
    acc = SWAP_BYTES_IN_WORD(acc);
 80097a8:	0220      	lsls	r0, r4, #8
 80097aa:	f3c4 2407 	ubfx	r4, r4, #8, #8
 80097ae:	b280      	uxth	r0, r0
 80097b0:	4320      	orrs	r0, r4
  }
  return (u16_t)~(acc & 0xffffUL);
 80097b2:	43c0      	mvns	r0, r0
 80097b4:	b280      	uxth	r0, r0
}
 80097b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return (u16_t)~(acc & 0xffffUL);
 80097b8:	43e0      	mvns	r0, r4
 80097ba:	b280      	uxth	r0, r0
}
 80097bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  for (q = p; q != NULL; q = q->next) {
 80097be:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
 80097c2:	4770      	bx	lr

080097c4 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80097c4:	b508      	push	{r3, lr}
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 80097c6:	f007 f997 	bl	8010af8 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 80097ca:	f000 f80d 	bl	80097e8 <mem_init>
  memp_init();
 80097ce:	f000 fadb 	bl	8009d88 <memp_init>
  pbuf_init();
  netif_init();
 80097d2:	f000 fbe1 	bl	8009f98 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80097d6:	f005 fc2d 	bl	800f034 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80097da:	f001 fa33 	bl	800ac44 <tcp_init>
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
#endif /* LWIP_TIMERS */
}
 80097de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_timeouts_init();
 80097e2:	f005 bbcb 	b.w	800ef7c <sys_timeouts_init>
 80097e6:	bf00      	nop

080097e8 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 80097e8:	b510      	push	{r4, lr}

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80097ea:	4b11      	ldr	r3, [pc, #68]	; (8009830 <mem_init+0x48>)
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
  mem->next = MEM_SIZE_ALIGNED;
  mem->prev = 0;
 80097ec:	2200      	movs	r2, #0
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80097ee:	4c11      	ldr	r4, [pc, #68]	; (8009834 <mem_init+0x4c>)
  mem->next = MEM_SIZE_ALIGNED;
 80097f0:	4911      	ldr	r1, [pc, #68]	; (8009838 <mem_init+0x50>)
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80097f2:	6023      	str	r3, [r4, #0]
  mem->used = 0;
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 80097f4:	4811      	ldr	r0, [pc, #68]	; (800983c <mem_init+0x54>)
 80097f6:	4c12      	ldr	r4, [pc, #72]	; (8009840 <mem_init+0x58>)
  mem->used = 0;
 80097f8:	721a      	strb	r2, [r3, #8]
  mem->prev = 0;
 80097fa:	e9c3 1200 	strd	r1, r2, [r3]
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 80097fe:	6004      	str	r4, [r0, #0]
  ram_end->used = 1;
 8009800:	2001      	movs	r0, #1
 8009802:	4a10      	ldr	r2, [pc, #64]	; (8009844 <mem_init+0x5c>)
  ram_end->next = MEM_SIZE_ALIGNED;
  ram_end->prev = MEM_SIZE_ALIGNED;
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8009804:	4c10      	ldr	r4, [pc, #64]	; (8009848 <mem_init+0x60>)
  ram_end->used = 1;
 8009806:	f882 00f0 	strb.w	r0, [r2, #240]	; 0xf0
  ram_end->next = MEM_SIZE_ALIGNED;
 800980a:	f8c2 10e8 	str.w	r1, [r2, #232]	; 0xe8
  ram_end->prev = MEM_SIZE_ALIGNED;
 800980e:	f8c2 10ec 	str.w	r1, [r2, #236]	; 0xec

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8009812:	480e      	ldr	r0, [pc, #56]	; (800984c <mem_init+0x64>)
  lfree = (struct mem *)(void *)ram;
 8009814:	6023      	str	r3, [r4, #0]
  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8009816:	f007 f979 	bl	8010b0c <sys_mutex_new>
 800981a:	b900      	cbnz	r0, 800981e <mem_init+0x36>
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 800981c:	bd10      	pop	{r4, pc}
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800981e:	4b0c      	ldr	r3, [pc, #48]	; (8009850 <mem_init+0x68>)
 8009820:	f240 221f 	movw	r2, #543	; 0x21f
 8009824:	490b      	ldr	r1, [pc, #44]	; (8009854 <mem_init+0x6c>)
 8009826:	480c      	ldr	r0, [pc, #48]	; (8009858 <mem_init+0x70>)
}
 8009828:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800982c:	f007 beee 	b.w	801160c <iprintf>
 8009830:	30020000 	.word	0x30020000
 8009834:	24009ad8 	.word	0x24009ad8
 8009838:	0001ffe8 	.word	0x0001ffe8
 800983c:	24009adc 	.word	0x24009adc
 8009840:	3003ffe8 	.word	0x3003ffe8
 8009844:	3003ff00 	.word	0x3003ff00
 8009848:	24009ad0 	.word	0x24009ad0
 800984c:	24009ad4 	.word	0x24009ad4
 8009850:	08013298 	.word	0x08013298
 8009854:	080132c8 	.word	0x080132c8
 8009858:	080128dc 	.word	0x080128dc

0800985c <mem_free>:
mem_free(void *rmem)
{
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800985c:	2800      	cmp	r0, #0
 800985e:	f000 8098 	beq.w	8009992 <mem_free+0x136>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8009862:	0783      	lsls	r3, r0, #30
{
 8009864:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009868:	4604      	mov	r4, r0
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800986a:	f040 808d 	bne.w	8009988 <mem_free+0x12c>

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800986e:	4e61      	ldr	r6, [pc, #388]	; (80099f4 <mem_free+0x198>)
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8009870:	f1a0 050c 	sub.w	r5, r0, #12
  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8009874:	6833      	ldr	r3, [r6, #0]
 8009876:	42ab      	cmp	r3, r5
 8009878:	d805      	bhi.n	8009886 <mem_free+0x2a>
 800987a:	4f5f      	ldr	r7, [pc, #380]	; (80099f8 <mem_free+0x19c>)
 800987c:	f100 030c 	add.w	r3, r0, #12
 8009880:	683a      	ldr	r2, [r7, #0]
 8009882:	429a      	cmp	r2, r3
 8009884:	d20c      	bcs.n	80098a0 <mem_free+0x44>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8009886:	4b5d      	ldr	r3, [pc, #372]	; (80099fc <mem_free+0x1a0>)
 8009888:	f240 227f 	movw	r2, #639	; 0x27f
 800988c:	495c      	ldr	r1, [pc, #368]	; (8009a00 <mem_free+0x1a4>)
 800988e:	485d      	ldr	r0, [pc, #372]	; (8009a04 <mem_free+0x1a8>)
 8009890:	f007 febc 	bl	801160c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8009894:	f007 f966 	bl	8010b64 <sys_arch_protect>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8009898:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    MEM_STATS_INC_LOCKED(illegal);
 800989c:	f007 b96e 	b.w	8010b7c <sys_arch_unprotect>
  LWIP_MEM_FREE_PROTECT();
 80098a0:	4859      	ldr	r0, [pc, #356]	; (8009a08 <mem_free+0x1ac>)
 80098a2:	f007 f93f 	bl	8010b24 <sys_mutex_lock>
  if (!mem->used) {
 80098a6:	f814 3c04 	ldrb.w	r3, [r4, #-4]
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	f000 809c 	beq.w	80099e8 <mem_free+0x18c>
  pmem = ptr_to_mem(mem->prev);
 80098b0:	f854 1c08 	ldr.w	r1, [r4, #-8]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80098b4:	4855      	ldr	r0, [pc, #340]	; (8009a0c <mem_free+0x1b0>)
  return (mem_size_t)((u8_t *)mem - ram);
 80098b6:	6832      	ldr	r2, [r6, #0]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80098b8:	4281      	cmp	r1, r0
  nmem = ptr_to_mem(mem->next);
 80098ba:	f854 3c0c 	ldr.w	r3, [r4, #-12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80098be:	d807      	bhi.n	80098d0 <mem_free+0x74>
 80098c0:	4283      	cmp	r3, r0
 80098c2:	d805      	bhi.n	80098d0 <mem_free+0x74>
  return (mem_size_t)((u8_t *)mem - ram);
 80098c4:	1aa8      	subs	r0, r5, r2
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80098c6:	4288      	cmp	r0, r1
 80098c8:	d012      	beq.n	80098f0 <mem_free+0x94>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80098ca:	5851      	ldr	r1, [r2, r1]
 80098cc:	4288      	cmp	r0, r1
 80098ce:	d00f      	beq.n	80098f0 <mem_free+0x94>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 80098d0:	4b4a      	ldr	r3, [pc, #296]	; (80099fc <mem_free+0x1a0>)
 80098d2:	f240 2295 	movw	r2, #661	; 0x295
 80098d6:	494e      	ldr	r1, [pc, #312]	; (8009a10 <mem_free+0x1b4>)
 80098d8:	484a      	ldr	r0, [pc, #296]	; (8009a04 <mem_free+0x1a8>)
 80098da:	f007 fe97 	bl	801160c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 80098de:	484a      	ldr	r0, [pc, #296]	; (8009a08 <mem_free+0x1ac>)
 80098e0:	f007 f926 	bl	8010b30 <sys_mutex_unlock>
    MEM_STATS_INC_LOCKED(illegal);
 80098e4:	f007 f93e 	bl	8010b64 <sys_arch_protect>
}
 80098e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    MEM_STATS_INC_LOCKED(illegal);
 80098ec:	f007 b946 	b.w	8010b7c <sys_arch_unprotect>
  return (struct mem *)(void *)&ram[ptr];
 80098f0:	18d1      	adds	r1, r2, r3
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80098f2:	f8d7 c000 	ldr.w	ip, [r7]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80098f6:	4561      	cmp	r1, ip
 80098f8:	d002      	beq.n	8009900 <mem_free+0xa4>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80098fa:	6849      	ldr	r1, [r1, #4]
 80098fc:	4288      	cmp	r0, r1
 80098fe:	d1e7      	bne.n	80098d0 <mem_free+0x74>
  if (mem < lfree) {
 8009900:	f8df 8128 	ldr.w	r8, [pc, #296]	; 8009a2c <mem_free+0x1d0>
  mem->used = 0;
 8009904:	2100      	movs	r1, #0
 8009906:	f804 1c04 	strb.w	r1, [r4, #-4]
  if (mem < lfree) {
 800990a:	f8d8 1000 	ldr.w	r1, [r8]
 800990e:	42a9      	cmp	r1, r5
    lfree = mem;
 8009910:	bf88      	it	hi
 8009912:	f8c8 5000 	strhi.w	r5, [r8]
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8009916:	4295      	cmp	r5, r2
 8009918:	d33c      	bcc.n	8009994 <mem_free+0x138>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800991a:	4565      	cmp	r5, ip
 800991c:	d244      	bcs.n	80099a8 <mem_free+0x14c>
  return (struct mem *)(void *)&ram[ptr];
 800991e:	6832      	ldr	r2, [r6, #0]
 8009920:	4413      	add	r3, r2
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8009922:	429d      	cmp	r5, r3
 8009924:	d014      	beq.n	8009950 <mem_free+0xf4>
 8009926:	7a19      	ldrb	r1, [r3, #8]
 8009928:	b991      	cbnz	r1, 8009950 <mem_free+0xf4>
 800992a:	6839      	ldr	r1, [r7, #0]
 800992c:	428b      	cmp	r3, r1
 800992e:	d00f      	beq.n	8009950 <mem_free+0xf4>
    if (lfree == nmem) {
 8009930:	f8d8 1000 	ldr.w	r1, [r8]
 8009934:	428b      	cmp	r3, r1
    mem->next = nmem->next;
 8009936:	6819      	ldr	r1, [r3, #0]
 8009938:	f844 1c0c 	str.w	r1, [r4, #-12]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800993c:	4933      	ldr	r1, [pc, #204]	; (8009a0c <mem_free+0x1b0>)
 800993e:	681b      	ldr	r3, [r3, #0]
      lfree = mem;
 8009940:	bf08      	it	eq
 8009942:	f8c8 5000 	streq.w	r5, [r8]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8009946:	428b      	cmp	r3, r1
 8009948:	d002      	beq.n	8009950 <mem_free+0xf4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800994a:	4413      	add	r3, r2
  return (mem_size_t)((u8_t *)mem - ram);
 800994c:	1aa9      	subs	r1, r5, r2
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800994e:	6059      	str	r1, [r3, #4]
  pmem = ptr_to_mem(mem->prev);
 8009950:	f854 1c08 	ldr.w	r1, [r4, #-8]
  return (struct mem *)(void *)&ram[ptr];
 8009954:	1853      	adds	r3, r2, r1
  if (pmem != mem && pmem->used == 0) {
 8009956:	429d      	cmp	r5, r3
 8009958:	d011      	beq.n	800997e <mem_free+0x122>
 800995a:	7a18      	ldrb	r0, [r3, #8]
 800995c:	b978      	cbnz	r0, 800997e <mem_free+0x122>
    if (lfree == mem) {
 800995e:	f8d8 0000 	ldr.w	r0, [r8]
 8009962:	4285      	cmp	r5, r0
    if (mem->next != MEM_SIZE_ALIGNED) {
 8009964:	4829      	ldr	r0, [pc, #164]	; (8009a0c <mem_free+0x1b0>)
      lfree = pmem;
 8009966:	bf08      	it	eq
 8009968:	f8c8 3000 	streq.w	r3, [r8]
    pmem->next = mem->next;
 800996c:	f854 3c0c 	ldr.w	r3, [r4, #-12]
 8009970:	5053      	str	r3, [r2, r1]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8009972:	f854 3c0c 	ldr.w	r3, [r4, #-12]
 8009976:	4283      	cmp	r3, r0
 8009978:	d001      	beq.n	800997e <mem_free+0x122>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800997a:	441a      	add	r2, r3
 800997c:	6051      	str	r1, [r2, #4]
  LWIP_MEM_FREE_UNPROTECT();
 800997e:	4822      	ldr	r0, [pc, #136]	; (8009a08 <mem_free+0x1ac>)
}
 8009980:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  LWIP_MEM_FREE_UNPROTECT();
 8009984:	f007 b8d4 	b.w	8010b30 <sys_mutex_unlock>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8009988:	4b1c      	ldr	r3, [pc, #112]	; (80099fc <mem_free+0x1a0>)
 800998a:	f240 2273 	movw	r2, #627	; 0x273
 800998e:	4921      	ldr	r1, [pc, #132]	; (8009a14 <mem_free+0x1b8>)
 8009990:	e77d      	b.n	800988e <mem_free+0x32>
 8009992:	4770      	bx	lr
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8009994:	4b19      	ldr	r3, [pc, #100]	; (80099fc <mem_free+0x1a0>)
 8009996:	f240 12df 	movw	r2, #479	; 0x1df
 800999a:	491f      	ldr	r1, [pc, #124]	; (8009a18 <mem_free+0x1bc>)
 800999c:	4819      	ldr	r0, [pc, #100]	; (8009a04 <mem_free+0x1a8>)
 800999e:	f007 fe35 	bl	801160c <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80099a2:	683b      	ldr	r3, [r7, #0]
 80099a4:	429d      	cmp	r5, r3
 80099a6:	d306      	bcc.n	80099b6 <mem_free+0x15a>
 80099a8:	4b14      	ldr	r3, [pc, #80]	; (80099fc <mem_free+0x1a0>)
 80099aa:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80099ae:	491b      	ldr	r1, [pc, #108]	; (8009a1c <mem_free+0x1c0>)
 80099b0:	4814      	ldr	r0, [pc, #80]	; (8009a04 <mem_free+0x1a8>)
 80099b2:	f007 fe2b 	bl	801160c <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 80099b6:	f814 3c04 	ldrb.w	r3, [r4, #-4]
 80099ba:	b133      	cbz	r3, 80099ca <mem_free+0x16e>
 80099bc:	4b0f      	ldr	r3, [pc, #60]	; (80099fc <mem_free+0x1a0>)
 80099be:	f240 12e1 	movw	r2, #481	; 0x1e1
 80099c2:	4917      	ldr	r1, [pc, #92]	; (8009a20 <mem_free+0x1c4>)
 80099c4:	480f      	ldr	r0, [pc, #60]	; (8009a04 <mem_free+0x1a8>)
 80099c6:	f007 fe21 	bl	801160c <iprintf>
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 80099ca:	f854 3c0c 	ldr.w	r3, [r4, #-12]
 80099ce:	4a0f      	ldr	r2, [pc, #60]	; (8009a0c <mem_free+0x1b0>)
 80099d0:	4293      	cmp	r3, r2
 80099d2:	d9a4      	bls.n	800991e <mem_free+0xc2>
 80099d4:	4b09      	ldr	r3, [pc, #36]	; (80099fc <mem_free+0x1a0>)
 80099d6:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 80099da:	4912      	ldr	r1, [pc, #72]	; (8009a24 <mem_free+0x1c8>)
 80099dc:	4809      	ldr	r0, [pc, #36]	; (8009a04 <mem_free+0x1a8>)
 80099de:	f007 fe15 	bl	801160c <iprintf>
  nmem = ptr_to_mem(mem->next);
 80099e2:	f854 3c0c 	ldr.w	r3, [r4, #-12]
 80099e6:	e79a      	b.n	800991e <mem_free+0xc2>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 80099e8:	4b04      	ldr	r3, [pc, #16]	; (80099fc <mem_free+0x1a0>)
 80099ea:	f44f 7223 	mov.w	r2, #652	; 0x28c
 80099ee:	490e      	ldr	r1, [pc, #56]	; (8009a28 <mem_free+0x1cc>)
 80099f0:	e772      	b.n	80098d8 <mem_free+0x7c>
 80099f2:	bf00      	nop
 80099f4:	24009ad8 	.word	0x24009ad8
 80099f8:	24009adc 	.word	0x24009adc
 80099fc:	08013298 	.word	0x08013298
 8009a00:	08013308 	.word	0x08013308
 8009a04:	080128dc 	.word	0x080128dc
 8009a08:	24009ad4 	.word	0x24009ad4
 8009a0c:	0001ffe8 	.word	0x0001ffe8
 8009a10:	0801334c 	.word	0x0801334c
 8009a14:	080132e4 	.word	0x080132e4
 8009a18:	08013380 	.word	0x08013380
 8009a1c:	08013398 	.word	0x08013398
 8009a20:	080133b4 	.word	0x080133b4
 8009a24:	080133d0 	.word	0x080133d0
 8009a28:	08013324 	.word	0x08013324
 8009a2c:	24009ad0 	.word	0x24009ad0

08009a30 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8009a30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8009a34:	1ccb      	adds	r3, r1, #3
 8009a36:	f023 0303 	bic.w	r3, r3, #3
  if (newsize < MIN_SIZE_ALIGNED) {
 8009a3a:	2b0c      	cmp	r3, #12
 8009a3c:	461d      	mov	r5, r3
 8009a3e:	bf38      	it	cc
 8009a40:	250c      	movcc	r5, #12
    newsize = MIN_SIZE_ALIGNED;
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8009a42:	42a9      	cmp	r1, r5
 8009a44:	d875      	bhi.n	8009b32 <mem_trim+0x102>
 8009a46:	4a4d      	ldr	r2, [pc, #308]	; (8009b7c <mem_trim+0x14c>)
 8009a48:	4293      	cmp	r3, r2
 8009a4a:	d872      	bhi.n	8009b32 <mem_trim+0x102>
    return NULL;
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8009a4c:	4f4c      	ldr	r7, [pc, #304]	; (8009b80 <mem_trim+0x150>)
 8009a4e:	4604      	mov	r4, r0
 8009a50:	683b      	ldr	r3, [r7, #0]
 8009a52:	4283      	cmp	r3, r0
 8009a54:	d83b      	bhi.n	8009ace <mem_trim+0x9e>
 8009a56:	4a4b      	ldr	r2, [pc, #300]	; (8009b84 <mem_trim+0x154>)
 8009a58:	6812      	ldr	r2, [r2, #0]
 8009a5a:	4282      	cmp	r2, r0
 8009a5c:	d937      	bls.n	8009ace <mem_trim+0x9e>
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8009a5e:	f1a4 080c 	sub.w	r8, r4, #12
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8009a62:	f854 6c0c 	ldr.w	r6, [r4, #-12]
  return (mem_size_t)((u8_t *)mem - ram);
 8009a66:	eba8 0803 	sub.w	r8, r8, r3
  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8009a6a:	3e0c      	subs	r6, #12
 8009a6c:	eba6 0608 	sub.w	r6, r6, r8
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8009a70:	42ae      	cmp	r6, r5
 8009a72:	d361      	bcc.n	8009b38 <mem_trim+0x108>
  if (newsize > size) {
    /* not supported */
    return NULL;
  }
  if (newsize == size) {
 8009a74:	d06a      	beq.n	8009b4c <mem_trim+0x11c>
    /* No change in size, simply return */
    return rmem;
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8009a76:	4844      	ldr	r0, [pc, #272]	; (8009b88 <mem_trim+0x158>)
 8009a78:	f007 f854 	bl	8010b24 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 8009a7c:	f854 2c0c 	ldr.w	r2, [r4, #-12]
  return (struct mem *)(void *)&ram[ptr];
 8009a80:	683b      	ldr	r3, [r7, #0]
 8009a82:	eb03 0902 	add.w	r9, r3, r2
  if (mem2->used == 0) {
 8009a86:	f899 1008 	ldrb.w	r1, [r9, #8]
 8009a8a:	2900      	cmp	r1, #0
 8009a8c:	d134      	bne.n	8009af8 <mem_trim+0xc8>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8009a8e:	493b      	ldr	r1, [pc, #236]	; (8009b7c <mem_trim+0x14c>)
 8009a90:	428a      	cmp	r2, r1
 8009a92:	d069      	beq.n	8009b68 <mem_trim+0x138>
    /* remember the old next pointer */
    next = mem2->next;
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
    if (lfree == mem2) {
 8009a94:	493d      	ldr	r1, [pc, #244]	; (8009b8c <mem_trim+0x15c>)
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8009a96:	350c      	adds	r5, #12
    next = mem2->next;
 8009a98:	f8d9 0000 	ldr.w	r0, [r9]
    if (lfree == mem2) {
 8009a9c:	680a      	ldr	r2, [r1, #0]
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8009a9e:	4445      	add	r5, r8
    if (lfree == mem2) {
 8009aa0:	454a      	cmp	r2, r9
  return (struct mem *)(void *)&ram[ptr];
 8009aa2:	eb03 0205 	add.w	r2, r3, r5
      lfree = ptr_to_mem(ptr2);
 8009aa6:	bf08      	it	eq
 8009aa8:	600a      	streq	r2, [r1, #0]
    }
    mem2 = ptr_to_mem(ptr2);
    mem2->used = 0;
 8009aaa:	2100      	movs	r1, #0
    /* restore the next pointer */
    mem2->next = next;
    /* link it back to mem */
    mem2->prev = ptr;
 8009aac:	e9c2 0800 	strd	r0, r8, [r2]
    mem2->used = 0;
 8009ab0:	7211      	strb	r1, [r2, #8]
    /* link mem to it */
    mem->next = ptr2;
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8009ab2:	4932      	ldr	r1, [pc, #200]	; (8009b7c <mem_trim+0x14c>)
    mem->next = ptr2;
 8009ab4:	f844 5c0c 	str.w	r5, [r4, #-12]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8009ab8:	6812      	ldr	r2, [r2, #0]
 8009aba:	428a      	cmp	r2, r1
 8009abc:	d001      	beq.n	8009ac2 <mem_trim+0x92>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8009abe:	441a      	add	r2, r3
 8009ac0:	6055      	str	r5, [r2, #4]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8009ac2:	4831      	ldr	r0, [pc, #196]	; (8009b88 <mem_trim+0x158>)
 8009ac4:	f007 f834 	bl	8010b30 <sys_mutex_unlock>
  return rmem;
 8009ac8:	4620      	mov	r0, r4
}
 8009aca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8009ace:	4b30      	ldr	r3, [pc, #192]	; (8009b90 <mem_trim+0x160>)
 8009ad0:	f240 22d1 	movw	r2, #721	; 0x2d1
 8009ad4:	492f      	ldr	r1, [pc, #188]	; (8009b94 <mem_trim+0x164>)
 8009ad6:	4830      	ldr	r0, [pc, #192]	; (8009b98 <mem_trim+0x168>)
 8009ad8:	f007 fd98 	bl	801160c <iprintf>
  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8009adc:	683b      	ldr	r3, [r7, #0]
 8009ade:	42a3      	cmp	r3, r4
 8009ae0:	d803      	bhi.n	8009aea <mem_trim+0xba>
 8009ae2:	4a28      	ldr	r2, [pc, #160]	; (8009b84 <mem_trim+0x154>)
 8009ae4:	6812      	ldr	r2, [r2, #0]
 8009ae6:	42a2      	cmp	r2, r4
 8009ae8:	d8b9      	bhi.n	8009a5e <mem_trim+0x2e>
    MEM_STATS_INC_LOCKED(illegal);
 8009aea:	f007 f83b 	bl	8010b64 <sys_arch_protect>
 8009aee:	f007 f845 	bl	8010b7c <sys_arch_unprotect>
    return rmem;
 8009af2:	4620      	mov	r0, r4
}
 8009af4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8009af8:	f105 0118 	add.w	r1, r5, #24
 8009afc:	42b1      	cmp	r1, r6
 8009afe:	d8e0      	bhi.n	8009ac2 <mem_trim+0x92>
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8009b00:	491e      	ldr	r1, [pc, #120]	; (8009b7c <mem_trim+0x14c>)
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8009b02:	350c      	adds	r5, #12
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8009b04:	428a      	cmp	r2, r1
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8009b06:	4445      	add	r5, r8
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8009b08:	d023      	beq.n	8009b52 <mem_trim+0x122>
    if (mem2 < lfree) {
 8009b0a:	4820      	ldr	r0, [pc, #128]	; (8009b8c <mem_trim+0x15c>)
  return (struct mem *)(void *)&ram[ptr];
 8009b0c:	1959      	adds	r1, r3, r5
    if (mem2 < lfree) {
 8009b0e:	6806      	ldr	r6, [r0, #0]
    mem2->prev = ptr;
 8009b10:	e9c1 2800 	strd	r2, r8, [r1]
    if (mem2 < lfree) {
 8009b14:	428e      	cmp	r6, r1
    mem2->used = 0;
 8009b16:	f04f 0200 	mov.w	r2, #0
      lfree = mem2;
 8009b1a:	bf88      	it	hi
 8009b1c:	6001      	strhi	r1, [r0, #0]
    mem2->used = 0;
 8009b1e:	720a      	strb	r2, [r1, #8]
    mem->next = ptr2;
 8009b20:	f844 5c0c 	str.w	r5, [r4, #-12]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8009b24:	680a      	ldr	r2, [r1, #0]
 8009b26:	4915      	ldr	r1, [pc, #84]	; (8009b7c <mem_trim+0x14c>)
 8009b28:	428a      	cmp	r2, r1
 8009b2a:	d0ca      	beq.n	8009ac2 <mem_trim+0x92>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8009b2c:	4413      	add	r3, r2
 8009b2e:	605d      	str	r5, [r3, #4]
 8009b30:	e7c7      	b.n	8009ac2 <mem_trim+0x92>
    return NULL;
 8009b32:	2000      	movs	r0, #0
}
 8009b34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8009b38:	4b15      	ldr	r3, [pc, #84]	; (8009b90 <mem_trim+0x160>)
 8009b3a:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8009b3e:	4917      	ldr	r1, [pc, #92]	; (8009b9c <mem_trim+0x16c>)
 8009b40:	4815      	ldr	r0, [pc, #84]	; (8009b98 <mem_trim+0x168>)
 8009b42:	f007 fd63 	bl	801160c <iprintf>
    return NULL;
 8009b46:	2000      	movs	r0, #0
}
 8009b48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b4c:	4620      	mov	r0, r4
 8009b4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8009b52:	4b0f      	ldr	r3, [pc, #60]	; (8009b90 <mem_trim+0x160>)
 8009b54:	f240 3216 	movw	r2, #790	; 0x316
 8009b58:	4911      	ldr	r1, [pc, #68]	; (8009ba0 <mem_trim+0x170>)
 8009b5a:	480f      	ldr	r0, [pc, #60]	; (8009b98 <mem_trim+0x168>)
 8009b5c:	f007 fd56 	bl	801160c <iprintf>
    mem2->next = mem->next;
 8009b60:	f854 2c0c 	ldr.w	r2, [r4, #-12]
  return (struct mem *)(void *)&ram[ptr];
 8009b64:	683b      	ldr	r3, [r7, #0]
 8009b66:	e7d0      	b.n	8009b0a <mem_trim+0xda>
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8009b68:	4b09      	ldr	r3, [pc, #36]	; (8009b90 <mem_trim+0x160>)
 8009b6a:	f240 22f5 	movw	r2, #757	; 0x2f5
 8009b6e:	490c      	ldr	r1, [pc, #48]	; (8009ba0 <mem_trim+0x170>)
 8009b70:	4809      	ldr	r0, [pc, #36]	; (8009b98 <mem_trim+0x168>)
 8009b72:	f007 fd4b 	bl	801160c <iprintf>
  return (struct mem *)(void *)&ram[ptr];
 8009b76:	683b      	ldr	r3, [r7, #0]
 8009b78:	e78c      	b.n	8009a94 <mem_trim+0x64>
 8009b7a:	bf00      	nop
 8009b7c:	0001ffe8 	.word	0x0001ffe8
 8009b80:	24009ad8 	.word	0x24009ad8
 8009b84:	24009adc 	.word	0x24009adc
 8009b88:	24009ad4 	.word	0x24009ad4
 8009b8c:	24009ad0 	.word	0x24009ad0
 8009b90:	08013298 	.word	0x08013298
 8009b94:	080133fc 	.word	0x080133fc
 8009b98:	080128dc 	.word	0x080128dc
 8009b9c:	08013414 	.word	0x08013414
 8009ba0:	08013434 	.word	0x08013434

08009ba4 <mem_malloc>:
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8009ba4:	2800      	cmp	r0, #0
 8009ba6:	d066      	beq.n	8009c76 <mem_malloc+0xd2>
{
 8009ba8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    return NULL;
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8009bac:	1cc3      	adds	r3, r0, #3
 8009bae:	f023 0303 	bic.w	r3, r3, #3
  if (size < MIN_SIZE_ALIGNED) {
 8009bb2:	2b0c      	cmp	r3, #12
 8009bb4:	4698      	mov	r8, r3
 8009bb6:	bf38      	it	cc
 8009bb8:	f04f 080c 	movcc.w	r8, #12
    size = MIN_SIZE_ALIGNED;
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8009bbc:	4540      	cmp	r0, r8
 8009bbe:	d827      	bhi.n	8009c10 <mem_malloc+0x6c>
 8009bc0:	4c47      	ldr	r4, [pc, #284]	; (8009ce0 <mem_malloc+0x13c>)
 8009bc2:	42a3      	cmp	r3, r4
 8009bc4:	d824      	bhi.n	8009c10 <mem_malloc+0x6c>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8009bc6:	4f47      	ldr	r7, [pc, #284]	; (8009ce4 <mem_malloc+0x140>)
  return (mem_size_t)((u8_t *)mem - ram);
 8009bc8:	4e47      	ldr	r6, [pc, #284]	; (8009ce8 <mem_malloc+0x144>)
  sys_mutex_lock(&mem_mutex);
 8009bca:	4848      	ldr	r0, [pc, #288]	; (8009cec <mem_malloc+0x148>)
 8009bcc:	f006 ffaa 	bl	8010b24 <sys_mutex_lock>
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8009bd0:	6838      	ldr	r0, [r7, #0]
  return (mem_size_t)((u8_t *)mem - ram);
 8009bd2:	6832      	ldr	r2, [r6, #0]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8009bd4:	eba4 0c08 	sub.w	ip, r4, r8
  return (mem_size_t)((u8_t *)mem - ram);
 8009bd8:	1a84      	subs	r4, r0, r2
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8009bda:	4564      	cmp	r4, ip
 8009bdc:	d212      	bcs.n	8009c04 <mem_malloc+0x60>
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8009bde:	f06f 0e0b 	mvn.w	lr, #11
 8009be2:	e006      	b.n	8009bf2 <mem_malloc+0x4e>
 8009be4:	5911      	ldr	r1, [r2, r4]
 8009be6:	440b      	add	r3, r1
      if ((!mem->used) &&
 8009be8:	4543      	cmp	r3, r8
 8009bea:	d214      	bcs.n	8009c16 <mem_malloc+0x72>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8009bec:	460c      	mov	r4, r1
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8009bee:	4564      	cmp	r4, ip
 8009bf0:	d208      	bcs.n	8009c04 <mem_malloc+0x60>
  return (struct mem *)(void *)&ram[ptr];
 8009bf2:	1915      	adds	r5, r2, r4
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8009bf4:	ebae 0304 	sub.w	r3, lr, r4
      if ((!mem->used) &&
 8009bf8:	7a29      	ldrb	r1, [r5, #8]
 8009bfa:	2900      	cmp	r1, #0
 8009bfc:	d0f2      	beq.n	8009be4 <mem_malloc+0x40>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8009bfe:	5914      	ldr	r4, [r2, r4]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8009c00:	4564      	cmp	r4, ip
 8009c02:	d3f6      	bcc.n	8009bf2 <mem_malloc+0x4e>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8009c04:	4839      	ldr	r0, [pc, #228]	; (8009cec <mem_malloc+0x148>)
 8009c06:	f006 ff93 	bl	8010b30 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8009c0a:	2000      	movs	r0, #0
}
 8009c0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return NULL;
 8009c10:	2000      	movs	r0, #0
}
 8009c12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8009c16:	f108 0c18 	add.w	ip, r8, #24
 8009c1a:	f108 080c 	add.w	r8, r8, #12
 8009c1e:	4563      	cmp	r3, ip
 8009c20:	d32a      	bcc.n	8009c78 <mem_malloc+0xd4>
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8009c22:	4b2f      	ldr	r3, [pc, #188]	; (8009ce0 <mem_malloc+0x13c>)
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8009c24:	eb08 0904 	add.w	r9, r8, r4
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8009c28:	4599      	cmp	r9, r3
 8009c2a:	d04d      	beq.n	8009cc8 <mem_malloc+0x124>
  return (struct mem *)(void *)&ram[ptr];
 8009c2c:	eb02 0309 	add.w	r3, r2, r9
          mem2->used = 0;
 8009c30:	f04f 0c00 	mov.w	ip, #0
 8009c34:	f883 c008 	strb.w	ip, [r3, #8]
          mem2->next = mem->next;
 8009c38:	f842 1009 	str.w	r1, [r2, r9]
          mem2->prev = ptr;
 8009c3c:	605c      	str	r4, [r3, #4]
          mem->used = 1;
 8009c3e:	2301      	movs	r3, #1
          if (mem2->next != MEM_SIZE_ALIGNED) {
 8009c40:	4927      	ldr	r1, [pc, #156]	; (8009ce0 <mem_malloc+0x13c>)
          mem->next = ptr2;
 8009c42:	f8c5 9000 	str.w	r9, [r5]
          mem->used = 1;
 8009c46:	722b      	strb	r3, [r5, #8]
          if (mem2->next != MEM_SIZE_ALIGNED) {
 8009c48:	f852 3009 	ldr.w	r3, [r2, r9]
 8009c4c:	428b      	cmp	r3, r1
 8009c4e:	d002      	beq.n	8009c56 <mem_malloc+0xb2>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8009c50:	441a      	add	r2, r3
 8009c52:	f8c2 9004 	str.w	r9, [r2, #4]
        if (mem == lfree) {
 8009c56:	4285      	cmp	r5, r0
          while (cur->used && cur != ram_end) {
 8009c58:	4c25      	ldr	r4, [pc, #148]	; (8009cf0 <mem_malloc+0x14c>)
        if (mem == lfree) {
 8009c5a:	d027      	beq.n	8009cac <mem_malloc+0x108>
        sys_mutex_unlock(&mem_mutex);
 8009c5c:	4823      	ldr	r0, [pc, #140]	; (8009cec <mem_malloc+0x148>)
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8009c5e:	44a8      	add	r8, r5
        sys_mutex_unlock(&mem_mutex);
 8009c60:	f006 ff66 	bl	8010b30 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8009c64:	6823      	ldr	r3, [r4, #0]
 8009c66:	4543      	cmp	r3, r8
 8009c68:	d318      	bcc.n	8009c9c <mem_malloc+0xf8>
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8009c6a:	07ab      	lsls	r3, r5, #30
 8009c6c:	d107      	bne.n	8009c7e <mem_malloc+0xda>
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8009c6e:	f105 000c 	add.w	r0, r5, #12
}
 8009c72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c76:	4770      	bx	lr
          mem->used = 1;
 8009c78:	2301      	movs	r3, #1
 8009c7a:	722b      	strb	r3, [r5, #8]
 8009c7c:	e7eb      	b.n	8009c56 <mem_malloc+0xb2>
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8009c7e:	4b1d      	ldr	r3, [pc, #116]	; (8009cf4 <mem_malloc+0x150>)
 8009c80:	f240 32bb 	movw	r2, #955	; 0x3bb
 8009c84:	491c      	ldr	r1, [pc, #112]	; (8009cf8 <mem_malloc+0x154>)
 8009c86:	481d      	ldr	r0, [pc, #116]	; (8009cfc <mem_malloc+0x158>)
 8009c88:	f007 fcc0 	bl	801160c <iprintf>
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8009c8c:	4b19      	ldr	r3, [pc, #100]	; (8009cf4 <mem_malloc+0x150>)
 8009c8e:	f240 32bd 	movw	r2, #957	; 0x3bd
 8009c92:	491b      	ldr	r1, [pc, #108]	; (8009d00 <mem_malloc+0x15c>)
 8009c94:	4819      	ldr	r0, [pc, #100]	; (8009cfc <mem_malloc+0x158>)
 8009c96:	f007 fcb9 	bl	801160c <iprintf>
 8009c9a:	e7e8      	b.n	8009c6e <mem_malloc+0xca>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8009c9c:	4b15      	ldr	r3, [pc, #84]	; (8009cf4 <mem_malloc+0x150>)
 8009c9e:	f240 32b9 	movw	r2, #953	; 0x3b9
 8009ca2:	4918      	ldr	r1, [pc, #96]	; (8009d04 <mem_malloc+0x160>)
 8009ca4:	4815      	ldr	r0, [pc, #84]	; (8009cfc <mem_malloc+0x158>)
 8009ca6:	f007 fcb1 	bl	801160c <iprintf>
 8009caa:	e7de      	b.n	8009c6a <mem_malloc+0xc6>
  return (struct mem *)(void *)&ram[ptr];
 8009cac:	6830      	ldr	r0, [r6, #0]
 8009cae:	462b      	mov	r3, r5
          while (cur->used && cur != ram_end) {
 8009cb0:	6821      	ldr	r1, [r4, #0]
 8009cb2:	e003      	b.n	8009cbc <mem_malloc+0x118>
  return (struct mem *)(void *)&ram[ptr];
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	4403      	add	r3, r0
          while (cur->used && cur != ram_end) {
 8009cb8:	7a1a      	ldrb	r2, [r3, #8]
 8009cba:	b11a      	cbz	r2, 8009cc4 <mem_malloc+0x120>
 8009cbc:	4299      	cmp	r1, r3
 8009cbe:	d1f9      	bne.n	8009cb4 <mem_malloc+0x110>
          lfree = cur;
 8009cc0:	6039      	str	r1, [r7, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8009cc2:	e7cb      	b.n	8009c5c <mem_malloc+0xb8>
          lfree = cur;
 8009cc4:	603b      	str	r3, [r7, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8009cc6:	e7c9      	b.n	8009c5c <mem_malloc+0xb8>
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8009cc8:	f240 3287 	movw	r2, #903	; 0x387
 8009ccc:	490e      	ldr	r1, [pc, #56]	; (8009d08 <mem_malloc+0x164>)
 8009cce:	4b09      	ldr	r3, [pc, #36]	; (8009cf4 <mem_malloc+0x150>)
 8009cd0:	480a      	ldr	r0, [pc, #40]	; (8009cfc <mem_malloc+0x158>)
 8009cd2:	f007 fc9b 	bl	801160c <iprintf>
          mem2->next = mem->next;
 8009cd6:	6829      	ldr	r1, [r5, #0]
  return (struct mem *)(void *)&ram[ptr];
 8009cd8:	6832      	ldr	r2, [r6, #0]
        if (mem == lfree) {
 8009cda:	6838      	ldr	r0, [r7, #0]
 8009cdc:	e7a6      	b.n	8009c2c <mem_malloc+0x88>
 8009cde:	bf00      	nop
 8009ce0:	0001ffe8 	.word	0x0001ffe8
 8009ce4:	24009ad0 	.word	0x24009ad0
 8009ce8:	24009ad8 	.word	0x24009ad8
 8009cec:	24009ad4 	.word	0x24009ad4
 8009cf0:	24009adc 	.word	0x24009adc
 8009cf4:	08013298 	.word	0x08013298
 8009cf8:	08013478 	.word	0x08013478
 8009cfc:	080128dc 	.word	0x080128dc
 8009d00:	080134a8 	.word	0x080134a8
 8009d04:	08013448 	.word	0x08013448
 8009d08:	08013434 	.word	0x08013434

08009d0c <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8009d0c:	b538      	push	{r3, r4, r5, lr}
 8009d0e:	4604      	mov	r4, r0

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8009d10:	f006 ff28 	bl	8010b64 <sys_arch_protect>

  memp = *desc->tab;
 8009d14:	68a3      	ldr	r3, [r4, #8]
 8009d16:	681c      	ldr	r4, [r3, #0]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8009d18:	b18c      	cbz	r4, 8009d3e <do_memp_malloc_pool+0x32>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8009d1a:	6822      	ldr	r2, [r4, #0]
 8009d1c:	4605      	mov	r5, r0
 8009d1e:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8009d20:	07a3      	lsls	r3, r4, #30
 8009d22:	d104      	bne.n	8009d2e <do_memp_malloc_pool+0x22>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8009d24:	4628      	mov	r0, r5
 8009d26:	f006 ff29 	bl	8010b7c <sys_arch_unprotect>
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
}
 8009d2a:	4620      	mov	r0, r4
 8009d2c:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8009d2e:	4b06      	ldr	r3, [pc, #24]	; (8009d48 <do_memp_malloc_pool+0x3c>)
 8009d30:	f44f 728c 	mov.w	r2, #280	; 0x118
 8009d34:	4905      	ldr	r1, [pc, #20]	; (8009d4c <do_memp_malloc_pool+0x40>)
 8009d36:	4806      	ldr	r0, [pc, #24]	; (8009d50 <do_memp_malloc_pool+0x44>)
 8009d38:	f007 fc68 	bl	801160c <iprintf>
 8009d3c:	e7f2      	b.n	8009d24 <do_memp_malloc_pool+0x18>
    SYS_ARCH_UNPROTECT(old_level);
 8009d3e:	f006 ff1d 	bl	8010b7c <sys_arch_unprotect>
}
 8009d42:	4620      	mov	r0, r4
 8009d44:	bd38      	pop	{r3, r4, r5, pc}
 8009d46:	bf00      	nop
 8009d48:	080134cc 	.word	0x080134cc
 8009d4c:	080134fc 	.word	0x080134fc
 8009d50:	080128dc 	.word	0x080128dc

08009d54 <memp_init_pool>:
{
 8009d54:	b430      	push	{r4, r5}
  *desc->tab = NULL;
 8009d56:	2100      	movs	r1, #0
  for (i = 0; i < desc->num; ++i) {
 8009d58:	8844      	ldrh	r4, [r0, #2]
  *desc->tab = NULL;
 8009d5a:	e9d0 3501 	ldrd	r3, r5, [r0, #4]
 8009d5e:	6029      	str	r1, [r5, #0]
  for (i = 0; i < desc->num; ++i) {
 8009d60:	b17c      	cbz	r4, 8009d82 <memp_init_pool+0x2e>
 8009d62:	3303      	adds	r3, #3
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8009d64:	f8b0 c000 	ldrh.w	ip, [r0]
  for (i = 0; i < desc->num; ++i) {
 8009d68:	460a      	mov	r2, r1
 8009d6a:	f023 0303 	bic.w	r3, r3, #3
 8009d6e:	e000      	b.n	8009d72 <memp_init_pool+0x1e>
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8009d70:	4603      	mov	r3, r0
  for (i = 0; i < desc->num; ++i) {
 8009d72:	3201      	adds	r2, #1
    memp->next = *desc->tab;
 8009d74:	6019      	str	r1, [r3, #0]
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8009d76:	eb03 000c 	add.w	r0, r3, ip
  for (i = 0; i < desc->num; ++i) {
 8009d7a:	4619      	mov	r1, r3
 8009d7c:	42a2      	cmp	r2, r4
 8009d7e:	d1f7      	bne.n	8009d70 <memp_init_pool+0x1c>
 8009d80:	602b      	str	r3, [r5, #0]
}
 8009d82:	bc30      	pop	{r4, r5}
 8009d84:	4770      	bx	lr
 8009d86:	bf00      	nop

08009d88 <memp_init>:
{
 8009d88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009d8a:	f8df e054 	ldr.w	lr, [pc, #84]	; 8009de0 <memp_init+0x58>
 8009d8e:	2404      	movs	r4, #4
 8009d90:	4b10      	ldr	r3, [pc, #64]	; (8009dd4 <memp_init+0x4c>)
  *desc->tab = NULL;
 8009d92:	2600      	movs	r6, #0
{
 8009d94:	4d10      	ldr	r5, [pc, #64]	; (8009dd8 <memp_init+0x50>)
 8009d96:	f10e 0730 	add.w	r7, lr, #48	; 0x30
 8009d9a:	4a10      	ldr	r2, [pc, #64]	; (8009ddc <memp_init+0x54>)
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8009d9c:	3303      	adds	r3, #3
  *desc->tab = NULL;
 8009d9e:	602e      	str	r6, [r5, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8009da0:	f023 0303 	bic.w	r3, r3, #3
  for (i = 0; i < desc->num; ++i) {
 8009da4:	b16c      	cbz	r4, 8009dc2 <memp_init+0x3a>
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8009da6:	2100      	movs	r1, #0
 8009da8:	f8b2 c000 	ldrh.w	ip, [r2]
  for (i = 0; i < desc->num; ++i) {
 8009dac:	460a      	mov	r2, r1
 8009dae:	e000      	b.n	8009db2 <memp_init+0x2a>
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8009db0:	4603      	mov	r3, r0
  for (i = 0; i < desc->num; ++i) {
 8009db2:	3201      	adds	r2, #1
    memp->next = *desc->tab;
 8009db4:	6019      	str	r1, [r3, #0]
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8009db6:	eb03 000c 	add.w	r0, r3, ip
  for (i = 0; i < desc->num; ++i) {
 8009dba:	4619      	mov	r1, r3
 8009dbc:	42a2      	cmp	r2, r4
 8009dbe:	d1f7      	bne.n	8009db0 <memp_init+0x28>
 8009dc0:	602b      	str	r3, [r5, #0]
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8009dc2:	4577      	cmp	r7, lr
 8009dc4:	d005      	beq.n	8009dd2 <memp_init+0x4a>
    memp_init_pool(memp_pools[i]);
 8009dc6:	f85e 2f04 	ldr.w	r2, [lr, #4]!
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8009dca:	e9d2 3501 	ldrd	r3, r5, [r2, #4]
  for (i = 0; i < desc->num; ++i) {
 8009dce:	8854      	ldrh	r4, [r2, #2]
 8009dd0:	e7e4      	b.n	8009d9c <memp_init+0x14>
}
 8009dd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009dd4:	240104b4 	.word	0x240104b4
 8009dd8:	24010568 	.word	0x24010568
 8009ddc:	08013620 	.word	0x08013620
 8009de0:	0801362c 	.word	0x0801362c

08009de4 <memp_malloc_pool>:
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8009de4:	b108      	cbz	r0, 8009dea <memp_malloc_pool+0x6>
  if (desc == NULL) {
    return NULL;
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8009de6:	f7ff bf91 	b.w	8009d0c <do_memp_malloc_pool>
{
 8009dea:	b510      	push	{r4, lr}
 8009dec:	4604      	mov	r4, r0
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8009dee:	4b04      	ldr	r3, [pc, #16]	; (8009e00 <memp_malloc_pool+0x1c>)
 8009df0:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8009df4:	4903      	ldr	r1, [pc, #12]	; (8009e04 <memp_malloc_pool+0x20>)
 8009df6:	4804      	ldr	r0, [pc, #16]	; (8009e08 <memp_malloc_pool+0x24>)
 8009df8:	f007 fc08 	bl	801160c <iprintf>
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8009dfc:	4620      	mov	r0, r4
 8009dfe:	bd10      	pop	{r4, pc}
 8009e00:	080134cc 	.word	0x080134cc
 8009e04:	08013520 	.word	0x08013520
 8009e08:	080128dc 	.word	0x080128dc

08009e0c <memp_malloc>:
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8009e0c:	280c      	cmp	r0, #12
{
 8009e0e:	b508      	push	{r3, lr}
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8009e10:	d806      	bhi.n	8009e20 <memp_malloc+0x14>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8009e12:	4b08      	ldr	r3, [pc, #32]	; (8009e34 <memp_malloc+0x28>)
 8009e14:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
}
 8009e18:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  memp = do_memp_malloc_pool(memp_pools[type]);
 8009e1c:	f7ff bf76 	b.w	8009d0c <do_memp_malloc_pool>
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8009e20:	4b05      	ldr	r3, [pc, #20]	; (8009e38 <memp_malloc+0x2c>)
 8009e22:	f240 1257 	movw	r2, #343	; 0x157
 8009e26:	4905      	ldr	r1, [pc, #20]	; (8009e3c <memp_malloc+0x30>)
 8009e28:	4805      	ldr	r0, [pc, #20]	; (8009e40 <memp_malloc+0x34>)
 8009e2a:	f007 fbef 	bl	801160c <iprintf>
}
 8009e2e:	2000      	movs	r0, #0
 8009e30:	bd08      	pop	{r3, pc}
 8009e32:	bf00      	nop
 8009e34:	0801362c 	.word	0x0801362c
 8009e38:	080134cc 	.word	0x080134cc
 8009e3c:	08013534 	.word	0x08013534
 8009e40:	080128dc 	.word	0x080128dc

08009e44 <memp_free_pool>:
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8009e44:	b180      	cbz	r0, 8009e68 <memp_free_pool+0x24>
{
 8009e46:	b570      	push	{r4, r5, r6, lr}
 8009e48:	460c      	mov	r4, r1
  if ((desc == NULL) || (mem == NULL)) {
 8009e4a:	b161      	cbz	r1, 8009e66 <memp_free_pool+0x22>
  LWIP_ASSERT("memp_free: mem properly aligned",
 8009e4c:	078b      	lsls	r3, r1, #30
 8009e4e:	4605      	mov	r5, r0
 8009e50:	d111      	bne.n	8009e76 <memp_free_pool+0x32>
  SYS_ARCH_PROTECT(old_level);
 8009e52:	f006 fe87 	bl	8010b64 <sys_arch_protect>
  memp->next = *desc->tab;
 8009e56:	68ab      	ldr	r3, [r5, #8]
 8009e58:	681a      	ldr	r2, [r3, #0]
 8009e5a:	6022      	str	r2, [r4, #0]
  *desc->tab = memp;
 8009e5c:	601c      	str	r4, [r3, #0]
    return;
  }

  do_memp_free_pool(desc, mem);
}
 8009e5e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  SYS_ARCH_UNPROTECT(old_level);
 8009e62:	f006 be8b 	b.w	8010b7c <sys_arch_unprotect>
}
 8009e66:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8009e68:	4b07      	ldr	r3, [pc, #28]	; (8009e88 <memp_free_pool+0x44>)
 8009e6a:	f240 1295 	movw	r2, #405	; 0x195
 8009e6e:	4907      	ldr	r1, [pc, #28]	; (8009e8c <memp_free_pool+0x48>)
 8009e70:	4807      	ldr	r0, [pc, #28]	; (8009e90 <memp_free_pool+0x4c>)
 8009e72:	f007 bbcb 	b.w	801160c <iprintf>
  LWIP_ASSERT("memp_free: mem properly aligned",
 8009e76:	4b04      	ldr	r3, [pc, #16]	; (8009e88 <memp_free_pool+0x44>)
 8009e78:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8009e7c:	4905      	ldr	r1, [pc, #20]	; (8009e94 <memp_free_pool+0x50>)
 8009e7e:	4804      	ldr	r0, [pc, #16]	; (8009e90 <memp_free_pool+0x4c>)
 8009e80:	f007 fbc4 	bl	801160c <iprintf>
 8009e84:	e7e5      	b.n	8009e52 <memp_free_pool+0xe>
 8009e86:	bf00      	nop
 8009e88:	080134cc 	.word	0x080134cc
 8009e8c:	08013520 	.word	0x08013520
 8009e90:	080128dc 	.word	0x080128dc
 8009e94:	08013554 	.word	0x08013554

08009e98 <memp_free>:
{
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8009e98:	280c      	cmp	r0, #12
 8009e9a:	d812      	bhi.n	8009ec2 <memp_free+0x2a>
{
 8009e9c:	b570      	push	{r4, r5, r6, lr}
 8009e9e:	460c      	mov	r4, r1

  if (mem == NULL) {
 8009ea0:	b171      	cbz	r1, 8009ec0 <memp_free+0x28>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8009ea2:	4b0f      	ldr	r3, [pc, #60]	; (8009ee0 <memp_free+0x48>)
 8009ea4:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
  LWIP_ASSERT("memp_free: mem properly aligned",
 8009ea8:	078b      	lsls	r3, r1, #30
 8009eaa:	d111      	bne.n	8009ed0 <memp_free+0x38>
  SYS_ARCH_PROTECT(old_level);
 8009eac:	f006 fe5a 	bl	8010b64 <sys_arch_protect>
  memp->next = *desc->tab;
 8009eb0:	68ab      	ldr	r3, [r5, #8]
 8009eb2:	681a      	ldr	r2, [r3, #0]
 8009eb4:	6022      	str	r2, [r4, #0]
  *desc->tab = memp;
 8009eb6:	601c      	str	r4, [r3, #0]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8009eb8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  SYS_ARCH_UNPROTECT(old_level);
 8009ebc:	f006 be5e 	b.w	8010b7c <sys_arch_unprotect>
}
 8009ec0:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8009ec2:	4b08      	ldr	r3, [pc, #32]	; (8009ee4 <memp_free+0x4c>)
 8009ec4:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8009ec8:	4907      	ldr	r1, [pc, #28]	; (8009ee8 <memp_free+0x50>)
 8009eca:	4808      	ldr	r0, [pc, #32]	; (8009eec <memp_free+0x54>)
 8009ecc:	f007 bb9e 	b.w	801160c <iprintf>
  LWIP_ASSERT("memp_free: mem properly aligned",
 8009ed0:	4b04      	ldr	r3, [pc, #16]	; (8009ee4 <memp_free+0x4c>)
 8009ed2:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8009ed6:	4906      	ldr	r1, [pc, #24]	; (8009ef0 <memp_free+0x58>)
 8009ed8:	4804      	ldr	r0, [pc, #16]	; (8009eec <memp_free+0x54>)
 8009eda:	f007 fb97 	bl	801160c <iprintf>
 8009ede:	e7e5      	b.n	8009eac <memp_free+0x14>
 8009ee0:	0801362c 	.word	0x0801362c
 8009ee4:	080134cc 	.word	0x080134cc
 8009ee8:	08013574 	.word	0x08013574
 8009eec:	080128dc 	.word	0x080128dc
 8009ef0:	08013554 	.word	0x08013554

08009ef4 <netif_null_output_ip4>:
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
}
 8009ef4:	f06f 000b 	mvn.w	r0, #11
 8009ef8:	4770      	bx	lr
 8009efa:	bf00      	nop

08009efc <netif_issue_reports>:
{
 8009efc:	b510      	push	{r4, lr}
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8009efe:	4604      	mov	r4, r0
 8009f00:	b150      	cbz	r0, 8009f18 <netif_issue_reports+0x1c>
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8009f02:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8009f06:	f003 0205 	and.w	r2, r3, #5
 8009f0a:	2a05      	cmp	r2, #5
 8009f0c:	d103      	bne.n	8009f16 <netif_issue_reports+0x1a>
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8009f0e:	6862      	ldr	r2, [r4, #4]
 8009f10:	b10a      	cbz	r2, 8009f16 <netif_issue_reports+0x1a>
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8009f12:	071b      	lsls	r3, r3, #28
 8009f14:	d408      	bmi.n	8009f28 <netif_issue_reports+0x2c>
}
 8009f16:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8009f18:	4b06      	ldr	r3, [pc, #24]	; (8009f34 <netif_issue_reports+0x38>)
 8009f1a:	f240 326d 	movw	r2, #877	; 0x36d
 8009f1e:	4906      	ldr	r1, [pc, #24]	; (8009f38 <netif_issue_reports+0x3c>)
 8009f20:	4806      	ldr	r0, [pc, #24]	; (8009f3c <netif_issue_reports+0x40>)
 8009f22:	f007 fb73 	bl	801160c <iprintf>
 8009f26:	e7ec      	b.n	8009f02 <netif_issue_reports+0x6>
      etharp_gratuitous(netif);
 8009f28:	1d21      	adds	r1, r4, #4
 8009f2a:	4620      	mov	r0, r4
}
 8009f2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      etharp_gratuitous(netif);
 8009f30:	f005 bdda 	b.w	800fae8 <etharp_request>
 8009f34:	08013660 	.word	0x08013660
 8009f38:	08013694 	.word	0x08013694
 8009f3c:	080128dc 	.word	0x080128dc

08009f40 <netif_do_set_ipaddr.isra.0>:
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
 8009f40:	b570      	push	{r4, r5, r6, lr}
 8009f42:	4605      	mov	r5, r0
 8009f44:	b082      	sub	sp, #8
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8009f46:	460c      	mov	r4, r1
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
 8009f48:	4616      	mov	r6, r2
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8009f4a:	b1b9      	cbz	r1, 8009f7c <netif_do_set_ipaddr.isra.0+0x3c>
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8009f4c:	686b      	ldr	r3, [r5, #4]
 8009f4e:	6822      	ldr	r2, [r4, #0]
 8009f50:	429a      	cmp	r2, r3
 8009f52:	d101      	bne.n	8009f58 <netif_do_set_ipaddr.isra.0+0x18>
}
 8009f54:	b002      	add	sp, #8
 8009f56:	bd70      	pop	{r4, r5, r6, pc}
    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8009f58:	6033      	str	r3, [r6, #0]
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8009f5a:	4630      	mov	r0, r6
 8009f5c:	a901      	add	r1, sp, #4
    *ip_2_ip4(&new_addr) = *ipaddr;
 8009f5e:	9201      	str	r2, [sp, #4]
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8009f60:	f002 f8e8 	bl	800c134 <tcp_netif_ip_addr_changed>
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8009f64:	a901      	add	r1, sp, #4
 8009f66:	4630      	mov	r0, r6
 8009f68:	f005 f970 	bl	800f24c <udp_netif_ip_addr_changed>
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8009f6c:	6823      	ldr	r3, [r4, #0]
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8009f6e:	2101      	movs	r1, #1
 8009f70:	4628      	mov	r0, r5
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8009f72:	606b      	str	r3, [r5, #4]
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8009f74:	f7ff ffc2 	bl	8009efc <netif_issue_reports>
}
 8009f78:	b002      	add	sp, #8
 8009f7a:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8009f7c:	4b03      	ldr	r3, [pc, #12]	; (8009f8c <netif_do_set_ipaddr.isra.0+0x4c>)
 8009f7e:	f240 12cb 	movw	r2, #459	; 0x1cb
 8009f82:	4903      	ldr	r1, [pc, #12]	; (8009f90 <netif_do_set_ipaddr.isra.0+0x50>)
 8009f84:	4803      	ldr	r0, [pc, #12]	; (8009f94 <netif_do_set_ipaddr.isra.0+0x54>)
 8009f86:	f007 fb41 	bl	801160c <iprintf>
 8009f8a:	e7df      	b.n	8009f4c <netif_do_set_ipaddr.isra.0+0xc>
 8009f8c:	08013660 	.word	0x08013660
 8009f90:	080136b8 	.word	0x080136b8
 8009f94:	080128dc 	.word	0x080128dc

08009f98 <netif_init>:
}
 8009f98:	4770      	bx	lr
 8009f9a:	bf00      	nop

08009f9c <netif_set_addr>:
{
 8009f9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009f9e:	460d      	mov	r5, r1
 8009fa0:	b083      	sub	sp, #12
 8009fa2:	4604      	mov	r4, r0
 8009fa4:	4617      	mov	r7, r2
 8009fa6:	461e      	mov	r6, r3
  LWIP_ASSERT_CORE_LOCKED();
 8009fa8:	f7fc fe68 	bl	8006c7c <sys_check_core_locking>
  if (ipaddr == NULL) {
 8009fac:	b1fd      	cbz	r5, 8009fee <netif_set_addr+0x52>
  if (netmask == NULL) {
 8009fae:	b187      	cbz	r7, 8009fd2 <netif_set_addr+0x36>
  if (gw == NULL) {
 8009fb0:	b196      	cbz	r6, 8009fd8 <netif_set_addr+0x3c>
  remove = ip4_addr_isany(ipaddr);
 8009fb2:	682b      	ldr	r3, [r5, #0]
 8009fb4:	b1a3      	cbz	r3, 8009fe0 <netif_set_addr+0x44>
 8009fb6:	2200      	movs	r2, #0
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8009fb8:	683b      	ldr	r3, [r7, #0]
 8009fba:	68a1      	ldr	r1, [r4, #8]
 8009fbc:	428b      	cmp	r3, r1
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8009fbe:	68e1      	ldr	r1, [r4, #12]
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8009fc0:	bf18      	it	ne
 8009fc2:	60a3      	strne	r3, [r4, #8]
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8009fc4:	6833      	ldr	r3, [r6, #0]
 8009fc6:	428b      	cmp	r3, r1
    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8009fc8:	bf18      	it	ne
 8009fca:	60e3      	strne	r3, [r4, #12]
  if (!remove) {
 8009fcc:	b19a      	cbz	r2, 8009ff6 <netif_set_addr+0x5a>
}
 8009fce:	b003      	add	sp, #12
 8009fd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    netmask = IP4_ADDR_ANY4;
 8009fd2:	4f0c      	ldr	r7, [pc, #48]	; (800a004 <netif_set_addr+0x68>)
  if (gw == NULL) {
 8009fd4:	2e00      	cmp	r6, #0
 8009fd6:	d1ec      	bne.n	8009fb2 <netif_set_addr+0x16>
  remove = ip4_addr_isany(ipaddr);
 8009fd8:	682b      	ldr	r3, [r5, #0]
    gw = IP4_ADDR_ANY4;
 8009fda:	4e0a      	ldr	r6, [pc, #40]	; (800a004 <netif_set_addr+0x68>)
  remove = ip4_addr_isany(ipaddr);
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d1ea      	bne.n	8009fb6 <netif_set_addr+0x1a>
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8009fe0:	aa01      	add	r2, sp, #4
 8009fe2:	4629      	mov	r1, r5
 8009fe4:	4620      	mov	r0, r4
 8009fe6:	f7ff ffab 	bl	8009f40 <netif_do_set_ipaddr.isra.0>
 8009fea:	2201      	movs	r2, #1
 8009fec:	e7e4      	b.n	8009fb8 <netif_set_addr+0x1c>
    ipaddr = IP4_ADDR_ANY4;
 8009fee:	4d05      	ldr	r5, [pc, #20]	; (800a004 <netif_set_addr+0x68>)
  if (netmask == NULL) {
 8009ff0:	2f00      	cmp	r7, #0
 8009ff2:	d1dd      	bne.n	8009fb0 <netif_set_addr+0x14>
 8009ff4:	e7ed      	b.n	8009fd2 <netif_set_addr+0x36>
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8009ff6:	aa01      	add	r2, sp, #4
 8009ff8:	4629      	mov	r1, r5
 8009ffa:	4620      	mov	r0, r4
 8009ffc:	f7ff ffa0 	bl	8009f40 <netif_do_set_ipaddr.isra.0>
}
 800a000:	b003      	add	sp, #12
 800a002:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a004:	08015040 	.word	0x08015040

0800a008 <netif_add>:
{
 800a008:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a00c:	4606      	mov	r6, r0
 800a00e:	460c      	mov	r4, r1
 800a010:	4615      	mov	r5, r2
 800a012:	461f      	mov	r7, r3
 800a014:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
  LWIP_ASSERT_CORE_LOCKED();
 800a018:	f7fc fe30 	bl	8006c7c <sys_check_core_locking>
  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800a01c:	2e00      	cmp	r6, #0
 800a01e:	f000 8083 	beq.w	800a128 <netif_add+0x120>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800a022:	f1b8 0f00 	cmp.w	r8, #0
 800a026:	f000 8088 	beq.w	800a13a <netif_add+0x132>
  if (ipaddr == NULL) {
 800a02a:	2c00      	cmp	r4, #0
 800a02c:	d070      	beq.n	800a110 <netif_add+0x108>
  if (netmask == NULL) {
 800a02e:	2d00      	cmp	r5, #0
 800a030:	d069      	beq.n	800a106 <netif_add+0xfe>
  if (gw == NULL) {
 800a032:	2f00      	cmp	r7, #0
 800a034:	d06a      	beq.n	800a10c <netif_add+0x104>
  netif->state = state;
 800a036:	980a      	ldr	r0, [sp, #40]	; 0x28
  netif_set_addr(netif, ipaddr, netmask, gw);
 800a038:	4621      	mov	r1, r4
  netif->num = netif_num;
 800a03a:	f8df a12c 	ldr.w	sl, [pc, #300]	; 800a168 <netif_add+0x160>
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800a03e:	2400      	movs	r4, #0
  netif->state = state;
 800a040:	6230      	str	r0, [r6, #32]
  netif_set_addr(netif, ipaddr, netmask, gw);
 800a042:	463b      	mov	r3, r7
  netif->input = input;
 800a044:	980c      	ldr	r0, [sp, #48]	; 0x30
  netif_set_addr(netif, ipaddr, netmask, gw);
 800a046:	462a      	mov	r2, r5
  ip_addr_set_zero_ip4(&netif->gw);
 800a048:	60f4      	str	r4, [r6, #12]
  netif->input = input;
 800a04a:	6130      	str	r0, [r6, #16]
  netif->num = netif_num;
 800a04c:	f89a 0000 	ldrb.w	r0, [sl]
  netif->mtu = 0;
 800a050:	84b4      	strh	r4, [r6, #36]	; 0x24
  netif->num = netif_num;
 800a052:	f886 0030 	strb.w	r0, [r6, #48]	; 0x30
  netif->output = netif_null_output_ip4;
 800a056:	483d      	ldr	r0, [pc, #244]	; (800a14c <netif_add+0x144>)
  netif->flags = 0;
 800a058:	f886 402d 	strb.w	r4, [r6, #45]	; 0x2d
  netif->output = netif_null_output_ip4;
 800a05c:	6170      	str	r0, [r6, #20]
  netif_set_addr(netif, ipaddr, netmask, gw);
 800a05e:	4630      	mov	r0, r6
  netif->link_callback = NULL;
 800a060:	61f4      	str	r4, [r6, #28]
  ip_addr_set_zero_ip4(&netif->netmask);
 800a062:	e9c6 4401 	strd	r4, r4, [r6, #4]
  netif_set_addr(netif, ipaddr, netmask, gw);
 800a066:	f7ff ff99 	bl	8009f9c <netif_set_addr>
  if (init(netif) != ERR_OK) {
 800a06a:	4630      	mov	r0, r6
 800a06c:	47c0      	blx	r8
 800a06e:	2800      	cmp	r0, #0
 800a070:	d157      	bne.n	800a122 <netif_add+0x11a>
      if (netif->num == 255) {
 800a072:	f896 2030 	ldrb.w	r2, [r6, #48]	; 0x30
 800a076:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 800a16c <netif_add+0x164>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800a07a:	f8df b0e0 	ldr.w	fp, [pc, #224]	; 800a15c <netif_add+0x154>
 800a07e:	f8df 90f0 	ldr.w	r9, [pc, #240]	; 800a170 <netif_add+0x168>
 800a082:	4f33      	ldr	r7, [pc, #204]	; (800a150 <netif_add+0x148>)
      if (netif->num == 255) {
 800a084:	2aff      	cmp	r2, #255	; 0xff
 800a086:	d102      	bne.n	800a08e <netif_add+0x86>
        netif->num = 0;
 800a088:	2300      	movs	r3, #0
 800a08a:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800a08e:	f8d8 4000 	ldr.w	r4, [r8]
 800a092:	2c00      	cmp	r4, #0
 800a094:	d042      	beq.n	800a11c <netif_add+0x114>
      num_netifs = 0;
 800a096:	2500      	movs	r5, #0
 800a098:	e007      	b.n	800a0aa <netif_add+0xa2>
        if (netif2->num == netif->num) {
 800a09a:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 800a09e:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
 800a0a2:	429a      	cmp	r2, r3
 800a0a4:	d014      	beq.n	800a0d0 <netif_add+0xc8>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800a0a6:	6824      	ldr	r4, [r4, #0]
 800a0a8:	b1fc      	cbz	r4, 800a0ea <netif_add+0xe2>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800a0aa:	42b4      	cmp	r4, r6
        num_netifs++;
 800a0ac:	f105 0501 	add.w	r5, r5, #1
        LWIP_ASSERT("netif already added", netif2 != netif);
 800a0b0:	d013      	beq.n	800a0da <netif_add+0xd2>
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800a0b2:	2dff      	cmp	r5, #255	; 0xff
 800a0b4:	ddf1      	ble.n	800a09a <netif_add+0x92>
 800a0b6:	465b      	mov	r3, fp
 800a0b8:	f240 128d 	movw	r2, #397	; 0x18d
 800a0bc:	4925      	ldr	r1, [pc, #148]	; (800a154 <netif_add+0x14c>)
 800a0be:	4638      	mov	r0, r7
 800a0c0:	f007 faa4 	bl	801160c <iprintf>
        if (netif2->num == netif->num) {
 800a0c4:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 800a0c8:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
 800a0cc:	429a      	cmp	r2, r3
 800a0ce:	d1ea      	bne.n	800a0a6 <netif_add+0x9e>
          netif->num++;
 800a0d0:	3201      	adds	r2, #1
 800a0d2:	b2d2      	uxtb	r2, r2
 800a0d4:	f886 2030 	strb.w	r2, [r6, #48]	; 0x30
    } while (netif2 != NULL);
 800a0d8:	e7d4      	b.n	800a084 <netif_add+0x7c>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800a0da:	465b      	mov	r3, fp
 800a0dc:	f240 128b 	movw	r2, #395	; 0x18b
 800a0e0:	4649      	mov	r1, r9
 800a0e2:	4638      	mov	r0, r7
 800a0e4:	f007 fa92 	bl	801160c <iprintf>
 800a0e8:	e7e3      	b.n	800a0b2 <netif_add+0xaa>
  netif->next = netif_list;
 800a0ea:	f8d8 4000 	ldr.w	r4, [r8]
  if (netif->num == 254) {
 800a0ee:	2bfe      	cmp	r3, #254	; 0xfe
 800a0f0:	d012      	beq.n	800a118 <netif_add+0x110>
    netif_num = (u8_t)(netif->num + 1);
 800a0f2:	3301      	adds	r3, #1
 800a0f4:	b2db      	uxtb	r3, r3
  return netif;
 800a0f6:	4630      	mov	r0, r6
  netif->next = netif_list;
 800a0f8:	6034      	str	r4, [r6, #0]
 800a0fa:	f88a 3000 	strb.w	r3, [sl]
  netif_list = netif;
 800a0fe:	f8c8 6000 	str.w	r6, [r8]
}
 800a102:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800a106:	4d14      	ldr	r5, [pc, #80]	; (800a158 <netif_add+0x150>)
  if (gw == NULL) {
 800a108:	2f00      	cmp	r7, #0
 800a10a:	d194      	bne.n	800a036 <netif_add+0x2e>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800a10c:	4f12      	ldr	r7, [pc, #72]	; (800a158 <netif_add+0x150>)
 800a10e:	e792      	b.n	800a036 <netif_add+0x2e>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800a110:	4c11      	ldr	r4, [pc, #68]	; (800a158 <netif_add+0x150>)
  if (netmask == NULL) {
 800a112:	2d00      	cmp	r5, #0
 800a114:	d18d      	bne.n	800a032 <netif_add+0x2a>
 800a116:	e7f6      	b.n	800a106 <netif_add+0xfe>
    netif_num = 0;
 800a118:	2300      	movs	r3, #0
 800a11a:	e7ec      	b.n	800a0f6 <netif_add+0xee>
  if (netif->num == 254) {
 800a11c:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
 800a120:	e7e5      	b.n	800a0ee <netif_add+0xe6>
    return NULL;
 800a122:	4620      	mov	r0, r4
}
 800a124:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800a128:	4b0c      	ldr	r3, [pc, #48]	; (800a15c <netif_add+0x154>)
 800a12a:	f240 1227 	movw	r2, #295	; 0x127
 800a12e:	490c      	ldr	r1, [pc, #48]	; (800a160 <netif_add+0x158>)
 800a130:	4807      	ldr	r0, [pc, #28]	; (800a150 <netif_add+0x148>)
 800a132:	f007 fa6b 	bl	801160c <iprintf>
 800a136:	4630      	mov	r0, r6
 800a138:	e7e3      	b.n	800a102 <netif_add+0xfa>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800a13a:	4b08      	ldr	r3, [pc, #32]	; (800a15c <netif_add+0x154>)
 800a13c:	f44f 7294 	mov.w	r2, #296	; 0x128
 800a140:	4908      	ldr	r1, [pc, #32]	; (800a164 <netif_add+0x15c>)
 800a142:	4803      	ldr	r0, [pc, #12]	; (800a150 <netif_add+0x148>)
 800a144:	f007 fa62 	bl	801160c <iprintf>
 800a148:	4640      	mov	r0, r8
 800a14a:	e7da      	b.n	800a102 <netif_add+0xfa>
 800a14c:	08009ef5 	.word	0x08009ef5
 800a150:	080128dc 	.word	0x080128dc
 800a154:	0801371c 	.word	0x0801371c
 800a158:	08015040 	.word	0x08015040
 800a15c:	08013660 	.word	0x08013660
 800a160:	080136c8 	.word	0x080136c8
 800a164:	080136e4 	.word	0x080136e4
 800a168:	24010574 	.word	0x24010574
 800a16c:	24010570 	.word	0x24010570
 800a170:	08013708 	.word	0x08013708

0800a174 <netif_set_default>:
{
 800a174:	b510      	push	{r4, lr}
 800a176:	4604      	mov	r4, r0
  LWIP_ASSERT_CORE_LOCKED();
 800a178:	f7fc fd80 	bl	8006c7c <sys_check_core_locking>
  netif_default = netif;
 800a17c:	4b01      	ldr	r3, [pc, #4]	; (800a184 <netif_set_default+0x10>)
 800a17e:	601c      	str	r4, [r3, #0]
}
 800a180:	bd10      	pop	{r4, pc}
 800a182:	bf00      	nop
 800a184:	2401056c 	.word	0x2401056c

0800a188 <netif_set_up>:
{
 800a188:	b510      	push	{r4, lr}
 800a18a:	4604      	mov	r4, r0
  LWIP_ASSERT_CORE_LOCKED();
 800a18c:	f7fc fd76 	bl	8006c7c <sys_check_core_locking>
  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800a190:	b174      	cbz	r4, 800a1b0 <netif_set_up+0x28>
  if (!(netif->flags & NETIF_FLAG_UP)) {
 800a192:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 800a196:	07da      	lsls	r2, r3, #31
 800a198:	d500      	bpl.n	800a19c <netif_set_up+0x14>
}
 800a19a:	bd10      	pop	{r4, pc}
    netif_set_flags(netif, NETIF_FLAG_UP);
 800a19c:	f043 0301 	orr.w	r3, r3, #1
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800a1a0:	4620      	mov	r0, r4
 800a1a2:	2103      	movs	r1, #3
    netif_set_flags(netif, NETIF_FLAG_UP);
 800a1a4:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
}
 800a1a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800a1ac:	f7ff bea6 	b.w	8009efc <netif_issue_reports>
  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800a1b0:	4b04      	ldr	r3, [pc, #16]	; (800a1c4 <netif_set_up+0x3c>)
 800a1b2:	f44f 7254 	mov.w	r2, #848	; 0x350
 800a1b6:	4904      	ldr	r1, [pc, #16]	; (800a1c8 <netif_set_up+0x40>)
 800a1b8:	4804      	ldr	r0, [pc, #16]	; (800a1cc <netif_set_up+0x44>)
}
 800a1ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800a1be:	f007 ba25 	b.w	801160c <iprintf>
 800a1c2:	bf00      	nop
 800a1c4:	08013660 	.word	0x08013660
 800a1c8:	0801374c 	.word	0x0801374c
 800a1cc:	080128dc 	.word	0x080128dc

0800a1d0 <netif_set_down>:
{
 800a1d0:	b510      	push	{r4, lr}
 800a1d2:	4604      	mov	r4, r0
  LWIP_ASSERT_CORE_LOCKED();
 800a1d4:	f7fc fd52 	bl	8006c7c <sys_check_core_locking>
  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800a1d8:	b17c      	cbz	r4, 800a1fa <netif_set_down+0x2a>
  if (netif->flags & NETIF_FLAG_UP) {
 800a1da:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 800a1de:	07da      	lsls	r2, r3, #31
 800a1e0:	d505      	bpl.n	800a1ee <netif_set_down+0x1e>
    netif_clear_flags(netif, NETIF_FLAG_UP);
 800a1e2:	f023 0201 	bic.w	r2, r3, #1
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800a1e6:	071b      	lsls	r3, r3, #28
    netif_clear_flags(netif, NETIF_FLAG_UP);
 800a1e8:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800a1ec:	d400      	bmi.n	800a1f0 <netif_set_down+0x20>
}
 800a1ee:	bd10      	pop	{r4, pc}
      etharp_cleanup_netif(netif);
 800a1f0:	4620      	mov	r0, r4
}
 800a1f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      etharp_cleanup_netif(netif);
 800a1f6:	f005 ba3d 	b.w	800f674 <etharp_cleanup_netif>
  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800a1fa:	4b04      	ldr	r3, [pc, #16]	; (800a20c <netif_set_down+0x3c>)
 800a1fc:	f240 329b 	movw	r2, #923	; 0x39b
 800a200:	4903      	ldr	r1, [pc, #12]	; (800a210 <netif_set_down+0x40>)
 800a202:	4804      	ldr	r0, [pc, #16]	; (800a214 <netif_set_down+0x44>)
}
 800a204:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800a208:	f007 ba00 	b.w	801160c <iprintf>
 800a20c:	08013660 	.word	0x08013660
 800a210:	08013768 	.word	0x08013768
 800a214:	080128dc 	.word	0x080128dc

0800a218 <netif_set_link_up>:
{
 800a218:	b510      	push	{r4, lr}
 800a21a:	4604      	mov	r4, r0
  LWIP_ASSERT_CORE_LOCKED();
 800a21c:	f7fc fd2e 	bl	8006c7c <sys_check_core_locking>
  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800a220:	b19c      	cbz	r4, 800a24a <netif_set_link_up+0x32>
  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800a222:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 800a226:	075a      	lsls	r2, r3, #29
 800a228:	d500      	bpl.n	800a22c <netif_set_link_up+0x14>
}
 800a22a:	bd10      	pop	{r4, pc}
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800a22c:	f043 0304 	orr.w	r3, r3, #4
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800a230:	2103      	movs	r1, #3
 800a232:	4620      	mov	r0, r4
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800a234:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800a238:	f7ff fe60 	bl	8009efc <netif_issue_reports>
    NETIF_LINK_CALLBACK(netif);
 800a23c:	69e3      	ldr	r3, [r4, #28]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d0f3      	beq.n	800a22a <netif_set_link_up+0x12>
 800a242:	4620      	mov	r0, r4
}
 800a244:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    NETIF_LINK_CALLBACK(netif);
 800a248:	4718      	bx	r3
  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800a24a:	4b04      	ldr	r3, [pc, #16]	; (800a25c <netif_set_link_up+0x44>)
 800a24c:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800a250:	4903      	ldr	r1, [pc, #12]	; (800a260 <netif_set_link_up+0x48>)
 800a252:	4804      	ldr	r0, [pc, #16]	; (800a264 <netif_set_link_up+0x4c>)
}
 800a254:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800a258:	f007 b9d8 	b.w	801160c <iprintf>
 800a25c:	08013660 	.word	0x08013660
 800a260:	08013788 	.word	0x08013788
 800a264:	080128dc 	.word	0x080128dc

0800a268 <netif_set_link_down>:
{
 800a268:	b510      	push	{r4, lr}
 800a26a:	4604      	mov	r4, r0
  LWIP_ASSERT_CORE_LOCKED();
 800a26c:	f7fc fd06 	bl	8006c7c <sys_check_core_locking>
  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800a270:	b174      	cbz	r4, 800a290 <netif_set_link_down+0x28>
  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800a272:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 800a276:	075a      	lsls	r2, r3, #29
 800a278:	d509      	bpl.n	800a28e <netif_set_link_down+0x26>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800a27a:	f023 0304 	bic.w	r3, r3, #4
    NETIF_LINK_CALLBACK(netif);
 800a27e:	69e2      	ldr	r2, [r4, #28]
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800a280:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 800a284:	b11a      	cbz	r2, 800a28e <netif_set_link_down+0x26>
 800a286:	4620      	mov	r0, r4
}
 800a288:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    NETIF_LINK_CALLBACK(netif);
 800a28c:	4710      	bx	r2
}
 800a28e:	bd10      	pop	{r4, pc}
  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800a290:	4b04      	ldr	r3, [pc, #16]	; (800a2a4 <netif_set_link_down+0x3c>)
 800a292:	f240 4206 	movw	r2, #1030	; 0x406
 800a296:	4904      	ldr	r1, [pc, #16]	; (800a2a8 <netif_set_link_down+0x40>)
 800a298:	4804      	ldr	r0, [pc, #16]	; (800a2ac <netif_set_link_down+0x44>)
}
 800a29a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800a29e:	f007 b9b5 	b.w	801160c <iprintf>
 800a2a2:	bf00      	nop
 800a2a4:	08013660 	.word	0x08013660
 800a2a8:	080137ac 	.word	0x080137ac
 800a2ac:	080128dc 	.word	0x080128dc

0800a2b0 <netif_set_link_callback>:
{
 800a2b0:	b538      	push	{r3, r4, r5, lr}
 800a2b2:	4604      	mov	r4, r0
 800a2b4:	460d      	mov	r5, r1
  LWIP_ASSERT_CORE_LOCKED();
 800a2b6:	f7fc fce1 	bl	8006c7c <sys_check_core_locking>
  if (netif) {
 800a2ba:	b104      	cbz	r4, 800a2be <netif_set_link_callback+0xe>
    netif->link_callback = link_callback;
 800a2bc:	61e5      	str	r5, [r4, #28]
}
 800a2be:	bd38      	pop	{r3, r4, r5, pc}

0800a2c0 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800a2c0:	b510      	push	{r4, lr}
 800a2c2:	4604      	mov	r4, r0
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();
 800a2c4:	f7fc fcda 	bl	8006c7c <sys_check_core_locking>

  if (idx != NETIF_NO_INDEX) {
 800a2c8:	b164      	cbz	r4, 800a2e4 <netif_get_by_index+0x24>
    NETIF_FOREACH(netif) {
 800a2ca:	4b07      	ldr	r3, [pc, #28]	; (800a2e8 <netif_get_by_index+0x28>)
 800a2cc:	6818      	ldr	r0, [r3, #0]
 800a2ce:	b910      	cbnz	r0, 800a2d6 <netif_get_by_index+0x16>
 800a2d0:	e007      	b.n	800a2e2 <netif_get_by_index+0x22>
 800a2d2:	6800      	ldr	r0, [r0, #0]
 800a2d4:	b128      	cbz	r0, 800a2e2 <netif_get_by_index+0x22>
      if (idx == netif_get_index(netif)) {
 800a2d6:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 800a2da:	3301      	adds	r3, #1
 800a2dc:	b2db      	uxtb	r3, r3
 800a2de:	42a3      	cmp	r3, r4
 800a2e0:	d1f7      	bne.n	800a2d2 <netif_get_by_index+0x12>
      }
    }
  }

  return NULL;
}
 800a2e2:	bd10      	pop	{r4, pc}
  return NULL;
 800a2e4:	4620      	mov	r0, r4
}
 800a2e6:	bd10      	pop	{r4, pc}
 800a2e8:	24010570 	.word	0x24010570

0800a2ec <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800a2ec:	b508      	push	{r3, lr}
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800a2ee:	f006 fc39 	bl	8010b64 <sys_arch_protect>
 800a2f2:	4b09      	ldr	r3, [pc, #36]	; (800a318 <pbuf_free_ooseq_callback+0x2c>)
 800a2f4:	2200      	movs	r2, #0
 800a2f6:	701a      	strb	r2, [r3, #0]
 800a2f8:	f006 fc40 	bl	8010b7c <sys_arch_unprotect>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800a2fc:	4b07      	ldr	r3, [pc, #28]	; (800a31c <pbuf_free_ooseq_callback+0x30>)
 800a2fe:	6818      	ldr	r0, [r3, #0]
 800a300:	b910      	cbnz	r0, 800a308 <pbuf_free_ooseq_callback+0x1c>
 800a302:	e008      	b.n	800a316 <pbuf_free_ooseq_callback+0x2a>
 800a304:	68c0      	ldr	r0, [r0, #12]
 800a306:	b130      	cbz	r0, 800a316 <pbuf_free_ooseq_callback+0x2a>
    if (pcb->ooseq != NULL) {
 800a308:	6f43      	ldr	r3, [r0, #116]	; 0x74
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d0fa      	beq.n	800a304 <pbuf_free_ooseq_callback+0x18>
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
}
 800a30e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      tcp_free_ooseq(pcb);
 800a312:	f001 bf39 	b.w	800c188 <tcp_free_ooseq>
}
 800a316:	bd08      	pop	{r3, pc}
 800a318:	24010575 	.word	0x24010575
 800a31c:	24010578 	.word	0x24010578

0800a320 <pbuf_copy.part.0>:
 * @return ERR_OK if pbuf was copied
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
 800a320:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
{
  size_t offset_to = 0, offset_from = 0, len;
 800a324:	2600      	movs	r6, #0
      len = p_to->len - offset_to;
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
    offset_to += len;
    offset_from += len;
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800a326:	f8df a124 	ldr.w	sl, [pc, #292]	; 800a44c <pbuf_copy.part.0+0x12c>
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
 800a32a:	4605      	mov	r5, r0
 800a32c:	4688      	mov	r8, r1
  size_t offset_to = 0, offset_from = 0, len;
 800a32e:	4637      	mov	r7, r6
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800a330:	8944      	ldrh	r4, [r0, #10]
 800a332:	894b      	ldrh	r3, [r1, #10]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800a334:	f8df b128 	ldr.w	fp, [pc, #296]	; 800a460 <pbuf_copy.part.0+0x140>
 800a338:	f8df 9118 	ldr.w	r9, [pc, #280]	; 800a454 <pbuf_copy.part.0+0x134>
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800a33c:	1be4      	subs	r4, r4, r7
 800a33e:	1b9b      	subs	r3, r3, r6
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800a340:	6868      	ldr	r0, [r5, #4]
 800a342:	429c      	cmp	r4, r3
 800a344:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a348:	4438      	add	r0, r7
 800a34a:	bf28      	it	cs
 800a34c:	461c      	movcs	r4, r3
 800a34e:	4431      	add	r1, r6
 800a350:	4622      	mov	r2, r4
    offset_to += len;
 800a352:	4427      	add	r7, r4
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800a354:	f007 fbe2 	bl	8011b1c <memcpy>
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800a358:	896b      	ldrh	r3, [r5, #10]
    offset_from += len;
 800a35a:	4426      	add	r6, r4
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800a35c:	429f      	cmp	r7, r3
 800a35e:	d838      	bhi.n	800a3d2 <pbuf_copy.part.0+0xb2>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800a360:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 800a364:	429e      	cmp	r6, r3
 800a366:	d82a      	bhi.n	800a3be <pbuf_copy.part.0+0x9e>
    if (offset_from >= p_from->len) {
 800a368:	429e      	cmp	r6, r3
 800a36a:	d318      	bcc.n	800a39e <pbuf_copy.part.0+0x7e>
      /* on to next p_from (if any) */
      offset_from = 0;
      p_from = p_from->next;
    }
    if (offset_to == p_to->len) {
 800a36c:	896b      	ldrh	r3, [r5, #10]
      p_from = p_from->next;
 800a36e:	f8d8 8000 	ldr.w	r8, [r8]
    if (offset_to == p_to->len) {
 800a372:	429f      	cmp	r7, r3
 800a374:	d04c      	beq.n	800a410 <pbuf_copy.part.0+0xf0>
      offset_to = 0;
      p_to = p_to->next;
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800a376:	f1b8 0f00 	cmp.w	r8, #0
 800a37a:	d145      	bne.n	800a408 <pbuf_copy.part.0+0xe8>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800a37c:	892a      	ldrh	r2, [r5, #8]
 800a37e:	896b      	ldrh	r3, [r5, #10]
 800a380:	429a      	cmp	r2, r3
 800a382:	d14d      	bne.n	800a420 <pbuf_copy.part.0+0x100>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800a384:	6828      	ldr	r0, [r5, #0]
 800a386:	b140      	cbz	r0, 800a39a <pbuf_copy.part.0+0x7a>
 800a388:	4b30      	ldr	r3, [pc, #192]	; (800a44c <pbuf_copy.part.0+0x12c>)
 800a38a:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800a38e:	4930      	ldr	r1, [pc, #192]	; (800a450 <pbuf_copy.part.0+0x130>)
 800a390:	4830      	ldr	r0, [pc, #192]	; (800a454 <pbuf_copy.part.0+0x134>)
 800a392:	f007 f93b 	bl	801160c <iprintf>
 800a396:	f06f 0005 	mvn.w	r0, #5
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
}
 800a39a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (offset_to == p_to->len) {
 800a39e:	896a      	ldrh	r2, [r5, #10]
 800a3a0:	4297      	cmp	r7, r2
 800a3a2:	d040      	beq.n	800a426 <pbuf_copy.part.0+0x106>
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800a3a4:	f8b8 2008 	ldrh.w	r2, [r8, #8]
 800a3a8:	429a      	cmp	r2, r3
 800a3aa:	d01a      	beq.n	800a3e2 <pbuf_copy.part.0+0xc2>
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800a3ac:	896c      	ldrh	r4, [r5, #10]
 800a3ae:	2d00      	cmp	r5, #0
 800a3b0:	d0c4      	beq.n	800a33c <pbuf_copy.part.0+0x1c>
 800a3b2:	892b      	ldrh	r3, [r5, #8]
 800a3b4:	42a3      	cmp	r3, r4
 800a3b6:	d045      	beq.n	800a444 <pbuf_copy.part.0+0x124>
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800a3b8:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 800a3bc:	e7be      	b.n	800a33c <pbuf_copy.part.0+0x1c>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800a3be:	4653      	mov	r3, sl
 800a3c0:	f240 32da 	movw	r2, #986	; 0x3da
 800a3c4:	4924      	ldr	r1, [pc, #144]	; (800a458 <pbuf_copy.part.0+0x138>)
 800a3c6:	4648      	mov	r0, r9
 800a3c8:	f007 f920 	bl	801160c <iprintf>
    if (offset_from >= p_from->len) {
 800a3cc:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 800a3d0:	e7ca      	b.n	800a368 <pbuf_copy.part.0+0x48>
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800a3d2:	4653      	mov	r3, sl
 800a3d4:	f240 32d9 	movw	r2, #985	; 0x3d9
 800a3d8:	4659      	mov	r1, fp
 800a3da:	4648      	mov	r0, r9
 800a3dc:	f007 f916 	bl	801160c <iprintf>
 800a3e0:	e7be      	b.n	800a360 <pbuf_copy.part.0+0x40>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800a3e2:	f8d8 2000 	ldr.w	r2, [r8]
 800a3e6:	2a00      	cmp	r2, #0
 800a3e8:	d0e0      	beq.n	800a3ac <pbuf_copy.part.0+0x8c>
 800a3ea:	4b18      	ldr	r3, [pc, #96]	; (800a44c <pbuf_copy.part.0+0x12c>)
 800a3ec:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800a3f0:	4917      	ldr	r1, [pc, #92]	; (800a450 <pbuf_copy.part.0+0x130>)
 800a3f2:	4818      	ldr	r0, [pc, #96]	; (800a454 <pbuf_copy.part.0+0x134>)
 800a3f4:	f007 f90a 	bl	801160c <iprintf>
 800a3f8:	f06f 0005 	mvn.w	r0, #5
}
 800a3fc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800a400:	f1b8 0f00 	cmp.w	r8, #0
 800a404:	d00a      	beq.n	800a41c <pbuf_copy.part.0+0xfc>
      offset_to = 0;
 800a406:	2700      	movs	r7, #0
 800a408:	2600      	movs	r6, #0
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800a40a:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 800a40e:	e7c9      	b.n	800a3a4 <pbuf_copy.part.0+0x84>
      p_to = p_to->next;
 800a410:	682d      	ldr	r5, [r5, #0]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800a412:	2d00      	cmp	r5, #0
 800a414:	d1f4      	bne.n	800a400 <pbuf_copy.part.0+0xe0>
 800a416:	f1b8 0f00 	cmp.w	r8, #0
 800a41a:	d108      	bne.n	800a42e <pbuf_copy.part.0+0x10e>
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800a41c:	2d00      	cmp	r5, #0
 800a41e:	d1ad      	bne.n	800a37c <pbuf_copy.part.0+0x5c>
  return ERR_OK;
 800a420:	2000      	movs	r0, #0
}
 800a422:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      p_to = p_to->next;
 800a426:	682d      	ldr	r5, [r5, #0]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800a428:	b10d      	cbz	r5, 800a42e <pbuf_copy.part.0+0x10e>
      offset_to = 0;
 800a42a:	2700      	movs	r7, #0
 800a42c:	e7ed      	b.n	800a40a <pbuf_copy.part.0+0xea>
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800a42e:	4b07      	ldr	r3, [pc, #28]	; (800a44c <pbuf_copy.part.0+0x12c>)
 800a430:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800a434:	4909      	ldr	r1, [pc, #36]	; (800a45c <pbuf_copy.part.0+0x13c>)
 800a436:	4807      	ldr	r0, [pc, #28]	; (800a454 <pbuf_copy.part.0+0x134>)
 800a438:	f007 f8e8 	bl	801160c <iprintf>
 800a43c:	f06f 000f 	mvn.w	r0, #15
}
 800a440:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800a444:	682b      	ldr	r3, [r5, #0]
 800a446:	2b00      	cmp	r3, #0
 800a448:	d0b6      	beq.n	800a3b8 <pbuf_copy.part.0+0x98>
 800a44a:	e79d      	b.n	800a388 <pbuf_copy.part.0+0x68>
 800a44c:	080137d0 	.word	0x080137d0
 800a450:	08013844 	.word	0x08013844
 800a454:	080128dc 	.word	0x080128dc
 800a458:	08013818 	.word	0x08013818
 800a45c:	08013834 	.word	0x08013834
 800a460:	08013800 	.word	0x08013800

0800a464 <pbuf_alloc_reference>:
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800a464:	f022 0340 	bic.w	r3, r2, #64	; 0x40
 800a468:	2b01      	cmp	r3, #1
{
 800a46a:	b570      	push	{r4, r5, r6, lr}
 800a46c:	4614      	mov	r4, r2
 800a46e:	4606      	mov	r6, r0
 800a470:	460d      	mov	r5, r1
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800a472:	d10d      	bne.n	800a490 <pbuf_alloc_reference+0x2c>
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800a474:	200b      	movs	r0, #11
 800a476:	f7ff fcc9 	bl	8009e0c <memp_malloc>
  if (p == NULL) {
 800a47a:	b140      	cbz	r0, 800a48e <pbuf_alloc_reference+0x2a>
  p->next = NULL;
 800a47c:	2300      	movs	r3, #0
  p->ref = 1;
 800a47e:	2201      	movs	r2, #1
  p->payload = payload;
 800a480:	6046      	str	r6, [r0, #4]
  p->tot_len = tot_len;
 800a482:	8105      	strh	r5, [r0, #8]
  p->next = NULL;
 800a484:	6003      	str	r3, [r0, #0]
  p->len = len;
 800a486:	8145      	strh	r5, [r0, #10]
  p->type_internal = (u8_t)type;
 800a488:	7304      	strb	r4, [r0, #12]
  p->flags = flags;
 800a48a:	7343      	strb	r3, [r0, #13]
  p->ref = 1;
 800a48c:	81c2      	strh	r2, [r0, #14]
}
 800a48e:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800a490:	4b03      	ldr	r3, [pc, #12]	; (800a4a0 <pbuf_alloc_reference+0x3c>)
 800a492:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800a496:	4903      	ldr	r1, [pc, #12]	; (800a4a4 <pbuf_alloc_reference+0x40>)
 800a498:	4803      	ldr	r0, [pc, #12]	; (800a4a8 <pbuf_alloc_reference+0x44>)
 800a49a:	f007 f8b7 	bl	801160c <iprintf>
 800a49e:	e7e9      	b.n	800a474 <pbuf_alloc_reference+0x10>
 800a4a0:	080137d0 	.word	0x080137d0
 800a4a4:	08013870 	.word	0x08013870
 800a4a8:	080128dc 	.word	0x080128dc

0800a4ac <pbuf_alloced_custom>:
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800a4ac:	3003      	adds	r0, #3
 800a4ae:	f020 0003 	bic.w	r0, r0, #3
{
 800a4b2:	b510      	push	{r4, lr}
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800a4b4:	eb01 0e00 	add.w	lr, r1, r0
{
 800a4b8:	f8bd c00c 	ldrh.w	ip, [sp, #12]
 800a4bc:	9c02      	ldr	r4, [sp, #8]
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800a4be:	45e6      	cmp	lr, ip
 800a4c0:	d80d      	bhi.n	800a4de <pbuf_alloced_custom+0x32>
  if (payload_mem != NULL) {
 800a4c2:	b104      	cbz	r4, 800a4c6 <pbuf_alloced_custom+0x1a>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800a4c4:	4404      	add	r4, r0
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800a4c6:	4618      	mov	r0, r3
  p->next = NULL;
 800a4c8:	2300      	movs	r3, #0
  p->payload = payload;
 800a4ca:	6044      	str	r4, [r0, #4]
  p->flags = flags;
 800a4cc:	2402      	movs	r4, #2
  p->next = NULL;
 800a4ce:	6003      	str	r3, [r0, #0]
  p->ref = 1;
 800a4d0:	2301      	movs	r3, #1
  p->tot_len = tot_len;
 800a4d2:	8101      	strh	r1, [r0, #8]
  p->len = len;
 800a4d4:	8141      	strh	r1, [r0, #10]
  p->type_internal = (u8_t)type;
 800a4d6:	7302      	strb	r2, [r0, #12]
  p->flags = flags;
 800a4d8:	7344      	strb	r4, [r0, #13]
  p->ref = 1;
 800a4da:	81c3      	strh	r3, [r0, #14]
}
 800a4dc:	bd10      	pop	{r4, pc}
    return NULL;
 800a4de:	2000      	movs	r0, #0
}
 800a4e0:	bd10      	pop	{r4, pc}
 800a4e2:	bf00      	nop

0800a4e4 <pbuf_add_header>:
{
 800a4e4:	b508      	push	{r3, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
 800a4e6:	b310      	cbz	r0, 800a52e <pbuf_add_header+0x4a>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800a4e8:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 800a4ec:	d20c      	bcs.n	800a508 <pbuf_add_header+0x24>
  if (header_size_increment == 0) {
 800a4ee:	b169      	cbz	r1, 800a50c <pbuf_add_header+0x28>
  increment_magnitude = (u16_t)header_size_increment;
 800a4f0:	fa1f fc81 	uxth.w	ip, r1
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800a4f4:	8902      	ldrh	r2, [r0, #8]
 800a4f6:	4603      	mov	r3, r0
 800a4f8:	4462      	add	r2, ip
 800a4fa:	b292      	uxth	r2, r2
 800a4fc:	4594      	cmp	ip, r2
 800a4fe:	d803      	bhi.n	800a508 <pbuf_add_header+0x24>
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800a500:	f990 000c 	ldrsb.w	r0, [r0, #12]
 800a504:	2800      	cmp	r0, #0
 800a506:	db03      	blt.n	800a510 <pbuf_add_header+0x2c>
    return 1;
 800a508:	2001      	movs	r0, #1
}
 800a50a:	bd08      	pop	{r3, pc}
    return 0;
 800a50c:	4608      	mov	r0, r1
}
 800a50e:	bd08      	pop	{r3, pc}
    payload = (u8_t *)p->payload - header_size_increment;
 800a510:	6858      	ldr	r0, [r3, #4]
 800a512:	1a41      	subs	r1, r0, r1
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800a514:	f103 0010 	add.w	r0, r3, #16
 800a518:	4281      	cmp	r1, r0
 800a51a:	d3f5      	bcc.n	800a508 <pbuf_add_header+0x24>
  p->len = (u16_t)(p->len + increment_magnitude);
 800a51c:	f8b3 e00a 	ldrh.w	lr, [r3, #10]
  return 0;
 800a520:	2000      	movs	r0, #0
  p->payload = payload;
 800a522:	6059      	str	r1, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800a524:	44f4      	add	ip, lr
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800a526:	811a      	strh	r2, [r3, #8]
  p->len = (u16_t)(p->len + increment_magnitude);
 800a528:	f8a3 c00a 	strh.w	ip, [r3, #10]
}
 800a52c:	bd08      	pop	{r3, pc}
  LWIP_ASSERT("p != NULL", p != NULL);
 800a52e:	4b04      	ldr	r3, [pc, #16]	; (800a540 <pbuf_add_header+0x5c>)
 800a530:	f240 12df 	movw	r2, #479	; 0x1df
 800a534:	4903      	ldr	r1, [pc, #12]	; (800a544 <pbuf_add_header+0x60>)
 800a536:	4804      	ldr	r0, [pc, #16]	; (800a548 <pbuf_add_header+0x64>)
 800a538:	f007 f868 	bl	801160c <iprintf>
    return 1;
 800a53c:	2001      	movs	r0, #1
}
 800a53e:	bd08      	pop	{r3, pc}
 800a540:	080137d0 	.word	0x080137d0
 800a544:	080129cc 	.word	0x080129cc
 800a548:	080128dc 	.word	0x080128dc

0800a54c <pbuf_remove_header>:
{
 800a54c:	b510      	push	{r4, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
 800a54e:	b1a0      	cbz	r0, 800a57a <pbuf_remove_header+0x2e>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800a550:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 800a554:	d21a      	bcs.n	800a58c <pbuf_remove_header+0x40>
  if (header_size_decrement == 0) {
 800a556:	b171      	cbz	r1, 800a576 <pbuf_remove_header+0x2a>
 800a558:	4603      	mov	r3, r0
  increment_magnitude = (u16_t)header_size_decrement;
 800a55a:	b288      	uxth	r0, r1
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800a55c:	895a      	ldrh	r2, [r3, #10]
 800a55e:	4290      	cmp	r0, r2
 800a560:	d816      	bhi.n	800a590 <pbuf_remove_header+0x44>
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800a562:	685c      	ldr	r4, [r3, #4]
  p->len = (u16_t)(p->len - increment_magnitude);
 800a564:	1a12      	subs	r2, r2, r0
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800a566:	440c      	add	r4, r1
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800a568:	8919      	ldrh	r1, [r3, #8]
  p->len = (u16_t)(p->len - increment_magnitude);
 800a56a:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800a56c:	1a0a      	subs	r2, r1, r0
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800a56e:	605c      	str	r4, [r3, #4]
  return 0;
 800a570:	2000      	movs	r0, #0
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800a572:	811a      	strh	r2, [r3, #8]
}
 800a574:	bd10      	pop	{r4, pc}
    return 0;
 800a576:	4608      	mov	r0, r1
}
 800a578:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("p != NULL", p != NULL);
 800a57a:	4b0a      	ldr	r3, [pc, #40]	; (800a5a4 <pbuf_remove_header+0x58>)
 800a57c:	f240 224b 	movw	r2, #587	; 0x24b
 800a580:	4909      	ldr	r1, [pc, #36]	; (800a5a8 <pbuf_remove_header+0x5c>)
 800a582:	480a      	ldr	r0, [pc, #40]	; (800a5ac <pbuf_remove_header+0x60>)
 800a584:	f007 f842 	bl	801160c <iprintf>
    return 1;
 800a588:	2001      	movs	r0, #1
}
 800a58a:	bd10      	pop	{r4, pc}
    return 1;
 800a58c:	2001      	movs	r0, #1
}
 800a58e:	bd10      	pop	{r4, pc}
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800a590:	4b04      	ldr	r3, [pc, #16]	; (800a5a4 <pbuf_remove_header+0x58>)
 800a592:	f240 2255 	movw	r2, #597	; 0x255
 800a596:	4906      	ldr	r1, [pc, #24]	; (800a5b0 <pbuf_remove_header+0x64>)
 800a598:	4804      	ldr	r0, [pc, #16]	; (800a5ac <pbuf_remove_header+0x60>)
 800a59a:	f007 f837 	bl	801160c <iprintf>
 800a59e:	2001      	movs	r0, #1
}
 800a5a0:	bd10      	pop	{r4, pc}
 800a5a2:	bf00      	nop
 800a5a4:	080137d0 	.word	0x080137d0
 800a5a8:	080129cc 	.word	0x080129cc
 800a5ac:	080128dc 	.word	0x080128dc
 800a5b0:	08013884 	.word	0x08013884

0800a5b4 <pbuf_header_force>:
  if (header_size_increment < 0) {
 800a5b4:	2900      	cmp	r1, #0
 800a5b6:	db1a      	blt.n	800a5ee <pbuf_header_force+0x3a>
{
 800a5b8:	b508      	push	{r3, lr}
 800a5ba:	4603      	mov	r3, r0
  LWIP_ASSERT("p != NULL", p != NULL);
 800a5bc:	b1d0      	cbz	r0, 800a5f4 <pbuf_header_force+0x40>
  if (header_size_increment == 0) {
 800a5be:	b341      	cbz	r1, 800a612 <pbuf_header_force+0x5e>
  increment_magnitude = (u16_t)header_size_increment;
 800a5c0:	fa1f fc81 	uxth.w	ip, r1
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800a5c4:	891a      	ldrh	r2, [r3, #8]
 800a5c6:	4462      	add	r2, ip
 800a5c8:	b292      	uxth	r2, r2
 800a5ca:	4594      	cmp	ip, r2
 800a5cc:	d81f      	bhi.n	800a60e <pbuf_header_force+0x5a>
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800a5ce:	f993 000c 	ldrsb.w	r0, [r3, #12]
 800a5d2:	2800      	cmp	r0, #0
    payload = (u8_t *)p->payload - header_size_increment;
 800a5d4:	6858      	ldr	r0, [r3, #4]
 800a5d6:	eba0 0101 	sub.w	r1, r0, r1
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800a5da:	db14      	blt.n	800a606 <pbuf_header_force+0x52>
  p->len = (u16_t)(p->len + increment_magnitude);
 800a5dc:	f8b3 e00a 	ldrh.w	lr, [r3, #10]
  return 0;
 800a5e0:	2000      	movs	r0, #0
  p->payload = payload;
 800a5e2:	6059      	str	r1, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800a5e4:	44f4      	add	ip, lr
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800a5e6:	811a      	strh	r2, [r3, #8]
  p->len = (u16_t)(p->len + increment_magnitude);
 800a5e8:	f8a3 c00a 	strh.w	ip, [r3, #10]
}
 800a5ec:	bd08      	pop	{r3, pc}
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800a5ee:	4249      	negs	r1, r1
 800a5f0:	f7ff bfac 	b.w	800a54c <pbuf_remove_header>
  LWIP_ASSERT("p != NULL", p != NULL);
 800a5f4:	4b08      	ldr	r3, [pc, #32]	; (800a618 <pbuf_header_force+0x64>)
 800a5f6:	f240 12df 	movw	r2, #479	; 0x1df
 800a5fa:	4908      	ldr	r1, [pc, #32]	; (800a61c <pbuf_header_force+0x68>)
 800a5fc:	4808      	ldr	r0, [pc, #32]	; (800a620 <pbuf_header_force+0x6c>)
 800a5fe:	f007 f805 	bl	801160c <iprintf>
    return 1;
 800a602:	2001      	movs	r0, #1
}
 800a604:	bd08      	pop	{r3, pc}
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800a606:	f103 0010 	add.w	r0, r3, #16
 800a60a:	4281      	cmp	r1, r0
 800a60c:	d2e6      	bcs.n	800a5dc <pbuf_header_force+0x28>
    return 1;
 800a60e:	2001      	movs	r0, #1
}
 800a610:	bd08      	pop	{r3, pc}
    return 0;
 800a612:	4608      	mov	r0, r1
}
 800a614:	bd08      	pop	{r3, pc}
 800a616:	bf00      	nop
 800a618:	080137d0 	.word	0x080137d0
 800a61c:	080129cc 	.word	0x080129cc
 800a620:	080128dc 	.word	0x080128dc

0800a624 <pbuf_free>:
{
 800a624:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (p == NULL) {
 800a628:	4605      	mov	r5, r0
 800a62a:	2800      	cmp	r0, #0
 800a62c:	d055      	beq.n	800a6da <pbuf_free+0xb6>
  count = 0;
 800a62e:	2600      	movs	r6, #0
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800a630:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 800a6f8 <pbuf_free+0xd4>
 800a634:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 800a700 <pbuf_free+0xdc>
 800a638:	4f2c      	ldr	r7, [pc, #176]	; (800a6ec <pbuf_free+0xc8>)
 800a63a:	e008      	b.n	800a64e <pbuf_free+0x2a>
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800a63c:	692b      	ldr	r3, [r5, #16]
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d03d      	beq.n	800a6be <pbuf_free+0x9a>
        pc->custom_free_function(p);
 800a642:	4628      	mov	r0, r5
 800a644:	4798      	blx	r3
      count++;
 800a646:	3601      	adds	r6, #1
 800a648:	b2f6      	uxtb	r6, r6
  while (p != NULL) {
 800a64a:	b1fc      	cbz	r4, 800a68c <pbuf_free+0x68>
 800a64c:	4625      	mov	r5, r4
    SYS_ARCH_PROTECT(old_level);
 800a64e:	f006 fa89 	bl	8010b64 <sys_arch_protect>
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800a652:	7bab      	ldrb	r3, [r5, #14]
    SYS_ARCH_PROTECT(old_level);
 800a654:	4604      	mov	r4, r0
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800a656:	b1e3      	cbz	r3, 800a692 <pbuf_free+0x6e>
    ref = --(p->ref);
 800a658:	3b01      	subs	r3, #1
    SYS_ARCH_UNPROTECT(old_level);
 800a65a:	4620      	mov	r0, r4
    ref = --(p->ref);
 800a65c:	b2dc      	uxtb	r4, r3
 800a65e:	73ac      	strb	r4, [r5, #14]
    SYS_ARCH_UNPROTECT(old_level);
 800a660:	f006 fa8c 	bl	8010b7c <sys_arch_unprotect>
    if (ref == 0) {
 800a664:	b994      	cbnz	r4, 800a68c <pbuf_free+0x68>
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800a666:	7b6a      	ldrb	r2, [r5, #13]
      q = p->next;
 800a668:	682c      	ldr	r4, [r5, #0]
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800a66a:	0792      	lsls	r2, r2, #30
      alloc_src = pbuf_get_allocsrc(p);
 800a66c:	7b2b      	ldrb	r3, [r5, #12]
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800a66e:	d4e5      	bmi.n	800a63c <pbuf_free+0x18>
      alloc_src = pbuf_get_allocsrc(p);
 800a670:	f003 030f 	and.w	r3, r3, #15
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800a674:	2b02      	cmp	r3, #2
 800a676:	d01d      	beq.n	800a6b4 <pbuf_free+0x90>
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800a678:	2b01      	cmp	r3, #1
 800a67a:	d029      	beq.n	800a6d0 <pbuf_free+0xac>
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800a67c:	b993      	cbnz	r3, 800a6a4 <pbuf_free+0x80>
      count++;
 800a67e:	3601      	adds	r6, #1
          mem_free(p);
 800a680:	4628      	mov	r0, r5
 800a682:	f7ff f8eb 	bl	800985c <mem_free>
      count++;
 800a686:	b2f6      	uxtb	r6, r6
  while (p != NULL) {
 800a688:	2c00      	cmp	r4, #0
 800a68a:	d1df      	bne.n	800a64c <pbuf_free+0x28>
}
 800a68c:	4630      	mov	r0, r6
 800a68e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800a692:	4643      	mov	r3, r8
 800a694:	f240 22f1 	movw	r2, #753	; 0x2f1
 800a698:	4649      	mov	r1, r9
 800a69a:	4638      	mov	r0, r7
 800a69c:	f006 ffb6 	bl	801160c <iprintf>
    ref = --(p->ref);
 800a6a0:	7bab      	ldrb	r3, [r5, #14]
 800a6a2:	e7d9      	b.n	800a658 <pbuf_free+0x34>
          LWIP_ASSERT("invalid pbuf type", 0);
 800a6a4:	4643      	mov	r3, r8
 800a6a6:	f240 320f 	movw	r2, #783	; 0x30f
 800a6aa:	4911      	ldr	r1, [pc, #68]	; (800a6f0 <pbuf_free+0xcc>)
 800a6ac:	4638      	mov	r0, r7
 800a6ae:	f006 ffad 	bl	801160c <iprintf>
 800a6b2:	e7c8      	b.n	800a646 <pbuf_free+0x22>
          memp_free(MEMP_PBUF_POOL, p);
 800a6b4:	4629      	mov	r1, r5
 800a6b6:	200c      	movs	r0, #12
 800a6b8:	f7ff fbee 	bl	8009e98 <memp_free>
 800a6bc:	e7c3      	b.n	800a646 <pbuf_free+0x22>
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800a6be:	4643      	mov	r3, r8
 800a6c0:	f240 22ff 	movw	r2, #767	; 0x2ff
 800a6c4:	490b      	ldr	r1, [pc, #44]	; (800a6f4 <pbuf_free+0xd0>)
 800a6c6:	4638      	mov	r0, r7
 800a6c8:	f006 ffa0 	bl	801160c <iprintf>
        pc->custom_free_function(p);
 800a6cc:	692b      	ldr	r3, [r5, #16]
 800a6ce:	e7b8      	b.n	800a642 <pbuf_free+0x1e>
          memp_free(MEMP_PBUF, p);
 800a6d0:	4629      	mov	r1, r5
 800a6d2:	200b      	movs	r0, #11
 800a6d4:	f7ff fbe0 	bl	8009e98 <memp_free>
 800a6d8:	e7b5      	b.n	800a646 <pbuf_free+0x22>
    LWIP_ASSERT("p != NULL", p != NULL);
 800a6da:	4b07      	ldr	r3, [pc, #28]	; (800a6f8 <pbuf_free+0xd4>)
 800a6dc:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800a6e0:	4906      	ldr	r1, [pc, #24]	; (800a6fc <pbuf_free+0xd8>)
    return 0;
 800a6e2:	462e      	mov	r6, r5
    LWIP_ASSERT("p != NULL", p != NULL);
 800a6e4:	4801      	ldr	r0, [pc, #4]	; (800a6ec <pbuf_free+0xc8>)
 800a6e6:	f006 ff91 	bl	801160c <iprintf>
    return 0;
 800a6ea:	e7cf      	b.n	800a68c <pbuf_free+0x68>
 800a6ec:	080128dc 	.word	0x080128dc
 800a6f0:	080138e0 	.word	0x080138e0
 800a6f4:	080138bc 	.word	0x080138bc
 800a6f8:	080137d0 	.word	0x080137d0
 800a6fc:	080129cc 	.word	0x080129cc
 800a700:	080138a4 	.word	0x080138a4

0800a704 <pbuf_alloc>:
  switch (type) {
 800a704:	f5b2 7fc1 	cmp.w	r2, #386	; 0x182
{
 800a708:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a70c:	4688      	mov	r8, r1
 800a70e:	b083      	sub	sp, #12
  u16_t offset = (u16_t)layer;
 800a710:	fa1f f980 	uxth.w	r9, r0
  switch (type) {
 800a714:	d040      	beq.n	800a798 <pbuf_alloc+0x94>
 800a716:	d80f      	bhi.n	800a738 <pbuf_alloc+0x34>
 800a718:	f022 0340 	bic.w	r3, r2, #64	; 0x40
 800a71c:	2b01      	cmp	r3, #1
 800a71e:	d035      	beq.n	800a78c <pbuf_alloc+0x88>
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800a720:	4b48      	ldr	r3, [pc, #288]	; (800a844 <pbuf_alloc+0x140>)
 800a722:	f240 1227 	movw	r2, #295	; 0x127
 800a726:	4948      	ldr	r1, [pc, #288]	; (800a848 <pbuf_alloc+0x144>)
      return NULL;
 800a728:	2400      	movs	r4, #0
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800a72a:	4848      	ldr	r0, [pc, #288]	; (800a84c <pbuf_alloc+0x148>)
 800a72c:	f006 ff6e 	bl	801160c <iprintf>
}
 800a730:	4620      	mov	r0, r4
 800a732:	b003      	add	sp, #12
 800a734:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  switch (type) {
 800a738:	f5b2 7f20 	cmp.w	r2, #640	; 0x280
 800a73c:	d1f0      	bne.n	800a720 <pbuf_alloc+0x1c>
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800a73e:	f109 0303 	add.w	r3, r9, #3
 800a742:	1cca      	adds	r2, r1, #3
 800a744:	4605      	mov	r5, r0
 800a746:	f022 0203 	bic.w	r2, r2, #3
 800a74a:	f023 0303 	bic.w	r3, r3, #3
 800a74e:	4413      	add	r3, r2
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800a750:	b29b      	uxth	r3, r3
 800a752:	f103 0010 	add.w	r0, r3, #16
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800a756:	4283      	cmp	r3, r0
 800a758:	bf28      	it	cs
 800a75a:	4603      	movcs	r3, r0
 800a75c:	429a      	cmp	r2, r3
 800a75e:	d84c      	bhi.n	800a7fa <pbuf_alloc+0xf6>
      p = (struct pbuf *)mem_malloc(alloc_len);
 800a760:	f7ff fa20 	bl	8009ba4 <mem_malloc>
      if (p == NULL) {
 800a764:	4604      	mov	r4, r0
 800a766:	2800      	cmp	r0, #0
 800a768:	d0e2      	beq.n	800a730 <pbuf_alloc+0x2c>
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800a76a:	1943      	adds	r3, r0, r5
  p->next = NULL;
 800a76c:	2100      	movs	r1, #0
  p->type_internal = (u8_t)type;
 800a76e:	4a38      	ldr	r2, [pc, #224]	; (800a850 <pbuf_alloc+0x14c>)
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800a770:	3313      	adds	r3, #19
  p->tot_len = tot_len;
 800a772:	f8a0 8008 	strh.w	r8, [r0, #8]
  p->next = NULL;
 800a776:	6001      	str	r1, [r0, #0]
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800a778:	f023 0303 	bic.w	r3, r3, #3
  p->len = len;
 800a77c:	f8a0 800a 	strh.w	r8, [r0, #10]
  p->type_internal = (u8_t)type;
 800a780:	60c2      	str	r2, [r0, #12]
  p->payload = payload;
 800a782:	6043      	str	r3, [r0, #4]
}
 800a784:	4620      	mov	r0, r4
 800a786:	b003      	add	sp, #12
 800a788:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      p = pbuf_alloc_reference(NULL, length, type);
 800a78c:	2000      	movs	r0, #0
}
 800a78e:	b003      	add	sp, #12
 800a790:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
      p = pbuf_alloc_reference(NULL, length, type);
 800a794:	f7ff be66 	b.w	800a464 <pbuf_alloc_reference>
  switch (type) {
 800a798:	2100      	movs	r1, #0
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800a79a:	f240 56ec 	movw	r6, #1516	; 0x5ec
  p->type_internal = (u8_t)type;
 800a79e:	4d2d      	ldr	r5, [pc, #180]	; (800a854 <pbuf_alloc+0x150>)
  switch (type) {
 800a7a0:	460c      	mov	r4, r1
 800a7a2:	e009      	b.n	800a7b8 <pbuf_alloc+0xb4>
          last->next = q;
 800a7a4:	6038      	str	r0, [r7, #0]
        rem_len = (u16_t)(rem_len - qlen);
 800a7a6:	eba8 0303 	sub.w	r3, r8, r3
        offset = 0;
 800a7aa:	f04f 0900 	mov.w	r9, #0
        rem_len = (u16_t)(rem_len - qlen);
 800a7ae:	fa1f f883 	uxth.w	r8, r3
      } while (rem_len > 0);
 800a7b2:	f1b8 0f00 	cmp.w	r8, #0
 800a7b6:	d0bb      	beq.n	800a730 <pbuf_alloc+0x2c>
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800a7b8:	200c      	movs	r0, #12
 800a7ba:	460f      	mov	r7, r1
 800a7bc:	f7ff fb26 	bl	8009e0c <memp_malloc>
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800a7c0:	f109 0203 	add.w	r2, r9, #3
  p->next = NULL;
 800a7c4:	f04f 0c00 	mov.w	ip, #0
        if (q == NULL) {
 800a7c8:	4601      	mov	r1, r0
 800a7ca:	b1d8      	cbz	r0, 800a804 <pbuf_alloc+0x100>
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800a7cc:	f022 0303 	bic.w	r3, r2, #3
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800a7d0:	eb00 0209 	add.w	r2, r0, r9
  p->tot_len = tot_len;
 800a7d4:	f8a0 8008 	strh.w	r8, [r0, #8]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800a7d8:	1af3      	subs	r3, r6, r3
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800a7da:	3213      	adds	r2, #19
  p->next = NULL;
 800a7dc:	f8c0 c000 	str.w	ip, [r0]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800a7e0:	b29b      	uxth	r3, r3
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800a7e2:	f022 0203 	bic.w	r2, r2, #3
  p->type_internal = (u8_t)type;
 800a7e6:	60c5      	str	r5, [r0, #12]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800a7e8:	4543      	cmp	r3, r8
  p->payload = payload;
 800a7ea:	6042      	str	r2, [r0, #4]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800a7ec:	bf28      	it	cs
 800a7ee:	4643      	movcs	r3, r8
  p->len = len;
 800a7f0:	8143      	strh	r3, [r0, #10]
        if (p == NULL) {
 800a7f2:	2c00      	cmp	r4, #0
 800a7f4:	d1d6      	bne.n	800a7a4 <pbuf_alloc+0xa0>
 800a7f6:	4604      	mov	r4, r0
 800a7f8:	e7d5      	b.n	800a7a6 <pbuf_alloc+0xa2>
          return NULL;
 800a7fa:	2400      	movs	r4, #0
}
 800a7fc:	4620      	mov	r0, r4
 800a7fe:	b003      	add	sp, #12
 800a800:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  queued = pbuf_free_ooseq_pending;
 800a804:	4e14      	ldr	r6, [pc, #80]	; (800a858 <pbuf_alloc+0x154>)
 800a806:	9001      	str	r0, [sp, #4]
  SYS_ARCH_PROTECT(old_level);
 800a808:	f006 f9ac 	bl	8010b64 <sys_arch_protect>
  queued = pbuf_free_ooseq_pending;
 800a80c:	7835      	ldrb	r5, [r6, #0]
  pbuf_free_ooseq_pending = 1;
 800a80e:	2301      	movs	r3, #1
  queued = pbuf_free_ooseq_pending;
 800a810:	b2ed      	uxtb	r5, r5
  pbuf_free_ooseq_pending = 1;
 800a812:	7033      	strb	r3, [r6, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800a814:	f006 f9b2 	bl	8010b7c <sys_arch_unprotect>
  if (!queued) {
 800a818:	9901      	ldr	r1, [sp, #4]
 800a81a:	b135      	cbz	r5, 800a82a <pbuf_alloc+0x126>
          if (p) {
 800a81c:	2c00      	cmp	r4, #0
 800a81e:	d0ec      	beq.n	800a7fa <pbuf_alloc+0xf6>
            pbuf_free(p);
 800a820:	4620      	mov	r0, r4
          return NULL;
 800a822:	2400      	movs	r4, #0
            pbuf_free(p);
 800a824:	f7ff fefe 	bl	800a624 <pbuf_free>
 800a828:	e782      	b.n	800a730 <pbuf_alloc+0x2c>
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800a82a:	480c      	ldr	r0, [pc, #48]	; (800a85c <pbuf_alloc+0x158>)
 800a82c:	f7fe fee2 	bl	80095f4 <tcpip_try_callback>
 800a830:	2800      	cmp	r0, #0
 800a832:	d0f3      	beq.n	800a81c <pbuf_alloc+0x118>
 800a834:	f006 f996 	bl	8010b64 <sys_arch_protect>
 800a838:	9901      	ldr	r1, [sp, #4]
 800a83a:	7031      	strb	r1, [r6, #0]
 800a83c:	f006 f99e 	bl	8010b7c <sys_arch_unprotect>
 800a840:	e7ec      	b.n	800a81c <pbuf_alloc+0x118>
 800a842:	bf00      	nop
 800a844:	080137d0 	.word	0x080137d0
 800a848:	080138f4 	.word	0x080138f4
 800a84c:	080128dc 	.word	0x080128dc
 800a850:	00010080 	.word	0x00010080
 800a854:	00010082 	.word	0x00010082
 800a858:	24010575 	.word	0x24010575
 800a85c:	0800a2ed 	.word	0x0800a2ed

0800a860 <pbuf_realloc>:
{
 800a860:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800a862:	4604      	mov	r4, r0
{
 800a864:	460d      	mov	r5, r1
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800a866:	2800      	cmp	r0, #0
 800a868:	d036      	beq.n	800a8d8 <pbuf_realloc+0x78>
  if (new_len >= p->tot_len) {
 800a86a:	8922      	ldrh	r2, [r4, #8]
 800a86c:	42aa      	cmp	r2, r5
 800a86e:	d91b      	bls.n	800a8a8 <pbuf_realloc+0x48>
  while (rem_len > q->len) {
 800a870:	8963      	ldrh	r3, [r4, #10]
 800a872:	429d      	cmp	r5, r3
 800a874:	d90d      	bls.n	800a892 <pbuf_realloc+0x32>
 800a876:	1aa9      	subs	r1, r5, r2
 800a878:	b289      	uxth	r1, r1
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800a87a:	440a      	add	r2, r1
    rem_len = (u16_t)(rem_len - q->len);
 800a87c:	1aeb      	subs	r3, r5, r3
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800a87e:	8122      	strh	r2, [r4, #8]
    rem_len = (u16_t)(rem_len - q->len);
 800a880:	b29d      	uxth	r5, r3
    q = q->next;
 800a882:	6824      	ldr	r4, [r4, #0]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800a884:	2c00      	cmp	r4, #0
 800a886:	d02f      	beq.n	800a8e8 <pbuf_realloc+0x88>
  while (rem_len > q->len) {
 800a888:	8963      	ldrh	r3, [r4, #10]
 800a88a:	42ab      	cmp	r3, r5
 800a88c:	d201      	bcs.n	800a892 <pbuf_realloc+0x32>
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800a88e:	8922      	ldrh	r2, [r4, #8]
 800a890:	e7f3      	b.n	800a87a <pbuf_realloc+0x1a>
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800a892:	7b22      	ldrb	r2, [r4, #12]
 800a894:	0712      	lsls	r2, r2, #28
 800a896:	d008      	beq.n	800a8aa <pbuf_realloc+0x4a>
  if (q->next != NULL) {
 800a898:	6820      	ldr	r0, [r4, #0]
  q->len = rem_len;
 800a89a:	8165      	strh	r5, [r4, #10]
  q->tot_len = q->len;
 800a89c:	8125      	strh	r5, [r4, #8]
  if (q->next != NULL) {
 800a89e:	b108      	cbz	r0, 800a8a4 <pbuf_realloc+0x44>
    pbuf_free(q->next);
 800a8a0:	f7ff fec0 	bl	800a624 <pbuf_free>
  q->next = NULL;
 800a8a4:	2300      	movs	r3, #0
 800a8a6:	6023      	str	r3, [r4, #0]
}
 800a8a8:	bd38      	pop	{r3, r4, r5, pc}
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800a8aa:	42ab      	cmp	r3, r5
 800a8ac:	d0f4      	beq.n	800a898 <pbuf_realloc+0x38>
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800a8ae:	7b63      	ldrb	r3, [r4, #13]
 800a8b0:	079b      	lsls	r3, r3, #30
 800a8b2:	d4f1      	bmi.n	800a898 <pbuf_realloc+0x38>
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800a8b4:	6863      	ldr	r3, [r4, #4]
 800a8b6:	4620      	mov	r0, r4
 800a8b8:	1b1b      	subs	r3, r3, r4
 800a8ba:	1959      	adds	r1, r3, r5
 800a8bc:	f7ff f8b8 	bl	8009a30 <mem_trim>
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800a8c0:	4604      	mov	r4, r0
 800a8c2:	2800      	cmp	r0, #0
 800a8c4:	d1e8      	bne.n	800a898 <pbuf_realloc+0x38>
 800a8c6:	4b0d      	ldr	r3, [pc, #52]	; (800a8fc <pbuf_realloc+0x9c>)
 800a8c8:	f240 12bd 	movw	r2, #445	; 0x1bd
 800a8cc:	490c      	ldr	r1, [pc, #48]	; (800a900 <pbuf_realloc+0xa0>)
 800a8ce:	480d      	ldr	r0, [pc, #52]	; (800a904 <pbuf_realloc+0xa4>)
 800a8d0:	f006 fe9c 	bl	801160c <iprintf>
  q->len = rem_len;
 800a8d4:	8164      	strh	r4, [r4, #10]
 800a8d6:	deff      	udf	#255	; 0xff
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800a8d8:	4b08      	ldr	r3, [pc, #32]	; (800a8fc <pbuf_realloc+0x9c>)
 800a8da:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800a8de:	490a      	ldr	r1, [pc, #40]	; (800a908 <pbuf_realloc+0xa8>)
 800a8e0:	4808      	ldr	r0, [pc, #32]	; (800a904 <pbuf_realloc+0xa4>)
 800a8e2:	f006 fe93 	bl	801160c <iprintf>
 800a8e6:	e7c0      	b.n	800a86a <pbuf_realloc+0xa>
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800a8e8:	4b04      	ldr	r3, [pc, #16]	; (800a8fc <pbuf_realloc+0x9c>)
 800a8ea:	f240 12af 	movw	r2, #431	; 0x1af
 800a8ee:	4907      	ldr	r1, [pc, #28]	; (800a90c <pbuf_realloc+0xac>)
 800a8f0:	4804      	ldr	r0, [pc, #16]	; (800a904 <pbuf_realloc+0xa4>)
 800a8f2:	f006 fe8b 	bl	801160c <iprintf>
  while (rem_len > q->len) {
 800a8f6:	8963      	ldrh	r3, [r4, #10]
 800a8f8:	deff      	udf	#255	; 0xff
 800a8fa:	bf00      	nop
 800a8fc:	080137d0 	.word	0x080137d0
 800a900:	08013940 	.word	0x08013940
 800a904:	080128dc 	.word	0x080128dc
 800a908:	08013910 	.word	0x08013910
 800a90c:	08013928 	.word	0x08013928

0800a910 <pbuf_clen>:
  while (p != NULL) {
 800a910:	b138      	cbz	r0, 800a922 <pbuf_clen+0x12>
  len = 0;
 800a912:	2300      	movs	r3, #0
    ++len;
 800a914:	3301      	adds	r3, #1
    p = p->next;
 800a916:	6800      	ldr	r0, [r0, #0]
    ++len;
 800a918:	b29b      	uxth	r3, r3
  while (p != NULL) {
 800a91a:	2800      	cmp	r0, #0
 800a91c:	d1fa      	bne.n	800a914 <pbuf_clen+0x4>
}
 800a91e:	4618      	mov	r0, r3
 800a920:	4770      	bx	lr
  len = 0;
 800a922:	4603      	mov	r3, r0
}
 800a924:	4618      	mov	r0, r3
 800a926:	4770      	bx	lr

0800a928 <pbuf_ref>:
  if (p != NULL) {
 800a928:	b158      	cbz	r0, 800a942 <pbuf_ref+0x1a>
{
 800a92a:	b510      	push	{r4, lr}
 800a92c:	4604      	mov	r4, r0
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800a92e:	f006 f919 	bl	8010b64 <sys_arch_protect>
 800a932:	7ba3      	ldrb	r3, [r4, #14]
 800a934:	3301      	adds	r3, #1
 800a936:	73a3      	strb	r3, [r4, #14]
 800a938:	f006 f920 	bl	8010b7c <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800a93c:	7ba3      	ldrb	r3, [r4, #14]
 800a93e:	b10b      	cbz	r3, 800a944 <pbuf_ref+0x1c>
}
 800a940:	bd10      	pop	{r4, pc}
 800a942:	4770      	bx	lr
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800a944:	4b04      	ldr	r3, [pc, #16]	; (800a958 <pbuf_ref+0x30>)
 800a946:	f240 3242 	movw	r2, #834	; 0x342
 800a94a:	4904      	ldr	r1, [pc, #16]	; (800a95c <pbuf_ref+0x34>)
 800a94c:	4804      	ldr	r0, [pc, #16]	; (800a960 <pbuf_ref+0x38>)
}
 800a94e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800a952:	f006 be5b 	b.w	801160c <iprintf>
 800a956:	bf00      	nop
 800a958:	080137d0 	.word	0x080137d0
 800a95c:	0801395c 	.word	0x0801395c
 800a960:	080128dc 	.word	0x080128dc

0800a964 <pbuf_cat>:
{
 800a964:	b570      	push	{r4, r5, r6, lr}
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800a966:	b330      	cbz	r0, 800a9b6 <pbuf_cat+0x52>
 800a968:	460d      	mov	r5, r1
 800a96a:	b321      	cbz	r1, 800a9b6 <pbuf_cat+0x52>
  for (p = h; p->next != NULL; p = p->next) {
 800a96c:	6803      	ldr	r3, [r0, #0]
 800a96e:	4604      	mov	r4, r0
 800a970:	b13b      	cbz	r3, 800a982 <pbuf_cat+0x1e>
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800a972:	8922      	ldrh	r2, [r4, #8]
 800a974:	8928      	ldrh	r0, [r5, #8]
 800a976:	4402      	add	r2, r0
 800a978:	8122      	strh	r2, [r4, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800a97a:	461c      	mov	r4, r3
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d1f7      	bne.n	800a972 <pbuf_cat+0xe>
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800a982:	8963      	ldrh	r3, [r4, #10]
 800a984:	8922      	ldrh	r2, [r4, #8]
 800a986:	429a      	cmp	r2, r3
 800a988:	d010      	beq.n	800a9ac <pbuf_cat+0x48>
 800a98a:	4b0f      	ldr	r3, [pc, #60]	; (800a9c8 <pbuf_cat+0x64>)
 800a98c:	f240 3262 	movw	r2, #866	; 0x362
 800a990:	490e      	ldr	r1, [pc, #56]	; (800a9cc <pbuf_cat+0x68>)
 800a992:	480f      	ldr	r0, [pc, #60]	; (800a9d0 <pbuf_cat+0x6c>)
 800a994:	f006 fe3a 	bl	801160c <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800a998:	6823      	ldr	r3, [r4, #0]
 800a99a:	b133      	cbz	r3, 800a9aa <pbuf_cat+0x46>
 800a99c:	4b0a      	ldr	r3, [pc, #40]	; (800a9c8 <pbuf_cat+0x64>)
 800a99e:	f240 3263 	movw	r2, #867	; 0x363
 800a9a2:	490c      	ldr	r1, [pc, #48]	; (800a9d4 <pbuf_cat+0x70>)
 800a9a4:	480a      	ldr	r0, [pc, #40]	; (800a9d0 <pbuf_cat+0x6c>)
 800a9a6:	f006 fe31 	bl	801160c <iprintf>
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800a9aa:	8923      	ldrh	r3, [r4, #8]
 800a9ac:	892a      	ldrh	r2, [r5, #8]
  p->next = t;
 800a9ae:	6025      	str	r5, [r4, #0]
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800a9b0:	4413      	add	r3, r2
 800a9b2:	8123      	strh	r3, [r4, #8]
}
 800a9b4:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800a9b6:	4b04      	ldr	r3, [pc, #16]	; (800a9c8 <pbuf_cat+0x64>)
 800a9b8:	f240 3259 	movw	r2, #857	; 0x359
 800a9bc:	4906      	ldr	r1, [pc, #24]	; (800a9d8 <pbuf_cat+0x74>)
 800a9be:	4804      	ldr	r0, [pc, #16]	; (800a9d0 <pbuf_cat+0x6c>)
}
 800a9c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800a9c4:	f006 be22 	b.w	801160c <iprintf>
 800a9c8:	080137d0 	.word	0x080137d0
 800a9cc:	080139a8 	.word	0x080139a8
 800a9d0:	080128dc 	.word	0x080128dc
 800a9d4:	080139d8 	.word	0x080139d8
 800a9d8:	08013970 	.word	0x08013970

0800a9dc <pbuf_copy>:
{
 800a9dc:	b508      	push	{r3, lr}
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800a9de:	b140      	cbz	r0, 800a9f2 <pbuf_copy+0x16>
 800a9e0:	b139      	cbz	r1, 800a9f2 <pbuf_copy+0x16>
 800a9e2:	8902      	ldrh	r2, [r0, #8]
 800a9e4:	890b      	ldrh	r3, [r1, #8]
 800a9e6:	429a      	cmp	r2, r3
 800a9e8:	d303      	bcc.n	800a9f2 <pbuf_copy+0x16>
}
 800a9ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800a9ee:	f7ff bc97 	b.w	800a320 <pbuf_copy.part.0>
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800a9f2:	4b05      	ldr	r3, [pc, #20]	; (800aa08 <pbuf_copy+0x2c>)
 800a9f4:	f240 32c9 	movw	r2, #969	; 0x3c9
 800a9f8:	4904      	ldr	r1, [pc, #16]	; (800aa0c <pbuf_copy+0x30>)
 800a9fa:	4805      	ldr	r0, [pc, #20]	; (800aa10 <pbuf_copy+0x34>)
 800a9fc:	f006 fe06 	bl	801160c <iprintf>
}
 800aa00:	f06f 000f 	mvn.w	r0, #15
 800aa04:	bd08      	pop	{r3, pc}
 800aa06:	bf00      	nop
 800aa08:	080137d0 	.word	0x080137d0
 800aa0c:	080139e8 	.word	0x080139e8
 800aa10:	080128dc 	.word	0x080128dc

0800aa14 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800aa14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  const struct pbuf *p;
  u16_t left = 0;
  u16_t buf_copy_len;
  u16_t copied_total = 0;

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800aa18:	4605      	mov	r5, r0
 800aa1a:	b370      	cbz	r0, 800aa7a <pbuf_copy_partial+0x66>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800aa1c:	460f      	mov	r7, r1
 800aa1e:	2900      	cmp	r1, #0
 800aa20:	d036      	beq.n	800aa90 <pbuf_copy_partial+0x7c>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800aa22:	4690      	mov	r8, r2
 800aa24:	b392      	cbz	r2, 800aa8c <pbuf_copy_partial+0x78>
  u16_t left = 0;
 800aa26:	2600      	movs	r6, #0
 800aa28:	e005      	b.n	800aa36 <pbuf_copy_partial+0x22>
    if ((offset != 0) && (offset >= p->len)) {
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800aa2a:	b293      	uxth	r3, r2
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800aa2c:	682d      	ldr	r5, [r5, #0]
 800aa2e:	f1b8 0f00 	cmp.w	r8, #0
 800aa32:	d01f      	beq.n	800aa74 <pbuf_copy_partial+0x60>
 800aa34:	b1f5      	cbz	r5, 800aa74 <pbuf_copy_partial+0x60>
      buf_copy_len = (u16_t)(p->len - offset);
      if (buf_copy_len > len) {
        buf_copy_len = len;
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800aa36:	19b8      	adds	r0, r7, r6
    if ((offset != 0) && (offset >= p->len)) {
 800aa38:	f8b5 c00a 	ldrh.w	ip, [r5, #10]
 800aa3c:	b11b      	cbz	r3, 800aa46 <pbuf_copy_partial+0x32>
 800aa3e:	4563      	cmp	r3, ip
      offset = (u16_t)(offset - p->len);
 800aa40:	eba3 020c 	sub.w	r2, r3, ip
    if ((offset != 0) && (offset >= p->len)) {
 800aa44:	d2f1      	bcs.n	800aa2a <pbuf_copy_partial+0x16>
      buf_copy_len = (u16_t)(p->len - offset);
 800aa46:	ebac 0c03 	sub.w	ip, ip, r3
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800aa4a:	6869      	ldr	r1, [r5, #4]
 800aa4c:	fa1f f48c 	uxth.w	r4, ip
 800aa50:	4419      	add	r1, r3
 800aa52:	4544      	cmp	r4, r8
 800aa54:	bf28      	it	cs
 800aa56:	4644      	movcs	r4, r8
 800aa58:	4622      	mov	r2, r4
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800aa5a:	4426      	add	r6, r4
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800aa5c:	f007 f85e 	bl	8011b1c <memcpy>
      left = (u16_t)(left + buf_copy_len);
      len = (u16_t)(len - buf_copy_len);
 800aa60:	eba8 0204 	sub.w	r2, r8, r4
      offset = 0;
 800aa64:	2300      	movs	r3, #0
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800aa66:	b2b6      	uxth	r6, r6
      len = (u16_t)(len - buf_copy_len);
 800aa68:	fa1f f882 	uxth.w	r8, r2
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800aa6c:	682d      	ldr	r5, [r5, #0]
 800aa6e:	f1b8 0f00 	cmp.w	r8, #0
 800aa72:	d1df      	bne.n	800aa34 <pbuf_copy_partial+0x20>
    }
  }
  return copied_total;
}
 800aa74:	4630      	mov	r0, r6
 800aa76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800aa7a:	4b0a      	ldr	r3, [pc, #40]	; (800aaa4 <pbuf_copy_partial+0x90>)
 800aa7c:	f240 420a 	movw	r2, #1034	; 0x40a
 800aa80:	4909      	ldr	r1, [pc, #36]	; (800aaa8 <pbuf_copy_partial+0x94>)
 800aa82:	462e      	mov	r6, r5
 800aa84:	4809      	ldr	r0, [pc, #36]	; (800aaac <pbuf_copy_partial+0x98>)
 800aa86:	f006 fdc1 	bl	801160c <iprintf>
 800aa8a:	e7f3      	b.n	800aa74 <pbuf_copy_partial+0x60>
  u16_t left = 0;
 800aa8c:	4616      	mov	r6, r2
 800aa8e:	e7f1      	b.n	800aa74 <pbuf_copy_partial+0x60>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800aa90:	4b04      	ldr	r3, [pc, #16]	; (800aaa4 <pbuf_copy_partial+0x90>)
 800aa92:	f240 420b 	movw	r2, #1035	; 0x40b
 800aa96:	4906      	ldr	r1, [pc, #24]	; (800aab0 <pbuf_copy_partial+0x9c>)
 800aa98:	463e      	mov	r6, r7
 800aa9a:	4804      	ldr	r0, [pc, #16]	; (800aaac <pbuf_copy_partial+0x98>)
 800aa9c:	f006 fdb6 	bl	801160c <iprintf>
 800aaa0:	e7e8      	b.n	800aa74 <pbuf_copy_partial+0x60>
 800aaa2:	bf00      	nop
 800aaa4:	080137d0 	.word	0x080137d0
 800aaa8:	08013a18 	.word	0x08013a18
 800aaac:	080128dc 	.word	0x080128dc
 800aab0:	08013a38 	.word	0x08013a38

0800aab4 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800aab4:	b538      	push	{r3, r4, r5, lr}
 800aab6:	4615      	mov	r5, r2
 800aab8:	460a      	mov	r2, r1
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800aaba:	8929      	ldrh	r1, [r5, #8]
 800aabc:	f7ff fe22 	bl	800a704 <pbuf_alloc>
  if (q == NULL) {
 800aac0:	4604      	mov	r4, r0
 800aac2:	b138      	cbz	r0, 800aad4 <pbuf_clone+0x20>
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800aac4:	8902      	ldrh	r2, [r0, #8]
 800aac6:	892b      	ldrh	r3, [r5, #8]
 800aac8:	429a      	cmp	r2, r3
 800aaca:	d305      	bcc.n	800aad8 <pbuf_clone+0x24>
 800aacc:	4629      	mov	r1, r5
 800aace:	f7ff fc27 	bl	800a320 <pbuf_copy.part.0>
    return NULL;
  }
  err = pbuf_copy(q, p);
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800aad2:	b940      	cbnz	r0, 800aae6 <pbuf_clone+0x32>
  return q;
}
 800aad4:	4620      	mov	r0, r4
 800aad6:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800aad8:	4b07      	ldr	r3, [pc, #28]	; (800aaf8 <pbuf_clone+0x44>)
 800aada:	f240 32c9 	movw	r2, #969	; 0x3c9
 800aade:	4907      	ldr	r1, [pc, #28]	; (800aafc <pbuf_clone+0x48>)
 800aae0:	4807      	ldr	r0, [pc, #28]	; (800ab00 <pbuf_clone+0x4c>)
 800aae2:	f006 fd93 	bl	801160c <iprintf>
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800aae6:	4b04      	ldr	r3, [pc, #16]	; (800aaf8 <pbuf_clone+0x44>)
 800aae8:	f240 5224 	movw	r2, #1316	; 0x524
 800aaec:	4905      	ldr	r1, [pc, #20]	; (800ab04 <pbuf_clone+0x50>)
 800aaee:	4804      	ldr	r0, [pc, #16]	; (800ab00 <pbuf_clone+0x4c>)
 800aaf0:	f006 fd8c 	bl	801160c <iprintf>
}
 800aaf4:	4620      	mov	r0, r4
 800aaf6:	bd38      	pop	{r3, r4, r5, pc}
 800aaf8:	080137d0 	.word	0x080137d0
 800aafc:	080139e8 	.word	0x080139e8
 800ab00:	080128dc 	.word	0x080128dc
 800ab04:	08013a5c 	.word	0x08013a5c

0800ab08 <pbuf_memcmp>:
 * @return zero if equal, nonzero otherwise
 *         (0xffff if p is too short, diffoffset+1 otherwise)
 */
u16_t
pbuf_memcmp(const struct pbuf *p, u16_t offset, const void *s2, u16_t n)
{
 800ab08:	b570      	push	{r4, r5, r6, lr}
  u16_t start = offset;
  const struct pbuf *q = p;
  u16_t i;

  /* pbuf long enough to perform check? */
  if (p->tot_len < (offset + n)) {
 800ab0a:	8905      	ldrh	r5, [r0, #8]
 800ab0c:	18cc      	adds	r4, r1, r3
 800ab0e:	42a5      	cmp	r5, r4
 800ab10:	db2e      	blt.n	800ab70 <pbuf_memcmp+0x68>
    return 0xffff;
  }

  /* get the correct pbuf from chain. We know it succeeds because of p->tot_len check above. */
  while ((q != NULL) && (q->len <= start)) {
 800ab12:	8944      	ldrh	r4, [r0, #10]
 800ab14:	428c      	cmp	r4, r1
    start = (u16_t)(start - q->len);
 800ab16:	eba1 0404 	sub.w	r4, r1, r4
  while ((q != NULL) && (q->len <= start)) {
 800ab1a:	d803      	bhi.n	800ab24 <pbuf_memcmp+0x1c>
    q = q->next;
 800ab1c:	6800      	ldr	r0, [r0, #0]
    start = (u16_t)(start - q->len);
 800ab1e:	b2a1      	uxth	r1, r4
  while ((q != NULL) && (q->len <= start)) {
 800ab20:	2800      	cmp	r0, #0
 800ab22:	d1f6      	bne.n	800ab12 <pbuf_memcmp+0xa>
  }

  /* return requested data if pbuf is OK */
  for (i = 0; i < n; i++) {
 800ab24:	b1f3      	cbz	r3, 800ab64 <pbuf_memcmp+0x5c>
 800ab26:	2500      	movs	r5, #0
 800ab28:	1e56      	subs	r6, r2, #1
 800ab2a:	46ae      	mov	lr, r5
    /* We know pbuf_get_at() succeeds because of p->tot_len check above. */
    u8_t a = pbuf_get_at(q, (u16_t)(start + i));
 800ab2c:	eb01 0c0e 	add.w	ip, r1, lr
  while ((q != NULL) && (q->len <= offset_left)) {
 800ab30:	4604      	mov	r4, r0
 800ab32:	fa1f fc8c 	uxth.w	ip, ip
 800ab36:	b920      	cbnz	r0, 800ab42 <pbuf_memcmp+0x3a>
 800ab38:	e00b      	b.n	800ab52 <pbuf_memcmp+0x4a>
    q = q->next;
 800ab3a:	6824      	ldr	r4, [r4, #0]
    offset_left = (u16_t)(offset_left - q->len);
 800ab3c:	fa1f fc82 	uxth.w	ip, r2
  while ((q != NULL) && (q->len <= offset_left)) {
 800ab40:	b13c      	cbz	r4, 800ab52 <pbuf_memcmp+0x4a>
 800ab42:	8962      	ldrh	r2, [r4, #10]
 800ab44:	4594      	cmp	ip, r2
    offset_left = (u16_t)(offset_left - q->len);
 800ab46:	ebac 0202 	sub.w	r2, ip, r2
  while ((q != NULL) && (q->len <= offset_left)) {
 800ab4a:	d2f6      	bcs.n	800ab3a <pbuf_memcmp+0x32>
    return ((u8_t *)q->payload)[q_idx];
 800ab4c:	6862      	ldr	r2, [r4, #4]
 800ab4e:	f812 400c 	ldrb.w	r4, [r2, ip]
    u8_t b = ((const u8_t *)s2)[i];
    if (a != b) {
 800ab52:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 800ab56:	42a2      	cmp	r2, r4
 800ab58:	d106      	bne.n	800ab68 <pbuf_memcmp+0x60>
  for (i = 0; i < n; i++) {
 800ab5a:	3501      	adds	r5, #1
 800ab5c:	fa1f fe85 	uxth.w	lr, r5
 800ab60:	4573      	cmp	r3, lr
 800ab62:	d8e3      	bhi.n	800ab2c <pbuf_memcmp+0x24>
      return (u16_t)LWIP_MIN(i + 1, 0xFFFF);
    }
  }
  return 0;
 800ab64:	2000      	movs	r0, #0
}
 800ab66:	bd70      	pop	{r4, r5, r6, pc}
      return (u16_t)LWIP_MIN(i + 1, 0xFFFF);
 800ab68:	f10e 0301 	add.w	r3, lr, #1
 800ab6c:	b298      	uxth	r0, r3
}
 800ab6e:	bd70      	pop	{r4, r5, r6, pc}
    return 0xffff;
 800ab70:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
 800ab74:	bd70      	pop	{r4, r5, r6, pc}
 800ab76:	bf00      	nop

0800ab78 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800ab78:	b4f0      	push	{r4, r5, r6, r7}
 800ab7a:	4f14      	ldr	r7, [pc, #80]	; (800abcc <tcp_new_port+0x54>)
 800ab7c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800ab80:	4e13      	ldr	r6, [pc, #76]	; (800abd0 <tcp_new_port+0x58>)
  u16_t n = 0;
  struct tcp_pcb *pcb;

again:
  tcp_port++;
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800ab82:	f64f 7cff 	movw	ip, #65535	; 0xffff
 800ab86:	8839      	ldrh	r1, [r7, #0]
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800ab88:	4d12      	ldr	r5, [pc, #72]	; (800abd4 <tcp_new_port+0x5c>)
  tcp_port++;
 800ab8a:	3101      	adds	r1, #1
 800ab8c:	4c12      	ldr	r4, [pc, #72]	; (800abd8 <tcp_new_port+0x60>)
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800ab8e:	462b      	mov	r3, r5
  tcp_port++;
 800ab90:	b289      	uxth	r1, r1
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800ab92:	4561      	cmp	r1, ip
 800ab94:	bf08      	it	eq
 800ab96:	f44f 4140 	moveq.w	r1, #49152	; 0xc000
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	b913      	cbnz	r3, 800aba4 <tcp_new_port+0x2c>
 800ab9e:	e00b      	b.n	800abb8 <tcp_new_port+0x40>
 800aba0:	68db      	ldr	r3, [r3, #12]
 800aba2:	b14b      	cbz	r3, 800abb8 <tcp_new_port+0x40>
      if (pcb->local_port == tcp_port) {
 800aba4:	8ada      	ldrh	r2, [r3, #22]
 800aba6:	428a      	cmp	r2, r1
 800aba8:	d1fa      	bne.n	800aba0 <tcp_new_port+0x28>
        n++;
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800abaa:	3801      	subs	r0, #1
 800abac:	b280      	uxth	r0, r0
 800abae:	2800      	cmp	r0, #0
 800abb0:	d1eb      	bne.n	800ab8a <tcp_new_port+0x12>
 800abb2:	8039      	strh	r1, [r7, #0]
        goto again;
      }
    }
  }
  return tcp_port;
}
 800abb4:	bcf0      	pop	{r4, r5, r6, r7}
 800abb6:	4770      	bx	lr
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800abb8:	42a6      	cmp	r6, r4
 800abba:	d002      	beq.n	800abc2 <tcp_new_port+0x4a>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800abbc:	f854 3f04 	ldr.w	r3, [r4, #4]!
 800abc0:	e7eb      	b.n	800ab9a <tcp_new_port+0x22>
 800abc2:	4608      	mov	r0, r1
 800abc4:	8039      	strh	r1, [r7, #0]
}
 800abc6:	bcf0      	pop	{r4, r5, r6, r7}
 800abc8:	4770      	bx	lr
 800abca:	bf00      	nop
 800abcc:	2400002c 	.word	0x2400002c
 800abd0:	08014144 	.word	0x08014144
 800abd4:	24010584 	.word	0x24010584
 800abd8:	08014138 	.word	0x08014138

0800abdc <tcp_close_shutdown_fin>:
{
 800abdc:	b510      	push	{r4, lr}
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800abde:	4604      	mov	r4, r0
 800abe0:	b308      	cbz	r0, 800ac26 <tcp_close_shutdown_fin+0x4a>
  switch (pcb->state) {
 800abe2:	7d23      	ldrb	r3, [r4, #20]
 800abe4:	2b04      	cmp	r3, #4
 800abe6:	d005      	beq.n	800abf4 <tcp_close_shutdown_fin+0x18>
 800abe8:	2b07      	cmp	r3, #7
 800abea:	d00e      	beq.n	800ac0a <tcp_close_shutdown_fin+0x2e>
 800abec:	2b03      	cmp	r3, #3
 800abee:	d001      	beq.n	800abf4 <tcp_close_shutdown_fin+0x18>
 800abf0:	2000      	movs	r0, #0
}
 800abf2:	bd10      	pop	{r4, pc}
      err = tcp_send_fin(pcb);
 800abf4:	4620      	mov	r0, r4
 800abf6:	f003 fd09 	bl	800e60c <tcp_send_fin>
      if (err == ERR_OK) {
 800abfa:	b950      	cbnz	r0, 800ac12 <tcp_close_shutdown_fin+0x36>
  if (err == ERR_OK) {
 800abfc:	2305      	movs	r3, #5
    tcp_output(pcb);
 800abfe:	4620      	mov	r0, r4
        pcb->state = LAST_ACK;
 800ac00:	7523      	strb	r3, [r4, #20]
    tcp_output(pcb);
 800ac02:	f003 fe73 	bl	800e8ec <tcp_output>
 800ac06:	2000      	movs	r0, #0
}
 800ac08:	bd10      	pop	{r4, pc}
      err = tcp_send_fin(pcb);
 800ac0a:	4620      	mov	r0, r4
 800ac0c:	f003 fcfe 	bl	800e60c <tcp_send_fin>
      if (err == ERR_OK) {
 800ac10:	b138      	cbz	r0, 800ac22 <tcp_close_shutdown_fin+0x46>
  } else if (err == ERR_MEM) {
 800ac12:	1c43      	adds	r3, r0, #1
 800ac14:	d1ed      	bne.n	800abf2 <tcp_close_shutdown_fin+0x16>
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800ac16:	8b63      	ldrh	r3, [r4, #26]
    return ERR_OK;
 800ac18:	2000      	movs	r0, #0
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800ac1a:	f043 0308 	orr.w	r3, r3, #8
 800ac1e:	8363      	strh	r3, [r4, #26]
}
 800ac20:	bd10      	pop	{r4, pc}
 800ac22:	2309      	movs	r3, #9
 800ac24:	e7eb      	b.n	800abfe <tcp_close_shutdown_fin+0x22>
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800ac26:	4b04      	ldr	r3, [pc, #16]	; (800ac38 <tcp_close_shutdown_fin+0x5c>)
 800ac28:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800ac2c:	4903      	ldr	r1, [pc, #12]	; (800ac3c <tcp_close_shutdown_fin+0x60>)
 800ac2e:	4804      	ldr	r0, [pc, #16]	; (800ac40 <tcp_close_shutdown_fin+0x64>)
 800ac30:	f006 fcec 	bl	801160c <iprintf>
 800ac34:	e7d5      	b.n	800abe2 <tcp_close_shutdown_fin+0x6>
 800ac36:	bf00      	nop
 800ac38:	08013a70 	.word	0x08013a70
 800ac3c:	08013aa0 	.word	0x08013aa0
 800ac40:	080128dc 	.word	0x080128dc

0800ac44 <tcp_init>:
{
 800ac44:	b508      	push	{r3, lr}
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800ac46:	f006 fb31 	bl	80112ac <rand>
 800ac4a:	4b02      	ldr	r3, [pc, #8]	; (800ac54 <tcp_init+0x10>)
 800ac4c:	4a02      	ldr	r2, [pc, #8]	; (800ac58 <tcp_init+0x14>)
 800ac4e:	4303      	orrs	r3, r0
 800ac50:	8013      	strh	r3, [r2, #0]
}
 800ac52:	bd08      	pop	{r3, pc}
 800ac54:	ffffc000 	.word	0xffffc000
 800ac58:	2400002c 	.word	0x2400002c

0800ac5c <tcp_free>:
{
 800ac5c:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800ac5e:	7d03      	ldrb	r3, [r0, #20]
{
 800ac60:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800ac62:	2b01      	cmp	r3, #1
 800ac64:	d005      	beq.n	800ac72 <tcp_free+0x16>
  memp_free(MEMP_TCP_PCB, pcb);
 800ac66:	4621      	mov	r1, r4
 800ac68:	2001      	movs	r0, #1
}
 800ac6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_TCP_PCB, pcb);
 800ac6e:	f7ff b913 	b.w	8009e98 <memp_free>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800ac72:	4906      	ldr	r1, [pc, #24]	; (800ac8c <tcp_free+0x30>)
 800ac74:	22d4      	movs	r2, #212	; 0xd4
 800ac76:	4b06      	ldr	r3, [pc, #24]	; (800ac90 <tcp_free+0x34>)
 800ac78:	4806      	ldr	r0, [pc, #24]	; (800ac94 <tcp_free+0x38>)
 800ac7a:	f006 fcc7 	bl	801160c <iprintf>
  memp_free(MEMP_TCP_PCB, pcb);
 800ac7e:	4621      	mov	r1, r4
 800ac80:	2001      	movs	r0, #1
}
 800ac82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_TCP_PCB, pcb);
 800ac86:	f7ff b907 	b.w	8009e98 <memp_free>
 800ac8a:	bf00      	nop
 800ac8c:	08013aac 	.word	0x08013aac
 800ac90:	08013a70 	.word	0x08013a70
 800ac94:	080128dc 	.word	0x080128dc

0800ac98 <tcp_bind>:
{
 800ac98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac9c:	460f      	mov	r7, r1
 800ac9e:	4680      	mov	r8, r0
 800aca0:	4614      	mov	r4, r2
  LWIP_ASSERT_CORE_LOCKED();
 800aca2:	f7fb ffeb 	bl	8006c7c <sys_check_core_locking>
  if (ipaddr == NULL) {
 800aca6:	b1f7      	cbz	r7, 800ace6 <tcp_bind+0x4e>
  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800aca8:	f1b8 0f00 	cmp.w	r8, #0
 800acac:	d044      	beq.n	800ad38 <tcp_bind+0xa0>
  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800acae:	f898 3014 	ldrb.w	r3, [r8, #20]
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d136      	bne.n	800ad24 <tcp_bind+0x8c>
  if (port == 0) {
 800acb6:	b1ec      	cbz	r4, 800acf4 <tcp_bind+0x5c>
 800acb8:	4e24      	ldr	r6, [pc, #144]	; (800ad4c <tcp_bind+0xb4>)
 800acba:	4b25      	ldr	r3, [pc, #148]	; (800ad50 <tcp_bind+0xb8>)
 800acbc:	f106 010c 	add.w	r1, r6, #12
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	b913      	cbnz	r3, 800acca <tcp_bind+0x32>
 800acc4:	e011      	b.n	800acea <tcp_bind+0x52>
 800acc6:	68db      	ldr	r3, [r3, #12]
 800acc8:	b17b      	cbz	r3, 800acea <tcp_bind+0x52>
        if (cpcb->local_port == port) {
 800acca:	f8b3 c016 	ldrh.w	ip, [r3, #22]
 800acce:	45a4      	cmp	ip, r4
 800acd0:	d1f9      	bne.n	800acc6 <tcp_bind+0x2e>
                (ip_addr_isany(&cpcb->local_ip) ||
 800acd2:	681a      	ldr	r2, [r3, #0]
 800acd4:	b11a      	cbz	r2, 800acde <tcp_bind+0x46>
                 ip_addr_isany(ipaddr) ||
 800acd6:	683d      	ldr	r5, [r7, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800acd8:	b10d      	cbz	r5, 800acde <tcp_bind+0x46>
 800acda:	42aa      	cmp	r2, r5
 800acdc:	d1f3      	bne.n	800acc6 <tcp_bind+0x2e>
              return ERR_USE;
 800acde:	f06f 0007 	mvn.w	r0, #7
}
 800ace2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ipaddr = IP4_ADDR_ANY;
 800ace6:	4f1b      	ldr	r7, [pc, #108]	; (800ad54 <tcp_bind+0xbc>)
 800ace8:	e7de      	b.n	800aca8 <tcp_bind+0x10>
    for (i = 0; i < max_pcb_list; i++) {
 800acea:	428e      	cmp	r6, r1
 800acec:	d006      	beq.n	800acfc <tcp_bind+0x64>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800acee:	f856 3f04 	ldr.w	r3, [r6, #4]!
 800acf2:	e7e5      	b.n	800acc0 <tcp_bind+0x28>
    port = tcp_new_port();
 800acf4:	f7ff ff40 	bl	800ab78 <tcp_new_port>
    if (port == 0) {
 800acf8:	4604      	mov	r4, r0
 800acfa:	b180      	cbz	r0, 800ad1e <tcp_bind+0x86>
  if (!ip_addr_isany(ipaddr)
 800acfc:	683b      	ldr	r3, [r7, #0]
 800acfe:	b10b      	cbz	r3, 800ad04 <tcp_bind+0x6c>
    ip_addr_set(&pcb->local_ip, ipaddr);
 800ad00:	f8c8 3000 	str.w	r3, [r8]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800ad04:	4b14      	ldr	r3, [pc, #80]	; (800ad58 <tcp_bind+0xc0>)
  pcb->local_port = port;
 800ad06:	f8a8 4016 	strh.w	r4, [r8, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800ad0a:	681a      	ldr	r2, [r3, #0]
 800ad0c:	f8c3 8000 	str.w	r8, [r3]
 800ad10:	f8c8 200c 	str.w	r2, [r8, #12]
 800ad14:	f004 f90e 	bl	800ef34 <tcp_timer_needed>
  return ERR_OK;
 800ad18:	2000      	movs	r0, #0
}
 800ad1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return ERR_BUF;
 800ad1e:	f06f 0001 	mvn.w	r0, #1
 800ad22:	e7de      	b.n	800ace2 <tcp_bind+0x4a>
  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800ad24:	4b0d      	ldr	r3, [pc, #52]	; (800ad5c <tcp_bind+0xc4>)
 800ad26:	f240 22ab 	movw	r2, #683	; 0x2ab
 800ad2a:	490d      	ldr	r1, [pc, #52]	; (800ad60 <tcp_bind+0xc8>)
 800ad2c:	480d      	ldr	r0, [pc, #52]	; (800ad64 <tcp_bind+0xcc>)
 800ad2e:	f006 fc6d 	bl	801160c <iprintf>
 800ad32:	f06f 0005 	mvn.w	r0, #5
 800ad36:	e7d4      	b.n	800ace2 <tcp_bind+0x4a>
  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800ad38:	4b08      	ldr	r3, [pc, #32]	; (800ad5c <tcp_bind+0xc4>)
 800ad3a:	f240 22a9 	movw	r2, #681	; 0x2a9
 800ad3e:	490a      	ldr	r1, [pc, #40]	; (800ad68 <tcp_bind+0xd0>)
 800ad40:	4808      	ldr	r0, [pc, #32]	; (800ad64 <tcp_bind+0xcc>)
 800ad42:	f006 fc63 	bl	801160c <iprintf>
 800ad46:	f06f 000f 	mvn.w	r0, #15
 800ad4a:	e7ca      	b.n	800ace2 <tcp_bind+0x4a>
 800ad4c:	08014138 	.word	0x08014138
 800ad50:	24010584 	.word	0x24010584
 800ad54:	08015040 	.word	0x08015040
 800ad58:	24010580 	.word	0x24010580
 800ad5c:	08013a70 	.word	0x08013a70
 800ad60:	08013ad8 	.word	0x08013ad8
 800ad64:	080128dc 	.word	0x080128dc
 800ad68:	08013ac0 	.word	0x08013ac0

0800ad6c <tcp_listen_with_backlog_and_err>:
{
 800ad6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad6e:	4604      	mov	r4, r0
 800ad70:	4617      	mov	r7, r2
  LWIP_ASSERT_CORE_LOCKED();
 800ad72:	f7fb ff83 	bl	8006c7c <sys_check_core_locking>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800ad76:	2c00      	cmp	r4, #0
 800ad78:	d05d      	beq.n	800ae36 <tcp_listen_with_backlog_and_err+0xca>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800ad7a:	7d25      	ldrb	r5, [r4, #20]
 800ad7c:	2d00      	cmp	r5, #0
 800ad7e:	d147      	bne.n	800ae10 <tcp_listen_with_backlog_and_err+0xa4>
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800ad80:	2002      	movs	r0, #2
 800ad82:	f7ff f843 	bl	8009e0c <memp_malloc>
  if (lpcb == NULL) {
 800ad86:	4606      	mov	r6, r0
 800ad88:	2800      	cmp	r0, #0
 800ad8a:	d051      	beq.n	800ae30 <tcp_listen_with_backlog_and_err+0xc4>
  lpcb->callback_arg = pcb->callback_arg;
 800ad8c:	6923      	ldr	r3, [r4, #16]
  lpcb->state = LISTEN;
 800ad8e:	2201      	movs	r2, #1
  lpcb->callback_arg = pcb->callback_arg;
 800ad90:	6103      	str	r3, [r0, #16]
  lpcb->local_port = pcb->local_port;
 800ad92:	8ae3      	ldrh	r3, [r4, #22]
  lpcb->state = LISTEN;
 800ad94:	7502      	strb	r2, [r0, #20]
  lpcb->local_port = pcb->local_port;
 800ad96:	82c3      	strh	r3, [r0, #22]
  lpcb->prio = pcb->prio;
 800ad98:	7d62      	ldrb	r2, [r4, #21]
 800ad9a:	7542      	strb	r2, [r0, #21]
  lpcb->so_options = pcb->so_options;
 800ad9c:	7a62      	ldrb	r2, [r4, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800ad9e:	7205      	strb	r5, [r0, #8]
  lpcb->so_options = pcb->so_options;
 800ada0:	7242      	strb	r2, [r0, #9]
  lpcb->ttl = pcb->ttl;
 800ada2:	7ae2      	ldrb	r2, [r4, #11]
 800ada4:	72c2      	strb	r2, [r0, #11]
  lpcb->tos = pcb->tos;
 800ada6:	7aa2      	ldrb	r2, [r4, #10]
 800ada8:	7282      	strb	r2, [r0, #10]
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800adaa:	6822      	ldr	r2, [r4, #0]
 800adac:	6002      	str	r2, [r0, #0]
  if (pcb->local_port != 0) {
 800adae:	b99b      	cbnz	r3, 800add8 <tcp_listen_with_backlog_and_err+0x6c>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800adb0:	7d23      	ldrb	r3, [r4, #20]
 800adb2:	2b01      	cmp	r3, #1
 800adb4:	d020      	beq.n	800adf8 <tcp_listen_with_backlog_and_err+0x8c>
  memp_free(MEMP_TCP_PCB, pcb);
 800adb6:	4621      	mov	r1, r4
 800adb8:	2001      	movs	r0, #1
 800adba:	f7ff f86d 	bl	8009e98 <memp_free>
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800adbe:	4b23      	ldr	r3, [pc, #140]	; (800ae4c <tcp_listen_with_backlog_and_err+0xe0>)
  lpcb->accept = tcp_accept_null;
 800adc0:	4923      	ldr	r1, [pc, #140]	; (800ae50 <tcp_listen_with_backlog_and_err+0xe4>)
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800adc2:	681a      	ldr	r2, [r3, #0]
  lpcb->accept = tcp_accept_null;
 800adc4:	61b1      	str	r1, [r6, #24]
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800adc6:	60f2      	str	r2, [r6, #12]
 800adc8:	601e      	str	r6, [r3, #0]
 800adca:	f004 f8b3 	bl	800ef34 <tcp_timer_needed>
  res = ERR_OK;
 800adce:	2300      	movs	r3, #0
  if (err != NULL) {
 800add0:	b107      	cbz	r7, 800add4 <tcp_listen_with_backlog_and_err+0x68>
    *err = res;
 800add2:	703b      	strb	r3, [r7, #0]
}
 800add4:	4630      	mov	r0, r6
 800add6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800add8:	4a1e      	ldr	r2, [pc, #120]	; (800ae54 <tcp_listen_with_backlog_and_err+0xe8>)
 800adda:	6813      	ldr	r3, [r2, #0]
 800addc:	42a3      	cmp	r3, r4
 800adde:	d012      	beq.n	800ae06 <tcp_listen_with_backlog_and_err+0x9a>
 800ade0:	b12b      	cbz	r3, 800adee <tcp_listen_with_backlog_and_err+0x82>
 800ade2:	68d9      	ldr	r1, [r3, #12]
 800ade4:	42a1      	cmp	r1, r4
 800ade6:	d01e      	beq.n	800ae26 <tcp_listen_with_backlog_and_err+0xba>
 800ade8:	460b      	mov	r3, r1
 800adea:	2b00      	cmp	r3, #0
 800adec:	d1f9      	bne.n	800ade2 <tcp_listen_with_backlog_and_err+0x76>
 800adee:	2300      	movs	r3, #0
 800adf0:	60e3      	str	r3, [r4, #12]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800adf2:	7d23      	ldrb	r3, [r4, #20]
 800adf4:	2b01      	cmp	r3, #1
 800adf6:	d1de      	bne.n	800adb6 <tcp_listen_with_backlog_and_err+0x4a>
 800adf8:	4b17      	ldr	r3, [pc, #92]	; (800ae58 <tcp_listen_with_backlog_and_err+0xec>)
 800adfa:	22d4      	movs	r2, #212	; 0xd4
 800adfc:	4917      	ldr	r1, [pc, #92]	; (800ae5c <tcp_listen_with_backlog_and_err+0xf0>)
 800adfe:	4818      	ldr	r0, [pc, #96]	; (800ae60 <tcp_listen_with_backlog_and_err+0xf4>)
 800ae00:	f006 fc04 	bl	801160c <iprintf>
 800ae04:	e7d7      	b.n	800adb6 <tcp_listen_with_backlog_and_err+0x4a>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800ae06:	68e3      	ldr	r3, [r4, #12]
 800ae08:	6013      	str	r3, [r2, #0]
 800ae0a:	2300      	movs	r3, #0
 800ae0c:	60e3      	str	r3, [r4, #12]
 800ae0e:	e7f0      	b.n	800adf2 <tcp_listen_with_backlog_and_err+0x86>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800ae10:	4b11      	ldr	r3, [pc, #68]	; (800ae58 <tcp_listen_with_backlog_and_err+0xec>)
 800ae12:	f240 325a 	movw	r2, #858	; 0x35a
 800ae16:	4913      	ldr	r1, [pc, #76]	; (800ae64 <tcp_listen_with_backlog_and_err+0xf8>)
  struct tcp_pcb_listen *lpcb = NULL;
 800ae18:	2600      	movs	r6, #0
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800ae1a:	4811      	ldr	r0, [pc, #68]	; (800ae60 <tcp_listen_with_backlog_and_err+0xf4>)
 800ae1c:	f006 fbf6 	bl	801160c <iprintf>
 800ae20:	f06f 030e 	mvn.w	r3, #14
 800ae24:	e7d4      	b.n	800add0 <tcp_listen_with_backlog_and_err+0x64>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800ae26:	68e2      	ldr	r2, [r4, #12]
 800ae28:	60da      	str	r2, [r3, #12]
 800ae2a:	2300      	movs	r3, #0
 800ae2c:	60e3      	str	r3, [r4, #12]
 800ae2e:	e7e0      	b.n	800adf2 <tcp_listen_with_backlog_and_err+0x86>
    res = ERR_MEM;
 800ae30:	f04f 33ff 	mov.w	r3, #4294967295
 800ae34:	e7cc      	b.n	800add0 <tcp_listen_with_backlog_and_err+0x64>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800ae36:	4b08      	ldr	r3, [pc, #32]	; (800ae58 <tcp_listen_with_backlog_and_err+0xec>)
 800ae38:	f240 3259 	movw	r2, #857	; 0x359
 800ae3c:	490a      	ldr	r1, [pc, #40]	; (800ae68 <tcp_listen_with_backlog_and_err+0xfc>)
  struct tcp_pcb_listen *lpcb = NULL;
 800ae3e:	4626      	mov	r6, r4
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800ae40:	4807      	ldr	r0, [pc, #28]	; (800ae60 <tcp_listen_with_backlog_and_err+0xf4>)
 800ae42:	f006 fbe3 	bl	801160c <iprintf>
 800ae46:	f06f 030f 	mvn.w	r3, #15
 800ae4a:	e7c1      	b.n	800add0 <tcp_listen_with_backlog_and_err+0x64>
 800ae4c:	24010584 	.word	0x24010584
 800ae50:	0800bb19 	.word	0x0800bb19
 800ae54:	24010580 	.word	0x24010580
 800ae58:	08013a70 	.word	0x08013a70
 800ae5c:	08013aac 	.word	0x08013aac
 800ae60:	080128dc 	.word	0x080128dc
 800ae64:	08013b30 	.word	0x08013b30
 800ae68:	08013b00 	.word	0x08013b00

0800ae6c <tcp_listen_with_backlog>:
{
 800ae6c:	b500      	push	{lr}
 800ae6e:	b083      	sub	sp, #12
 800ae70:	e9cd 1000 	strd	r1, r0, [sp]
  LWIP_ASSERT_CORE_LOCKED();
 800ae74:	f7fb ff02 	bl	8006c7c <sys_check_core_locking>
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 800ae78:	2200      	movs	r2, #0
 800ae7a:	e9dd 1000 	ldrd	r1, r0, [sp]
}
 800ae7e:	b003      	add	sp, #12
 800ae80:	f85d eb04 	ldr.w	lr, [sp], #4
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 800ae84:	f7ff bf72 	b.w	800ad6c <tcp_listen_with_backlog_and_err>

0800ae88 <tcp_update_rcv_ann_wnd>:
{
 800ae88:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800ae8a:	4604      	mov	r4, r0
 800ae8c:	b1c8      	cbz	r0, 800aec2 <tcp_update_rcv_ann_wnd+0x3a>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800ae8e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800ae90:	f640 3c68 	movw	ip, #2920	; 0xb68
 800ae94:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800ae96:	f8b4 e032 	ldrh.w	lr, [r4, #50]	; 0x32
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800ae9a:	6a62      	ldr	r2, [r4, #36]	; 0x24
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800ae9c:	1a58      	subs	r0, r3, r1
 800ae9e:	45e6      	cmp	lr, ip
 800aea0:	4410      	add	r0, r2
 800aea2:	bf94      	ite	ls
 800aea4:	eba0 050e 	subls.w	r5, r0, lr
 800aea8:	eba0 050c 	subhi.w	r5, r0, ip
 800aeac:	2d00      	cmp	r5, #0
 800aeae:	db01      	blt.n	800aeb4 <tcp_update_rcv_ann_wnd+0x2c>
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800aeb0:	8563      	strh	r3, [r4, #42]	; 0x2a
}
 800aeb2:	bd38      	pop	{r3, r4, r5, pc}
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800aeb4:	1a53      	subs	r3, r2, r1
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	dd0b      	ble.n	800aed2 <tcp_update_rcv_ann_wnd+0x4a>
 800aeba:	2300      	movs	r3, #0
    return 0;
 800aebc:	4618      	mov	r0, r3
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800aebe:	8563      	strh	r3, [r4, #42]	; 0x2a
}
 800aec0:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800aec2:	4b0c      	ldr	r3, [pc, #48]	; (800aef4 <tcp_update_rcv_ann_wnd+0x6c>)
 800aec4:	f240 32a6 	movw	r2, #934	; 0x3a6
 800aec8:	490b      	ldr	r1, [pc, #44]	; (800aef8 <tcp_update_rcv_ann_wnd+0x70>)
 800aeca:	480c      	ldr	r0, [pc, #48]	; (800aefc <tcp_update_rcv_ann_wnd+0x74>)
 800aecc:	f006 fb9e 	bl	801160c <iprintf>
 800aed0:	e7dd      	b.n	800ae8e <tcp_update_rcv_ann_wnd+0x6>
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800aed2:	1a8d      	subs	r5, r1, r2
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800aed4:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 800aed8:	d203      	bcs.n	800aee2 <tcp_update_rcv_ann_wnd+0x5a>
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800aeda:	b2ab      	uxth	r3, r5
    return 0;
 800aedc:	2000      	movs	r0, #0
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800aede:	8563      	strh	r3, [r4, #42]	; 0x2a
}
 800aee0:	bd38      	pop	{r3, r4, r5, pc}
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800aee2:	4b04      	ldr	r3, [pc, #16]	; (800aef4 <tcp_update_rcv_ann_wnd+0x6c>)
 800aee4:	f240 32b6 	movw	r2, #950	; 0x3b6
 800aee8:	4905      	ldr	r1, [pc, #20]	; (800af00 <tcp_update_rcv_ann_wnd+0x78>)
 800aeea:	4804      	ldr	r0, [pc, #16]	; (800aefc <tcp_update_rcv_ann_wnd+0x74>)
 800aeec:	f006 fb8e 	bl	801160c <iprintf>
 800aef0:	e7f3      	b.n	800aeda <tcp_update_rcv_ann_wnd+0x52>
 800aef2:	bf00      	nop
 800aef4:	08013a70 	.word	0x08013a70
 800aef8:	08013b68 	.word	0x08013b68
 800aefc:	080128dc 	.word	0x080128dc
 800af00:	08013b8c 	.word	0x08013b8c

0800af04 <tcp_recved>:
{
 800af04:	b570      	push	{r4, r5, r6, lr}
 800af06:	4605      	mov	r5, r0
 800af08:	460c      	mov	r4, r1
  LWIP_ASSERT_CORE_LOCKED();
 800af0a:	f7fb feb7 	bl	8006c7c <sys_check_core_locking>
  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800af0e:	b33d      	cbz	r5, 800af60 <tcp_recved+0x5c>
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800af10:	7d2b      	ldrb	r3, [r5, #20]
 800af12:	2b01      	cmp	r3, #1
 800af14:	d01c      	beq.n	800af50 <tcp_recved+0x4c>
  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800af16:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
 800af18:	1919      	adds	r1, r3, r4
 800af1a:	b289      	uxth	r1, r1
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800af1c:	428b      	cmp	r3, r1
 800af1e:	d803      	bhi.n	800af28 <tcp_recved+0x24>
 800af20:	f241 63d0 	movw	r3, #5840	; 0x16d0
 800af24:	4299      	cmp	r1, r3
 800af26:	d901      	bls.n	800af2c <tcp_recved+0x28>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800af28:	f241 61d0 	movw	r1, #5840	; 0x16d0
  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800af2c:	4628      	mov	r0, r5
 800af2e:	8529      	strh	r1, [r5, #40]	; 0x28
 800af30:	f7ff ffaa 	bl	800ae88 <tcp_update_rcv_ann_wnd>
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800af34:	f240 53b3 	movw	r3, #1459	; 0x5b3
 800af38:	4298      	cmp	r0, r3
 800af3a:	d800      	bhi.n	800af3e <tcp_recved+0x3a>
}
 800af3c:	bd70      	pop	{r4, r5, r6, pc}
    tcp_ack_now(pcb);
 800af3e:	8b6b      	ldrh	r3, [r5, #26]
    tcp_output(pcb);
 800af40:	4628      	mov	r0, r5
    tcp_ack_now(pcb);
 800af42:	f043 0302 	orr.w	r3, r3, #2
 800af46:	836b      	strh	r3, [r5, #26]
}
 800af48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    tcp_output(pcb);
 800af4c:	f003 bcce 	b.w	800e8ec <tcp_output>
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800af50:	4b08      	ldr	r3, [pc, #32]	; (800af74 <tcp_recved+0x70>)
 800af52:	f240 32d2 	movw	r2, #978	; 0x3d2
 800af56:	4908      	ldr	r1, [pc, #32]	; (800af78 <tcp_recved+0x74>)
 800af58:	4808      	ldr	r0, [pc, #32]	; (800af7c <tcp_recved+0x78>)
 800af5a:	f006 fb57 	bl	801160c <iprintf>
 800af5e:	e7da      	b.n	800af16 <tcp_recved+0x12>
  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800af60:	4b04      	ldr	r3, [pc, #16]	; (800af74 <tcp_recved+0x70>)
 800af62:	f240 32cf 	movw	r2, #975	; 0x3cf
 800af66:	4906      	ldr	r1, [pc, #24]	; (800af80 <tcp_recved+0x7c>)
 800af68:	4804      	ldr	r0, [pc, #16]	; (800af7c <tcp_recved+0x78>)
}
 800af6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800af6e:	f006 bb4d 	b.w	801160c <iprintf>
 800af72:	bf00      	nop
 800af74:	08013a70 	.word	0x08013a70
 800af78:	08013bc0 	.word	0x08013bc0
 800af7c:	080128dc 	.word	0x080128dc
 800af80:	08013ba8 	.word	0x08013ba8

0800af84 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 800af84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af86:	4604      	mov	r4, r0
 800af88:	460d      	mov	r5, r1
 800af8a:	4617      	mov	r7, r2
 800af8c:	461e      	mov	r6, r3
  struct netif *netif = NULL;
  err_t ret;
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();
 800af8e:	f7fb fe75 	bl	8006c7c <sys_check_core_locking>

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800af92:	2c00      	cmp	r4, #0
 800af94:	f000 8089 	beq.w	800b0aa <tcp_connect+0x126>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800af98:	2d00      	cmp	r5, #0
 800af9a:	d07c      	beq.n	800b096 <tcp_connect+0x112>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 800af9c:	7d23      	ldrb	r3, [r4, #20]
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d169      	bne.n	800b076 <tcp_connect+0xf2>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 800afa2:	682b      	ldr	r3, [r5, #0]
  pcb->remote_port = port;

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800afa4:	7a20      	ldrb	r0, [r4, #8]
  pcb->remote_port = port;
 800afa6:	8327      	strh	r7, [r4, #24]
  ip_addr_set(&pcb->remote_ip, ipaddr);
 800afa8:	6063      	str	r3, [r4, #4]
  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800afaa:	2800      	cmp	r0, #0
 800afac:	d048      	beq.n	800b040 <tcp_connect+0xbc>
    netif = netif_get_by_index(pcb->netif_idx);
 800afae:	f7ff f987 	bl	800a2c0 <netif_get_by_index>
 800afb2:	4605      	mov	r5, r0
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
  }
  if (netif == NULL) {
 800afb4:	2d00      	cmp	r5, #0
 800afb6:	d06b      	beq.n	800b090 <tcp_connect+0x10c>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 800afb8:	6823      	ldr	r3, [r4, #0]
 800afba:	b90b      	cbnz	r3, 800afc0 <tcp_connect+0x3c>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
    if (local_ip == NULL) {
      return ERR_RTE;
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800afbc:	686b      	ldr	r3, [r5, #4]
 800afbe:	6023      	str	r3, [r4, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 800afc0:	8ae7      	ldrh	r7, [r4, #22]
  if (pcb->local_port == 0) {
 800afc2:	b927      	cbnz	r7, 800afce <tcp_connect+0x4a>
    pcb->local_port = tcp_new_port();
 800afc4:	f7ff fdd8 	bl	800ab78 <tcp_new_port>
 800afc8:	82e0      	strh	r0, [r4, #22]
    if (pcb->local_port == 0) {
 800afca:	2800      	cmp	r0, #0
 800afcc:	d05d      	beq.n	800b08a <tcp_connect+0x106>
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800afce:	4b3c      	ldr	r3, [pc, #240]	; (800b0c0 <tcp_connect+0x13c>)
 800afd0:	4a3c      	ldr	r2, [pc, #240]	; (800b0c4 <tcp_connect+0x140>)
 800afd2:	6811      	ldr	r1, [r2, #0]
 800afd4:	681a      	ldr	r2, [r3, #0]
 800afd6:	440a      	add	r2, r1
  pcb->snd_wnd = TCP_WND;
 800afd8:	f241 61d0 	movw	r1, #5840	; 0x16d0
  iss += tcp_ticks;       /* XXX */
 800afdc:	601a      	str	r2, [r3, #0]
  pcb->snd_nxt = iss;
 800afde:	6522      	str	r2, [r4, #80]	; 0x50
  pcb->lastack = iss - 1;
 800afe0:	3a01      	subs	r2, #1
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800afe2:	4b39      	ldr	r3, [pc, #228]	; (800b0c8 <tcp_connect+0x144>)
  pcb->lastack = iss - 1;
 800afe4:	6462      	str	r2, [r4, #68]	; 0x44
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800afe6:	62a3      	str	r3, [r4, #40]	; 0x28
#if LWIP_IPV4
  {
    if (outif == NULL) {
      return sendmss;
    }
    mtu = outif->mtu;
 800afe8:	8cab      	ldrh	r3, [r5, #36]	; 0x24
  pcb->snd_wnd = TCP_WND;
 800afea:	f8a4 1060 	strh.w	r1, [r4, #96]	; 0x60
  pcb->snd_lbb = iss - 1;
 800afee:	e9c4 2216 	strd	r2, r2, [r4, #88]	; 0x58
  pcb->rcv_nxt = 0;
 800aff2:	2200      	movs	r2, #0
 800aff4:	6262      	str	r2, [r4, #36]	; 0x24
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800aff6:	62e2      	str	r2, [r4, #44]	; 0x2c
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d036      	beq.n	800b06a <tcp_connect+0xe6>
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800affc:	2b28      	cmp	r3, #40	; 0x28
 800affe:	d906      	bls.n	800b00e <tcp_connect+0x8a>
 800b000:	3b28      	subs	r3, #40	; 0x28
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800b002:	b29a      	uxth	r2, r3
 800b004:	f5b2 7f06 	cmp.w	r2, #536	; 0x218
 800b008:	bf28      	it	cs
 800b00a:	f44f 7206 	movcs.w	r2, #536	; 0x218
  pcb->cwnd = 1;
 800b00e:	2301      	movs	r3, #1
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 800b010:	2102      	movs	r1, #2
 800b012:	4620      	mov	r0, r4
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 800b014:	8662      	strh	r2, [r4, #50]	; 0x32
  pcb->connected = connected;
 800b016:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
  pcb->cwnd = 1;
 800b01a:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 800b01e:	f003 fa49 	bl	800e4b4 <tcp_enqueue_flags>
  if (ret == ERR_OK) {
 800b022:	4605      	mov	r5, r0
 800b024:	b9f8      	cbnz	r0, 800b066 <tcp_connect+0xe2>
    pcb->state = SYN_SENT;
 800b026:	2302      	movs	r3, #2
 800b028:	7523      	strb	r3, [r4, #20]
    if (old_local_port != 0) {
 800b02a:	b187      	cbz	r7, 800b04e <tcp_connect+0xca>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800b02c:	4a27      	ldr	r2, [pc, #156]	; (800b0cc <tcp_connect+0x148>)
 800b02e:	6813      	ldr	r3, [r2, #0]
 800b030:	42a3      	cmp	r3, r4
 800b032:	d01d      	beq.n	800b070 <tcp_connect+0xec>
 800b034:	b15b      	cbz	r3, 800b04e <tcp_connect+0xca>
 800b036:	68da      	ldr	r2, [r3, #12]
 800b038:	42a2      	cmp	r2, r4
 800b03a:	d006      	beq.n	800b04a <tcp_connect+0xc6>
 800b03c:	4613      	mov	r3, r2
 800b03e:	e7f9      	b.n	800b034 <tcp_connect+0xb0>
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800b040:	1d20      	adds	r0, r4, #4
 800b042:	f004 fe69 	bl	800fd18 <ip4_route>
 800b046:	4605      	mov	r5, r0
 800b048:	e7b4      	b.n	800afb4 <tcp_connect+0x30>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800b04a:	68e2      	ldr	r2, [r4, #12]
 800b04c:	60da      	str	r2, [r3, #12]
    TCP_REG_ACTIVE(pcb);
 800b04e:	4b20      	ldr	r3, [pc, #128]	; (800b0d0 <tcp_connect+0x14c>)
 800b050:	681a      	ldr	r2, [r3, #0]
 800b052:	601c      	str	r4, [r3, #0]
 800b054:	60e2      	str	r2, [r4, #12]
 800b056:	f003 ff6d 	bl	800ef34 <tcp_timer_needed>
 800b05a:	4b1e      	ldr	r3, [pc, #120]	; (800b0d4 <tcp_connect+0x150>)
 800b05c:	2201      	movs	r2, #1
    tcp_output(pcb);
 800b05e:	4620      	mov	r0, r4
    TCP_REG_ACTIVE(pcb);
 800b060:	701a      	strb	r2, [r3, #0]
    tcp_output(pcb);
 800b062:	f003 fc43 	bl	800e8ec <tcp_output>
}
 800b066:	4628      	mov	r0, r5
 800b068:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b06a:	f44f 7206 	mov.w	r2, #536	; 0x218
 800b06e:	e7ce      	b.n	800b00e <tcp_connect+0x8a>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800b070:	68e3      	ldr	r3, [r4, #12]
 800b072:	6013      	str	r3, [r2, #0]
 800b074:	e7eb      	b.n	800b04e <tcp_connect+0xca>
  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 800b076:	4b18      	ldr	r3, [pc, #96]	; (800b0d8 <tcp_connect+0x154>)
 800b078:	f44f 6287 	mov.w	r2, #1080	; 0x438
 800b07c:	4917      	ldr	r1, [pc, #92]	; (800b0dc <tcp_connect+0x158>)
 800b07e:	f06f 0509 	mvn.w	r5, #9
 800b082:	4817      	ldr	r0, [pc, #92]	; (800b0e0 <tcp_connect+0x15c>)
 800b084:	f006 fac2 	bl	801160c <iprintf>
 800b088:	e7ed      	b.n	800b066 <tcp_connect+0xe2>
      return ERR_BUF;
 800b08a:	f06f 0501 	mvn.w	r5, #1
 800b08e:	e7ea      	b.n	800b066 <tcp_connect+0xe2>
    return ERR_RTE;
 800b090:	f06f 0503 	mvn.w	r5, #3
 800b094:	e7e7      	b.n	800b066 <tcp_connect+0xe2>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800b096:	4b10      	ldr	r3, [pc, #64]	; (800b0d8 <tcp_connect+0x154>)
 800b098:	f240 4236 	movw	r2, #1078	; 0x436
 800b09c:	4911      	ldr	r1, [pc, #68]	; (800b0e4 <tcp_connect+0x160>)
 800b09e:	f06f 050f 	mvn.w	r5, #15
 800b0a2:	480f      	ldr	r0, [pc, #60]	; (800b0e0 <tcp_connect+0x15c>)
 800b0a4:	f006 fab2 	bl	801160c <iprintf>
 800b0a8:	e7dd      	b.n	800b066 <tcp_connect+0xe2>
  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800b0aa:	4b0b      	ldr	r3, [pc, #44]	; (800b0d8 <tcp_connect+0x154>)
 800b0ac:	f240 4235 	movw	r2, #1077	; 0x435
 800b0b0:	490d      	ldr	r1, [pc, #52]	; (800b0e8 <tcp_connect+0x164>)
 800b0b2:	f06f 050f 	mvn.w	r5, #15
 800b0b6:	480a      	ldr	r0, [pc, #40]	; (800b0e0 <tcp_connect+0x15c>)
 800b0b8:	f006 faa8 	bl	801160c <iprintf>
 800b0bc:	e7d3      	b.n	800b066 <tcp_connect+0xe2>
 800b0be:	bf00      	nop
 800b0c0:	24000028 	.word	0x24000028
 800b0c4:	24010588 	.word	0x24010588
 800b0c8:	16d016d0 	.word	0x16d016d0
 800b0cc:	24010580 	.word	0x24010580
 800b0d0:	24010578 	.word	0x24010578
 800b0d4:	2401057c 	.word	0x2401057c
 800b0d8:	08013a70 	.word	0x08013a70
 800b0dc:	08013c20 	.word	0x08013c20
 800b0e0:	080128dc 	.word	0x080128dc
 800b0e4:	08013c04 	.word	0x08013c04
 800b0e8:	08013be8 	.word	0x08013be8

0800b0ec <tcp_segs_free>:
  while (seg != NULL) {
 800b0ec:	b170      	cbz	r0, 800b10c <tcp_segs_free+0x20>
{
 800b0ee:	b538      	push	{r3, r4, r5, lr}
 800b0f0:	4604      	mov	r4, r0
      pbuf_free(seg->p);
 800b0f2:	4625      	mov	r5, r4
    struct tcp_seg *next = seg->next;
 800b0f4:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 800b0f6:	6868      	ldr	r0, [r5, #4]
 800b0f8:	b108      	cbz	r0, 800b0fe <tcp_segs_free+0x12>
      pbuf_free(seg->p);
 800b0fa:	f7ff fa93 	bl	800a624 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 800b0fe:	4629      	mov	r1, r5
 800b100:	2003      	movs	r0, #3
 800b102:	f7fe fec9 	bl	8009e98 <memp_free>
  while (seg != NULL) {
 800b106:	2c00      	cmp	r4, #0
 800b108:	d1f3      	bne.n	800b0f2 <tcp_segs_free+0x6>
}
 800b10a:	bd38      	pop	{r3, r4, r5, pc}
 800b10c:	4770      	bx	lr
 800b10e:	bf00      	nop

0800b110 <tcp_seg_free>:
  if (seg != NULL) {
 800b110:	b158      	cbz	r0, 800b12a <tcp_seg_free+0x1a>
{
 800b112:	b510      	push	{r4, lr}
 800b114:	4604      	mov	r4, r0
    if (seg->p != NULL) {
 800b116:	6840      	ldr	r0, [r0, #4]
 800b118:	b108      	cbz	r0, 800b11e <tcp_seg_free+0xe>
      pbuf_free(seg->p);
 800b11a:	f7ff fa83 	bl	800a624 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 800b11e:	4621      	mov	r1, r4
 800b120:	2003      	movs	r0, #3
}
 800b122:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    memp_free(MEMP_TCP_SEG, seg);
 800b126:	f7fe beb7 	b.w	8009e98 <memp_free>
 800b12a:	4770      	bx	lr

0800b12c <tcp_seg_copy>:
{
 800b12c:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800b12e:	4605      	mov	r5, r0
 800b130:	b188      	cbz	r0, 800b156 <tcp_seg_copy+0x2a>
  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800b132:	2003      	movs	r0, #3
 800b134:	f7fe fe6a 	bl	8009e0c <memp_malloc>
  if (cseg == NULL) {
 800b138:	4604      	mov	r4, r0
 800b13a:	b150      	cbz	r0, 800b152 <tcp_seg_copy+0x26>
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800b13c:	6868      	ldr	r0, [r5, #4]
 800b13e:	6829      	ldr	r1, [r5, #0]
 800b140:	68aa      	ldr	r2, [r5, #8]
 800b142:	68eb      	ldr	r3, [r5, #12]
 800b144:	6060      	str	r0, [r4, #4]
 800b146:	6021      	str	r1, [r4, #0]
  pbuf_ref(cseg->p);
 800b148:	6860      	ldr	r0, [r4, #4]
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800b14a:	60a2      	str	r2, [r4, #8]
 800b14c:	60e3      	str	r3, [r4, #12]
  pbuf_ref(cseg->p);
 800b14e:	f7ff fbeb 	bl	800a928 <pbuf_ref>
}
 800b152:	4620      	mov	r0, r4
 800b154:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800b156:	4b04      	ldr	r3, [pc, #16]	; (800b168 <tcp_seg_copy+0x3c>)
 800b158:	f240 6282 	movw	r2, #1666	; 0x682
 800b15c:	4903      	ldr	r1, [pc, #12]	; (800b16c <tcp_seg_copy+0x40>)
 800b15e:	4804      	ldr	r0, [pc, #16]	; (800b170 <tcp_seg_copy+0x44>)
 800b160:	f006 fa54 	bl	801160c <iprintf>
 800b164:	e7e5      	b.n	800b132 <tcp_seg_copy+0x6>
 800b166:	bf00      	nop
 800b168:	08013a70 	.word	0x08013a70
 800b16c:	08013c50 	.word	0x08013c50
 800b170:	080128dc 	.word	0x080128dc

0800b174 <tcp_arg>:
{
 800b174:	b538      	push	{r3, r4, r5, lr}
 800b176:	4604      	mov	r4, r0
 800b178:	460d      	mov	r5, r1
  LWIP_ASSERT_CORE_LOCKED();
 800b17a:	f7fb fd7f 	bl	8006c7c <sys_check_core_locking>
  if (pcb != NULL) {
 800b17e:	b104      	cbz	r4, 800b182 <tcp_arg+0xe>
    pcb->callback_arg = arg;
 800b180:	6125      	str	r5, [r4, #16]
}
 800b182:	bd38      	pop	{r3, r4, r5, pc}

0800b184 <tcp_recv>:
{
 800b184:	b538      	push	{r3, r4, r5, lr}
 800b186:	4604      	mov	r4, r0
 800b188:	460d      	mov	r5, r1
  LWIP_ASSERT_CORE_LOCKED();
 800b18a:	f7fb fd77 	bl	8006c7c <sys_check_core_locking>
  if (pcb != NULL) {
 800b18e:	b124      	cbz	r4, 800b19a <tcp_recv+0x16>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800b190:	7d23      	ldrb	r3, [r4, #20]
 800b192:	2b01      	cmp	r3, #1
 800b194:	d002      	beq.n	800b19c <tcp_recv+0x18>
    pcb->recv = recv;
 800b196:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
}
 800b19a:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800b19c:	4b03      	ldr	r3, [pc, #12]	; (800b1ac <tcp_recv+0x28>)
 800b19e:	f240 72df 	movw	r2, #2015	; 0x7df
 800b1a2:	4903      	ldr	r1, [pc, #12]	; (800b1b0 <tcp_recv+0x2c>)
 800b1a4:	4803      	ldr	r0, [pc, #12]	; (800b1b4 <tcp_recv+0x30>)
 800b1a6:	f006 fa31 	bl	801160c <iprintf>
 800b1aa:	e7f4      	b.n	800b196 <tcp_recv+0x12>
 800b1ac:	08013a70 	.word	0x08013a70
 800b1b0:	08013c6c 	.word	0x08013c6c
 800b1b4:	080128dc 	.word	0x080128dc

0800b1b8 <tcp_sent>:
{
 800b1b8:	b538      	push	{r3, r4, r5, lr}
 800b1ba:	4604      	mov	r4, r0
 800b1bc:	460d      	mov	r5, r1
  LWIP_ASSERT_CORE_LOCKED();
 800b1be:	f7fb fd5d 	bl	8006c7c <sys_check_core_locking>
  if (pcb != NULL) {
 800b1c2:	b124      	cbz	r4, 800b1ce <tcp_sent+0x16>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800b1c4:	7d23      	ldrb	r3, [r4, #20]
 800b1c6:	2b01      	cmp	r3, #1
 800b1c8:	d002      	beq.n	800b1d0 <tcp_sent+0x18>
    pcb->sent = sent;
 800b1ca:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
}
 800b1ce:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800b1d0:	4b03      	ldr	r3, [pc, #12]	; (800b1e0 <tcp_sent+0x28>)
 800b1d2:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800b1d6:	4903      	ldr	r1, [pc, #12]	; (800b1e4 <tcp_sent+0x2c>)
 800b1d8:	4803      	ldr	r0, [pc, #12]	; (800b1e8 <tcp_sent+0x30>)
 800b1da:	f006 fa17 	bl	801160c <iprintf>
 800b1de:	e7f4      	b.n	800b1ca <tcp_sent+0x12>
 800b1e0:	08013a70 	.word	0x08013a70
 800b1e4:	08013c94 	.word	0x08013c94
 800b1e8:	080128dc 	.word	0x080128dc

0800b1ec <tcp_err>:
{
 800b1ec:	b538      	push	{r3, r4, r5, lr}
 800b1ee:	4604      	mov	r4, r0
 800b1f0:	460d      	mov	r5, r1
  LWIP_ASSERT_CORE_LOCKED();
 800b1f2:	f7fb fd43 	bl	8006c7c <sys_check_core_locking>
  if (pcb != NULL) {
 800b1f6:	b124      	cbz	r4, 800b202 <tcp_err+0x16>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800b1f8:	7d23      	ldrb	r3, [r4, #20]
 800b1fa:	2b01      	cmp	r3, #1
 800b1fc:	d002      	beq.n	800b204 <tcp_err+0x18>
    pcb->errf = err;
 800b1fe:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
}
 800b202:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800b204:	4b03      	ldr	r3, [pc, #12]	; (800b214 <tcp_err+0x28>)
 800b206:	f640 020d 	movw	r2, #2061	; 0x80d
 800b20a:	4903      	ldr	r1, [pc, #12]	; (800b218 <tcp_err+0x2c>)
 800b20c:	4803      	ldr	r0, [pc, #12]	; (800b21c <tcp_err+0x30>)
 800b20e:	f006 f9fd 	bl	801160c <iprintf>
 800b212:	e7f4      	b.n	800b1fe <tcp_err+0x12>
 800b214:	08013a70 	.word	0x08013a70
 800b218:	08013cbc 	.word	0x08013cbc
 800b21c:	080128dc 	.word	0x080128dc

0800b220 <tcp_accept>:
{
 800b220:	b538      	push	{r3, r4, r5, lr}
 800b222:	4604      	mov	r4, r0
 800b224:	460d      	mov	r5, r1
  LWIP_ASSERT_CORE_LOCKED();
 800b226:	f7fb fd29 	bl	8006c7c <sys_check_core_locking>
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800b22a:	b11c      	cbz	r4, 800b234 <tcp_accept+0x14>
 800b22c:	7d23      	ldrb	r3, [r4, #20]
 800b22e:	2b01      	cmp	r3, #1
    lpcb->accept = accept;
 800b230:	bf08      	it	eq
 800b232:	61a5      	streq	r5, [r4, #24]
}
 800b234:	bd38      	pop	{r3, r4, r5, pc}
 800b236:	bf00      	nop

0800b238 <tcp_poll>:
{
 800b238:	b570      	push	{r4, r5, r6, lr}
 800b23a:	4604      	mov	r4, r0
 800b23c:	460e      	mov	r6, r1
 800b23e:	4615      	mov	r5, r2
  LWIP_ASSERT_CORE_LOCKED();
 800b240:	f7fb fd1c 	bl	8006c7c <sys_check_core_locking>
  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800b244:	b18c      	cbz	r4, 800b26a <tcp_poll+0x32>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800b246:	7d23      	ldrb	r3, [r4, #20]
 800b248:	2b01      	cmp	r3, #1
 800b24a:	d003      	beq.n	800b254 <tcp_poll+0x1c>
  pcb->poll = poll;
 800b24c:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
  pcb->pollinterval = interval;
 800b250:	7765      	strb	r5, [r4, #29]
}
 800b252:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800b254:	4b09      	ldr	r3, [pc, #36]	; (800b27c <tcp_poll+0x44>)
 800b256:	f640 023e 	movw	r2, #2110	; 0x83e
 800b25a:	4909      	ldr	r1, [pc, #36]	; (800b280 <tcp_poll+0x48>)
 800b25c:	4809      	ldr	r0, [pc, #36]	; (800b284 <tcp_poll+0x4c>)
 800b25e:	f006 f9d5 	bl	801160c <iprintf>
  pcb->poll = poll;
 800b262:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
  pcb->pollinterval = interval;
 800b266:	7765      	strb	r5, [r4, #29]
}
 800b268:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800b26a:	4b04      	ldr	r3, [pc, #16]	; (800b27c <tcp_poll+0x44>)
 800b26c:	f640 023d 	movw	r2, #2109	; 0x83d
 800b270:	4905      	ldr	r1, [pc, #20]	; (800b288 <tcp_poll+0x50>)
 800b272:	4804      	ldr	r0, [pc, #16]	; (800b284 <tcp_poll+0x4c>)
}
 800b274:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800b278:	f006 b9c8 	b.w	801160c <iprintf>
 800b27c:	08013a70 	.word	0x08013a70
 800b280:	08013cfc 	.word	0x08013cfc
 800b284:	080128dc 	.word	0x080128dc
 800b288:	08013ce4 	.word	0x08013ce4

0800b28c <tcp_pcb_purge>:
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800b28c:	2800      	cmp	r0, #0
 800b28e:	d041      	beq.n	800b314 <tcp_pcb_purge+0x88>
{
 800b290:	b570      	push	{r4, r5, r6, lr}
  if (pcb->state != CLOSED &&
 800b292:	7d03      	ldrb	r3, [r0, #20]
 800b294:	4605      	mov	r5, r0
      pcb->state != TIME_WAIT &&
 800b296:	2b0a      	cmp	r3, #10
 800b298:	d001      	beq.n	800b29e <tcp_pcb_purge+0x12>
 800b29a:	2b01      	cmp	r3, #1
 800b29c:	d800      	bhi.n	800b2a0 <tcp_pcb_purge+0x14>
}
 800b29e:	bd70      	pop	{r4, r5, r6, pc}
    if (pcb->refused_data != NULL) {
 800b2a0:	6f80      	ldr	r0, [r0, #120]	; 0x78
 800b2a2:	b118      	cbz	r0, 800b2ac <tcp_pcb_purge+0x20>
      pbuf_free(pcb->refused_data);
 800b2a4:	f7ff f9be 	bl	800a624 <pbuf_free>
      pcb->refused_data = NULL;
 800b2a8:	2300      	movs	r3, #0
 800b2aa:	67ab      	str	r3, [r5, #120]	; 0x78
    if (pcb->ooseq != NULL) {
 800b2ac:	6f6c      	ldr	r4, [r5, #116]	; 0x74
 800b2ae:	b164      	cbz	r4, 800b2ca <tcp_pcb_purge+0x3e>
      pbuf_free(seg->p);
 800b2b0:	4626      	mov	r6, r4
    struct tcp_seg *next = seg->next;
 800b2b2:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 800b2b4:	6870      	ldr	r0, [r6, #4]
 800b2b6:	b108      	cbz	r0, 800b2bc <tcp_pcb_purge+0x30>
      pbuf_free(seg->p);
 800b2b8:	f7ff f9b4 	bl	800a624 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 800b2bc:	4631      	mov	r1, r6
 800b2be:	2003      	movs	r0, #3
 800b2c0:	f7fe fdea 	bl	8009e98 <memp_free>
  while (seg != NULL) {
 800b2c4:	2c00      	cmp	r4, #0
 800b2c6:	d1f3      	bne.n	800b2b0 <tcp_pcb_purge+0x24>
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
  if (pcb->ooseq) {
    tcp_segs_free(pcb->ooseq);
    pcb->ooseq = NULL;
 800b2c8:	676c      	str	r4, [r5, #116]	; 0x74
    pcb->rtime = -1;
 800b2ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
    tcp_segs_free(pcb->unsent);
 800b2ce:	6eec      	ldr	r4, [r5, #108]	; 0x6c
    pcb->rtime = -1;
 800b2d0:	862b      	strh	r3, [r5, #48]	; 0x30
  while (seg != NULL) {
 800b2d2:	b15c      	cbz	r4, 800b2ec <tcp_pcb_purge+0x60>
      pbuf_free(seg->p);
 800b2d4:	4626      	mov	r6, r4
    struct tcp_seg *next = seg->next;
 800b2d6:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 800b2d8:	6870      	ldr	r0, [r6, #4]
 800b2da:	b108      	cbz	r0, 800b2e0 <tcp_pcb_purge+0x54>
      pbuf_free(seg->p);
 800b2dc:	f7ff f9a2 	bl	800a624 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 800b2e0:	4631      	mov	r1, r6
 800b2e2:	2003      	movs	r0, #3
 800b2e4:	f7fe fdd8 	bl	8009e98 <memp_free>
  while (seg != NULL) {
 800b2e8:	2c00      	cmp	r4, #0
 800b2ea:	d1f3      	bne.n	800b2d4 <tcp_pcb_purge+0x48>
    tcp_segs_free(pcb->unacked);
 800b2ec:	6f2c      	ldr	r4, [r5, #112]	; 0x70
  while (seg != NULL) {
 800b2ee:	b15c      	cbz	r4, 800b308 <tcp_pcb_purge+0x7c>
      pbuf_free(seg->p);
 800b2f0:	4626      	mov	r6, r4
    struct tcp_seg *next = seg->next;
 800b2f2:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 800b2f4:	6870      	ldr	r0, [r6, #4]
 800b2f6:	b108      	cbz	r0, 800b2fc <tcp_pcb_purge+0x70>
      pbuf_free(seg->p);
 800b2f8:	f7ff f994 	bl	800a624 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 800b2fc:	4631      	mov	r1, r6
 800b2fe:	2003      	movs	r0, #3
 800b300:	f7fe fdca 	bl	8009e98 <memp_free>
  while (seg != NULL) {
 800b304:	2c00      	cmp	r4, #0
 800b306:	d1f3      	bne.n	800b2f0 <tcp_pcb_purge+0x64>
    pcb->unacked = pcb->unsent = NULL;
 800b308:	2300      	movs	r3, #0
 800b30a:	e9c5 331b 	strd	r3, r3, [r5, #108]	; 0x6c
    pcb->unsent_oversize = 0;
 800b30e:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
}
 800b312:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800b314:	4b03      	ldr	r3, [pc, #12]	; (800b324 <tcp_pcb_purge+0x98>)
 800b316:	f640 0251 	movw	r2, #2129	; 0x851
 800b31a:	4903      	ldr	r1, [pc, #12]	; (800b328 <tcp_pcb_purge+0x9c>)
 800b31c:	4803      	ldr	r0, [pc, #12]	; (800b32c <tcp_pcb_purge+0xa0>)
 800b31e:	f006 b975 	b.w	801160c <iprintf>
 800b322:	bf00      	nop
 800b324:	08013a70 	.word	0x08013a70
 800b328:	08013d1c 	.word	0x08013d1c
 800b32c:	080128dc 	.word	0x080128dc

0800b330 <tcp_slowtmr>:
{
 800b330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  ++tcp_ticks;
 800b334:	4da9      	ldr	r5, [pc, #676]	; (800b5dc <tcp_slowtmr+0x2ac>)
{
 800b336:	b087      	sub	sp, #28
  ++tcp_timer_ctr;
 800b338:	f8df b2cc 	ldr.w	fp, [pc, #716]	; 800b608 <tcp_slowtmr+0x2d8>
  ++tcp_ticks;
 800b33c:	682b      	ldr	r3, [r5, #0]
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800b33e:	4fa8      	ldr	r7, [pc, #672]	; (800b5e0 <tcp_slowtmr+0x2b0>)
  ++tcp_ticks;
 800b340:	3301      	adds	r3, #1
 800b342:	602b      	str	r3, [r5, #0]
  ++tcp_timer_ctr;
 800b344:	f89b 3000 	ldrb.w	r3, [fp]
 800b348:	3301      	adds	r3, #1
 800b34a:	f88b 3000 	strb.w	r3, [fp]
  pcb = tcp_active_pcbs;
 800b34e:	4ba5      	ldr	r3, [pc, #660]	; (800b5e4 <tcp_slowtmr+0x2b4>)
 800b350:	681c      	ldr	r4, [r3, #0]
  while (pcb != NULL) {
 800b352:	2c00      	cmp	r4, #0
 800b354:	f000 808a 	beq.w	800b46c <tcp_slowtmr+0x13c>
  prev = NULL;
 800b358:	2600      	movs	r6, #0
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800b35a:	46b1      	mov	r9, r6
 800b35c:	7d23      	ldrb	r3, [r4, #20]
 800b35e:	2b00      	cmp	r3, #0
 800b360:	f000 80fc 	beq.w	800b55c <tcp_slowtmr+0x22c>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800b364:	2b01      	cmp	r3, #1
 800b366:	f000 8104 	beq.w	800b572 <tcp_slowtmr+0x242>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800b36a:	2b0a      	cmp	r3, #10
 800b36c:	f000 810c 	beq.w	800b588 <tcp_slowtmr+0x258>
    if (pcb->last_timer == tcp_timer_ctr) {
 800b370:	f89b 2000 	ldrb.w	r2, [fp]
 800b374:	7fa3      	ldrb	r3, [r4, #30]
 800b376:	4293      	cmp	r3, r2
 800b378:	f000 8113 	beq.w	800b5a2 <tcp_slowtmr+0x272>
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800b37c:	7d23      	ldrb	r3, [r4, #20]
    pcb->last_timer = tcp_timer_ctr;
 800b37e:	77a2      	strb	r2, [r4, #30]
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800b380:	2b02      	cmp	r3, #2
 800b382:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 800b386:	f000 8112 	beq.w	800b5ae <tcp_slowtmr+0x27e>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800b38a:	2a0b      	cmp	r2, #11
 800b38c:	f240 80cb 	bls.w	800b526 <tcp_slowtmr+0x1f6>
      ++pcb_remove;
 800b390:	f04f 0801 	mov.w	r8, #1
    if (pcb->state == FIN_WAIT_2) {
 800b394:	2b06      	cmp	r3, #6
 800b396:	f000 80b7 	beq.w	800b508 <tcp_slowtmr+0x1d8>
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800b39a:	f894 a009 	ldrb.w	sl, [r4, #9]
 800b39e:	f01a 0a08 	ands.w	sl, sl, #8
 800b3a2:	d01d      	beq.n	800b3e0 <tcp_slowtmr+0xb0>
 800b3a4:	2b04      	cmp	r3, #4
 800b3a6:	d007      	beq.n	800b3b8 <tcp_slowtmr+0x88>
 800b3a8:	f1a3 0307 	sub.w	r3, r3, #7
 800b3ac:	fab3 f383 	clz	r3, r3
 800b3b0:	095b      	lsrs	r3, r3, #5
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	f000 80b4 	beq.w	800b520 <tcp_slowtmr+0x1f0>
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800b3b8:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 800b3bc:	4b8a      	ldr	r3, [pc, #552]	; (800b5e8 <tcp_slowtmr+0x2b8>)
 800b3be:	488b      	ldr	r0, [pc, #556]	; (800b5ec <tcp_slowtmr+0x2bc>)
 800b3c0:	440b      	add	r3, r1
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b3c2:	682a      	ldr	r2, [r5, #0]
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800b3c4:	fba0 0303 	umull	r0, r3, r0, r3
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b3c8:	6a20      	ldr	r0, [r4, #32]
 800b3ca:	1a12      	subs	r2, r2, r0
 800b3cc:	ebb2 1f53 	cmp.w	r2, r3, lsr #5
 800b3d0:	f240 8160 	bls.w	800b694 <tcp_slowtmr+0x364>
        ++pcb_remove;
 800b3d4:	f108 0801 	add.w	r8, r8, #1
        ++pcb_reset;
 800b3d8:	f04f 0a01 	mov.w	sl, #1
        ++pcb_remove;
 800b3dc:	fa5f f888 	uxtb.w	r8, r8
    if (pcb->ooseq != NULL &&
 800b3e0:	6f66      	ldr	r6, [r4, #116]	; 0x74
 800b3e2:	b156      	cbz	r6, 800b3fa <tcp_slowtmr+0xca>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800b3e4:	682b      	ldr	r3, [r5, #0]
 800b3e6:	6a22      	ldr	r2, [r4, #32]
 800b3e8:	1a9a      	subs	r2, r3, r2
 800b3ea:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 800b3ee:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    if (pcb->ooseq != NULL &&
 800b3f2:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
 800b3f6:	f080 80e1 	bcs.w	800b5bc <tcp_slowtmr+0x28c>
    if (pcb->state == SYN_RCVD) {
 800b3fa:	7d23      	ldrb	r3, [r4, #20]
 800b3fc:	2b03      	cmp	r3, #3
 800b3fe:	d057      	beq.n	800b4b0 <tcp_slowtmr+0x180>
    if (pcb->state == LAST_ACK) {
 800b400:	2b09      	cmp	r3, #9
 800b402:	d15a      	bne.n	800b4ba <tcp_slowtmr+0x18a>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800b404:	682b      	ldr	r3, [r5, #0]
 800b406:	6a22      	ldr	r2, [r4, #32]
 800b408:	1a9b      	subs	r3, r3, r2
 800b40a:	2bf0      	cmp	r3, #240	; 0xf0
 800b40c:	d955      	bls.n	800b4ba <tcp_slowtmr+0x18a>
      tcp_pcb_purge(pcb);
 800b40e:	4620      	mov	r0, r4
      tcp_err_fn err_fn = pcb->errf;
 800b410:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
      tcp_pcb_purge(pcb);
 800b414:	f7ff ff3a 	bl	800b28c <tcp_pcb_purge>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800b418:	4b72      	ldr	r3, [pc, #456]	; (800b5e4 <tcp_slowtmr+0x2b4>)
 800b41a:	681b      	ldr	r3, [r3, #0]
      if (prev != NULL) {
 800b41c:	f1b9 0f00 	cmp.w	r9, #0
 800b420:	f000 817e 	beq.w	800b720 <tcp_slowtmr+0x3f0>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800b424:	42a3      	cmp	r3, r4
 800b426:	f000 81da 	beq.w	800b7de <tcp_slowtmr+0x4ae>
        prev->next = pcb->next;
 800b42a:	68e3      	ldr	r3, [r4, #12]
 800b42c:	f8c9 300c 	str.w	r3, [r9, #12]
      if (pcb_reset) {
 800b430:	f1ba 0f00 	cmp.w	sl, #0
 800b434:	f040 8147 	bne.w	800b6c6 <tcp_slowtmr+0x396>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800b438:	7d23      	ldrb	r3, [r4, #20]
 800b43a:	2b01      	cmp	r3, #1
      pcb = pcb->next;
 800b43c:	e9d4 8a03 	ldrd	r8, sl, [r4, #12]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800b440:	f000 8153 	beq.w	800b6ea <tcp_slowtmr+0x3ba>
  memp_free(MEMP_TCP_PCB, pcb);
 800b444:	4621      	mov	r1, r4
 800b446:	2001      	movs	r0, #1
 800b448:	f7fe fd26 	bl	8009e98 <memp_free>
      tcp_active_pcbs_changed = 0;
 800b44c:	4c68      	ldr	r4, [pc, #416]	; (800b5f0 <tcp_slowtmr+0x2c0>)
 800b44e:	2300      	movs	r3, #0
 800b450:	7023      	strb	r3, [r4, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800b452:	b13e      	cbz	r6, 800b464 <tcp_slowtmr+0x134>
 800b454:	f06f 010c 	mvn.w	r1, #12
 800b458:	4650      	mov	r0, sl
 800b45a:	47b0      	blx	r6
      if (tcp_active_pcbs_changed) {
 800b45c:	7823      	ldrb	r3, [r4, #0]
 800b45e:	2b00      	cmp	r3, #0
 800b460:	f47f af75 	bne.w	800b34e <tcp_slowtmr+0x1e>
      pcb = pcb->next;
 800b464:	4644      	mov	r4, r8
  while (pcb != NULL) {
 800b466:	2c00      	cmp	r4, #0
 800b468:	f47f af78 	bne.w	800b35c <tcp_slowtmr+0x2c>
  pcb = tcp_tw_pcbs;
 800b46c:	f8df 919c 	ldr.w	r9, [pc, #412]	; 800b60c <tcp_slowtmr+0x2dc>
 800b470:	f8d9 4000 	ldr.w	r4, [r9]
  while (pcb != NULL) {
 800b474:	b1cc      	cbz	r4, 800b4aa <tcp_slowtmr+0x17a>
  prev = NULL;
 800b476:	2600      	movs	r6, #0
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800b478:	f8df 8164 	ldr.w	r8, [pc, #356]	; 800b5e0 <tcp_slowtmr+0x2b0>
 800b47c:	f8df a190 	ldr.w	sl, [pc, #400]	; 800b610 <tcp_slowtmr+0x2e0>
 800b480:	4f5c      	ldr	r7, [pc, #368]	; (800b5f4 <tcp_slowtmr+0x2c4>)
 800b482:	7d23      	ldrb	r3, [r4, #20]
 800b484:	2b0a      	cmp	r3, #10
 800b486:	d006      	beq.n	800b496 <tcp_slowtmr+0x166>
 800b488:	4643      	mov	r3, r8
 800b48a:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800b48e:	4651      	mov	r1, sl
 800b490:	4638      	mov	r0, r7
 800b492:	f006 f8bb 	bl	801160c <iprintf>
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800b496:	682b      	ldr	r3, [r5, #0]
 800b498:	6a22      	ldr	r2, [r4, #32]
 800b49a:	1a9b      	subs	r3, r3, r2
 800b49c:	2bf0      	cmp	r3, #240	; 0xf0
 800b49e:	f200 80d4 	bhi.w	800b64a <tcp_slowtmr+0x31a>
      pcb = pcb->next;
 800b4a2:	4626      	mov	r6, r4
 800b4a4:	68e4      	ldr	r4, [r4, #12]
  while (pcb != NULL) {
 800b4a6:	2c00      	cmp	r4, #0
 800b4a8:	d1eb      	bne.n	800b482 <tcp_slowtmr+0x152>
}
 800b4aa:	b007      	add	sp, #28
 800b4ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b4b0:	682b      	ldr	r3, [r5, #0]
 800b4b2:	6a22      	ldr	r2, [r4, #32]
 800b4b4:	1a9b      	subs	r3, r3, r2
 800b4b6:	2b28      	cmp	r3, #40	; 0x28
 800b4b8:	d8a9      	bhi.n	800b40e <tcp_slowtmr+0xde>
    if (pcb_remove) {
 800b4ba:	f1b8 0f00 	cmp.w	r8, #0
 800b4be:	d1a6      	bne.n	800b40e <tcp_slowtmr+0xde>
      ++prev->polltmr;
 800b4c0:	7f23      	ldrb	r3, [r4, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800b4c2:	7f62      	ldrb	r2, [r4, #29]
      ++prev->polltmr;
 800b4c4:	3301      	adds	r3, #1
      pcb = pcb->next;
 800b4c6:	68e6      	ldr	r6, [r4, #12]
      ++prev->polltmr;
 800b4c8:	b2db      	uxtb	r3, r3
      if (prev->polltmr >= prev->pollinterval) {
 800b4ca:	429a      	cmp	r2, r3
      ++prev->polltmr;
 800b4cc:	7723      	strb	r3, [r4, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800b4ce:	d815      	bhi.n	800b4fc <tcp_slowtmr+0x1cc>
        tcp_active_pcbs_changed = 0;
 800b4d0:	f8df 911c 	ldr.w	r9, [pc, #284]	; 800b5f0 <tcp_slowtmr+0x2c0>
        TCP_EVENT_POLL(prev, err);
 800b4d4:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
        prev->polltmr = 0;
 800b4d8:	f884 801c 	strb.w	r8, [r4, #28]
        tcp_active_pcbs_changed = 0;
 800b4dc:	f889 8000 	strb.w	r8, [r9]
        TCP_EVENT_POLL(prev, err);
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	f000 80ce 	beq.w	800b682 <tcp_slowtmr+0x352>
 800b4e6:	4621      	mov	r1, r4
 800b4e8:	6920      	ldr	r0, [r4, #16]
 800b4ea:	4798      	blx	r3
        if (tcp_active_pcbs_changed) {
 800b4ec:	f899 3000 	ldrb.w	r3, [r9]
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	f47f af2c 	bne.w	800b34e <tcp_slowtmr+0x1e>
        if (err == ERR_OK) {
 800b4f6:	2800      	cmp	r0, #0
 800b4f8:	f000 80c3 	beq.w	800b682 <tcp_slowtmr+0x352>
 800b4fc:	46a1      	mov	r9, r4
      pcb = pcb->next;
 800b4fe:	4634      	mov	r4, r6
  while (pcb != NULL) {
 800b500:	2c00      	cmp	r4, #0
 800b502:	f47f af2b 	bne.w	800b35c <tcp_slowtmr+0x2c>
 800b506:	e7b1      	b.n	800b46c <tcp_slowtmr+0x13c>
      if (pcb->flags & TF_RXCLOSED) {
 800b508:	8b63      	ldrh	r3, [r4, #26]
 800b50a:	06db      	lsls	r3, r3, #27
 800b50c:	d508      	bpl.n	800b520 <tcp_slowtmr+0x1f0>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b50e:	682b      	ldr	r3, [r5, #0]
 800b510:	6a22      	ldr	r2, [r4, #32]
 800b512:	1a9b      	subs	r3, r3, r2
 800b514:	2b28      	cmp	r3, #40	; 0x28
 800b516:	d903      	bls.n	800b520 <tcp_slowtmr+0x1f0>
          ++pcb_remove;
 800b518:	f108 0801 	add.w	r8, r8, #1
 800b51c:	fa5f f888 	uxtb.w	r8, r8
    pcb_reset = 0;
 800b520:	f04f 0a00 	mov.w	sl, #0
 800b524:	e75c      	b.n	800b3e0 <tcp_slowtmr+0xb0>
      if (pcb->persist_backoff > 0) {
 800b526:	f894 8099 	ldrb.w	r8, [r4, #153]	; 0x99
 800b52a:	f1b8 0f00 	cmp.w	r8, #0
 800b52e:	d071      	beq.n	800b614 <tcp_slowtmr+0x2e4>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800b530:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800b532:	b133      	cbz	r3, 800b542 <tcp_slowtmr+0x212>
 800b534:	463b      	mov	r3, r7
 800b536:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800b53a:	492f      	ldr	r1, [pc, #188]	; (800b5f8 <tcp_slowtmr+0x2c8>)
 800b53c:	482d      	ldr	r0, [pc, #180]	; (800b5f4 <tcp_slowtmr+0x2c4>)
 800b53e:	f006 f865 	bl	801160c <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800b542:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800b544:	2b00      	cmp	r3, #0
 800b546:	f000 816c 	beq.w	800b822 <tcp_slowtmr+0x4f2>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800b54a:	f894 309a 	ldrb.w	r3, [r4, #154]	; 0x9a
 800b54e:	2b0b      	cmp	r3, #11
 800b550:	f240 80d2 	bls.w	800b6f8 <tcp_slowtmr+0x3c8>
    if (pcb->state == FIN_WAIT_2) {
 800b554:	7d23      	ldrb	r3, [r4, #20]
          ++pcb_remove; /* max probes reached */
 800b556:	f04f 0801 	mov.w	r8, #1
 800b55a:	e71b      	b.n	800b394 <tcp_slowtmr+0x64>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800b55c:	463b      	mov	r3, r7
 800b55e:	f240 42be 	movw	r2, #1214	; 0x4be
 800b562:	4926      	ldr	r1, [pc, #152]	; (800b5fc <tcp_slowtmr+0x2cc>)
 800b564:	4823      	ldr	r0, [pc, #140]	; (800b5f4 <tcp_slowtmr+0x2c4>)
 800b566:	f006 f851 	bl	801160c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800b56a:	7d23      	ldrb	r3, [r4, #20]
 800b56c:	2b01      	cmp	r3, #1
 800b56e:	f47f aefc 	bne.w	800b36a <tcp_slowtmr+0x3a>
 800b572:	463b      	mov	r3, r7
 800b574:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800b578:	4921      	ldr	r1, [pc, #132]	; (800b600 <tcp_slowtmr+0x2d0>)
 800b57a:	481e      	ldr	r0, [pc, #120]	; (800b5f4 <tcp_slowtmr+0x2c4>)
 800b57c:	f006 f846 	bl	801160c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800b580:	7d23      	ldrb	r3, [r4, #20]
 800b582:	2b0a      	cmp	r3, #10
 800b584:	f47f aef4 	bne.w	800b370 <tcp_slowtmr+0x40>
 800b588:	463b      	mov	r3, r7
 800b58a:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800b58e:	491d      	ldr	r1, [pc, #116]	; (800b604 <tcp_slowtmr+0x2d4>)
 800b590:	4818      	ldr	r0, [pc, #96]	; (800b5f4 <tcp_slowtmr+0x2c4>)
 800b592:	f006 f83b 	bl	801160c <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800b596:	f89b 2000 	ldrb.w	r2, [fp]
 800b59a:	7fa3      	ldrb	r3, [r4, #30]
 800b59c:	4293      	cmp	r3, r2
 800b59e:	f47f aeed 	bne.w	800b37c <tcp_slowtmr+0x4c>
      continue;
 800b5a2:	46a1      	mov	r9, r4
      pcb = pcb->next;
 800b5a4:	68e4      	ldr	r4, [r4, #12]
  while (pcb != NULL) {
 800b5a6:	2c00      	cmp	r4, #0
 800b5a8:	f47f aed8 	bne.w	800b35c <tcp_slowtmr+0x2c>
 800b5ac:	e75e      	b.n	800b46c <tcp_slowtmr+0x13c>
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800b5ae:	2a05      	cmp	r2, #5
 800b5b0:	d9b9      	bls.n	800b526 <tcp_slowtmr+0x1f6>
    pcb_reset = 0;
 800b5b2:	f04f 0a00 	mov.w	sl, #0
      ++pcb_remove;
 800b5b6:	f04f 0801 	mov.w	r8, #1
 800b5ba:	e711      	b.n	800b3e0 <tcp_slowtmr+0xb0>
 800b5bc:	9405      	str	r4, [sp, #20]
      pbuf_free(seg->p);
 800b5be:	4634      	mov	r4, r6
    struct tcp_seg *next = seg->next;
 800b5c0:	6836      	ldr	r6, [r6, #0]
    if (seg->p != NULL) {
 800b5c2:	6860      	ldr	r0, [r4, #4]
 800b5c4:	b108      	cbz	r0, 800b5ca <tcp_slowtmr+0x29a>
      pbuf_free(seg->p);
 800b5c6:	f7ff f82d 	bl	800a624 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 800b5ca:	4621      	mov	r1, r4
 800b5cc:	2003      	movs	r0, #3
 800b5ce:	f7fe fc63 	bl	8009e98 <memp_free>
  while (seg != NULL) {
 800b5d2:	2e00      	cmp	r6, #0
 800b5d4:	d1f3      	bne.n	800b5be <tcp_slowtmr+0x28e>
    pcb->ooseq = NULL;
 800b5d6:	9c05      	ldr	r4, [sp, #20]
 800b5d8:	6766      	str	r6, [r4, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800b5da:	e70e      	b.n	800b3fa <tcp_slowtmr+0xca>
 800b5dc:	24010588 	.word	0x24010588
 800b5e0:	08013a70 	.word	0x08013a70
 800b5e4:	24010578 	.word	0x24010578
 800b5e8:	000a4cb8 	.word	0x000a4cb8
 800b5ec:	10624dd3 	.word	0x10624dd3
 800b5f0:	2401057c 	.word	0x2401057c
 800b5f4:	080128dc 	.word	0x080128dc
 800b5f8:	08013dc0 	.word	0x08013dc0
 800b5fc:	08013d38 	.word	0x08013d38
 800b600:	08013d64 	.word	0x08013d64
 800b604:	08013d90 	.word	0x08013d90
 800b608:	2401058d 	.word	0x2401058d
 800b60c:	24010590 	.word	0x24010590
 800b610:	08013e84 	.word	0x08013e84
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800b614:	f9b4 2030 	ldrsh.w	r2, [r4, #48]	; 0x30
 800b618:	f647 70fe 	movw	r0, #32766	; 0x7ffe
 800b61c:	b291      	uxth	r1, r2
 800b61e:	4281      	cmp	r1, r0
 800b620:	d802      	bhi.n	800b628 <tcp_slowtmr+0x2f8>
          ++pcb->rtime;
 800b622:	3101      	adds	r1, #1
 800b624:	b20a      	sxth	r2, r1
 800b626:	8622      	strh	r2, [r4, #48]	; 0x30
        if (pcb->rtime >= pcb->rto) {
 800b628:	f9b4 1040 	ldrsh.w	r1, [r4, #64]	; 0x40
 800b62c:	4291      	cmp	r1, r2
 800b62e:	f73f aeb1 	bgt.w	800b394 <tcp_slowtmr+0x64>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800b632:	4620      	mov	r0, r4
 800b634:	f003 f81c 	bl	800e670 <tcp_rexmit_rto_prepare>
 800b638:	2800      	cmp	r0, #0
 800b63a:	f000 809e 	beq.w	800b77a <tcp_slowtmr+0x44a>
 800b63e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800b640:	2b00      	cmp	r3, #0
 800b642:	f000 8096 	beq.w	800b772 <tcp_slowtmr+0x442>
    if (pcb->state == FIN_WAIT_2) {
 800b646:	7d23      	ldrb	r3, [r4, #20]
 800b648:	e6a4      	b.n	800b394 <tcp_slowtmr+0x64>
      tcp_pcb_purge(pcb);
 800b64a:	4620      	mov	r0, r4
 800b64c:	f7ff fe1e 	bl	800b28c <tcp_pcb_purge>
      if (prev != NULL) {
 800b650:	2e00      	cmp	r6, #0
 800b652:	f000 80cc 	beq.w	800b7ee <tcp_slowtmr+0x4be>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800b656:	f8d9 3000 	ldr.w	r3, [r9]
 800b65a:	42a3      	cmp	r3, r4
 800b65c:	f000 80e9 	beq.w	800b832 <tcp_slowtmr+0x502>
        prev->next = pcb->next;
 800b660:	f8d4 b00c 	ldr.w	fp, [r4, #12]
 800b664:	f8c6 b00c 	str.w	fp, [r6, #12]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800b668:	7d23      	ldrb	r3, [r4, #20]
 800b66a:	2b01      	cmp	r3, #1
 800b66c:	f000 80d2 	beq.w	800b814 <tcp_slowtmr+0x4e4>
  memp_free(MEMP_TCP_PCB, pcb);
 800b670:	4621      	mov	r1, r4
      pcb = pcb->next;
 800b672:	465c      	mov	r4, fp
  memp_free(MEMP_TCP_PCB, pcb);
 800b674:	2001      	movs	r0, #1
 800b676:	f7fe fc0f 	bl	8009e98 <memp_free>
  while (pcb != NULL) {
 800b67a:	2c00      	cmp	r4, #0
 800b67c:	f47f af01 	bne.w	800b482 <tcp_slowtmr+0x152>
 800b680:	e713      	b.n	800b4aa <tcp_slowtmr+0x17a>
          tcp_output(prev);
 800b682:	4620      	mov	r0, r4
 800b684:	46a1      	mov	r9, r4
      pcb = pcb->next;
 800b686:	4634      	mov	r4, r6
          tcp_output(prev);
 800b688:	f003 f930 	bl	800e8ec <tcp_output>
  while (pcb != NULL) {
 800b68c:	2c00      	cmp	r4, #0
 800b68e:	f47f ae65 	bne.w	800b35c <tcp_slowtmr+0x2c>
 800b692:	e6eb      	b.n	800b46c <tcp_slowtmr+0x13c>
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800b694:	f894 309b 	ldrb.w	r3, [r4, #155]	; 0x9b
 800b698:	486e      	ldr	r0, [pc, #440]	; (800b854 <tcp_slowtmr+0x524>)
 800b69a:	fb00 1103 	mla	r1, r0, r3, r1
                 / TCP_SLOW_INTERVAL) {
 800b69e:	4b6e      	ldr	r3, [pc, #440]	; (800b858 <tcp_slowtmr+0x528>)
 800b6a0:	fba3 3101 	umull	r3, r1, r3, r1
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b6a4:	ebb2 1f51 	cmp.w	r2, r1, lsr #5
 800b6a8:	f67f af3a 	bls.w	800b520 <tcp_slowtmr+0x1f0>
        err = tcp_keepalive(pcb);
 800b6ac:	4620      	mov	r0, r4
 800b6ae:	f003 fb4b 	bl	800ed48 <tcp_keepalive>
        if (err == ERR_OK) {
 800b6b2:	2800      	cmp	r0, #0
 800b6b4:	f47f af34 	bne.w	800b520 <tcp_slowtmr+0x1f0>
          pcb->keep_cnt_sent++;
 800b6b8:	f894 309b 	ldrb.w	r3, [r4, #155]	; 0x9b
    pcb_reset = 0;
 800b6bc:	4682      	mov	sl, r0
          pcb->keep_cnt_sent++;
 800b6be:	3301      	adds	r3, #1
 800b6c0:	f884 309b 	strb.w	r3, [r4, #155]	; 0x9b
 800b6c4:	e68c      	b.n	800b3e0 <tcp_slowtmr+0xb0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800b6c6:	8b23      	ldrh	r3, [r4, #24]
 800b6c8:	4620      	mov	r0, r4
 800b6ca:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800b6cc:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800b6ce:	9302      	str	r3, [sp, #8]
 800b6d0:	8ae3      	ldrh	r3, [r4, #22]
 800b6d2:	9301      	str	r3, [sp, #4]
 800b6d4:	1d23      	adds	r3, r4, #4
 800b6d6:	9300      	str	r3, [sp, #0]
 800b6d8:	4623      	mov	r3, r4
 800b6da:	f003 f88d 	bl	800e7f8 <tcp_rst>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800b6de:	7d23      	ldrb	r3, [r4, #20]
 800b6e0:	2b01      	cmp	r3, #1
      pcb = pcb->next;
 800b6e2:	e9d4 8a03 	ldrd	r8, sl, [r4, #12]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800b6e6:	f47f aead 	bne.w	800b444 <tcp_slowtmr+0x114>
 800b6ea:	463b      	mov	r3, r7
 800b6ec:	22d4      	movs	r2, #212	; 0xd4
 800b6ee:	495b      	ldr	r1, [pc, #364]	; (800b85c <tcp_slowtmr+0x52c>)
 800b6f0:	485b      	ldr	r0, [pc, #364]	; (800b860 <tcp_slowtmr+0x530>)
 800b6f2:	f005 ff8b 	bl	801160c <iprintf>
 800b6f6:	e6a5      	b.n	800b444 <tcp_slowtmr+0x114>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800b6f8:	f894 3099 	ldrb.w	r3, [r4, #153]	; 0x99
 800b6fc:	4a59      	ldr	r2, [pc, #356]	; (800b864 <tcp_slowtmr+0x534>)
 800b6fe:	441a      	add	r2, r3
          if (pcb->persist_cnt < backoff_cnt) {
 800b700:	f894 3098 	ldrb.w	r3, [r4, #152]	; 0x98
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800b704:	f812 2c01 	ldrb.w	r2, [r2, #-1]
          if (pcb->persist_cnt < backoff_cnt) {
 800b708:	4293      	cmp	r3, r2
 800b70a:	d216      	bcs.n	800b73a <tcp_slowtmr+0x40a>
            pcb->persist_cnt++;
 800b70c:	3301      	adds	r3, #1
 800b70e:	b2db      	uxtb	r3, r3
          if (pcb->persist_cnt >= backoff_cnt) {
 800b710:	4293      	cmp	r3, r2
            pcb->persist_cnt++;
 800b712:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 800b716:	d210      	bcs.n	800b73a <tcp_slowtmr+0x40a>
    if (pcb->state == FIN_WAIT_2) {
 800b718:	7d23      	ldrb	r3, [r4, #20]
    pcb_remove = 0;
 800b71a:	f04f 0800 	mov.w	r8, #0
 800b71e:	e639      	b.n	800b394 <tcp_slowtmr+0x64>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800b720:	42a3      	cmp	r3, r4
 800b722:	d006      	beq.n	800b732 <tcp_slowtmr+0x402>
 800b724:	463b      	mov	r3, r7
 800b726:	f240 5271 	movw	r2, #1393	; 0x571
 800b72a:	494f      	ldr	r1, [pc, #316]	; (800b868 <tcp_slowtmr+0x538>)
 800b72c:	484c      	ldr	r0, [pc, #304]	; (800b860 <tcp_slowtmr+0x530>)
 800b72e:	f005 ff6d 	bl	801160c <iprintf>
        tcp_active_pcbs = pcb->next;
 800b732:	68e3      	ldr	r3, [r4, #12]
 800b734:	4a4d      	ldr	r2, [pc, #308]	; (800b86c <tcp_slowtmr+0x53c>)
 800b736:	6013      	str	r3, [r2, #0]
 800b738:	e67a      	b.n	800b430 <tcp_slowtmr+0x100>
            if (pcb->snd_wnd == 0) {
 800b73a:	f8b4 6060 	ldrh.w	r6, [r4, #96]	; 0x60
 800b73e:	b936      	cbnz	r6, 800b74e <tcp_slowtmr+0x41e>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800b740:	4620      	mov	r0, r4
 800b742:	f003 fb27 	bl	800ed94 <tcp_zero_window_probe>
 800b746:	b140      	cbz	r0, 800b75a <tcp_slowtmr+0x42a>
    pcb_remove = 0;
 800b748:	46b0      	mov	r8, r6
    if (pcb->state == FIN_WAIT_2) {
 800b74a:	7d23      	ldrb	r3, [r4, #20]
 800b74c:	e622      	b.n	800b394 <tcp_slowtmr+0x64>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800b74e:	4631      	mov	r1, r6
 800b750:	4620      	mov	r0, r4
 800b752:	f002 fdd9 	bl	800e308 <tcp_split_unsent_seg>
 800b756:	2800      	cmp	r0, #0
 800b758:	d073      	beq.n	800b842 <tcp_slowtmr+0x512>
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800b75a:	f894 3099 	ldrb.w	r3, [r4, #153]	; 0x99
              pcb->persist_cnt = 0;
 800b75e:	f04f 0800 	mov.w	r8, #0
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800b762:	2b06      	cmp	r3, #6
              pcb->persist_cnt = 0;
 800b764:	f884 8098 	strb.w	r8, [r4, #152]	; 0x98
                pcb->persist_backoff++;
 800b768:	bf9c      	itt	ls
 800b76a:	3301      	addls	r3, #1
 800b76c:	f884 3099 	strbls.w	r3, [r4, #153]	; 0x99
 800b770:	e769      	b.n	800b646 <tcp_slowtmr+0x316>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800b772:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800b774:	2b00      	cmp	r3, #0
 800b776:	f43f af66 	beq.w	800b646 <tcp_slowtmr+0x316>
            if (pcb->state != SYN_SENT) {
 800b77a:	7d23      	ldrb	r3, [r4, #20]
 800b77c:	2b02      	cmp	r3, #2
 800b77e:	d014      	beq.n	800b7aa <tcp_slowtmr+0x47a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800b780:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800b784:	f9b4 103c 	ldrsh.w	r1, [r4, #60]	; 0x3c
 800b788:	2a0c      	cmp	r2, #12
 800b78a:	f9b4 303e 	ldrsh.w	r3, [r4, #62]	; 0x3e
 800b78e:	bf28      	it	cs
 800b790:	220c      	movcs	r2, #12
 800b792:	eb03 03e1 	add.w	r3, r3, r1, asr #3
 800b796:	4936      	ldr	r1, [pc, #216]	; (800b870 <tcp_slowtmr+0x540>)
 800b798:	5c8a      	ldrb	r2, [r1, r2]
 800b79a:	4093      	lsls	r3, r2
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800b79c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800b7a0:	4293      	cmp	r3, r2
 800b7a2:	bfa8      	it	ge
 800b7a4:	4613      	movge	r3, r2
 800b7a6:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800b7aa:	8e63      	ldrh	r3, [r4, #50]	; 0x32
            tcp_rexmit_rto_commit(pcb);
 800b7ac:	4620      	mov	r0, r4
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800b7ae:	f8b4 1048 	ldrh.w	r1, [r4, #72]	; 0x48
            pcb->cwnd = pcb->mss;
 800b7b2:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800b7b6:	005b      	lsls	r3, r3, #1
 800b7b8:	b29a      	uxth	r2, r3
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800b7ba:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
            pcb->ssthresh = eff_wnd >> 1;
 800b7be:	428b      	cmp	r3, r1
 800b7c0:	bf28      	it	cs
 800b7c2:	460b      	movcs	r3, r1
 800b7c4:	085b      	lsrs	r3, r3, #1
 800b7c6:	4293      	cmp	r3, r2
 800b7c8:	bf38      	it	cc
 800b7ca:	4613      	movcc	r3, r2
 800b7cc:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
            pcb->rtime = 0;
 800b7d0:	2300      	movs	r3, #0
 800b7d2:	8623      	strh	r3, [r4, #48]	; 0x30
            pcb->bytes_acked = 0;
 800b7d4:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
            tcp_rexmit_rto_commit(pcb);
 800b7d8:	f003 fa6a 	bl	800ecb0 <tcp_rexmit_rto_commit>
 800b7dc:	e733      	b.n	800b646 <tcp_slowtmr+0x316>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800b7de:	463b      	mov	r3, r7
 800b7e0:	f240 526d 	movw	r2, #1389	; 0x56d
 800b7e4:	4923      	ldr	r1, [pc, #140]	; (800b874 <tcp_slowtmr+0x544>)
 800b7e6:	481e      	ldr	r0, [pc, #120]	; (800b860 <tcp_slowtmr+0x530>)
 800b7e8:	f005 ff10 	bl	801160c <iprintf>
 800b7ec:	e61d      	b.n	800b42a <tcp_slowtmr+0xfa>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800b7ee:	f8d9 3000 	ldr.w	r3, [r9]
 800b7f2:	42a3      	cmp	r3, r4
 800b7f4:	d006      	beq.n	800b804 <tcp_slowtmr+0x4d4>
 800b7f6:	4643      	mov	r3, r8
 800b7f8:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800b7fc:	491e      	ldr	r1, [pc, #120]	; (800b878 <tcp_slowtmr+0x548>)
 800b7fe:	4638      	mov	r0, r7
 800b800:	f005 ff04 	bl	801160c <iprintf>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800b804:	7d23      	ldrb	r3, [r4, #20]
        tcp_tw_pcbs = pcb->next;
 800b806:	f8d4 b00c 	ldr.w	fp, [r4, #12]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800b80a:	2b01      	cmp	r3, #1
        tcp_tw_pcbs = pcb->next;
 800b80c:	f8c9 b000 	str.w	fp, [r9]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800b810:	f47f af2e 	bne.w	800b670 <tcp_slowtmr+0x340>
 800b814:	4643      	mov	r3, r8
 800b816:	22d4      	movs	r2, #212	; 0xd4
 800b818:	4910      	ldr	r1, [pc, #64]	; (800b85c <tcp_slowtmr+0x52c>)
 800b81a:	4638      	mov	r0, r7
 800b81c:	f005 fef6 	bl	801160c <iprintf>
 800b820:	e726      	b.n	800b670 <tcp_slowtmr+0x340>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800b822:	463b      	mov	r3, r7
 800b824:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800b828:	4914      	ldr	r1, [pc, #80]	; (800b87c <tcp_slowtmr+0x54c>)
 800b82a:	480d      	ldr	r0, [pc, #52]	; (800b860 <tcp_slowtmr+0x530>)
 800b82c:	f005 feee 	bl	801160c <iprintf>
 800b830:	e68b      	b.n	800b54a <tcp_slowtmr+0x21a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800b832:	4643      	mov	r3, r8
 800b834:	f240 52af 	movw	r2, #1455	; 0x5af
 800b838:	4911      	ldr	r1, [pc, #68]	; (800b880 <tcp_slowtmr+0x550>)
 800b83a:	4638      	mov	r0, r7
 800b83c:	f005 fee6 	bl	801160c <iprintf>
 800b840:	e70e      	b.n	800b660 <tcp_slowtmr+0x330>
                if (tcp_output(pcb) == ERR_OK) {
 800b842:	4620      	mov	r0, r4
 800b844:	f003 f852 	bl	800e8ec <tcp_output>
 800b848:	2800      	cmp	r0, #0
 800b84a:	d186      	bne.n	800b75a <tcp_slowtmr+0x42a>
    pcb_remove = 0;
 800b84c:	4680      	mov	r8, r0
    if (pcb->state == FIN_WAIT_2) {
 800b84e:	7d23      	ldrb	r3, [r4, #20]
 800b850:	e5a0      	b.n	800b394 <tcp_slowtmr+0x64>
 800b852:	bf00      	nop
 800b854:	000124f8 	.word	0x000124f8
 800b858:	10624dd3 	.word	0x10624dd3
 800b85c:	08013aac 	.word	0x08013aac
 800b860:	080128dc 	.word	0x080128dc
 800b864:	08014148 	.word	0x08014148
 800b868:	08013e58 	.word	0x08013e58
 800b86c:	24010578 	.word	0x24010578
 800b870:	08014128 	.word	0x08014128
 800b874:	08013e2c 	.word	0x08013e2c
 800b878:	08013edc 	.word	0x08013edc
 800b87c:	08013df4 	.word	0x08013df4
 800b880:	08013eb4 	.word	0x08013eb4

0800b884 <tcp_pcb_remove>:
{
 800b884:	b538      	push	{r3, r4, r5, lr}
 800b886:	4605      	mov	r5, r0
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800b888:	460c      	mov	r4, r1
 800b88a:	2900      	cmp	r1, #0
 800b88c:	d04a      	beq.n	800b924 <tcp_pcb_remove+0xa0>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800b88e:	2d00      	cmp	r5, #0
 800b890:	d051      	beq.n	800b936 <tcp_pcb_remove+0xb2>
  TCP_RMV(pcblist, pcb);
 800b892:	682b      	ldr	r3, [r5, #0]
 800b894:	42a3      	cmp	r3, r4
 800b896:	d032      	beq.n	800b8fe <tcp_pcb_remove+0x7a>
 800b898:	b12b      	cbz	r3, 800b8a6 <tcp_pcb_remove+0x22>
 800b89a:	68da      	ldr	r2, [r3, #12]
 800b89c:	42a2      	cmp	r2, r4
 800b89e:	d03e      	beq.n	800b91e <tcp_pcb_remove+0x9a>
 800b8a0:	4613      	mov	r3, r2
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d1f9      	bne.n	800b89a <tcp_pcb_remove+0x16>
 800b8a6:	2300      	movs	r3, #0
  tcp_pcb_purge(pcb);
 800b8a8:	4620      	mov	r0, r4
  TCP_RMV(pcblist, pcb);
 800b8aa:	60e3      	str	r3, [r4, #12]
  tcp_pcb_purge(pcb);
 800b8ac:	f7ff fcee 	bl	800b28c <tcp_pcb_purge>
  if ((pcb->state != TIME_WAIT) &&
 800b8b0:	7d23      	ldrb	r3, [r4, #20]
 800b8b2:	2b0a      	cmp	r3, #10
 800b8b4:	d02d      	beq.n	800b912 <tcp_pcb_remove+0x8e>
 800b8b6:	2b01      	cmp	r3, #1
 800b8b8:	d01d      	beq.n	800b8f6 <tcp_pcb_remove+0x72>
      (pcb->flags & TF_ACK_DELAY)) {
 800b8ba:	8b63      	ldrh	r3, [r4, #26]
      (pcb->state != LISTEN) &&
 800b8bc:	07da      	lsls	r2, r3, #31
 800b8be:	d421      	bmi.n	800b904 <tcp_pcb_remove+0x80>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800b8c0:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800b8c2:	b133      	cbz	r3, 800b8d2 <tcp_pcb_remove+0x4e>
 800b8c4:	4b20      	ldr	r3, [pc, #128]	; (800b948 <tcp_pcb_remove+0xc4>)
 800b8c6:	f640 0293 	movw	r2, #2195	; 0x893
 800b8ca:	4920      	ldr	r1, [pc, #128]	; (800b94c <tcp_pcb_remove+0xc8>)
 800b8cc:	4820      	ldr	r0, [pc, #128]	; (800b950 <tcp_pcb_remove+0xcc>)
 800b8ce:	f005 fe9d 	bl	801160c <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800b8d2:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800b8d4:	b133      	cbz	r3, 800b8e4 <tcp_pcb_remove+0x60>
 800b8d6:	4b1c      	ldr	r3, [pc, #112]	; (800b948 <tcp_pcb_remove+0xc4>)
 800b8d8:	f640 0294 	movw	r2, #2196	; 0x894
 800b8dc:	491d      	ldr	r1, [pc, #116]	; (800b954 <tcp_pcb_remove+0xd0>)
 800b8de:	481c      	ldr	r0, [pc, #112]	; (800b950 <tcp_pcb_remove+0xcc>)
 800b8e0:	f005 fe94 	bl	801160c <iprintf>
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800b8e4:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800b8e6:	b133      	cbz	r3, 800b8f6 <tcp_pcb_remove+0x72>
 800b8e8:	4b17      	ldr	r3, [pc, #92]	; (800b948 <tcp_pcb_remove+0xc4>)
 800b8ea:	f640 0296 	movw	r2, #2198	; 0x896
 800b8ee:	491a      	ldr	r1, [pc, #104]	; (800b958 <tcp_pcb_remove+0xd4>)
 800b8f0:	4817      	ldr	r0, [pc, #92]	; (800b950 <tcp_pcb_remove+0xcc>)
 800b8f2:	f005 fe8b 	bl	801160c <iprintf>
  pcb->state = CLOSED;
 800b8f6:	2300      	movs	r3, #0
 800b8f8:	7523      	strb	r3, [r4, #20]
  pcb->local_port = 0;
 800b8fa:	82e3      	strh	r3, [r4, #22]
}
 800b8fc:	bd38      	pop	{r3, r4, r5, pc}
  TCP_RMV(pcblist, pcb);
 800b8fe:	68e3      	ldr	r3, [r4, #12]
 800b900:	602b      	str	r3, [r5, #0]
 800b902:	e7d0      	b.n	800b8a6 <tcp_pcb_remove+0x22>
    tcp_ack_now(pcb);
 800b904:	f043 0302 	orr.w	r3, r3, #2
    tcp_output(pcb);
 800b908:	4620      	mov	r0, r4
    tcp_ack_now(pcb);
 800b90a:	8363      	strh	r3, [r4, #26]
    tcp_output(pcb);
 800b90c:	f002 ffee 	bl	800e8ec <tcp_output>
  if (pcb->state != LISTEN) {
 800b910:	7d23      	ldrb	r3, [r4, #20]
 800b912:	2b01      	cmp	r3, #1
 800b914:	d0ef      	beq.n	800b8f6 <tcp_pcb_remove+0x72>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800b916:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d1d3      	bne.n	800b8c4 <tcp_pcb_remove+0x40>
 800b91c:	e7d9      	b.n	800b8d2 <tcp_pcb_remove+0x4e>
  TCP_RMV(pcblist, pcb);
 800b91e:	68e2      	ldr	r2, [r4, #12]
 800b920:	60da      	str	r2, [r3, #12]
 800b922:	e7c0      	b.n	800b8a6 <tcp_pcb_remove+0x22>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800b924:	4b08      	ldr	r3, [pc, #32]	; (800b948 <tcp_pcb_remove+0xc4>)
 800b926:	f640 0283 	movw	r2, #2179	; 0x883
 800b92a:	490c      	ldr	r1, [pc, #48]	; (800b95c <tcp_pcb_remove+0xd8>)
 800b92c:	4808      	ldr	r0, [pc, #32]	; (800b950 <tcp_pcb_remove+0xcc>)
 800b92e:	f005 fe6d 	bl	801160c <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800b932:	2d00      	cmp	r5, #0
 800b934:	d1ad      	bne.n	800b892 <tcp_pcb_remove+0xe>
 800b936:	4b04      	ldr	r3, [pc, #16]	; (800b948 <tcp_pcb_remove+0xc4>)
 800b938:	f640 0284 	movw	r2, #2180	; 0x884
 800b93c:	4908      	ldr	r1, [pc, #32]	; (800b960 <tcp_pcb_remove+0xdc>)
 800b93e:	4804      	ldr	r0, [pc, #16]	; (800b950 <tcp_pcb_remove+0xcc>)
 800b940:	f005 fe64 	bl	801160c <iprintf>
 800b944:	e7a5      	b.n	800b892 <tcp_pcb_remove+0xe>
 800b946:	bf00      	nop
 800b948:	08013a70 	.word	0x08013a70
 800b94c:	08013f40 	.word	0x08013f40
 800b950:	080128dc 	.word	0x080128dc
 800b954:	08013f58 	.word	0x08013f58
 800b958:	08013f74 	.word	0x08013f74
 800b95c:	08013f04 	.word	0x08013f04
 800b960:	08013f20 	.word	0x08013f20

0800b964 <tcp_abandon>:
{
 800b964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b968:	4605      	mov	r5, r0
 800b96a:	b087      	sub	sp, #28
 800b96c:	460e      	mov	r6, r1
  LWIP_ASSERT_CORE_LOCKED();
 800b96e:	f7fb f985 	bl	8006c7c <sys_check_core_locking>
  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800b972:	2d00      	cmp	r5, #0
 800b974:	f000 80a8 	beq.w	800bac8 <tcp_abandon+0x164>
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800b978:	7d2b      	ldrb	r3, [r5, #20]
 800b97a:	2b01      	cmp	r3, #1
 800b97c:	f000 808b 	beq.w	800ba96 <tcp_abandon+0x132>
  if (pcb->state == TIME_WAIT) {
 800b980:	2b0a      	cmp	r3, #10
 800b982:	f000 8093 	beq.w	800baac <tcp_abandon+0x148>
    seqno = pcb->snd_nxt;
 800b986:	6d2a      	ldr	r2, [r5, #80]	; 0x50
    ackno = pcb->rcv_nxt;
 800b988:	f8d5 b024 	ldr.w	fp, [r5, #36]	; 0x24
    errf = pcb->errf;
 800b98c:	f8d5 8090 	ldr.w	r8, [r5, #144]	; 0x90
    errf_arg = pcb->callback_arg;
 800b990:	f8d5 9010 	ldr.w	r9, [r5, #16]
    seqno = pcb->snd_nxt;
 800b994:	9205      	str	r2, [sp, #20]
    if (pcb->state == CLOSED) {
 800b996:	b96b      	cbnz	r3, 800b9b4 <tcp_abandon+0x50>
      if (pcb->local_port != 0) {
 800b998:	8aef      	ldrh	r7, [r5, #22]
 800b99a:	2f00      	cmp	r7, #0
 800b99c:	d052      	beq.n	800ba44 <tcp_abandon+0xe0>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800b99e:	4a53      	ldr	r2, [pc, #332]	; (800baec <tcp_abandon+0x188>)
 800b9a0:	6813      	ldr	r3, [r2, #0]
 800b9a2:	42ab      	cmp	r3, r5
 800b9a4:	d074      	beq.n	800ba90 <tcp_abandon+0x12c>
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d050      	beq.n	800ba4c <tcp_abandon+0xe8>
 800b9aa:	68da      	ldr	r2, [r3, #12]
 800b9ac:	42aa      	cmp	r2, r5
 800b9ae:	d04b      	beq.n	800ba48 <tcp_abandon+0xe4>
 800b9b0:	4613      	mov	r3, r2
 800b9b2:	e7f8      	b.n	800b9a6 <tcp_abandon+0x42>
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800b9b4:	4629      	mov	r1, r5
 800b9b6:	484e      	ldr	r0, [pc, #312]	; (800baf0 <tcp_abandon+0x18c>)
      local_port = pcb->local_port;
 800b9b8:	8aef      	ldrh	r7, [r5, #22]
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800b9ba:	f7ff ff63 	bl	800b884 <tcp_pcb_remove>
 800b9be:	4b4d      	ldr	r3, [pc, #308]	; (800baf4 <tcp_abandon+0x190>)
 800b9c0:	2201      	movs	r2, #1
 800b9c2:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 800b9c4:	6f2c      	ldr	r4, [r5, #112]	; 0x70
 800b9c6:	b164      	cbz	r4, 800b9e2 <tcp_abandon+0x7e>
      pbuf_free(seg->p);
 800b9c8:	46a2      	mov	sl, r4
    struct tcp_seg *next = seg->next;
 800b9ca:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 800b9cc:	f8da 0004 	ldr.w	r0, [sl, #4]
 800b9d0:	b108      	cbz	r0, 800b9d6 <tcp_abandon+0x72>
      pbuf_free(seg->p);
 800b9d2:	f7fe fe27 	bl	800a624 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 800b9d6:	4651      	mov	r1, sl
 800b9d8:	2003      	movs	r0, #3
 800b9da:	f7fe fa5d 	bl	8009e98 <memp_free>
  while (seg != NULL) {
 800b9de:	2c00      	cmp	r4, #0
 800b9e0:	d1f2      	bne.n	800b9c8 <tcp_abandon+0x64>
    if (pcb->unsent != NULL) {
 800b9e2:	6eec      	ldr	r4, [r5, #108]	; 0x6c
 800b9e4:	b164      	cbz	r4, 800ba00 <tcp_abandon+0x9c>
      pbuf_free(seg->p);
 800b9e6:	46a2      	mov	sl, r4
    struct tcp_seg *next = seg->next;
 800b9e8:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 800b9ea:	f8da 0004 	ldr.w	r0, [sl, #4]
 800b9ee:	b108      	cbz	r0, 800b9f4 <tcp_abandon+0x90>
      pbuf_free(seg->p);
 800b9f0:	f7fe fe18 	bl	800a624 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 800b9f4:	4651      	mov	r1, sl
 800b9f6:	2003      	movs	r0, #3
 800b9f8:	f7fe fa4e 	bl	8009e98 <memp_free>
  while (seg != NULL) {
 800b9fc:	2c00      	cmp	r4, #0
 800b9fe:	d1f2      	bne.n	800b9e6 <tcp_abandon+0x82>
    if (pcb->ooseq != NULL) {
 800ba00:	6f6c      	ldr	r4, [r5, #116]	; 0x74
 800ba02:	b164      	cbz	r4, 800ba1e <tcp_abandon+0xba>
      pbuf_free(seg->p);
 800ba04:	46a2      	mov	sl, r4
    struct tcp_seg *next = seg->next;
 800ba06:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 800ba08:	f8da 0004 	ldr.w	r0, [sl, #4]
 800ba0c:	b108      	cbz	r0, 800ba12 <tcp_abandon+0xae>
      pbuf_free(seg->p);
 800ba0e:	f7fe fe09 	bl	800a624 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 800ba12:	4651      	mov	r1, sl
 800ba14:	2003      	movs	r0, #3
 800ba16:	f7fe fa3f 	bl	8009e98 <memp_free>
  while (seg != NULL) {
 800ba1a:	2c00      	cmp	r4, #0
 800ba1c:	d1f2      	bne.n	800ba04 <tcp_abandon+0xa0>
    if (send_rst) {
 800ba1e:	b9ce      	cbnz	r6, 800ba54 <tcp_abandon+0xf0>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800ba20:	7d2b      	ldrb	r3, [r5, #20]
 800ba22:	2b01      	cmp	r3, #1
 800ba24:	d024      	beq.n	800ba70 <tcp_abandon+0x10c>
  memp_free(MEMP_TCP_PCB, pcb);
 800ba26:	4629      	mov	r1, r5
 800ba28:	2001      	movs	r0, #1
 800ba2a:	f7fe fa35 	bl	8009e98 <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800ba2e:	f1b8 0f00 	cmp.w	r8, #0
 800ba32:	d02a      	beq.n	800ba8a <tcp_abandon+0x126>
 800ba34:	f06f 010c 	mvn.w	r1, #12
 800ba38:	4648      	mov	r0, r9
 800ba3a:	4643      	mov	r3, r8
}
 800ba3c:	b007      	add	sp, #28
 800ba3e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800ba42:	4718      	bx	r3
    int send_rst = 0;
 800ba44:	461e      	mov	r6, r3
 800ba46:	e7bd      	b.n	800b9c4 <tcp_abandon+0x60>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800ba48:	68ea      	ldr	r2, [r5, #12]
 800ba4a:	60da      	str	r2, [r3, #12]
 800ba4c:	2700      	movs	r7, #0
    int send_rst = 0;
 800ba4e:	463e      	mov	r6, r7
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800ba50:	60ef      	str	r7, [r5, #12]
 800ba52:	e7b7      	b.n	800b9c4 <tcp_abandon+0x60>
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800ba54:	9701      	str	r7, [sp, #4]
 800ba56:	465a      	mov	r2, fp
 800ba58:	8b2b      	ldrh	r3, [r5, #24]
 800ba5a:	4628      	mov	r0, r5
 800ba5c:	9905      	ldr	r1, [sp, #20]
 800ba5e:	9302      	str	r3, [sp, #8]
 800ba60:	1d2b      	adds	r3, r5, #4
 800ba62:	9300      	str	r3, [sp, #0]
 800ba64:	462b      	mov	r3, r5
 800ba66:	f002 fec7 	bl	800e7f8 <tcp_rst>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800ba6a:	7d2b      	ldrb	r3, [r5, #20]
 800ba6c:	2b01      	cmp	r3, #1
 800ba6e:	d1da      	bne.n	800ba26 <tcp_abandon+0xc2>
 800ba70:	4921      	ldr	r1, [pc, #132]	; (800baf8 <tcp_abandon+0x194>)
 800ba72:	22d4      	movs	r2, #212	; 0xd4
 800ba74:	4b21      	ldr	r3, [pc, #132]	; (800bafc <tcp_abandon+0x198>)
 800ba76:	4822      	ldr	r0, [pc, #136]	; (800bb00 <tcp_abandon+0x19c>)
 800ba78:	f005 fdc8 	bl	801160c <iprintf>
  memp_free(MEMP_TCP_PCB, pcb);
 800ba7c:	4629      	mov	r1, r5
 800ba7e:	2001      	movs	r0, #1
 800ba80:	f7fe fa0a 	bl	8009e98 <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800ba84:	f1b8 0f00 	cmp.w	r8, #0
 800ba88:	d1d4      	bne.n	800ba34 <tcp_abandon+0xd0>
}
 800ba8a:	b007      	add	sp, #28
 800ba8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800ba90:	68eb      	ldr	r3, [r5, #12]
 800ba92:	6013      	str	r3, [r2, #0]
 800ba94:	e7da      	b.n	800ba4c <tcp_abandon+0xe8>
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800ba96:	4b19      	ldr	r3, [pc, #100]	; (800bafc <tcp_abandon+0x198>)
 800ba98:	f44f 7210 	mov.w	r2, #576	; 0x240
 800ba9c:	4919      	ldr	r1, [pc, #100]	; (800bb04 <tcp_abandon+0x1a0>)
 800ba9e:	4818      	ldr	r0, [pc, #96]	; (800bb00 <tcp_abandon+0x19c>)
 800baa0:	f005 fdb4 	bl	801160c <iprintf>
  if (pcb->state == TIME_WAIT) {
 800baa4:	7d2b      	ldrb	r3, [r5, #20]
 800baa6:	2b0a      	cmp	r3, #10
 800baa8:	f47f af6d 	bne.w	800b986 <tcp_abandon+0x22>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800baac:	4629      	mov	r1, r5
 800baae:	4816      	ldr	r0, [pc, #88]	; (800bb08 <tcp_abandon+0x1a4>)
 800bab0:	f7ff fee8 	bl	800b884 <tcp_pcb_remove>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800bab4:	7d2b      	ldrb	r3, [r5, #20]
 800bab6:	2b01      	cmp	r3, #1
 800bab8:	d010      	beq.n	800badc <tcp_abandon+0x178>
  memp_free(MEMP_TCP_PCB, pcb);
 800baba:	4629      	mov	r1, r5
 800babc:	2001      	movs	r0, #1
}
 800babe:	b007      	add	sp, #28
 800bac0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  memp_free(MEMP_TCP_PCB, pcb);
 800bac4:	f7fe b9e8 	b.w	8009e98 <memp_free>
  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800bac8:	4b0c      	ldr	r3, [pc, #48]	; (800bafc <tcp_abandon+0x198>)
 800baca:	f240 223d 	movw	r2, #573	; 0x23d
 800bace:	490f      	ldr	r1, [pc, #60]	; (800bb0c <tcp_abandon+0x1a8>)
 800bad0:	480b      	ldr	r0, [pc, #44]	; (800bb00 <tcp_abandon+0x19c>)
}
 800bad2:	b007      	add	sp, #28
 800bad4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800bad8:	f005 bd98 	b.w	801160c <iprintf>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800badc:	4b07      	ldr	r3, [pc, #28]	; (800bafc <tcp_abandon+0x198>)
 800bade:	22d4      	movs	r2, #212	; 0xd4
 800bae0:	4905      	ldr	r1, [pc, #20]	; (800baf8 <tcp_abandon+0x194>)
 800bae2:	4807      	ldr	r0, [pc, #28]	; (800bb00 <tcp_abandon+0x19c>)
 800bae4:	f005 fd92 	bl	801160c <iprintf>
 800bae8:	e7e7      	b.n	800baba <tcp_abandon+0x156>
 800baea:	bf00      	nop
 800baec:	24010580 	.word	0x24010580
 800baf0:	24010578 	.word	0x24010578
 800baf4:	2401057c 	.word	0x2401057c
 800baf8:	08013aac 	.word	0x08013aac
 800bafc:	08013a70 	.word	0x08013a70
 800bb00:	080128dc 	.word	0x080128dc
 800bb04:	08013fa8 	.word	0x08013fa8
 800bb08:	24010590 	.word	0x24010590
 800bb0c:	08013f8c 	.word	0x08013f8c

0800bb10 <tcp_abort>:
  tcp_abandon(pcb, 1);
 800bb10:	2101      	movs	r1, #1
 800bb12:	f7ff bf27 	b.w	800b964 <tcp_abandon>
 800bb16:	bf00      	nop

0800bb18 <tcp_accept_null>:
{
 800bb18:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800bb1a:	460c      	mov	r4, r1
 800bb1c:	b131      	cbz	r1, 800bb2c <tcp_accept_null+0x14>
  tcp_abandon(pcb, 1);
 800bb1e:	4620      	mov	r0, r4
 800bb20:	2101      	movs	r1, #1
 800bb22:	f7ff ff1f 	bl	800b964 <tcp_abandon>
}
 800bb26:	f06f 000c 	mvn.w	r0, #12
 800bb2a:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800bb2c:	4b06      	ldr	r3, [pc, #24]	; (800bb48 <tcp_accept_null+0x30>)
 800bb2e:	f240 320f 	movw	r2, #783	; 0x30f
 800bb32:	4906      	ldr	r1, [pc, #24]	; (800bb4c <tcp_accept_null+0x34>)
 800bb34:	4806      	ldr	r0, [pc, #24]	; (800bb50 <tcp_accept_null+0x38>)
 800bb36:	f005 fd69 	bl	801160c <iprintf>
  tcp_abandon(pcb, 1);
 800bb3a:	4620      	mov	r0, r4
 800bb3c:	2101      	movs	r1, #1
 800bb3e:	f7ff ff11 	bl	800b964 <tcp_abandon>
}
 800bb42:	f06f 000c 	mvn.w	r0, #12
 800bb46:	bd10      	pop	{r4, pc}
 800bb48:	08013a70 	.word	0x08013a70
 800bb4c:	08013fdc 	.word	0x08013fdc
 800bb50:	080128dc 	.word	0x080128dc

0800bb54 <tcp_netif_ip_addr_changed_pcblist>:
{
 800bb54:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800bb56:	4605      	mov	r5, r0
{
 800bb58:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800bb5a:	b178      	cbz	r0, 800bb7c <tcp_netif_ip_addr_changed_pcblist+0x28>
  while (pcb != NULL) {
 800bb5c:	b134      	cbz	r4, 800bb6c <tcp_netif_ip_addr_changed_pcblist+0x18>
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800bb5e:	6822      	ldr	r2, [r4, #0]
 800bb60:	682b      	ldr	r3, [r5, #0]
 800bb62:	429a      	cmp	r2, r3
 800bb64:	d003      	beq.n	800bb6e <tcp_netif_ip_addr_changed_pcblist+0x1a>
      pcb = pcb->next;
 800bb66:	68e4      	ldr	r4, [r4, #12]
  while (pcb != NULL) {
 800bb68:	2c00      	cmp	r4, #0
 800bb6a:	d1f8      	bne.n	800bb5e <tcp_netif_ip_addr_changed_pcblist+0xa>
}
 800bb6c:	bd38      	pop	{r3, r4, r5, pc}
      struct tcp_pcb *next = pcb->next;
 800bb6e:	68e3      	ldr	r3, [r4, #12]
  tcp_abandon(pcb, 1);
 800bb70:	4620      	mov	r0, r4
 800bb72:	2101      	movs	r1, #1
      pcb = next;
 800bb74:	461c      	mov	r4, r3
  tcp_abandon(pcb, 1);
 800bb76:	f7ff fef5 	bl	800b964 <tcp_abandon>
      pcb = next;
 800bb7a:	e7ef      	b.n	800bb5c <tcp_netif_ip_addr_changed_pcblist+0x8>
  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800bb7c:	4b03      	ldr	r3, [pc, #12]	; (800bb8c <tcp_netif_ip_addr_changed_pcblist+0x38>)
 800bb7e:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800bb82:	4903      	ldr	r1, [pc, #12]	; (800bb90 <tcp_netif_ip_addr_changed_pcblist+0x3c>)
 800bb84:	4803      	ldr	r0, [pc, #12]	; (800bb94 <tcp_netif_ip_addr_changed_pcblist+0x40>)
 800bb86:	f005 fd41 	bl	801160c <iprintf>
 800bb8a:	e7e7      	b.n	800bb5c <tcp_netif_ip_addr_changed_pcblist+0x8>
 800bb8c:	08013a70 	.word	0x08013a70
 800bb90:	08013ffc 	.word	0x08013ffc
 800bb94:	080128dc 	.word	0x080128dc

0800bb98 <tcp_kill_state>:
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800bb98:	4b0f      	ldr	r3, [pc, #60]	; (800bbd8 <tcp_kill_state+0x40>)
 800bb9a:	6819      	ldr	r1, [r3, #0]
 800bb9c:	b1d1      	cbz	r1, 800bbd4 <tcp_kill_state+0x3c>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800bb9e:	4b0f      	ldr	r3, [pc, #60]	; (800bbdc <tcp_kill_state+0x44>)
  inactivity = 0;
 800bba0:	2200      	movs	r2, #0
{
 800bba2:	b430      	push	{r4, r5}
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800bba4:	681d      	ldr	r5, [r3, #0]
  inactive = NULL;
 800bba6:	4614      	mov	r4, r2
 800bba8:	e001      	b.n	800bbae <tcp_kill_state+0x16>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800bbaa:	68c9      	ldr	r1, [r1, #12]
 800bbac:	b159      	cbz	r1, 800bbc6 <tcp_kill_state+0x2e>
    if (pcb->state == state) {
 800bbae:	7d0b      	ldrb	r3, [r1, #20]
 800bbb0:	4283      	cmp	r3, r0
 800bbb2:	d1fa      	bne.n	800bbaa <tcp_kill_state+0x12>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800bbb4:	6a0b      	ldr	r3, [r1, #32]
 800bbb6:	1aeb      	subs	r3, r5, r3
 800bbb8:	4293      	cmp	r3, r2
 800bbba:	d3f6      	bcc.n	800bbaa <tcp_kill_state+0x12>
 800bbbc:	460c      	mov	r4, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800bbbe:	68c9      	ldr	r1, [r1, #12]
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800bbc0:	461a      	mov	r2, r3
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800bbc2:	2900      	cmp	r1, #0
 800bbc4:	d1f3      	bne.n	800bbae <tcp_kill_state+0x16>
  if (inactive != NULL) {
 800bbc6:	b11c      	cbz	r4, 800bbd0 <tcp_kill_state+0x38>
    tcp_abandon(inactive, 0);
 800bbc8:	4620      	mov	r0, r4
}
 800bbca:	bc30      	pop	{r4, r5}
    tcp_abandon(inactive, 0);
 800bbcc:	f7ff beca 	b.w	800b964 <tcp_abandon>
}
 800bbd0:	bc30      	pop	{r4, r5}
 800bbd2:	4770      	bx	lr
 800bbd4:	4770      	bx	lr
 800bbd6:	bf00      	nop
 800bbd8:	24010578 	.word	0x24010578
 800bbdc:	24010588 	.word	0x24010588

0800bbe0 <tcp_alloc>:
{
 800bbe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbe2:	4605      	mov	r5, r0
  LWIP_ASSERT_CORE_LOCKED();
 800bbe4:	f7fb f84a 	bl	8006c7c <sys_check_core_locking>
  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800bbe8:	2001      	movs	r0, #1
 800bbea:	f7fe f90f 	bl	8009e0c <memp_malloc>
  if (pcb == NULL) {
 800bbee:	4603      	mov	r3, r0
 800bbf0:	b320      	cbz	r0, 800bc3c <tcp_alloc+0x5c>
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800bbf2:	229c      	movs	r2, #156	; 0x9c
 800bbf4:	2100      	movs	r1, #0
 800bbf6:	4618      	mov	r0, r3
    pcb->snd_buf = TCP_SND_BUF;
 800bbf8:	f241 64d0 	movw	r4, #5840	; 0x16d0
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800bbfc:	f005 feb2 	bl	8011964 <memset>
    pcb->last_timer = tcp_timer_ctr;
 800bc00:	4943      	ldr	r1, [pc, #268]	; (800bd10 <tcp_alloc+0x130>)
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800bc02:	4603      	mov	r3, r0
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800bc04:	2206      	movs	r2, #6
    pcb->last_timer = tcp_timer_ctr;
 800bc06:	7809      	ldrb	r1, [r1, #0]
    pcb->tmr = tcp_ticks;
 800bc08:	4842      	ldr	r0, [pc, #264]	; (800bd14 <tcp_alloc+0x134>)
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800bc0a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->tmr = tcp_ticks;
 800bc0e:	6800      	ldr	r0, [r0, #0]
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800bc10:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->last_timer = tcp_timer_ctr;
 800bc12:	7799      	strb	r1, [r3, #30]
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800bc14:	4a40      	ldr	r2, [pc, #256]	; (800bd18 <tcp_alloc+0x138>)
    pcb->recv = tcp_recv_null;
 800bc16:	4941      	ldr	r1, [pc, #260]	; (800bd1c <tcp_alloc+0x13c>)
    pcb->snd_buf = TCP_SND_BUF;
 800bc18:	f8a3 4064 	strh.w	r4, [r3, #100]	; 0x64
    pcb->tmr = tcp_ticks;
 800bc1c:	6218      	str	r0, [r3, #32]
    pcb->rtime = -1;
 800bc1e:	4c40      	ldr	r4, [pc, #256]	; (800bd20 <tcp_alloc+0x140>)
    pcb->cwnd = 1;
 800bc20:	4840      	ldr	r0, [pc, #256]	; (800bd24 <tcp_alloc+0x144>)
    pcb->recv = tcp_recv_null;
 800bc22:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800bc26:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    pcb->ttl = TCP_TTL;
 800bc2a:	22ff      	movs	r2, #255	; 0xff
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800bc2c:	493e      	ldr	r1, [pc, #248]	; (800bd28 <tcp_alloc+0x148>)
    pcb->cwnd = 1;
 800bc2e:	6498      	str	r0, [r3, #72]	; 0x48
}
 800bc30:	4618      	mov	r0, r3
    pcb->prio = prio;
 800bc32:	755d      	strb	r5, [r3, #21]
    pcb->rtime = -1;
 800bc34:	631c      	str	r4, [r3, #48]	; 0x30
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800bc36:	6299      	str	r1, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800bc38:	72da      	strb	r2, [r3, #11]
}
 800bc3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800bc3c:	4e3b      	ldr	r6, [pc, #236]	; (800bd2c <tcp_alloc+0x14c>)
 800bc3e:	6834      	ldr	r4, [r6, #0]
  while (pcb != NULL) {
 800bc40:	b15c      	cbz	r4, 800bc5a <tcp_alloc+0x7a>
    struct tcp_pcb *next = pcb->next;
 800bc42:	4620      	mov	r0, r4
 800bc44:	68e4      	ldr	r4, [r4, #12]
    if (pcb->flags & TF_CLOSEPEND) {
 800bc46:	8b43      	ldrh	r3, [r0, #26]
 800bc48:	0719      	lsls	r1, r3, #28
 800bc4a:	d5f9      	bpl.n	800bc40 <tcp_alloc+0x60>
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800bc4c:	f023 0308 	bic.w	r3, r3, #8
 800bc50:	8343      	strh	r3, [r0, #26]
      tcp_close_shutdown_fin(pcb);
 800bc52:	f7fe ffc3 	bl	800abdc <tcp_close_shutdown_fin>
  while (pcb != NULL) {
 800bc56:	2c00      	cmp	r4, #0
 800bc58:	d1f3      	bne.n	800bc42 <tcp_alloc+0x62>
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800bc5a:	4b35      	ldr	r3, [pc, #212]	; (800bd30 <tcp_alloc+0x150>)
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	b193      	cbz	r3, 800bc86 <tcp_alloc+0xa6>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800bc60:	4a2c      	ldr	r2, [pc, #176]	; (800bd14 <tcp_alloc+0x134>)
 800bc62:	4618      	mov	r0, r3
 800bc64:	6a19      	ldr	r1, [r3, #32]
 800bc66:	6814      	ldr	r4, [r2, #0]
 800bc68:	1a61      	subs	r1, r4, r1
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800bc6a:	68db      	ldr	r3, [r3, #12]
 800bc6c:	b143      	cbz	r3, 800bc80 <tcp_alloc+0xa0>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800bc6e:	6a1a      	ldr	r2, [r3, #32]
 800bc70:	1aa2      	subs	r2, r4, r2
 800bc72:	428a      	cmp	r2, r1
 800bc74:	d3f9      	bcc.n	800bc6a <tcp_alloc+0x8a>
 800bc76:	4618      	mov	r0, r3
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800bc78:	68db      	ldr	r3, [r3, #12]
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800bc7a:	4611      	mov	r1, r2
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d1f6      	bne.n	800bc6e <tcp_alloc+0x8e>
  tcp_abandon(pcb, 1);
 800bc80:	2101      	movs	r1, #1
 800bc82:	f7ff fe6f 	bl	800b964 <tcp_abandon>
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800bc86:	2001      	movs	r0, #1
 800bc88:	f7fe f8c0 	bl	8009e0c <memp_malloc>
    if (pcb == NULL) {
 800bc8c:	4603      	mov	r3, r0
 800bc8e:	2800      	cmp	r0, #0
 800bc90:	d1af      	bne.n	800bbf2 <tcp_alloc+0x12>
      tcp_kill_state(LAST_ACK);
 800bc92:	2009      	movs	r0, #9
 800bc94:	f7ff ff80 	bl	800bb98 <tcp_kill_state>
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800bc98:	2001      	movs	r0, #1
 800bc9a:	f7fe f8b7 	bl	8009e0c <memp_malloc>
      if (pcb == NULL) {
 800bc9e:	4603      	mov	r3, r0
 800bca0:	2800      	cmp	r0, #0
 800bca2:	d1a6      	bne.n	800bbf2 <tcp_alloc+0x12>
        tcp_kill_state(CLOSING);
 800bca4:	2008      	movs	r0, #8
 800bca6:	f7ff ff77 	bl	800bb98 <tcp_kill_state>
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800bcaa:	2001      	movs	r0, #1
 800bcac:	f7fe f8ae 	bl	8009e0c <memp_malloc>
        if (pcb == NULL) {
 800bcb0:	4603      	mov	r3, r0
 800bcb2:	2800      	cmp	r0, #0
 800bcb4:	d19d      	bne.n	800bbf2 <tcp_alloc+0x12>
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800bcb6:	062a      	lsls	r2, r5, #24
 800bcb8:	d427      	bmi.n	800bd0a <tcp_alloc+0x12a>
  if (mprio == 0) {
 800bcba:	b1ed      	cbz	r5, 800bcf8 <tcp_alloc+0x118>
 800bcbc:	462a      	mov	r2, r5
  mprio--;
 800bcbe:	1e51      	subs	r1, r2, #1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800bcc0:	6832      	ldr	r2, [r6, #0]
  mprio--;
 800bcc2:	b2c9      	uxtb	r1, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800bcc4:	b1c2      	cbz	r2, 800bcf8 <tcp_alloc+0x118>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800bcc6:	4813      	ldr	r0, [pc, #76]	; (800bd14 <tcp_alloc+0x134>)
  inactivity = 0;
 800bcc8:	2600      	movs	r6, #0
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800bcca:	6807      	ldr	r7, [r0, #0]
 800bccc:	e005      	b.n	800bcda <tcp_alloc+0xfa>
 800bcce:	6a14      	ldr	r4, [r2, #32]
      inactivity = tcp_ticks - pcb->tmr;
 800bcd0:	1b3e      	subs	r6, r7, r4
    if ((pcb->prio < mprio) ||
 800bcd2:	4601      	mov	r1, r0
      inactivity = tcp_ticks - pcb->tmr;
 800bcd4:	4613      	mov	r3, r2
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800bcd6:	68d2      	ldr	r2, [r2, #12]
 800bcd8:	b14a      	cbz	r2, 800bcee <tcp_alloc+0x10e>
    if ((pcb->prio < mprio) ||
 800bcda:	7d50      	ldrb	r0, [r2, #21]
 800bcdc:	4288      	cmp	r0, r1
 800bcde:	d3f6      	bcc.n	800bcce <tcp_alloc+0xee>
 800bce0:	d1f9      	bne.n	800bcd6 <tcp_alloc+0xf6>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800bce2:	6a14      	ldr	r4, [r2, #32]
 800bce4:	eba7 0e04 	sub.w	lr, r7, r4
 800bce8:	45b6      	cmp	lr, r6
 800bcea:	d3f4      	bcc.n	800bcd6 <tcp_alloc+0xf6>
 800bcec:	e7f0      	b.n	800bcd0 <tcp_alloc+0xf0>
  if (inactive != NULL) {
 800bcee:	b11b      	cbz	r3, 800bcf8 <tcp_alloc+0x118>
  tcp_abandon(pcb, 1);
 800bcf0:	2101      	movs	r1, #1
 800bcf2:	4618      	mov	r0, r3
 800bcf4:	f7ff fe36 	bl	800b964 <tcp_abandon>
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800bcf8:	2001      	movs	r0, #1
 800bcfa:	f7fe f887 	bl	8009e0c <memp_malloc>
  if (pcb != NULL) {
 800bcfe:	4603      	mov	r3, r0
 800bd00:	2800      	cmp	r0, #0
 800bd02:	f47f af76 	bne.w	800bbf2 <tcp_alloc+0x12>
}
 800bd06:	4618      	mov	r0, r3
 800bd08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800bd0a:	227f      	movs	r2, #127	; 0x7f
 800bd0c:	e7d7      	b.n	800bcbe <tcp_alloc+0xde>
 800bd0e:	bf00      	nop
 800bd10:	2401058d 	.word	0x2401058d
 800bd14:	24010588 	.word	0x24010588
 800bd18:	006ddd00 	.word	0x006ddd00
 800bd1c:	0800bf21 	.word	0x0800bf21
 800bd20:	0218ffff 	.word	0x0218ffff
 800bd24:	16d00001 	.word	0x16d00001
 800bd28:	16d016d0 	.word	0x16d016d0
 800bd2c:	24010578 	.word	0x24010578
 800bd30:	24010590 	.word	0x24010590

0800bd34 <tcp_new_ip_type>:
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800bd34:	2040      	movs	r0, #64	; 0x40
 800bd36:	f7ff bf53 	b.w	800bbe0 <tcp_alloc>
 800bd3a:	bf00      	nop

0800bd3c <tcp_close_shutdown>:
{
 800bd3c:	b530      	push	{r4, r5, lr}
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800bd3e:	4604      	mov	r4, r0
{
 800bd40:	b085      	sub	sp, #20
 800bd42:	460d      	mov	r5, r1
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800bd44:	2800      	cmp	r0, #0
 800bd46:	d06b      	beq.n	800be20 <tcp_close_shutdown+0xe4>
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800bd48:	7d23      	ldrb	r3, [r4, #20]
 800bd4a:	b11d      	cbz	r5, 800bd54 <tcp_close_shutdown+0x18>
 800bd4c:	2b04      	cmp	r3, #4
 800bd4e:	d00c      	beq.n	800bd6a <tcp_close_shutdown+0x2e>
 800bd50:	2b07      	cmp	r3, #7
 800bd52:	d00a      	beq.n	800bd6a <tcp_close_shutdown+0x2e>
  switch (pcb->state) {
 800bd54:	2b01      	cmp	r3, #1
 800bd56:	d06b      	beq.n	800be30 <tcp_close_shutdown+0xf4>
 800bd58:	2b02      	cmp	r3, #2
 800bd5a:	d030      	beq.n	800bdbe <tcp_close_shutdown+0x82>
 800bd5c:	b333      	cbz	r3, 800bdac <tcp_close_shutdown+0x70>
      return tcp_close_shutdown_fin(pcb);
 800bd5e:	4620      	mov	r0, r4
}
 800bd60:	b005      	add	sp, #20
 800bd62:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      return tcp_close_shutdown_fin(pcb);
 800bd66:	f7fe bf39 	b.w	800abdc <tcp_close_shutdown_fin>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800bd6a:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 800bd6c:	2a00      	cmp	r2, #0
 800bd6e:	d037      	beq.n	800bde0 <tcp_close_shutdown+0xa4>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800bd70:	8b63      	ldrh	r3, [r4, #26]
 800bd72:	06db      	lsls	r3, r3, #27
 800bd74:	f140 8085 	bpl.w	800be82 <tcp_close_shutdown+0x146>
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800bd78:	8b21      	ldrh	r1, [r4, #24]
 800bd7a:	1d20      	adds	r0, r4, #4
 800bd7c:	8ae2      	ldrh	r2, [r4, #22]
 800bd7e:	4623      	mov	r3, r4
 800bd80:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800bd84:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800bd86:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800bd88:	9000      	str	r0, [sp, #0]
 800bd8a:	4620      	mov	r0, r4
 800bd8c:	f002 fd34 	bl	800e7f8 <tcp_rst>
      tcp_pcb_purge(pcb);
 800bd90:	4620      	mov	r0, r4
 800bd92:	f7ff fa7b 	bl	800b28c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800bd96:	4a45      	ldr	r2, [pc, #276]	; (800beac <tcp_close_shutdown+0x170>)
 800bd98:	6813      	ldr	r3, [r2, #0]
 800bd9a:	42a3      	cmp	r3, r4
 800bd9c:	d031      	beq.n	800be02 <tcp_close_shutdown+0xc6>
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d031      	beq.n	800be06 <tcp_close_shutdown+0xca>
 800bda2:	68da      	ldr	r2, [r3, #12]
 800bda4:	42a2      	cmp	r2, r4
 800bda6:	d069      	beq.n	800be7c <tcp_close_shutdown+0x140>
 800bda8:	4613      	mov	r3, r2
 800bdaa:	e7f8      	b.n	800bd9e <tcp_close_shutdown+0x62>
      if (pcb->local_port != 0) {
 800bdac:	8ae3      	ldrh	r3, [r4, #22]
 800bdae:	b9eb      	cbnz	r3, 800bdec <tcp_close_shutdown+0xb0>
  memp_free(MEMP_TCP_PCB, pcb);
 800bdb0:	4621      	mov	r1, r4
 800bdb2:	2001      	movs	r0, #1
 800bdb4:	f7fe f870 	bl	8009e98 <memp_free>
}
 800bdb8:	2000      	movs	r0, #0
 800bdba:	b005      	add	sp, #20
 800bdbc:	bd30      	pop	{r4, r5, pc}
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800bdbe:	4621      	mov	r1, r4
 800bdc0:	483a      	ldr	r0, [pc, #232]	; (800beac <tcp_close_shutdown+0x170>)
 800bdc2:	f7ff fd5f 	bl	800b884 <tcp_pcb_remove>
 800bdc6:	2101      	movs	r1, #1
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800bdc8:	7d23      	ldrb	r3, [r4, #20]
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800bdca:	4a39      	ldr	r2, [pc, #228]	; (800beb0 <tcp_close_shutdown+0x174>)
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800bdcc:	428b      	cmp	r3, r1
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800bdce:	7011      	strb	r1, [r2, #0]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800bdd0:	d1ee      	bne.n	800bdb0 <tcp_close_shutdown+0x74>
 800bdd2:	4b38      	ldr	r3, [pc, #224]	; (800beb4 <tcp_close_shutdown+0x178>)
 800bdd4:	22d4      	movs	r2, #212	; 0xd4
 800bdd6:	4938      	ldr	r1, [pc, #224]	; (800beb8 <tcp_close_shutdown+0x17c>)
 800bdd8:	4838      	ldr	r0, [pc, #224]	; (800bebc <tcp_close_shutdown+0x180>)
 800bdda:	f005 fc17 	bl	801160c <iprintf>
 800bdde:	e7e7      	b.n	800bdb0 <tcp_close_shutdown+0x74>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800bde0:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 800bde2:	f241 62d0 	movw	r2, #5840	; 0x16d0
 800bde6:	4291      	cmp	r1, r2
 800bde8:	d0b4      	beq.n	800bd54 <tcp_close_shutdown+0x18>
 800bdea:	e7c1      	b.n	800bd70 <tcp_close_shutdown+0x34>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800bdec:	4a34      	ldr	r2, [pc, #208]	; (800bec0 <tcp_close_shutdown+0x184>)
 800bdee:	6813      	ldr	r3, [r2, #0]
 800bdf0:	42a3      	cmp	r3, r4
 800bdf2:	d051      	beq.n	800be98 <tcp_close_shutdown+0x15c>
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d03e      	beq.n	800be76 <tcp_close_shutdown+0x13a>
 800bdf8:	68da      	ldr	r2, [r3, #12]
 800bdfa:	42a2      	cmp	r2, r4
 800bdfc:	d039      	beq.n	800be72 <tcp_close_shutdown+0x136>
 800bdfe:	4613      	mov	r3, r2
 800be00:	e7f8      	b.n	800bdf4 <tcp_close_shutdown+0xb8>
      TCP_RMV_ACTIVE(pcb);
 800be02:	68e3      	ldr	r3, [r4, #12]
 800be04:	6013      	str	r3, [r2, #0]
      if (tcp_input_pcb == pcb) {
 800be06:	4b2f      	ldr	r3, [pc, #188]	; (800bec4 <tcp_close_shutdown+0x188>)
      TCP_RMV_ACTIVE(pcb);
 800be08:	2000      	movs	r0, #0
 800be0a:	4a29      	ldr	r2, [pc, #164]	; (800beb0 <tcp_close_shutdown+0x174>)
 800be0c:	2101      	movs	r1, #1
      if (tcp_input_pcb == pcb) {
 800be0e:	681b      	ldr	r3, [r3, #0]
      TCP_RMV_ACTIVE(pcb);
 800be10:	60e0      	str	r0, [r4, #12]
      if (tcp_input_pcb == pcb) {
 800be12:	42a3      	cmp	r3, r4
      TCP_RMV_ACTIVE(pcb);
 800be14:	7011      	strb	r1, [r2, #0]
      if (tcp_input_pcb == pcb) {
 800be16:	d03c      	beq.n	800be92 <tcp_close_shutdown+0x156>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800be18:	7d23      	ldrb	r3, [r4, #20]
 800be1a:	2b01      	cmp	r3, #1
 800be1c:	d1c8      	bne.n	800bdb0 <tcp_close_shutdown+0x74>
 800be1e:	e7d8      	b.n	800bdd2 <tcp_close_shutdown+0x96>
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800be20:	4b24      	ldr	r3, [pc, #144]	; (800beb4 <tcp_close_shutdown+0x178>)
 800be22:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800be26:	4928      	ldr	r1, [pc, #160]	; (800bec8 <tcp_close_shutdown+0x18c>)
 800be28:	4824      	ldr	r0, [pc, #144]	; (800bebc <tcp_close_shutdown+0x180>)
 800be2a:	f005 fbef 	bl	801160c <iprintf>
 800be2e:	e78b      	b.n	800bd48 <tcp_close_shutdown+0xc>
 800be30:	4926      	ldr	r1, [pc, #152]	; (800becc <tcp_close_shutdown+0x190>)
      pcb->listener = NULL;
 800be32:	2000      	movs	r0, #0
  switch (pcb->state) {
 800be34:	4b22      	ldr	r3, [pc, #136]	; (800bec0 <tcp_close_shutdown+0x184>)
 800be36:	f101 0508 	add.w	r5, r1, #8
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800be3a:	681b      	ldr	r3, [r3, #0]
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800be3c:	b133      	cbz	r3, 800be4c <tcp_close_shutdown+0x110>
    if (pcb->listener == lpcb) {
 800be3e:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800be40:	4294      	cmp	r4, r2
      pcb->listener = NULL;
 800be42:	bf08      	it	eq
 800be44:	67d8      	streq	r0, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800be46:	68db      	ldr	r3, [r3, #12]
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d1f8      	bne.n	800be3e <tcp_close_shutdown+0x102>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800be4c:	42a9      	cmp	r1, r5
 800be4e:	d002      	beq.n	800be56 <tcp_close_shutdown+0x11a>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800be50:	f851 3f04 	ldr.w	r3, [r1, #4]!
 800be54:	e7f1      	b.n	800be3a <tcp_close_shutdown+0xfe>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800be56:	4621      	mov	r1, r4
 800be58:	481d      	ldr	r0, [pc, #116]	; (800bed0 <tcp_close_shutdown+0x194>)
 800be5a:	f7ff fd13 	bl	800b884 <tcp_pcb_remove>
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800be5e:	7d23      	ldrb	r3, [r4, #20]
 800be60:	2b01      	cmp	r3, #1
 800be62:	d01c      	beq.n	800be9e <tcp_close_shutdown+0x162>
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800be64:	4621      	mov	r1, r4
 800be66:	2002      	movs	r0, #2
 800be68:	f7fe f816 	bl	8009e98 <memp_free>
}
 800be6c:	2000      	movs	r0, #0
 800be6e:	b005      	add	sp, #20
 800be70:	bd30      	pop	{r4, r5, pc}
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800be72:	68e2      	ldr	r2, [r4, #12]
 800be74:	60da      	str	r2, [r3, #12]
 800be76:	2300      	movs	r3, #0
 800be78:	60e3      	str	r3, [r4, #12]
 800be7a:	e799      	b.n	800bdb0 <tcp_close_shutdown+0x74>
      TCP_RMV_ACTIVE(pcb);
 800be7c:	68e2      	ldr	r2, [r4, #12]
 800be7e:	60da      	str	r2, [r3, #12]
 800be80:	e7c1      	b.n	800be06 <tcp_close_shutdown+0xca>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800be82:	4b0c      	ldr	r3, [pc, #48]	; (800beb4 <tcp_close_shutdown+0x178>)
 800be84:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800be88:	4912      	ldr	r1, [pc, #72]	; (800bed4 <tcp_close_shutdown+0x198>)
 800be8a:	480c      	ldr	r0, [pc, #48]	; (800bebc <tcp_close_shutdown+0x180>)
 800be8c:	f005 fbbe 	bl	801160c <iprintf>
 800be90:	e772      	b.n	800bd78 <tcp_close_shutdown+0x3c>
        tcp_trigger_input_pcb_close();
 800be92:	f001 fd8b 	bl	800d9ac <tcp_trigger_input_pcb_close>
 800be96:	e78f      	b.n	800bdb8 <tcp_close_shutdown+0x7c>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800be98:	68e3      	ldr	r3, [r4, #12]
 800be9a:	6013      	str	r3, [r2, #0]
 800be9c:	e7eb      	b.n	800be76 <tcp_close_shutdown+0x13a>
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800be9e:	4b05      	ldr	r3, [pc, #20]	; (800beb4 <tcp_close_shutdown+0x178>)
 800bea0:	22df      	movs	r2, #223	; 0xdf
 800bea2:	490d      	ldr	r1, [pc, #52]	; (800bed8 <tcp_close_shutdown+0x19c>)
 800bea4:	4805      	ldr	r0, [pc, #20]	; (800bebc <tcp_close_shutdown+0x180>)
 800bea6:	f005 fbb1 	bl	801160c <iprintf>
 800beaa:	e7db      	b.n	800be64 <tcp_close_shutdown+0x128>
 800beac:	24010578 	.word	0x24010578
 800beb0:	2401057c 	.word	0x2401057c
 800beb4:	08013a70 	.word	0x08013a70
 800beb8:	08013aac 	.word	0x08013aac
 800bebc:	080128dc 	.word	0x080128dc
 800bec0:	24010580 	.word	0x24010580
 800bec4:	240105bc 	.word	0x240105bc
 800bec8:	08014030 	.word	0x08014030
 800becc:	0801413c 	.word	0x0801413c
 800bed0:	24010584 	.word	0x24010584
 800bed4:	08014050 	.word	0x08014050
 800bed8:	0801406c 	.word	0x0801406c

0800bedc <tcp_close>:
{
 800bedc:	b510      	push	{r4, lr}
 800bede:	4604      	mov	r4, r0
  LWIP_ASSERT_CORE_LOCKED();
 800bee0:	f7fa fecc 	bl	8006c7c <sys_check_core_locking>
  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800bee4:	b164      	cbz	r4, 800bf00 <tcp_close+0x24>
  if (pcb->state != LISTEN) {
 800bee6:	7d23      	ldrb	r3, [r4, #20]
 800bee8:	2b01      	cmp	r3, #1
 800beea:	d003      	beq.n	800bef4 <tcp_close+0x18>
    tcp_set_flags(pcb, TF_RXCLOSED);
 800beec:	8b63      	ldrh	r3, [r4, #26]
 800beee:	f043 0310 	orr.w	r3, r3, #16
 800bef2:	8363      	strh	r3, [r4, #26]
  return tcp_close_shutdown(pcb, 1);
 800bef4:	4620      	mov	r0, r4
 800bef6:	2101      	movs	r1, #1
}
 800bef8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return tcp_close_shutdown(pcb, 1);
 800befc:	f7ff bf1e 	b.w	800bd3c <tcp_close_shutdown>
  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800bf00:	4b04      	ldr	r3, [pc, #16]	; (800bf14 <tcp_close+0x38>)
 800bf02:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800bf06:	4904      	ldr	r1, [pc, #16]	; (800bf18 <tcp_close+0x3c>)
 800bf08:	4804      	ldr	r0, [pc, #16]	; (800bf1c <tcp_close+0x40>)
 800bf0a:	f005 fb7f 	bl	801160c <iprintf>
}
 800bf0e:	f06f 000f 	mvn.w	r0, #15
 800bf12:	bd10      	pop	{r4, pc}
 800bf14:	08013a70 	.word	0x08013a70
 800bf18:	08014088 	.word	0x08014088
 800bf1c:	080128dc 	.word	0x080128dc

0800bf20 <tcp_recv_null>:
{
 800bf20:	b510      	push	{r4, lr}
 800bf22:	b082      	sub	sp, #8
  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800bf24:	b301      	cbz	r1, 800bf68 <tcp_recv_null+0x48>
  if (p != NULL) {
 800bf26:	4614      	mov	r4, r2
 800bf28:	4608      	mov	r0, r1
 800bf2a:	b142      	cbz	r2, 800bf3e <tcp_recv_null+0x1e>
    tcp_recved(pcb, p->tot_len);
 800bf2c:	8911      	ldrh	r1, [r2, #8]
 800bf2e:	f7fe ffe9 	bl	800af04 <tcp_recved>
    pbuf_free(p);
 800bf32:	4620      	mov	r0, r4
 800bf34:	f7fe fb76 	bl	800a624 <pbuf_free>
  return ERR_OK;
 800bf38:	2000      	movs	r0, #0
}
 800bf3a:	b002      	add	sp, #8
 800bf3c:	bd10      	pop	{r4, pc}
  } else if (err == ERR_OK) {
 800bf3e:	b113      	cbz	r3, 800bf46 <tcp_recv_null+0x26>
  return ERR_OK;
 800bf40:	4610      	mov	r0, r2
}
 800bf42:	b002      	add	sp, #8
 800bf44:	bd10      	pop	{r4, pc}
 800bf46:	9101      	str	r1, [sp, #4]
  LWIP_ASSERT_CORE_LOCKED();
 800bf48:	f7fa fe98 	bl	8006c7c <sys_check_core_locking>
  if (pcb->state != LISTEN) {
 800bf4c:	9801      	ldr	r0, [sp, #4]
 800bf4e:	7d03      	ldrb	r3, [r0, #20]
 800bf50:	2b01      	cmp	r3, #1
 800bf52:	d003      	beq.n	800bf5c <tcp_recv_null+0x3c>
    tcp_set_flags(pcb, TF_RXCLOSED);
 800bf54:	8b43      	ldrh	r3, [r0, #26]
 800bf56:	f043 0310 	orr.w	r3, r3, #16
 800bf5a:	8343      	strh	r3, [r0, #26]
  return tcp_close_shutdown(pcb, 1);
 800bf5c:	2101      	movs	r1, #1
}
 800bf5e:	b002      	add	sp, #8
 800bf60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return tcp_close_shutdown(pcb, 1);
 800bf64:	f7ff beea 	b.w	800bd3c <tcp_close_shutdown>
  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800bf68:	4b04      	ldr	r3, [pc, #16]	; (800bf7c <tcp_recv_null+0x5c>)
 800bf6a:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800bf6e:	4904      	ldr	r1, [pc, #16]	; (800bf80 <tcp_recv_null+0x60>)
 800bf70:	4804      	ldr	r0, [pc, #16]	; (800bf84 <tcp_recv_null+0x64>)
 800bf72:	f005 fb4b 	bl	801160c <iprintf>
 800bf76:	f06f 000f 	mvn.w	r0, #15
 800bf7a:	e7de      	b.n	800bf3a <tcp_recv_null+0x1a>
 800bf7c:	08013a70 	.word	0x08013a70
 800bf80:	080140a0 	.word	0x080140a0
 800bf84:	080128dc 	.word	0x080128dc

0800bf88 <tcp_process_refused_data>:
{
 800bf88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800bf8a:	b380      	cbz	r0, 800bfee <tcp_process_refused_data+0x66>
    u8_t refused_flags = pcb->refused_data->flags;
 800bf8c:	6f85      	ldr	r5, [r0, #120]	; 0x78
    pcb->refused_data = NULL;
 800bf8e:	2300      	movs	r3, #0
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800bf90:	f8d0 6084 	ldr.w	r6, [r0, #132]	; 0x84
 800bf94:	4604      	mov	r4, r0
    u8_t refused_flags = pcb->refused_data->flags;
 800bf96:	7b6f      	ldrb	r7, [r5, #13]
    pcb->refused_data = NULL;
 800bf98:	6783      	str	r3, [r0, #120]	; 0x78
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800bf9a:	b156      	cbz	r6, 800bfb2 <tcp_process_refused_data+0x2a>
 800bf9c:	4601      	mov	r1, r0
 800bf9e:	462a      	mov	r2, r5
 800bfa0:	6900      	ldr	r0, [r0, #16]
 800bfa2:	47b0      	blx	r6
    if (err == ERR_OK) {
 800bfa4:	b158      	cbz	r0, 800bfbe <tcp_process_refused_data+0x36>
    } else if (err == ERR_ABRT) {
 800bfa6:	300d      	adds	r0, #13
 800bfa8:	d01e      	beq.n	800bfe8 <tcp_process_refused_data+0x60>
      return ERR_INPROGRESS;
 800bfaa:	f06f 0004 	mvn.w	r0, #4
      pcb->refused_data = refused_data;
 800bfae:	67a5      	str	r5, [r4, #120]	; 0x78
}
 800bfb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tcp_recved(pcb, p->tot_len);
 800bfb2:	8929      	ldrh	r1, [r5, #8]
 800bfb4:	f7fe ffa6 	bl	800af04 <tcp_recved>
    pbuf_free(p);
 800bfb8:	4628      	mov	r0, r5
 800bfba:	f7fe fb33 	bl	800a624 <pbuf_free>
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800bfbe:	06bb      	lsls	r3, r7, #26
 800bfc0:	d510      	bpl.n	800bfe4 <tcp_process_refused_data+0x5c>
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800bfc2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800bfc4:	f241 62d0 	movw	r2, #5840	; 0x16d0
 800bfc8:	4293      	cmp	r3, r2
 800bfca:	d001      	beq.n	800bfd0 <tcp_process_refused_data+0x48>
          pcb->rcv_wnd++;
 800bfcc:	3301      	adds	r3, #1
 800bfce:	8523      	strh	r3, [r4, #40]	; 0x28
        TCP_EVENT_CLOSED(pcb, err);
 800bfd0:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
 800bfd4:	b135      	cbz	r5, 800bfe4 <tcp_process_refused_data+0x5c>
 800bfd6:	2300      	movs	r3, #0
 800bfd8:	4621      	mov	r1, r4
 800bfda:	6920      	ldr	r0, [r4, #16]
 800bfdc:	461a      	mov	r2, r3
 800bfde:	47a8      	blx	r5
        if (err == ERR_ABRT) {
 800bfe0:	300d      	adds	r0, #13
 800bfe2:	d001      	beq.n	800bfe8 <tcp_process_refused_data+0x60>
  return ERR_OK;
 800bfe4:	2000      	movs	r0, #0
}
 800bfe6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          return ERR_ABRT;
 800bfe8:	f06f 000c 	mvn.w	r0, #12
}
 800bfec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800bfee:	4b05      	ldr	r3, [pc, #20]	; (800c004 <tcp_process_refused_data+0x7c>)
 800bff0:	f240 6209 	movw	r2, #1545	; 0x609
 800bff4:	4904      	ldr	r1, [pc, #16]	; (800c008 <tcp_process_refused_data+0x80>)
 800bff6:	4805      	ldr	r0, [pc, #20]	; (800c00c <tcp_process_refused_data+0x84>)
 800bff8:	f005 fb08 	bl	801160c <iprintf>
 800bffc:	f06f 000f 	mvn.w	r0, #15
}
 800c000:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c002:	bf00      	nop
 800c004:	08013a70 	.word	0x08013a70
 800c008:	080140bc 	.word	0x080140bc
 800c00c:	080128dc 	.word	0x080128dc

0800c010 <tcp_fasttmr>:
{
 800c010:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  ++tcp_timer_ctr;
 800c014:	4d1c      	ldr	r5, [pc, #112]	; (800c088 <tcp_fasttmr+0x78>)
        tcp_active_pcbs_changed = 0;
 800c016:	2700      	movs	r7, #0
 800c018:	f8df 8074 	ldr.w	r8, [pc, #116]	; 800c090 <tcp_fasttmr+0x80>
  ++tcp_timer_ctr;
 800c01c:	782b      	ldrb	r3, [r5, #0]
        tcp_active_pcbs_changed = 0;
 800c01e:	4e1b      	ldr	r6, [pc, #108]	; (800c08c <tcp_fasttmr+0x7c>)
  ++tcp_timer_ctr;
 800c020:	3301      	adds	r3, #1
 800c022:	702b      	strb	r3, [r5, #0]
  pcb = tcp_active_pcbs;
 800c024:	f8d8 4000 	ldr.w	r4, [r8]
  while (pcb != NULL) {
 800c028:	b1bc      	cbz	r4, 800c05a <tcp_fasttmr+0x4a>
    if (pcb->last_timer != tcp_timer_ctr) {
 800c02a:	782a      	ldrb	r2, [r5, #0]
 800c02c:	7fa3      	ldrb	r3, [r4, #30]
 800c02e:	4293      	cmp	r3, r2
 800c030:	d015      	beq.n	800c05e <tcp_fasttmr+0x4e>
      if (pcb->flags & TF_ACK_DELAY) {
 800c032:	8b63      	ldrh	r3, [r4, #26]
      pcb->last_timer = tcp_timer_ctr;
 800c034:	77a2      	strb	r2, [r4, #30]
      if (pcb->flags & TF_ACK_DELAY) {
 800c036:	07d9      	lsls	r1, r3, #31
 800c038:	d41a      	bmi.n	800c070 <tcp_fasttmr+0x60>
      if (pcb->flags & TF_CLOSEPEND) {
 800c03a:	071a      	lsls	r2, r3, #28
 800c03c:	d411      	bmi.n	800c062 <tcp_fasttmr+0x52>
      if (pcb->refused_data != NULL) {
 800c03e:	6fa3      	ldr	r3, [r4, #120]	; 0x78
      next = pcb->next;
 800c040:	f8d4 900c 	ldr.w	r9, [r4, #12]
      if (pcb->refused_data != NULL) {
 800c044:	b133      	cbz	r3, 800c054 <tcp_fasttmr+0x44>
        tcp_process_refused_data(pcb);
 800c046:	4620      	mov	r0, r4
        tcp_active_pcbs_changed = 0;
 800c048:	7037      	strb	r7, [r6, #0]
        tcp_process_refused_data(pcb);
 800c04a:	f7ff ff9d 	bl	800bf88 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800c04e:	7833      	ldrb	r3, [r6, #0]
 800c050:	2b00      	cmp	r3, #0
 800c052:	d1e7      	bne.n	800c024 <tcp_fasttmr+0x14>
      pcb = next;
 800c054:	464c      	mov	r4, r9
  while (pcb != NULL) {
 800c056:	2c00      	cmp	r4, #0
 800c058:	d1e7      	bne.n	800c02a <tcp_fasttmr+0x1a>
}
 800c05a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      pcb = pcb->next;
 800c05e:	68e4      	ldr	r4, [r4, #12]
 800c060:	e7e2      	b.n	800c028 <tcp_fasttmr+0x18>
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800c062:	f023 0308 	bic.w	r3, r3, #8
        tcp_close_shutdown_fin(pcb);
 800c066:	4620      	mov	r0, r4
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800c068:	8363      	strh	r3, [r4, #26]
        tcp_close_shutdown_fin(pcb);
 800c06a:	f7fe fdb7 	bl	800abdc <tcp_close_shutdown_fin>
 800c06e:	e7e6      	b.n	800c03e <tcp_fasttmr+0x2e>
        tcp_ack_now(pcb);
 800c070:	f043 0302 	orr.w	r3, r3, #2
        tcp_output(pcb);
 800c074:	4620      	mov	r0, r4
        tcp_ack_now(pcb);
 800c076:	8363      	strh	r3, [r4, #26]
        tcp_output(pcb);
 800c078:	f002 fc38 	bl	800e8ec <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c07c:	8b63      	ldrh	r3, [r4, #26]
 800c07e:	f023 0303 	bic.w	r3, r3, #3
 800c082:	b29b      	uxth	r3, r3
 800c084:	8363      	strh	r3, [r4, #26]
 800c086:	e7d8      	b.n	800c03a <tcp_fasttmr+0x2a>
 800c088:	2401058d 	.word	0x2401058d
 800c08c:	2401057c 	.word	0x2401057c
 800c090:	24010578 	.word	0x24010578

0800c094 <tcp_tmr>:
{
 800c094:	b508      	push	{r3, lr}
  tcp_fasttmr();
 800c096:	f7ff ffbb 	bl	800c010 <tcp_fasttmr>
  if (++tcp_timer & 1) {
 800c09a:	4a06      	ldr	r2, [pc, #24]	; (800c0b4 <tcp_tmr+0x20>)
 800c09c:	7813      	ldrb	r3, [r2, #0]
 800c09e:	3301      	adds	r3, #1
 800c0a0:	b2db      	uxtb	r3, r3
 800c0a2:	7013      	strb	r3, [r2, #0]
 800c0a4:	07db      	lsls	r3, r3, #31
 800c0a6:	d400      	bmi.n	800c0aa <tcp_tmr+0x16>
}
 800c0a8:	bd08      	pop	{r3, pc}
 800c0aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    tcp_slowtmr();
 800c0ae:	f7ff b93f 	b.w	800b330 <tcp_slowtmr>
 800c0b2:	bf00      	nop
 800c0b4:	2401058c 	.word	0x2401058c

0800c0b8 <tcp_next_iss>:
{
 800c0b8:	b508      	push	{r3, lr}
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800c0ba:	b130      	cbz	r0, 800c0ca <tcp_next_iss+0x12>
  iss += tcp_ticks;       /* XXX */
 800c0bc:	4b07      	ldr	r3, [pc, #28]	; (800c0dc <tcp_next_iss+0x24>)
 800c0be:	4a08      	ldr	r2, [pc, #32]	; (800c0e0 <tcp_next_iss+0x28>)
 800c0c0:	6818      	ldr	r0, [r3, #0]
 800c0c2:	6812      	ldr	r2, [r2, #0]
 800c0c4:	4410      	add	r0, r2
 800c0c6:	6018      	str	r0, [r3, #0]
}
 800c0c8:	bd08      	pop	{r3, pc}
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800c0ca:	4b06      	ldr	r3, [pc, #24]	; (800c0e4 <tcp_next_iss+0x2c>)
 800c0cc:	f640 02af 	movw	r2, #2223	; 0x8af
 800c0d0:	4905      	ldr	r1, [pc, #20]	; (800c0e8 <tcp_next_iss+0x30>)
 800c0d2:	4806      	ldr	r0, [pc, #24]	; (800c0ec <tcp_next_iss+0x34>)
 800c0d4:	f005 fa9a 	bl	801160c <iprintf>
 800c0d8:	e7f0      	b.n	800c0bc <tcp_next_iss+0x4>
 800c0da:	bf00      	nop
 800c0dc:	24000028 	.word	0x24000028
 800c0e0:	24010588 	.word	0x24010588
 800c0e4:	08013a70 	.word	0x08013a70
 800c0e8:	080140e4 	.word	0x080140e4
 800c0ec:	080128dc 	.word	0x080128dc

0800c0f0 <tcp_eff_send_mss_netif>:
{
 800c0f0:	b538      	push	{r3, r4, r5, lr}
 800c0f2:	4605      	mov	r5, r0
 800c0f4:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800c0f6:	b172      	cbz	r2, 800c116 <tcp_eff_send_mss_netif+0x26>
    if (outif == NULL) {
 800c0f8:	b144      	cbz	r4, 800c10c <tcp_eff_send_mss_netif+0x1c>
    mtu = outif->mtu;
 800c0fa:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
  if (mtu != 0) {
 800c0fc:	b133      	cbz	r3, 800c10c <tcp_eff_send_mss_netif+0x1c>
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800c0fe:	2b28      	cmp	r3, #40	; 0x28
 800c100:	d906      	bls.n	800c110 <tcp_eff_send_mss_netif+0x20>
 800c102:	3b28      	subs	r3, #40	; 0x28
    sendmss = LWIP_MIN(sendmss, mss_s);
 800c104:	b29b      	uxth	r3, r3
 800c106:	429d      	cmp	r5, r3
 800c108:	bf28      	it	cs
 800c10a:	461d      	movcs	r5, r3
}
 800c10c:	4628      	mov	r0, r5
 800c10e:	bd38      	pop	{r3, r4, r5, pc}
 800c110:	2500      	movs	r5, #0
 800c112:	4628      	mov	r0, r5
 800c114:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800c116:	4b04      	ldr	r3, [pc, #16]	; (800c128 <tcp_eff_send_mss_netif+0x38>)
 800c118:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800c11c:	4903      	ldr	r1, [pc, #12]	; (800c12c <tcp_eff_send_mss_netif+0x3c>)
 800c11e:	4804      	ldr	r0, [pc, #16]	; (800c130 <tcp_eff_send_mss_netif+0x40>)
 800c120:	f005 fa74 	bl	801160c <iprintf>
 800c124:	e7e8      	b.n	800c0f8 <tcp_eff_send_mss_netif+0x8>
 800c126:	bf00      	nop
 800c128:	08013a70 	.word	0x08013a70
 800c12c:	08014100 	.word	0x08014100
 800c130:	080128dc 	.word	0x080128dc

0800c134 <tcp_netif_ip_addr_changed>:
  if (!ip_addr_isany(old_addr)) {
 800c134:	b308      	cbz	r0, 800c17a <tcp_netif_ip_addr_changed+0x46>
{
 800c136:	b538      	push	{r3, r4, r5, lr}
  if (!ip_addr_isany(old_addr)) {
 800c138:	6803      	ldr	r3, [r0, #0]
 800c13a:	4604      	mov	r4, r0
 800c13c:	b903      	cbnz	r3, 800c140 <tcp_netif_ip_addr_changed+0xc>
}
 800c13e:	bd38      	pop	{r3, r4, r5, pc}
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800c140:	4b0e      	ldr	r3, [pc, #56]	; (800c17c <tcp_netif_ip_addr_changed+0x48>)
 800c142:	460d      	mov	r5, r1
 800c144:	6819      	ldr	r1, [r3, #0]
 800c146:	f7ff fd05 	bl	800bb54 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800c14a:	4b0d      	ldr	r3, [pc, #52]	; (800c180 <tcp_netif_ip_addr_changed+0x4c>)
 800c14c:	4620      	mov	r0, r4
 800c14e:	6819      	ldr	r1, [r3, #0]
 800c150:	f7ff fd00 	bl	800bb54 <tcp_netif_ip_addr_changed_pcblist>
    if (!ip_addr_isany(new_addr)) {
 800c154:	2d00      	cmp	r5, #0
 800c156:	d0f2      	beq.n	800c13e <tcp_netif_ip_addr_changed+0xa>
 800c158:	682b      	ldr	r3, [r5, #0]
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d0ef      	beq.n	800c13e <tcp_netif_ip_addr_changed+0xa>
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800c15e:	4b09      	ldr	r3, [pc, #36]	; (800c184 <tcp_netif_ip_addr_changed+0x50>)
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	2b00      	cmp	r3, #0
 800c164:	d0eb      	beq.n	800c13e <tcp_netif_ip_addr_changed+0xa>
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800c166:	6819      	ldr	r1, [r3, #0]
 800c168:	6822      	ldr	r2, [r4, #0]
 800c16a:	4291      	cmp	r1, r2
 800c16c:	d101      	bne.n	800c172 <tcp_netif_ip_addr_changed+0x3e>
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800c16e:	682a      	ldr	r2, [r5, #0]
 800c170:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800c172:	68db      	ldr	r3, [r3, #12]
 800c174:	2b00      	cmp	r3, #0
 800c176:	d1f6      	bne.n	800c166 <tcp_netif_ip_addr_changed+0x32>
}
 800c178:	bd38      	pop	{r3, r4, r5, pc}
 800c17a:	4770      	bx	lr
 800c17c:	24010578 	.word	0x24010578
 800c180:	24010580 	.word	0x24010580
 800c184:	24010584 	.word	0x24010584

0800c188 <tcp_free_ooseq>:
{
 800c188:	b570      	push	{r4, r5, r6, lr}
  if (pcb->ooseq) {
 800c18a:	6f44      	ldr	r4, [r0, #116]	; 0x74
 800c18c:	b16c      	cbz	r4, 800c1aa <tcp_free_ooseq+0x22>
 800c18e:	4606      	mov	r6, r0
      pbuf_free(seg->p);
 800c190:	4625      	mov	r5, r4
    struct tcp_seg *next = seg->next;
 800c192:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 800c194:	6868      	ldr	r0, [r5, #4]
 800c196:	b108      	cbz	r0, 800c19c <tcp_free_ooseq+0x14>
      pbuf_free(seg->p);
 800c198:	f7fe fa44 	bl	800a624 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 800c19c:	4629      	mov	r1, r5
 800c19e:	2003      	movs	r0, #3
 800c1a0:	f7fd fe7a 	bl	8009e98 <memp_free>
  while (seg != NULL) {
 800c1a4:	2c00      	cmp	r4, #0
 800c1a6:	d1f3      	bne.n	800c190 <tcp_free_ooseq+0x8>
    pcb->ooseq = NULL;
 800c1a8:	6774      	str	r4, [r6, #116]	; 0x74
}
 800c1aa:	bd70      	pop	{r4, r5, r6, pc}

0800c1ac <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800c1ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800c1ae:	4605      	mov	r5, r0
{
 800c1b0:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800c1b2:	2800      	cmp	r0, #0
 800c1b4:	d03e      	beq.n	800c234 <tcp_oos_insert_segment+0x88>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800c1b6:	68eb      	ldr	r3, [r5, #12]
 800c1b8:	8998      	ldrh	r0, [r3, #12]
 800c1ba:	f7fd fa91 	bl	80096e0 <lwip_htons>
 800c1be:	07c2      	lsls	r2, r0, #31
 800c1c0:	d432      	bmi.n	800c228 <tcp_oos_insert_segment+0x7c>
 800c1c2:	4e20      	ldr	r6, [pc, #128]	; (800c244 <tcp_oos_insert_segment+0x98>)
 800c1c4:	e005      	b.n	800c1d2 <tcp_oos_insert_segment+0x26>
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
      }
      old_seg = next;
      next = next->next;
 800c1c6:	6827      	ldr	r7, [r4, #0]
      tcp_seg_free(old_seg);
 800c1c8:	4620      	mov	r0, r4
 800c1ca:	f7fe ffa1 	bl	800b110 <tcp_seg_free>
    while (next &&
 800c1ce:	463c      	mov	r4, r7
 800c1d0:	b1ef      	cbz	r7, 800c20e <tcp_oos_insert_segment+0x62>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800c1d2:	68e1      	ldr	r1, [r4, #12]
 800c1d4:	8923      	ldrh	r3, [r4, #8]
 800c1d6:	6837      	ldr	r7, [r6, #0]
 800c1d8:	892a      	ldrh	r2, [r5, #8]
 800c1da:	6848      	ldr	r0, [r1, #4]
 800c1dc:	443a      	add	r2, r7
 800c1de:	4403      	add	r3, r0
 800c1e0:	1ad3      	subs	r3, r2, r3
    while (next &&
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	db15      	blt.n	800c212 <tcp_oos_insert_segment+0x66>
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800c1e6:	8988      	ldrh	r0, [r1, #12]
 800c1e8:	f7fd fa7a 	bl	80096e0 <lwip_htons>
 800c1ec:	07c3      	lsls	r3, r0, #31
 800c1ee:	d5ea      	bpl.n	800c1c6 <tcp_oos_insert_segment+0x1a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800c1f0:	68eb      	ldr	r3, [r5, #12]
 800c1f2:	2001      	movs	r0, #1
 800c1f4:	899f      	ldrh	r7, [r3, #12]
 800c1f6:	f7fd fa73 	bl	80096e0 <lwip_htons>
 800c1fa:	68eb      	ldr	r3, [r5, #12]
 800c1fc:	4338      	orrs	r0, r7
      next = next->next;
 800c1fe:	6827      	ldr	r7, [r4, #0]
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800c200:	8198      	strh	r0, [r3, #12]
      tcp_seg_free(old_seg);
 800c202:	4620      	mov	r0, r4
 800c204:	f7fe ff84 	bl	800b110 <tcp_seg_free>
    while (next &&
 800c208:	463c      	mov	r4, r7
 800c20a:	2f00      	cmp	r7, #0
 800c20c:	d1e1      	bne.n	800c1d2 <tcp_oos_insert_segment+0x26>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
      pbuf_realloc(cseg->p, cseg->len);
    }
  }
  cseg->next = next;
 800c20e:	602c      	str	r4, [r5, #0]
}
 800c210:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800c212:	1a12      	subs	r2, r2, r0
    if (next &&
 800c214:	2a00      	cmp	r2, #0
 800c216:	ddfa      	ble.n	800c20e <tcp_oos_insert_segment+0x62>
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800c218:	1bc1      	subs	r1, r0, r7
      pbuf_realloc(cseg->p, cseg->len);
 800c21a:	6868      	ldr	r0, [r5, #4]
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800c21c:	b289      	uxth	r1, r1
 800c21e:	8129      	strh	r1, [r5, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800c220:	f7fe fb1e 	bl	800a860 <pbuf_realloc>
  cseg->next = next;
 800c224:	602c      	str	r4, [r5, #0]
}
 800c226:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tcp_segs_free(next);
 800c228:	4620      	mov	r0, r4
    next = NULL;
 800c22a:	2400      	movs	r4, #0
    tcp_segs_free(next);
 800c22c:	f7fe ff5e 	bl	800b0ec <tcp_segs_free>
  cseg->next = next;
 800c230:	602c      	str	r4, [r5, #0]
}
 800c232:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800c234:	4b04      	ldr	r3, [pc, #16]	; (800c248 <tcp_oos_insert_segment+0x9c>)
 800c236:	f240 421f 	movw	r2, #1055	; 0x41f
 800c23a:	4904      	ldr	r1, [pc, #16]	; (800c24c <tcp_oos_insert_segment+0xa0>)
 800c23c:	4804      	ldr	r0, [pc, #16]	; (800c250 <tcp_oos_insert_segment+0xa4>)
 800c23e:	f005 f9e5 	bl	801160c <iprintf>
 800c242:	e7b8      	b.n	800c1b6 <tcp_oos_insert_segment+0xa>
 800c244:	240105b8 	.word	0x240105b8
 800c248:	08014150 	.word	0x08014150
 800c24c:	08014184 	.word	0x08014184
 800c250:	080128dc 	.word	0x080128dc

0800c254 <tcp_input_delayed_close>:
{
 800c254:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800c256:	4604      	mov	r4, r0
 800c258:	b1c8      	cbz	r0, 800c28e <tcp_input_delayed_close+0x3a>
  if (recv_flags & TF_CLOSED) {
 800c25a:	4b11      	ldr	r3, [pc, #68]	; (800c2a0 <tcp_input_delayed_close+0x4c>)
 800c25c:	781b      	ldrb	r3, [r3, #0]
 800c25e:	f013 0310 	ands.w	r3, r3, #16
 800c262:	d101      	bne.n	800c268 <tcp_input_delayed_close+0x14>
  return 0;
 800c264:	4618      	mov	r0, r3
}
 800c266:	bd10      	pop	{r4, pc}
    if (!(pcb->flags & TF_RXCLOSED)) {
 800c268:	8b63      	ldrh	r3, [r4, #26]
 800c26a:	06db      	lsls	r3, r3, #27
 800c26c:	d406      	bmi.n	800c27c <tcp_input_delayed_close+0x28>
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800c26e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800c272:	b11b      	cbz	r3, 800c27c <tcp_input_delayed_close+0x28>
 800c274:	f06f 010e 	mvn.w	r1, #14
 800c278:	6920      	ldr	r0, [r4, #16]
 800c27a:	4798      	blx	r3
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800c27c:	4621      	mov	r1, r4
 800c27e:	4809      	ldr	r0, [pc, #36]	; (800c2a4 <tcp_input_delayed_close+0x50>)
 800c280:	f7ff fb00 	bl	800b884 <tcp_pcb_remove>
    tcp_free(pcb);
 800c284:	4620      	mov	r0, r4
 800c286:	f7fe fce9 	bl	800ac5c <tcp_free>
 800c28a:	2001      	movs	r0, #1
}
 800c28c:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800c28e:	4b06      	ldr	r3, [pc, #24]	; (800c2a8 <tcp_input_delayed_close+0x54>)
 800c290:	f240 225a 	movw	r2, #602	; 0x25a
 800c294:	4905      	ldr	r1, [pc, #20]	; (800c2ac <tcp_input_delayed_close+0x58>)
 800c296:	4806      	ldr	r0, [pc, #24]	; (800c2b0 <tcp_input_delayed_close+0x5c>)
 800c298:	f005 f9b8 	bl	801160c <iprintf>
 800c29c:	e7dd      	b.n	800c25a <tcp_input_delayed_close+0x6>
 800c29e:	bf00      	nop
 800c2a0:	240105b4 	.word	0x240105b4
 800c2a4:	24010578 	.word	0x24010578
 800c2a8:	08014150 	.word	0x08014150
 800c2ac:	080141ac 	.word	0x080141ac
 800c2b0:	080128dc 	.word	0x080128dc

0800c2b4 <tcp_free_acked_segments.constprop.0>:
#endif /* TCP_QUEUE_OOSEQ */

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
 800c2b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2b8:	b083      	sub	sp, #12
 800c2ba:	9201      	str	r2, [sp, #4]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800c2bc:	2900      	cmp	r1, #0
 800c2be:	d03d      	beq.n	800c33c <tcp_free_acked_segments.constprop.0+0x88>
 800c2c0:	4607      	mov	r7, r0
 800c2c2:	460c      	mov	r4, r1
 800c2c4:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 800c388 <tcp_free_acked_segments.constprop.0+0xd4>
    seg_list = seg_list->next;

    clen = pbuf_clen(next->p);
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800c2c8:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 800c37c <tcp_free_acked_segments.constprop.0+0xc8>
 800c2cc:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800c38c <tcp_free_acked_segments.constprop.0+0xd8>
 800c2d0:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 800c384 <tcp_free_acked_segments.constprop.0+0xd0>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800c2d4:	68e3      	ldr	r3, [r4, #12]
 800c2d6:	6858      	ldr	r0, [r3, #4]
 800c2d8:	f7fd fa06 	bl	80096e8 <lwip_htonl>
 800c2dc:	68e3      	ldr	r3, [r4, #12]
 800c2de:	4605      	mov	r5, r0
 800c2e0:	8926      	ldrh	r6, [r4, #8]
 800c2e2:	8998      	ldrh	r0, [r3, #12]
 800c2e4:	f7fd f9fc 	bl	80096e0 <lwip_htons>
 800c2e8:	f8d8 3000 	ldr.w	r3, [r8]
 800c2ec:	f010 0003 	ands.w	r0, r0, #3
 800c2f0:	eba5 0503 	sub.w	r5, r5, r3
 800c2f4:	bf18      	it	ne
 800c2f6:	2001      	movne	r0, #1
 800c2f8:	4435      	add	r5, r6
 800c2fa:	4405      	add	r5, r0
  while (seg_list != NULL &&
 800c2fc:	2d00      	cmp	r5, #0
 800c2fe:	dc36      	bgt.n	800c36e <tcp_free_acked_segments.constprop.0+0xba>
    seg_list = seg_list->next;
 800c300:	e9d4 6000 	ldrd	r6, r0, [r4]
    clen = pbuf_clen(next->p);
 800c304:	f7fe fb04 	bl	800a910 <pbuf_clen>
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800c308:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
    clen = pbuf_clen(next->p);
 800c30c:	4605      	mov	r5, r0
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800c30e:	4298      	cmp	r0, r3
 800c310:	d823      	bhi.n	800c35a <tcp_free_acked_segments.constprop.0+0xa6>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800c312:	4919      	ldr	r1, [pc, #100]	; (800c378 <tcp_free_acked_segments.constprop.0+0xc4>)
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800c314:	1b5b      	subs	r3, r3, r5
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800c316:	8922      	ldrh	r2, [r4, #8]
    tcp_seg_free(next);
 800c318:	4620      	mov	r0, r4
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800c31a:	880d      	ldrh	r5, [r1, #0]
 800c31c:	4634      	mov	r4, r6
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800c31e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800c322:	1953      	adds	r3, r2, r5
 800c324:	800b      	strh	r3, [r1, #0]
    tcp_seg_free(next);
 800c326:	f7fe fef3 	bl	800b110 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800c32a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800c32e:	b11b      	cbz	r3, 800c338 <tcp_free_acked_segments.constprop.0+0x84>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800c330:	9b01      	ldr	r3, [sp, #4]
 800c332:	ea53 0506 	orrs.w	r5, r3, r6
 800c336:	d005      	beq.n	800c344 <tcp_free_acked_segments.constprop.0+0x90>
  while (seg_list != NULL &&
 800c338:	2e00      	cmp	r6, #0
 800c33a:	d1cb      	bne.n	800c2d4 <tcp_free_acked_segments.constprop.0+0x20>
 800c33c:	2000      	movs	r0, #0
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
}
 800c33e:	b003      	add	sp, #12
 800c340:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      LWIP_ASSERT("tcp_receive: valid queue length",
 800c344:	4b0d      	ldr	r3, [pc, #52]	; (800c37c <tcp_free_acked_segments.constprop.0+0xc8>)
 800c346:	f240 4261 	movw	r2, #1121	; 0x461
 800c34a:	490d      	ldr	r1, [pc, #52]	; (800c380 <tcp_free_acked_segments.constprop.0+0xcc>)
 800c34c:	480d      	ldr	r0, [pc, #52]	; (800c384 <tcp_free_acked_segments.constprop.0+0xd0>)
 800c34e:	f005 f95d 	bl	801160c <iprintf>
 800c352:	4628      	mov	r0, r5
}
 800c354:	b003      	add	sp, #12
 800c356:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800c35a:	465b      	mov	r3, fp
 800c35c:	f240 4257 	movw	r2, #1111	; 0x457
 800c360:	4651      	mov	r1, sl
 800c362:	4648      	mov	r0, r9
 800c364:	f005 f952 	bl	801160c <iprintf>
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800c368:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800c36c:	e7d1      	b.n	800c312 <tcp_free_acked_segments.constprop.0+0x5e>
 800c36e:	4620      	mov	r0, r4
}
 800c370:	b003      	add	sp, #12
 800c372:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c376:	bf00      	nop
 800c378:	240105ac 	.word	0x240105ac
 800c37c:	08014150 	.word	0x08014150
 800c380:	080141fc 	.word	0x080141fc
 800c384:	080128dc 	.word	0x080128dc
 800c388:	24010594 	.word	0x24010594
 800c38c:	080141d4 	.word	0x080141d4

0800c390 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800c390:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800c394:	4604      	mov	r4, r0
 800c396:	2800      	cmp	r0, #0
 800c398:	f000 81e2 	beq.w	800c760 <tcp_receive+0x3d0>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800c39c:	7d23      	ldrb	r3, [r4, #20]
 800c39e:	2b03      	cmp	r3, #3
 800c3a0:	f240 80f5 	bls.w	800c58e <tcp_receive+0x1fe>

  if (flags & TCP_ACK) {
 800c3a4:	4baf      	ldr	r3, [pc, #700]	; (800c664 <tcp_receive+0x2d4>)
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800c3a6:	4eb0      	ldr	r6, [pc, #704]	; (800c668 <tcp_receive+0x2d8>)
  if (flags & TCP_ACK) {
 800c3a8:	781b      	ldrb	r3, [r3, #0]
 800c3aa:	06d8      	lsls	r0, r3, #27
 800c3ac:	d470      	bmi.n	800c490 <tcp_receive+0x100>
 800c3ae:	4faf      	ldr	r7, [pc, #700]	; (800c66c <tcp_receive+0x2dc>)

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800c3b0:	883b      	ldrh	r3, [r7, #0]
 800c3b2:	b113      	cbz	r3, 800c3ba <tcp_receive+0x2a>
 800c3b4:	7d22      	ldrb	r2, [r4, #20]
 800c3b6:	2a06      	cmp	r2, #6
 800c3b8:	d911      	bls.n	800c3de <tcp_receive+0x4e>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800c3ba:	6832      	ldr	r2, [r6, #0]
      tcp_send_empty_ack(pcb);
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800c3bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c3be:	1ad1      	subs	r1, r2, r3
 800c3c0:	2900      	cmp	r1, #0
 800c3c2:	db06      	blt.n	800c3d2 <tcp_receive+0x42>
 800c3c4:	f1c3 0301 	rsb	r3, r3, #1
 800c3c8:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 800c3ca:	1a5b      	subs	r3, r3, r1
 800c3cc:	4413      	add	r3, r2
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	dd03      	ble.n	800c3da <tcp_receive+0x4a>
      tcp_ack_now(pcb);
 800c3d2:	8b63      	ldrh	r3, [r4, #26]
 800c3d4:	f043 0302 	orr.w	r3, r3, #2
 800c3d8:	8363      	strh	r3, [r4, #26]
    }
  }
}
 800c3da:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800c3de:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800c3e0:	6832      	ldr	r2, [r6, #0]
 800c3e2:	eba1 0802 	sub.w	r8, r1, r2
 800c3e6:	f1b8 0f01 	cmp.w	r8, #1
 800c3ea:	d406      	bmi.n	800c3fa <tcp_receive+0x6a>
 800c3ec:	f1c2 0001 	rsb	r0, r2, #1
 800c3f0:	1ac3      	subs	r3, r0, r3
 800c3f2:	440b      	add	r3, r1
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	f340 81c2 	ble.w	800c77e <tcp_receive+0x3ee>
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800c3fa:	1a53      	subs	r3, r2, r1
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	f2c0 81b9 	blt.w	800c774 <tcp_receive+0x3e4>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800c402:	f102 0c01 	add.w	ip, r2, #1
 800c406:	8d20      	ldrh	r0, [r4, #40]	; 0x28
 800c408:	ebac 0301 	sub.w	r3, ip, r1
 800c40c:	1a1b      	subs	r3, r3, r0
 800c40e:	2b00      	cmp	r3, #0
 800c410:	dc39      	bgt.n	800c486 <tcp_receive+0xf6>
      if (pcb->rcv_nxt == seqno) {
 800c412:	4291      	cmp	r1, r2
 800c414:	f000 8452 	beq.w	800ccbc <tcp_receive+0x92c>
        if (pcb->ooseq == NULL) {
 800c418:	6f65      	ldr	r5, [r4, #116]	; 0x74
 800c41a:	2d00      	cmp	r5, #0
 800c41c:	f000 835d 	beq.w	800cada <tcp_receive+0x74a>
            if (seqno == next->tcphdr->seqno) {
 800c420:	68e8      	ldr	r0, [r5, #12]
          struct tcp_seg *next, *prev = NULL;
 800c422:	f04f 0800 	mov.w	r8, #0
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800c426:	f102 3eff 	add.w	lr, r2, #4294967295
            if (seqno == next->tcphdr->seqno) {
 800c42a:	6843      	ldr	r3, [r0, #4]
 800c42c:	429a      	cmp	r2, r3
 800c42e:	d019      	beq.n	800c464 <tcp_receive+0xd4>
              if (prev == NULL) {
 800c430:	f1b8 0f00 	cmp.w	r8, #0
 800c434:	f000 812c 	beq.w	800c690 <tcp_receive+0x300>
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800c438:	f8d8 100c 	ldr.w	r1, [r8, #12]
 800c43c:	6849      	ldr	r1, [r1, #4]
 800c43e:	ebae 0101 	sub.w	r1, lr, r1
 800c442:	2900      	cmp	r1, #0
 800c444:	db04      	blt.n	800c450 <tcp_receive+0xc0>
 800c446:	ebac 0103 	sub.w	r1, ip, r3
 800c44a:	2900      	cmp	r1, #0
 800c44c:	f340 834e 	ble.w	800caec <tcp_receive+0x75c>
              if (next->next == NULL &&
 800c450:	6829      	ldr	r1, [r5, #0]
 800c452:	46a8      	mov	r8, r5
 800c454:	2900      	cmp	r1, #0
 800c456:	f000 812a 	beq.w	800c6ae <tcp_receive+0x31e>
 800c45a:	460d      	mov	r5, r1
            if (seqno == next->tcphdr->seqno) {
 800c45c:	68e8      	ldr	r0, [r5, #12]
 800c45e:	6843      	ldr	r3, [r0, #4]
 800c460:	429a      	cmp	r2, r3
 800c462:	d1e5      	bne.n	800c430 <tcp_receive+0xa0>
              if (inseg.len > next->len) {
 800c464:	4882      	ldr	r0, [pc, #520]	; (800c670 <tcp_receive+0x2e0>)
 800c466:	892b      	ldrh	r3, [r5, #8]
 800c468:	8902      	ldrh	r2, [r0, #8]
 800c46a:	429a      	cmp	r2, r3
 800c46c:	d90b      	bls.n	800c486 <tcp_receive+0xf6>
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800c46e:	f7fe fe5d 	bl	800b12c <tcp_seg_copy>
                if (cseg != NULL) {
 800c472:	b140      	cbz	r0, 800c486 <tcp_receive+0xf6>
                  if (prev != NULL) {
 800c474:	f1b8 0f00 	cmp.w	r8, #0
 800c478:	f000 83f7 	beq.w	800cc6a <tcp_receive+0x8da>
                    prev->next = cseg;
 800c47c:	f8c8 0000 	str.w	r0, [r8]
                  tcp_oos_insert_segment(cseg, next);
 800c480:	4629      	mov	r1, r5
 800c482:	f7ff fe93 	bl	800c1ac <tcp_oos_insert_segment>
        tcp_send_empty_ack(pcb);
 800c486:	4620      	mov	r0, r4
}
 800c488:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        tcp_send_empty_ack(pcb);
 800c48c:	f002 b9fc 	b.w	800e888 <tcp_send_empty_ack>
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800c490:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800c492:	6832      	ldr	r2, [r6, #0]
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800c494:	f8b4 e060 	ldrh.w	lr, [r4, #96]	; 0x60
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800c498:	1a99      	subs	r1, r3, r2
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800c49a:	f8d4 c058 	ldr.w	ip, [r4, #88]	; 0x58
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800c49e:	2900      	cmp	r1, #0
 800c4a0:	db7d      	blt.n	800c59e <tcp_receive+0x20e>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800c4a2:	4d74      	ldr	r5, [pc, #464]	; (800c674 <tcp_receive+0x2e4>)
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800c4a4:	4293      	cmp	r3, r2
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800c4a6:	682b      	ldr	r3, [r5, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800c4a8:	f000 80cb 	beq.w	800c642 <tcp_receive+0x2b2>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800c4ac:	459c      	cmp	ip, r3
 800c4ae:	f000 80d1 	beq.w	800c654 <tcp_receive+0x2c4>
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800c4b2:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800c4b4:	1a19      	subs	r1, r3, r0
 800c4b6:	2900      	cmp	r1, #0
 800c4b8:	f340 8085 	ble.w	800c5c6 <tcp_receive+0x236>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800c4bc:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800c4be:	1a9a      	subs	r2, r3, r2
 800c4c0:	2a00      	cmp	r2, #0
 800c4c2:	f300 808f 	bgt.w	800c5e4 <tcp_receive+0x254>
      if (pcb->flags & TF_INFR) {
 800c4c6:	8b62      	ldrh	r2, [r4, #26]
 800c4c8:	0750      	lsls	r0, r2, #29
 800c4ca:	d509      	bpl.n	800c4e0 <tcp_receive+0x150>
        tcp_clear_flags(pcb, TF_INFR);
 800c4cc:	f022 0204 	bic.w	r2, r2, #4
 800c4d0:	8362      	strh	r2, [r4, #26]
        pcb->cwnd = pcb->ssthresh;
 800c4d2:	f8b4 204a 	ldrh.w	r2, [r4, #74]	; 0x4a
 800c4d6:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
        pcb->bytes_acked = 0;
 800c4da:	2200      	movs	r2, #0
 800c4dc:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800c4e0:	f9b4 003c 	ldrsh.w	r0, [r4, #60]	; 0x3c
      pcb->lastack = ackno;
 800c4e4:	6463      	str	r3, [r4, #68]	; 0x44
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800c4e6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      if (pcb->state >= ESTABLISHED) {
 800c4e8:	7d22      	ldrb	r2, [r4, #20]
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800c4ea:	eb03 03e0 	add.w	r3, r3, r0, asr #3
      if (pcb->state >= ESTABLISHED) {
 800c4ee:	2a03      	cmp	r2, #3
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800c4f0:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
      pcb->nrtx = 0;
 800c4f4:	f04f 0300 	mov.w	r3, #0
 800c4f8:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
      if (pcb->state >= ESTABLISHED) {
 800c4fc:	d913      	bls.n	800c526 <tcp_receive+0x196>
        if (pcb->cwnd < pcb->ssthresh) {
 800c4fe:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800c502:	b289      	uxth	r1, r1
        if (pcb->cwnd < pcb->ssthresh) {
 800c504:	f8b4 204a 	ldrh.w	r2, [r4, #74]	; 0x4a
 800c508:	429a      	cmp	r2, r3
 800c50a:	f200 81d1 	bhi.w	800c8b0 <tcp_receive+0x520>
          TCP_WND_INC(pcb->bytes_acked, acked);
 800c50e:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 800c512:	4411      	add	r1, r2
 800c514:	b289      	uxth	r1, r1
 800c516:	428a      	cmp	r2, r1
 800c518:	f200 82c6 	bhi.w	800caa8 <tcp_receive+0x718>
          if (pcb->bytes_acked >= pcb->cwnd) {
 800c51c:	428b      	cmp	r3, r1
 800c51e:	f240 82c5 	bls.w	800caac <tcp_receive+0x71c>
 800c522:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800c526:	4620      	mov	r0, r4
 800c528:	e9d4 211b 	ldrd	r2, r1, [r4, #108]	; 0x6c
 800c52c:	f7ff fec2 	bl	800c2b4 <tcp_free_acked_segments.constprop.0>
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800c530:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800c532:	4602      	mov	r2, r0
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800c534:	6720      	str	r0, [r4, #112]	; 0x70
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800c536:	4620      	mov	r0, r4
 800c538:	f7ff febc 	bl	800c2b4 <tcp_free_acked_segments.constprop.0>
      if (pcb->unacked == NULL) {
 800c53c:	6f22      	ldr	r2, [r4, #112]	; 0x70
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800c53e:	66e0      	str	r0, [r4, #108]	; 0x6c
      if (pcb->unacked == NULL) {
 800c540:	fab2 f382 	clz	r3, r2
 800c544:	095b      	lsrs	r3, r3, #5
 800c546:	425b      	negs	r3, r3
 800c548:	8623      	strh	r3, [r4, #48]	; 0x30
      pcb->polltmr = 0;
 800c54a:	2300      	movs	r3, #0
 800c54c:	7723      	strb	r3, [r4, #28]
      if (pcb->unsent == NULL) {
 800c54e:	2800      	cmp	r0, #0
 800c550:	f000 81ab 	beq.w	800c8aa <tcp_receive+0x51a>
      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800c554:	4b48      	ldr	r3, [pc, #288]	; (800c678 <tcp_receive+0x2e8>)
 800c556:	8819      	ldrh	r1, [r3, #0]
 800c558:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
 800c55c:	440b      	add	r3, r1
 800c55e:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
      if (pcb->flags & TF_RTO) {
 800c562:	8b63      	ldrh	r3, [r4, #26]
 800c564:	0519      	lsls	r1, r3, #20
 800c566:	f140 8103 	bpl.w	800c770 <tcp_receive+0x3e0>
        if (pcb->unacked == NULL) {
 800c56a:	2a00      	cmp	r2, #0
 800c56c:	f000 81b7 	beq.w	800c8de <tcp_receive+0x54e>
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800c570:	68d3      	ldr	r3, [r2, #12]
 800c572:	6ce7      	ldr	r7, [r4, #76]	; 0x4c
 800c574:	6858      	ldr	r0, [r3, #4]
 800c576:	f7fd f8b7 	bl	80096e8 <lwip_htonl>
 800c57a:	1a38      	subs	r0, r7, r0
 800c57c:	2800      	cmp	r0, #0
 800c57e:	f300 80f7 	bgt.w	800c770 <tcp_receive+0x3e0>
          tcp_clear_flags(pcb, TF_RTO);
 800c582:	8b63      	ldrh	r3, [r4, #26]
 800c584:	4f39      	ldr	r7, [pc, #228]	; (800c66c <tcp_receive+0x2dc>)
 800c586:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c58a:	8363      	strh	r3, [r4, #26]
 800c58c:	e02e      	b.n	800c5ec <tcp_receive+0x25c>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800c58e:	4b3b      	ldr	r3, [pc, #236]	; (800c67c <tcp_receive+0x2ec>)
 800c590:	f240 427c 	movw	r2, #1148	; 0x47c
 800c594:	493a      	ldr	r1, [pc, #232]	; (800c680 <tcp_receive+0x2f0>)
 800c596:	483b      	ldr	r0, [pc, #236]	; (800c684 <tcp_receive+0x2f4>)
 800c598:	f005 f838 	bl	801160c <iprintf>
 800c59c:	e702      	b.n	800c3a4 <tcp_receive+0x14>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800c59e:	4b3a      	ldr	r3, [pc, #232]	; (800c688 <tcp_receive+0x2f8>)
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800c5a0:	4d34      	ldr	r5, [pc, #208]	; (800c674 <tcp_receive+0x2e4>)
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	89d9      	ldrh	r1, [r3, #14]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800c5a6:	682b      	ldr	r3, [r5, #0]
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800c5a8:	f8b4 0062 	ldrh.w	r0, [r4, #98]	; 0x62
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800c5ac:	f8a4 1060 	strh.w	r1, [r4, #96]	; 0x60
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800c5b0:	4288      	cmp	r0, r1
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800c5b2:	6c60      	ldr	r0, [r4, #68]	; 0x44
        pcb->snd_wnd_max = pcb->snd_wnd;
 800c5b4:	bf38      	it	cc
 800c5b6:	f8a4 1062 	strhcc.w	r1, [r4, #98]	; 0x62
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800c5ba:	1a19      	subs	r1, r3, r0
 800c5bc:	2900      	cmp	r1, #0
      pcb->snd_wl2 = ackno;
 800c5be:	e9c4 2315 	strd	r2, r3, [r4, #84]	; 0x54
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800c5c2:	f73f af7b 	bgt.w	800c4bc <tcp_receive+0x12c>
      if (tcplen == 0) {
 800c5c6:	4f29      	ldr	r7, [pc, #164]	; (800c66c <tcp_receive+0x2dc>)
 800c5c8:	8839      	ldrh	r1, [r7, #0]
 800c5ca:	b939      	cbnz	r1, 800c5dc <tcp_receive+0x24c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800c5cc:	44e6      	add	lr, ip
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800c5ce:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800c5d0:	f8b4 c060 	ldrh.w	ip, [r4, #96]	; 0x60
 800c5d4:	4461      	add	r1, ip
 800c5d6:	4571      	cmp	r1, lr
 800c5d8:	f000 8191 	beq.w	800c8fe <tcp_receive+0x56e>
        pcb->dupacks = 0;
 800c5dc:	2300      	movs	r3, #0
 800c5de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c5e2:	e003      	b.n	800c5ec <tcp_receive+0x25c>
      tcp_send_empty_ack(pcb);
 800c5e4:	4620      	mov	r0, r4
 800c5e6:	4f21      	ldr	r7, [pc, #132]	; (800c66c <tcp_receive+0x2dc>)
 800c5e8:	f002 f94e 	bl	800e888 <tcp_send_empty_ack>
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800c5ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c5ee:	2900      	cmp	r1, #0
 800c5f0:	f43f aede 	beq.w	800c3b0 <tcp_receive+0x20>
 800c5f4:	682b      	ldr	r3, [r5, #0]
 800c5f6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800c5f8:	1ad2      	subs	r2, r2, r3
 800c5fa:	2a00      	cmp	r2, #0
 800c5fc:	f6bf aed8 	bge.w	800c3b0 <tcp_receive+0x20>
      m = (s16_t)(m - (pcb->sa >> 3));
 800c600:	f9b4 203c 	ldrsh.w	r2, [r4, #60]	; 0x3c
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800c604:	b289      	uxth	r1, r1
 800c606:	4b21      	ldr	r3, [pc, #132]	; (800c68c <tcp_receive+0x2fc>)
      m = (s16_t)(m - (pcb->sa >> 3));
 800c608:	f3c2 00cf 	ubfx	r0, r2, #3, #16
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800c60c:	881d      	ldrh	r5, [r3, #0]
      m = (s16_t)(m - (pcb->sa >> 3));
 800c60e:	1a2b      	subs	r3, r5, r0
 800c610:	1a5b      	subs	r3, r3, r1
 800c612:	b29b      	uxth	r3, r3
      pcb->sa = (s16_t)(pcb->sa + m);
 800c614:	441a      	add	r2, r3
      if (m < 0) {
 800c616:	f413 4f00 	tst.w	r3, #32768	; 0x8000
      pcb->sa = (s16_t)(pcb->sa + m);
 800c61a:	b212      	sxth	r2, r2
 800c61c:	87a2      	strh	r2, [r4, #60]	; 0x3c
      if (m < 0) {
 800c61e:	d002      	beq.n	800c626 <tcp_receive+0x296>
        m = (s16_t) - m;
 800c620:	1b40      	subs	r0, r0, r5
 800c622:	4401      	add	r1, r0
 800c624:	b28b      	uxth	r3, r1
      m = (s16_t)(m - (pcb->sv >> 2));
 800c626:	f9b4 103e 	ldrsh.w	r1, [r4, #62]	; 0x3e
      pcb->sv = (s16_t)(pcb->sv + m);
 800c62a:	eba1 01a1 	sub.w	r1, r1, r1, asr #2
 800c62e:	440b      	add	r3, r1
 800c630:	b29b      	uxth	r3, r3
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800c632:	eb03 02e2 	add.w	r2, r3, r2, asr #3
      pcb->sv = (s16_t)(pcb->sv + m);
 800c636:	87e3      	strh	r3, [r4, #62]	; 0x3e
      pcb->rttest = 0;
 800c638:	2300      	movs	r3, #0
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800c63a:	f8a4 2040 	strh.w	r2, [r4, #64]	; 0x40
      pcb->rttest = 0;
 800c63e:	6363      	str	r3, [r4, #52]	; 0x34
 800c640:	e6b6      	b.n	800c3b0 <tcp_receive+0x20>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800c642:	ebac 0103 	sub.w	r1, ip, r3
 800c646:	2900      	cmp	r1, #0
 800c648:	f6bf af30 	bge.w	800c4ac <tcp_receive+0x11c>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800c64c:	490e      	ldr	r1, [pc, #56]	; (800c688 <tcp_receive+0x2f8>)
 800c64e:	6809      	ldr	r1, [r1, #0]
 800c650:	89c9      	ldrh	r1, [r1, #14]
 800c652:	e7a9      	b.n	800c5a8 <tcp_receive+0x218>
 800c654:	490c      	ldr	r1, [pc, #48]	; (800c688 <tcp_receive+0x2f8>)
 800c656:	6809      	ldr	r1, [r1, #0]
 800c658:	89c9      	ldrh	r1, [r1, #14]
 800c65a:	458e      	cmp	lr, r1
 800c65c:	f4bf af29 	bcs.w	800c4b2 <tcp_receive+0x122>
 800c660:	e7a2      	b.n	800c5a8 <tcp_receive+0x218>
 800c662:	bf00      	nop
 800c664:	24010598 	.word	0x24010598
 800c668:	240105b8 	.word	0x240105b8
 800c66c:	240105d2 	.word	0x240105d2
 800c670:	2401059c 	.word	0x2401059c
 800c674:	24010594 	.word	0x24010594
 800c678:	240105ac 	.word	0x240105ac
 800c67c:	08014150 	.word	0x08014150
 800c680:	08014238 	.word	0x08014238
 800c684:	080128dc 	.word	0x080128dc
 800c688:	240105c4 	.word	0x240105c4
 800c68c:	24010588 	.word	0x24010588
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800c690:	1ad1      	subs	r1, r2, r3
 800c692:	2900      	cmp	r1, #0
 800c694:	f6bf aedc 	bge.w	800c450 <tcp_receive+0xc0>
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800c698:	48af      	ldr	r0, [pc, #700]	; (800c958 <tcp_receive+0x5c8>)
 800c69a:	f7fe fd47 	bl	800b12c <tcp_seg_copy>
                  if (cseg != NULL) {
 800c69e:	2800      	cmp	r0, #0
 800c6a0:	f43f aef1 	beq.w	800c486 <tcp_receive+0xf6>
                    tcp_oos_insert_segment(cseg, next);
 800c6a4:	4629      	mov	r1, r5
                    pcb->ooseq = cseg;
 800c6a6:	6760      	str	r0, [r4, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800c6a8:	f7ff fd80 	bl	800c1ac <tcp_oos_insert_segment>
 800c6ac:	e6eb      	b.n	800c486 <tcp_receive+0xf6>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800c6ae:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	f77f aee8 	ble.w	800c486 <tcp_receive+0xf6>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800c6b6:	8980      	ldrh	r0, [r0, #12]
 800c6b8:	f7fd f812 	bl	80096e0 <lwip_htons>
 800c6bc:	07c1      	lsls	r1, r0, #31
 800c6be:	f53f aee2 	bmi.w	800c486 <tcp_receive+0xf6>
                next->next = tcp_seg_copy(&inseg);
 800c6c2:	48a5      	ldr	r0, [pc, #660]	; (800c958 <tcp_receive+0x5c8>)
 800c6c4:	f7fe fd32 	bl	800b12c <tcp_seg_copy>
 800c6c8:	6028      	str	r0, [r5, #0]
                if (next->next != NULL) {
 800c6ca:	2800      	cmp	r0, #0
 800c6cc:	f43f aedb 	beq.w	800c486 <tcp_receive+0xf6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800c6d0:	68eb      	ldr	r3, [r5, #12]
 800c6d2:	892a      	ldrh	r2, [r5, #8]
 800c6d4:	6859      	ldr	r1, [r3, #4]
 800c6d6:	6833      	ldr	r3, [r6, #0]
 800c6d8:	440a      	add	r2, r1
 800c6da:	1ad2      	subs	r2, r2, r3
 800c6dc:	2a00      	cmp	r2, #0
 800c6de:	dd05      	ble.n	800c6ec <tcp_receive+0x35c>
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800c6e0:	1a5b      	subs	r3, r3, r1
                    pbuf_realloc(next->p, next->len);
 800c6e2:	6868      	ldr	r0, [r5, #4]
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800c6e4:	b299      	uxth	r1, r3
 800c6e6:	8129      	strh	r1, [r5, #8]
                    pbuf_realloc(next->p, next->len);
 800c6e8:	f7fe f8ba 	bl	800a860 <pbuf_realloc>
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800c6ec:	6832      	ldr	r2, [r6, #0]
 800c6ee:	883b      	ldrh	r3, [r7, #0]
 800c6f0:	4413      	add	r3, r2
 800c6f2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800c6f4:	1a9b      	subs	r3, r3, r2
 800c6f6:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800c6f8:	1a9b      	subs	r3, r3, r2
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	f77f aec3 	ble.w	800c486 <tcp_receive+0xf6>
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800c700:	682b      	ldr	r3, [r5, #0]
 800c702:	68db      	ldr	r3, [r3, #12]
 800c704:	8998      	ldrh	r0, [r3, #12]
 800c706:	f7fc ffeb 	bl	80096e0 <lwip_htons>
 800c70a:	07c2      	lsls	r2, r0, #31
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800c70c:	682b      	ldr	r3, [r5, #0]
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800c70e:	f100 82c3 	bmi.w	800cc98 <tcp_receive+0x908>
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800c712:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 800c714:	6832      	ldr	r2, [r6, #0]
                    pbuf_realloc(next->next->p, next->next->len);
 800c716:	6858      	ldr	r0, [r3, #4]
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800c718:	1a89      	subs	r1, r1, r2
 800c71a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800c71c:	4411      	add	r1, r2
 800c71e:	b289      	uxth	r1, r1
 800c720:	8119      	strh	r1, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800c722:	f7fe f89d 	bl	800a860 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800c726:	682b      	ldr	r3, [r5, #0]
 800c728:	891d      	ldrh	r5, [r3, #8]
 800c72a:	68db      	ldr	r3, [r3, #12]
 800c72c:	8998      	ldrh	r0, [r3, #12]
 800c72e:	f7fc ffd7 	bl	80096e0 <lwip_htons>
 800c732:	f010 0003 	ands.w	r0, r0, #3
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800c736:	6831      	ldr	r1, [r6, #0]
                    tcplen = TCP_TCPLEN(next->next);
 800c738:	bf18      	it	ne
 800c73a:	2001      	movne	r0, #1
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800c73c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
                    tcplen = TCP_TCPLEN(next->next);
 800c73e:	182b      	adds	r3, r5, r0
 800c740:	b29b      	uxth	r3, r3
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800c742:	4419      	add	r1, r3
                    tcplen = TCP_TCPLEN(next->next);
 800c744:	803b      	strh	r3, [r7, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800c746:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c748:	4413      	add	r3, r2
 800c74a:	4299      	cmp	r1, r3
 800c74c:	f43f ae9b 	beq.w	800c486 <tcp_receive+0xf6>
 800c750:	4b82      	ldr	r3, [pc, #520]	; (800c95c <tcp_receive+0x5cc>)
 800c752:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800c756:	4982      	ldr	r1, [pc, #520]	; (800c960 <tcp_receive+0x5d0>)
 800c758:	4882      	ldr	r0, [pc, #520]	; (800c964 <tcp_receive+0x5d4>)
 800c75a:	f004 ff57 	bl	801160c <iprintf>
 800c75e:	e692      	b.n	800c486 <tcp_receive+0xf6>
  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800c760:	4b7e      	ldr	r3, [pc, #504]	; (800c95c <tcp_receive+0x5cc>)
 800c762:	f240 427b 	movw	r2, #1147	; 0x47b
 800c766:	4980      	ldr	r1, [pc, #512]	; (800c968 <tcp_receive+0x5d8>)
 800c768:	487e      	ldr	r0, [pc, #504]	; (800c964 <tcp_receive+0x5d4>)
 800c76a:	f004 ff4f 	bl	801160c <iprintf>
 800c76e:	e615      	b.n	800c39c <tcp_receive+0xc>
 800c770:	4f7e      	ldr	r7, [pc, #504]	; (800c96c <tcp_receive+0x5dc>)
 800c772:	e73b      	b.n	800c5ec <tcp_receive+0x25c>
        tcp_ack_now(pcb);
 800c774:	8b63      	ldrh	r3, [r4, #26]
 800c776:	f043 0302 	orr.w	r3, r3, #2
 800c77a:	8363      	strh	r3, [r4, #26]
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800c77c:	e683      	b.n	800c486 <tcp_receive+0xf6>
      struct pbuf *p = inseg.p;
 800c77e:	f8df 91d8 	ldr.w	r9, [pc, #472]	; 800c958 <tcp_receive+0x5c8>
 800c782:	f8d9 5004 	ldr.w	r5, [r9, #4]
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800c786:	2d00      	cmp	r5, #0
 800c788:	f000 8186 	beq.w	800ca98 <tcp_receive+0x708>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800c78c:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800c790:	4598      	cmp	r8, r3
 800c792:	f200 80d9 	bhi.w	800c948 <tcp_receive+0x5b8>
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800c796:	f8d9 3004 	ldr.w	r3, [r9, #4]
      off = (u16_t)off32;
 800c79a:	fa1f f888 	uxth.w	r8, r8
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800c79e:	891a      	ldrh	r2, [r3, #8]
 800c7a0:	4542      	cmp	r2, r8
 800c7a2:	f0c0 80c6 	bcc.w	800c932 <tcp_receive+0x5a2>
      inseg.len -= off;
 800c7a6:	f8b9 3008 	ldrh.w	r3, [r9, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800c7aa:	eba2 0208 	sub.w	r2, r2, r8
      inseg.len -= off;
 800c7ae:	eba3 0308 	sub.w	r3, r3, r8
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800c7b2:	b292      	uxth	r2, r2
      inseg.len -= off;
 800c7b4:	f8a9 3008 	strh.w	r3, [r9, #8]
      while (p->len < off) {
 800c7b8:	896b      	ldrh	r3, [r5, #10]
 800c7ba:	4543      	cmp	r3, r8
 800c7bc:	d20a      	bcs.n	800c7d4 <tcp_receive+0x444>
        p->len = 0;
 800c7be:	2100      	movs	r1, #0
        off -= p->len;
 800c7c0:	eba8 0303 	sub.w	r3, r8, r3
        p->len = 0;
 800c7c4:	8169      	strh	r1, [r5, #10]
        p->tot_len = new_tot_len;
 800c7c6:	812a      	strh	r2, [r5, #8]
        p = p->next;
 800c7c8:	682d      	ldr	r5, [r5, #0]
        off -= p->len;
 800c7ca:	fa1f f883 	uxth.w	r8, r3
      while (p->len < off) {
 800c7ce:	896b      	ldrh	r3, [r5, #10]
 800c7d0:	4543      	cmp	r3, r8
 800c7d2:	d3f5      	bcc.n	800c7c0 <tcp_receive+0x430>
      pbuf_remove_header(p, off);
 800c7d4:	4641      	mov	r1, r8
 800c7d6:	4628      	mov	r0, r5
 800c7d8:	f7fd feb8 	bl	800a54c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800c7dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c7de:	f8d9 200c 	ldr.w	r2, [r9, #12]
 800c7e2:	6033      	str	r3, [r6, #0]
 800c7e4:	6053      	str	r3, [r2, #4]
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800c7e6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	f43f ae4c 	beq.w	800c486 <tcp_receive+0xf6>
        tcplen = TCP_TCPLEN(&inseg);
 800c7ee:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800c7f2:	f8b9 5008 	ldrh.w	r5, [r9, #8]
 800c7f6:	8998      	ldrh	r0, [r3, #12]
 800c7f8:	f7fc ff72 	bl	80096e0 <lwip_htons>
 800c7fc:	f010 0003 	ands.w	r0, r0, #3
        if (tcplen > pcb->rcv_wnd) {
 800c800:	8d22      	ldrh	r2, [r4, #40]	; 0x28
        tcplen = TCP_TCPLEN(&inseg);
 800c802:	bf18      	it	ne
 800c804:	2001      	movne	r0, #1
 800c806:	182b      	adds	r3, r5, r0
 800c808:	b29b      	uxth	r3, r3
        if (tcplen > pcb->rcv_wnd) {
 800c80a:	429a      	cmp	r2, r3
        tcplen = TCP_TCPLEN(&inseg);
 800c80c:	803b      	strh	r3, [r7, #0]
        if (tcplen > pcb->rcv_wnd) {
 800c80e:	f0c0 8197 	bcc.w	800cb40 <tcp_receive+0x7b0>
        if (pcb->ooseq != NULL) {
 800c812:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800c814:	2b00      	cmp	r3, #0
 800c816:	f000 80b6 	beq.w	800c986 <tcp_receive+0x5f6>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800c81a:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800c81e:	8998      	ldrh	r0, [r3, #12]
 800c820:	f7fc ff5e 	bl	80096e0 <lwip_htons>
 800c824:	07c2      	lsls	r2, r0, #31
 800c826:	f100 80ab 	bmi.w	800c980 <tcp_receive+0x5f0>
            struct tcp_seg *next = pcb->ooseq;
 800c82a:	6f65      	ldr	r5, [r4, #116]	; 0x74
            while (next &&
 800c82c:	b955      	cbnz	r5, 800c844 <tcp_receive+0x4b4>
 800c82e:	e208      	b.n	800cc42 <tcp_receive+0x8b2>
              next = next->next;
 800c830:	f8d5 8000 	ldr.w	r8, [r5]
              tcp_seg_free(tmp);
 800c834:	4628      	mov	r0, r5
 800c836:	f7fe fc6b 	bl	800b110 <tcp_seg_free>
            while (next &&
 800c83a:	4645      	mov	r5, r8
 800c83c:	f1b8 0f00 	cmp.w	r8, #0
 800c840:	f000 81ff 	beq.w	800cc42 <tcp_receive+0x8b2>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800c844:	68e8      	ldr	r0, [r5, #12]
 800c846:	883a      	ldrh	r2, [r7, #0]
 800c848:	f8d6 e000 	ldr.w	lr, [r6]
 800c84c:	892b      	ldrh	r3, [r5, #8]
 800c84e:	f8d0 c004 	ldr.w	ip, [r0, #4]
 800c852:	eb02 010e 	add.w	r1, r2, lr
 800c856:	4463      	add	r3, ip
 800c858:	1acb      	subs	r3, r1, r3
            while (next &&
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	f2c0 81b9 	blt.w	800cbd2 <tcp_receive+0x842>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800c860:	8980      	ldrh	r0, [r0, #12]
 800c862:	f7fc ff3d 	bl	80096e0 <lwip_htons>
 800c866:	07c3      	lsls	r3, r0, #31
 800c868:	d5e2      	bpl.n	800c830 <tcp_receive+0x4a0>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800c86a:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800c86e:	8998      	ldrh	r0, [r3, #12]
 800c870:	f7fc ff36 	bl	80096e0 <lwip_htons>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800c874:	0780      	lsls	r0, r0, #30
 800c876:	d4db      	bmi.n	800c830 <tcp_receive+0x4a0>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800c878:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800c87c:	2001      	movs	r0, #1
 800c87e:	f8b3 800c 	ldrh.w	r8, [r3, #12]
 800c882:	f7fc ff2d 	bl	80096e0 <lwip_htons>
 800c886:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800c88a:	ea48 0000 	orr.w	r0, r8, r0
                tcplen = TCP_TCPLEN(&inseg);
 800c88e:	f8b9 8008 	ldrh.w	r8, [r9, #8]
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800c892:	8198      	strh	r0, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800c894:	b280      	uxth	r0, r0
 800c896:	f7fc ff23 	bl	80096e0 <lwip_htons>
 800c89a:	f010 0003 	ands.w	r0, r0, #3
 800c89e:	bf18      	it	ne
 800c8a0:	2001      	movne	r0, #1
 800c8a2:	4480      	add	r8, r0
 800c8a4:	f8a7 8000 	strh.w	r8, [r7]
 800c8a8:	e7c2      	b.n	800c830 <tcp_receive+0x4a0>
        pcb->unsent_oversize = 0;
 800c8aa:	f8a4 0068 	strh.w	r0, [r4, #104]	; 0x68
 800c8ae:	e651      	b.n	800c554 <tcp_receive+0x1c4>
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800c8b0:	8b62      	ldrh	r2, [r4, #26]
 800c8b2:	f412 6f00 	tst.w	r2, #2048	; 0x800
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800c8b6:	8e62      	ldrh	r2, [r4, #50]	; 0x32
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800c8b8:	bf14      	ite	ne
 800c8ba:	2001      	movne	r0, #1
 800c8bc:	2002      	moveq	r0, #2
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800c8be:	fb12 f200 	smulbb	r2, r2, r0
 800c8c2:	b292      	uxth	r2, r2
          TCP_WND_INC(pcb->cwnd, increase);
 800c8c4:	428a      	cmp	r2, r1
 800c8c6:	bf94      	ite	ls
 800c8c8:	1898      	addls	r0, r3, r2
 800c8ca:	1858      	addhi	r0, r3, r1
 800c8cc:	b282      	uxth	r2, r0
 800c8ce:	4293      	cmp	r3, r2
 800c8d0:	f240 80f5 	bls.w	800cabe <tcp_receive+0x72e>
 800c8d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c8d8:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
 800c8dc:	e623      	b.n	800c526 <tcp_receive+0x196>
          if ((pcb->unsent == NULL) ||
 800c8de:	b148      	cbz	r0, 800c8f4 <tcp_receive+0x564>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800c8e0:	68c3      	ldr	r3, [r0, #12]
 800c8e2:	6ce7      	ldr	r7, [r4, #76]	; 0x4c
 800c8e4:	6858      	ldr	r0, [r3, #4]
 800c8e6:	f7fc feff 	bl	80096e8 <lwip_htonl>
 800c8ea:	1a38      	subs	r0, r7, r0
          if ((pcb->unsent == NULL) ||
 800c8ec:	2800      	cmp	r0, #0
 800c8ee:	f73f af3f 	bgt.w	800c770 <tcp_receive+0x3e0>
            tcp_clear_flags(pcb, TF_RTO);
 800c8f2:	8b63      	ldrh	r3, [r4, #26]
 800c8f4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c8f8:	4f1c      	ldr	r7, [pc, #112]	; (800c96c <tcp_receive+0x5dc>)
 800c8fa:	8363      	strh	r3, [r4, #26]
 800c8fc:	e676      	b.n	800c5ec <tcp_receive+0x25c>
          if (pcb->rtime >= 0) {
 800c8fe:	8e21      	ldrh	r1, [r4, #48]	; 0x30
            if (pcb->lastack == ackno) {
 800c900:	0409      	lsls	r1, r1, #16
 800c902:	f53f ae6b 	bmi.w	800c5dc <tcp_receive+0x24c>
 800c906:	4298      	cmp	r0, r3
 800c908:	f47f ae68 	bne.w	800c5dc <tcp_receive+0x24c>
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800c90c:	f894 1043 	ldrb.w	r1, [r4, #67]	; 0x43
 800c910:	29ff      	cmp	r1, #255	; 0xff
 800c912:	f000 814e 	beq.w	800cbb2 <tcp_receive+0x822>
                ++pcb->dupacks;
 800c916:	3101      	adds	r1, #1
 800c918:	b2c9      	uxtb	r1, r1
              if (pcb->dupacks > 3) {
 800c91a:	2903      	cmp	r1, #3
                ++pcb->dupacks;
 800c91c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
              if (pcb->dupacks > 3) {
 800c920:	f200 8147 	bhi.w	800cbb2 <tcp_receive+0x822>
              if (pcb->dupacks >= 3) {
 800c924:	f000 8151 	beq.w	800cbca <tcp_receive+0x83a>
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800c928:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c92a:	2900      	cmp	r1, #0
 800c92c:	f47f ae63 	bne.w	800c5f6 <tcp_receive+0x266>
 800c930:	e544      	b.n	800c3bc <tcp_receive+0x2c>
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800c932:	4b0a      	ldr	r3, [pc, #40]	; (800c95c <tcp_receive+0x5cc>)
 800c934:	f240 5297 	movw	r2, #1431	; 0x597
 800c938:	490d      	ldr	r1, [pc, #52]	; (800c970 <tcp_receive+0x5e0>)
 800c93a:	480a      	ldr	r0, [pc, #40]	; (800c964 <tcp_receive+0x5d4>)
 800c93c:	f004 fe66 	bl	801160c <iprintf>
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800c940:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800c944:	891a      	ldrh	r2, [r3, #8]
 800c946:	e72e      	b.n	800c7a6 <tcp_receive+0x416>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800c948:	4b04      	ldr	r3, [pc, #16]	; (800c95c <tcp_receive+0x5cc>)
 800c94a:	f240 5295 	movw	r2, #1429	; 0x595
 800c94e:	4909      	ldr	r1, [pc, #36]	; (800c974 <tcp_receive+0x5e4>)
 800c950:	4804      	ldr	r0, [pc, #16]	; (800c964 <tcp_receive+0x5d4>)
 800c952:	f004 fe5b 	bl	801160c <iprintf>
 800c956:	e71e      	b.n	800c796 <tcp_receive+0x406>
 800c958:	2401059c 	.word	0x2401059c
 800c95c:	08014150 	.word	0x08014150
 800c960:	08014284 	.word	0x08014284
 800c964:	080128dc 	.word	0x080128dc
 800c968:	0801421c 	.word	0x0801421c
 800c96c:	240105d2 	.word	0x240105d2
 800c970:	08014274 	.word	0x08014274
 800c974:	08014264 	.word	0x08014264
              pcb->ooseq = pcb->ooseq->next;
 800c978:	6803      	ldr	r3, [r0, #0]
 800c97a:	6763      	str	r3, [r4, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800c97c:	f7fe fbc8 	bl	800b110 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800c980:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800c982:	2800      	cmp	r0, #0
 800c984:	d1f8      	bne.n	800c978 <tcp_receive+0x5e8>
        pcb->rcv_nxt = seqno + tcplen;
 800c986:	883a      	ldrh	r2, [r7, #0]
 800c988:	6831      	ldr	r1, [r6, #0]
 800c98a:	4411      	add	r1, r2
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800c98c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        pcb->rcv_nxt = seqno + tcplen;
 800c98e:	6261      	str	r1, [r4, #36]	; 0x24
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800c990:	4293      	cmp	r3, r2
 800c992:	f0c0 80cb 	bcc.w	800cb2c <tcp_receive+0x79c>
        pcb->rcv_wnd -= tcplen;
 800c996:	1a9b      	subs	r3, r3, r2
        tcp_update_rcv_ann_wnd(pcb);
 800c998:	4620      	mov	r0, r4
        pcb->rcv_wnd -= tcplen;
 800c99a:	8523      	strh	r3, [r4, #40]	; 0x28
        tcp_update_rcv_ann_wnd(pcb);
 800c99c:	f7fe fa74 	bl	800ae88 <tcp_update_rcv_ann_wnd>
        if (inseg.p->tot_len > 0) {
 800c9a0:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800c9a4:	891a      	ldrh	r2, [r3, #8]
 800c9a6:	b122      	cbz	r2, 800c9b2 <tcp_receive+0x622>
          recv_data = inseg.p;
 800c9a8:	4ab1      	ldr	r2, [pc, #708]	; (800cc70 <tcp_receive+0x8e0>)
 800c9aa:	6013      	str	r3, [r2, #0]
          inseg.p = NULL;
 800c9ac:	2300      	movs	r3, #0
 800c9ae:	f8c9 3004 	str.w	r3, [r9, #4]
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800c9b2:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800c9b6:	8998      	ldrh	r0, [r3, #12]
 800c9b8:	f7fc fe92 	bl	80096e0 <lwip_htons>
 800c9bc:	07c2      	lsls	r2, r0, #31
 800c9be:	d504      	bpl.n	800c9ca <tcp_receive+0x63a>
          recv_flags |= TF_GOT_FIN;
 800c9c0:	4aac      	ldr	r2, [pc, #688]	; (800cc74 <tcp_receive+0x8e4>)
 800c9c2:	7813      	ldrb	r3, [r2, #0]
 800c9c4:	f043 0320 	orr.w	r3, r3, #32
 800c9c8:	7013      	strb	r3, [r2, #0]
        while (pcb->ooseq != NULL &&
 800c9ca:	6f65      	ldr	r5, [r4, #116]	; 0x74
 800c9cc:	2d00      	cmp	r5, #0
 800c9ce:	d07b      	beq.n	800cac8 <tcp_receive+0x738>
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800c9d0:	f8df 92a8 	ldr.w	r9, [pc, #680]	; 800cc7c <tcp_receive+0x8ec>
 800c9d4:	f8df 82bc 	ldr.w	r8, [pc, #700]	; 800cc94 <tcp_receive+0x904>
 800c9d8:	4fa7      	ldr	r7, [pc, #668]	; (800cc78 <tcp_receive+0x8e8>)
 800c9da:	e033      	b.n	800ca44 <tcp_receive+0x6b4>
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800c9dc:	68eb      	ldr	r3, [r5, #12]
 800c9de:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 800c9e2:	8998      	ldrh	r0, [r3, #12]
 800c9e4:	f7fc fe7c 	bl	80096e0 <lwip_htons>
 800c9e8:	f010 0003 	ands.w	r0, r0, #3
 800c9ec:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800c9ee:	bf18      	it	ne
 800c9f0:	2001      	movne	r0, #1
 800c9f2:	4450      	add	r0, sl
 800c9f4:	1a1b      	subs	r3, r3, r0
          tcp_update_rcv_ann_wnd(pcb);
 800c9f6:	4620      	mov	r0, r4
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800c9f8:	8523      	strh	r3, [r4, #40]	; 0x28
          tcp_update_rcv_ann_wnd(pcb);
 800c9fa:	f7fe fa45 	bl	800ae88 <tcp_update_rcv_ann_wnd>
          if (cseg->p->tot_len > 0) {
 800c9fe:	6869      	ldr	r1, [r5, #4]
 800ca00:	890b      	ldrh	r3, [r1, #8]
 800ca02:	b13b      	cbz	r3, 800ca14 <tcp_receive+0x684>
            if (recv_data) {
 800ca04:	4b9a      	ldr	r3, [pc, #616]	; (800cc70 <tcp_receive+0x8e0>)
 800ca06:	6818      	ldr	r0, [r3, #0]
 800ca08:	2800      	cmp	r0, #0
 800ca0a:	d05b      	beq.n	800cac4 <tcp_receive+0x734>
              pbuf_cat(recv_data, cseg->p);
 800ca0c:	f7fd ffaa 	bl	800a964 <pbuf_cat>
            cseg->p = NULL;
 800ca10:	2300      	movs	r3, #0
 800ca12:	606b      	str	r3, [r5, #4]
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800ca14:	68eb      	ldr	r3, [r5, #12]
 800ca16:	8998      	ldrh	r0, [r3, #12]
 800ca18:	f7fc fe62 	bl	80096e0 <lwip_htons>
 800ca1c:	07c3      	lsls	r3, r0, #31
 800ca1e:	d509      	bpl.n	800ca34 <tcp_receive+0x6a4>
            recv_flags |= TF_GOT_FIN;
 800ca20:	4a94      	ldr	r2, [pc, #592]	; (800cc74 <tcp_receive+0x8e4>)
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800ca22:	7d21      	ldrb	r1, [r4, #20]
            recv_flags |= TF_GOT_FIN;
 800ca24:	7813      	ldrb	r3, [r2, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800ca26:	2904      	cmp	r1, #4
            recv_flags |= TF_GOT_FIN;
 800ca28:	f043 0320 	orr.w	r3, r3, #32
 800ca2c:	7013      	strb	r3, [r2, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800ca2e:	d101      	bne.n	800ca34 <tcp_receive+0x6a4>
              pcb->state = CLOSE_WAIT;
 800ca30:	2307      	movs	r3, #7
 800ca32:	7523      	strb	r3, [r4, #20]
          pcb->ooseq = cseg->next;
 800ca34:	682b      	ldr	r3, [r5, #0]
          tcp_seg_free(cseg);
 800ca36:	4628      	mov	r0, r5
          pcb->ooseq = cseg->next;
 800ca38:	6763      	str	r3, [r4, #116]	; 0x74
          tcp_seg_free(cseg);
 800ca3a:	f7fe fb69 	bl	800b110 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800ca3e:	6f65      	ldr	r5, [r4, #116]	; 0x74
 800ca40:	2d00      	cmp	r5, #0
 800ca42:	d041      	beq.n	800cac8 <tcp_receive+0x738>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800ca44:	68ea      	ldr	r2, [r5, #12]
        while (pcb->ooseq != NULL &&
 800ca46:	6a61      	ldr	r1, [r4, #36]	; 0x24
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800ca48:	6853      	ldr	r3, [r2, #4]
        while (pcb->ooseq != NULL &&
 800ca4a:	428b      	cmp	r3, r1
 800ca4c:	d13c      	bne.n	800cac8 <tcp_receive+0x738>
          seqno = pcb->ooseq->tcphdr->seqno;
 800ca4e:	6033      	str	r3, [r6, #0]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800ca50:	8990      	ldrh	r0, [r2, #12]
 800ca52:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 800ca56:	f7fc fe43 	bl	80096e0 <lwip_htons>
 800ca5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ca5c:	f010 0003 	ands.w	r0, r0, #3
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800ca60:	f8b5 b008 	ldrh.w	fp, [r5, #8]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800ca64:	bf18      	it	ne
 800ca66:	2001      	movne	r0, #1
 800ca68:	449a      	add	sl, r3
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800ca6a:	68eb      	ldr	r3, [r5, #12]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800ca6c:	4450      	add	r0, sl
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800ca6e:	f8b4 a028 	ldrh.w	sl, [r4, #40]	; 0x28
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800ca72:	6260      	str	r0, [r4, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800ca74:	8998      	ldrh	r0, [r3, #12]
 800ca76:	f7fc fe33 	bl	80096e0 <lwip_htons>
 800ca7a:	f010 0003 	ands.w	r0, r0, #3
 800ca7e:	bf18      	it	ne
 800ca80:	2001      	movne	r0, #1
 800ca82:	4458      	add	r0, fp
 800ca84:	4582      	cmp	sl, r0
 800ca86:	d2a9      	bcs.n	800c9dc <tcp_receive+0x64c>
 800ca88:	464b      	mov	r3, r9
 800ca8a:	f240 622b 	movw	r2, #1579	; 0x62b
 800ca8e:	4641      	mov	r1, r8
 800ca90:	4638      	mov	r0, r7
 800ca92:	f004 fdbb 	bl	801160c <iprintf>
 800ca96:	e7a1      	b.n	800c9dc <tcp_receive+0x64c>
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800ca98:	4b78      	ldr	r3, [pc, #480]	; (800cc7c <tcp_receive+0x8ec>)
 800ca9a:	f240 5294 	movw	r2, #1428	; 0x594
 800ca9e:	4978      	ldr	r1, [pc, #480]	; (800cc80 <tcp_receive+0x8f0>)
 800caa0:	4875      	ldr	r0, [pc, #468]	; (800cc78 <tcp_receive+0x8e8>)
 800caa2:	f004 fdb3 	bl	801160c <iprintf>
 800caa6:	e671      	b.n	800c78c <tcp_receive+0x3fc>
          TCP_WND_INC(pcb->bytes_acked, acked);
 800caa8:	f64f 71ff 	movw	r1, #65535	; 0xffff
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800caac:	8e62      	ldrh	r2, [r4, #50]	; 0x32
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800caae:	1ac9      	subs	r1, r1, r3
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800cab0:	441a      	add	r2, r3
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800cab2:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800cab6:	b292      	uxth	r2, r2
 800cab8:	4293      	cmp	r3, r2
 800caba:	f63f af0b 	bhi.w	800c8d4 <tcp_receive+0x544>
 800cabe:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
 800cac2:	e530      	b.n	800c526 <tcp_receive+0x196>
              recv_data = cseg->p;
 800cac4:	6019      	str	r1, [r3, #0]
 800cac6:	e7a3      	b.n	800ca10 <tcp_receive+0x680>
        tcp_ack(pcb);
 800cac8:	8b63      	ldrh	r3, [r4, #26]
 800caca:	07d8      	lsls	r0, r3, #31
 800cacc:	d50a      	bpl.n	800cae4 <tcp_receive+0x754>
 800cace:	f023 0301 	bic.w	r3, r3, #1
 800cad2:	f043 0302 	orr.w	r3, r3, #2
 800cad6:	8363      	strh	r3, [r4, #26]
 800cad8:	e47f      	b.n	800c3da <tcp_receive+0x4a>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800cada:	486a      	ldr	r0, [pc, #424]	; (800cc84 <tcp_receive+0x8f4>)
 800cadc:	f7fe fb26 	bl	800b12c <tcp_seg_copy>
 800cae0:	6760      	str	r0, [r4, #116]	; 0x74
 800cae2:	e4d0      	b.n	800c486 <tcp_receive+0xf6>
        tcp_ack(pcb);
 800cae4:	f043 0301 	orr.w	r3, r3, #1
 800cae8:	8363      	strh	r3, [r4, #26]
 800caea:	e476      	b.n	800c3da <tcp_receive+0x4a>
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800caec:	4865      	ldr	r0, [pc, #404]	; (800cc84 <tcp_receive+0x8f4>)
 800caee:	f7fe fb1d 	bl	800b12c <tcp_seg_copy>
                  if (cseg != NULL) {
 800caf2:	4607      	mov	r7, r0
 800caf4:	2800      	cmp	r0, #0
 800caf6:	f43f acc6 	beq.w	800c486 <tcp_receive+0xf6>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800cafa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800cafe:	6832      	ldr	r2, [r6, #0]
 800cb00:	6859      	ldr	r1, [r3, #4]
 800cb02:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 800cb06:	440b      	add	r3, r1
 800cb08:	1a9b      	subs	r3, r3, r2
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	dd07      	ble.n	800cb1e <tcp_receive+0x78e>
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800cb0e:	1a52      	subs	r2, r2, r1
                      pbuf_realloc(prev->p, prev->len);
 800cb10:	f8d8 0004 	ldr.w	r0, [r8, #4]
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800cb14:	b291      	uxth	r1, r2
 800cb16:	f8a8 1008 	strh.w	r1, [r8, #8]
                      pbuf_realloc(prev->p, prev->len);
 800cb1a:	f7fd fea1 	bl	800a860 <pbuf_realloc>
                    tcp_oos_insert_segment(cseg, next);
 800cb1e:	4629      	mov	r1, r5
 800cb20:	4638      	mov	r0, r7
                    prev->next = cseg;
 800cb22:	f8c8 7000 	str.w	r7, [r8]
                    tcp_oos_insert_segment(cseg, next);
 800cb26:	f7ff fb41 	bl	800c1ac <tcp_oos_insert_segment>
 800cb2a:	e4ac      	b.n	800c486 <tcp_receive+0xf6>
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800cb2c:	4b53      	ldr	r3, [pc, #332]	; (800cc7c <tcp_receive+0x8ec>)
 800cb2e:	f240 6207 	movw	r2, #1543	; 0x607
 800cb32:	4955      	ldr	r1, [pc, #340]	; (800cc88 <tcp_receive+0x8f8>)
 800cb34:	4850      	ldr	r0, [pc, #320]	; (800cc78 <tcp_receive+0x8e8>)
 800cb36:	f004 fd69 	bl	801160c <iprintf>
        pcb->rcv_wnd -= tcplen;
 800cb3a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800cb3c:	883a      	ldrh	r2, [r7, #0]
 800cb3e:	e72a      	b.n	800c996 <tcp_receive+0x606>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800cb40:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800cb44:	8998      	ldrh	r0, [r3, #12]
 800cb46:	f7fc fdcb 	bl	80096e0 <lwip_htons>
 800cb4a:	07c5      	lsls	r5, r0, #31
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800cb4c:	f8d9 300c 	ldr.w	r3, [r9, #12]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800cb50:	d47b      	bmi.n	800cc4a <tcp_receive+0x8ba>
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800cb52:	8998      	ldrh	r0, [r3, #12]
          inseg.len = (u16_t)pcb->rcv_wnd;
 800cb54:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800cb56:	f8a9 3008 	strh.w	r3, [r9, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800cb5a:	f7fc fdc1 	bl	80096e0 <lwip_htons>
 800cb5e:	0780      	lsls	r0, r0, #30
            inseg.len -= 1;
 800cb60:	f8b9 1008 	ldrh.w	r1, [r9, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800cb64:	d503      	bpl.n	800cb6e <tcp_receive+0x7de>
            inseg.len -= 1;
 800cb66:	3901      	subs	r1, #1
 800cb68:	b289      	uxth	r1, r1
 800cb6a:	f8a9 1008 	strh.w	r1, [r9, #8]
          pbuf_realloc(inseg.p, inseg.len);
 800cb6e:	f8d9 0004 	ldr.w	r0, [r9, #4]
 800cb72:	f7fd fe75 	bl	800a860 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800cb76:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800cb7a:	f8b9 5008 	ldrh.w	r5, [r9, #8]
 800cb7e:	8998      	ldrh	r0, [r3, #12]
 800cb80:	f7fc fdae 	bl	80096e0 <lwip_htons>
 800cb84:	f010 0003 	ands.w	r0, r0, #3
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800cb88:	6832      	ldr	r2, [r6, #0]
          tcplen = TCP_TCPLEN(&inseg);
 800cb8a:	bf18      	it	ne
 800cb8c:	2001      	movne	r0, #1
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800cb8e:	6a61      	ldr	r1, [r4, #36]	; 0x24
          tcplen = TCP_TCPLEN(&inseg);
 800cb90:	182b      	adds	r3, r5, r0
 800cb92:	b29b      	uxth	r3, r3
 800cb94:	803b      	strh	r3, [r7, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800cb96:	4413      	add	r3, r2
 800cb98:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800cb9a:	440a      	add	r2, r1
 800cb9c:	4293      	cmp	r3, r2
 800cb9e:	f43f ae38 	beq.w	800c812 <tcp_receive+0x482>
 800cba2:	4b36      	ldr	r3, [pc, #216]	; (800cc7c <tcp_receive+0x8ec>)
 800cba4:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800cba8:	4938      	ldr	r1, [pc, #224]	; (800cc8c <tcp_receive+0x8fc>)
 800cbaa:	4833      	ldr	r0, [pc, #204]	; (800cc78 <tcp_receive+0x8e8>)
 800cbac:	f004 fd2e 	bl	801160c <iprintf>
 800cbb0:	e62f      	b.n	800c812 <tcp_receive+0x482>
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800cbb2:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 800cbb6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800cbba:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800cbbc:	4413      	add	r3, r2
 800cbbe:	b29b      	uxth	r3, r3
 800cbc0:	429a      	cmp	r2, r3
 800cbc2:	bf88      	it	hi
 800cbc4:	460b      	movhi	r3, r1
 800cbc6:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
                tcp_rexmit_fast(pcb);
 800cbca:	4620      	mov	r0, r4
 800cbcc:	f001 fdda 	bl	800e784 <tcp_rexmit_fast>
      if (!found_dupack) {
 800cbd0:	e50c      	b.n	800c5ec <tcp_receive+0x25c>
                TCP_SEQ_GT(seqno + tcplen,
 800cbd2:	eba1 030c 	sub.w	r3, r1, ip
            if (next &&
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	dc01      	bgt.n	800cbde <tcp_receive+0x84e>
            pcb->ooseq = next;
 800cbda:	6765      	str	r5, [r4, #116]	; 0x74
 800cbdc:	e6d6      	b.n	800c98c <tcp_receive+0x5fc>
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800cbde:	ebac 0c0e 	sub.w	ip, ip, lr
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800cbe2:	f8d9 300c 	ldr.w	r3, [r9, #12]
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800cbe6:	f8a9 c008 	strh.w	ip, [r9, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800cbea:	8998      	ldrh	r0, [r3, #12]
 800cbec:	f7fc fd78 	bl	80096e0 <lwip_htons>
 800cbf0:	0781      	lsls	r1, r0, #30
 800cbf2:	d504      	bpl.n	800cbfe <tcp_receive+0x86e>
                inseg.len -= 1;
 800cbf4:	f8b9 3008 	ldrh.w	r3, [r9, #8]
 800cbf8:	3b01      	subs	r3, #1
 800cbfa:	f8a9 3008 	strh.w	r3, [r9, #8]
              pbuf_realloc(inseg.p, inseg.len);
 800cbfe:	f8b9 1008 	ldrh.w	r1, [r9, #8]
 800cc02:	f8d9 0004 	ldr.w	r0, [r9, #4]
 800cc06:	f7fd fe2b 	bl	800a860 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800cc0a:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800cc0e:	f8b9 8008 	ldrh.w	r8, [r9, #8]
 800cc12:	8998      	ldrh	r0, [r3, #12]
 800cc14:	f7fc fd64 	bl	80096e0 <lwip_htons>
 800cc18:	f010 0003 	ands.w	r0, r0, #3
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800cc1c:	68eb      	ldr	r3, [r5, #12]
              tcplen = TCP_TCPLEN(&inseg);
 800cc1e:	bf18      	it	ne
 800cc20:	2001      	movne	r0, #1
 800cc22:	eb08 0200 	add.w	r2, r8, r0
 800cc26:	b292      	uxth	r2, r2
 800cc28:	803a      	strh	r2, [r7, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800cc2a:	6859      	ldr	r1, [r3, #4]
 800cc2c:	6833      	ldr	r3, [r6, #0]
 800cc2e:	4413      	add	r3, r2
 800cc30:	428b      	cmp	r3, r1
 800cc32:	d0d2      	beq.n	800cbda <tcp_receive+0x84a>
 800cc34:	4b11      	ldr	r3, [pc, #68]	; (800cc7c <tcp_receive+0x8ec>)
 800cc36:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800cc3a:	4915      	ldr	r1, [pc, #84]	; (800cc90 <tcp_receive+0x900>)
 800cc3c:	480e      	ldr	r0, [pc, #56]	; (800cc78 <tcp_receive+0x8e8>)
 800cc3e:	f004 fce5 	bl	801160c <iprintf>
        pcb->rcv_nxt = seqno + tcplen;
 800cc42:	883a      	ldrh	r2, [r7, #0]
 800cc44:	6831      	ldr	r1, [r6, #0]
 800cc46:	4411      	add	r1, r2
 800cc48:	e7c7      	b.n	800cbda <tcp_receive+0x84a>
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800cc4a:	899d      	ldrh	r5, [r3, #12]
 800cc4c:	4628      	mov	r0, r5
 800cc4e:	f425 557c 	bic.w	r5, r5, #16128	; 0x3f00
 800cc52:	f7fc fd45 	bl	80096e0 <lwip_htons>
 800cc56:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 800cc5a:	f7fc fd41 	bl	80096e0 <lwip_htons>
 800cc5e:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800cc62:	4328      	orrs	r0, r5
 800cc64:	8198      	strh	r0, [r3, #12]
 800cc66:	b280      	uxth	r0, r0
 800cc68:	e774      	b.n	800cb54 <tcp_receive+0x7c4>
                    pcb->ooseq = cseg;
 800cc6a:	6760      	str	r0, [r4, #116]	; 0x74
 800cc6c:	e408      	b.n	800c480 <tcp_receive+0xf0>
 800cc6e:	bf00      	nop
 800cc70:	240105b0 	.word	0x240105b0
 800cc74:	240105b4 	.word	0x240105b4
 800cc78:	080128dc 	.word	0x080128dc
 800cc7c:	08014150 	.word	0x08014150
 800cc80:	08014254 	.word	0x08014254
 800cc84:	2401059c 	.word	0x2401059c
 800cc88:	080142f8 	.word	0x080142f8
 800cc8c:	08014284 	.word	0x08014284
 800cc90:	080142bc 	.word	0x080142bc
 800cc94:	08014318 	.word	0x08014318
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800cc98:	68db      	ldr	r3, [r3, #12]
 800cc9a:	f8b3 800c 	ldrh.w	r8, [r3, #12]
 800cc9e:	4640      	mov	r0, r8
 800cca0:	f428 587c 	bic.w	r8, r8, #16128	; 0x3f00
 800cca4:	f7fc fd1c 	bl	80096e0 <lwip_htons>
 800cca8:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 800ccac:	f7fc fd18 	bl	80096e0 <lwip_htons>
 800ccb0:	682b      	ldr	r3, [r5, #0]
 800ccb2:	ea40 0008 	orr.w	r0, r0, r8
 800ccb6:	68da      	ldr	r2, [r3, #12]
 800ccb8:	8190      	strh	r0, [r2, #12]
 800ccba:	e52a      	b.n	800c712 <tcp_receive+0x382>
 800ccbc:	f8df 9004 	ldr.w	r9, [pc, #4]	; 800ccc4 <tcp_receive+0x934>
 800ccc0:	e595      	b.n	800c7ee <tcp_receive+0x45e>
 800ccc2:	bf00      	nop
 800ccc4:	2401059c 	.word	0x2401059c

0800ccc8 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800ccc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800cccc:	4605      	mov	r5, r0
 800ccce:	2800      	cmp	r0, #0
 800ccd0:	d07b      	beq.n	800cdca <tcp_parseopt+0x102>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800ccd2:	4b4b      	ldr	r3, [pc, #300]	; (800ce00 <tcp_parseopt+0x138>)
 800ccd4:	8818      	ldrh	r0, [r3, #0]
 800ccd6:	2800      	cmp	r0, #0
 800ccd8:	d03c      	beq.n	800cd54 <tcp_parseopt+0x8c>
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800ccda:	4b4a      	ldr	r3, [pc, #296]	; (800ce04 <tcp_parseopt+0x13c>)
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800ccdc:	2200      	movs	r2, #0
 800ccde:	f8df 813c 	ldr.w	r8, [pc, #316]	; 800ce1c <tcp_parseopt+0x154>
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
          mss |= tcp_get_next_optbyte();
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800cce2:	f240 5ab3 	movw	sl, #1459	; 0x5b3
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800cce6:	f8b3 e000 	ldrh.w	lr, [r3]
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800ccea:	4611      	mov	r1, r2
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800ccec:	4b46      	ldr	r3, [pc, #280]	; (800ce08 <tcp_parseopt+0x140>)
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800ccee:	f240 59b4 	movw	r9, #1460	; 0x5b4
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800ccf2:	fa5f f78e 	uxtb.w	r7, lr
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800ccf6:	f8a8 2000 	strh.w	r2, [r8]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800ccfa:	681c      	ldr	r4, [r3, #0]
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800ccfc:	4b43      	ldr	r3, [pc, #268]	; (800ce0c <tcp_parseopt+0x144>)
 800ccfe:	681e      	ldr	r6, [r3, #0]
 800cd00:	f101 0c14 	add.w	ip, r1, #20
 800cd04:	44b4      	add	ip, r6
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800cd06:	4288      	cmp	r0, r1
  u16_t optidx = tcp_optidx++;
 800cd08:	f101 0301 	add.w	r3, r1, #1
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800cd0c:	d96b      	bls.n	800cde6 <tcp_parseopt+0x11e>
  u16_t optidx = tcp_optidx++;
 800cd0e:	b29b      	uxth	r3, r3
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800cd10:	b1b4      	cbz	r4, 800cd40 <tcp_parseopt+0x78>
 800cd12:	458e      	cmp	lr, r1
    return tcphdr_opt2[idx];
 800cd14:	eba3 0207 	sub.w	r2, r3, r7
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800cd18:	d812      	bhi.n	800cd40 <tcp_parseopt+0x78>
    return tcphdr_opt2[idx];
 800cd1a:	3a01      	subs	r2, #1
 800cd1c:	b2d2      	uxtb	r2, r2
 800cd1e:	5ca2      	ldrb	r2, [r4, r2]
      switch (opt) {
 800cd20:	2a01      	cmp	r2, #1
 800cd22:	d011      	beq.n	800cd48 <tcp_parseopt+0x80>
 800cd24:	2a02      	cmp	r2, #2
 800cd26:	d017      	beq.n	800cd58 <tcp_parseopt+0x90>
 800cd28:	b192      	cbz	r2, 800cd50 <tcp_parseopt+0x88>
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800cd2a:	b10c      	cbz	r4, 800cd30 <tcp_parseopt+0x68>
 800cd2c:	4573      	cmp	r3, lr
 800cd2e:	d23d      	bcs.n	800cdac <tcp_parseopt+0xe4>
    return opts[optidx];
 800cd30:	4433      	add	r3, r6
 800cd32:	7d1b      	ldrb	r3, [r3, #20]
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
          if (data < 2) {
 800cd34:	2b01      	cmp	r3, #1
 800cd36:	d95e      	bls.n	800cdf6 <tcp_parseopt+0x12e>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800cd38:	440b      	add	r3, r1
 800cd3a:	b299      	uxth	r1, r3
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800cd3c:	2201      	movs	r2, #1
 800cd3e:	e7df      	b.n	800cd00 <tcp_parseopt+0x38>
    return opts[optidx];
 800cd40:	f89c 2000 	ldrb.w	r2, [ip]
      switch (opt) {
 800cd44:	2a01      	cmp	r2, #1
 800cd46:	d1ed      	bne.n	800cd24 <tcp_parseopt+0x5c>
 800cd48:	f10c 0c01 	add.w	ip, ip, #1
  u16_t optidx = tcp_optidx++;
 800cd4c:	4619      	mov	r1, r3
 800cd4e:	e7da      	b.n	800cd06 <tcp_parseopt+0x3e>
 800cd50:	f8a8 3000 	strh.w	r3, [r8]
      }
    }
  }
}
 800cd54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  u16_t optidx = tcp_optidx++;
 800cd58:	1c8a      	adds	r2, r1, #2
 800cd5a:	b292      	uxth	r2, r2
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800cd5c:	b10c      	cbz	r4, 800cd62 <tcp_parseopt+0x9a>
 800cd5e:	4573      	cmp	r3, lr
 800cd60:	d220      	bcs.n	800cda4 <tcp_parseopt+0xdc>
    return opts[optidx];
 800cd62:	4433      	add	r3, r6
 800cd64:	7d1b      	ldrb	r3, [r3, #20]
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800cd66:	2b04      	cmp	r3, #4
 800cd68:	d142      	bne.n	800cdf0 <tcp_parseopt+0x128>
 800cd6a:	1c53      	adds	r3, r2, #1
 800cd6c:	4283      	cmp	r3, r0
 800cd6e:	da3f      	bge.n	800cdf0 <tcp_parseopt+0x128>
  u16_t optidx = tcp_optidx++;
 800cd70:	1ccb      	adds	r3, r1, #3
 800cd72:	b29b      	uxth	r3, r3
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800cd74:	2c00      	cmp	r4, #0
 800cd76:	d030      	beq.n	800cdda <tcp_parseopt+0x112>
 800cd78:	4596      	cmp	lr, r2
 800cd7a:	d81b      	bhi.n	800cdb4 <tcp_parseopt+0xec>
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800cd7c:	1bd2      	subs	r2, r2, r7
  u16_t optidx = tcp_optidx++;
 800cd7e:	3104      	adds	r1, #4
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800cd80:	459e      	cmp	lr, r3
    return tcphdr_opt2[idx];
 800cd82:	b2d2      	uxtb	r2, r2
  u16_t optidx = tcp_optidx++;
 800cd84:	b289      	uxth	r1, r1
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800cd86:	5ca2      	ldrb	r2, [r4, r2]
 800cd88:	ea4f 2202 	mov.w	r2, r2, lsl #8
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800cd8c:	d81a      	bhi.n	800cdc4 <tcp_parseopt+0xfc>
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800cd8e:	1bdb      	subs	r3, r3, r7
    return tcphdr_opt2[idx];
 800cd90:	b2db      	uxtb	r3, r3
 800cd92:	5ce3      	ldrb	r3, [r4, r3]
          mss |= tcp_get_next_optbyte();
 800cd94:	4313      	orrs	r3, r2
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800cd96:	1e5a      	subs	r2, r3, #1
 800cd98:	b292      	uxth	r2, r2
 800cd9a:	4552      	cmp	r2, sl
 800cd9c:	bf88      	it	hi
 800cd9e:	464b      	movhi	r3, r9
 800cda0:	866b      	strh	r3, [r5, #50]	; 0x32
          break;
 800cda2:	e7cb      	b.n	800cd3c <tcp_parseopt+0x74>
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800cda4:	1bdb      	subs	r3, r3, r7
    return tcphdr_opt2[idx];
 800cda6:	b2db      	uxtb	r3, r3
 800cda8:	5ce3      	ldrb	r3, [r4, r3]
 800cdaa:	e7dc      	b.n	800cd66 <tcp_parseopt+0x9e>
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800cdac:	1bdb      	subs	r3, r3, r7
    return tcphdr_opt2[idx];
 800cdae:	b2db      	uxtb	r3, r3
 800cdb0:	5ce3      	ldrb	r3, [r4, r3]
 800cdb2:	e7bf      	b.n	800cd34 <tcp_parseopt+0x6c>
    return opts[optidx];
 800cdb4:	4432      	add	r2, r6
  u16_t optidx = tcp_optidx++;
 800cdb6:	3104      	adds	r1, #4
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800cdb8:	459e      	cmp	lr, r3
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800cdba:	7d12      	ldrb	r2, [r2, #20]
  u16_t optidx = tcp_optidx++;
 800cdbc:	b289      	uxth	r1, r1
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800cdbe:	ea4f 2202 	mov.w	r2, r2, lsl #8
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800cdc2:	d9e4      	bls.n	800cd8e <tcp_parseopt+0xc6>
    return opts[optidx];
 800cdc4:	4433      	add	r3, r6
 800cdc6:	7d1b      	ldrb	r3, [r3, #20]
 800cdc8:	e7e4      	b.n	800cd94 <tcp_parseopt+0xcc>
  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800cdca:	4b11      	ldr	r3, [pc, #68]	; (800ce10 <tcp_parseopt+0x148>)
 800cdcc:	f240 727d 	movw	r2, #1917	; 0x77d
 800cdd0:	4910      	ldr	r1, [pc, #64]	; (800ce14 <tcp_parseopt+0x14c>)
 800cdd2:	4811      	ldr	r0, [pc, #68]	; (800ce18 <tcp_parseopt+0x150>)
 800cdd4:	f004 fc1a 	bl	801160c <iprintf>
 800cdd8:	e77b      	b.n	800ccd2 <tcp_parseopt+0xa>
    return opts[optidx];
 800cdda:	4432      	add	r2, r6
  u16_t optidx = tcp_optidx++;
 800cddc:	3104      	adds	r1, #4
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800cdde:	7d12      	ldrb	r2, [r2, #20]
  u16_t optidx = tcp_optidx++;
 800cde0:	b289      	uxth	r1, r1
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800cde2:	0212      	lsls	r2, r2, #8
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800cde4:	e7ee      	b.n	800cdc4 <tcp_parseopt+0xfc>
 800cde6:	2a00      	cmp	r2, #0
 800cde8:	d0b4      	beq.n	800cd54 <tcp_parseopt+0x8c>
 800cdea:	f8a8 1000 	strh.w	r1, [r8]
 800cdee:	e7b1      	b.n	800cd54 <tcp_parseopt+0x8c>
 800cdf0:	f8a8 2000 	strh.w	r2, [r8]
 800cdf4:	e7ae      	b.n	800cd54 <tcp_parseopt+0x8c>
  u16_t optidx = tcp_optidx++;
 800cdf6:	3102      	adds	r1, #2
 800cdf8:	f8a8 1000 	strh.w	r1, [r8]
 800cdfc:	e7aa      	b.n	800cd54 <tcp_parseopt+0x8c>
 800cdfe:	bf00      	nop
 800ce00:	240105d0 	.word	0x240105d0
 800ce04:	240105c8 	.word	0x240105c8
 800ce08:	240105cc 	.word	0x240105cc
 800ce0c:	240105c4 	.word	0x240105c4
 800ce10:	08014150 	.word	0x08014150
 800ce14:	08014340 	.word	0x08014340
 800ce18:	080128dc 	.word	0x080128dc
 800ce1c:	240105c0 	.word	0x240105c0

0800ce20 <tcp_input>:
{
 800ce20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce24:	4604      	mov	r4, r0
 800ce26:	b087      	sub	sp, #28
  LWIP_ASSERT_CORE_LOCKED();
 800ce28:	f7f9 ff28 	bl	8006c7c <sys_check_core_locking>
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800ce2c:	2c00      	cmp	r4, #0
 800ce2e:	f000 80d6 	beq.w	800cfde <tcp_input+0x1be>
  if (p->len < TCP_HLEN) {
 800ce32:	8963      	ldrh	r3, [r4, #10]
  tcphdr = (struct tcp_hdr *)p->payload;
 800ce34:	4e6d      	ldr	r6, [pc, #436]	; (800cfec <tcp_input+0x1cc>)
 800ce36:	6862      	ldr	r2, [r4, #4]
  if (p->len < TCP_HLEN) {
 800ce38:	2b13      	cmp	r3, #19
  tcphdr = (struct tcp_hdr *)p->payload;
 800ce3a:	6032      	str	r2, [r6, #0]
  if (p->len < TCP_HLEN) {
 800ce3c:	d805      	bhi.n	800ce4a <tcp_input+0x2a>
  pbuf_free(p);
 800ce3e:	4620      	mov	r0, r4
}
 800ce40:	b007      	add	sp, #28
 800ce42:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 800ce46:	f7fd bbed 	b.w	800a624 <pbuf_free>
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800ce4a:	4f69      	ldr	r7, [pc, #420]	; (800cff0 <tcp_input+0x1d0>)
 800ce4c:	6839      	ldr	r1, [r7, #0]
 800ce4e:	6978      	ldr	r0, [r7, #20]
 800ce50:	f003 f90a 	bl	8010068 <ip4_addr_isbroadcast_u32>
 800ce54:	4605      	mov	r5, r0
 800ce56:	2800      	cmp	r0, #0
 800ce58:	d1f1      	bne.n	800ce3e <tcp_input+0x1e>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800ce5a:	697b      	ldr	r3, [r7, #20]
 800ce5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800ce60:	2be0      	cmp	r3, #224	; 0xe0
 800ce62:	d0ec      	beq.n	800ce3e <tcp_input+0x1e>
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800ce64:	6833      	ldr	r3, [r6, #0]
 800ce66:	8998      	ldrh	r0, [r3, #12]
 800ce68:	f7fc fc3a 	bl	80096e0 <lwip_htons>
 800ce6c:	0a80      	lsrs	r0, r0, #10
 800ce6e:	f000 01fc 	and.w	r1, r0, #252	; 0xfc
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800ce72:	2913      	cmp	r1, #19
 800ce74:	d9e3      	bls.n	800ce3e <tcp_input+0x1e>
 800ce76:	8923      	ldrh	r3, [r4, #8]
 800ce78:	b28a      	uxth	r2, r1
 800ce7a:	428b      	cmp	r3, r1
 800ce7c:	d3df      	bcc.n	800ce3e <tcp_input+0x1e>
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800ce7e:	f1a2 0314 	sub.w	r3, r2, #20
  if (p->len >= hdrlen_bytes) {
 800ce82:	8960      	ldrh	r0, [r4, #10]
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800ce84:	f8df 919c 	ldr.w	r9, [pc, #412]	; 800d024 <tcp_input+0x204>
 800ce88:	b29b      	uxth	r3, r3
  tcphdr_opt2 = NULL;
 800ce8a:	f8df 819c 	ldr.w	r8, [pc, #412]	; 800d028 <tcp_input+0x208>
  if (p->len >= hdrlen_bytes) {
 800ce8e:	4290      	cmp	r0, r2
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800ce90:	f8a9 3000 	strh.w	r3, [r9]
  tcphdr_opt2 = NULL;
 800ce94:	f8c8 5000 	str.w	r5, [r8]
  if (p->len >= hdrlen_bytes) {
 800ce98:	f080 819a 	bcs.w	800d1d0 <tcp_input+0x3b0>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800ce9c:	6823      	ldr	r3, [r4, #0]
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	f000 836e 	beq.w	800d580 <tcp_input+0x760>
    pbuf_remove_header(p, TCP_HLEN);
 800cea4:	2114      	movs	r1, #20
 800cea6:	4620      	mov	r0, r4
 800cea8:	f7fd fb50 	bl	800a54c <pbuf_remove_header>
    tcphdr_opt1len = p->len;
 800ceac:	8965      	ldrh	r5, [r4, #10]
 800ceae:	4b51      	ldr	r3, [pc, #324]	; (800cff4 <tcp_input+0x1d4>)
    pbuf_remove_header(p, tcphdr_opt1len);
 800ceb0:	4620      	mov	r0, r4
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800ceb2:	f8b9 a000 	ldrh.w	sl, [r9]
    pbuf_remove_header(p, tcphdr_opt1len);
 800ceb6:	4629      	mov	r1, r5
    tcphdr_opt1len = p->len;
 800ceb8:	801d      	strh	r5, [r3, #0]
    pbuf_remove_header(p, tcphdr_opt1len);
 800ceba:	f7fd fb47 	bl	800a54c <pbuf_remove_header>
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800cebe:	ebaa 0905 	sub.w	r9, sl, r5
    if (opt2len > p->next->len) {
 800cec2:	6820      	ldr	r0, [r4, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800cec4:	fa1f f989 	uxth.w	r9, r9
    if (opt2len > p->next->len) {
 800cec8:	8943      	ldrh	r3, [r0, #10]
 800ceca:	454b      	cmp	r3, r9
 800cecc:	d3b7      	bcc.n	800ce3e <tcp_input+0x1e>
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800cece:	6843      	ldr	r3, [r0, #4]
    pbuf_remove_header(p->next, opt2len);
 800ced0:	4649      	mov	r1, r9
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800ced2:	f8c8 3000 	str.w	r3, [r8]
    pbuf_remove_header(p->next, opt2len);
 800ced6:	f7fd fb39 	bl	800a54c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800ceda:	8923      	ldrh	r3, [r4, #8]
    LWIP_ASSERT("p->len == 0", p->len == 0);
 800cedc:	8962      	ldrh	r2, [r4, #10]
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800cede:	442b      	add	r3, r5
 800cee0:	eba3 030a 	sub.w	r3, r3, sl
 800cee4:	b29b      	uxth	r3, r3
 800cee6:	8123      	strh	r3, [r4, #8]
    LWIP_ASSERT("p->len == 0", p->len == 0);
 800cee8:	2a00      	cmp	r2, #0
 800ceea:	f040 8350 	bne.w	800d58e <tcp_input+0x76e>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800ceee:	6822      	ldr	r2, [r4, #0]
 800cef0:	8912      	ldrh	r2, [r2, #8]
 800cef2:	429a      	cmp	r2, r3
 800cef4:	d005      	beq.n	800cf02 <tcp_input+0xe2>
 800cef6:	4b40      	ldr	r3, [pc, #256]	; (800cff8 <tcp_input+0x1d8>)
 800cef8:	22e0      	movs	r2, #224	; 0xe0
 800cefa:	4940      	ldr	r1, [pc, #256]	; (800cffc <tcp_input+0x1dc>)
 800cefc:	4840      	ldr	r0, [pc, #256]	; (800d000 <tcp_input+0x1e0>)
 800cefe:	f004 fb85 	bl	801160c <iprintf>
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800cf02:	6835      	ldr	r5, [r6, #0]
 800cf04:	8828      	ldrh	r0, [r5, #0]
 800cf06:	f7fc fbeb 	bl	80096e0 <lwip_htons>
 800cf0a:	8028      	strh	r0, [r5, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800cf0c:	6835      	ldr	r5, [r6, #0]
 800cf0e:	8868      	ldrh	r0, [r5, #2]
 800cf10:	f7fc fbe6 	bl	80096e0 <lwip_htons>
 800cf14:	8068      	strh	r0, [r5, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800cf16:	6835      	ldr	r5, [r6, #0]
 800cf18:	6868      	ldr	r0, [r5, #4]
 800cf1a:	f7fc fbe5 	bl	80096e8 <lwip_htonl>
 800cf1e:	4b39      	ldr	r3, [pc, #228]	; (800d004 <tcp_input+0x1e4>)
 800cf20:	6068      	str	r0, [r5, #4]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800cf22:	6835      	ldr	r5, [r6, #0]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800cf24:	6018      	str	r0, [r3, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800cf26:	68a8      	ldr	r0, [r5, #8]
 800cf28:	f7fc fbde 	bl	80096e8 <lwip_htonl>
 800cf2c:	4b36      	ldr	r3, [pc, #216]	; (800d008 <tcp_input+0x1e8>)
 800cf2e:	60a8      	str	r0, [r5, #8]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800cf30:	6835      	ldr	r5, [r6, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800cf32:	6018      	str	r0, [r3, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800cf34:	89e8      	ldrh	r0, [r5, #14]
 800cf36:	f7fc fbd3 	bl	80096e0 <lwip_htons>
  flags = TCPH_FLAGS(tcphdr);
 800cf3a:	6833      	ldr	r3, [r6, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800cf3c:	81e8      	strh	r0, [r5, #14]
  flags = TCPH_FLAGS(tcphdr);
 800cf3e:	8998      	ldrh	r0, [r3, #12]
 800cf40:	f7fc fbce 	bl	80096e0 <lwip_htons>
 800cf44:	4931      	ldr	r1, [pc, #196]	; (800d00c <tcp_input+0x1ec>)
 800cf46:	f000 033f 	and.w	r3, r0, #63	; 0x3f
  tcplen = p->tot_len;
 800cf4a:	8922      	ldrh	r2, [r4, #8]
  flags = TCPH_FLAGS(tcphdr);
 800cf4c:	700b      	strb	r3, [r1, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800cf4e:	0783      	lsls	r3, r0, #30
 800cf50:	f040 8144 	bne.w	800d1dc <tcp_input+0x3bc>
  tcplen = p->tot_len;
 800cf54:	4b2e      	ldr	r3, [pc, #184]	; (800d010 <tcp_input+0x1f0>)
 800cf56:	9305      	str	r3, [sp, #20]
 800cf58:	801a      	strh	r2, [r3, #0]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800cf5a:	4b2e      	ldr	r3, [pc, #184]	; (800d014 <tcp_input+0x1f4>)
 800cf5c:	681d      	ldr	r5, [r3, #0]
 800cf5e:	2d00      	cmp	r5, #0
 800cf60:	f000 80e5 	beq.w	800d12e <tcp_input+0x30e>
  prev = NULL;
 800cf64:	f04f 0800 	mov.w	r8, #0
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800cf68:	f8df a08c 	ldr.w	sl, [pc, #140]	; 800cff8 <tcp_input+0x1d8>
 800cf6c:	f8df b0bc 	ldr.w	fp, [pc, #188]	; 800d02c <tcp_input+0x20c>
 800cf70:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800d000 <tcp_input+0x1e0>
 800cf74:	e017      	b.n	800cfa6 <tcp_input+0x186>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800cf76:	2b0a      	cmp	r3, #10
 800cf78:	d021      	beq.n	800cfbe <tcp_input+0x19e>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800cf7a:	2b01      	cmp	r3, #1
 800cf7c:	d028      	beq.n	800cfd0 <tcp_input+0x1b0>
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800cf7e:	7a2a      	ldrb	r2, [r5, #8]
 800cf80:	b132      	cbz	r2, 800cf90 <tcp_input+0x170>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cf88:	3301      	adds	r3, #1
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800cf8a:	b2db      	uxtb	r3, r3
 800cf8c:	429a      	cmp	r2, r3
 800cf8e:	d104      	bne.n	800cf9a <tcp_input+0x17a>
    if (pcb->remote_port == tcphdr->src &&
 800cf90:	6833      	ldr	r3, [r6, #0]
 800cf92:	8b29      	ldrh	r1, [r5, #24]
 800cf94:	881a      	ldrh	r2, [r3, #0]
 800cf96:	4291      	cmp	r1, r2
 800cf98:	d04a      	beq.n	800d030 <tcp_input+0x210>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800cf9a:	68eb      	ldr	r3, [r5, #12]
 800cf9c:	46a8      	mov	r8, r5
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	f000 80c5 	beq.w	800d12e <tcp_input+0x30e>
 800cfa4:	461d      	mov	r5, r3
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800cfa6:	7d2b      	ldrb	r3, [r5, #20]
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d1e4      	bne.n	800cf76 <tcp_input+0x156>
 800cfac:	4653      	mov	r3, sl
 800cfae:	22fb      	movs	r2, #251	; 0xfb
 800cfb0:	4659      	mov	r1, fp
 800cfb2:	4648      	mov	r0, r9
 800cfb4:	f004 fb2a 	bl	801160c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800cfb8:	7d2b      	ldrb	r3, [r5, #20]
 800cfba:	2b0a      	cmp	r3, #10
 800cfbc:	d1dd      	bne.n	800cf7a <tcp_input+0x15a>
 800cfbe:	4653      	mov	r3, sl
 800cfc0:	22fc      	movs	r2, #252	; 0xfc
 800cfc2:	4915      	ldr	r1, [pc, #84]	; (800d018 <tcp_input+0x1f8>)
 800cfc4:	4648      	mov	r0, r9
 800cfc6:	f004 fb21 	bl	801160c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800cfca:	7d2b      	ldrb	r3, [r5, #20]
 800cfcc:	2b01      	cmp	r3, #1
 800cfce:	d1d6      	bne.n	800cf7e <tcp_input+0x15e>
 800cfd0:	4653      	mov	r3, sl
 800cfd2:	22fd      	movs	r2, #253	; 0xfd
 800cfd4:	4911      	ldr	r1, [pc, #68]	; (800d01c <tcp_input+0x1fc>)
 800cfd6:	4648      	mov	r0, r9
 800cfd8:	f004 fb18 	bl	801160c <iprintf>
 800cfdc:	e7cf      	b.n	800cf7e <tcp_input+0x15e>
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800cfde:	4b06      	ldr	r3, [pc, #24]	; (800cff8 <tcp_input+0x1d8>)
 800cfe0:	2283      	movs	r2, #131	; 0x83
 800cfe2:	490f      	ldr	r1, [pc, #60]	; (800d020 <tcp_input+0x200>)
 800cfe4:	4806      	ldr	r0, [pc, #24]	; (800d000 <tcp_input+0x1e0>)
 800cfe6:	f004 fb11 	bl	801160c <iprintf>
 800cfea:	e722      	b.n	800ce32 <tcp_input+0x12>
 800cfec:	240105c4 	.word	0x240105c4
 800cff0:	24009ab8 	.word	0x24009ab8
 800cff4:	240105c8 	.word	0x240105c8
 800cff8:	08014150 	.word	0x08014150
 800cffc:	08014390 	.word	0x08014390
 800d000:	080128dc 	.word	0x080128dc
 800d004:	240105b8 	.word	0x240105b8
 800d008:	24010594 	.word	0x24010594
 800d00c:	24010598 	.word	0x24010598
 800d010:	240105d2 	.word	0x240105d2
 800d014:	24010578 	.word	0x24010578
 800d018:	080143d8 	.word	0x080143d8
 800d01c:	08014404 	.word	0x08014404
 800d020:	0801435c 	.word	0x0801435c
 800d024:	240105d0 	.word	0x240105d0
 800d028:	240105cc 	.word	0x240105cc
 800d02c:	080143b0 	.word	0x080143b0
    if (pcb->remote_port == tcphdr->src &&
 800d030:	885b      	ldrh	r3, [r3, #2]
 800d032:	8aea      	ldrh	r2, [r5, #22]
 800d034:	429a      	cmp	r2, r3
 800d036:	d1b0      	bne.n	800cf9a <tcp_input+0x17a>
        pcb->local_port == tcphdr->dest &&
 800d038:	686a      	ldr	r2, [r5, #4]
 800d03a:	693b      	ldr	r3, [r7, #16]
 800d03c:	429a      	cmp	r2, r3
 800d03e:	d1ac      	bne.n	800cf9a <tcp_input+0x17a>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800d040:	682a      	ldr	r2, [r5, #0]
 800d042:	697b      	ldr	r3, [r7, #20]
 800d044:	429a      	cmp	r2, r3
 800d046:	d1a8      	bne.n	800cf9a <tcp_input+0x17a>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800d048:	68eb      	ldr	r3, [r5, #12]
 800d04a:	42ab      	cmp	r3, r5
 800d04c:	f000 8405 	beq.w	800d85a <tcp_input+0xa3a>
      if (prev != NULL) {
 800d050:	f1b8 0f00 	cmp.w	r8, #0
 800d054:	d009      	beq.n	800d06a <tcp_input+0x24a>
        pcb->next = tcp_active_pcbs;
 800d056:	4a6e      	ldr	r2, [pc, #440]	; (800d210 <tcp_input+0x3f0>)
        prev->next = pcb->next;
 800d058:	f8c8 300c 	str.w	r3, [r8, #12]
        pcb->next = tcp_active_pcbs;
 800d05c:	6813      	ldr	r3, [r2, #0]
        tcp_active_pcbs = pcb;
 800d05e:	6015      	str	r5, [r2, #0]
        pcb->next = tcp_active_pcbs;
 800d060:	60eb      	str	r3, [r5, #12]
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800d062:	68eb      	ldr	r3, [r5, #12]
 800d064:	42ab      	cmp	r3, r5
 800d066:	f000 8432 	beq.w	800d8ce <tcp_input+0xaae>
    inseg.next = NULL;
 800d06a:	2300      	movs	r3, #0
 800d06c:	4f69      	ldr	r7, [pc, #420]	; (800d214 <tcp_input+0x3f4>)
    recv_data = NULL;
 800d06e:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d230 <tcp_input+0x410>
    recv_flags = 0;
 800d072:	f8df 91c0 	ldr.w	r9, [pc, #448]	; 800d234 <tcp_input+0x414>
    recv_acked = 0;
 800d076:	f8df b1c0 	ldr.w	fp, [pc, #448]	; 800d238 <tcp_input+0x418>
    inseg.len = p->tot_len;
 800d07a:	8922      	ldrh	r2, [r4, #8]
    inseg.next = NULL;
 800d07c:	603b      	str	r3, [r7, #0]
    recv_data = NULL;
 800d07e:	f8c8 3000 	str.w	r3, [r8]
    recv_flags = 0;
 800d082:	f889 3000 	strb.w	r3, [r9]
    recv_acked = 0;
 800d086:	f8ab 3000 	strh.w	r3, [fp]
    if (flags & TCP_PSH) {
 800d08a:	4b63      	ldr	r3, [pc, #396]	; (800d218 <tcp_input+0x3f8>)
    inseg.len = p->tot_len;
 800d08c:	813a      	strh	r2, [r7, #8]
    if (flags & TCP_PSH) {
 800d08e:	781b      	ldrb	r3, [r3, #0]
    inseg.tcphdr = tcphdr;
 800d090:	6832      	ldr	r2, [r6, #0]
    inseg.p = p;
 800d092:	607c      	str	r4, [r7, #4]
    inseg.tcphdr = tcphdr;
 800d094:	60fa      	str	r2, [r7, #12]
    if (flags & TCP_PSH) {
 800d096:	071a      	lsls	r2, r3, #28
 800d098:	d503      	bpl.n	800d0a2 <tcp_input+0x282>
      p->flags |= PBUF_FLAG_PUSH;
 800d09a:	7b62      	ldrb	r2, [r4, #13]
 800d09c:	f042 0201 	orr.w	r2, r2, #1
 800d0a0:	7362      	strb	r2, [r4, #13]
    if (pcb->refused_data != NULL) {
 800d0a2:	6faa      	ldr	r2, [r5, #120]	; 0x78
 800d0a4:	b172      	cbz	r2, 800d0c4 <tcp_input+0x2a4>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800d0a6:	4628      	mov	r0, r5
 800d0a8:	f7fe ff6e 	bl	800bf88 <tcp_process_refused_data>
 800d0ac:	300d      	adds	r0, #13
 800d0ae:	f000 8276 	beq.w	800d59e <tcp_input+0x77e>
 800d0b2:	6fab      	ldr	r3, [r5, #120]	; 0x78
 800d0b4:	b123      	cbz	r3, 800d0c0 <tcp_input+0x2a0>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800d0b6:	9b05      	ldr	r3, [sp, #20]
 800d0b8:	881b      	ldrh	r3, [r3, #0]
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	f040 826f 	bne.w	800d59e <tcp_input+0x77e>
  if (flags & TCP_RST) {
 800d0c0:	4b55      	ldr	r3, [pc, #340]	; (800d218 <tcp_input+0x3f8>)
 800d0c2:	781b      	ldrb	r3, [r3, #0]
    tcp_input_pcb = pcb;
 800d0c4:	4c55      	ldr	r4, [pc, #340]	; (800d21c <tcp_input+0x3fc>)
  if (flags & TCP_RST) {
 800d0c6:	0759      	lsls	r1, r3, #29
    tcp_input_pcb = pcb;
 800d0c8:	6025      	str	r5, [r4, #0]
  if (flags & TCP_RST) {
 800d0ca:	f140 814a 	bpl.w	800d362 <tcp_input+0x542>
    if (pcb->state == SYN_SENT) {
 800d0ce:	7d29      	ldrb	r1, [r5, #20]
 800d0d0:	2902      	cmp	r1, #2
 800d0d2:	f000 8331 	beq.w	800d738 <tcp_input+0x918>
      if (seqno == pcb->rcv_nxt) {
 800d0d6:	4b52      	ldr	r3, [pc, #328]	; (800d220 <tcp_input+0x400>)
 800d0d8:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	429a      	cmp	r2, r3
 800d0de:	f000 8415 	beq.w	800d90c <tcp_input+0xaec>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800d0e2:	1a9b      	subs	r3, r3, r2
 800d0e4:	d404      	bmi.n	800d0f0 <tcp_input+0x2d0>
 800d0e6:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
 800d0e8:	1a9b      	subs	r3, r3, r2
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	f340 831f 	ble.w	800d72e <tcp_input+0x90e>
      if (recv_flags & TF_RESET) {
 800d0f0:	f899 3000 	ldrb.w	r3, [r9]
 800d0f4:	0718      	lsls	r0, r3, #28
 800d0f6:	f140 8258 	bpl.w	800d5aa <tcp_input+0x78a>
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800d0fa:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 800d0fe:	b11b      	cbz	r3, 800d108 <tcp_input+0x2e8>
 800d100:	f06f 010d 	mvn.w	r1, #13
 800d104:	6928      	ldr	r0, [r5, #16]
 800d106:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800d108:	4841      	ldr	r0, [pc, #260]	; (800d210 <tcp_input+0x3f0>)
 800d10a:	4629      	mov	r1, r5
 800d10c:	f7fe fbba 	bl	800b884 <tcp_pcb_remove>
        tcp_free(pcb);
 800d110:	4628      	mov	r0, r5
 800d112:	f7fd fda3 	bl	800ac5c <tcp_free>
    tcp_input_pcb = NULL;
 800d116:	2500      	movs	r5, #0
    if (inseg.p != NULL) {
 800d118:	6878      	ldr	r0, [r7, #4]
    tcp_input_pcb = NULL;
 800d11a:	6025      	str	r5, [r4, #0]
    recv_data = NULL;
 800d11c:	f8c8 5000 	str.w	r5, [r8]
    if (inseg.p != NULL) {
 800d120:	b110      	cbz	r0, 800d128 <tcp_input+0x308>
      pbuf_free(inseg.p);
 800d122:	f7fd fa7f 	bl	800a624 <pbuf_free>
      inseg.p = NULL;
 800d126:	607d      	str	r5, [r7, #4]
}
 800d128:	b007      	add	sp, #28
 800d12a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d12e:	4b3d      	ldr	r3, [pc, #244]	; (800d224 <tcp_input+0x404>)
 800d130:	681d      	ldr	r5, [r3, #0]
 800d132:	2d00      	cmp	r5, #0
 800d134:	d05b      	beq.n	800d1ee <tcp_input+0x3ce>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800d136:	f8df 8104 	ldr.w	r8, [pc, #260]	; 800d23c <tcp_input+0x41c>
 800d13a:	f8df b104 	ldr.w	fp, [pc, #260]	; 800d240 <tcp_input+0x420>
 800d13e:	f8df 9104 	ldr.w	r9, [pc, #260]	; 800d244 <tcp_input+0x424>
 800d142:	e002      	b.n	800d14a <tcp_input+0x32a>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d144:	68ed      	ldr	r5, [r5, #12]
 800d146:	2d00      	cmp	r5, #0
 800d148:	d051      	beq.n	800d1ee <tcp_input+0x3ce>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800d14a:	7d2b      	ldrb	r3, [r5, #20]
 800d14c:	2b0a      	cmp	r3, #10
 800d14e:	4643      	mov	r3, r8
 800d150:	d005      	beq.n	800d15e <tcp_input+0x33e>
 800d152:	f240 121f 	movw	r2, #287	; 0x11f
 800d156:	4659      	mov	r1, fp
 800d158:	4648      	mov	r0, r9
 800d15a:	f004 fa57 	bl	801160c <iprintf>
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d15e:	7a2a      	ldrb	r2, [r5, #8]
 800d160:	b132      	cbz	r2, 800d170 <tcp_input+0x350>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d168:	3301      	adds	r3, #1
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d16a:	b2db      	uxtb	r3, r3
 800d16c:	429a      	cmp	r2, r3
 800d16e:	d1e9      	bne.n	800d144 <tcp_input+0x324>
      if (pcb->remote_port == tcphdr->src &&
 800d170:	6832      	ldr	r2, [r6, #0]
 800d172:	8b2b      	ldrh	r3, [r5, #24]
 800d174:	8811      	ldrh	r1, [r2, #0]
 800d176:	428b      	cmp	r3, r1
 800d178:	d1e4      	bne.n	800d144 <tcp_input+0x324>
          pcb->local_port == tcphdr->dest &&
 800d17a:	8852      	ldrh	r2, [r2, #2]
      if (pcb->remote_port == tcphdr->src &&
 800d17c:	8ae8      	ldrh	r0, [r5, #22]
 800d17e:	4290      	cmp	r0, r2
 800d180:	d1e0      	bne.n	800d144 <tcp_input+0x324>
          pcb->local_port == tcphdr->dest &&
 800d182:	6869      	ldr	r1, [r5, #4]
 800d184:	693a      	ldr	r2, [r7, #16]
 800d186:	4291      	cmp	r1, r2
 800d188:	d1dc      	bne.n	800d144 <tcp_input+0x324>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800d18a:	6829      	ldr	r1, [r5, #0]
 800d18c:	697a      	ldr	r2, [r7, #20]
 800d18e:	4291      	cmp	r1, r2
 800d190:	d1d8      	bne.n	800d144 <tcp_input+0x324>
  if (flags & TCP_RST) {
 800d192:	4a21      	ldr	r2, [pc, #132]	; (800d218 <tcp_input+0x3f8>)
 800d194:	7812      	ldrb	r2, [r2, #0]
 800d196:	0757      	lsls	r7, r2, #29
 800d198:	f53f ae51 	bmi.w	800ce3e <tcp_input+0x1e>
  if (flags & TCP_SYN) {
 800d19c:	0796      	lsls	r6, r2, #30
 800d19e:	f140 83aa 	bpl.w	800d8f6 <tcp_input+0xad6>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800d1a2:	4a1f      	ldr	r2, [pc, #124]	; (800d220 <tcp_input+0x400>)
 800d1a4:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800d1a6:	6812      	ldr	r2, [r2, #0]
 800d1a8:	1a51      	subs	r1, r2, r1
 800d1aa:	d404      	bmi.n	800d1b6 <tcp_input+0x396>
 800d1ac:	8d2e      	ldrh	r6, [r5, #40]	; 0x28
 800d1ae:	1b89      	subs	r1, r1, r6
 800d1b0:	2900      	cmp	r1, #0
 800d1b2:	f340 83b6 	ble.w	800d922 <tcp_input+0xb02>
  if ((tcplen > 0)) {
 800d1b6:	9b05      	ldr	r3, [sp, #20]
 800d1b8:	881b      	ldrh	r3, [r3, #0]
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	f43f ae3f 	beq.w	800ce3e <tcp_input+0x1e>
    tcp_ack_now(pcb);
 800d1c0:	8b6b      	ldrh	r3, [r5, #26]
    tcp_output(pcb);
 800d1c2:	4628      	mov	r0, r5
    tcp_ack_now(pcb);
 800d1c4:	f043 0302 	orr.w	r3, r3, #2
 800d1c8:	836b      	strh	r3, [r5, #26]
    tcp_output(pcb);
 800d1ca:	f001 fb8f 	bl	800e8ec <tcp_output>
        pbuf_free(p);
 800d1ce:	e636      	b.n	800ce3e <tcp_input+0x1e>
    tcphdr_opt1len = tcphdr_optlen;
 800d1d0:	4a15      	ldr	r2, [pc, #84]	; (800d228 <tcp_input+0x408>)
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800d1d2:	4620      	mov	r0, r4
    tcphdr_opt1len = tcphdr_optlen;
 800d1d4:	8013      	strh	r3, [r2, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800d1d6:	f7fd f9b9 	bl	800a54c <pbuf_remove_header>
 800d1da:	e692      	b.n	800cf02 <tcp_input+0xe2>
    tcplen++;
 800d1dc:	1c53      	adds	r3, r2, #1
 800d1de:	4913      	ldr	r1, [pc, #76]	; (800d22c <tcp_input+0x40c>)
 800d1e0:	b29b      	uxth	r3, r3
 800d1e2:	9105      	str	r1, [sp, #20]
    if (tcplen < p->tot_len) {
 800d1e4:	429a      	cmp	r2, r3
    tcplen++;
 800d1e6:	800b      	strh	r3, [r1, #0]
    if (tcplen < p->tot_len) {
 800d1e8:	f67f aeb7 	bls.w	800cf5a <tcp_input+0x13a>
 800d1ec:	e627      	b.n	800ce3e <tcp_input+0x1e>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d1ee:	f8df 9058 	ldr.w	r9, [pc, #88]	; 800d248 <tcp_input+0x428>
 800d1f2:	f8d9 8000 	ldr.w	r8, [r9]
 800d1f6:	f1b8 0f00 	cmp.w	r8, #0
 800d1fa:	f000 8226 	beq.w	800d64a <tcp_input+0x82a>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800d1fe:	f8d7 c004 	ldr.w	ip, [r7, #4]
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800d202:	4645      	mov	r5, r8
      if (lpcb->local_port == tcphdr->dest) {
 800d204:	6830      	ldr	r0, [r6, #0]
    prev = NULL;
 800d206:	2100      	movs	r1, #0
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800d208:	f8d7 e014 	ldr.w	lr, [r7, #20]
 800d20c:	e024      	b.n	800d258 <tcp_input+0x438>
 800d20e:	bf00      	nop
 800d210:	24010578 	.word	0x24010578
 800d214:	2401059c 	.word	0x2401059c
 800d218:	24010598 	.word	0x24010598
 800d21c:	240105bc 	.word	0x240105bc
 800d220:	240105b8 	.word	0x240105b8
 800d224:	24010590 	.word	0x24010590
 800d228:	240105c8 	.word	0x240105c8
 800d22c:	240105d2 	.word	0x240105d2
 800d230:	240105b0 	.word	0x240105b0
 800d234:	240105b4 	.word	0x240105b4
 800d238:	240105ac 	.word	0x240105ac
 800d23c:	08014150 	.word	0x08014150
 800d240:	08014484 	.word	0x08014484
 800d244:	080128dc 	.word	0x080128dc
 800d248:	24010584 	.word	0x24010584
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d24c:	68eb      	ldr	r3, [r5, #12]
 800d24e:	4629      	mov	r1, r5
 800d250:	461d      	mov	r5, r3
 800d252:	2b00      	cmp	r3, #0
 800d254:	f000 81fa 	beq.w	800d64c <tcp_input+0x82c>
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800d258:	7a2a      	ldrb	r2, [r5, #8]
 800d25a:	b12a      	cbz	r2, 800d268 <tcp_input+0x448>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800d25c:	f89c 3030 	ldrb.w	r3, [ip, #48]	; 0x30
 800d260:	3301      	adds	r3, #1
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800d262:	b2db      	uxtb	r3, r3
 800d264:	429a      	cmp	r2, r3
 800d266:	d1f1      	bne.n	800d24c <tcp_input+0x42c>
      if (lpcb->local_port == tcphdr->dest) {
 800d268:	8aea      	ldrh	r2, [r5, #22]
 800d26a:	8843      	ldrh	r3, [r0, #2]
 800d26c:	429a      	cmp	r2, r3
 800d26e:	d1ed      	bne.n	800d24c <tcp_input+0x42c>
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800d270:	682a      	ldr	r2, [r5, #0]
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800d272:	b10a      	cbz	r2, 800d278 <tcp_input+0x458>
 800d274:	4572      	cmp	r2, lr
 800d276:	d1e9      	bne.n	800d24c <tcp_input+0x42c>
      if (prev != NULL) {
 800d278:	b129      	cbz	r1, 800d286 <tcp_input+0x466>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800d27a:	68ea      	ldr	r2, [r5, #12]
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800d27c:	f8c9 5000 	str.w	r5, [r9]
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800d280:	60ca      	str	r2, [r1, #12]
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800d282:	f8c5 800c 	str.w	r8, [r5, #12]
  if (flags & TCP_RST) {
 800d286:	4aa8      	ldr	r2, [pc, #672]	; (800d528 <tcp_input+0x708>)
 800d288:	7812      	ldrb	r2, [r2, #0]
 800d28a:	0751      	lsls	r1, r2, #29
 800d28c:	f53f add7 	bmi.w	800ce3e <tcp_input+0x1e>
  if (flags & TCP_ACK) {
 800d290:	f012 0810 	ands.w	r8, r2, #16
 800d294:	f040 8266 	bne.w	800d764 <tcp_input+0x944>
  } else if (flags & TCP_SYN) {
 800d298:	0790      	lsls	r0, r2, #30
 800d29a:	f57f add0 	bpl.w	800ce3e <tcp_input+0x1e>
    npcb = tcp_alloc(pcb->prio);
 800d29e:	7d68      	ldrb	r0, [r5, #21]
 800d2a0:	f7fe fc9e 	bl	800bbe0 <tcp_alloc>
    if (npcb == NULL) {
 800d2a4:	4681      	mov	r9, r0
 800d2a6:	2800      	cmp	r0, #0
 800d2a8:	f000 82c6 	beq.w	800d838 <tcp_input+0xa18>
    npcb->rcv_nxt = seqno + 1;
 800d2ac:	4b9f      	ldr	r3, [pc, #636]	; (800d52c <tcp_input+0x70c>)
    npcb->remote_port = tcphdr->src;
 800d2ae:	6831      	ldr	r1, [r6, #0]
    npcb->rcv_nxt = seqno + 1;
 800d2b0:	681b      	ldr	r3, [r3, #0]
    npcb->remote_port = tcphdr->src;
 800d2b2:	780a      	ldrb	r2, [r1, #0]
    npcb->rcv_nxt = seqno + 1;
 800d2b4:	3301      	adds	r3, #1
    npcb->remote_port = tcphdr->src;
 800d2b6:	7849      	ldrb	r1, [r1, #1]
 800d2b8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    npcb->local_port = pcb->local_port;
 800d2bc:	8ae9      	ldrh	r1, [r5, #22]
    npcb->rcv_nxt = seqno + 1;
 800d2be:	6243      	str	r3, [r0, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800d2c0:	62c3      	str	r3, [r0, #44]	; 0x2c
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800d2c2:	697b      	ldr	r3, [r7, #20]
    npcb->remote_port = tcphdr->src;
 800d2c4:	8302      	strh	r2, [r0, #24]
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800d2c6:	6003      	str	r3, [r0, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800d2c8:	693b      	ldr	r3, [r7, #16]
    npcb->local_port = pcb->local_port;
 800d2ca:	82c1      	strh	r1, [r0, #22]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800d2cc:	6043      	str	r3, [r0, #4]
    npcb->state = SYN_RCVD;
 800d2ce:	2303      	movs	r3, #3
 800d2d0:	7503      	strb	r3, [r0, #20]
    iss = tcp_next_iss(npcb);
 800d2d2:	f7fe fef1 	bl	800c0b8 <tcp_next_iss>
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800d2d6:	4b95      	ldr	r3, [pc, #596]	; (800d52c <tcp_input+0x70c>)
    npcb->snd_nxt = iss;
 800d2d8:	f8c9 0050 	str.w	r0, [r9, #80]	; 0x50
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800d2dc:	681b      	ldr	r3, [r3, #0]
    npcb->lastack = iss;
 800d2de:	f8c9 0044 	str.w	r0, [r9, #68]	; 0x44
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800d2e2:	3b01      	subs	r3, #1
    npcb->snd_lbb = iss;
 800d2e4:	f8c9 005c 	str.w	r0, [r9, #92]	; 0x5c
    TCP_REG_ACTIVE(npcb);
 800d2e8:	4a91      	ldr	r2, [pc, #580]	; (800d530 <tcp_input+0x710>)
    npcb->snd_wl2 = iss;
 800d2ea:	e9c9 3015 	strd	r3, r0, [r9, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800d2ee:	692b      	ldr	r3, [r5, #16]
    npcb->listener = pcb;
 800d2f0:	f8c9 507c 	str.w	r5, [r9, #124]	; 0x7c
    npcb->callback_arg = pcb->callback_arg;
 800d2f4:	f8c9 3010 	str.w	r3, [r9, #16]
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800d2f8:	7a6b      	ldrb	r3, [r5, #9]
 800d2fa:	f003 030c 	and.w	r3, r3, #12
 800d2fe:	f889 3009 	strb.w	r3, [r9, #9]
    npcb->netif_idx = pcb->netif_idx;
 800d302:	7a2b      	ldrb	r3, [r5, #8]
 800d304:	f889 3008 	strb.w	r3, [r9, #8]
    TCP_REG_ACTIVE(npcb);
 800d308:	6813      	ldr	r3, [r2, #0]
 800d30a:	f8c2 9000 	str.w	r9, [r2]
 800d30e:	f8c9 300c 	str.w	r3, [r9, #12]
 800d312:	f001 fe0f 	bl	800ef34 <tcp_timer_needed>
 800d316:	4b87      	ldr	r3, [pc, #540]	; (800d534 <tcp_input+0x714>)
 800d318:	2201      	movs	r2, #1
    tcp_parseopt(npcb);
 800d31a:	4648      	mov	r0, r9
    TCP_REG_ACTIVE(npcb);
 800d31c:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800d31e:	f7ff fcd3 	bl	800ccc8 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800d322:	6833      	ldr	r3, [r6, #0]
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800d324:	f109 0204 	add.w	r2, r9, #4
 800d328:	f8b9 5032 	ldrh.w	r5, [r9, #50]	; 0x32
    npcb->snd_wnd = tcphdr->wnd;
 800d32c:	89db      	ldrh	r3, [r3, #14]
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800d32e:	4610      	mov	r0, r2
 800d330:	9205      	str	r2, [sp, #20]
    npcb->snd_wnd = tcphdr->wnd;
 800d332:	f8a9 3060 	strh.w	r3, [r9, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800d336:	f8a9 3062 	strh.w	r3, [r9, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800d33a:	f002 fced 	bl	800fd18 <ip4_route>
 800d33e:	9a05      	ldr	r2, [sp, #20]
 800d340:	4601      	mov	r1, r0
 800d342:	4628      	mov	r0, r5
 800d344:	f7fe fed4 	bl	800c0f0 <tcp_eff_send_mss_netif>
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800d348:	2112      	movs	r1, #18
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800d34a:	f8a9 0032 	strh.w	r0, [r9, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800d34e:	4648      	mov	r0, r9
 800d350:	f001 f8b0 	bl	800e4b4 <tcp_enqueue_flags>
    if (rc != ERR_OK) {
 800d354:	2800      	cmp	r0, #0
 800d356:	f040 827a 	bne.w	800d84e <tcp_input+0xa2e>
    tcp_output(npcb);
 800d35a:	4648      	mov	r0, r9
 800d35c:	f001 fac6 	bl	800e8ec <tcp_output>
 800d360:	e56d      	b.n	800ce3e <tcp_input+0x1e>
  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800d362:	079a      	lsls	r2, r3, #30
 800d364:	d504      	bpl.n	800d370 <tcp_input+0x550>
 800d366:	7d2b      	ldrb	r3, [r5, #20]
 800d368:	3b02      	subs	r3, #2
 800d36a:	2b01      	cmp	r3, #1
 800d36c:	f200 81df 	bhi.w	800d72e <tcp_input+0x90e>
  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800d370:	8b6b      	ldrh	r3, [r5, #26]
 800d372:	06db      	lsls	r3, r3, #27
 800d374:	d402      	bmi.n	800d37c <tcp_input+0x55c>
    pcb->tmr = tcp_ticks;
 800d376:	4b70      	ldr	r3, [pc, #448]	; (800d538 <tcp_input+0x718>)
 800d378:	681b      	ldr	r3, [r3, #0]
 800d37a:	622b      	str	r3, [r5, #32]
  pcb->persist_probe = 0;
 800d37c:	2300      	movs	r3, #0
  tcp_parseopt(pcb);
 800d37e:	4628      	mov	r0, r5
  pcb->persist_probe = 0;
 800d380:	f8a5 309a 	strh.w	r3, [r5, #154]	; 0x9a
  tcp_parseopt(pcb);
 800d384:	f7ff fca0 	bl	800ccc8 <tcp_parseopt>
  switch (pcb->state) {
 800d388:	7d2b      	ldrb	r3, [r5, #20]
 800d38a:	3b02      	subs	r3, #2
 800d38c:	2b07      	cmp	r3, #7
 800d38e:	f63f aeaf 	bhi.w	800d0f0 <tcp_input+0x2d0>
 800d392:	e8df f003 	tbb	[pc, r3]
 800d396:	1334      	.short	0x1334
 800d398:	04748f04 	.word	0x04748f04
 800d39c:	5ba8      	.short	0x5ba8
      tcp_receive(pcb);
 800d39e:	4628      	mov	r0, r5
 800d3a0:	f7fe fff6 	bl	800c390 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800d3a4:	f899 3000 	ldrb.w	r3, [r9]
 800d3a8:	069e      	lsls	r6, r3, #26
 800d3aa:	f57f aea1 	bpl.w	800d0f0 <tcp_input+0x2d0>
        tcp_ack_now(pcb);
 800d3ae:	8b6b      	ldrh	r3, [r5, #26]
 800d3b0:	f043 0302 	orr.w	r3, r3, #2
 800d3b4:	836b      	strh	r3, [r5, #26]
        pcb->state = CLOSE_WAIT;
 800d3b6:	2307      	movs	r3, #7
 800d3b8:	752b      	strb	r3, [r5, #20]
    if (err != ERR_ABRT) {
 800d3ba:	e699      	b.n	800d0f0 <tcp_input+0x2d0>
      if (flags & TCP_ACK) {
 800d3bc:	4b5a      	ldr	r3, [pc, #360]	; (800d528 <tcp_input+0x708>)
 800d3be:	781b      	ldrb	r3, [r3, #0]
 800d3c0:	06d9      	lsls	r1, r3, #27
 800d3c2:	f140 820d 	bpl.w	800d7e0 <tcp_input+0x9c0>
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800d3c6:	4b5d      	ldr	r3, [pc, #372]	; (800d53c <tcp_input+0x71c>)
 800d3c8:	6819      	ldr	r1, [r3, #0]
 800d3ca:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800d3cc:	43db      	mvns	r3, r3
 800d3ce:	42cb      	cmn	r3, r1
 800d3d0:	d404      	bmi.n	800d3dc <tcp_input+0x5bc>
 800d3d2:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800d3d4:	1acb      	subs	r3, r1, r3
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	f340 824d 	ble.w	800d876 <tcp_input+0xa56>
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d3dc:	9a05      	ldr	r2, [sp, #20]
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d3de:	6833      	ldr	r3, [r6, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d3e0:	8810      	ldrh	r0, [r2, #0]
 800d3e2:	4a52      	ldr	r2, [pc, #328]	; (800d52c <tcp_input+0x70c>)
 800d3e4:	6812      	ldr	r2, [r2, #0]
 800d3e6:	4402      	add	r2, r0
 800d3e8:	8818      	ldrh	r0, [r3, #0]
 800d3ea:	9002      	str	r0, [sp, #8]
 800d3ec:	4628      	mov	r0, r5
 800d3ee:	885b      	ldrh	r3, [r3, #2]
 800d3f0:	9301      	str	r3, [sp, #4]
 800d3f2:	4b53      	ldr	r3, [pc, #332]	; (800d540 <tcp_input+0x720>)
 800d3f4:	9300      	str	r3, [sp, #0]
 800d3f6:	3304      	adds	r3, #4
 800d3f8:	f001 f9fe 	bl	800e7f8 <tcp_rst>
    if (err != ERR_ABRT) {
 800d3fc:	e678      	b.n	800d0f0 <tcp_input+0x2d0>
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800d3fe:	4b4a      	ldr	r3, [pc, #296]	; (800d528 <tcp_input+0x708>)
 800d400:	781a      	ldrb	r2, [r3, #0]
 800d402:	f002 0312 	and.w	r3, r2, #18
 800d406:	2b12      	cmp	r3, #18
 800d408:	f000 813a 	beq.w	800d680 <tcp_input+0x860>
      else if (flags & TCP_ACK) {
 800d40c:	06d0      	lsls	r0, r2, #27
 800d40e:	f57f ae6f 	bpl.w	800d0f0 <tcp_input+0x2d0>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d412:	9a05      	ldr	r2, [sp, #20]
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d414:	6833      	ldr	r3, [r6, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d416:	8811      	ldrh	r1, [r2, #0]
 800d418:	4a44      	ldr	r2, [pc, #272]	; (800d52c <tcp_input+0x70c>)
 800d41a:	8818      	ldrh	r0, [r3, #0]
 800d41c:	6812      	ldr	r2, [r2, #0]
 800d41e:	440a      	add	r2, r1
 800d420:	4946      	ldr	r1, [pc, #280]	; (800d53c <tcp_input+0x71c>)
 800d422:	6809      	ldr	r1, [r1, #0]
 800d424:	9002      	str	r0, [sp, #8]
 800d426:	4628      	mov	r0, r5
 800d428:	885b      	ldrh	r3, [r3, #2]
 800d42a:	9301      	str	r3, [sp, #4]
 800d42c:	4b44      	ldr	r3, [pc, #272]	; (800d540 <tcp_input+0x720>)
 800d42e:	9300      	str	r3, [sp, #0]
 800d430:	3304      	adds	r3, #4
 800d432:	f001 f9e1 	bl	800e7f8 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800d436:	f895 3042 	ldrb.w	r3, [r5, #66]	; 0x42
 800d43a:	2b05      	cmp	r3, #5
 800d43c:	f63f ae58 	bhi.w	800d0f0 <tcp_input+0x2d0>
          pcb->rtime = 0;
 800d440:	2300      	movs	r3, #0
          tcp_rexmit_rto(pcb);
 800d442:	4628      	mov	r0, r5
          pcb->rtime = 0;
 800d444:	862b      	strh	r3, [r5, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800d446:	f001 fc51 	bl	800ecec <tcp_rexmit_rto>
    if (err != ERR_ABRT) {
 800d44a:	e651      	b.n	800d0f0 <tcp_input+0x2d0>
      tcp_receive(pcb);
 800d44c:	4628      	mov	r0, r5
 800d44e:	f7fe ff9f 	bl	800c390 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800d452:	4b35      	ldr	r3, [pc, #212]	; (800d528 <tcp_input+0x708>)
 800d454:	781b      	ldrb	r3, [r3, #0]
 800d456:	06de      	lsls	r6, r3, #27
 800d458:	f57f ae4a 	bpl.w	800d0f0 <tcp_input+0x2d0>
 800d45c:	4b37      	ldr	r3, [pc, #220]	; (800d53c <tcp_input+0x71c>)
 800d45e:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	429a      	cmp	r2, r3
 800d464:	f47f ae44 	bne.w	800d0f0 <tcp_input+0x2d0>
 800d468:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	f47f ae40 	bne.w	800d0f0 <tcp_input+0x2d0>
        recv_flags |= TF_CLOSED;
 800d470:	f899 3000 	ldrb.w	r3, [r9]
 800d474:	f043 0310 	orr.w	r3, r3, #16
 800d478:	f889 3000 	strb.w	r3, [r9]
    if (err != ERR_ABRT) {
 800d47c:	e638      	b.n	800d0f0 <tcp_input+0x2d0>
      tcp_receive(pcb);
 800d47e:	4628      	mov	r0, r5
 800d480:	f7fe ff86 	bl	800c390 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800d484:	f899 3000 	ldrb.w	r3, [r9]
 800d488:	069a      	lsls	r2, r3, #26
 800d48a:	f57f ae31 	bpl.w	800d0f0 <tcp_input+0x2d0>
        tcp_ack_now(pcb);
 800d48e:	8b6b      	ldrh	r3, [r5, #26]
        tcp_pcb_purge(pcb);
 800d490:	4628      	mov	r0, r5
        tcp_ack_now(pcb);
 800d492:	f043 0302 	orr.w	r3, r3, #2
 800d496:	836b      	strh	r3, [r5, #26]
        tcp_pcb_purge(pcb);
 800d498:	f7fd fef8 	bl	800b28c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800d49c:	4b24      	ldr	r3, [pc, #144]	; (800d530 <tcp_input+0x710>)
 800d49e:	681b      	ldr	r3, [r3, #0]
 800d4a0:	42ab      	cmp	r3, r5
 800d4a2:	d05e      	beq.n	800d562 <tcp_input+0x742>
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d05f      	beq.n	800d568 <tcp_input+0x748>
 800d4a8:	68da      	ldr	r2, [r3, #12]
 800d4aa:	42aa      	cmp	r2, r5
 800d4ac:	f000 8218 	beq.w	800d8e0 <tcp_input+0xac0>
 800d4b0:	4613      	mov	r3, r2
 800d4b2:	e7f7      	b.n	800d4a4 <tcp_input+0x684>
      tcp_receive(pcb);
 800d4b4:	4628      	mov	r0, r5
 800d4b6:	f7fe ff6b 	bl	800c390 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800d4ba:	f899 3000 	ldrb.w	r3, [r9]
 800d4be:	f013 0f20 	tst.w	r3, #32
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800d4c2:	4b19      	ldr	r3, [pc, #100]	; (800d528 <tcp_input+0x708>)
 800d4c4:	781b      	ldrb	r3, [r3, #0]
      if (recv_flags & TF_GOT_FIN) {
 800d4c6:	f000 817b 	beq.w	800d7c0 <tcp_input+0x9a0>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800d4ca:	06d8      	lsls	r0, r3, #27
 800d4cc:	d504      	bpl.n	800d4d8 <tcp_input+0x6b8>
 800d4ce:	4b1b      	ldr	r3, [pc, #108]	; (800d53c <tcp_input+0x71c>)
 800d4d0:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	429a      	cmp	r2, r3
 800d4d6:	d035      	beq.n	800d544 <tcp_input+0x724>
          tcp_ack_now(pcb);
 800d4d8:	8b6b      	ldrh	r3, [r5, #26]
 800d4da:	f043 0302 	orr.w	r3, r3, #2
 800d4de:	836b      	strh	r3, [r5, #26]
          pcb->state = CLOSING;
 800d4e0:	2308      	movs	r3, #8
 800d4e2:	752b      	strb	r3, [r5, #20]
    if (err != ERR_ABRT) {
 800d4e4:	e604      	b.n	800d0f0 <tcp_input+0x2d0>
      tcp_receive(pcb);
 800d4e6:	4628      	mov	r0, r5
 800d4e8:	f7fe ff52 	bl	800c390 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800d4ec:	4b0e      	ldr	r3, [pc, #56]	; (800d528 <tcp_input+0x708>)
 800d4ee:	781b      	ldrb	r3, [r3, #0]
 800d4f0:	06db      	lsls	r3, r3, #27
 800d4f2:	f57f adfd 	bpl.w	800d0f0 <tcp_input+0x2d0>
 800d4f6:	4b11      	ldr	r3, [pc, #68]	; (800d53c <tcp_input+0x71c>)
 800d4f8:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	429a      	cmp	r2, r3
 800d4fe:	f47f adf7 	bne.w	800d0f0 <tcp_input+0x2d0>
 800d502:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 800d504:	2b00      	cmp	r3, #0
 800d506:	f47f adf3 	bne.w	800d0f0 <tcp_input+0x2d0>
        tcp_pcb_purge(pcb);
 800d50a:	4628      	mov	r0, r5
 800d50c:	f7fd febe 	bl	800b28c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800d510:	4b07      	ldr	r3, [pc, #28]	; (800d530 <tcp_input+0x710>)
 800d512:	681b      	ldr	r3, [r3, #0]
 800d514:	42ab      	cmp	r3, r5
 800d516:	d024      	beq.n	800d562 <tcp_input+0x742>
 800d518:	b333      	cbz	r3, 800d568 <tcp_input+0x748>
 800d51a:	68da      	ldr	r2, [r3, #12]
 800d51c:	42aa      	cmp	r2, r5
 800d51e:	f000 81df 	beq.w	800d8e0 <tcp_input+0xac0>
 800d522:	4613      	mov	r3, r2
 800d524:	e7f8      	b.n	800d518 <tcp_input+0x6f8>
 800d526:	bf00      	nop
 800d528:	24010598 	.word	0x24010598
 800d52c:	240105b8 	.word	0x240105b8
 800d530:	24010578 	.word	0x24010578
 800d534:	2401057c 	.word	0x2401057c
 800d538:	24010588 	.word	0x24010588
 800d53c:	24010594 	.word	0x24010594
 800d540:	24009ac8 	.word	0x24009ac8
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800d544:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 800d546:	2b00      	cmp	r3, #0
 800d548:	d1c6      	bne.n	800d4d8 <tcp_input+0x6b8>
          tcp_ack_now(pcb);
 800d54a:	8b6b      	ldrh	r3, [r5, #26]
          tcp_pcb_purge(pcb);
 800d54c:	4628      	mov	r0, r5
          tcp_ack_now(pcb);
 800d54e:	f043 0302 	orr.w	r3, r3, #2
 800d552:	836b      	strh	r3, [r5, #26]
          tcp_pcb_purge(pcb);
 800d554:	f7fd fe9a 	bl	800b28c <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800d558:	4bab      	ldr	r3, [pc, #684]	; (800d808 <tcp_input+0x9e8>)
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	42ab      	cmp	r3, r5
 800d55e:	f040 81c2 	bne.w	800d8e6 <tcp_input+0xac6>
        TCP_RMV_ACTIVE(pcb);
 800d562:	68eb      	ldr	r3, [r5, #12]
 800d564:	4aa8      	ldr	r2, [pc, #672]	; (800d808 <tcp_input+0x9e8>)
 800d566:	6013      	str	r3, [r2, #0]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800d568:	4ba8      	ldr	r3, [pc, #672]	; (800d80c <tcp_input+0x9ec>)
        pcb->state = TIME_WAIT;
 800d56a:	220a      	movs	r2, #10
 800d56c:	752a      	strb	r2, [r5, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800d56e:	681a      	ldr	r2, [r3, #0]
 800d570:	601d      	str	r5, [r3, #0]
 800d572:	60ea      	str	r2, [r5, #12]
        TCP_RMV_ACTIVE(pcb);
 800d574:	2201      	movs	r2, #1
 800d576:	4ba6      	ldr	r3, [pc, #664]	; (800d810 <tcp_input+0x9f0>)
 800d578:	701a      	strb	r2, [r3, #0]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800d57a:	f001 fcdb 	bl	800ef34 <tcp_timer_needed>
    if (err != ERR_ABRT) {
 800d57e:	e5b7      	b.n	800d0f0 <tcp_input+0x2d0>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800d580:	4ba4      	ldr	r3, [pc, #656]	; (800d814 <tcp_input+0x9f4>)
 800d582:	22c2      	movs	r2, #194	; 0xc2
 800d584:	49a4      	ldr	r1, [pc, #656]	; (800d818 <tcp_input+0x9f8>)
 800d586:	48a5      	ldr	r0, [pc, #660]	; (800d81c <tcp_input+0x9fc>)
 800d588:	f004 f840 	bl	801160c <iprintf>
 800d58c:	e48a      	b.n	800cea4 <tcp_input+0x84>
    LWIP_ASSERT("p->len == 0", p->len == 0);
 800d58e:	4ba1      	ldr	r3, [pc, #644]	; (800d814 <tcp_input+0x9f4>)
 800d590:	22df      	movs	r2, #223	; 0xdf
 800d592:	49a3      	ldr	r1, [pc, #652]	; (800d820 <tcp_input+0xa00>)
 800d594:	48a1      	ldr	r0, [pc, #644]	; (800d81c <tcp_input+0x9fc>)
 800d596:	f004 f839 	bl	801160c <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800d59a:	8923      	ldrh	r3, [r4, #8]
 800d59c:	e4a7      	b.n	800ceee <tcp_input+0xce>
        if (pcb->rcv_ann_wnd == 0) {
 800d59e:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	f000 80da 	beq.w	800d75a <tcp_input+0x93a>
 800d5a6:	4c9f      	ldr	r4, [pc, #636]	; (800d824 <tcp_input+0xa04>)
 800d5a8:	e5b5      	b.n	800d116 <tcp_input+0x2f6>
        if (recv_acked > 0) {
 800d5aa:	f8bb 2000 	ldrh.w	r2, [fp]
 800d5ae:	b15a      	cbz	r2, 800d5c8 <tcp_input+0x7a8>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800d5b0:	f8d5 3080 	ldr.w	r3, [r5, #128]	; 0x80
 800d5b4:	b12b      	cbz	r3, 800d5c2 <tcp_input+0x7a2>
 800d5b6:	4629      	mov	r1, r5
 800d5b8:	6928      	ldr	r0, [r5, #16]
 800d5ba:	4798      	blx	r3
            if (err == ERR_ABRT) {
 800d5bc:	300d      	adds	r0, #13
 800d5be:	f43f adaa 	beq.w	800d116 <tcp_input+0x2f6>
          recv_acked = 0;
 800d5c2:	2300      	movs	r3, #0
 800d5c4:	f8ab 3000 	strh.w	r3, [fp]
        if (tcp_input_delayed_close(pcb)) {
 800d5c8:	4628      	mov	r0, r5
 800d5ca:	f7fe fe43 	bl	800c254 <tcp_input_delayed_close>
 800d5ce:	2800      	cmp	r0, #0
 800d5d0:	f47f ada1 	bne.w	800d116 <tcp_input+0x2f6>
        if (recv_data != NULL) {
 800d5d4:	f8d8 2000 	ldr.w	r2, [r8]
 800d5d8:	b1fa      	cbz	r2, 800d61a <tcp_input+0x7fa>
          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800d5da:	6fab      	ldr	r3, [r5, #120]	; 0x78
 800d5dc:	b143      	cbz	r3, 800d5f0 <tcp_input+0x7d0>
 800d5de:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800d5e2:	4b8c      	ldr	r3, [pc, #560]	; (800d814 <tcp_input+0x9f4>)
 800d5e4:	4990      	ldr	r1, [pc, #576]	; (800d828 <tcp_input+0xa08>)
 800d5e6:	488d      	ldr	r0, [pc, #564]	; (800d81c <tcp_input+0x9fc>)
 800d5e8:	f004 f810 	bl	801160c <iprintf>
            pbuf_free(recv_data);
 800d5ec:	f8d8 2000 	ldr.w	r2, [r8]
          if (pcb->flags & TF_RXCLOSED) {
 800d5f0:	8b6b      	ldrh	r3, [r5, #26]
 800d5f2:	f013 0310 	ands.w	r3, r3, #16
 800d5f6:	f040 80dc 	bne.w	800d7b2 <tcp_input+0x992>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800d5fa:	f8d5 6084 	ldr.w	r6, [r5, #132]	; 0x84
 800d5fe:	2e00      	cmp	r6, #0
 800d600:	f000 80fc 	beq.w	800d7fc <tcp_input+0x9dc>
 800d604:	4629      	mov	r1, r5
 800d606:	6928      	ldr	r0, [r5, #16]
 800d608:	47b0      	blx	r6
          if (err == ERR_ABRT) {
 800d60a:	f110 0f0d 	cmn.w	r0, #13
 800d60e:	f43f ad82 	beq.w	800d116 <tcp_input+0x2f6>
          if (err != ERR_OK) {
 800d612:	b110      	cbz	r0, 800d61a <tcp_input+0x7fa>
            pcb->refused_data = recv_data;
 800d614:	f8d8 3000 	ldr.w	r3, [r8]
 800d618:	67ab      	str	r3, [r5, #120]	; 0x78
        if (recv_flags & TF_GOT_FIN) {
 800d61a:	f899 3000 	ldrb.w	r3, [r9]
 800d61e:	0699      	lsls	r1, r3, #26
 800d620:	d507      	bpl.n	800d632 <tcp_input+0x812>
          if (pcb->refused_data != NULL) {
 800d622:	6fab      	ldr	r3, [r5, #120]	; 0x78
 800d624:	2b00      	cmp	r3, #0
 800d626:	f000 80af 	beq.w	800d788 <tcp_input+0x968>
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800d62a:	7b5a      	ldrb	r2, [r3, #13]
 800d62c:	f042 0220 	orr.w	r2, r2, #32
 800d630:	735a      	strb	r2, [r3, #13]
        tcp_input_pcb = NULL;
 800d632:	2300      	movs	r3, #0
        if (tcp_input_delayed_close(pcb)) {
 800d634:	4628      	mov	r0, r5
        tcp_input_pcb = NULL;
 800d636:	6023      	str	r3, [r4, #0]
        if (tcp_input_delayed_close(pcb)) {
 800d638:	f7fe fe0c 	bl	800c254 <tcp_input_delayed_close>
 800d63c:	2800      	cmp	r0, #0
 800d63e:	f47f ad6a 	bne.w	800d116 <tcp_input+0x2f6>
        tcp_output(pcb);
 800d642:	4628      	mov	r0, r5
 800d644:	f001 f952 	bl	800e8ec <tcp_output>
 800d648:	e565      	b.n	800d116 <tcp_input+0x2f6>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800d64a:	6830      	ldr	r0, [r6, #0]
 800d64c:	8980      	ldrh	r0, [r0, #12]
 800d64e:	f7fc f847 	bl	80096e0 <lwip_htons>
 800d652:	f010 0004 	ands.w	r0, r0, #4
 800d656:	f47f abf2 	bne.w	800ce3e <tcp_input+0x1e>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d65a:	9a05      	ldr	r2, [sp, #20]
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d65c:	6833      	ldr	r3, [r6, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d65e:	8811      	ldrh	r1, [r2, #0]
 800d660:	4a72      	ldr	r2, [pc, #456]	; (800d82c <tcp_input+0xa0c>)
 800d662:	881d      	ldrh	r5, [r3, #0]
 800d664:	6812      	ldr	r2, [r2, #0]
 800d666:	440a      	add	r2, r1
 800d668:	4971      	ldr	r1, [pc, #452]	; (800d830 <tcp_input+0xa10>)
 800d66a:	6809      	ldr	r1, [r1, #0]
 800d66c:	9502      	str	r5, [sp, #8]
 800d66e:	885b      	ldrh	r3, [r3, #2]
 800d670:	9301      	str	r3, [sp, #4]
 800d672:	4b70      	ldr	r3, [pc, #448]	; (800d834 <tcp_input+0xa14>)
 800d674:	9300      	str	r3, [sp, #0]
 800d676:	3304      	adds	r3, #4
 800d678:	f001 f8be 	bl	800e7f8 <tcp_rst>
 800d67c:	f7ff bbdf 	b.w	800ce3e <tcp_input+0x1e>
          && (ackno == pcb->lastack + 1)) {
 800d680:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800d682:	496b      	ldr	r1, [pc, #428]	; (800d830 <tcp_input+0xa10>)
 800d684:	3301      	adds	r3, #1
 800d686:	6809      	ldr	r1, [r1, #0]
 800d688:	428b      	cmp	r3, r1
 800d68a:	f47f aebf 	bne.w	800d40c <tcp_input+0x5ec>
        pcb->lastack = ackno;
 800d68e:	646b      	str	r3, [r5, #68]	; 0x44
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800d690:	1d2a      	adds	r2, r5, #4
        pcb->rcv_nxt = seqno + 1;
 800d692:	4b66      	ldr	r3, [pc, #408]	; (800d82c <tcp_input+0xa0c>)
        pcb->snd_wnd = tcphdr->wnd;
 800d694:	6830      	ldr	r0, [r6, #0]
        pcb->rcv_nxt = seqno + 1;
 800d696:	681b      	ldr	r3, [r3, #0]
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800d698:	8e6e      	ldrh	r6, [r5, #50]	; 0x32
        pcb->rcv_nxt = seqno + 1;
 800d69a:	1c59      	adds	r1, r3, #1
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800d69c:	3b01      	subs	r3, #1
        pcb->rcv_nxt = seqno + 1;
 800d69e:	6269      	str	r1, [r5, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800d6a0:	62e9      	str	r1, [r5, #44]	; 0x2c
        pcb->snd_wnd = tcphdr->wnd;
 800d6a2:	89c1      	ldrh	r1, [r0, #14]
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800d6a4:	4610      	mov	r0, r2
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800d6a6:	656b      	str	r3, [r5, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800d6a8:	2304      	movs	r3, #4
        pcb->snd_wnd = tcphdr->wnd;
 800d6aa:	f8a5 1060 	strh.w	r1, [r5, #96]	; 0x60
        pcb->state = ESTABLISHED;
 800d6ae:	752b      	strb	r3, [r5, #20]
        pcb->snd_wnd_max = pcb->snd_wnd;
 800d6b0:	f8a5 1062 	strh.w	r1, [r5, #98]	; 0x62
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800d6b4:	9205      	str	r2, [sp, #20]
 800d6b6:	f002 fb2f 	bl	800fd18 <ip4_route>
 800d6ba:	9a05      	ldr	r2, [sp, #20]
 800d6bc:	4601      	mov	r1, r0
 800d6be:	4630      	mov	r0, r6
 800d6c0:	f7fe fd16 	bl	800c0f0 <tcp_eff_send_mss_netif>
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800d6c4:	f241 131c 	movw	r3, #4380	; 0x111c
 800d6c8:	0042      	lsls	r2, r0, #1
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800d6ca:	8668      	strh	r0, [r5, #50]	; 0x32
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800d6cc:	0081      	lsls	r1, r0, #2
 800d6ce:	429a      	cmp	r2, r3
 800d6d0:	4616      	mov	r6, r2
 800d6d2:	bf38      	it	cc
 800d6d4:	461e      	movcc	r6, r3
 800d6d6:	ebb6 0f80 	cmp.w	r6, r0, lsl #2
 800d6da:	f240 8148 	bls.w	800d96e <tcp_input+0xb4e>
 800d6de:	b28b      	uxth	r3, r1
 800d6e0:	f8a5 3048 	strh.w	r3, [r5, #72]	; 0x48
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800d6e4:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	f000 8138 	beq.w	800d95e <tcp_input+0xb3e>
        --pcb->snd_queuelen;
 800d6ee:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
        rseg = pcb->unacked;
 800d6f2:	6f2e      	ldr	r6, [r5, #112]	; 0x70
        --pcb->snd_queuelen;
 800d6f4:	3b01      	subs	r3, #1
 800d6f6:	f8a5 3066 	strh.w	r3, [r5, #102]	; 0x66
        if (rseg == NULL) {
 800d6fa:	2e00      	cmp	r6, #0
 800d6fc:	f000 812a 	beq.w	800d954 <tcp_input+0xb34>
          pcb->unacked = rseg->next;
 800d700:	6833      	ldr	r3, [r6, #0]
 800d702:	672b      	str	r3, [r5, #112]	; 0x70
        tcp_seg_free(rseg);
 800d704:	4630      	mov	r0, r6
 800d706:	f7fd fd03 	bl	800b110 <tcp_seg_free>
        if (pcb->unacked == NULL) {
 800d70a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	f000 811d 	beq.w	800d94c <tcp_input+0xb2c>
          pcb->rtime = 0;
 800d712:	2300      	movs	r3, #0
 800d714:	862b      	strh	r3, [r5, #48]	; 0x30
          pcb->nrtx = 0;
 800d716:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800d71a:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
 800d71e:	b133      	cbz	r3, 800d72e <tcp_input+0x90e>
 800d720:	2200      	movs	r2, #0
 800d722:	4629      	mov	r1, r5
 800d724:	6928      	ldr	r0, [r5, #16]
 800d726:	4798      	blx	r3
        if (err == ERR_ABRT) {
 800d728:	300d      	adds	r0, #13
 800d72a:	f43f acf4 	beq.w	800d116 <tcp_input+0x2f6>
        tcp_ack_now(pcb);
 800d72e:	8b6b      	ldrh	r3, [r5, #26]
 800d730:	f043 0302 	orr.w	r3, r3, #2
 800d734:	836b      	strh	r3, [r5, #26]
    if (err != ERR_ABRT) {
 800d736:	e4db      	b.n	800d0f0 <tcp_input+0x2d0>
      if (ackno == pcb->snd_nxt) {
 800d738:	4b3d      	ldr	r3, [pc, #244]	; (800d830 <tcp_input+0xa10>)
 800d73a:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 800d73c:	681b      	ldr	r3, [r3, #0]
 800d73e:	429a      	cmp	r2, r3
 800d740:	f47f acd6 	bne.w	800d0f0 <tcp_input+0x2d0>
      recv_flags |= TF_RESET;
 800d744:	f899 3000 	ldrb.w	r3, [r9]
 800d748:	f043 0308 	orr.w	r3, r3, #8
 800d74c:	f889 3000 	strb.w	r3, [r9]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800d750:	8b6b      	ldrh	r3, [r5, #26]
 800d752:	f023 0301 	bic.w	r3, r3, #1
 800d756:	836b      	strh	r3, [r5, #26]
    if (err != ERR_ABRT) {
 800d758:	e4ca      	b.n	800d0f0 <tcp_input+0x2d0>
          tcp_send_empty_ack(pcb);
 800d75a:	4628      	mov	r0, r5
 800d75c:	4c31      	ldr	r4, [pc, #196]	; (800d824 <tcp_input+0xa04>)
 800d75e:	f001 f893 	bl	800e888 <tcp_send_empty_ack>
 800d762:	e4d8      	b.n	800d116 <tcp_input+0x2f6>
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d764:	8802      	ldrh	r2, [r0, #0]
 800d766:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800d76a:	9b05      	ldr	r3, [sp, #20]
 800d76c:	881a      	ldrh	r2, [r3, #0]
 800d76e:	4b2f      	ldr	r3, [pc, #188]	; (800d82c <tcp_input+0xa0c>)
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	441a      	add	r2, r3
 800d774:	4b2e      	ldr	r3, [pc, #184]	; (800d830 <tcp_input+0xa10>)
 800d776:	4628      	mov	r0, r5
 800d778:	6819      	ldr	r1, [r3, #0]
 800d77a:	4b2e      	ldr	r3, [pc, #184]	; (800d834 <tcp_input+0xa14>)
 800d77c:	9300      	str	r3, [sp, #0]
 800d77e:	3304      	adds	r3, #4
 800d780:	f001 f83a 	bl	800e7f8 <tcp_rst>
 800d784:	f7ff bb5b 	b.w	800ce3e <tcp_input+0x1e>
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800d788:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
 800d78a:	f241 62d0 	movw	r2, #5840	; 0x16d0
 800d78e:	4293      	cmp	r3, r2
 800d790:	d001      	beq.n	800d796 <tcp_input+0x976>
              pcb->rcv_wnd++;
 800d792:	3301      	adds	r3, #1
 800d794:	852b      	strh	r3, [r5, #40]	; 0x28
            TCP_EVENT_CLOSED(pcb, err);
 800d796:	f8d5 6084 	ldr.w	r6, [r5, #132]	; 0x84
 800d79a:	2e00      	cmp	r6, #0
 800d79c:	f43f af49 	beq.w	800d632 <tcp_input+0x812>
 800d7a0:	2300      	movs	r3, #0
 800d7a2:	4629      	mov	r1, r5
 800d7a4:	6928      	ldr	r0, [r5, #16]
 800d7a6:	461a      	mov	r2, r3
 800d7a8:	47b0      	blx	r6
            if (err == ERR_ABRT) {
 800d7aa:	300d      	adds	r0, #13
 800d7ac:	f47f af41 	bne.w	800d632 <tcp_input+0x812>
 800d7b0:	e4b1      	b.n	800d116 <tcp_input+0x2f6>
            pbuf_free(recv_data);
 800d7b2:	4610      	mov	r0, r2
 800d7b4:	f7fc ff36 	bl	800a624 <pbuf_free>
            tcp_abort(pcb);
 800d7b8:	4628      	mov	r0, r5
 800d7ba:	f7fe f9a9 	bl	800bb10 <tcp_abort>
            goto aborted;
 800d7be:	e4aa      	b.n	800d116 <tcp_input+0x2f6>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800d7c0:	06d9      	lsls	r1, r3, #27
 800d7c2:	f57f ac95 	bpl.w	800d0f0 <tcp_input+0x2d0>
 800d7c6:	4b1a      	ldr	r3, [pc, #104]	; (800d830 <tcp_input+0xa10>)
 800d7c8:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 800d7ca:	681b      	ldr	r3, [r3, #0]
 800d7cc:	429a      	cmp	r2, r3
 800d7ce:	f47f ac8f 	bne.w	800d0f0 <tcp_input+0x2d0>
 800d7d2:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	f47f ac8b 	bne.w	800d0f0 <tcp_input+0x2d0>
        pcb->state = FIN_WAIT_2;
 800d7da:	2306      	movs	r3, #6
 800d7dc:	752b      	strb	r3, [r5, #20]
    if (err != ERR_ABRT) {
 800d7de:	e487      	b.n	800d0f0 <tcp_input+0x2d0>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800d7e0:	079b      	lsls	r3, r3, #30
 800d7e2:	f57f ac85 	bpl.w	800d0f0 <tcp_input+0x2d0>
 800d7e6:	4b11      	ldr	r3, [pc, #68]	; (800d82c <tcp_input+0xa0c>)
 800d7e8:	681a      	ldr	r2, [r3, #0]
 800d7ea:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d7ec:	3b01      	subs	r3, #1
 800d7ee:	4293      	cmp	r3, r2
 800d7f0:	f47f ac7e 	bne.w	800d0f0 <tcp_input+0x2d0>
        tcp_rexmit(pcb);
 800d7f4:	4628      	mov	r0, r5
 800d7f6:	f000 ff81 	bl	800e6fc <tcp_rexmit>
    if (err != ERR_ABRT) {
 800d7fa:	e479      	b.n	800d0f0 <tcp_input+0x2d0>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800d7fc:	4633      	mov	r3, r6
 800d7fe:	4630      	mov	r0, r6
 800d800:	4629      	mov	r1, r5
 800d802:	f7fe fb8d 	bl	800bf20 <tcp_recv_null>
 800d806:	e700      	b.n	800d60a <tcp_input+0x7ea>
 800d808:	24010578 	.word	0x24010578
 800d80c:	24010590 	.word	0x24010590
 800d810:	2401057c 	.word	0x2401057c
 800d814:	08014150 	.word	0x08014150
 800d818:	08014374 	.word	0x08014374
 800d81c:	080128dc 	.word	0x080128dc
 800d820:	08014384 	.word	0x08014384
 800d824:	240105bc 	.word	0x240105bc
 800d828:	08014520 	.word	0x08014520
 800d82c:	240105b8 	.word	0x240105b8
 800d830:	24010594 	.word	0x24010594
 800d834:	24009ac8 	.word	0x24009ac8
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800d838:	69ab      	ldr	r3, [r5, #24]
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	f43f aaff 	beq.w	800ce3e <tcp_input+0x1e>
 800d840:	4601      	mov	r1, r0
 800d842:	f04f 32ff 	mov.w	r2, #4294967295
 800d846:	6928      	ldr	r0, [r5, #16]
 800d848:	4798      	blx	r3
 800d84a:	f7ff baf8 	b.w	800ce3e <tcp_input+0x1e>
      tcp_abandon(npcb, 0);
 800d84e:	4641      	mov	r1, r8
 800d850:	4648      	mov	r0, r9
 800d852:	f7fe f887 	bl	800b964 <tcp_abandon>
      return;
 800d856:	f7ff baf2 	b.w	800ce3e <tcp_input+0x1e>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800d85a:	4b4b      	ldr	r3, [pc, #300]	; (800d988 <tcp_input+0xb68>)
 800d85c:	f240 120d 	movw	r2, #269	; 0x10d
 800d860:	494a      	ldr	r1, [pc, #296]	; (800d98c <tcp_input+0xb6c>)
 800d862:	484b      	ldr	r0, [pc, #300]	; (800d990 <tcp_input+0xb70>)
 800d864:	f003 fed2 	bl	801160c <iprintf>
      if (prev != NULL) {
 800d868:	f1b8 0f00 	cmp.w	r8, #0
 800d86c:	f43f abf9 	beq.w	800d062 <tcp_input+0x242>
 800d870:	68eb      	ldr	r3, [r5, #12]
 800d872:	f7ff bbf0 	b.w	800d056 <tcp_input+0x236>
          pcb->state = ESTABLISHED;
 800d876:	2304      	movs	r3, #4
 800d878:	752b      	strb	r3, [r5, #20]
          if (pcb->listener == NULL) {
 800d87a:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	d09b      	beq.n	800d7b8 <tcp_input+0x998>
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800d880:	699b      	ldr	r3, [r3, #24]
 800d882:	2b00      	cmp	r3, #0
 800d884:	d056      	beq.n	800d934 <tcp_input+0xb14>
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800d886:	2200      	movs	r2, #0
 800d888:	4629      	mov	r1, r5
 800d88a:	6928      	ldr	r0, [r5, #16]
 800d88c:	4798      	blx	r3
          if (err != ERR_OK) {
 800d88e:	2800      	cmp	r0, #0
 800d890:	d14c      	bne.n	800d92c <tcp_input+0xb0c>
          tcp_receive(pcb);
 800d892:	4628      	mov	r0, r5
 800d894:	f7fe fd7c 	bl	800c390 <tcp_receive>
          if (recv_acked != 0) {
 800d898:	f8bb 3000 	ldrh.w	r3, [fp]
 800d89c:	b113      	cbz	r3, 800d8a4 <tcp_input+0xa84>
            recv_acked--;
 800d89e:	3b01      	subs	r3, #1
 800d8a0:	f8ab 3000 	strh.w	r3, [fp]
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800d8a4:	8e69      	ldrh	r1, [r5, #50]	; 0x32
 800d8a6:	f241 131c 	movw	r3, #4380	; 0x111c
 800d8aa:	004a      	lsls	r2, r1, #1
 800d8ac:	0088      	lsls	r0, r1, #2
 800d8ae:	429a      	cmp	r2, r3
 800d8b0:	4616      	mov	r6, r2
 800d8b2:	bf38      	it	cc
 800d8b4:	461e      	movcc	r6, r3
 800d8b6:	ebb6 0f81 	cmp.w	r6, r1, lsl #2
 800d8ba:	d923      	bls.n	800d904 <tcp_input+0xae4>
 800d8bc:	b283      	uxth	r3, r0
 800d8be:	f8a5 3048 	strh.w	r3, [r5, #72]	; 0x48
          if (recv_flags & TF_GOT_FIN) {
 800d8c2:	f899 3000 	ldrb.w	r3, [r9]
 800d8c6:	069a      	lsls	r2, r3, #26
 800d8c8:	f57f ac12 	bpl.w	800d0f0 <tcp_input+0x2d0>
 800d8cc:	e56f      	b.n	800d3ae <tcp_input+0x58e>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800d8ce:	4b2e      	ldr	r3, [pc, #184]	; (800d988 <tcp_input+0xb68>)
 800d8d0:	f240 1215 	movw	r2, #277	; 0x115
 800d8d4:	492f      	ldr	r1, [pc, #188]	; (800d994 <tcp_input+0xb74>)
 800d8d6:	482e      	ldr	r0, [pc, #184]	; (800d990 <tcp_input+0xb70>)
 800d8d8:	f003 fe98 	bl	801160c <iprintf>
 800d8dc:	f7ff bbc5 	b.w	800d06a <tcp_input+0x24a>
        TCP_RMV_ACTIVE(pcb);
 800d8e0:	68ea      	ldr	r2, [r5, #12]
 800d8e2:	60da      	str	r2, [r3, #12]
 800d8e4:	e640      	b.n	800d568 <tcp_input+0x748>
          TCP_RMV_ACTIVE(pcb);
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	f43f ae3e 	beq.w	800d568 <tcp_input+0x748>
 800d8ec:	68da      	ldr	r2, [r3, #12]
 800d8ee:	42aa      	cmp	r2, r5
 800d8f0:	d0f6      	beq.n	800d8e0 <tcp_input+0xac0>
 800d8f2:	4613      	mov	r3, r2
 800d8f4:	e7f7      	b.n	800d8e6 <tcp_input+0xac6>
  } else if (flags & TCP_FIN) {
 800d8f6:	07d0      	lsls	r0, r2, #31
 800d8f8:	f57f ac5d 	bpl.w	800d1b6 <tcp_input+0x396>
    pcb->tmr = tcp_ticks;
 800d8fc:	4b26      	ldr	r3, [pc, #152]	; (800d998 <tcp_input+0xb78>)
 800d8fe:	681b      	ldr	r3, [r3, #0]
 800d900:	622b      	str	r3, [r5, #32]
 800d902:	e458      	b.n	800d1b6 <tcp_input+0x396>
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800d904:	429a      	cmp	r2, r3
 800d906:	bf88      	it	hi
 800d908:	b293      	uxthhi	r3, r2
 800d90a:	e7d8      	b.n	800d8be <tcp_input+0xa9e>
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800d90c:	2900      	cmp	r1, #0
 800d90e:	f47f af19 	bne.w	800d744 <tcp_input+0x924>
 800d912:	4b1d      	ldr	r3, [pc, #116]	; (800d988 <tcp_input+0xb68>)
 800d914:	f44f 724e 	mov.w	r2, #824	; 0x338
 800d918:	4920      	ldr	r1, [pc, #128]	; (800d99c <tcp_input+0xb7c>)
 800d91a:	481d      	ldr	r0, [pc, #116]	; (800d990 <tcp_input+0xb70>)
 800d91c:	f003 fe76 	bl	801160c <iprintf>
 800d920:	e710      	b.n	800d744 <tcp_input+0x924>
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d922:	e9cd 0301 	strd	r0, r3, [sp, #4]
 800d926:	9b05      	ldr	r3, [sp, #20]
 800d928:	881b      	ldrh	r3, [r3, #0]
 800d92a:	e722      	b.n	800d772 <tcp_input+0x952>
            if (err != ERR_ABRT) {
 800d92c:	300d      	adds	r0, #13
 800d92e:	f43f abf2 	beq.w	800d116 <tcp_input+0x2f6>
 800d932:	e741      	b.n	800d7b8 <tcp_input+0x998>
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800d934:	4b14      	ldr	r3, [pc, #80]	; (800d988 <tcp_input+0xb68>)
 800d936:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800d93a:	4919      	ldr	r1, [pc, #100]	; (800d9a0 <tcp_input+0xb80>)
 800d93c:	4814      	ldr	r0, [pc, #80]	; (800d990 <tcp_input+0xb70>)
 800d93e:	f003 fe65 	bl	801160c <iprintf>
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800d942:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 800d944:	699b      	ldr	r3, [r3, #24]
 800d946:	2b00      	cmp	r3, #0
 800d948:	d19d      	bne.n	800d886 <tcp_input+0xa66>
 800d94a:	e735      	b.n	800d7b8 <tcp_input+0x998>
          pcb->rtime = -1;
 800d94c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d950:	862b      	strh	r3, [r5, #48]	; 0x30
 800d952:	e6e2      	b.n	800d71a <tcp_input+0x8fa>
          rseg = pcb->unsent;
 800d954:	6eee      	ldr	r6, [r5, #108]	; 0x6c
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800d956:	b176      	cbz	r6, 800d976 <tcp_input+0xb56>
          pcb->unsent = rseg->next;
 800d958:	6833      	ldr	r3, [r6, #0]
 800d95a:	66eb      	str	r3, [r5, #108]	; 0x6c
 800d95c:	e6d2      	b.n	800d704 <tcp_input+0x8e4>
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800d95e:	4b0a      	ldr	r3, [pc, #40]	; (800d988 <tcp_input+0xb68>)
 800d960:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800d964:	490f      	ldr	r1, [pc, #60]	; (800d9a4 <tcp_input+0xb84>)
 800d966:	480a      	ldr	r0, [pc, #40]	; (800d990 <tcp_input+0xb70>)
 800d968:	f003 fe50 	bl	801160c <iprintf>
 800d96c:	e6bf      	b.n	800d6ee <tcp_input+0x8ce>
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800d96e:	429a      	cmp	r2, r3
 800d970:	bf88      	it	hi
 800d972:	b293      	uxthhi	r3, r2
 800d974:	e6b4      	b.n	800d6e0 <tcp_input+0x8c0>
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800d976:	4b04      	ldr	r3, [pc, #16]	; (800d988 <tcp_input+0xb68>)
 800d978:	f44f 725d 	mov.w	r2, #884	; 0x374
 800d97c:	490a      	ldr	r1, [pc, #40]	; (800d9a8 <tcp_input+0xb88>)
 800d97e:	4804      	ldr	r0, [pc, #16]	; (800d990 <tcp_input+0xb70>)
 800d980:	f003 fe44 	bl	801160c <iprintf>
 800d984:	e7e8      	b.n	800d958 <tcp_input+0xb38>
 800d986:	bf00      	nop
 800d988:	08014150 	.word	0x08014150
 800d98c:	0801442c 	.word	0x0801442c
 800d990:	080128dc 	.word	0x080128dc
 800d994:	08014458 	.word	0x08014458
 800d998:	24010588 	.word	0x24010588
 800d99c:	080144b4 	.word	0x080144b4
 800d9a0:	08014500 	.word	0x08014500
 800d9a4:	080144d4 	.word	0x080144d4
 800d9a8:	080144ec 	.word	0x080144ec

0800d9ac <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
  recv_flags |= TF_CLOSED;
 800d9ac:	4a02      	ldr	r2, [pc, #8]	; (800d9b8 <tcp_trigger_input_pcb_close+0xc>)
 800d9ae:	7813      	ldrb	r3, [r2, #0]
 800d9b0:	f043 0310 	orr.w	r3, r3, #16
 800d9b4:	7013      	strb	r3, [r2, #0]
}
 800d9b6:	4770      	bx	lr
 800d9b8:	240105b4 	.word	0x240105b4

0800d9bc <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 800d9bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d9c0:	9f08      	ldr	r7, [sp, #32]
 800d9c2:	4680      	mov	r8, r0
 800d9c4:	460d      	mov	r5, r1
 800d9c6:	4614      	mov	r4, r2
 800d9c8:	461e      	mov	r6, r3
 800d9ca:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
 800d9ce:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
  struct pbuf *p;
  u16_t alloc = length;

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800d9d2:	2f00      	cmp	r7, #0
 800d9d4:	d033      	beq.n	800da3e <tcp_pbuf_prealloc+0x82>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 800d9d6:	42a5      	cmp	r5, r4
 800d9d8:	d20e      	bcs.n	800d9f8 <tcp_pbuf_prealloc+0x3c>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800d9da:	f019 0f02 	tst.w	r9, #2
 800d9de:	d008      	beq.n	800d9f2 <tcp_pbuf_prealloc+0x36>
        (!(pcb->flags & TF_NODELAY) &&
         (!first_seg ||
          pcb->unsent != NULL ||
          pcb->unacked != NULL))) {
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800d9e0:	f205 51b7 	addw	r1, r5, #1463	; 0x5b7
 800d9e4:	f021 0103 	bic.w	r1, r1, #3
 800d9e8:	42a1      	cmp	r1, r4
 800d9ea:	bf28      	it	cs
 800d9ec:	4621      	movcs	r1, r4
 800d9ee:	b289      	uxth	r1, r1
 800d9f0:	e003      	b.n	800d9fa <tcp_pbuf_prealloc+0x3e>
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800d9f2:	8b7b      	ldrh	r3, [r7, #26]
 800d9f4:	065b      	lsls	r3, r3, #25
 800d9f6:	d518      	bpl.n	800da2a <tcp_pbuf_prealloc+0x6e>
 800d9f8:	4629      	mov	r1, r5
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800d9fa:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d9fe:	4640      	mov	r0, r8
 800da00:	f7fc fe80 	bl	800a704 <pbuf_alloc>
  if (p == NULL) {
 800da04:	4604      	mov	r4, r0
 800da06:	b168      	cbz	r0, 800da24 <tcp_pbuf_prealloc+0x68>
    return NULL;
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800da08:	6803      	ldr	r3, [r0, #0]
 800da0a:	b133      	cbz	r3, 800da1a <tcp_pbuf_prealloc+0x5e>
 800da0c:	4b0f      	ldr	r3, [pc, #60]	; (800da4c <tcp_pbuf_prealloc+0x90>)
 800da0e:	f240 120b 	movw	r2, #267	; 0x10b
 800da12:	490f      	ldr	r1, [pc, #60]	; (800da50 <tcp_pbuf_prealloc+0x94>)
 800da14:	480f      	ldr	r0, [pc, #60]	; (800da54 <tcp_pbuf_prealloc+0x98>)
 800da16:	f003 fdf9 	bl	801160c <iprintf>
  *oversize = p->len - length;
 800da1a:	8963      	ldrh	r3, [r4, #10]
 800da1c:	1b5b      	subs	r3, r3, r5
 800da1e:	8033      	strh	r3, [r6, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 800da20:	8125      	strh	r5, [r4, #8]
 800da22:	8165      	strh	r5, [r4, #10]
  return p;
}
 800da24:	4620      	mov	r0, r4
 800da26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        (!(pcb->flags & TF_NODELAY) &&
 800da2a:	f1ba 0f00 	cmp.w	sl, #0
 800da2e:	d0d7      	beq.n	800d9e0 <tcp_pbuf_prealloc+0x24>
         (!first_seg ||
 800da30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800da32:	2b00      	cmp	r3, #0
 800da34:	d1d4      	bne.n	800d9e0 <tcp_pbuf_prealloc+0x24>
          pcb->unsent != NULL ||
 800da36:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800da38:	2b00      	cmp	r3, #0
 800da3a:	d1d1      	bne.n	800d9e0 <tcp_pbuf_prealloc+0x24>
 800da3c:	e7dc      	b.n	800d9f8 <tcp_pbuf_prealloc+0x3c>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800da3e:	4b03      	ldr	r3, [pc, #12]	; (800da4c <tcp_pbuf_prealloc+0x90>)
 800da40:	22e9      	movs	r2, #233	; 0xe9
 800da42:	4905      	ldr	r1, [pc, #20]	; (800da58 <tcp_pbuf_prealloc+0x9c>)
 800da44:	4803      	ldr	r0, [pc, #12]	; (800da54 <tcp_pbuf_prealloc+0x98>)
 800da46:	f003 fde1 	bl	801160c <iprintf>
 800da4a:	e7c4      	b.n	800d9d6 <tcp_pbuf_prealloc+0x1a>
 800da4c:	0801453c 	.word	0x0801453c
 800da50:	08014590 	.word	0x08014590
 800da54:	080128dc 	.word	0x080128dc
 800da58:	08014570 	.word	0x08014570

0800da5c <tcp_create_segment>:
{
 800da5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800da60:	460e      	mov	r6, r1
 800da62:	f89d a020 	ldrb.w	sl, [sp, #32]
 800da66:	4690      	mov	r8, r2
 800da68:	4699      	mov	r9, r3
  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800da6a:	4607      	mov	r7, r0
 800da6c:	2800      	cmp	r0, #0
 800da6e:	d04a      	beq.n	800db06 <tcp_create_segment+0xaa>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800da70:	2e00      	cmp	r6, #0
 800da72:	d050      	beq.n	800db16 <tcp_create_segment+0xba>
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800da74:	ea4f 058a 	mov.w	r5, sl, lsl #2
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800da78:	2003      	movs	r0, #3
 800da7a:	f7fc f9c7 	bl	8009e0c <memp_malloc>
 800da7e:	4604      	mov	r4, r0
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800da80:	f005 0504 	and.w	r5, r5, #4
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800da84:	2800      	cmp	r0, #0
 800da86:	d054      	beq.n	800db32 <tcp_create_segment+0xd6>
  seg->flags = optflags;
 800da88:	f880 a00a 	strb.w	sl, [r0, #10]
  seg->next = NULL;
 800da8c:	2300      	movs	r3, #0
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800da8e:	8932      	ldrh	r2, [r6, #8]
 800da90:	fa1f fa85 	uxth.w	sl, r5
  seg->p = p;
 800da94:	6046      	str	r6, [r0, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800da96:	42aa      	cmp	r2, r5
  seg->next = NULL;
 800da98:	6003      	str	r3, [r0, #0]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800da9a:	d32c      	bcc.n	800daf6 <tcp_create_segment+0x9a>
  seg->len = p->tot_len - optlen;
 800da9c:	eba2 020a 	sub.w	r2, r2, sl
  if (pbuf_add_header(p, TCP_HLEN)) {
 800daa0:	4630      	mov	r0, r6
 800daa2:	2114      	movs	r1, #20
  seg->len = p->tot_len - optlen;
 800daa4:	8122      	strh	r2, [r4, #8]
  if (pbuf_add_header(p, TCP_HLEN)) {
 800daa6:	f7fc fd1d 	bl	800a4e4 <pbuf_add_header>
 800daaa:	4606      	mov	r6, r0
 800daac:	2800      	cmp	r0, #0
 800daae:	d139      	bne.n	800db24 <tcp_create_segment+0xc8>
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800dab0:	6863      	ldr	r3, [r4, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800dab2:	02ad      	lsls	r5, r5, #10
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800dab4:	8af8      	ldrh	r0, [r7, #22]
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800dab6:	f8d3 a004 	ldr.w	sl, [r3, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800daba:	f505 45a0 	add.w	r5, r5, #20480	; 0x5000
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800dabe:	f8c4 a00c 	str.w	sl, [r4, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800dac2:	f7fb fe0d 	bl	80096e0 <lwip_htons>
 800dac6:	f8aa 0000 	strh.w	r0, [sl]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800daca:	8b38      	ldrh	r0, [r7, #24]
 800dacc:	68e7      	ldr	r7, [r4, #12]
 800dace:	f7fb fe07 	bl	80096e0 <lwip_htons>
 800dad2:	8078      	strh	r0, [r7, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800dad4:	4648      	mov	r0, r9
 800dad6:	68e7      	ldr	r7, [r4, #12]
 800dad8:	f7fb fe06 	bl	80096e8 <lwip_htonl>
 800dadc:	6078      	str	r0, [r7, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800dade:	ea45 0008 	orr.w	r0, r5, r8
 800dae2:	68e7      	ldr	r7, [r4, #12]
 800dae4:	f7fb fdfc 	bl	80096e0 <lwip_htons>
  seg->tcphdr->urgp = 0;
 800dae8:	68e3      	ldr	r3, [r4, #12]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800daea:	81b8      	strh	r0, [r7, #12]
  seg->tcphdr->urgp = 0;
 800daec:	749e      	strb	r6, [r3, #18]
 800daee:	74de      	strb	r6, [r3, #19]
}
 800daf0:	4620      	mov	r0, r4
 800daf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800daf6:	22b0      	movs	r2, #176	; 0xb0
 800daf8:	4b10      	ldr	r3, [pc, #64]	; (800db3c <tcp_create_segment+0xe0>)
 800dafa:	4911      	ldr	r1, [pc, #68]	; (800db40 <tcp_create_segment+0xe4>)
 800dafc:	4811      	ldr	r0, [pc, #68]	; (800db44 <tcp_create_segment+0xe8>)
 800dafe:	f003 fd85 	bl	801160c <iprintf>
  seg->len = p->tot_len - optlen;
 800db02:	8932      	ldrh	r2, [r6, #8]
 800db04:	e7ca      	b.n	800da9c <tcp_create_segment+0x40>
  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800db06:	4b0d      	ldr	r3, [pc, #52]	; (800db3c <tcp_create_segment+0xe0>)
 800db08:	22a3      	movs	r2, #163	; 0xa3
 800db0a:	490f      	ldr	r1, [pc, #60]	; (800db48 <tcp_create_segment+0xec>)
 800db0c:	480d      	ldr	r0, [pc, #52]	; (800db44 <tcp_create_segment+0xe8>)
 800db0e:	f003 fd7d 	bl	801160c <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800db12:	2e00      	cmp	r6, #0
 800db14:	d1ae      	bne.n	800da74 <tcp_create_segment+0x18>
 800db16:	4b09      	ldr	r3, [pc, #36]	; (800db3c <tcp_create_segment+0xe0>)
 800db18:	22a4      	movs	r2, #164	; 0xa4
 800db1a:	490c      	ldr	r1, [pc, #48]	; (800db4c <tcp_create_segment+0xf0>)
 800db1c:	4809      	ldr	r0, [pc, #36]	; (800db44 <tcp_create_segment+0xe8>)
 800db1e:	f003 fd75 	bl	801160c <iprintf>
 800db22:	e7a7      	b.n	800da74 <tcp_create_segment+0x18>
    tcp_seg_free(seg);
 800db24:	4620      	mov	r0, r4
    return NULL;
 800db26:	2400      	movs	r4, #0
    tcp_seg_free(seg);
 800db28:	f7fd faf2 	bl	800b110 <tcp_seg_free>
}
 800db2c:	4620      	mov	r0, r4
 800db2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    pbuf_free(p);
 800db32:	4630      	mov	r0, r6
 800db34:	f7fc fd76 	bl	800a624 <pbuf_free>
    return NULL;
 800db38:	e7da      	b.n	800daf0 <tcp_create_segment+0x94>
 800db3a:	bf00      	nop
 800db3c:	0801453c 	.word	0x0801453c
 800db40:	080145e8 	.word	0x080145e8
 800db44:	080128dc 	.word	0x080128dc
 800db48:	080145a4 	.word	0x080145a4
 800db4c:	080145c4 	.word	0x080145c4

0800db50 <tcp_output_alloc_header_common.constprop.0>:
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800db50:	3114      	adds	r1, #20
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 800db52:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800db56:	b289      	uxth	r1, r1
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 800db58:	4606      	mov	r6, r0
 800db5a:	4617      	mov	r7, r2
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800db5c:	2022      	movs	r0, #34	; 0x22
 800db5e:	f44f 7220 	mov.w	r2, #640	; 0x280
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 800db62:	461c      	mov	r4, r3
 800db64:	f8bd a020 	ldrh.w	sl, [sp, #32]
 800db68:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
 800db6c:	f8bd 8028 	ldrh.w	r8, [sp, #40]	; 0x28
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800db70:	f7fc fdc8 	bl	800a704 <pbuf_alloc>
  if (p != NULL) {
 800db74:	4605      	mov	r5, r0
 800db76:	b300      	cbz	r0, 800dbba <tcp_output_alloc_header_common.constprop.0+0x6a>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800db78:	8943      	ldrh	r3, [r0, #10]
 800db7a:	2b13      	cmp	r3, #19
 800db7c:	d920      	bls.n	800dbc0 <tcp_output_alloc_header_common.constprop.0+0x70>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
    tcphdr->src = lwip_htons(src_port);
 800db7e:	4620      	mov	r0, r4
    tcphdr = (struct tcp_hdr *)p->payload;
 800db80:	686c      	ldr	r4, [r5, #4]
    tcphdr->src = lwip_htons(src_port);
 800db82:	f7fb fdad 	bl	80096e0 <lwip_htons>
 800db86:	8020      	strh	r0, [r4, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800db88:	4650      	mov	r0, sl
 800db8a:	f7fb fda9 	bl	80096e0 <lwip_htons>
    tcphdr->seqno = seqno_be;
 800db8e:	6067      	str	r7, [r4, #4]
    tcphdr->dest = lwip_htons(dst_port);
 800db90:	8060      	strh	r0, [r4, #2]
    tcphdr->ackno = lwip_htonl(ackno);
 800db92:	4630      	mov	r0, r6
 800db94:	f7fb fda8 	bl	80096e8 <lwip_htonl>
 800db98:	4603      	mov	r3, r0
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800db9a:	f449 40a0 	orr.w	r0, r9, #20480	; 0x5000
    tcphdr->ackno = lwip_htonl(ackno);
 800db9e:	60a3      	str	r3, [r4, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800dba0:	f7fb fd9e 	bl	80096e0 <lwip_htons>
 800dba4:	4603      	mov	r3, r0
    tcphdr->wnd = lwip_htons(wnd);
 800dba6:	4640      	mov	r0, r8
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800dba8:	81a3      	strh	r3, [r4, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800dbaa:	f7fb fd99 	bl	80096e0 <lwip_htons>
    tcphdr->chksum = 0;
 800dbae:	2300      	movs	r3, #0
    tcphdr->wnd = lwip_htons(wnd);
 800dbb0:	81e0      	strh	r0, [r4, #14]
    tcphdr->chksum = 0;
 800dbb2:	7423      	strb	r3, [r4, #16]
 800dbb4:	7463      	strb	r3, [r4, #17]
    tcphdr->urgp = 0;
 800dbb6:	74a3      	strb	r3, [r4, #18]
 800dbb8:	74e3      	strb	r3, [r4, #19]
  }
  return p;
}
 800dbba:	4628      	mov	r0, r5
 800dbbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800dbc0:	4b03      	ldr	r3, [pc, #12]	; (800dbd0 <tcp_output_alloc_header_common.constprop.0+0x80>)
 800dbc2:	f240 7223 	movw	r2, #1827	; 0x723
 800dbc6:	4903      	ldr	r1, [pc, #12]	; (800dbd4 <tcp_output_alloc_header_common.constprop.0+0x84>)
 800dbc8:	4803      	ldr	r0, [pc, #12]	; (800dbd8 <tcp_output_alloc_header_common.constprop.0+0x88>)
 800dbca:	f003 fd1f 	bl	801160c <iprintf>
 800dbce:	e7d6      	b.n	800db7e <tcp_output_alloc_header_common.constprop.0+0x2e>
 800dbd0:	0801453c 	.word	0x0801453c
 800dbd4:	08014600 	.word	0x08014600
 800dbd8:	080128dc 	.word	0x080128dc

0800dbdc <tcp_output_alloc_header.constprop.0>:
 * @param datalen length of tcp data to reserve in pbuf
 * @param seqno_be seqno in network byte order (big-endian)
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
 800dbdc:	b570      	push	{r4, r5, r6, lr}
 800dbde:	460d      	mov	r5, r1
 800dbe0:	b084      	sub	sp, #16
                        u32_t seqno_be /* already in network byte order */)
{
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800dbe2:	4604      	mov	r4, r0
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
 800dbe4:	4616      	mov	r6, r2
  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800dbe6:	b190      	cbz	r0, 800dc0e <tcp_output_alloc_header.constprop.0+0x32>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800dbe8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800dbea:	2210      	movs	r2, #16
 800dbec:	8b21      	ldrh	r1, [r4, #24]
 800dbee:	9302      	str	r3, [sp, #8]
 800dbf0:	e9cd 1200 	strd	r1, r2, [sp]
 800dbf4:	4632      	mov	r2, r6
 800dbf6:	4629      	mov	r1, r5
 800dbf8:	8ae3      	ldrh	r3, [r4, #22]
 800dbfa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800dbfc:	f7ff ffa8 	bl	800db50 <tcp_output_alloc_header_common.constprop.0>
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800dc00:	b118      	cbz	r0, 800dc0a <tcp_output_alloc_header.constprop.0+0x2e>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800dc02:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800dc04:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dc06:	4413      	add	r3, r2
 800dc08:	62e3      	str	r3, [r4, #44]	; 0x2c
  }
  return p;
}
 800dc0a:	b004      	add	sp, #16
 800dc0c:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800dc0e:	4b04      	ldr	r3, [pc, #16]	; (800dc20 <tcp_output_alloc_header.constprop.0+0x44>)
 800dc10:	f240 7242 	movw	r2, #1858	; 0x742
 800dc14:	4903      	ldr	r1, [pc, #12]	; (800dc24 <tcp_output_alloc_header.constprop.0+0x48>)
 800dc16:	4804      	ldr	r0, [pc, #16]	; (800dc28 <tcp_output_alloc_header.constprop.0+0x4c>)
 800dc18:	f003 fcf8 	bl	801160c <iprintf>
 800dc1c:	e7e4      	b.n	800dbe8 <tcp_output_alloc_header.constprop.0+0xc>
 800dc1e:	bf00      	nop
 800dc20:	0801453c 	.word	0x0801453c
 800dc24:	08014630 	.word	0x08014630
 800dc28:	080128dc 	.word	0x080128dc

0800dc2c <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800dc2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dc2e:	4604      	mov	r4, r0
 800dc30:	b085      	sub	sp, #20
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800dc32:	460d      	mov	r5, r1
{
 800dc34:	4617      	mov	r7, r2
 800dc36:	461e      	mov	r6, r3
  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800dc38:	b321      	cbz	r1, 800dc84 <tcp_output_control_segment+0x58>
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800dc3a:	b35c      	cbz	r4, 800dc94 <tcp_output_control_segment+0x68>
 800dc3c:	7a20      	ldrb	r0, [r4, #8]
 800dc3e:	b9a8      	cbnz	r0, 800dc6c <tcp_output_control_segment+0x40>
    return ip_route(src, dst);
 800dc40:	4630      	mov	r0, r6
 800dc42:	f002 f869 	bl	800fd18 <ip4_route>

  netif = tcp_route(pcb, src, dst);
  if (netif == NULL) {
 800dc46:	b1a8      	cbz	r0, 800dc74 <tcp_output_control_segment+0x48>
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800dc48:	7ae3      	ldrb	r3, [r4, #11]
      tos = pcb->tos;
 800dc4a:	7aa4      	ldrb	r4, [r4, #10]
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
      tos = 0;
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800dc4c:	9400      	str	r4, [sp, #0]
 800dc4e:	2406      	movs	r4, #6
 800dc50:	4632      	mov	r2, r6
 800dc52:	4639      	mov	r1, r7
 800dc54:	9002      	str	r0, [sp, #8]
 800dc56:	4628      	mov	r0, r5
 800dc58:	9401      	str	r4, [sp, #4]
 800dc5a:	f002 f9f3 	bl	8010044 <ip4_output_if>
 800dc5e:	4604      	mov	r4, r0
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800dc60:	4628      	mov	r0, r5
 800dc62:	f7fc fcdf 	bl	800a624 <pbuf_free>
  return err;
}
 800dc66:	4620      	mov	r0, r4
 800dc68:	b005      	add	sp, #20
 800dc6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return netif_get_by_index(pcb->netif_idx);
 800dc6c:	f7fc fb28 	bl	800a2c0 <netif_get_by_index>
  if (netif == NULL) {
 800dc70:	2800      	cmp	r0, #0
 800dc72:	d1e9      	bne.n	800dc48 <tcp_output_control_segment+0x1c>
    err = ERR_RTE;
 800dc74:	f06f 0403 	mvn.w	r4, #3
  pbuf_free(p);
 800dc78:	4628      	mov	r0, r5
 800dc7a:	f7fc fcd3 	bl	800a624 <pbuf_free>
}
 800dc7e:	4620      	mov	r0, r4
 800dc80:	b005      	add	sp, #20
 800dc82:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800dc84:	4b07      	ldr	r3, [pc, #28]	; (800dca4 <tcp_output_control_segment+0x78>)
 800dc86:	f240 7287 	movw	r2, #1927	; 0x787
 800dc8a:	4907      	ldr	r1, [pc, #28]	; (800dca8 <tcp_output_control_segment+0x7c>)
 800dc8c:	4807      	ldr	r0, [pc, #28]	; (800dcac <tcp_output_control_segment+0x80>)
 800dc8e:	f003 fcbd 	bl	801160c <iprintf>
 800dc92:	e7d2      	b.n	800dc3a <tcp_output_control_segment+0xe>
    return ip_route(src, dst);
 800dc94:	4630      	mov	r0, r6
 800dc96:	f002 f83f 	bl	800fd18 <ip4_route>
  if (netif == NULL) {
 800dc9a:	2800      	cmp	r0, #0
 800dc9c:	d0ea      	beq.n	800dc74 <tcp_output_control_segment+0x48>
      ttl = TCP_TTL;
 800dc9e:	23ff      	movs	r3, #255	; 0xff
 800dca0:	e7d4      	b.n	800dc4c <tcp_output_control_segment+0x20>
 800dca2:	bf00      	nop
 800dca4:	0801453c 	.word	0x0801453c
 800dca8:	08014658 	.word	0x08014658
 800dcac:	080128dc 	.word	0x080128dc

0800dcb0 <tcp_write>:
{
 800dcb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  u16_t oversize = 0;
 800dcb4:	2400      	movs	r4, #0
{
 800dcb6:	b091      	sub	sp, #68	; 0x44
 800dcb8:	9107      	str	r1, [sp, #28]
 800dcba:	9309      	str	r3, [sp, #36]	; 0x24
  u16_t oversize = 0;
 800dcbc:	f8ad 403e 	strh.w	r4, [sp, #62]	; 0x3e
  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800dcc0:	2800      	cmp	r0, #0
 800dcc2:	f000 8300 	beq.w	800e2c6 <tcp_write+0x616>
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 800dcc6:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 800dcca:	4692      	mov	sl, r2
 800dccc:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 800dcce:	4681      	mov	r9, r0
 800dcd0:	085b      	lsrs	r3, r3, #1
 800dcd2:	4293      	cmp	r3, r2
 800dcd4:	bf28      	it	cs
 800dcd6:	4613      	movcs	r3, r2
 800dcd8:	469b      	mov	fp, r3
  mss_local = mss_local ? mss_local : pcb->mss;
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	bf08      	it	eq
 800dcde:	4693      	moveq	fp, r2
  LWIP_ASSERT_CORE_LOCKED();
 800dce0:	f7f8 ffcc 	bl	8006c7c <sys_check_core_locking>
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800dce4:	9b07      	ldr	r3, [sp, #28]
 800dce6:	2b00      	cmp	r3, #0
 800dce8:	f000 82e1 	beq.w	800e2ae <tcp_write+0x5fe>
  if ((pcb->state != ESTABLISHED) &&
 800dcec:	f899 3014 	ldrb.w	r3, [r9, #20]
      (pcb->state != CLOSE_WAIT) &&
 800dcf0:	1e9a      	subs	r2, r3, #2
      (pcb->state != SYN_SENT) &&
 800dcf2:	2a02      	cmp	r2, #2
 800dcf4:	d902      	bls.n	800dcfc <tcp_write+0x4c>
 800dcf6:	2b07      	cmp	r3, #7
 800dcf8:	f040 829d 	bne.w	800e236 <tcp_write+0x586>
  } else if (len == 0) {
 800dcfc:	f1ba 0f00 	cmp.w	sl, #0
 800dd00:	f000 80ec 	beq.w	800dedc <tcp_write+0x22c>
  if (len > pcb->snd_buf) {
 800dd04:	f8b9 3064 	ldrh.w	r3, [r9, #100]	; 0x64
 800dd08:	4553      	cmp	r3, sl
 800dd0a:	f0c0 82b7 	bcc.w	800e27c <tcp_write+0x5cc>
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 800dd0e:	f8b9 6066 	ldrh.w	r6, [r9, #102]	; 0x66
 800dd12:	2e0f      	cmp	r6, #15
 800dd14:	f200 82b2 	bhi.w	800e27c <tcp_write+0x5cc>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800dd18:	f8d9 3070 	ldr.w	r3, [r9, #112]	; 0x70
  if (pcb->snd_queuelen != 0) {
 800dd1c:	2e00      	cmp	r6, #0
 800dd1e:	f000 80d3 	beq.w	800dec8 <tcp_write+0x218>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	f040 80dc 	bne.w	800dee0 <tcp_write+0x230>
 800dd28:	f8d9 806c 	ldr.w	r8, [r9, #108]	; 0x6c
 800dd2c:	f1b8 0f00 	cmp.w	r8, #0
 800dd30:	f000 8264 	beq.w	800e1fc <tcp_write+0x54c>
 800dd34:	4643      	mov	r3, r8
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800dd36:	461a      	mov	r2, r3
 800dd38:	681b      	ldr	r3, [r3, #0]
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	d1fb      	bne.n	800dd36 <tcp_write+0x86>
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800dd3e:	7a94      	ldrb	r4, [r2, #10]
 800dd40:	4698      	mov	r8, r3
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800dd42:	8913      	ldrh	r3, [r2, #8]
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800dd44:	00a4      	lsls	r4, r4, #2
 800dd46:	920b      	str	r2, [sp, #44]	; 0x2c
 800dd48:	f004 0404 	and.w	r4, r4, #4
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800dd4c:	191a      	adds	r2, r3, r4
 800dd4e:	4593      	cmp	fp, r2
 800dd50:	f2c0 81a7 	blt.w	800e0a2 <tcp_write+0x3f2>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800dd54:	ebab 0404 	sub.w	r4, fp, r4
 800dd58:	1ae4      	subs	r4, r4, r3
    oversize = pcb->unsent_oversize;
 800dd5a:	f8b9 3068 	ldrh.w	r3, [r9, #104]	; 0x68
    space = mss_local - (last_unsent->len + unsent_optlen);
 800dd5e:	b2a4      	uxth	r4, r4
    oversize = pcb->unsent_oversize;
 800dd60:	930a      	str	r3, [sp, #40]	; 0x28
 800dd62:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
    if (oversize > 0) {
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	f000 80cf 	beq.w	800df0a <tcp_write+0x25a>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800dd6c:	42a3      	cmp	r3, r4
 800dd6e:	f200 818b 	bhi.w	800e088 <tcp_write+0x3d8>
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800dd72:	45a2      	cmp	sl, r4
 800dd74:	4653      	mov	r3, sl
 800dd76:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dd78:	bf28      	it	cs
 800dd7a:	4623      	movcs	r3, r4
 800dd7c:	4293      	cmp	r3, r2
 800dd7e:	bf28      	it	cs
 800dd80:	4613      	movcs	r3, r2
      oversize -= oversize_used;
 800dd82:	1ad2      	subs	r2, r2, r3
      space -= oversize_used;
 800dd84:	1ae4      	subs	r4, r4, r3
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800dd86:	930a      	str	r3, [sp, #40]	; 0x28
      oversize -= oversize_used;
 800dd88:	b292      	uxth	r2, r2
      space -= oversize_used;
 800dd8a:	b2a4      	uxth	r4, r4
      oversize -= oversize_used;
 800dd8c:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800dd90:	2a00      	cmp	r2, #0
 800dd92:	f000 8184 	beq.w	800e09e <tcp_write+0x3ee>
 800dd96:	459a      	cmp	sl, r3
 800dd98:	f000 8181 	beq.w	800e09e <tcp_write+0x3ee>
 800dd9c:	4bb2      	ldr	r3, [pc, #712]	; (800e068 <tcp_write+0x3b8>)
 800dd9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800dda2:	49b2      	ldr	r1, [pc, #712]	; (800e06c <tcp_write+0x3bc>)
 800dda4:	48b2      	ldr	r0, [pc, #712]	; (800e070 <tcp_write+0x3c0>)
 800dda6:	f003 fc31 	bl	801160c <iprintf>
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800ddaa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800ddac:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800ddae:	459a      	cmp	sl, r3
 800ddb0:	f200 80b0 	bhi.w	800df14 <tcp_write+0x264>
  struct pbuf *concat_p = NULL;
 800ddb4:	2300      	movs	r3, #0
 800ddb6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800ddb8:	930c      	str	r3, [sp, #48]	; 0x30
  u16_t extendlen = 0;
 800ddba:	930d      	str	r3, [sp, #52]	; 0x34
  while (pos < len) {
 800ddbc:	45a2      	cmp	sl, r4
 800ddbe:	f240 80ee 	bls.w	800df9e <tcp_write+0x2ee>
 800ddc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ddc4:	f04f 0800 	mov.w	r8, #0
 800ddc8:	f003 0301 	and.w	r3, r3, #1
 800ddcc:	f8cd 8014 	str.w	r8, [sp, #20]
 800ddd0:	9308      	str	r3, [sp, #32]
 800ddd2:	4643      	mov	r3, r8
 800ddd4:	46d8      	mov	r8, fp
 800ddd6:	469b      	mov	fp, r3
 800ddd8:	e042      	b.n	800de60 <tcp_write+0x1b0>
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800ddda:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	f040 80f0 	bne.w	800dfc4 <tcp_write+0x314>
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800dde4:	2201      	movs	r2, #1
 800dde6:	4629      	mov	r1, r5
 800dde8:	2036      	movs	r0, #54	; 0x36
 800ddea:	f7fc fc8b 	bl	800a704 <pbuf_alloc>
 800ddee:	2800      	cmp	r0, #0
 800ddf0:	f000 8100 	beq.w	800dff4 <tcp_write+0x344>
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800ddf4:	9a07      	ldr	r2, [sp, #28]
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800ddf6:	2100      	movs	r1, #0
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800ddf8:	9006      	str	r0, [sp, #24]
 800ddfa:	4422      	add	r2, r4
 800ddfc:	6042      	str	r2, [r0, #4]
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800ddfe:	f44f 7220 	mov.w	r2, #640	; 0x280
 800de02:	2036      	movs	r0, #54	; 0x36
 800de04:	f7fc fc7e 	bl	800a704 <pbuf_alloc>
 800de08:	9b06      	ldr	r3, [sp, #24]
 800de0a:	4607      	mov	r7, r0
 800de0c:	2800      	cmp	r0, #0
 800de0e:	f000 8196 	beq.w	800e13e <tcp_write+0x48e>
      pbuf_cat(p/*header*/, p2/*data*/);
 800de12:	4619      	mov	r1, r3
 800de14:	f7fc fda6 	bl	800a964 <pbuf_cat>
    queuelen += pbuf_clen(p);
 800de18:	4638      	mov	r0, r7
 800de1a:	f7fc fd79 	bl	800a910 <pbuf_clen>
 800de1e:	4430      	add	r0, r6
 800de20:	b286      	uxth	r6, r0
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800de22:	2e10      	cmp	r6, #16
 800de24:	d84a      	bhi.n	800debc <tcp_write+0x20c>
    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800de26:	f8d9 305c 	ldr.w	r3, [r9, #92]	; 0x5c
 800de2a:	2200      	movs	r2, #0
 800de2c:	4639      	mov	r1, r7
 800de2e:	4648      	mov	r0, r9
 800de30:	4423      	add	r3, r4
 800de32:	9200      	str	r2, [sp, #0]
 800de34:	f7ff fe12 	bl	800da5c <tcp_create_segment>
 800de38:	4607      	mov	r7, r0
 800de3a:	2800      	cmp	r0, #0
 800de3c:	f000 80da 	beq.w	800dff4 <tcp_write+0x344>
    if (queue == NULL) {
 800de40:	9b05      	ldr	r3, [sp, #20]
 800de42:	2b00      	cmp	r3, #0
 800de44:	f000 80a3 	beq.w	800df8e <tcp_write+0x2de>
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800de48:	f1bb 0f00 	cmp.w	fp, #0
 800de4c:	f000 80c2 	beq.w	800dfd4 <tcp_write+0x324>
    pos += seglen;
 800de50:	4425      	add	r5, r4
      prev_seg->next = seg;
 800de52:	f8cb 7000 	str.w	r7, [fp]
    pos += seglen;
 800de56:	b2ac      	uxth	r4, r5
  while (pos < len) {
 800de58:	45a2      	cmp	sl, r4
 800de5a:	f240 809e 	bls.w	800df9a <tcp_write+0x2ea>
 800de5e:	46bb      	mov	fp, r7
    u16_t left = len - pos;
 800de60:	ebaa 0504 	sub.w	r5, sl, r4
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800de64:	9b08      	ldr	r3, [sp, #32]
    u16_t seglen = LWIP_MIN(left, max_len);
 800de66:	b2ad      	uxth	r5, r5
 800de68:	4545      	cmp	r5, r8
 800de6a:	bf28      	it	cs
 800de6c:	4645      	movcs	r5, r8
 800de6e:	b2ad      	uxth	r5, r5
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800de70:	2b00      	cmp	r3, #0
 800de72:	d0b2      	beq.n	800ddda <tcp_write+0x12a>
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800de74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800de76:	4642      	mov	r2, r8
 800de78:	4629      	mov	r1, r5
 800de7a:	2036      	movs	r0, #54	; 0x36
 800de7c:	e9cd 9300 	strd	r9, r3, [sp]
 800de80:	9b05      	ldr	r3, [sp, #20]
 800de82:	fab3 f383 	clz	r3, r3
 800de86:	095b      	lsrs	r3, r3, #5
 800de88:	9302      	str	r3, [sp, #8]
 800de8a:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 800de8e:	f7ff fd95 	bl	800d9bc <tcp_pbuf_prealloc>
 800de92:	4607      	mov	r7, r0
 800de94:	2800      	cmp	r0, #0
 800de96:	f000 80ad 	beq.w	800dff4 <tcp_write+0x344>
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800de9a:	8943      	ldrh	r3, [r0, #10]
 800de9c:	42ab      	cmp	r3, r5
 800de9e:	f0c0 80a1 	bcc.w	800dfe4 <tcp_write+0x334>
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 800dea2:	9b07      	ldr	r3, [sp, #28]
 800dea4:	462a      	mov	r2, r5
 800dea6:	6878      	ldr	r0, [r7, #4]
 800dea8:	1919      	adds	r1, r3, r4
 800deaa:	f003 fe37 	bl	8011b1c <memcpy>
    queuelen += pbuf_clen(p);
 800deae:	4638      	mov	r0, r7
 800deb0:	f7fc fd2e 	bl	800a910 <pbuf_clen>
 800deb4:	4430      	add	r0, r6
 800deb6:	b286      	uxth	r6, r0
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800deb8:	2e10      	cmp	r6, #16
 800deba:	d9b4      	bls.n	800de26 <tcp_write+0x176>
      pbuf_free(p);
 800debc:	4638      	mov	r0, r7
 800debe:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800dec2:	f7fc fbaf 	bl	800a624 <pbuf_free>
      goto memerr;
 800dec6:	e097      	b.n	800dff8 <tcp_write+0x348>
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800dec8:	2b00      	cmp	r3, #0
 800deca:	f000 80b6 	beq.w	800e03a <tcp_write+0x38a>
 800dece:	4b66      	ldr	r3, [pc, #408]	; (800e068 <tcp_write+0x3b8>)
 800ded0:	f44f 72ac 	mov.w	r2, #344	; 0x158
 800ded4:	4967      	ldr	r1, [pc, #412]	; (800e074 <tcp_write+0x3c4>)
 800ded6:	4866      	ldr	r0, [pc, #408]	; (800e070 <tcp_write+0x3c0>)
 800ded8:	f003 fb98 	bl	801160c <iprintf>
  queuelen = pcb->snd_queuelen;
 800dedc:	f8b9 6066 	ldrh.w	r6, [r9, #102]	; 0x66
  if (pcb->unsent != NULL) {
 800dee0:	f8d9 806c 	ldr.w	r8, [r9, #108]	; 0x6c
 800dee4:	f1b8 0f00 	cmp.w	r8, #0
 800dee8:	f47f af24 	bne.w	800dd34 <tcp_write+0x84>
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800deec:	f8b9 3068 	ldrh.w	r3, [r9, #104]	; 0x68
 800def0:	2b00      	cmp	r3, #0
 800def2:	f040 80ac 	bne.w	800e04e <tcp_write+0x39e>
  while (pos < len) {
 800def6:	f1ba 0f00 	cmp.w	sl, #0
 800defa:	f000 81c8 	beq.w	800e28e <tcp_write+0x5de>
 800defe:	2400      	movs	r4, #0
 800df00:	940d      	str	r4, [sp, #52]	; 0x34
 800df02:	940c      	str	r4, [sp, #48]	; 0x30
 800df04:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
 800df08:	e75b      	b.n	800ddc2 <tcp_write+0x112>
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800df0a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800df0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800df0e:	459a      	cmp	sl, r3
 800df10:	f67f af50 	bls.w	800ddb4 <tcp_write+0x104>
 800df14:	2c00      	cmp	r4, #0
 800df16:	f43f af4d 	beq.w	800ddb4 <tcp_write+0x104>
 800df1a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800df1c:	8912      	ldrh	r2, [r2, #8]
 800df1e:	920d      	str	r2, [sp, #52]	; 0x34
 800df20:	2a00      	cmp	r2, #0
 800df22:	f000 809c 	beq.w	800e05e <tcp_write+0x3ae>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800df26:	ebaa 0703 	sub.w	r7, sl, r3
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800df2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
      u16_t seglen = LWIP_MIN(space, len - pos);
 800df2c:	42a7      	cmp	r7, r4
 800df2e:	bfa8      	it	ge
 800df30:	4627      	movge	r7, r4
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800df32:	07da      	lsls	r2, r3, #31
      u16_t seglen = LWIP_MIN(space, len - pos);
 800df34:	b2bd      	uxth	r5, r7
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800df36:	f100 8188 	bmi.w	800e24a <tcp_write+0x59a>
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800df3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800df3c:	685a      	ldr	r2, [r3, #4]
 800df3e:	4613      	mov	r3, r2
 800df40:	6812      	ldr	r2, [r2, #0]
 800df42:	2a00      	cmp	r2, #0
 800df44:	d1fb      	bne.n	800df3e <tcp_write+0x28e>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800df46:	920c      	str	r2, [sp, #48]	; 0x30
 800df48:	7b1a      	ldrb	r2, [r3, #12]
 800df4a:	f012 0fc0 	tst.w	r2, #192	; 0xc0
 800df4e:	d106      	bne.n	800df5e <tcp_write+0x2ae>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800df50:	895a      	ldrh	r2, [r3, #10]
 800df52:	685b      	ldr	r3, [r3, #4]
 800df54:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800df56:	9a07      	ldr	r2, [sp, #28]
 800df58:	429a      	cmp	r2, r3
 800df5a:	f000 8168 	beq.w	800e22e <tcp_write+0x57e>
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800df5e:	2201      	movs	r2, #1
 800df60:	4629      	mov	r1, r5
 800df62:	2000      	movs	r0, #0
 800df64:	f7fc fbce 	bl	800a704 <pbuf_alloc>
 800df68:	900c      	str	r0, [sp, #48]	; 0x30
 800df6a:	2800      	cmp	r0, #0
 800df6c:	f000 813f 	beq.w	800e1ee <tcp_write+0x53e>
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 800df70:	9b07      	ldr	r3, [sp, #28]
 800df72:	990a      	ldr	r1, [sp, #40]	; 0x28
 800df74:	440b      	add	r3, r1
 800df76:	6043      	str	r3, [r0, #4]
          queuelen += pbuf_clen(concat_p);
 800df78:	f7fc fcca 	bl	800a910 <pbuf_clen>
 800df7c:	4430      	add	r0, r6
  u16_t extendlen = 0;
 800df7e:	2300      	movs	r3, #0
          queuelen += pbuf_clen(concat_p);
 800df80:	b286      	uxth	r6, r0
  u16_t extendlen = 0;
 800df82:	930d      	str	r3, [sp, #52]	; 0x34
      pos += seglen;
 800df84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800df86:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800df88:	18ec      	adds	r4, r5, r3
 800df8a:	b2a4      	uxth	r4, r4
 800df8c:	e716      	b.n	800ddbc <tcp_write+0x10c>
    pos += seglen;
 800df8e:	4425      	add	r5, r4
 800df90:	9005      	str	r0, [sp, #20]
 800df92:	b2ac      	uxth	r4, r5
  while (pos < len) {
 800df94:	45a2      	cmp	sl, r4
 800df96:	f63f af62 	bhi.w	800de5e <tcp_write+0x1ae>
 800df9a:	f8dd 8014 	ldr.w	r8, [sp, #20]
  if (oversize_used > 0) {
 800df9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	f000 80dc 	beq.w	800e15e <tcp_write+0x4ae>
    for (p = last_unsent->p; p; p = p->next) {
 800dfa6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800dfa8:	6854      	ldr	r4, [r2, #4]
 800dfaa:	2c00      	cmp	r4, #0
 800dfac:	f000 8091 	beq.w	800e0d2 <tcp_write+0x422>
 800dfb0:	469b      	mov	fp, r3
 800dfb2:	9d07      	ldr	r5, [sp, #28]
      p->tot_len += oversize_used;
 800dfb4:	8923      	ldrh	r3, [r4, #8]
      if (p->next == NULL) {
 800dfb6:	6822      	ldr	r2, [r4, #0]
      p->tot_len += oversize_used;
 800dfb8:	445b      	add	r3, fp
 800dfba:	8123      	strh	r3, [r4, #8]
      if (p->next == NULL) {
 800dfbc:	2a00      	cmp	r2, #0
 800dfbe:	d07a      	beq.n	800e0b6 <tcp_write+0x406>
      pos += seglen;
 800dfc0:	4614      	mov	r4, r2
 800dfc2:	e7f7      	b.n	800dfb4 <tcp_write+0x304>
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800dfc4:	4b28      	ldr	r3, [pc, #160]	; (800e068 <tcp_write+0x3b8>)
 800dfc6:	f240 2271 	movw	r2, #625	; 0x271
 800dfca:	492b      	ldr	r1, [pc, #172]	; (800e078 <tcp_write+0x3c8>)
 800dfcc:	4828      	ldr	r0, [pc, #160]	; (800e070 <tcp_write+0x3c0>)
 800dfce:	f003 fb1d 	bl	801160c <iprintf>
 800dfd2:	e707      	b.n	800dde4 <tcp_write+0x134>
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800dfd4:	4b24      	ldr	r3, [pc, #144]	; (800e068 <tcp_write+0x3b8>)
 800dfd6:	f240 22ab 	movw	r2, #683	; 0x2ab
 800dfda:	4928      	ldr	r1, [pc, #160]	; (800e07c <tcp_write+0x3cc>)
 800dfdc:	4824      	ldr	r0, [pc, #144]	; (800e070 <tcp_write+0x3c0>)
 800dfde:	f003 fb15 	bl	801160c <iprintf>
 800dfe2:	e735      	b.n	800de50 <tcp_write+0x1a0>
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800dfe4:	4b20      	ldr	r3, [pc, #128]	; (800e068 <tcp_write+0x3b8>)
 800dfe6:	f240 2266 	movw	r2, #614	; 0x266
 800dfea:	4925      	ldr	r1, [pc, #148]	; (800e080 <tcp_write+0x3d0>)
 800dfec:	4820      	ldr	r0, [pc, #128]	; (800e070 <tcp_write+0x3c0>)
 800dfee:	f003 fb0d 	bl	801160c <iprintf>
 800dff2:	e756      	b.n	800dea2 <tcp_write+0x1f2>
 800dff4:	f8dd 8014 	ldr.w	r8, [sp, #20]
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800dff8:	f8b9 301a 	ldrh.w	r3, [r9, #26]
 800dffc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e000:	f8a9 301a 	strh.w	r3, [r9, #26]
  if (concat_p != NULL) {
 800e004:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e006:	b113      	cbz	r3, 800e00e <tcp_write+0x35e>
    pbuf_free(concat_p);
 800e008:	4618      	mov	r0, r3
 800e00a:	f7fc fb0b 	bl	800a624 <pbuf_free>
  if (queue != NULL) {
 800e00e:	f1b8 0f00 	cmp.w	r8, #0
 800e012:	d002      	beq.n	800e01a <tcp_write+0x36a>
    tcp_segs_free(queue);
 800e014:	4640      	mov	r0, r8
 800e016:	f7fd f869 	bl	800b0ec <tcp_segs_free>
  if (pcb->snd_queuelen != 0) {
 800e01a:	f8b9 3066 	ldrh.w	r3, [r9, #102]	; 0x66
 800e01e:	b13b      	cbz	r3, 800e030 <tcp_write+0x380>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800e020:	f8d9 3070 	ldr.w	r3, [r9, #112]	; 0x70
 800e024:	b923      	cbnz	r3, 800e030 <tcp_write+0x380>
 800e026:	f8d9 306c 	ldr.w	r3, [r9, #108]	; 0x6c
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	f000 808d 	beq.w	800e14a <tcp_write+0x49a>
  return ERR_MEM;
 800e030:	f04f 30ff 	mov.w	r0, #4294967295
}
 800e034:	b011      	add	sp, #68	; 0x44
 800e036:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800e03a:	f8d9 306c 	ldr.w	r3, [r9, #108]	; 0x6c
 800e03e:	2b00      	cmp	r3, #0
 800e040:	f47f af45 	bne.w	800dece <tcp_write+0x21e>
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800e044:	f8b9 3068 	ldrh.w	r3, [r9, #104]	; 0x68
 800e048:	2b00      	cmp	r3, #0
 800e04a:	f43f af58 	beq.w	800defe <tcp_write+0x24e>
 800e04e:	4b06      	ldr	r3, [pc, #24]	; (800e068 <tcp_write+0x3b8>)
 800e050:	f240 224a 	movw	r2, #586	; 0x24a
 800e054:	490b      	ldr	r1, [pc, #44]	; (800e084 <tcp_write+0x3d4>)
 800e056:	4806      	ldr	r0, [pc, #24]	; (800e070 <tcp_write+0x3c0>)
 800e058:	f003 fad8 	bl	801160c <iprintf>
 800e05c:	e74b      	b.n	800def6 <tcp_write+0x246>
  struct pbuf *concat_p = NULL;
 800e05e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e060:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800e062:	930c      	str	r3, [sp, #48]	; 0x30
 800e064:	e6ad      	b.n	800ddc2 <tcp_write+0x112>
 800e066:	bf00      	nop
 800e068:	0801453c 	.word	0x0801453c
 800e06c:	08014778 	.word	0x08014778
 800e070:	080128dc 	.word	0x080128dc
 800e074:	0801470c 	.word	0x0801470c
 800e078:	08014834 	.word	0x08014834
 800e07c:	08014844 	.word	0x08014844
 800e080:	080147f4 	.word	0x080147f4
 800e084:	080147c4 	.word	0x080147c4
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800e088:	4b94      	ldr	r3, [pc, #592]	; (800e2dc <tcp_write+0x62c>)
 800e08a:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 800e08e:	4994      	ldr	r1, [pc, #592]	; (800e2e0 <tcp_write+0x630>)
 800e090:	4894      	ldr	r0, [pc, #592]	; (800e2e4 <tcp_write+0x634>)
 800e092:	f003 fabb 	bl	801160c <iprintf>
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800e096:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 800e09a:	930a      	str	r3, [sp, #40]	; 0x28
 800e09c:	e669      	b.n	800dd72 <tcp_write+0xc2>
 800e09e:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800e0a0:	e734      	b.n	800df0c <tcp_write+0x25c>
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800e0a2:	4b8e      	ldr	r3, [pc, #568]	; (800e2dc <tcp_write+0x62c>)
 800e0a4:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800e0a8:	498f      	ldr	r1, [pc, #572]	; (800e2e8 <tcp_write+0x638>)
 800e0aa:	488e      	ldr	r0, [pc, #568]	; (800e2e4 <tcp_write+0x634>)
 800e0ac:	f003 faae 	bl	801160c <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800e0b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e0b2:	891b      	ldrh	r3, [r3, #8]
 800e0b4:	e64e      	b.n	800dd54 <tcp_write+0xa4>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800e0b6:	8963      	ldrh	r3, [r4, #10]
 800e0b8:	465a      	mov	r2, fp
 800e0ba:	6860      	ldr	r0, [r4, #4]
 800e0bc:	4629      	mov	r1, r5
 800e0be:	4418      	add	r0, r3
 800e0c0:	f003 fd2c 	bl	8011b1c <memcpy>
        p->len += oversize_used;
 800e0c4:	8963      	ldrh	r3, [r4, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800e0c6:	6822      	ldr	r2, [r4, #0]
        p->len += oversize_used;
 800e0c8:	445b      	add	r3, fp
 800e0ca:	8163      	strh	r3, [r4, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800e0cc:	2a00      	cmp	r2, #0
 800e0ce:	f47f af77 	bne.w	800dfc0 <tcp_write+0x310>
    last_unsent->len += oversize_used;
 800e0d2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e0d4:	990a      	ldr	r1, [sp, #40]	; 0x28
 800e0d6:	8913      	ldrh	r3, [r2, #8]
 800e0d8:	4419      	add	r1, r3
  pcb->unsent_oversize = oversize;
 800e0da:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
    last_unsent->len += oversize_used;
 800e0de:	8111      	strh	r1, [r2, #8]
  pcb->unsent_oversize = oversize;
 800e0e0:	f8a9 3068 	strh.w	r3, [r9, #104]	; 0x68
  if (concat_p != NULL) {
 800e0e4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	d061      	beq.n	800e1ae <tcp_write+0x4fe>
    pbuf_cat(last_unsent->p, concat_p);
 800e0ea:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800e0ec:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e0ee:	6860      	ldr	r0, [r4, #4]
 800e0f0:	4629      	mov	r1, r5
 800e0f2:	f7fc fc37 	bl	800a964 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800e0f6:	892a      	ldrh	r2, [r5, #8]
 800e0f8:	8923      	ldrh	r3, [r4, #8]
 800e0fa:	4413      	add	r3, r2
 800e0fc:	8123      	strh	r3, [r4, #8]
    last_unsent->next = queue;
 800e0fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e100:	f8c3 8000 	str.w	r8, [r3]
  pcb->snd_lbb += len;
 800e104:	f8d9 305c 	ldr.w	r3, [r9, #92]	; 0x5c
  pcb->snd_queuelen = queuelen;
 800e108:	f8a9 6066 	strh.w	r6, [r9, #102]	; 0x66
  pcb->snd_lbb += len;
 800e10c:	4453      	add	r3, sl
 800e10e:	f8c9 305c 	str.w	r3, [r9, #92]	; 0x5c
  pcb->snd_buf -= len;
 800e112:	f8b9 3064 	ldrh.w	r3, [r9, #100]	; 0x64
 800e116:	eba3 030a 	sub.w	r3, r3, sl
 800e11a:	f8a9 3064 	strh.w	r3, [r9, #100]	; 0x64
  if (pcb->snd_queuelen != 0) {
 800e11e:	b11e      	cbz	r6, 800e128 <tcp_write+0x478>
    LWIP_ASSERT("tcp_write: valid queue length",
 800e120:	f8d9 3070 	ldr.w	r3, [r9, #112]	; 0x70
 800e124:	2b00      	cmp	r3, #0
 800e126:	d036      	beq.n	800e196 <tcp_write+0x4e6>
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 800e128:	b12f      	cbz	r7, 800e136 <tcp_write+0x486>
 800e12a:	68fb      	ldr	r3, [r7, #12]
 800e12c:	b11b      	cbz	r3, 800e136 <tcp_write+0x486>
 800e12e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e130:	f012 0502 	ands.w	r5, r2, #2
 800e134:	d025      	beq.n	800e182 <tcp_write+0x4d2>
  return ERR_OK;
 800e136:	2000      	movs	r0, #0
}
 800e138:	b011      	add	sp, #68	; 0x44
 800e13a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        pbuf_free(p2);
 800e13e:	4618      	mov	r0, r3
 800e140:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800e144:	f7fc fa6e 	bl	800a624 <pbuf_free>
        goto memerr;
 800e148:	e756      	b.n	800dff8 <tcp_write+0x348>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800e14a:	4b64      	ldr	r3, [pc, #400]	; (800e2dc <tcp_write+0x62c>)
 800e14c:	f240 3227 	movw	r2, #807	; 0x327
 800e150:	4966      	ldr	r1, [pc, #408]	; (800e2ec <tcp_write+0x63c>)
 800e152:	4864      	ldr	r0, [pc, #400]	; (800e2e4 <tcp_write+0x634>)
 800e154:	f003 fa5a 	bl	801160c <iprintf>
  return ERR_MEM;
 800e158:	f04f 30ff 	mov.w	r0, #4294967295
 800e15c:	e76a      	b.n	800e034 <tcp_write+0x384>
  pcb->unsent_oversize = oversize;
 800e15e:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 800e162:	f8a9 3068 	strh.w	r3, [r9, #104]	; 0x68
  if (concat_p != NULL) {
 800e166:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e168:	2b00      	cmp	r3, #0
 800e16a:	d051      	beq.n	800e210 <tcp_write+0x560>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800e16c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d1bb      	bne.n	800e0ea <tcp_write+0x43a>
 800e172:	4b5a      	ldr	r3, [pc, #360]	; (800e2dc <tcp_write+0x62c>)
 800e174:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 800e178:	495d      	ldr	r1, [pc, #372]	; (800e2f0 <tcp_write+0x640>)
 800e17a:	485a      	ldr	r0, [pc, #360]	; (800e2e4 <tcp_write+0x634>)
 800e17c:	f003 fa46 	bl	801160c <iprintf>
 800e180:	e7b3      	b.n	800e0ea <tcp_write+0x43a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800e182:	2008      	movs	r0, #8
 800e184:	899c      	ldrh	r4, [r3, #12]
 800e186:	f7fb faab 	bl	80096e0 <lwip_htons>
 800e18a:	4602      	mov	r2, r0
 800e18c:	68fb      	ldr	r3, [r7, #12]
  return ERR_OK;
 800e18e:	4628      	mov	r0, r5
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800e190:	4314      	orrs	r4, r2
 800e192:	819c      	strh	r4, [r3, #12]
 800e194:	e74e      	b.n	800e034 <tcp_write+0x384>
    LWIP_ASSERT("tcp_write: valid queue length",
 800e196:	f8d9 306c 	ldr.w	r3, [r9, #108]	; 0x6c
 800e19a:	2b00      	cmp	r3, #0
 800e19c:	d1c4      	bne.n	800e128 <tcp_write+0x478>
 800e19e:	4b4f      	ldr	r3, [pc, #316]	; (800e2dc <tcp_write+0x62c>)
 800e1a0:	f240 3212 	movw	r2, #786	; 0x312
 800e1a4:	4951      	ldr	r1, [pc, #324]	; (800e2ec <tcp_write+0x63c>)
 800e1a6:	484f      	ldr	r0, [pc, #316]	; (800e2e4 <tcp_write+0x634>)
 800e1a8:	f003 fa30 	bl	801160c <iprintf>
 800e1ac:	e7bc      	b.n	800e128 <tcp_write+0x478>
  } else if (extendlen > 0) {
 800e1ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	d0a4      	beq.n	800e0fe <tcp_write+0x44e>
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800e1b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e1b6:	6859      	ldr	r1, [r3, #4]
 800e1b8:	2900      	cmp	r1, #0
 800e1ba:	d02e      	beq.n	800e21a <tcp_write+0x56a>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800e1bc:	680a      	ldr	r2, [r1, #0]
 800e1be:	2a00      	cmp	r2, #0
 800e1c0:	d07f      	beq.n	800e2c2 <tcp_write+0x612>
 800e1c2:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800e1c4:	e000      	b.n	800e1c8 <tcp_write+0x518>
 800e1c6:	4602      	mov	r2, r0
      p->tot_len += extendlen;
 800e1c8:	890b      	ldrh	r3, [r1, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800e1ca:	6810      	ldr	r0, [r2, #0]
      p->tot_len += extendlen;
 800e1cc:	4423      	add	r3, r4
 800e1ce:	810b      	strh	r3, [r1, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800e1d0:	4611      	mov	r1, r2
 800e1d2:	2800      	cmp	r0, #0
 800e1d4:	d1f7      	bne.n	800e1c6 <tcp_write+0x516>
    p->tot_len += extendlen;
 800e1d6:	8913      	ldrh	r3, [r2, #8]
 800e1d8:	990d      	ldr	r1, [sp, #52]	; 0x34
 800e1da:	440b      	add	r3, r1
 800e1dc:	8113      	strh	r3, [r2, #8]
    p->len += extendlen;
 800e1de:	8953      	ldrh	r3, [r2, #10]
 800e1e0:	440b      	add	r3, r1
 800e1e2:	8153      	strh	r3, [r2, #10]
    last_unsent->len += extendlen;
 800e1e4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e1e6:	8913      	ldrh	r3, [r2, #8]
 800e1e8:	440b      	add	r3, r1
 800e1ea:	8113      	strh	r3, [r2, #8]
 800e1ec:	e787      	b.n	800e0fe <tcp_write+0x44e>
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800e1ee:	f8b9 301a 	ldrh.w	r3, [r9, #26]
 800e1f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e1f6:	f8a9 301a 	strh.w	r3, [r9, #26]
  if (concat_p != NULL) {
 800e1fa:	e70e      	b.n	800e01a <tcp_write+0x36a>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800e1fc:	4b37      	ldr	r3, [pc, #220]	; (800e2dc <tcp_write+0x62c>)
 800e1fe:	f240 1255 	movw	r2, #341	; 0x155
 800e202:	493c      	ldr	r1, [pc, #240]	; (800e2f4 <tcp_write+0x644>)
 800e204:	4837      	ldr	r0, [pc, #220]	; (800e2e4 <tcp_write+0x634>)
 800e206:	f003 fa01 	bl	801160c <iprintf>
  queuelen = pcb->snd_queuelen;
 800e20a:	f8b9 6066 	ldrh.w	r6, [r9, #102]	; 0x66
 800e20e:	e667      	b.n	800dee0 <tcp_write+0x230>
  } else if (extendlen > 0) {
 800e210:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e212:	b19b      	cbz	r3, 800e23c <tcp_write+0x58c>
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800e214:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e216:	2b00      	cmp	r3, #0
 800e218:	d1cc      	bne.n	800e1b4 <tcp_write+0x504>
 800e21a:	4b30      	ldr	r3, [pc, #192]	; (800e2dc <tcp_write+0x62c>)
 800e21c:	f240 22e6 	movw	r2, #742	; 0x2e6
 800e220:	4935      	ldr	r1, [pc, #212]	; (800e2f8 <tcp_write+0x648>)
 800e222:	4830      	ldr	r0, [pc, #192]	; (800e2e4 <tcp_write+0x634>)
 800e224:	f003 f9f2 	bl	801160c <iprintf>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800e228:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e22a:	6859      	ldr	r1, [r3, #4]
 800e22c:	e7c6      	b.n	800e1bc <tcp_write+0x50c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800e22e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e230:	bba3      	cbnz	r3, 800e29c <tcp_write+0x5ec>
          extendlen = seglen;
 800e232:	950d      	str	r5, [sp, #52]	; 0x34
 800e234:	e6a6      	b.n	800df84 <tcp_write+0x2d4>
    return ERR_CONN;
 800e236:	f06f 000a 	mvn.w	r0, #10
 800e23a:	e6fb      	b.n	800e034 <tcp_write+0x384>
  if (last_unsent == NULL) {
 800e23c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e23e:	2b00      	cmp	r3, #0
 800e240:	f47f af5d 	bne.w	800e0fe <tcp_write+0x44e>
    pcb->unsent = queue;
 800e244:	f8c9 806c 	str.w	r8, [r9, #108]	; 0x6c
 800e248:	e75c      	b.n	800e104 <tcp_write+0x454>
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800e24a:	e9cd 9300 	strd	r9, r3, [sp]
 800e24e:	2301      	movs	r3, #1
 800e250:	4622      	mov	r2, r4
 800e252:	4629      	mov	r1, r5
 800e254:	2000      	movs	r0, #0
 800e256:	9302      	str	r3, [sp, #8]
 800e258:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 800e25c:	f7ff fbae 	bl	800d9bc <tcp_pbuf_prealloc>
 800e260:	4603      	mov	r3, r0
 800e262:	4604      	mov	r4, r0
 800e264:	900c      	str	r0, [sp, #48]	; 0x30
 800e266:	2800      	cmp	r0, #0
 800e268:	d0c1      	beq.n	800e1ee <tcp_write+0x53e>
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800e26a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e26c:	462a      	mov	r2, r5
 800e26e:	9907      	ldr	r1, [sp, #28]
 800e270:	4401      	add	r1, r0
 800e272:	6858      	ldr	r0, [r3, #4]
 800e274:	f003 fc52 	bl	8011b1c <memcpy>
        queuelen += pbuf_clen(concat_p);
 800e278:	4620      	mov	r0, r4
 800e27a:	e67d      	b.n	800df78 <tcp_write+0x2c8>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800e27c:	f8b9 301a 	ldrh.w	r3, [r9, #26]
    return ERR_MEM;
 800e280:	f04f 30ff 	mov.w	r0, #4294967295
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800e284:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e288:	f8a9 301a 	strh.w	r3, [r9, #26]
  if (err != ERR_OK) {
 800e28c:	e6d2      	b.n	800e034 <tcp_write+0x384>
  pcb->unsent_oversize = oversize;
 800e28e:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 800e292:	46d0      	mov	r8, sl
 800e294:	4657      	mov	r7, sl
 800e296:	f8a9 3068 	strh.w	r3, [r9, #104]	; 0x68
  if (concat_p != NULL) {
 800e29a:	e7d3      	b.n	800e244 <tcp_write+0x594>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800e29c:	4b0f      	ldr	r3, [pc, #60]	; (800e2dc <tcp_write+0x62c>)
 800e29e:	f240 2231 	movw	r2, #561	; 0x231
 800e2a2:	4916      	ldr	r1, [pc, #88]	; (800e2fc <tcp_write+0x64c>)
 800e2a4:	480f      	ldr	r0, [pc, #60]	; (800e2e4 <tcp_write+0x634>)
 800e2a6:	f003 f9b1 	bl	801160c <iprintf>
          extendlen = seglen;
 800e2aa:	950d      	str	r5, [sp, #52]	; 0x34
 800e2ac:	e66a      	b.n	800df84 <tcp_write+0x2d4>
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800e2ae:	4b0b      	ldr	r3, [pc, #44]	; (800e2dc <tcp_write+0x62c>)
 800e2b0:	f240 12ad 	movw	r2, #429	; 0x1ad
 800e2b4:	4912      	ldr	r1, [pc, #72]	; (800e300 <tcp_write+0x650>)
 800e2b6:	480b      	ldr	r0, [pc, #44]	; (800e2e4 <tcp_write+0x634>)
 800e2b8:	f003 f9a8 	bl	801160c <iprintf>
 800e2bc:	f06f 000f 	mvn.w	r0, #15
 800e2c0:	e6b8      	b.n	800e034 <tcp_write+0x384>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800e2c2:	460a      	mov	r2, r1
 800e2c4:	e787      	b.n	800e1d6 <tcp_write+0x526>
  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800e2c6:	4b05      	ldr	r3, [pc, #20]	; (800e2dc <tcp_write+0x62c>)
 800e2c8:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 800e2cc:	490d      	ldr	r1, [pc, #52]	; (800e304 <tcp_write+0x654>)
 800e2ce:	4805      	ldr	r0, [pc, #20]	; (800e2e4 <tcp_write+0x634>)
 800e2d0:	f003 f99c 	bl	801160c <iprintf>
 800e2d4:	f06f 000f 	mvn.w	r0, #15
 800e2d8:	e6ac      	b.n	800e034 <tcp_write+0x384>
 800e2da:	bf00      	nop
 800e2dc:	0801453c 	.word	0x0801453c
 800e2e0:	08014758 	.word	0x08014758
 800e2e4:	080128dc 	.word	0x080128dc
 800e2e8:	08014740 	.word	0x08014740
 800e2ec:	080148c8 	.word	0x080148c8
 800e2f0:	08014858 	.word	0x08014858
 800e2f4:	080146d0 	.word	0x080146d0
 800e2f8:	08014890 	.word	0x08014890
 800e2fc:	08014798 	.word	0x08014798
 800e300:	0801469c 	.word	0x0801469c
 800e304:	08014684 	.word	0x08014684

0800e308 <tcp_split_unsent_seg>:
{
 800e308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800e30c:	4605      	mov	r5, r0
{
 800e30e:	b083      	sub	sp, #12
 800e310:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800e312:	2800      	cmp	r0, #0
 800e314:	f000 80a7 	beq.w	800e466 <tcp_split_unsent_seg+0x15e>
  useg = pcb->unsent;
 800e318:	6eee      	ldr	r6, [r5, #108]	; 0x6c
  if (useg == NULL) {
 800e31a:	b376      	cbz	r6, 800e37a <tcp_split_unsent_seg+0x72>
  if (split == 0) {
 800e31c:	2c00      	cmp	r4, #0
 800e31e:	f000 80b3 	beq.w	800e488 <tcp_split_unsent_seg+0x180>
  if (useg->len <= split) {
 800e322:	f8b6 9008 	ldrh.w	r9, [r6, #8]
 800e326:	45a1      	cmp	r9, r4
 800e328:	f240 8099 	bls.w	800e45e <tcp_split_unsent_seg+0x156>
  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800e32c:	8e6b      	ldrh	r3, [r5, #50]	; 0x32
 800e32e:	42a3      	cmp	r3, r4
 800e330:	d328      	bcc.n	800e384 <tcp_split_unsent_seg+0x7c>
  optflags = useg->flags;
 800e332:	f896 a00a 	ldrb.w	sl, [r6, #10]
  remainder = useg->len - split;
 800e336:	eba9 0804 	sub.w	r8, r9, r4
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800e33a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e33e:	2036      	movs	r0, #54	; 0x36
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800e340:	ea4f 0b8a 	mov.w	fp, sl, lsl #2
  remainder = useg->len - split;
 800e344:	fa1f f888 	uxth.w	r8, r8
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800e348:	f00b 0b04 	and.w	fp, fp, #4
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800e34c:	eb08 010b 	add.w	r1, r8, fp
 800e350:	b289      	uxth	r1, r1
 800e352:	f7fc f9d7 	bl	800a704 <pbuf_alloc>
  if (p == NULL) {
 800e356:	4607      	mov	r7, r0
 800e358:	b178      	cbz	r0, 800e37a <tcp_split_unsent_seg+0x72>
  offset = useg->p->tot_len - useg->len + split;
 800e35a:	6870      	ldr	r0, [r6, #4]
 800e35c:	8932      	ldrh	r2, [r6, #8]
 800e35e:	8903      	ldrh	r3, [r0, #8]
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800e360:	6879      	ldr	r1, [r7, #4]
  offset = useg->p->tot_len - useg->len + split;
 800e362:	1a9b      	subs	r3, r3, r2
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800e364:	4642      	mov	r2, r8
 800e366:	4459      	add	r1, fp
  offset = useg->p->tot_len - useg->len + split;
 800e368:	4423      	add	r3, r4
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800e36a:	b29b      	uxth	r3, r3
 800e36c:	f7fc fb52 	bl	800aa14 <pbuf_copy_partial>
 800e370:	4540      	cmp	r0, r8
 800e372:	d01d      	beq.n	800e3b0 <tcp_split_unsent_seg+0xa8>
    pbuf_free(p);
 800e374:	4638      	mov	r0, r7
 800e376:	f7fc f955 	bl	800a624 <pbuf_free>
  return ERR_MEM;
 800e37a:	f04f 30ff 	mov.w	r0, #4294967295
}
 800e37e:	b003      	add	sp, #12
 800e380:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800e384:	4b45      	ldr	r3, [pc, #276]	; (800e49c <tcp_split_unsent_seg+0x194>)
 800e386:	f240 325b 	movw	r2, #859	; 0x35b
 800e38a:	4945      	ldr	r1, [pc, #276]	; (800e4a0 <tcp_split_unsent_seg+0x198>)
 800e38c:	4845      	ldr	r0, [pc, #276]	; (800e4a4 <tcp_split_unsent_seg+0x19c>)
 800e38e:	f003 f93d 	bl	801160c <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800e392:	f8b6 9008 	ldrh.w	r9, [r6, #8]
 800e396:	f1b9 0f00 	cmp.w	r9, #0
 800e39a:	d1ca      	bne.n	800e332 <tcp_split_unsent_seg+0x2a>
 800e39c:	4b3f      	ldr	r3, [pc, #252]	; (800e49c <tcp_split_unsent_seg+0x194>)
 800e39e:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800e3a2:	4941      	ldr	r1, [pc, #260]	; (800e4a8 <tcp_split_unsent_seg+0x1a0>)
 800e3a4:	483f      	ldr	r0, [pc, #252]	; (800e4a4 <tcp_split_unsent_seg+0x19c>)
 800e3a6:	f003 f931 	bl	801160c <iprintf>
  remainder = useg->len - split;
 800e3aa:	f8b6 9008 	ldrh.w	r9, [r6, #8]
 800e3ae:	e7c0      	b.n	800e332 <tcp_split_unsent_seg+0x2a>
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800e3b0:	68f3      	ldr	r3, [r6, #12]
 800e3b2:	8998      	ldrh	r0, [r3, #12]
 800e3b4:	f7fb f994 	bl	80096e0 <lwip_htons>
  if (split_flags & TCP_PSH) {
 800e3b8:	f010 0b08 	ands.w	fp, r0, #8
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800e3bc:	fa5f f880 	uxtb.w	r8, r0
  if (split_flags & TCP_PSH) {
 800e3c0:	d159      	bne.n	800e476 <tcp_split_unsent_seg+0x16e>
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800e3c2:	f008 083f 	and.w	r8, r8, #63	; 0x3f
  if (split_flags & TCP_FIN) {
 800e3c6:	f018 0f01 	tst.w	r8, #1
 800e3ca:	d003      	beq.n	800e3d4 <tcp_split_unsent_seg+0xcc>
    split_flags &= ~TCP_FIN;
 800e3cc:	f008 08fe 	and.w	r8, r8, #254	; 0xfe
    remainder_flags |= TCP_FIN;
 800e3d0:	f04b 0b01 	orr.w	fp, fp, #1
  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800e3d4:	68f3      	ldr	r3, [r6, #12]
 800e3d6:	6858      	ldr	r0, [r3, #4]
 800e3d8:	f7fb f986 	bl	80096e8 <lwip_htonl>
 800e3dc:	f8cd a000 	str.w	sl, [sp]
 800e3e0:	1823      	adds	r3, r4, r0
 800e3e2:	465a      	mov	r2, fp
 800e3e4:	4639      	mov	r1, r7
 800e3e6:	4628      	mov	r0, r5
 800e3e8:	f7ff fb38 	bl	800da5c <tcp_create_segment>
  if (seg == NULL) {
 800e3ec:	4682      	mov	sl, r0
 800e3ee:	2800      	cmp	r0, #0
 800e3f0:	d0c0      	beq.n	800e374 <tcp_split_unsent_seg+0x6c>
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800e3f2:	6870      	ldr	r0, [r6, #4]
 800e3f4:	eba4 0409 	sub.w	r4, r4, r9
 800e3f8:	f7fc fa8a 	bl	800a910 <pbuf_clen>
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800e3fc:	6872      	ldr	r2, [r6, #4]
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800e3fe:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
 800e402:	b2a4      	uxth	r4, r4
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800e404:	8911      	ldrh	r1, [r2, #8]
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800e406:	1a1b      	subs	r3, r3, r0
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800e408:	4610      	mov	r0, r2
 800e40a:	4421      	add	r1, r4
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800e40c:	f8a5 3066 	strh.w	r3, [r5, #102]	; 0x66
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800e410:	b289      	uxth	r1, r1
 800e412:	f7fc fa25 	bl	800a860 <pbuf_realloc>
  useg->len -= remainder;
 800e416:	8933      	ldrh	r3, [r6, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800e418:	4640      	mov	r0, r8
  useg->len -= remainder;
 800e41a:	441c      	add	r4, r3
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800e41c:	68f3      	ldr	r3, [r6, #12]
  useg->len -= remainder;
 800e41e:	8134      	strh	r4, [r6, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800e420:	899c      	ldrh	r4, [r3, #12]
 800e422:	f7fb f95d 	bl	80096e0 <lwip_htons>
 800e426:	68f3      	ldr	r3, [r6, #12]
 800e428:	4304      	orrs	r4, r0
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800e42a:	6870      	ldr	r0, [r6, #4]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800e42c:	819c      	strh	r4, [r3, #12]
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800e42e:	f7fc fa6f 	bl	800a910 <pbuf_clen>
 800e432:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
 800e436:	4403      	add	r3, r0
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800e438:	f8da 0004 	ldr.w	r0, [sl, #4]
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800e43c:	f8a5 3066 	strh.w	r3, [r5, #102]	; 0x66
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800e440:	f7fc fa66 	bl	800a910 <pbuf_clen>
 800e444:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
 800e448:	4418      	add	r0, r3
  seg->next = useg->next;
 800e44a:	6833      	ldr	r3, [r6, #0]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800e44c:	f8a5 0066 	strh.w	r0, [r5, #102]	; 0x66
  seg->next = useg->next;
 800e450:	f8ca 3000 	str.w	r3, [sl]
  useg->next = seg;
 800e454:	f8c6 a000 	str.w	sl, [r6]
  if (seg->next == NULL) {
 800e458:	f8da 3000 	ldr.w	r3, [sl]
 800e45c:	b183      	cbz	r3, 800e480 <tcp_split_unsent_seg+0x178>
    return ERR_OK;
 800e45e:	2000      	movs	r0, #0
}
 800e460:	b003      	add	sp, #12
 800e462:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800e466:	4b0d      	ldr	r3, [pc, #52]	; (800e49c <tcp_split_unsent_seg+0x194>)
 800e468:	f240 324b 	movw	r2, #843	; 0x34b
 800e46c:	490f      	ldr	r1, [pc, #60]	; (800e4ac <tcp_split_unsent_seg+0x1a4>)
 800e46e:	480d      	ldr	r0, [pc, #52]	; (800e4a4 <tcp_split_unsent_seg+0x19c>)
 800e470:	f003 f8cc 	bl	801160c <iprintf>
 800e474:	e750      	b.n	800e318 <tcp_split_unsent_seg+0x10>
    split_flags &= ~TCP_PSH;
 800e476:	f008 0837 	and.w	r8, r8, #55	; 0x37
    remainder_flags |= TCP_PSH;
 800e47a:	f04f 0b08 	mov.w	fp, #8
 800e47e:	e7a2      	b.n	800e3c6 <tcp_split_unsent_seg+0xbe>
  return ERR_OK;
 800e480:	4618      	mov	r0, r3
    pcb->unsent_oversize = 0;
 800e482:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
 800e486:	e77a      	b.n	800e37e <tcp_split_unsent_seg+0x76>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800e488:	4b04      	ldr	r3, [pc, #16]	; (800e49c <tcp_split_unsent_seg+0x194>)
 800e48a:	f240 3253 	movw	r2, #851	; 0x353
 800e48e:	4908      	ldr	r1, [pc, #32]	; (800e4b0 <tcp_split_unsent_seg+0x1a8>)
 800e490:	4804      	ldr	r0, [pc, #16]	; (800e4a4 <tcp_split_unsent_seg+0x19c>)
 800e492:	f003 f8bb 	bl	801160c <iprintf>
    return ERR_VAL;
 800e496:	f06f 0005 	mvn.w	r0, #5
 800e49a:	e770      	b.n	800e37e <tcp_split_unsent_seg+0x76>
 800e49c:	0801453c 	.word	0x0801453c
 800e4a0:	08014930 	.word	0x08014930
 800e4a4:	080128dc 	.word	0x080128dc
 800e4a8:	08014940 	.word	0x08014940
 800e4ac:	080148e8 	.word	0x080148e8
 800e4b0:	0801490c 	.word	0x0801490c

0800e4b4 <tcp_enqueue_flags>:
{
 800e4b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800e4b8:	f011 0703 	ands.w	r7, r1, #3
{
 800e4bc:	b082      	sub	sp, #8
 800e4be:	460d      	mov	r5, r1
 800e4c0:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800e4c2:	d05e      	beq.n	800e582 <tcp_enqueue_flags+0xce>
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800e4c4:	2c00      	cmp	r4, #0
 800e4c6:	d065      	beq.n	800e594 <tcp_enqueue_flags+0xe0>
  if (flags & TCP_SYN) {
 800e4c8:	f015 0802 	ands.w	r8, r5, #2
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800e4cc:	f44f 7220 	mov.w	r2, #640	; 0x280
  if (flags & TCP_SYN) {
 800e4d0:	d049      	beq.n	800e566 <tcp_enqueue_flags+0xb2>
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800e4d2:	2104      	movs	r1, #4
 800e4d4:	2036      	movs	r0, #54	; 0x36
 800e4d6:	f7fc f915 	bl	800a704 <pbuf_alloc>
 800e4da:	4606      	mov	r6, r0
 800e4dc:	2800      	cmp	r0, #0
 800e4de:	d049      	beq.n	800e574 <tcp_enqueue_flags+0xc0>
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800e4e0:	8943      	ldrh	r3, [r0, #10]
 800e4e2:	2b03      	cmp	r3, #3
 800e4e4:	d872      	bhi.n	800e5cc <tcp_enqueue_flags+0x118>
    optflags = TF_SEG_OPTS_MSS;
 800e4e6:	f04f 0801 	mov.w	r8, #1
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800e4ea:	4b40      	ldr	r3, [pc, #256]	; (800e5ec <tcp_enqueue_flags+0x138>)
 800e4ec:	f240 4239 	movw	r2, #1081	; 0x439
 800e4f0:	493f      	ldr	r1, [pc, #252]	; (800e5f0 <tcp_enqueue_flags+0x13c>)
 800e4f2:	4840      	ldr	r0, [pc, #256]	; (800e5f4 <tcp_enqueue_flags+0x140>)
 800e4f4:	f003 f88a 	bl	801160c <iprintf>
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800e4f8:	4631      	mov	r1, r6
 800e4fa:	f8cd 8000 	str.w	r8, [sp]
 800e4fe:	462a      	mov	r2, r5
 800e500:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800e502:	4620      	mov	r0, r4
 800e504:	f7ff faaa 	bl	800da5c <tcp_create_segment>
 800e508:	4606      	mov	r6, r0
 800e50a:	2800      	cmp	r0, #0
 800e50c:	d032      	beq.n	800e574 <tcp_enqueue_flags+0xc0>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800e50e:	68c3      	ldr	r3, [r0, #12]
 800e510:	079a      	lsls	r2, r3, #30
 800e512:	d153      	bne.n	800e5bc <tcp_enqueue_flags+0x108>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800e514:	8933      	ldrh	r3, [r6, #8]
 800e516:	2b00      	cmp	r3, #0
 800e518:	d144      	bne.n	800e5a4 <tcp_enqueue_flags+0xf0>
  if (pcb->unsent == NULL) {
 800e51a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800e51c:	2b00      	cmp	r3, #0
 800e51e:	d04b      	beq.n	800e5b8 <tcp_enqueue_flags+0x104>
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800e520:	461a      	mov	r2, r3
 800e522:	681b      	ldr	r3, [r3, #0]
 800e524:	2b00      	cmp	r3, #0
 800e526:	d1fb      	bne.n	800e520 <tcp_enqueue_flags+0x6c>
    useg->next = seg;
 800e528:	6016      	str	r6, [r2, #0]
  pcb->unsent_oversize = 0;
 800e52a:	2300      	movs	r3, #0
 800e52c:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800e530:	b117      	cbz	r7, 800e538 <tcp_enqueue_flags+0x84>
    pcb->snd_lbb++;
 800e532:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800e534:	3301      	adds	r3, #1
 800e536:	65e3      	str	r3, [r4, #92]	; 0x5c
  if (flags & TCP_FIN) {
 800e538:	07eb      	lsls	r3, r5, #31
 800e53a:	d503      	bpl.n	800e544 <tcp_enqueue_flags+0x90>
    tcp_set_flags(pcb, TF_FIN);
 800e53c:	8b63      	ldrh	r3, [r4, #26]
 800e53e:	f043 0320 	orr.w	r3, r3, #32
 800e542:	8363      	strh	r3, [r4, #26]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800e544:	6870      	ldr	r0, [r6, #4]
 800e546:	f7fc f9e3 	bl	800a910 <pbuf_clen>
 800e54a:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
 800e54e:	4418      	add	r0, r3
 800e550:	b280      	uxth	r0, r0
 800e552:	f8a4 0066 	strh.w	r0, [r4, #102]	; 0x66
  if (pcb->snd_queuelen != 0) {
 800e556:	b118      	cbz	r0, 800e560 <tcp_enqueue_flags+0xac>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800e558:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800e55a:	2800      	cmp	r0, #0
 800e55c:	d039      	beq.n	800e5d2 <tcp_enqueue_flags+0x11e>
  return ERR_OK;
 800e55e:	2000      	movs	r0, #0
}
 800e560:	b002      	add	sp, #8
 800e562:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800e566:	4641      	mov	r1, r8
 800e568:	2036      	movs	r0, #54	; 0x36
 800e56a:	f7fc f8cb 	bl	800a704 <pbuf_alloc>
 800e56e:	4606      	mov	r6, r0
 800e570:	2800      	cmp	r0, #0
 800e572:	d1c1      	bne.n	800e4f8 <tcp_enqueue_flags+0x44>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800e574:	8b63      	ldrh	r3, [r4, #26]
    return ERR_MEM;
 800e576:	f04f 30ff 	mov.w	r0, #4294967295
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800e57a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e57e:	8363      	strh	r3, [r4, #26]
    return ERR_MEM;
 800e580:	e7ee      	b.n	800e560 <tcp_enqueue_flags+0xac>
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800e582:	4b1a      	ldr	r3, [pc, #104]	; (800e5ec <tcp_enqueue_flags+0x138>)
 800e584:	f240 4211 	movw	r2, #1041	; 0x411
 800e588:	491b      	ldr	r1, [pc, #108]	; (800e5f8 <tcp_enqueue_flags+0x144>)
 800e58a:	481a      	ldr	r0, [pc, #104]	; (800e5f4 <tcp_enqueue_flags+0x140>)
 800e58c:	f003 f83e 	bl	801160c <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800e590:	2c00      	cmp	r4, #0
 800e592:	d199      	bne.n	800e4c8 <tcp_enqueue_flags+0x14>
 800e594:	4b15      	ldr	r3, [pc, #84]	; (800e5ec <tcp_enqueue_flags+0x138>)
 800e596:	f240 4213 	movw	r2, #1043	; 0x413
 800e59a:	4918      	ldr	r1, [pc, #96]	; (800e5fc <tcp_enqueue_flags+0x148>)
 800e59c:	4815      	ldr	r0, [pc, #84]	; (800e5f4 <tcp_enqueue_flags+0x140>)
 800e59e:	f003 f835 	bl	801160c <iprintf>
 800e5a2:	e791      	b.n	800e4c8 <tcp_enqueue_flags+0x14>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800e5a4:	4b11      	ldr	r3, [pc, #68]	; (800e5ec <tcp_enqueue_flags+0x138>)
 800e5a6:	f240 4243 	movw	r2, #1091	; 0x443
 800e5aa:	4915      	ldr	r1, [pc, #84]	; (800e600 <tcp_enqueue_flags+0x14c>)
 800e5ac:	4811      	ldr	r0, [pc, #68]	; (800e5f4 <tcp_enqueue_flags+0x140>)
 800e5ae:	f003 f82d 	bl	801160c <iprintf>
  if (pcb->unsent == NULL) {
 800e5b2:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	d1b3      	bne.n	800e520 <tcp_enqueue_flags+0x6c>
    pcb->unsent = seg;
 800e5b8:	66e6      	str	r6, [r4, #108]	; 0x6c
 800e5ba:	e7b6      	b.n	800e52a <tcp_enqueue_flags+0x76>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800e5bc:	4b0b      	ldr	r3, [pc, #44]	; (800e5ec <tcp_enqueue_flags+0x138>)
 800e5be:	f240 4242 	movw	r2, #1090	; 0x442
 800e5c2:	4910      	ldr	r1, [pc, #64]	; (800e604 <tcp_enqueue_flags+0x150>)
 800e5c4:	480b      	ldr	r0, [pc, #44]	; (800e5f4 <tcp_enqueue_flags+0x140>)
 800e5c6:	f003 f821 	bl	801160c <iprintf>
 800e5ca:	e7a3      	b.n	800e514 <tcp_enqueue_flags+0x60>
    optflags = TF_SEG_OPTS_MSS;
 800e5cc:	f04f 0801 	mov.w	r8, #1
 800e5d0:	e792      	b.n	800e4f8 <tcp_enqueue_flags+0x44>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800e5d2:	6ee4      	ldr	r4, [r4, #108]	; 0x6c
 800e5d4:	2c00      	cmp	r4, #0
 800e5d6:	d1c3      	bne.n	800e560 <tcp_enqueue_flags+0xac>
 800e5d8:	4b04      	ldr	r3, [pc, #16]	; (800e5ec <tcp_enqueue_flags+0x138>)
 800e5da:	f240 4265 	movw	r2, #1125	; 0x465
 800e5de:	490a      	ldr	r1, [pc, #40]	; (800e608 <tcp_enqueue_flags+0x154>)
 800e5e0:	4804      	ldr	r0, [pc, #16]	; (800e5f4 <tcp_enqueue_flags+0x140>)
 800e5e2:	f003 f813 	bl	801160c <iprintf>
  return ERR_OK;
 800e5e6:	4620      	mov	r0, r4
 800e5e8:	e7ba      	b.n	800e560 <tcp_enqueue_flags+0xac>
 800e5ea:	bf00      	nop
 800e5ec:	0801453c 	.word	0x0801453c
 800e5f0:	080149c8 	.word	0x080149c8
 800e5f4:	080128dc 	.word	0x080128dc
 800e5f8:	08014950 	.word	0x08014950
 800e5fc:	080149a8 	.word	0x080149a8
 800e600:	08014a1c 	.word	0x08014a1c
 800e604:	08014a04 	.word	0x08014a04
 800e608:	08014a48 	.word	0x08014a48

0800e60c <tcp_send_fin>:
{
 800e60c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800e60e:	4606      	mov	r6, r0
 800e610:	b188      	cbz	r0, 800e636 <tcp_send_fin+0x2a>
  if (pcb->unsent != NULL) {
 800e612:	6ef4      	ldr	r4, [r6, #108]	; 0x6c
 800e614:	b14c      	cbz	r4, 800e62a <tcp_send_fin+0x1e>
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800e616:	4625      	mov	r5, r4
 800e618:	6824      	ldr	r4, [r4, #0]
 800e61a:	2c00      	cmp	r4, #0
 800e61c:	d1fb      	bne.n	800e616 <tcp_send_fin+0xa>
    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800e61e:	68eb      	ldr	r3, [r5, #12]
 800e620:	8998      	ldrh	r0, [r3, #12]
 800e622:	f7fb f85d 	bl	80096e0 <lwip_htons>
 800e626:	0743      	lsls	r3, r0, #29
 800e628:	d00d      	beq.n	800e646 <tcp_send_fin+0x3a>
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800e62a:	4630      	mov	r0, r6
 800e62c:	2101      	movs	r1, #1
}
 800e62e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800e632:	f7ff bf3f 	b.w	800e4b4 <tcp_enqueue_flags>
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800e636:	4b0b      	ldr	r3, [pc, #44]	; (800e664 <tcp_send_fin+0x58>)
 800e638:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800e63c:	490a      	ldr	r1, [pc, #40]	; (800e668 <tcp_send_fin+0x5c>)
 800e63e:	480b      	ldr	r0, [pc, #44]	; (800e66c <tcp_send_fin+0x60>)
 800e640:	f002 ffe4 	bl	801160c <iprintf>
 800e644:	e7e5      	b.n	800e612 <tcp_send_fin+0x6>
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800e646:	68eb      	ldr	r3, [r5, #12]
 800e648:	2001      	movs	r0, #1
 800e64a:	899f      	ldrh	r7, [r3, #12]
 800e64c:	f7fb f848 	bl	80096e0 <lwip_htons>
      tcp_set_flags(pcb, TF_FIN);
 800e650:	8b73      	ldrh	r3, [r6, #26]
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800e652:	4338      	orrs	r0, r7
 800e654:	68ea      	ldr	r2, [r5, #12]
      tcp_set_flags(pcb, TF_FIN);
 800e656:	f043 0320 	orr.w	r3, r3, #32
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800e65a:	8190      	strh	r0, [r2, #12]
}
 800e65c:	4620      	mov	r0, r4
      tcp_set_flags(pcb, TF_FIN);
 800e65e:	8373      	strh	r3, [r6, #26]
}
 800e660:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e662:	bf00      	nop
 800e664:	0801453c 	.word	0x0801453c
 800e668:	08014a70 	.word	0x08014a70
 800e66c:	080128dc 	.word	0x080128dc

0800e670 <tcp_rexmit_rto_prepare>:
{
 800e670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800e672:	4605      	mov	r5, r0
 800e674:	2800      	cmp	r0, #0
 800e676:	d032      	beq.n	800e6de <tcp_rexmit_rto_prepare+0x6e>
  if (pcb->unacked == NULL) {
 800e678:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 800e67a:	b132      	cbz	r2, 800e68a <tcp_rexmit_rto_prepare+0x1a>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800e67c:	6813      	ldr	r3, [r2, #0]
 800e67e:	4614      	mov	r4, r2
 800e680:	b15b      	cbz	r3, 800e69a <tcp_rexmit_rto_prepare+0x2a>
  if (seg->p->ref != 1) {
 800e682:	6863      	ldr	r3, [r4, #4]
 800e684:	7b9b      	ldrb	r3, [r3, #14]
 800e686:	2b01      	cmp	r3, #1
 800e688:	d003      	beq.n	800e692 <tcp_rexmit_rto_prepare+0x22>
    return ERR_VAL;
 800e68a:	f06f 0305 	mvn.w	r3, #5
}
 800e68e:	4618      	mov	r0, r3
 800e690:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800e692:	6824      	ldr	r4, [r4, #0]
 800e694:	6823      	ldr	r3, [r4, #0]
 800e696:	2b00      	cmp	r3, #0
 800e698:	d1f3      	bne.n	800e682 <tcp_rexmit_rto_prepare+0x12>
  if (seg->p->ref != 1) {
 800e69a:	6863      	ldr	r3, [r4, #4]
 800e69c:	7b9b      	ldrb	r3, [r3, #14]
 800e69e:	2b01      	cmp	r3, #1
 800e6a0:	d1f3      	bne.n	800e68a <tcp_rexmit_rto_prepare+0x1a>
  tcp_set_flags(pcb, TF_RTO);
 800e6a2:	8b6b      	ldrh	r3, [r5, #26]
  pcb->unacked = NULL;
 800e6a4:	2700      	movs	r7, #0
  seg->next = pcb->unsent;
 800e6a6:	6ee9      	ldr	r1, [r5, #108]	; 0x6c
  tcp_set_flags(pcb, TF_RTO);
 800e6a8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  seg->next = pcb->unsent;
 800e6ac:	6021      	str	r1, [r4, #0]
  tcp_set_flags(pcb, TF_RTO);
 800e6ae:	836b      	strh	r3, [r5, #26]
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800e6b0:	68e3      	ldr	r3, [r4, #12]
  pcb->unacked = NULL;
 800e6b2:	e9c5 271b 	strd	r2, r7, [r5, #108]	; 0x6c
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800e6b6:	6858      	ldr	r0, [r3, #4]
 800e6b8:	f7fb f816 	bl	80096e8 <lwip_htonl>
 800e6bc:	68e3      	ldr	r3, [r4, #12]
 800e6be:	4606      	mov	r6, r0
 800e6c0:	8924      	ldrh	r4, [r4, #8]
 800e6c2:	8998      	ldrh	r0, [r3, #12]
 800e6c4:	f7fb f80c 	bl	80096e0 <lwip_htons>
 800e6c8:	f010 0003 	ands.w	r0, r0, #3
 800e6cc:	4426      	add	r6, r4
  return ERR_OK;
 800e6ce:	463b      	mov	r3, r7
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800e6d0:	bf18      	it	ne
 800e6d2:	2001      	movne	r0, #1
  pcb->rttest = 0;
 800e6d4:	636f      	str	r7, [r5, #52]	; 0x34
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800e6d6:	4430      	add	r0, r6
 800e6d8:	64e8      	str	r0, [r5, #76]	; 0x4c
}
 800e6da:	4618      	mov	r0, r3
 800e6dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800e6de:	4b04      	ldr	r3, [pc, #16]	; (800e6f0 <tcp_rexmit_rto_prepare+0x80>)
 800e6e0:	f240 6263 	movw	r2, #1635	; 0x663
 800e6e4:	4903      	ldr	r1, [pc, #12]	; (800e6f4 <tcp_rexmit_rto_prepare+0x84>)
 800e6e6:	4804      	ldr	r0, [pc, #16]	; (800e6f8 <tcp_rexmit_rto_prepare+0x88>)
 800e6e8:	f002 ff90 	bl	801160c <iprintf>
 800e6ec:	e7c4      	b.n	800e678 <tcp_rexmit_rto_prepare+0x8>
 800e6ee:	bf00      	nop
 800e6f0:	0801453c 	.word	0x0801453c
 800e6f4:	08014a8c 	.word	0x08014a8c
 800e6f8:	080128dc 	.word	0x080128dc

0800e6fc <tcp_rexmit>:
{
 800e6fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800e6fe:	4607      	mov	r7, r0
 800e700:	2800      	cmp	r0, #0
 800e702:	d031      	beq.n	800e768 <tcp_rexmit+0x6c>
  if (pcb->unacked == NULL) {
 800e704:	6f3e      	ldr	r6, [r7, #112]	; 0x70
 800e706:	b34e      	cbz	r6, 800e75c <tcp_rexmit+0x60>
  if (seg->p->ref != 1) {
 800e708:	6873      	ldr	r3, [r6, #4]
 800e70a:	7b9b      	ldrb	r3, [r3, #14]
 800e70c:	2b01      	cmp	r3, #1
 800e70e:	d125      	bne.n	800e75c <tcp_rexmit+0x60>
  pcb->unacked = seg->next;
 800e710:	6832      	ldr	r2, [r6, #0]
  cur_seg = &(pcb->unsent);
 800e712:	f107 056c 	add.w	r5, r7, #108	; 0x6c
  while (*cur_seg &&
 800e716:	6efb      	ldr	r3, [r7, #108]	; 0x6c
  pcb->unacked = seg->next;
 800e718:	673a      	str	r2, [r7, #112]	; 0x70
  while (*cur_seg &&
 800e71a:	b91b      	cbnz	r3, 800e724 <tcp_rexmit+0x28>
 800e71c:	e00f      	b.n	800e73e <tcp_rexmit+0x42>
    cur_seg = &((*cur_seg)->next );
 800e71e:	682d      	ldr	r5, [r5, #0]
  while (*cur_seg &&
 800e720:	682b      	ldr	r3, [r5, #0]
 800e722:	b163      	cbz	r3, 800e73e <tcp_rexmit+0x42>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800e724:	68db      	ldr	r3, [r3, #12]
 800e726:	6858      	ldr	r0, [r3, #4]
 800e728:	f7fa ffde 	bl	80096e8 <lwip_htonl>
 800e72c:	68f3      	ldr	r3, [r6, #12]
 800e72e:	4604      	mov	r4, r0
 800e730:	6858      	ldr	r0, [r3, #4]
 800e732:	f7fa ffd9 	bl	80096e8 <lwip_htonl>
 800e736:	1a24      	subs	r4, r4, r0
  while (*cur_seg &&
 800e738:	2c00      	cmp	r4, #0
 800e73a:	dbf0      	blt.n	800e71e <tcp_rexmit+0x22>
    cur_seg = &((*cur_seg)->next );
 800e73c:	682b      	ldr	r3, [r5, #0]
  seg->next = *cur_seg;
 800e73e:	6033      	str	r3, [r6, #0]
  *cur_seg = seg;
 800e740:	602e      	str	r6, [r5, #0]
  if (seg->next == NULL) {
 800e742:	6833      	ldr	r3, [r6, #0]
 800e744:	b16b      	cbz	r3, 800e762 <tcp_rexmit+0x66>
  if (pcb->nrtx < 0xFF) {
 800e746:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 800e74a:	2bff      	cmp	r3, #255	; 0xff
 800e74c:	d002      	beq.n	800e754 <tcp_rexmit+0x58>
    ++pcb->nrtx;
 800e74e:	3301      	adds	r3, #1
 800e750:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  pcb->rttest = 0;
 800e754:	2300      	movs	r3, #0
  return ERR_OK;
 800e756:	4618      	mov	r0, r3
  pcb->rttest = 0;
 800e758:	637b      	str	r3, [r7, #52]	; 0x34
}
 800e75a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return ERR_VAL;
 800e75c:	f06f 0005 	mvn.w	r0, #5
}
 800e760:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    pcb->unsent_oversize = 0;
 800e762:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 800e766:	e7ee      	b.n	800e746 <tcp_rexmit+0x4a>
  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800e768:	4b03      	ldr	r3, [pc, #12]	; (800e778 <tcp_rexmit+0x7c>)
 800e76a:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800e76e:	4903      	ldr	r1, [pc, #12]	; (800e77c <tcp_rexmit+0x80>)
 800e770:	4803      	ldr	r0, [pc, #12]	; (800e780 <tcp_rexmit+0x84>)
 800e772:	f002 ff4b 	bl	801160c <iprintf>
 800e776:	e7c5      	b.n	800e704 <tcp_rexmit+0x8>
 800e778:	0801453c 	.word	0x0801453c
 800e77c:	08014ab0 	.word	0x08014ab0
 800e780:	080128dc 	.word	0x080128dc

0800e784 <tcp_rexmit_fast>:
{
 800e784:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800e786:	4604      	mov	r4, r0
 800e788:	b340      	cbz	r0, 800e7dc <tcp_rexmit_fast+0x58>
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800e78a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800e78c:	b113      	cbz	r3, 800e794 <tcp_rexmit_fast+0x10>
 800e78e:	8b63      	ldrh	r3, [r4, #26]
 800e790:	075b      	lsls	r3, r3, #29
 800e792:	d500      	bpl.n	800e796 <tcp_rexmit_fast+0x12>
}
 800e794:	bd10      	pop	{r4, pc}
    if (tcp_rexmit(pcb) == ERR_OK) {
 800e796:	4620      	mov	r0, r4
 800e798:	f7ff ffb0 	bl	800e6fc <tcp_rexmit>
 800e79c:	2800      	cmp	r0, #0
 800e79e:	d1f9      	bne.n	800e794 <tcp_rexmit_fast+0x10>
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800e7a0:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
 800e7a4:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800e7a8:	8e62      	ldrh	r2, [r4, #50]	; 0x32
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800e7aa:	4299      	cmp	r1, r3
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800e7ac:	ea4f 0042 	mov.w	r0, r2, lsl #1
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800e7b0:	bf28      	it	cs
 800e7b2:	4619      	movcs	r1, r3
 800e7b4:	084b      	lsrs	r3, r1, #1
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800e7b6:	ebb0 0f51 	cmp.w	r0, r1, lsr #1
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800e7ba:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800e7be:	d902      	bls.n	800e7c6 <tcp_rexmit_fast+0x42>
        pcb->ssthresh = 2 * pcb->mss;
 800e7c0:	b283      	uxth	r3, r0
 800e7c2:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
      tcp_set_flags(pcb, TF_INFR);
 800e7c6:	8b61      	ldrh	r1, [r4, #26]
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800e7c8:	4402      	add	r2, r0
      tcp_set_flags(pcb, TF_INFR);
 800e7ca:	f041 0104 	orr.w	r1, r1, #4
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800e7ce:	4413      	add	r3, r2
      pcb->rtime = 0;
 800e7d0:	2200      	movs	r2, #0
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800e7d2:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800e7d6:	8361      	strh	r1, [r4, #26]
      pcb->rtime = 0;
 800e7d8:	8622      	strh	r2, [r4, #48]	; 0x30
}
 800e7da:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800e7dc:	4b03      	ldr	r3, [pc, #12]	; (800e7ec <tcp_rexmit_fast+0x68>)
 800e7de:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800e7e2:	4903      	ldr	r1, [pc, #12]	; (800e7f0 <tcp_rexmit_fast+0x6c>)
 800e7e4:	4803      	ldr	r0, [pc, #12]	; (800e7f4 <tcp_rexmit_fast+0x70>)
 800e7e6:	f002 ff11 	bl	801160c <iprintf>
 800e7ea:	e7ce      	b.n	800e78a <tcp_rexmit_fast+0x6>
 800e7ec:	0801453c 	.word	0x0801453c
 800e7f0:	08014ac8 	.word	0x08014ac8
 800e7f4:	080128dc 	.word	0x080128dc

0800e7f8 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800e7f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e7fc:	b084      	sub	sp, #16
 800e7fe:	4607      	mov	r7, r0
 800e800:	460e      	mov	r6, r1
 800e802:	4615      	mov	r5, r2
 800e804:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800e808:	461c      	mov	r4, r3
{
 800e80a:	f8bd 9034 	ldrh.w	r9, [sp, #52]	; 0x34
 800e80e:	f8bd a038 	ldrh.w	sl, [sp, #56]	; 0x38
  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800e812:	b1fb      	cbz	r3, 800e854 <tcp_rst+0x5c>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800e814:	f1b8 0f00 	cmp.w	r8, #0
 800e818:	d026      	beq.n	800e868 <tcp_rst+0x70>
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800e81a:	4630      	mov	r0, r6
 800e81c:	f7fa ff64 	bl	80096e8 <lwip_htonl>
 800e820:	2114      	movs	r1, #20
 800e822:	4602      	mov	r2, r0
 800e824:	4628      	mov	r0, r5
 800e826:	f24d 0516 	movw	r5, #53270	; 0xd016
 800e82a:	464b      	mov	r3, r9
 800e82c:	f8cd a000 	str.w	sl, [sp]
 800e830:	e9cd 1501 	strd	r1, r5, [sp, #4]
 800e834:	2100      	movs	r1, #0
 800e836:	f7ff f98b 	bl	800db50 <tcp_output_alloc_header_common.constprop.0>
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800e83a:	4601      	mov	r1, r0
 800e83c:	b138      	cbz	r0, 800e84e <tcp_rst+0x56>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800e83e:	4643      	mov	r3, r8
 800e840:	4622      	mov	r2, r4
 800e842:	4638      	mov	r0, r7
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800e844:	b004      	add	sp, #16
 800e846:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800e84a:	f7ff b9ef 	b.w	800dc2c <tcp_output_control_segment>
}
 800e84e:	b004      	add	sp, #16
 800e850:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800e854:	4b08      	ldr	r3, [pc, #32]	; (800e878 <tcp_rst+0x80>)
 800e856:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800e85a:	4908      	ldr	r1, [pc, #32]	; (800e87c <tcp_rst+0x84>)
 800e85c:	4808      	ldr	r0, [pc, #32]	; (800e880 <tcp_rst+0x88>)
 800e85e:	f002 fed5 	bl	801160c <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800e862:	f1b8 0f00 	cmp.w	r8, #0
 800e866:	d1d8      	bne.n	800e81a <tcp_rst+0x22>
 800e868:	4b03      	ldr	r3, [pc, #12]	; (800e878 <tcp_rst+0x80>)
 800e86a:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800e86e:	4905      	ldr	r1, [pc, #20]	; (800e884 <tcp_rst+0x8c>)
 800e870:	4803      	ldr	r0, [pc, #12]	; (800e880 <tcp_rst+0x88>)
 800e872:	f002 fecb 	bl	801160c <iprintf>
 800e876:	e7d0      	b.n	800e81a <tcp_rst+0x22>
 800e878:	0801453c 	.word	0x0801453c
 800e87c:	08014ae8 	.word	0x08014ae8
 800e880:	080128dc 	.word	0x080128dc
 800e884:	08014b04 	.word	0x08014b04

0800e888 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800e888:	b510      	push	{r4, lr}
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
  u8_t num_sacks = 0;

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800e88a:	4604      	mov	r4, r0
 800e88c:	b1c8      	cbz	r0, 800e8c2 <tcp_send_empty_ack+0x3a>
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800e88e:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800e890:	f7fa ff2a 	bl	80096e8 <lwip_htonl>
 800e894:	2100      	movs	r1, #0
 800e896:	4602      	mov	r2, r0
 800e898:	4620      	mov	r0, r4
 800e89a:	f7ff f99f 	bl	800dbdc <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 800e89e:	4601      	mov	r1, r0
 800e8a0:	b1b8      	cbz	r0, 800e8d2 <tcp_send_empty_ack+0x4a>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800e8a2:	1d23      	adds	r3, r4, #4
 800e8a4:	4622      	mov	r2, r4
 800e8a6:	4620      	mov	r0, r4
 800e8a8:	f7ff f9c0 	bl	800dc2c <tcp_output_control_segment>
  if (err != ERR_OK) {
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e8ac:	8b63      	ldrh	r3, [r4, #26]
  if (err != ERR_OK) {
 800e8ae:	b920      	cbnz	r0, 800e8ba <tcp_send_empty_ack+0x32>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e8b0:	f023 0303 	bic.w	r3, r3, #3
 800e8b4:	b29b      	uxth	r3, r3
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e8b6:	8363      	strh	r3, [r4, #26]
  }

  return err;
}
 800e8b8:	bd10      	pop	{r4, pc}
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e8ba:	f043 0303 	orr.w	r3, r3, #3
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e8be:	8363      	strh	r3, [r4, #26]
}
 800e8c0:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800e8c2:	4b07      	ldr	r3, [pc, #28]	; (800e8e0 <tcp_send_empty_ack+0x58>)
 800e8c4:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800e8c8:	4906      	ldr	r1, [pc, #24]	; (800e8e4 <tcp_send_empty_ack+0x5c>)
 800e8ca:	4807      	ldr	r0, [pc, #28]	; (800e8e8 <tcp_send_empty_ack+0x60>)
 800e8cc:	f002 fe9e 	bl	801160c <iprintf>
 800e8d0:	e7dd      	b.n	800e88e <tcp_send_empty_ack+0x6>
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e8d2:	8b63      	ldrh	r3, [r4, #26]
    return ERR_BUF;
 800e8d4:	f06f 0001 	mvn.w	r0, #1
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e8d8:	f043 0303 	orr.w	r3, r3, #3
    return ERR_BUF;
 800e8dc:	e7eb      	b.n	800e8b6 <tcp_send_empty_ack+0x2e>
 800e8de:	bf00      	nop
 800e8e0:	0801453c 	.word	0x0801453c
 800e8e4:	08014b20 	.word	0x08014b20
 800e8e8:	080128dc 	.word	0x080128dc

0800e8ec <tcp_output>:
{
 800e8ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8f0:	4604      	mov	r4, r0
 800e8f2:	b085      	sub	sp, #20
  LWIP_ASSERT_CORE_LOCKED();
 800e8f4:	f7f8 f9c2 	bl	8006c7c <sys_check_core_locking>
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800e8f8:	2c00      	cmp	r4, #0
 800e8fa:	f000 81b2 	beq.w	800ec62 <tcp_output+0x376>
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800e8fe:	7d23      	ldrb	r3, [r4, #20]
 800e900:	2b01      	cmp	r3, #1
 800e902:	f000 8169 	beq.w	800ebd8 <tcp_output+0x2ec>
  if (tcp_input_pcb == pcb) {
 800e906:	4bae      	ldr	r3, [pc, #696]	; (800ebc0 <tcp_output+0x2d4>)
 800e908:	681b      	ldr	r3, [r3, #0]
 800e90a:	42a3      	cmp	r3, r4
 800e90c:	f000 8170 	beq.w	800ebf0 <tcp_output+0x304>
  seg = pcb->unsent;
 800e910:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800e912:	f8b4 6048 	ldrh.w	r6, [r4, #72]	; 0x48
 800e916:	f8b4 7060 	ldrh.w	r7, [r4, #96]	; 0x60
  if (seg == NULL) {
 800e91a:	b325      	cbz	r5, 800e966 <tcp_output+0x7a>
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800e91c:	7a20      	ldrb	r0, [r4, #8]
  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800e91e:	f104 0904 	add.w	r9, r4, #4
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800e922:	2800      	cmp	r0, #0
 800e924:	f040 81a5 	bne.w	800ec72 <tcp_output+0x386>
    return ip_route(src, dst);
 800e928:	4648      	mov	r0, r9
 800e92a:	f001 f9f5 	bl	800fd18 <ip4_route>
 800e92e:	4680      	mov	r8, r0
  if (netif == NULL) {
 800e930:	f1b8 0f00 	cmp.w	r8, #0
 800e934:	f000 81af 	beq.w	800ec96 <tcp_output+0x3aa>
  if (ip_addr_isany(&pcb->local_ip)) {
 800e938:	6823      	ldr	r3, [r4, #0]
 800e93a:	b913      	cbnz	r3, 800e942 <tcp_output+0x56>
    ip_addr_copy(pcb->local_ip, *local_ip);
 800e93c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e940:	6023      	str	r3, [r4, #0]
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800e942:	68eb      	ldr	r3, [r5, #12]
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800e944:	42be      	cmp	r6, r7
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800e946:	6858      	ldr	r0, [r3, #4]
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800e948:	bf28      	it	cs
 800e94a:	463e      	movcs	r6, r7
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800e94c:	f7fa fecc 	bl	80096e8 <lwip_htonl>
 800e950:	892b      	ldrh	r3, [r5, #8]
 800e952:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800e954:	1a9b      	subs	r3, r3, r2
 800e956:	4418      	add	r0, r3
 800e958:	42b0      	cmp	r0, r6
 800e95a:	d90f      	bls.n	800e97c <tcp_output+0x90>
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800e95c:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 800e960:	42b3      	cmp	r3, r6
 800e962:	f000 814f 	beq.w	800ec04 <tcp_output+0x318>
    if (pcb->flags & TF_ACK_NOW) {
 800e966:	8b62      	ldrh	r2, [r4, #26]
 800e968:	0791      	lsls	r1, r2, #30
 800e96a:	f100 8145 	bmi.w	800ebf8 <tcp_output+0x30c>
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800e96e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  return ERR_OK;
 800e972:	2000      	movs	r0, #0
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800e974:	8362      	strh	r2, [r4, #26]
}
 800e976:	b005      	add	sp, #20
 800e978:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  pcb->persist_backoff = 0;
 800e97c:	2300      	movs	r3, #0
 800e97e:	f884 3099 	strb.w	r3, [r4, #153]	; 0x99
  useg = pcb->unacked;
 800e982:	6f23      	ldr	r3, [r4, #112]	; 0x70
  if (useg != NULL) {
 800e984:	2b00      	cmp	r3, #0
 800e986:	f000 814d 	beq.w	800ec24 <tcp_output+0x338>
    for (; useg->next != NULL; useg = useg->next);
 800e98a:	461f      	mov	r7, r3
 800e98c:	681b      	ldr	r3, [r3, #0]
 800e98e:	2b00      	cmp	r3, #0
 800e990:	f000 80af 	beq.w	800eaf2 <tcp_output+0x206>
 800e994:	461f      	mov	r7, r3
 800e996:	681b      	ldr	r3, [r3, #0]
 800e998:	2b00      	cmp	r3, #0
 800e99a:	d1f6      	bne.n	800e98a <tcp_output+0x9e>
 800e99c:	e0a9      	b.n	800eaf2 <tcp_output+0x206>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800e99e:	68eb      	ldr	r3, [r5, #12]
 800e9a0:	2010      	movs	r0, #16
 800e9a2:	f8b3 a00c 	ldrh.w	sl, [r3, #12]
 800e9a6:	f7fa fe9b 	bl	80096e0 <lwip_htons>
 800e9aa:	ea4a 0000 	orr.w	r0, sl, r0
 800e9ae:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 800e9b2:	f8aa 000c 	strh.w	r0, [sl, #12]
  if (seg->p->ref != 1) {
 800e9b6:	686b      	ldr	r3, [r5, #4]
 800e9b8:	7b9b      	ldrb	r3, [r3, #14]
 800e9ba:	2b01      	cmp	r3, #1
 800e9bc:	d154      	bne.n	800ea68 <tcp_output+0x17c>
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800e9be:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800e9c0:	f7fa fe92 	bl	80096e8 <lwip_htonl>
 800e9c4:	f8ca 0008 	str.w	r0, [sl, #8]
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800e9c8:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 800e9ca:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 800e9ce:	f7fa fe87 	bl	80096e0 <lwip_htons>
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800e9d2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800e9d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800e9d6:	f8aa 000e 	strh.w	r0, [sl, #14]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800e9da:	4413      	add	r3, r2
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800e9dc:	f8d5 a00c 	ldr.w	sl, [r5, #12]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800e9e0:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800e9e2:	7aab      	ldrb	r3, [r5, #10]
 800e9e4:	07db      	lsls	r3, r3, #31
 800e9e6:	f100 80c2 	bmi.w	800eb6e <tcp_output+0x282>
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800e9ea:	f10a 0b14 	add.w	fp, sl, #20
  if (pcb->rtime < 0) {
 800e9ee:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
 800e9f2:	2b00      	cmp	r3, #0
 800e9f4:	da01      	bge.n	800e9fa <tcp_output+0x10e>
    pcb->rtime = 0;
 800e9f6:	2300      	movs	r3, #0
 800e9f8:	8623      	strh	r3, [r4, #48]	; 0x30
  if (pcb->rttest == 0) {
 800e9fa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e9fc:	2b00      	cmp	r3, #0
 800e9fe:	f000 80ab 	beq.w	800eb58 <tcp_output+0x26c>
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800ea02:	6868      	ldr	r0, [r5, #4]
  seg->tcphdr->chksum = 0;
 800ea04:	2200      	movs	r2, #0
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800ea06:	6843      	ldr	r3, [r0, #4]
  seg->p->len -= len;
 800ea08:	8941      	ldrh	r1, [r0, #10]
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800ea0a:	ebaa 0303 	sub.w	r3, sl, r3
  seg->p->payload = seg->tcphdr;
 800ea0e:	f8c0 a004 	str.w	sl, [r0, #4]
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800ea12:	b29b      	uxth	r3, r3
  seg->p->len -= len;
 800ea14:	1ac9      	subs	r1, r1, r3
 800ea16:	8141      	strh	r1, [r0, #10]
  seg->p->tot_len -= len;
 800ea18:	8901      	ldrh	r1, [r0, #8]
 800ea1a:	1acb      	subs	r3, r1, r3
 800ea1c:	8103      	strh	r3, [r0, #8]
  seg->tcphdr->chksum = 0;
 800ea1e:	f88a 2010 	strb.w	r2, [sl, #16]
 800ea22:	f88a 2011 	strb.w	r2, [sl, #17]
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800ea26:	7aab      	ldrb	r3, [r5, #10]
 800ea28:	f013 0f01 	tst.w	r3, #1
 800ea2c:	bf14      	ite	ne
 800ea2e:	2318      	movne	r3, #24
 800ea30:	2314      	moveq	r3, #20
 800ea32:	449a      	add	sl, r3
 800ea34:	45d3      	cmp	fp, sl
 800ea36:	d007      	beq.n	800ea48 <tcp_output+0x15c>
 800ea38:	4b62      	ldr	r3, [pc, #392]	; (800ebc4 <tcp_output+0x2d8>)
 800ea3a:	f240 621c 	movw	r2, #1564	; 0x61c
 800ea3e:	4962      	ldr	r1, [pc, #392]	; (800ebc8 <tcp_output+0x2dc>)
 800ea40:	4862      	ldr	r0, [pc, #392]	; (800ebcc <tcp_output+0x2e0>)
 800ea42:	f002 fde3 	bl	801160c <iprintf>
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800ea46:	6868      	ldr	r0, [r5, #4]
 800ea48:	f8cd 8008 	str.w	r8, [sp, #8]
 800ea4c:	464a      	mov	r2, r9
 800ea4e:	7aa3      	ldrb	r3, [r4, #10]
 800ea50:	4621      	mov	r1, r4
 800ea52:	9300      	str	r3, [sp, #0]
 800ea54:	2306      	movs	r3, #6
 800ea56:	9301      	str	r3, [sp, #4]
 800ea58:	7ae3      	ldrb	r3, [r4, #11]
 800ea5a:	f001 faf3 	bl	8010044 <ip4_output_if>
    if (err != ERR_OK) {
 800ea5e:	2800      	cmp	r0, #0
 800ea60:	f040 8114 	bne.w	800ec8c <tcp_output+0x3a0>
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800ea64:	f8d5 a00c 	ldr.w	sl, [r5, #12]
    pcb->unsent = seg->next;
 800ea68:	682b      	ldr	r3, [r5, #0]
 800ea6a:	66e3      	str	r3, [r4, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800ea6c:	7d23      	ldrb	r3, [r4, #20]
 800ea6e:	2b02      	cmp	r3, #2
 800ea70:	d003      	beq.n	800ea7a <tcp_output+0x18e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ea72:	8b63      	ldrh	r3, [r4, #26]
 800ea74:	f023 0303 	bic.w	r3, r3, #3
 800ea78:	8363      	strh	r3, [r4, #26]
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800ea7a:	f8da 0004 	ldr.w	r0, [sl, #4]
 800ea7e:	f7fa fe33 	bl	80096e8 <lwip_htonl>
 800ea82:	68eb      	ldr	r3, [r5, #12]
 800ea84:	4682      	mov	sl, r0
 800ea86:	f8b5 b008 	ldrh.w	fp, [r5, #8]
 800ea8a:	8998      	ldrh	r0, [r3, #12]
 800ea8c:	f7fa fe28 	bl	80096e0 <lwip_htons>
 800ea90:	f010 0303 	ands.w	r3, r0, #3
 800ea94:	44da      	add	sl, fp
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800ea96:	6d22      	ldr	r2, [r4, #80]	; 0x50
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800ea98:	bf18      	it	ne
 800ea9a:	2301      	movne	r3, #1
 800ea9c:	4453      	add	r3, sl
    if (TCP_TCPLEN(seg) > 0) {
 800ea9e:	f8b5 a008 	ldrh.w	sl, [r5, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800eaa2:	1ad2      	subs	r2, r2, r3
 800eaa4:	2a00      	cmp	r2, #0
      pcb->snd_nxt = snd_nxt;
 800eaa6:	bfb8      	it	lt
 800eaa8:	6523      	strlt	r3, [r4, #80]	; 0x50
    if (TCP_TCPLEN(seg) > 0) {
 800eaaa:	68eb      	ldr	r3, [r5, #12]
 800eaac:	8998      	ldrh	r0, [r3, #12]
 800eaae:	f7fa fe17 	bl	80096e0 <lwip_htons>
 800eab2:	f010 0003 	ands.w	r0, r0, #3
 800eab6:	bf18      	it	ne
 800eab8:	2001      	movne	r0, #1
 800eaba:	eb10 0f0a 	cmn.w	r0, sl
 800eabe:	d044      	beq.n	800eb4a <tcp_output+0x25e>
      seg->next = NULL;
 800eac0:	2300      	movs	r3, #0
 800eac2:	602b      	str	r3, [r5, #0]
      if (pcb->unacked == NULL) {
 800eac4:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	d043      	beq.n	800eb52 <tcp_output+0x266>
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800eaca:	68eb      	ldr	r3, [r5, #12]
 800eacc:	6858      	ldr	r0, [r3, #4]
 800eace:	f7fa fe0b 	bl	80096e8 <lwip_htonl>
 800ead2:	68fb      	ldr	r3, [r7, #12]
 800ead4:	4682      	mov	sl, r0
 800ead6:	6858      	ldr	r0, [r3, #4]
 800ead8:	f7fa fe06 	bl	80096e8 <lwip_htonl>
 800eadc:	ebaa 0000 	sub.w	r0, sl, r0
 800eae0:	2800      	cmp	r0, #0
 800eae2:	f2c0 80a1 	blt.w	800ec28 <tcp_output+0x33c>
          useg->next = seg;
 800eae6:	603d      	str	r5, [r7, #0]
 800eae8:	462f      	mov	r7, r5
    seg = pcb->unsent;
 800eaea:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
  while (seg != NULL &&
 800eaec:	2d00      	cmp	r5, #0
 800eaee:	f000 80c4 	beq.w	800ec7a <tcp_output+0x38e>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800eaf2:	68eb      	ldr	r3, [r5, #12]
 800eaf4:	6858      	ldr	r0, [r3, #4]
 800eaf6:	f7fa fdf7 	bl	80096e8 <lwip_htonl>
 800eafa:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800eafc:	1ac0      	subs	r0, r0, r3
 800eafe:	892b      	ldrh	r3, [r5, #8]
 800eb00:	4418      	add	r0, r3
  while (seg != NULL &&
 800eb02:	42b0      	cmp	r0, r6
 800eb04:	f200 80bb 	bhi.w	800ec7e <tcp_output+0x392>
    LWIP_ASSERT("RST not expected here!",
 800eb08:	68eb      	ldr	r3, [r5, #12]
 800eb0a:	8998      	ldrh	r0, [r3, #12]
 800eb0c:	f7fa fde8 	bl	80096e0 <lwip_htons>
 800eb10:	0742      	lsls	r2, r0, #29
 800eb12:	d412      	bmi.n	800eb3a <tcp_output+0x24e>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800eb14:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800eb16:	b14b      	cbz	r3, 800eb2c <tcp_output+0x240>
 800eb18:	8b63      	ldrh	r3, [r4, #26]
 800eb1a:	f013 0f44 	tst.w	r3, #68	; 0x44
 800eb1e:	461a      	mov	r2, r3
 800eb20:	d104      	bne.n	800eb2c <tcp_output+0x240>
 800eb22:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800eb24:	2900      	cmp	r1, #0
 800eb26:	d038      	beq.n	800eb9a <tcp_output+0x2ae>
 800eb28:	6808      	ldr	r0, [r1, #0]
 800eb2a:	b388      	cbz	r0, 800eb90 <tcp_output+0x2a4>
    if (pcb->state != SYN_SENT) {
 800eb2c:	7d23      	ldrb	r3, [r4, #20]
 800eb2e:	2b02      	cmp	r3, #2
 800eb30:	f47f af35 	bne.w	800e99e <tcp_output+0xb2>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800eb34:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 800eb38:	e73d      	b.n	800e9b6 <tcp_output+0xca>
    LWIP_ASSERT("RST not expected here!",
 800eb3a:	4b22      	ldr	r3, [pc, #136]	; (800ebc4 <tcp_output+0x2d8>)
 800eb3c:	f240 5236 	movw	r2, #1334	; 0x536
 800eb40:	4923      	ldr	r1, [pc, #140]	; (800ebd0 <tcp_output+0x2e4>)
 800eb42:	4822      	ldr	r0, [pc, #136]	; (800ebcc <tcp_output+0x2e0>)
 800eb44:	f002 fd62 	bl	801160c <iprintf>
 800eb48:	e7e4      	b.n	800eb14 <tcp_output+0x228>
      tcp_seg_free(seg);
 800eb4a:	4628      	mov	r0, r5
 800eb4c:	f7fc fae0 	bl	800b110 <tcp_seg_free>
 800eb50:	e7cb      	b.n	800eaea <tcp_output+0x1fe>
        pcb->unacked = seg;
 800eb52:	462f      	mov	r7, r5
 800eb54:	6725      	str	r5, [r4, #112]	; 0x70
        useg = seg;
 800eb56:	e7c8      	b.n	800eaea <tcp_output+0x1fe>
    pcb->rttest = tcp_ticks;
 800eb58:	4b1e      	ldr	r3, [pc, #120]	; (800ebd4 <tcp_output+0x2e8>)
 800eb5a:	681b      	ldr	r3, [r3, #0]
 800eb5c:	6363      	str	r3, [r4, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800eb5e:	f8da 0004 	ldr.w	r0, [sl, #4]
 800eb62:	f7fa fdc1 	bl	80096e8 <lwip_htonl>
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800eb66:	f8d5 a00c 	ldr.w	sl, [r5, #12]
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800eb6a:	63a0      	str	r0, [r4, #56]	; 0x38
 800eb6c:	e749      	b.n	800ea02 <tcp_output+0x116>
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800eb6e:	464a      	mov	r2, r9
 800eb70:	4641      	mov	r1, r8
 800eb72:	f240 50b4 	movw	r0, #1460	; 0x5b4
    opts += 1;
 800eb76:	f10a 0b18 	add.w	fp, sl, #24
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800eb7a:	f7fd fab9 	bl	800c0f0 <tcp_eff_send_mss_netif>
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800eb7e:	f040 7001 	orr.w	r0, r0, #33816576	; 0x2040000
 800eb82:	f7fa fdb1 	bl	80096e8 <lwip_htonl>
 800eb86:	f8ca 0014 	str.w	r0, [sl, #20]
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800eb8a:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 800eb8e:	e72e      	b.n	800e9ee <tcp_output+0x102>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800eb90:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 800eb94:	8e60      	ldrh	r0, [r4, #50]	; 0x32
 800eb96:	4584      	cmp	ip, r0
 800eb98:	d2c8      	bcs.n	800eb2c <tcp_output+0x240>
 800eb9a:	f8b4 0064 	ldrh.w	r0, [r4, #100]	; 0x64
 800eb9e:	2800      	cmp	r0, #0
 800eba0:	d0c4      	beq.n	800eb2c <tcp_output+0x240>
 800eba2:	f8b4 0066 	ldrh.w	r0, [r4, #102]	; 0x66
 800eba6:	280f      	cmp	r0, #15
 800eba8:	d8c0      	bhi.n	800eb2c <tcp_output+0x240>
 800ebaa:	f013 0fa0 	tst.w	r3, #160	; 0xa0
 800ebae:	d1bd      	bne.n	800eb2c <tcp_output+0x240>
  if (pcb->unsent == NULL) {
 800ebb0:	2900      	cmp	r1, #0
 800ebb2:	f47f aedc 	bne.w	800e96e <tcp_output+0x82>
    pcb->unsent_oversize = 0;
 800ebb6:	2100      	movs	r1, #0
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800ebb8:	461a      	mov	r2, r3
    pcb->unsent_oversize = 0;
 800ebba:	f8a4 1068 	strh.w	r1, [r4, #104]	; 0x68
 800ebbe:	e6d6      	b.n	800e96e <tcp_output+0x82>
 800ebc0:	240105bc 	.word	0x240105bc
 800ebc4:	0801453c 	.word	0x0801453c
 800ebc8:	08014b98 	.word	0x08014b98
 800ebcc:	080128dc 	.word	0x080128dc
 800ebd0:	08014b80 	.word	0x08014b80
 800ebd4:	24010588 	.word	0x24010588
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800ebd8:	4b30      	ldr	r3, [pc, #192]	; (800ec9c <tcp_output+0x3b0>)
 800ebda:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800ebde:	4930      	ldr	r1, [pc, #192]	; (800eca0 <tcp_output+0x3b4>)
 800ebe0:	4830      	ldr	r0, [pc, #192]	; (800eca4 <tcp_output+0x3b8>)
 800ebe2:	f002 fd13 	bl	801160c <iprintf>
  if (tcp_input_pcb == pcb) {
 800ebe6:	4b30      	ldr	r3, [pc, #192]	; (800eca8 <tcp_output+0x3bc>)
 800ebe8:	681b      	ldr	r3, [r3, #0]
 800ebea:	42a3      	cmp	r3, r4
 800ebec:	f47f ae90 	bne.w	800e910 <tcp_output+0x24>
    return ERR_OK;
 800ebf0:	2000      	movs	r0, #0
}
 800ebf2:	b005      	add	sp, #20
 800ebf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      return tcp_send_empty_ack(pcb);
 800ebf8:	4620      	mov	r0, r4
}
 800ebfa:	b005      	add	sp, #20
 800ebfc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      return tcp_send_empty_ack(pcb);
 800ec00:	f7ff be42 	b.w	800e888 <tcp_send_empty_ack>
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800ec04:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800ec06:	2b00      	cmp	r3, #0
 800ec08:	f47f aead 	bne.w	800e966 <tcp_output+0x7a>
 800ec0c:	f894 3099 	ldrb.w	r3, [r4, #153]	; 0x99
 800ec10:	2b00      	cmp	r3, #0
 800ec12:	f47f aea8 	bne.w	800e966 <tcp_output+0x7a>
      pcb->persist_cnt = 0;
 800ec16:	f44f 7280 	mov.w	r2, #256	; 0x100
      pcb->persist_probe = 0;
 800ec1a:	f884 309a 	strb.w	r3, [r4, #154]	; 0x9a
      pcb->persist_cnt = 0;
 800ec1e:	f8a4 2098 	strh.w	r2, [r4, #152]	; 0x98
 800ec22:	e6a0      	b.n	800e966 <tcp_output+0x7a>
  useg = pcb->unacked;
 800ec24:	461f      	mov	r7, r3
 800ec26:	e764      	b.n	800eaf2 <tcp_output+0x206>
          while (*cur_seg &&
 800ec28:	6f23      	ldr	r3, [r4, #112]	; 0x70
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800ec2a:	f104 0b70 	add.w	fp, r4, #112	; 0x70
          while (*cur_seg &&
 800ec2e:	b92b      	cbnz	r3, 800ec3c <tcp_output+0x350>
 800ec30:	e013      	b.n	800ec5a <tcp_output+0x36e>
            cur_seg = &((*cur_seg)->next );
 800ec32:	f8db b000 	ldr.w	fp, [fp]
          while (*cur_seg &&
 800ec36:	f8db 3000 	ldr.w	r3, [fp]
 800ec3a:	b173      	cbz	r3, 800ec5a <tcp_output+0x36e>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800ec3c:	68db      	ldr	r3, [r3, #12]
 800ec3e:	6858      	ldr	r0, [r3, #4]
 800ec40:	f7fa fd52 	bl	80096e8 <lwip_htonl>
 800ec44:	68eb      	ldr	r3, [r5, #12]
 800ec46:	4682      	mov	sl, r0
 800ec48:	6858      	ldr	r0, [r3, #4]
 800ec4a:	f7fa fd4d 	bl	80096e8 <lwip_htonl>
 800ec4e:	ebaa 0000 	sub.w	r0, sl, r0
          while (*cur_seg &&
 800ec52:	2800      	cmp	r0, #0
 800ec54:	dbed      	blt.n	800ec32 <tcp_output+0x346>
            cur_seg = &((*cur_seg)->next );
 800ec56:	f8db 3000 	ldr.w	r3, [fp]
          seg->next = (*cur_seg);
 800ec5a:	602b      	str	r3, [r5, #0]
          (*cur_seg) = seg;
 800ec5c:	f8cb 5000 	str.w	r5, [fp]
 800ec60:	e743      	b.n	800eaea <tcp_output+0x1fe>
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800ec62:	4b0e      	ldr	r3, [pc, #56]	; (800ec9c <tcp_output+0x3b0>)
 800ec64:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800ec68:	4910      	ldr	r1, [pc, #64]	; (800ecac <tcp_output+0x3c0>)
 800ec6a:	480e      	ldr	r0, [pc, #56]	; (800eca4 <tcp_output+0x3b8>)
 800ec6c:	f002 fcce 	bl	801160c <iprintf>
 800ec70:	e645      	b.n	800e8fe <tcp_output+0x12>
    return netif_get_by_index(pcb->netif_idx);
 800ec72:	f7fb fb25 	bl	800a2c0 <netif_get_by_index>
 800ec76:	4680      	mov	r8, r0
 800ec78:	e65a      	b.n	800e930 <tcp_output+0x44>
 800ec7a:	8b63      	ldrh	r3, [r4, #26]
 800ec7c:	e79b      	b.n	800ebb6 <tcp_output+0x2ca>
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800ec7e:	8b63      	ldrh	r3, [r4, #26]
  if (pcb->unsent == NULL) {
 800ec80:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800ec82:	461a      	mov	r2, r3
  if (pcb->unsent == NULL) {
 800ec84:	2900      	cmp	r1, #0
 800ec86:	f47f ae72 	bne.w	800e96e <tcp_output+0x82>
 800ec8a:	e794      	b.n	800ebb6 <tcp_output+0x2ca>
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800ec8c:	8b63      	ldrh	r3, [r4, #26]
 800ec8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ec92:	8363      	strh	r3, [r4, #26]
      return err;
 800ec94:	e66f      	b.n	800e976 <tcp_output+0x8a>
    return ERR_RTE;
 800ec96:	f06f 0003 	mvn.w	r0, #3
 800ec9a:	e66c      	b.n	800e976 <tcp_output+0x8a>
 800ec9c:	0801453c 	.word	0x0801453c
 800eca0:	08014b58 	.word	0x08014b58
 800eca4:	080128dc 	.word	0x080128dc
 800eca8:	240105bc 	.word	0x240105bc
 800ecac:	08014b40 	.word	0x08014b40

0800ecb0 <tcp_rexmit_rto_commit>:
{
 800ecb0:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800ecb2:	4604      	mov	r4, r0
 800ecb4:	b158      	cbz	r0, 800ecce <tcp_rexmit_rto_commit+0x1e>
  if (pcb->nrtx < 0xFF) {
 800ecb6:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 800ecba:	2bff      	cmp	r3, #255	; 0xff
 800ecbc:	d002      	beq.n	800ecc4 <tcp_rexmit_rto_commit+0x14>
    ++pcb->nrtx;
 800ecbe:	3301      	adds	r3, #1
 800ecc0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  tcp_output(pcb);
 800ecc4:	4620      	mov	r0, r4
}
 800ecc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  tcp_output(pcb);
 800ecca:	f7ff be0f 	b.w	800e8ec <tcp_output>
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800ecce:	4b04      	ldr	r3, [pc, #16]	; (800ece0 <tcp_rexmit_rto_commit+0x30>)
 800ecd0:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800ecd4:	4903      	ldr	r1, [pc, #12]	; (800ece4 <tcp_rexmit_rto_commit+0x34>)
 800ecd6:	4804      	ldr	r0, [pc, #16]	; (800ece8 <tcp_rexmit_rto_commit+0x38>)
 800ecd8:	f002 fc98 	bl	801160c <iprintf>
 800ecdc:	e7eb      	b.n	800ecb6 <tcp_rexmit_rto_commit+0x6>
 800ecde:	bf00      	nop
 800ece0:	0801453c 	.word	0x0801453c
 800ece4:	08014bac 	.word	0x08014bac
 800ece8:	080128dc 	.word	0x080128dc

0800ecec <tcp_rexmit_rto>:
{
 800ecec:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800ecee:	4604      	mov	r4, r0
 800ecf0:	b118      	cbz	r0, 800ecfa <tcp_rexmit_rto+0xe>
  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800ecf2:	f7ff fcbd 	bl	800e670 <tcp_rexmit_rto_prepare>
 800ecf6:	b198      	cbz	r0, 800ed20 <tcp_rexmit_rto+0x34>
}
 800ecf8:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800ecfa:	4b0f      	ldr	r3, [pc, #60]	; (800ed38 <tcp_rexmit_rto+0x4c>)
 800ecfc:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800ed00:	490e      	ldr	r1, [pc, #56]	; (800ed3c <tcp_rexmit_rto+0x50>)
 800ed02:	480f      	ldr	r0, [pc, #60]	; (800ed40 <tcp_rexmit_rto+0x54>)
 800ed04:	f002 fc82 	bl	801160c <iprintf>
  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800ed08:	4620      	mov	r0, r4
 800ed0a:	f7ff fcb1 	bl	800e670 <tcp_rexmit_rto_prepare>
 800ed0e:	2800      	cmp	r0, #0
 800ed10:	d1f2      	bne.n	800ecf8 <tcp_rexmit_rto+0xc>
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800ed12:	4b09      	ldr	r3, [pc, #36]	; (800ed38 <tcp_rexmit_rto+0x4c>)
 800ed14:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800ed18:	490a      	ldr	r1, [pc, #40]	; (800ed44 <tcp_rexmit_rto+0x58>)
 800ed1a:	4809      	ldr	r0, [pc, #36]	; (800ed40 <tcp_rexmit_rto+0x54>)
 800ed1c:	f002 fc76 	bl	801160c <iprintf>
  if (pcb->nrtx < 0xFF) {
 800ed20:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 800ed24:	2bff      	cmp	r3, #255	; 0xff
 800ed26:	d002      	beq.n	800ed2e <tcp_rexmit_rto+0x42>
    ++pcb->nrtx;
 800ed28:	3301      	adds	r3, #1
 800ed2a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  tcp_output(pcb);
 800ed2e:	4620      	mov	r0, r4
}
 800ed30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  tcp_output(pcb);
 800ed34:	f7ff bdda 	b.w	800e8ec <tcp_output>
 800ed38:	0801453c 	.word	0x0801453c
 800ed3c:	08014bd0 	.word	0x08014bd0
 800ed40:	080128dc 	.word	0x080128dc
 800ed44:	08014bac 	.word	0x08014bac

0800ed48 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800ed48:	b510      	push	{r4, lr}
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800ed4a:	4604      	mov	r4, r0
 800ed4c:	b188      	cbz	r0, 800ed72 <tcp_keepalive+0x2a>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800ed4e:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800ed50:	3801      	subs	r0, #1
 800ed52:	f7fa fcc9 	bl	80096e8 <lwip_htonl>
 800ed56:	2100      	movs	r1, #0
 800ed58:	4602      	mov	r2, r0
 800ed5a:	4620      	mov	r0, r4
 800ed5c:	f7fe ff3e 	bl	800dbdc <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 800ed60:	4601      	mov	r1, r0
 800ed62:	b170      	cbz	r0, 800ed82 <tcp_keepalive+0x3a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800ed64:	1d23      	adds	r3, r4, #4
 800ed66:	4622      	mov	r2, r4
 800ed68:	4620      	mov	r0, r4

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 800ed6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800ed6e:	f7fe bf5d 	b.w	800dc2c <tcp_output_control_segment>
  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800ed72:	4b05      	ldr	r3, [pc, #20]	; (800ed88 <tcp_keepalive+0x40>)
 800ed74:	f640 0224 	movw	r2, #2084	; 0x824
 800ed78:	4904      	ldr	r1, [pc, #16]	; (800ed8c <tcp_keepalive+0x44>)
 800ed7a:	4805      	ldr	r0, [pc, #20]	; (800ed90 <tcp_keepalive+0x48>)
 800ed7c:	f002 fc46 	bl	801160c <iprintf>
 800ed80:	e7e5      	b.n	800ed4e <tcp_keepalive+0x6>
}
 800ed82:	f04f 30ff 	mov.w	r0, #4294967295
 800ed86:	bd10      	pop	{r4, pc}
 800ed88:	0801453c 	.word	0x0801453c
 800ed8c:	08014bec 	.word	0x08014bec
 800ed90:	080128dc 	.word	0x080128dc

0800ed94 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800ed94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800ed98:	4604      	mov	r4, r0
 800ed9a:	2800      	cmp	r0, #0
 800ed9c:	d051      	beq.n	800ee42 <tcp_zero_window_probe+0xae>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800ed9e:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
  if (seg == NULL) {
 800eda0:	2d00      	cmp	r5, #0
 800eda2:	d04b      	beq.n	800ee3c <tcp_zero_window_probe+0xa8>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800eda4:	f894 309a 	ldrb.w	r3, [r4, #154]	; 0x9a
 800eda8:	2bff      	cmp	r3, #255	; 0xff
 800edaa:	d002      	beq.n	800edb2 <tcp_zero_window_probe+0x1e>
    ++pcb->persist_probe;
 800edac:	3301      	adds	r3, #1
 800edae:	f884 309a 	strb.w	r3, [r4, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800edb2:	68eb      	ldr	r3, [r5, #12]
 800edb4:	8998      	ldrh	r0, [r3, #12]
 800edb6:	f7fa fc93 	bl	80096e0 <lwip_htons>
 800edba:	07c3      	lsls	r3, r0, #31
 800edbc:	d527      	bpl.n	800ee0e <tcp_zero_window_probe+0x7a>
 800edbe:	8929      	ldrh	r1, [r5, #8]
 800edc0:	bb29      	cbnz	r1, 800ee0e <tcp_zero_window_probe+0x7a>
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800edc2:	68eb      	ldr	r3, [r5, #12]
 800edc4:	4620      	mov	r0, r4
 800edc6:	685a      	ldr	r2, [r3, #4]
 800edc8:	f7fe ff08 	bl	800dbdc <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 800edcc:	4606      	mov	r6, r0
 800edce:	b388      	cbz	r0, 800ee34 <tcp_zero_window_probe+0xa0>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800edd0:	f8d6 8004 	ldr.w	r8, [r6, #4]

  if (is_fin) {
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800edd4:	2011      	movs	r0, #17
 800edd6:	f9b8 700c 	ldrsh.w	r7, [r8, #12]
 800edda:	f7fa fc81 	bl	80096e0 <lwip_htons>
 800edde:	f427 577c 	bic.w	r7, r7, #16128	; 0x3f00
 800ede2:	4338      	orrs	r0, r7
 800ede4:	f8a8 000c 	strh.w	r0, [r8, #12]
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800ede8:	68eb      	ldr	r3, [r5, #12]
 800edea:	6858      	ldr	r0, [r3, #4]
 800edec:	f7fa fc7c 	bl	80096e8 <lwip_htonl>
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800edf0:	6d23      	ldr	r3, [r4, #80]	; 0x50
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800edf2:	3001      	adds	r0, #1
    pcb->snd_nxt = snd_nxt;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800edf4:	4622      	mov	r2, r4
 800edf6:	4631      	mov	r1, r6
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800edf8:	1a1b      	subs	r3, r3, r0
 800edfa:	2b00      	cmp	r3, #0
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800edfc:	f104 0304 	add.w	r3, r4, #4
    pcb->snd_nxt = snd_nxt;
 800ee00:	bfb8      	it	lt
 800ee02:	6520      	strlt	r0, [r4, #80]	; 0x50
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800ee04:	4620      	mov	r0, r4

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 800ee06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800ee0a:	f7fe bf0f 	b.w	800dc2c <tcp_output_control_segment>
  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800ee0e:	68eb      	ldr	r3, [r5, #12]
 800ee10:	2101      	movs	r1, #1
 800ee12:	4620      	mov	r0, r4
 800ee14:	685a      	ldr	r2, [r3, #4]
 800ee16:	f7fe fee1 	bl	800dbdc <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 800ee1a:	4606      	mov	r6, r0
 800ee1c:	b150      	cbz	r0, 800ee34 <tcp_zero_window_probe+0xa0>
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800ee1e:	6868      	ldr	r0, [r5, #4]
 800ee20:	892a      	ldrh	r2, [r5, #8]
 800ee22:	8903      	ldrh	r3, [r0, #8]
    char *d = ((char *)p->payload + TCP_HLEN);
 800ee24:	6871      	ldr	r1, [r6, #4]
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800ee26:	1a9b      	subs	r3, r3, r2
 800ee28:	2201      	movs	r2, #1
 800ee2a:	3114      	adds	r1, #20
 800ee2c:	b29b      	uxth	r3, r3
 800ee2e:	f7fb fdf1 	bl	800aa14 <pbuf_copy_partial>
 800ee32:	e7d9      	b.n	800ede8 <tcp_zero_window_probe+0x54>
    return ERR_MEM;
 800ee34:	f04f 30ff 	mov.w	r0, #4294967295
}
 800ee38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return ERR_OK;
 800ee3c:	4628      	mov	r0, r5
}
 800ee3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800ee42:	4b04      	ldr	r3, [pc, #16]	; (800ee54 <tcp_zero_window_probe+0xc0>)
 800ee44:	f640 024f 	movw	r2, #2127	; 0x84f
 800ee48:	4903      	ldr	r1, [pc, #12]	; (800ee58 <tcp_zero_window_probe+0xc4>)
 800ee4a:	4804      	ldr	r0, [pc, #16]	; (800ee5c <tcp_zero_window_probe+0xc8>)
 800ee4c:	f002 fbde 	bl	801160c <iprintf>
 800ee50:	e7a5      	b.n	800ed9e <tcp_zero_window_probe+0xa>
 800ee52:	bf00      	nop
 800ee54:	0801453c 	.word	0x0801453c
 800ee58:	08014c08 	.word	0x08014c08
 800ee5c:	080128dc 	.word	0x080128dc

0800ee60 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800ee60:	b570      	push	{r4, r5, r6, lr}
 800ee62:	4604      	mov	r4, r0
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800ee64:	200a      	movs	r0, #10
{
 800ee66:	460e      	mov	r6, r1
 800ee68:	4615      	mov	r5, r2
  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800ee6a:	f7fa ffcf 	bl	8009e0c <memp_malloc>
  if (timeout == NULL) {
 800ee6e:	b190      	cbz	r0, 800ee96 <sys_timeout_abs+0x36>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
    return;
  }

  timeout->next = NULL;
 800ee70:	2300      	movs	r3, #0
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800ee72:	490d      	ldr	r1, [pc, #52]	; (800eea8 <sys_timeout_abs+0x48>)
  timeout->h = handler;
 800ee74:	6086      	str	r6, [r0, #8]
  timeout->arg = arg;
 800ee76:	60c5      	str	r5, [r0, #12]
  timeout->time = abs_time;
 800ee78:	e9c0 3400 	strd	r3, r4, [r0]
  if (next_timeout == NULL) {
 800ee7c:	680b      	ldr	r3, [r1, #0]
 800ee7e:	b91b      	cbnz	r3, 800ee88 <sys_timeout_abs+0x28>
 800ee80:	e007      	b.n	800ee92 <sys_timeout_abs+0x32>
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
    timeout->next = next_timeout;
    next_timeout = timeout;
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800ee82:	4619      	mov	r1, r3
 800ee84:	681b      	ldr	r3, [r3, #0]
 800ee86:	b11b      	cbz	r3, 800ee90 <sys_timeout_abs+0x30>
 800ee88:	685a      	ldr	r2, [r3, #4]
 800ee8a:	1aa2      	subs	r2, r4, r2
 800ee8c:	2a00      	cmp	r2, #0
 800ee8e:	daf8      	bge.n	800ee82 <sys_timeout_abs+0x22>
        timeout->next = t->next;
 800ee90:	6003      	str	r3, [r0, #0]
        t->next = timeout;
 800ee92:	6008      	str	r0, [r1, #0]
        break;
      }
    }
  }
}
 800ee94:	bd70      	pop	{r4, r5, r6, pc}
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800ee96:	4b05      	ldr	r3, [pc, #20]	; (800eeac <sys_timeout_abs+0x4c>)
 800ee98:	22be      	movs	r2, #190	; 0xbe
 800ee9a:	4905      	ldr	r1, [pc, #20]	; (800eeb0 <sys_timeout_abs+0x50>)
 800ee9c:	4805      	ldr	r0, [pc, #20]	; (800eeb4 <sys_timeout_abs+0x54>)
}
 800ee9e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800eea2:	f002 bbb3 	b.w	801160c <iprintf>
 800eea6:	bf00      	nop
 800eea8:	240105d8 	.word	0x240105d8
 800eeac:	08014c2c 	.word	0x08014c2c
 800eeb0:	08014c60 	.word	0x08014c60
 800eeb4:	080128dc 	.word	0x080128dc

0800eeb8 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800eeb8:	b538      	push	{r3, r4, r5, lr}
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800eeba:	6843      	ldr	r3, [r0, #4]
{
 800eebc:	4604      	mov	r4, r0
  cyclic->handler();
 800eebe:	4798      	blx	r3

  now = sys_now();
 800eec0:	f7f7 fd58 	bl	8006974 <sys_now>
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800eec4:	4b09      	ldr	r3, [pc, #36]	; (800eeec <lwip_cyclic_timer+0x34>)
 800eec6:	6825      	ldr	r5, [r4, #0]
 800eec8:	681b      	ldr	r3, [r3, #0]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800eeca:	4909      	ldr	r1, [pc, #36]	; (800eef0 <lwip_cyclic_timer+0x38>)
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800eecc:	442b      	add	r3, r5
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800eece:	1a1a      	subs	r2, r3, r0
 800eed0:	2a00      	cmp	r2, #0
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800eed2:	4622      	mov	r2, r4
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800eed4:	da04      	bge.n	800eee0 <lwip_cyclic_timer+0x28>
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800eed6:	4428      	add	r0, r5
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800eed8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800eedc:	f7ff bfc0 	b.w	800ee60 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800eee0:	4618      	mov	r0, r3
}
 800eee2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800eee6:	f7ff bfbb 	b.w	800ee60 <sys_timeout_abs>
 800eeea:	bf00      	nop
 800eeec:	240105d4 	.word	0x240105d4
 800eef0:	0800eeb9 	.word	0x0800eeb9

0800eef4 <tcpip_tcp_timer>:
{
 800eef4:	b508      	push	{r3, lr}
  tcp_tmr();
 800eef6:	f7fd f8cd 	bl	800c094 <tcp_tmr>
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800eefa:	4b0a      	ldr	r3, [pc, #40]	; (800ef24 <tcpip_tcp_timer+0x30>)
 800eefc:	681b      	ldr	r3, [r3, #0]
 800eefe:	b153      	cbz	r3, 800ef16 <tcpip_tcp_timer+0x22>
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();
 800ef00:	f7f7 febc 	bl	8006c7c <sys_check_core_locking>

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800ef04:	f7f7 fd36 	bl	8006974 <sys_now>

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800ef08:	2200      	movs	r2, #0
 800ef0a:	4907      	ldr	r1, [pc, #28]	; (800ef28 <tcpip_tcp_timer+0x34>)
 800ef0c:	30fa      	adds	r0, #250	; 0xfa
}
 800ef0e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_timeout_abs(next_timeout_time, handler, arg);
 800ef12:	f7ff bfa5 	b.w	800ee60 <sys_timeout_abs>
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800ef16:	4b05      	ldr	r3, [pc, #20]	; (800ef2c <tcpip_tcp_timer+0x38>)
 800ef18:	681b      	ldr	r3, [r3, #0]
 800ef1a:	2b00      	cmp	r3, #0
 800ef1c:	d1f0      	bne.n	800ef00 <tcpip_tcp_timer+0xc>
    tcpip_tcp_timer_active = 0;
 800ef1e:	4a04      	ldr	r2, [pc, #16]	; (800ef30 <tcpip_tcp_timer+0x3c>)
 800ef20:	6013      	str	r3, [r2, #0]
}
 800ef22:	bd08      	pop	{r3, pc}
 800ef24:	24010578 	.word	0x24010578
 800ef28:	0800eef5 	.word	0x0800eef5
 800ef2c:	24010590 	.word	0x24010590
 800ef30:	240105dc 	.word	0x240105dc

0800ef34 <tcp_timer_needed>:
{
 800ef34:	b508      	push	{r3, lr}
  LWIP_ASSERT_CORE_LOCKED();
 800ef36:	f7f7 fea1 	bl	8006c7c <sys_check_core_locking>
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800ef3a:	4b0c      	ldr	r3, [pc, #48]	; (800ef6c <tcp_timer_needed+0x38>)
 800ef3c:	681a      	ldr	r2, [r3, #0]
 800ef3e:	b99a      	cbnz	r2, 800ef68 <tcp_timer_needed+0x34>
 800ef40:	4a0b      	ldr	r2, [pc, #44]	; (800ef70 <tcp_timer_needed+0x3c>)
 800ef42:	6812      	ldr	r2, [r2, #0]
 800ef44:	b162      	cbz	r2, 800ef60 <tcp_timer_needed+0x2c>
    tcpip_tcp_timer_active = 1;
 800ef46:	2201      	movs	r2, #1
 800ef48:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT_CORE_LOCKED();
 800ef4a:	f7f7 fe97 	bl	8006c7c <sys_check_core_locking>
  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800ef4e:	f7f7 fd11 	bl	8006974 <sys_now>
  sys_timeout_abs(next_timeout_time, handler, arg);
 800ef52:	2200      	movs	r2, #0
 800ef54:	4907      	ldr	r1, [pc, #28]	; (800ef74 <tcp_timer_needed+0x40>)
 800ef56:	30fa      	adds	r0, #250	; 0xfa
}
 800ef58:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_timeout_abs(next_timeout_time, handler, arg);
 800ef5c:	f7ff bf80 	b.w	800ee60 <sys_timeout_abs>
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800ef60:	4a05      	ldr	r2, [pc, #20]	; (800ef78 <tcp_timer_needed+0x44>)
 800ef62:	6812      	ldr	r2, [r2, #0]
 800ef64:	2a00      	cmp	r2, #0
 800ef66:	d1ee      	bne.n	800ef46 <tcp_timer_needed+0x12>
}
 800ef68:	bd08      	pop	{r3, pc}
 800ef6a:	bf00      	nop
 800ef6c:	240105dc 	.word	0x240105dc
 800ef70:	24010578 	.word	0x24010578
 800ef74:	0800eef5 	.word	0x0800eef5
 800ef78:	24010590 	.word	0x24010590

0800ef7c <sys_timeouts_init>:
{
 800ef7c:	b510      	push	{r4, lr}
  sys_timeout_abs(next_timeout_time, handler, arg);
 800ef7e:	4c0c      	ldr	r4, [pc, #48]	; (800efb0 <sys_timeouts_init+0x34>)
  LWIP_ASSERT_CORE_LOCKED();
 800ef80:	f7f7 fe7c 	bl	8006c7c <sys_check_core_locking>
  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800ef84:	f7f7 fcf6 	bl	8006974 <sys_now>
  sys_timeout_abs(next_timeout_time, handler, arg);
 800ef88:	490a      	ldr	r1, [pc, #40]	; (800efb4 <sys_timeouts_init+0x38>)
 800ef8a:	f104 0208 	add.w	r2, r4, #8
 800ef8e:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
 800ef92:	f7ff ff65 	bl	800ee60 <sys_timeout_abs>
  LWIP_ASSERT_CORE_LOCKED();
 800ef96:	f7f7 fe71 	bl	8006c7c <sys_check_core_locking>
  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800ef9a:	f7f7 fceb 	bl	8006974 <sys_now>
  sys_timeout_abs(next_timeout_time, handler, arg);
 800ef9e:	f104 0210 	add.w	r2, r4, #16
 800efa2:	4904      	ldr	r1, [pc, #16]	; (800efb4 <sys_timeouts_init+0x38>)
 800efa4:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
}
 800efa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  sys_timeout_abs(next_timeout_time, handler, arg);
 800efac:	f7ff bf58 	b.w	800ee60 <sys_timeout_abs>
 800efb0:	08014ca0 	.word	0x08014ca0
 800efb4:	0800eeb9 	.word	0x0800eeb9

0800efb8 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800efb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();
 800efbc:	f7f7 fe5e 	bl	8006c7c <sys_check_core_locking>

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800efc0:	4c10      	ldr	r4, [pc, #64]	; (800f004 <sys_check_timeouts+0x4c>)
 800efc2:	f7f7 fcd7 	bl	8006974 <sys_now>

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
    handler = tmptimeout->h;
    arg = tmptimeout->arg;
    current_timeout_due_time = tmptimeout->time;
 800efc6:	f8df 8040 	ldr.w	r8, [pc, #64]	; 800f008 <sys_check_timeouts+0x50>
  now = sys_now();
 800efca:	4607      	mov	r7, r0
 800efcc:	e00f      	b.n	800efee <sys_check_timeouts+0x36>
    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800efce:	685a      	ldr	r2, [r3, #4]
 800efd0:	eba7 0c02 	sub.w	ip, r7, r2
 800efd4:	f1bc 0f00 	cmp.w	ip, #0
 800efd8:	db0e      	blt.n	800eff8 <sys_check_timeouts+0x40>
    handler = tmptimeout->h;
 800efda:	689d      	ldr	r5, [r3, #8]
    next_timeout = tmptimeout->next;
 800efdc:	681e      	ldr	r6, [r3, #0]
    arg = tmptimeout->arg;
 800efde:	f8d3 900c 	ldr.w	r9, [r3, #12]
    current_timeout_due_time = tmptimeout->time;
 800efe2:	f8c8 2000 	str.w	r2, [r8]
    next_timeout = tmptimeout->next;
 800efe6:	6026      	str	r6, [r4, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800efe8:	f7fa ff56 	bl	8009e98 <memp_free>
    if (handler != NULL) {
 800efec:	b935      	cbnz	r5, 800effc <sys_check_timeouts+0x44>
    tmptimeout = next_timeout;
 800efee:	6823      	ldr	r3, [r4, #0]
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800eff0:	200a      	movs	r0, #10
 800eff2:	4619      	mov	r1, r3
    if (tmptimeout == NULL) {
 800eff4:	2b00      	cmp	r3, #0
 800eff6:	d1ea      	bne.n	800efce <sys_check_timeouts+0x16>
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800eff8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      handler(arg);
 800effc:	4648      	mov	r0, r9
 800effe:	47a8      	blx	r5
 800f000:	e7f5      	b.n	800efee <sys_check_timeouts+0x36>
 800f002:	bf00      	nop
 800f004:	240105d8 	.word	0x240105d8
 800f008:	240105d4 	.word	0x240105d4

0800f00c <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 800f00c:	b510      	push	{r4, lr}
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 800f00e:	4c08      	ldr	r4, [pc, #32]	; (800f030 <sys_timeouts_sleeptime+0x24>)
  LWIP_ASSERT_CORE_LOCKED();
 800f010:	f7f7 fe34 	bl	8006c7c <sys_check_core_locking>
  if (next_timeout == NULL) {
 800f014:	6823      	ldr	r3, [r4, #0]
 800f016:	b13b      	cbz	r3, 800f028 <sys_timeouts_sleeptime+0x1c>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
  }
  now = sys_now();
 800f018:	f7f7 fcac 	bl	8006974 <sys_now>
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 800f01c:	6823      	ldr	r3, [r4, #0]
 800f01e:	685b      	ldr	r3, [r3, #4]
    return 0;
 800f020:	1a18      	subs	r0, r3, r0
 800f022:	bf48      	it	mi
 800f024:	2000      	movmi	r0, #0
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
    return ret;
  }
}
 800f026:	bd10      	pop	{r4, pc}
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 800f028:	f04f 30ff 	mov.w	r0, #4294967295
}
 800f02c:	bd10      	pop	{r4, pc}
 800f02e:	bf00      	nop
 800f030:	240105d8 	.word	0x240105d8

0800f034 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800f034:	b508      	push	{r3, lr}
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800f036:	f002 f939 	bl	80112ac <rand>
 800f03a:	4b02      	ldr	r3, [pc, #8]	; (800f044 <udp_init+0x10>)
 800f03c:	4a02      	ldr	r2, [pc, #8]	; (800f048 <udp_init+0x14>)
 800f03e:	4303      	orrs	r3, r0
 800f040:	8013      	strh	r3, [r2, #0]
#endif /* LWIP_RAND */
}
 800f042:	bd08      	pop	{r3, pc}
 800f044:	ffffc000 	.word	0xffffc000
 800f048:	2400002e 	.word	0x2400002e

0800f04c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800f04c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f050:	4680      	mov	r8, r0
 800f052:	b085      	sub	sp, #20
 800f054:	460f      	mov	r7, r1
  u8_t broadcast;
  u8_t for_us = 0;

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();
 800f056:	f7f7 fe11 	bl	8006c7c <sys_check_core_locking>

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800f05a:	f1b8 0f00 	cmp.w	r8, #0
 800f05e:	f000 80af 	beq.w	800f1c0 <udp_input+0x174>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800f062:	2f00      	cmp	r7, #0
 800f064:	f000 80b5 	beq.w	800f1d2 <udp_input+0x186>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800f068:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 800f06c:	2b07      	cmp	r3, #7
 800f06e:	f240 8091 	bls.w	800f194 <udp_input+0x148>
  }

  udphdr = (struct udp_hdr *)p->payload;

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800f072:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 800f248 <udp_input+0x1fc>
  udphdr = (struct udp_hdr *)p->payload;
 800f076:	f8d8 4004 	ldr.w	r4, [r8, #4]
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800f07a:	f8d9 1000 	ldr.w	r1, [r9]
 800f07e:	f8d9 0014 	ldr.w	r0, [r9, #20]
 800f082:	f000 fff1 	bl	8010068 <ip4_addr_isbroadcast_u32>
 800f086:	4682      	mov	sl, r0

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800f088:	8820      	ldrh	r0, [r4, #0]
 800f08a:	f7fa fb29 	bl	80096e0 <lwip_htons>
 800f08e:	4603      	mov	r3, r0
  dest = lwip_ntohs(udphdr->dest);
 800f090:	8860      	ldrh	r0, [r4, #2]
  src = lwip_ntohs(udphdr->src);
 800f092:	9303      	str	r3, [sp, #12]
  dest = lwip_ntohs(udphdr->dest);
 800f094:	f7fa fb24 	bl	80096e0 <lwip_htons>
  uncon_pcb = NULL;
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800f098:	4b63      	ldr	r3, [pc, #396]	; (800f228 <udp_input+0x1dc>)
  dest = lwip_ntohs(udphdr->dest);
 800f09a:	4605      	mov	r5, r0
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800f09c:	681c      	ldr	r4, [r3, #0]
 800f09e:	2c00      	cmp	r4, #0
 800f0a0:	d064      	beq.n	800f16c <udp_input+0x120>
  uncon_pcb = NULL;
 800f0a2:	f04f 0b00 	mov.w	fp, #0
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800f0a6:	f8df c190 	ldr.w	ip, [pc, #400]	; 800f238 <udp_input+0x1ec>
 800f0aa:	4960      	ldr	r1, [pc, #384]	; (800f22c <udp_input+0x1e0>)
  prev = NULL;
 800f0ac:	465e      	mov	r6, fp
 800f0ae:	e004      	b.n	800f0ba <udp_input+0x6e>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800f0b0:	68e2      	ldr	r2, [r4, #12]
 800f0b2:	4626      	mov	r6, r4
 800f0b4:	2a00      	cmp	r2, #0
 800f0b6:	d056      	beq.n	800f166 <udp_input+0x11a>
 800f0b8:	4614      	mov	r4, r2
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800f0ba:	8a62      	ldrh	r2, [r4, #18]
 800f0bc:	42aa      	cmp	r2, r5
 800f0be:	d1f7      	bne.n	800f0b0 <udp_input+0x64>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800f0c0:	2f00      	cmp	r7, #0
 800f0c2:	d06d      	beq.n	800f1a0 <udp_input+0x154>
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f0c4:	7a20      	ldrb	r0, [r4, #8]
 800f0c6:	b138      	cbz	r0, 800f0d8 <udp_input+0x8c>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f0c8:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800f0cc:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 800f0d0:	3201      	adds	r2, #1
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f0d2:	b2d2      	uxtb	r2, r2
 800f0d4:	4290      	cmp	r0, r2
 800f0d6:	d1eb      	bne.n	800f0b0 <udp_input+0x64>
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800f0d8:	6822      	ldr	r2, [r4, #0]
    if (broadcast != 0) {
 800f0da:	f1ba 0f00 	cmp.w	sl, #0
 800f0de:	d038      	beq.n	800f152 <udp_input+0x106>
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800f0e0:	b13a      	cbz	r2, 800f0f2 <udp_input+0xa6>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800f0e2:	f8d9 0014 	ldr.w	r0, [r9, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800f0e6:	1c43      	adds	r3, r0, #1
 800f0e8:	d003      	beq.n	800f0f2 <udp_input+0xa6>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800f0ea:	4050      	eors	r0, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800f0ec:	68bb      	ldr	r3, [r7, #8]
 800f0ee:	4218      	tst	r0, r3
 800f0f0:	d1de      	bne.n	800f0b0 <udp_input+0x64>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800f0f2:	7c20      	ldrb	r0, [r4, #16]
 800f0f4:	0743      	lsls	r3, r0, #29
 800f0f6:	d409      	bmi.n	800f10c <udp_input+0xc0>
        if (uncon_pcb == NULL) {
 800f0f8:	f1bb 0f00 	cmp.w	fp, #0
 800f0fc:	d059      	beq.n	800f1b2 <udp_input+0x166>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800f0fe:	f1ba 0f00 	cmp.w	sl, #0
 800f102:	d003      	beq.n	800f10c <udp_input+0xc0>
 800f104:	f8d9 0014 	ldr.w	r0, [r9, #20]
 800f108:	3001      	adds	r0, #1
 800f10a:	d069      	beq.n	800f1e0 <udp_input+0x194>
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800f10c:	8aa2      	ldrh	r2, [r4, #20]
 800f10e:	9803      	ldr	r0, [sp, #12]
 800f110:	4282      	cmp	r2, r0
 800f112:	d1cd      	bne.n	800f0b0 <udp_input+0x64>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800f114:	6862      	ldr	r2, [r4, #4]
      if ((pcb->remote_port == src) &&
 800f116:	b11a      	cbz	r2, 800f120 <udp_input+0xd4>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800f118:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800f11c:	4282      	cmp	r2, r0
 800f11e:	d1c7      	bne.n	800f0b0 <udp_input+0x64>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
        /* the first fully matching PCB */
        if (prev != NULL) {
 800f120:	b12e      	cbz	r6, 800f12e <udp_input+0xe2>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800f122:	68e3      	ldr	r3, [r4, #12]
          pcb->next = udp_pcbs;
 800f124:	4a40      	ldr	r2, [pc, #256]	; (800f228 <udp_input+0x1dc>)
          prev->next = pcb->next;
 800f126:	60f3      	str	r3, [r6, #12]
          pcb->next = udp_pcbs;
 800f128:	6813      	ldr	r3, [r2, #0]
          udp_pcbs = pcb;
 800f12a:	6014      	str	r4, [r2, #0]
          pcb->next = udp_pcbs;
 800f12c:	60e3      	str	r3, [r4, #12]
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800f12e:	2108      	movs	r1, #8
 800f130:	4640      	mov	r0, r8
 800f132:	f7fb fa0b 	bl	800a54c <pbuf_remove_header>
 800f136:	2800      	cmp	r0, #0
 800f138:	d15b      	bne.n	800f1f2 <udp_input+0x1a6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800f13a:	69a5      	ldr	r5, [r4, #24]
 800f13c:	b355      	cbz	r5, 800f194 <udp_input+0x148>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800f13e:	9b03      	ldr	r3, [sp, #12]
 800f140:	4642      	mov	r2, r8
 800f142:	69e0      	ldr	r0, [r4, #28]
 800f144:	4621      	mov	r1, r4
 800f146:	9300      	str	r3, [sp, #0]
 800f148:	4b39      	ldr	r3, [pc, #228]	; (800f230 <udp_input+0x1e4>)
 800f14a:	47a8      	blx	r5
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800f14c:	b005      	add	sp, #20
 800f14e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f152:	2a00      	cmp	r2, #0
 800f154:	d0cd      	beq.n	800f0f2 <udp_input+0xa6>
 800f156:	f8d9 0014 	ldr.w	r0, [r9, #20]
 800f15a:	4282      	cmp	r2, r0
 800f15c:	d0c9      	beq.n	800f0f2 <udp_input+0xa6>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800f15e:	68e2      	ldr	r2, [r4, #12]
 800f160:	4626      	mov	r6, r4
 800f162:	2a00      	cmp	r2, #0
 800f164:	d1a8      	bne.n	800f0b8 <udp_input+0x6c>
  if (pcb != NULL) {
 800f166:	f1bb 0f00 	cmp.w	fp, #0
 800f16a:	d15b      	bne.n	800f224 <udp_input+0x1d8>
  if (for_us) {
 800f16c:	687a      	ldr	r2, [r7, #4]
 800f16e:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800f172:	429a      	cmp	r2, r3
 800f174:	d10e      	bne.n	800f194 <udp_input+0x148>
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800f176:	2108      	movs	r1, #8
 800f178:	4640      	mov	r0, r8
 800f17a:	f7fb f9e7 	bl	800a54c <pbuf_remove_header>
 800f17e:	2800      	cmp	r0, #0
 800f180:	d137      	bne.n	800f1f2 <udp_input+0x1a6>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800f182:	f1ba 0f00 	cmp.w	sl, #0
 800f186:	d105      	bne.n	800f194 <udp_input+0x148>
 800f188:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800f18c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f190:	2be0      	cmp	r3, #224	; 0xe0
 800f192:	d13b      	bne.n	800f20c <udp_input+0x1c0>
      pbuf_free(p);
 800f194:	4640      	mov	r0, r8
}
 800f196:	b005      	add	sp, #20
 800f198:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      pbuf_free(p);
 800f19c:	f7fb ba42 	b.w	800a624 <pbuf_free>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800f1a0:	4663      	mov	r3, ip
 800f1a2:	2288      	movs	r2, #136	; 0x88
 800f1a4:	4823      	ldr	r0, [pc, #140]	; (800f234 <udp_input+0x1e8>)
 800f1a6:	f002 fa31 	bl	801160c <iprintf>
 800f1aa:	f8df c08c 	ldr.w	ip, [pc, #140]	; 800f238 <udp_input+0x1ec>
 800f1ae:	491f      	ldr	r1, [pc, #124]	; (800f22c <udp_input+0x1e0>)
 800f1b0:	e788      	b.n	800f0c4 <udp_input+0x78>
      if ((pcb->remote_port == src) &&
 800f1b2:	8aa2      	ldrh	r2, [r4, #20]
 800f1b4:	46a3      	mov	fp, r4
 800f1b6:	9803      	ldr	r0, [sp, #12]
 800f1b8:	4282      	cmp	r2, r0
 800f1ba:	f47f af79 	bne.w	800f0b0 <udp_input+0x64>
 800f1be:	e7a9      	b.n	800f114 <udp_input+0xc8>
  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800f1c0:	4b1d      	ldr	r3, [pc, #116]	; (800f238 <udp_input+0x1ec>)
 800f1c2:	22cf      	movs	r2, #207	; 0xcf
 800f1c4:	491d      	ldr	r1, [pc, #116]	; (800f23c <udp_input+0x1f0>)
 800f1c6:	481b      	ldr	r0, [pc, #108]	; (800f234 <udp_input+0x1e8>)
 800f1c8:	f002 fa20 	bl	801160c <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800f1cc:	2f00      	cmp	r7, #0
 800f1ce:	f47f af4b 	bne.w	800f068 <udp_input+0x1c>
 800f1d2:	4b19      	ldr	r3, [pc, #100]	; (800f238 <udp_input+0x1ec>)
 800f1d4:	22d0      	movs	r2, #208	; 0xd0
 800f1d6:	491a      	ldr	r1, [pc, #104]	; (800f240 <udp_input+0x1f4>)
 800f1d8:	4816      	ldr	r0, [pc, #88]	; (800f234 <udp_input+0x1e8>)
 800f1da:	f002 fa17 	bl	801160c <iprintf>
 800f1de:	e743      	b.n	800f068 <udp_input+0x1c>
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800f1e0:	6878      	ldr	r0, [r7, #4]
 800f1e2:	f8db 3000 	ldr.w	r3, [fp]
 800f1e6:	4283      	cmp	r3, r0
 800f1e8:	d090      	beq.n	800f10c <udp_input+0xc0>
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800f1ea:	4290      	cmp	r0, r2
 800f1ec:	bf08      	it	eq
 800f1ee:	46a3      	moveq	fp, r4
 800f1f0:	e78c      	b.n	800f10c <udp_input+0xc0>
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800f1f2:	4b11      	ldr	r3, [pc, #68]	; (800f238 <udp_input+0x1ec>)
 800f1f4:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800f1f8:	4912      	ldr	r1, [pc, #72]	; (800f244 <udp_input+0x1f8>)
 800f1fa:	480e      	ldr	r0, [pc, #56]	; (800f234 <udp_input+0x1e8>)
 800f1fc:	f002 fa06 	bl	801160c <iprintf>
      pbuf_free(p);
 800f200:	4640      	mov	r0, r8
}
 800f202:	b005      	add	sp, #20
 800f204:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      pbuf_free(p);
 800f208:	f7fb ba0c 	b.w	800a624 <pbuf_free>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800f20c:	f8b9 100c 	ldrh.w	r1, [r9, #12]
 800f210:	4640      	mov	r0, r8
 800f212:	3108      	adds	r1, #8
 800f214:	b209      	sxth	r1, r1
 800f216:	f7fb f9cd 	bl	800a5b4 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800f21a:	2103      	movs	r1, #3
 800f21c:	4640      	mov	r0, r8
 800f21e:	f000 fd73 	bl	800fd08 <icmp_dest_unreach>
 800f222:	e7b7      	b.n	800f194 <udp_input+0x148>
 800f224:	465c      	mov	r4, fp
 800f226:	e782      	b.n	800f12e <udp_input+0xe2>
 800f228:	240105e0 	.word	0x240105e0
 800f22c:	08014d1c 	.word	0x08014d1c
 800f230:	24009ac8 	.word	0x24009ac8
 800f234:	080128dc 	.word	0x080128dc
 800f238:	08014cb8 	.word	0x08014cb8
 800f23c:	08014ce8 	.word	0x08014ce8
 800f240:	08014d00 	.word	0x08014d00
 800f244:	08014d44 	.word	0x08014d44
 800f248:	24009ab8 	.word	0x24009ab8

0800f24c <udp_netif_ip_addr_changed>:
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800f24c:	b110      	cbz	r0, 800f254 <udp_netif_ip_addr_changed+0x8>
 800f24e:	6802      	ldr	r2, [r0, #0]
 800f250:	b101      	cbz	r1, 800f254 <udp_netif_ip_addr_changed+0x8>
 800f252:	b902      	cbnz	r2, 800f256 <udp_netif_ip_addr_changed+0xa>
 800f254:	4770      	bx	lr
 800f256:	680b      	ldr	r3, [r1, #0]
 800f258:	2b00      	cmp	r3, #0
 800f25a:	d0fb      	beq.n	800f254 <udp_netif_ip_addr_changed+0x8>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800f25c:	4b08      	ldr	r3, [pc, #32]	; (800f280 <udp_netif_ip_addr_changed+0x34>)
 800f25e:	681b      	ldr	r3, [r3, #0]
 800f260:	2b00      	cmp	r3, #0
 800f262:	d0f7      	beq.n	800f254 <udp_netif_ip_addr_changed+0x8>
{
 800f264:	b410      	push	{r4}
 800f266:	e000      	b.n	800f26a <udp_netif_ip_addr_changed+0x1e>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800f268:	6802      	ldr	r2, [r0, #0]
 800f26a:	681c      	ldr	r4, [r3, #0]
 800f26c:	4294      	cmp	r4, r2
 800f26e:	d101      	bne.n	800f274 <udp_netif_ip_addr_changed+0x28>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800f270:	680a      	ldr	r2, [r1, #0]
 800f272:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800f274:	68db      	ldr	r3, [r3, #12]
 800f276:	2b00      	cmp	r3, #0
 800f278:	d1f6      	bne.n	800f268 <udp_netif_ip_addr_changed+0x1c>
      }
    }
  }
}
 800f27a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f27e:	4770      	bx	lr
 800f280:	240105e0 	.word	0x240105e0

0800f284 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800f284:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f288:	468b      	mov	fp, r1
 800f28a:	2300      	movs	r3, #0
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
  s16_t empty = ARP_TABLE_SIZE;
  s16_t i = 0;
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800f28c:	f04f 080a 	mov.w	r8, #10
{
 800f290:	b085      	sub	sp, #20
 800f292:	4617      	mov	r7, r2
 800f294:	4e52      	ldr	r6, [pc, #328]	; (800f3e0 <etharp_find_entry+0x15c>)
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800f296:	465a      	mov	r2, fp
{
 800f298:	4605      	mov	r5, r0
 800f29a:	4631      	mov	r1, r6
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800f29c:	4699      	mov	r9, r3
  s16_t empty = ARP_TABLE_SIZE;
 800f29e:	4644      	mov	r4, r8
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800f2a0:	46c6      	mov	lr, r8
 800f2a2:	46c3      	mov	fp, r8
 800f2a4:	469a      	mov	sl, r3
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800f2a6:	9303      	str	r3, [sp, #12]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800f2a8:	e9cd 7201 	strd	r7, r2, [sp, #4]
 800f2ac:	e004      	b.n	800f2b8 <etharp_find_entry+0x34>
 800f2ae:	4664      	mov	r4, ip
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f2b0:	3301      	adds	r3, #1
 800f2b2:	3118      	adds	r1, #24
 800f2b4:	2b0a      	cmp	r3, #10
 800f2b6:	d016      	beq.n	800f2e6 <etharp_find_entry+0x62>
    u8_t state = arp_table[i].state;
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800f2b8:	2c0a      	cmp	r4, #10
 800f2ba:	fa0f fc83 	sxth.w	ip, r3
    u8_t state = arp_table[i].state;
 800f2be:	7d0a      	ldrb	r2, [r1, #20]
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800f2c0:	d13a      	bne.n	800f338 <etharp_find_entry+0xb4>
 800f2c2:	2a00      	cmp	r2, #0
 800f2c4:	d0f3      	beq.n	800f2ae <etharp_find_entry+0x2a>
      empty = i;
    } else if (state != ETHARP_STATE_EMPTY) {
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800f2c6:	b11d      	cbz	r5, 800f2d0 <etharp_find_entry+0x4c>
 800f2c8:	6828      	ldr	r0, [r5, #0]
 800f2ca:	684f      	ldr	r7, [r1, #4]
 800f2cc:	42b8      	cmp	r0, r7
 800f2ce:	d03e      	beq.n	800f34e <etharp_find_entry+0xca>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800f2d0:	2a01      	cmp	r2, #1
 800f2d2:	d034      	beq.n	800f33e <etharp_find_entry+0xba>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800f2d4:	8a4a      	ldrh	r2, [r1, #18]
 800f2d6:	454a      	cmp	r2, r9
 800f2d8:	d3ea      	bcc.n	800f2b0 <etharp_find_entry+0x2c>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f2da:	3301      	adds	r3, #1
          if (arp_table[i].ctime >= age_stable) {
 800f2dc:	4691      	mov	r9, r2
 800f2de:	46e6      	mov	lr, ip
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f2e0:	3118      	adds	r1, #24
 800f2e2:	2b0a      	cmp	r3, #10
 800f2e4:	d1e8      	bne.n	800f2b8 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800f2e6:	46da      	mov	sl, fp
 800f2e8:	e9dd 7b01 	ldrd	r7, fp, [sp, #4]
 800f2ec:	f1bb 0f01 	cmp.w	fp, #1
 800f2f0:	d172      	bne.n	800f3d8 <etharp_find_entry+0x154>
 800f2f2:	2c0a      	cmp	r4, #10
 800f2f4:	d032      	beq.n	800f35c <etharp_find_entry+0xd8>
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
    etharp_free_entry(i);
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800f2f6:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800f2fa:	46a1      	mov	r9, r4
 800f2fc:	ea4f 0844 	mov.w	r8, r4, lsl #1
 800f300:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 800f304:	7d1b      	ldrb	r3, [r3, #20]
 800f306:	b133      	cbz	r3, 800f316 <etharp_find_entry+0x92>
 800f308:	4b36      	ldr	r3, [pc, #216]	; (800f3e4 <etharp_find_entry+0x160>)
 800f30a:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800f30e:	4936      	ldr	r1, [pc, #216]	; (800f3e8 <etharp_find_entry+0x164>)
 800f310:	4836      	ldr	r0, [pc, #216]	; (800f3ec <etharp_find_entry+0x168>)
 800f312:	f002 f97b 	bl	801160c <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800f316:	b12d      	cbz	r5, 800f324 <etharp_find_entry+0xa0>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800f318:	eb08 0309 	add.w	r3, r8, r9
 800f31c:	682a      	ldr	r2, [r5, #0]
 800f31e:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 800f322:	605a      	str	r2, [r3, #4]
  }
  arp_table[i].ctime = 0;
 800f324:	44c8      	add	r8, r9
 800f326:	2300      	movs	r3, #0
 800f328:	eb06 06c8 	add.w	r6, r6, r8, lsl #3
 800f32c:	8273      	strh	r3, [r6, #18]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800f32e:	60b7      	str	r7, [r6, #8]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
}
 800f330:	4620      	mov	r0, r4
 800f332:	b005      	add	sp, #20
 800f334:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    } else if (state != ETHARP_STATE_EMPTY) {
 800f338:	2a00      	cmp	r2, #0
 800f33a:	d0b9      	beq.n	800f2b0 <etharp_find_entry+0x2c>
 800f33c:	e7c3      	b.n	800f2c6 <etharp_find_entry+0x42>
        if (arp_table[i].q != NULL) {
 800f33e:	680a      	ldr	r2, [r1, #0]
 800f340:	b3a2      	cbz	r2, 800f3ac <etharp_find_entry+0x128>
          if (arp_table[i].ctime >= age_queue) {
 800f342:	8a4a      	ldrh	r2, [r1, #18]
 800f344:	4552      	cmp	r2, sl
 800f346:	d3b3      	bcc.n	800f2b0 <etharp_find_entry+0x2c>
 800f348:	4692      	mov	sl, r2
 800f34a:	46e0      	mov	r8, ip
 800f34c:	e7b0      	b.n	800f2b0 <etharp_find_entry+0x2c>
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800f34e:	9f01      	ldr	r7, [sp, #4]
 800f350:	b117      	cbz	r7, 800f358 <etharp_find_entry+0xd4>
 800f352:	6888      	ldr	r0, [r1, #8]
 800f354:	42b8      	cmp	r0, r7
 800f356:	d1bb      	bne.n	800f2d0 <etharp_find_entry+0x4c>
 800f358:	4664      	mov	r4, ip
 800f35a:	e7e9      	b.n	800f330 <etharp_find_entry+0xac>
    if (old_stable < ARP_TABLE_SIZE) {
 800f35c:	f1be 0f0a 	cmp.w	lr, #10
 800f360:	d02c      	beq.n	800f3bc <etharp_find_entry+0x138>
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800f362:	eb0e 034e 	add.w	r3, lr, lr, lsl #1
 800f366:	46f1      	mov	r9, lr
 800f368:	ea4f 084e 	mov.w	r8, lr, lsl #1
 800f36c:	f856 3033 	ldr.w	r3, [r6, r3, lsl #3]
 800f370:	b383      	cbz	r3, 800f3d4 <etharp_find_entry+0x150>
 800f372:	464c      	mov	r4, r9
 800f374:	4b1b      	ldr	r3, [pc, #108]	; (800f3e4 <etharp_find_entry+0x160>)
 800f376:	f240 126d 	movw	r2, #365	; 0x16d
 800f37a:	491d      	ldr	r1, [pc, #116]	; (800f3f0 <etharp_find_entry+0x16c>)
 800f37c:	481b      	ldr	r0, [pc, #108]	; (800f3ec <etharp_find_entry+0x168>)
 800f37e:	f002 f945 	bl	801160c <iprintf>
  if (arp_table[i].q != NULL) {
 800f382:	eb09 0a49 	add.w	sl, r9, r9, lsl #1
 800f386:	ea4f 0849 	mov.w	r8, r9, lsl #1
 800f38a:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 800f38e:	f856 000a 	ldr.w	r0, [r6, sl]
 800f392:	b120      	cbz	r0, 800f39e <etharp_find_entry+0x11a>
    free_etharp_q(arp_table[i].q);
 800f394:	f7fb f946 	bl	800a624 <pbuf_free>
    arp_table[i].q = NULL;
 800f398:	2300      	movs	r3, #0
 800f39a:	f846 300a 	str.w	r3, [r6, sl]
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800f39e:	eb08 0309 	add.w	r3, r8, r9
 800f3a2:	2200      	movs	r2, #0
 800f3a4:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 800f3a8:	751a      	strb	r2, [r3, #20]
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800f3aa:	e7b4      	b.n	800f316 <etharp_find_entry+0x92>
          if (arp_table[i].ctime >= age_pending) {
 800f3ac:	8a4a      	ldrh	r2, [r1, #18]
 800f3ae:	9803      	ldr	r0, [sp, #12]
 800f3b0:	4282      	cmp	r2, r0
 800f3b2:	f4ff af7d 	bcc.w	800f2b0 <etharp_find_entry+0x2c>
 800f3b6:	46e3      	mov	fp, ip
 800f3b8:	9203      	str	r2, [sp, #12]
 800f3ba:	e779      	b.n	800f2b0 <etharp_find_entry+0x2c>
    } else if (old_pending < ARP_TABLE_SIZE) {
 800f3bc:	f1ba 0f0a 	cmp.w	sl, #10
 800f3c0:	d105      	bne.n	800f3ce <etharp_find_entry+0x14a>
    } else if (old_queue < ARP_TABLE_SIZE) {
 800f3c2:	f1b8 0f0a 	cmp.w	r8, #10
 800f3c6:	d007      	beq.n	800f3d8 <etharp_find_entry+0x154>
    etharp_free_entry(i);
 800f3c8:	4644      	mov	r4, r8
 800f3ca:	46c1      	mov	r9, r8
 800f3cc:	e7d9      	b.n	800f382 <etharp_find_entry+0xfe>
 800f3ce:	4654      	mov	r4, sl
 800f3d0:	46d1      	mov	r9, sl
 800f3d2:	e7d6      	b.n	800f382 <etharp_find_entry+0xfe>
 800f3d4:	4674      	mov	r4, lr
 800f3d6:	e7e2      	b.n	800f39e <etharp_find_entry+0x11a>
    return (s16_t)ERR_MEM;
 800f3d8:	f04f 34ff 	mov.w	r4, #4294967295
 800f3dc:	e7a8      	b.n	800f330 <etharp_find_entry+0xac>
 800f3de:	bf00      	nop
 800f3e0:	240105e4 	.word	0x240105e4
 800f3e4:	08014d60 	.word	0x08014d60
 800f3e8:	08014db0 	.word	0x08014db0
 800f3ec:	080128dc 	.word	0x080128dc
 800f3f0:	08014d98 	.word	0x08014d98

0800f3f4 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800f3f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f3f8:	b082      	sub	sp, #8
 800f3fa:	4688      	mov	r8, r1
 800f3fc:	4691      	mov	r9, r2
 800f3fe:	461f      	mov	r7, r3
 800f400:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
  struct pbuf *p;
  err_t result = ERR_OK;
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800f404:	4606      	mov	r6, r0
{
 800f406:	f8bd 4034 	ldrh.w	r4, [sp, #52]	; 0x34
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800f40a:	2800      	cmp	r0, #0
 800f40c:	d050      	beq.n	800f4b0 <etharp_raw+0xbc>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800f40e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f412:	211c      	movs	r1, #28
 800f414:	200e      	movs	r0, #14
 800f416:	f7fb f975 	bl	800a704 <pbuf_alloc>
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800f41a:	4605      	mov	r5, r0
 800f41c:	2800      	cmp	r0, #0
 800f41e:	d04f      	beq.n	800f4c0 <etharp_raw+0xcc>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800f420:	8943      	ldrh	r3, [r0, #10]
 800f422:	2b1b      	cmp	r3, #27
 800f424:	d93c      	bls.n	800f4a0 <etharp_raw+0xac>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800f426:	4620      	mov	r0, r4
  hdr = (struct etharp_hdr *)p->payload;
 800f428:	686c      	ldr	r4, [r5, #4]
  hdr->opcode = lwip_htons(opcode);
 800f42a:	f7fa f959 	bl	80096e0 <lwip_htons>
 800f42e:	80e0      	strh	r0, [r4, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800f430:	f896 302c 	ldrb.w	r3, [r6, #44]	; 0x2c
 800f434:	2b06      	cmp	r3, #6
 800f436:	d006      	beq.n	800f446 <etharp_raw+0x52>
 800f438:	4b23      	ldr	r3, [pc, #140]	; (800f4c8 <etharp_raw+0xd4>)
 800f43a:	f240 4269 	movw	r2, #1129	; 0x469
 800f43e:	4923      	ldr	r1, [pc, #140]	; (800f4cc <etharp_raw+0xd8>)
 800f440:	4823      	ldr	r0, [pc, #140]	; (800f4d0 <etharp_raw+0xdc>)
 800f442:	f002 f8e3 	bl	801160c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800f446:	6839      	ldr	r1, [r7, #0]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800f448:	4630      	mov	r0, r6
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800f44a:	2600      	movs	r6, #0
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800f44c:	464b      	mov	r3, r9
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800f44e:	60a1      	str	r1, [r4, #8]
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800f450:	4642      	mov	r2, r8
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800f452:	88b9      	ldrh	r1, [r7, #4]
 800f454:	81a1      	strh	r1, [r4, #12]
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800f456:	f8da 1000 	ldr.w	r1, [sl]
 800f45a:	f8c4 1012 	str.w	r1, [r4, #18]
 800f45e:	f8ba 1004 	ldrh.w	r1, [sl, #4]
 800f462:	82e1      	strh	r1, [r4, #22]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800f464:	990a      	ldr	r1, [sp, #40]	; 0x28
 800f466:	6809      	ldr	r1, [r1, #0]
 800f468:	f8c4 100e 	str.w	r1, [r4, #14]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800f46c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800f46e:	6809      	ldr	r1, [r1, #0]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800f470:	7026      	strb	r6, [r4, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800f472:	61a1      	str	r1, [r4, #24]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800f474:	2101      	movs	r1, #1
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800f476:	70e6      	strb	r6, [r4, #3]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800f478:	7061      	strb	r1, [r4, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800f47a:	2108      	movs	r1, #8
 800f47c:	70a1      	strb	r1, [r4, #2]
  hdr->hwlen = ETH_HWADDR_LEN;
 800f47e:	2106      	movs	r1, #6
 800f480:	7121      	strb	r1, [r4, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800f482:	2104      	movs	r1, #4
 800f484:	7161      	strb	r1, [r4, #5]
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800f486:	f640 0106 	movw	r1, #2054	; 0x806
 800f48a:	9100      	str	r1, [sp, #0]
 800f48c:	4629      	mov	r1, r5
 800f48e:	f001 fab5 	bl	80109fc <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800f492:	4628      	mov	r0, r5
 800f494:	f7fb f8c6 	bl	800a624 <pbuf_free>
  p = NULL;
  /* could not allocate pbuf for ARP request */

  return result;
 800f498:	4630      	mov	r0, r6
}
 800f49a:	b002      	add	sp, #8
 800f49c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800f4a0:	4b09      	ldr	r3, [pc, #36]	; (800f4c8 <etharp_raw+0xd4>)
 800f4a2:	f240 4262 	movw	r2, #1122	; 0x462
 800f4a6:	490b      	ldr	r1, [pc, #44]	; (800f4d4 <etharp_raw+0xe0>)
 800f4a8:	4809      	ldr	r0, [pc, #36]	; (800f4d0 <etharp_raw+0xdc>)
 800f4aa:	f002 f8af 	bl	801160c <iprintf>
 800f4ae:	e7ba      	b.n	800f426 <etharp_raw+0x32>
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800f4b0:	4b05      	ldr	r3, [pc, #20]	; (800f4c8 <etharp_raw+0xd4>)
 800f4b2:	f240 4257 	movw	r2, #1111	; 0x457
 800f4b6:	4908      	ldr	r1, [pc, #32]	; (800f4d8 <etharp_raw+0xe4>)
 800f4b8:	4805      	ldr	r0, [pc, #20]	; (800f4d0 <etharp_raw+0xdc>)
 800f4ba:	f002 f8a7 	bl	801160c <iprintf>
 800f4be:	e7a6      	b.n	800f40e <etharp_raw+0x1a>
    return ERR_MEM;
 800f4c0:	f04f 30ff 	mov.w	r0, #4294967295
 800f4c4:	e7e9      	b.n	800f49a <etharp_raw+0xa6>
 800f4c6:	bf00      	nop
 800f4c8:	08014d60 	.word	0x08014d60
 800f4cc:	08014e10 	.word	0x08014e10
 800f4d0:	080128dc 	.word	0x080128dc
 800f4d4:	08014ddc 	.word	0x08014ddc
 800f4d8:	08013120 	.word	0x08013120

0800f4dc <etharp_output_to_arp_index>:
{
 800f4dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800f4e0:	4f39      	ldr	r7, [pc, #228]	; (800f5c8 <etharp_output_to_arp_index+0xec>)
 800f4e2:	eb02 0942 	add.w	r9, r2, r2, lsl #1
{
 800f4e6:	b084      	sub	sp, #16
 800f4e8:	4614      	mov	r4, r2
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800f4ea:	eb07 09c9 	add.w	r9, r7, r9, lsl #3
{
 800f4ee:	4605      	mov	r5, r0
 800f4f0:	460e      	mov	r6, r1
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800f4f2:	ea4f 0842 	mov.w	r8, r2, lsl #1
 800f4f6:	f899 3014 	ldrb.w	r3, [r9, #20]
 800f4fa:	2b01      	cmp	r3, #1
 800f4fc:	d93d      	bls.n	800f57a <etharp_output_to_arp_index+0x9e>
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800f4fe:	2b02      	cmp	r3, #2
 800f500:	d013      	beq.n	800f52a <etharp_output_to_arp_index+0x4e>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800f502:	f04f 0918 	mov.w	r9, #24
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800f506:	f105 0a26 	add.w	sl, r5, #38	; 0x26
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800f50a:	fb09 7904 	mla	r9, r9, r4, r7
 800f50e:	f109 090c 	add.w	r9, r9, #12
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800f512:	f44f 6400 	mov.w	r4, #2048	; 0x800
 800f516:	464b      	mov	r3, r9
 800f518:	4652      	mov	r2, sl
 800f51a:	4631      	mov	r1, r6
 800f51c:	4628      	mov	r0, r5
 800f51e:	9400      	str	r4, [sp, #0]
 800f520:	f001 fa6c 	bl	80109fc <ethernet_output>
}
 800f524:	b004      	add	sp, #16
 800f526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800f52a:	44a0      	add	r8, r4
 800f52c:	eb07 08c8 	add.w	r8, r7, r8, lsl #3
 800f530:	f8b8 3012 	ldrh.w	r3, [r8, #18]
 800f534:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800f538:	d829      	bhi.n	800f58e <etharp_output_to_arp_index+0xb2>
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800f53a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800f53e:	d3e0      	bcc.n	800f502 <etharp_output_to_arp_index+0x26>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800f540:	eb04 0444 	add.w	r4, r4, r4, lsl #1
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800f544:	2301      	movs	r3, #1
 800f546:	f105 0a26 	add.w	sl, r5, #38	; 0x26
 800f54a:	4628      	mov	r0, r5
 800f54c:	00e4      	lsls	r4, r4, #3
 800f54e:	9303      	str	r3, [sp, #12]
 800f550:	4b1e      	ldr	r3, [pc, #120]	; (800f5cc <etharp_output_to_arp_index+0xf0>)
 800f552:	4651      	mov	r1, sl
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800f554:	f104 090c 	add.w	r9, r4, #12
 800f558:	3404      	adds	r4, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800f55a:	9301      	str	r3, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800f55c:	1d2b      	adds	r3, r5, #4
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800f55e:	44b9      	add	r9, r7
 800f560:	4427      	add	r7, r4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800f562:	9300      	str	r3, [sp, #0]
 800f564:	4653      	mov	r3, sl
 800f566:	464a      	mov	r2, r9
 800f568:	9702      	str	r7, [sp, #8]
 800f56a:	f7ff ff43 	bl	800f3f4 <etharp_raw>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800f56e:	2800      	cmp	r0, #0
 800f570:	d1cf      	bne.n	800f512 <etharp_output_to_arp_index+0x36>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800f572:	2303      	movs	r3, #3
 800f574:	f888 3014 	strb.w	r3, [r8, #20]
 800f578:	e7cb      	b.n	800f512 <etharp_output_to_arp_index+0x36>
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800f57a:	4b15      	ldr	r3, [pc, #84]	; (800f5d0 <etharp_output_to_arp_index+0xf4>)
 800f57c:	f240 22ee 	movw	r2, #750	; 0x2ee
 800f580:	4914      	ldr	r1, [pc, #80]	; (800f5d4 <etharp_output_to_arp_index+0xf8>)
 800f582:	4815      	ldr	r0, [pc, #84]	; (800f5d8 <etharp_output_to_arp_index+0xfc>)
 800f584:	f002 f842 	bl	801160c <iprintf>
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800f588:	f899 3014 	ldrb.w	r3, [r9, #20]
 800f58c:	e7b7      	b.n	800f4fe <etharp_output_to_arp_index+0x22>
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800f58e:	eb04 0944 	add.w	r9, r4, r4, lsl #1
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800f592:	2301      	movs	r3, #1
 800f594:	f105 0a26 	add.w	sl, r5, #38	; 0x26
 800f598:	4a10      	ldr	r2, [pc, #64]	; (800f5dc <etharp_output_to_arp_index+0x100>)
 800f59a:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 800f59e:	9303      	str	r3, [sp, #12]
 800f5a0:	4651      	mov	r1, sl
 800f5a2:	4628      	mov	r0, r5
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800f5a4:	f109 0304 	add.w	r3, r9, #4
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800f5a8:	f109 090c 	add.w	r9, r9, #12
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800f5ac:	443b      	add	r3, r7
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800f5ae:	44b9      	add	r9, r7
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800f5b0:	9302      	str	r3, [sp, #8]
 800f5b2:	4b06      	ldr	r3, [pc, #24]	; (800f5cc <etharp_output_to_arp_index+0xf0>)
 800f5b4:	9301      	str	r3, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800f5b6:	1d2b      	adds	r3, r5, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800f5b8:	9300      	str	r3, [sp, #0]
 800f5ba:	4653      	mov	r3, sl
 800f5bc:	f7ff ff1a 	bl	800f3f4 <etharp_raw>
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800f5c0:	2800      	cmp	r0, #0
 800f5c2:	d0d6      	beq.n	800f572 <etharp_output_to_arp_index+0x96>
 800f5c4:	e7a5      	b.n	800f512 <etharp_output_to_arp_index+0x36>
 800f5c6:	bf00      	nop
 800f5c8:	240105e4 	.word	0x240105e4
 800f5cc:	0801523c 	.word	0x0801523c
 800f5d0:	08014d60 	.word	0x08014d60
 800f5d4:	08014e54 	.word	0x08014e54
 800f5d8:	080128dc 	.word	0x080128dc
 800f5dc:	08015234 	.word	0x08015234

0800f5e0 <etharp_tmr>:
{
 800f5e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f5e4:	4c20      	ldr	r4, [pc, #128]	; (800f668 <etharp_tmr+0x88>)
 800f5e6:	b084      	sub	sp, #16
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800f5e8:	2600      	movs	r6, #0
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800f5ea:	f8df 8084 	ldr.w	r8, [pc, #132]	; 800f670 <etharp_tmr+0x90>
 800f5ee:	4f1f      	ldr	r7, [pc, #124]	; (800f66c <etharp_tmr+0x8c>)
 800f5f0:	f104 05f0 	add.w	r5, r4, #240	; 0xf0
 800f5f4:	e00c      	b.n	800f610 <etharp_tmr+0x30>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800f5f6:	2a01      	cmp	r2, #1
 800f5f8:	d101      	bne.n	800f5fe <etharp_tmr+0x1e>
 800f5fa:	2b04      	cmp	r3, #4
 800f5fc:	d812      	bhi.n	800f624 <etharp_tmr+0x44>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800f5fe:	2a03      	cmp	r2, #3
 800f600:	d01e      	beq.n	800f640 <etharp_tmr+0x60>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800f602:	2a04      	cmp	r2, #4
 800f604:	d01f      	beq.n	800f646 <etharp_tmr+0x66>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800f606:	2a01      	cmp	r2, #1
 800f608:	d020      	beq.n	800f64c <etharp_tmr+0x6c>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f60a:	3418      	adds	r4, #24
 800f60c:	42ac      	cmp	r4, r5
 800f60e:	d014      	beq.n	800f63a <etharp_tmr+0x5a>
    u8_t state = arp_table[i].state;
 800f610:	7c22      	ldrb	r2, [r4, #16]
    if (state != ETHARP_STATE_EMPTY
 800f612:	2a00      	cmp	r2, #0
 800f614:	d0f9      	beq.n	800f60a <etharp_tmr+0x2a>
      arp_table[i].ctime++;
 800f616:	89e3      	ldrh	r3, [r4, #14]
 800f618:	3301      	adds	r3, #1
 800f61a:	b29b      	uxth	r3, r3
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800f61c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
      arp_table[i].ctime++;
 800f620:	81e3      	strh	r3, [r4, #14]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800f622:	d3e8      	bcc.n	800f5f6 <etharp_tmr+0x16>
  if (arp_table[i].q != NULL) {
 800f624:	f854 0c04 	ldr.w	r0, [r4, #-4]
 800f628:	b118      	cbz	r0, 800f632 <etharp_tmr+0x52>
    free_etharp_q(arp_table[i].q);
 800f62a:	f7fa fffb 	bl	800a624 <pbuf_free>
    arp_table[i].q = NULL;
 800f62e:	f844 6c04 	str.w	r6, [r4, #-4]
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800f632:	7426      	strb	r6, [r4, #16]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f634:	3418      	adds	r4, #24
 800f636:	42ac      	cmp	r4, r5
 800f638:	d1ea      	bne.n	800f610 <etharp_tmr+0x30>
}
 800f63a:	b004      	add	sp, #16
 800f63c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800f640:	2304      	movs	r3, #4
 800f642:	7423      	strb	r3, [r4, #16]
 800f644:	e7e1      	b.n	800f60a <etharp_tmr+0x2a>
        arp_table[i].state = ETHARP_STATE_STABLE;
 800f646:	2302      	movs	r3, #2
 800f648:	7423      	strb	r3, [r4, #16]
 800f64a:	e7de      	b.n	800f60a <etharp_tmr+0x2a>
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800f64c:	6860      	ldr	r0, [r4, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800f64e:	f8cd 8004 	str.w	r8, [sp, #4]
 800f652:	f100 0326 	add.w	r3, r0, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800f656:	1d01      	adds	r1, r0, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800f658:	e9cd 4202 	strd	r4, r2, [sp, #8]
 800f65c:	9100      	str	r1, [sp, #0]
 800f65e:	463a      	mov	r2, r7
 800f660:	4619      	mov	r1, r3
 800f662:	f7ff fec7 	bl	800f3f4 <etharp_raw>
 800f666:	e7d0      	b.n	800f60a <etharp_tmr+0x2a>
 800f668:	240105e8 	.word	0x240105e8
 800f66c:	08015234 	.word	0x08015234
 800f670:	0801523c 	.word	0x0801523c

0800f674 <etharp_cleanup_netif>:
{
 800f674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f676:	4c0a      	ldr	r4, [pc, #40]	; (800f6a0 <etharp_cleanup_netif+0x2c>)
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800f678:	2700      	movs	r7, #0
{
 800f67a:	4606      	mov	r6, r0
 800f67c:	f104 05f0 	add.w	r5, r4, #240	; 0xf0
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800f680:	7d23      	ldrb	r3, [r4, #20]
 800f682:	b113      	cbz	r3, 800f68a <etharp_cleanup_netif+0x16>
 800f684:	68a3      	ldr	r3, [r4, #8]
 800f686:	42b3      	cmp	r3, r6
 800f688:	d003      	beq.n	800f692 <etharp_cleanup_netif+0x1e>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f68a:	3418      	adds	r4, #24
 800f68c:	42ac      	cmp	r4, r5
 800f68e:	d1f7      	bne.n	800f680 <etharp_cleanup_netif+0xc>
}
 800f690:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (arp_table[i].q != NULL) {
 800f692:	6820      	ldr	r0, [r4, #0]
 800f694:	b110      	cbz	r0, 800f69c <etharp_cleanup_netif+0x28>
    free_etharp_q(arp_table[i].q);
 800f696:	f7fa ffc5 	bl	800a624 <pbuf_free>
    arp_table[i].q = NULL;
 800f69a:	6027      	str	r7, [r4, #0]
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800f69c:	7527      	strb	r7, [r4, #20]
}
 800f69e:	e7f4      	b.n	800f68a <etharp_cleanup_netif+0x16>
 800f6a0:	240105e4 	.word	0x240105e4

0800f6a4 <etharp_input>:
{
 800f6a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6a8:	460d      	mov	r5, r1
 800f6aa:	b087      	sub	sp, #28
 800f6ac:	4604      	mov	r4, r0
  LWIP_ASSERT_CORE_LOCKED();
 800f6ae:	f7f7 fae5 	bl	8006c7c <sys_check_core_locking>
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800f6b2:	2d00      	cmp	r5, #0
 800f6b4:	d07b      	beq.n	800f7ae <etharp_input+0x10a>
  hdr = (struct etharp_hdr *)p->payload;
 800f6b6:	6866      	ldr	r6, [r4, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800f6b8:	8833      	ldrh	r3, [r6, #0]
 800f6ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f6be:	d102      	bne.n	800f6c6 <etharp_input+0x22>
 800f6c0:	7933      	ldrb	r3, [r6, #4]
 800f6c2:	2b06      	cmp	r3, #6
 800f6c4:	d005      	beq.n	800f6d2 <etharp_input+0x2e>
  pbuf_free(p);
 800f6c6:	4620      	mov	r0, r4
}
 800f6c8:	b007      	add	sp, #28
 800f6ca:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 800f6ce:	f7fa bfa9 	b.w	800a624 <pbuf_free>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800f6d2:	7973      	ldrb	r3, [r6, #5]
 800f6d4:	2b04      	cmp	r3, #4
 800f6d6:	d1f6      	bne.n	800f6c6 <etharp_input+0x22>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800f6d8:	8873      	ldrh	r3, [r6, #2]
 800f6da:	2b08      	cmp	r3, #8
 800f6dc:	d1f3      	bne.n	800f6c6 <etharp_input+0x22>
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800f6de:	f8d6 a00e 	ldr.w	sl, [r6, #14]
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800f6e2:	f106 0808 	add.w	r8, r6, #8
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800f6e6:	686f      	ldr	r7, [r5, #4]
 800f6e8:	69b3      	ldr	r3, [r6, #24]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800f6ea:	f8cd a014 	str.w	sl, [sp, #20]
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800f6ee:	2f00      	cmp	r7, #0
 800f6f0:	d167      	bne.n	800f7c2 <etharp_input+0x11e>
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800f6f2:	f04f 0b02 	mov.w	fp, #2
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800f6f6:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 800f6fa:	2b06      	cmp	r3, #6
 800f6fc:	d165      	bne.n	800f7ca <etharp_input+0x126>
  if (ip4_addr_isany(ipaddr) ||
 800f6fe:	f1ba 0f00 	cmp.w	sl, #0
 800f702:	d03e      	beq.n	800f782 <etharp_input+0xde>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800f704:	4629      	mov	r1, r5
 800f706:	4650      	mov	r0, sl
 800f708:	f000 fcae 	bl	8010068 <ip4_addr_isbroadcast_u32>
  if (ip4_addr_isany(ipaddr) ||
 800f70c:	4681      	mov	r9, r0
 800f70e:	bbc0      	cbnz	r0, 800f782 <etharp_input+0xde>
      ip4_addr_ismulticast(ipaddr)) {
 800f710:	f00a 0af0 	and.w	sl, sl, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800f714:	f1ba 0fe0 	cmp.w	sl, #224	; 0xe0
 800f718:	d033      	beq.n	800f782 <etharp_input+0xde>
  i = etharp_find_entry(ipaddr, flags, netif);
 800f71a:	4659      	mov	r1, fp
 800f71c:	462a      	mov	r2, r5
 800f71e:	a805      	add	r0, sp, #20
 800f720:	f7ff fdb0 	bl	800f284 <etharp_find_entry>
  if (i < 0) {
 800f724:	1e03      	subs	r3, r0, #0
 800f726:	db2c      	blt.n	800f782 <etharp_input+0xde>
    arp_table[i].state = ETHARP_STATE_STABLE;
 800f728:	492d      	ldr	r1, [pc, #180]	; (800f7e0 <etharp_input+0x13c>)
 800f72a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800f72e:	2002      	movs	r0, #2
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800f730:	f04f 0e18 	mov.w	lr, #24
    arp_table[i].state = ETHARP_STATE_STABLE;
 800f734:	eb01 0cc2 	add.w	ip, r1, r2, lsl #3
 800f738:	00d2      	lsls	r2, r2, #3
 800f73a:	f88c 0014 	strb.w	r0, [ip, #20]
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800f73e:	200c      	movs	r0, #12
  arp_table[i].netif = netif;
 800f740:	f8cc 5008 	str.w	r5, [ip, #8]
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800f744:	fb13 030e 	smlabb	r3, r3, lr, r0
 800f748:	f8d8 0000 	ldr.w	r0, [r8]
 800f74c:	50c8      	str	r0, [r1, r3]
 800f74e:	440b      	add	r3, r1
 800f750:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 800f754:	8098      	strh	r0, [r3, #4]
  if (arp_table[i].q != NULL) {
 800f756:	f851 a002 	ldr.w	sl, [r1, r2]
  arp_table[i].ctime = 0;
 800f75a:	f8ac 9012 	strh.w	r9, [ip, #18]
  if (arp_table[i].q != NULL) {
 800f75e:	f1ba 0f00 	cmp.w	sl, #0
 800f762:	d00e      	beq.n	800f782 <etharp_input+0xde>
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800f764:	f44f 6300 	mov.w	r3, #2048	; 0x800
    arp_table[i].q = NULL;
 800f768:	f841 9002 	str.w	r9, [r1, r2]
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800f76c:	4628      	mov	r0, r5
 800f76e:	f105 0226 	add.w	r2, r5, #38	; 0x26
 800f772:	9300      	str	r3, [sp, #0]
 800f774:	4651      	mov	r1, sl
 800f776:	4643      	mov	r3, r8
 800f778:	f001 f940 	bl	80109fc <ethernet_output>
    pbuf_free(p);
 800f77c:	4650      	mov	r0, sl
 800f77e:	f7fa ff51 	bl	800a624 <pbuf_free>
  switch (hdr->opcode) {
 800f782:	88f3      	ldrh	r3, [r6, #6]
      if (for_us) {
 800f784:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f788:	d19d      	bne.n	800f6c6 <etharp_input+0x22>
 800f78a:	2f00      	cmp	r7, #0
 800f78c:	d09b      	beq.n	800f6c6 <etharp_input+0x22>
        etharp_raw(netif,
 800f78e:	2102      	movs	r1, #2
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800f790:	f105 0326 	add.w	r3, r5, #38	; 0x26
        etharp_raw(netif,
 800f794:	4642      	mov	r2, r8
 800f796:	4628      	mov	r0, r5
 800f798:	9103      	str	r1, [sp, #12]
 800f79a:	a905      	add	r1, sp, #20
 800f79c:	f8cd 8004 	str.w	r8, [sp, #4]
 800f7a0:	9102      	str	r1, [sp, #8]
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800f7a2:	1d29      	adds	r1, r5, #4
        etharp_raw(netif,
 800f7a4:	9100      	str	r1, [sp, #0]
 800f7a6:	4619      	mov	r1, r3
 800f7a8:	f7ff fe24 	bl	800f3f4 <etharp_raw>
 800f7ac:	e78b      	b.n	800f6c6 <etharp_input+0x22>
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800f7ae:	4b0d      	ldr	r3, [pc, #52]	; (800f7e4 <etharp_input+0x140>)
 800f7b0:	f240 228a 	movw	r2, #650	; 0x28a
 800f7b4:	490c      	ldr	r1, [pc, #48]	; (800f7e8 <etharp_input+0x144>)
 800f7b6:	480d      	ldr	r0, [pc, #52]	; (800f7ec <etharp_input+0x148>)
}
 800f7b8:	b007      	add	sp, #28
 800f7ba:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800f7be:	f001 bf25 	b.w	801160c <iprintf>
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800f7c2:	429f      	cmp	r7, r3
 800f7c4:	d009      	beq.n	800f7da <etharp_input+0x136>
 800f7c6:	2700      	movs	r7, #0
 800f7c8:	e793      	b.n	800f6f2 <etharp_input+0x4e>
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800f7ca:	4b06      	ldr	r3, [pc, #24]	; (800f7e4 <etharp_input+0x140>)
 800f7cc:	f240 12a9 	movw	r2, #425	; 0x1a9
 800f7d0:	4907      	ldr	r1, [pc, #28]	; (800f7f0 <etharp_input+0x14c>)
 800f7d2:	4806      	ldr	r0, [pc, #24]	; (800f7ec <etharp_input+0x148>)
 800f7d4:	f001 ff1a 	bl	801160c <iprintf>
 800f7d8:	e791      	b.n	800f6fe <etharp_input+0x5a>
 800f7da:	2701      	movs	r7, #1
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800f7dc:	46bb      	mov	fp, r7
 800f7de:	e78a      	b.n	800f6f6 <etharp_input+0x52>
 800f7e0:	240105e4 	.word	0x240105e4
 800f7e4:	08014d60 	.word	0x08014d60
 800f7e8:	08013120 	.word	0x08013120
 800f7ec:	080128dc 	.word	0x080128dc
 800f7f0:	08014ea4 	.word	0x08014ea4

0800f7f4 <etharp_query>:
{
 800f7f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7f8:	460e      	mov	r6, r1
 800f7fa:	b085      	sub	sp, #20
 800f7fc:	4605      	mov	r5, r0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800f7fe:	4601      	mov	r1, r0
 800f800:	6830      	ldr	r0, [r6, #0]
{
 800f802:	4617      	mov	r7, r2
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800f804:	f000 fc30 	bl	8010068 <ip4_addr_isbroadcast_u32>
 800f808:	2800      	cmp	r0, #0
 800f80a:	f040 8099 	bne.w	800f940 <etharp_query+0x14c>
      ip4_addr_ismulticast(ipaddr) ||
 800f80e:	6833      	ldr	r3, [r6, #0]
 800f810:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
      ip4_addr_isany(ipaddr)) {
 800f814:	2ae0      	cmp	r2, #224	; 0xe0
 800f816:	f000 8093 	beq.w	800f940 <etharp_query+0x14c>
 800f81a:	2b00      	cmp	r3, #0
 800f81c:	f000 8090 	beq.w	800f940 <etharp_query+0x14c>
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800f820:	462a      	mov	r2, r5
 800f822:	2101      	movs	r1, #1
 800f824:	4630      	mov	r0, r6
 800f826:	f7ff fd2d 	bl	800f284 <etharp_find_entry>
  if (i_err < 0) {
 800f82a:	f1b0 0800 	subs.w	r8, r0, #0
 800f82e:	db4c      	blt.n	800f8ca <etharp_query+0xd6>
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800f830:	f1b8 0f7e 	cmp.w	r8, #126	; 0x7e
 800f834:	dc41      	bgt.n	800f8ba <etharp_query+0xc6>
  i = (netif_addr_idx_t)i_err;
 800f836:	fa5f f888 	uxtb.w	r8, r8
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800f83a:	f8df a144 	ldr.w	sl, [pc, #324]	; 800f980 <etharp_query+0x18c>
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800f83e:	f105 0426 	add.w	r4, r5, #38	; 0x26
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800f842:	eb08 0948 	add.w	r9, r8, r8, lsl #1
 800f846:	ea4f 0b48 	mov.w	fp, r8, lsl #1
 800f84a:	eb0a 09c9 	add.w	r9, sl, r9, lsl #3
 800f84e:	f899 3014 	ldrb.w	r3, [r9, #20]
 800f852:	b14b      	cbz	r3, 800f868 <etharp_query+0x74>
  if (is_new_entry || (q == NULL)) {
 800f854:	2f00      	cmp	r7, #0
 800f856:	d079      	beq.n	800f94c <etharp_query+0x158>
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800f858:	2b01      	cmp	r3, #1
  err_t result = ERR_MEM;
 800f85a:	f04f 30ff 	mov.w	r0, #4294967295
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800f85e:	d81a      	bhi.n	800f896 <etharp_query+0xa2>
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800f860:	d038      	beq.n	800f8d4 <etharp_query+0xe0>
}
 800f862:	b005      	add	sp, #20
 800f864:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    arp_table[i].state = ETHARP_STATE_PENDING;
 800f868:	2301      	movs	r3, #1
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800f86a:	9602      	str	r6, [sp, #8]
    arp_table[i].netif = netif;
 800f86c:	f8c9 5008 	str.w	r5, [r9, #8]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800f870:	4621      	mov	r1, r4
 800f872:	9303      	str	r3, [sp, #12]
 800f874:	4628      	mov	r0, r5
    arp_table[i].state = ETHARP_STATE_PENDING;
 800f876:	f889 3014 	strb.w	r3, [r9, #20]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800f87a:	4b3b      	ldr	r3, [pc, #236]	; (800f968 <etharp_query+0x174>)
 800f87c:	4a3b      	ldr	r2, [pc, #236]	; (800f96c <etharp_query+0x178>)
 800f87e:	9301      	str	r3, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800f880:	1d2b      	adds	r3, r5, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800f882:	9300      	str	r3, [sp, #0]
 800f884:	4623      	mov	r3, r4
 800f886:	f7ff fdb5 	bl	800f3f4 <etharp_raw>
    if (q == NULL) {
 800f88a:	2f00      	cmp	r7, #0
 800f88c:	d0e9      	beq.n	800f862 <etharp_query+0x6e>
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800f88e:	f899 3014 	ldrb.w	r3, [r9, #20]
 800f892:	2b01      	cmp	r3, #1
 800f894:	d9e4      	bls.n	800f860 <etharp_query+0x6c>
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800f896:	2318      	movs	r3, #24
 800f898:	4622      	mov	r2, r4
 800f89a:	f44f 6400 	mov.w	r4, #2048	; 0x800
 800f89e:	4639      	mov	r1, r7
 800f8a0:	fb03 a308 	mla	r3, r3, r8, sl
 800f8a4:	4628      	mov	r0, r5
 800f8a6:	9400      	str	r4, [sp, #0]
    ETHARP_SET_ADDRHINT(netif, i);
 800f8a8:	4c31      	ldr	r4, [pc, #196]	; (800f970 <etharp_query+0x17c>)
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800f8aa:	330c      	adds	r3, #12
    ETHARP_SET_ADDRHINT(netif, i);
 800f8ac:	f884 8000 	strb.w	r8, [r4]
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800f8b0:	f001 f8a4 	bl	80109fc <ethernet_output>
}
 800f8b4:	b005      	add	sp, #20
 800f8b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800f8ba:	4b2e      	ldr	r3, [pc, #184]	; (800f974 <etharp_query+0x180>)
 800f8bc:	f240 32c1 	movw	r2, #961	; 0x3c1
 800f8c0:	492d      	ldr	r1, [pc, #180]	; (800f978 <etharp_query+0x184>)
 800f8c2:	482e      	ldr	r0, [pc, #184]	; (800f97c <etharp_query+0x188>)
 800f8c4:	f001 fea2 	bl	801160c <iprintf>
 800f8c8:	e7b5      	b.n	800f836 <etharp_query+0x42>
    return (err_t)i_err;
 800f8ca:	fa4f f088 	sxtb.w	r0, r8
}
 800f8ce:	b005      	add	sp, #20
 800f8d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f8d4:	463c      	mov	r4, r7
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800f8d6:	4d27      	ldr	r5, [pc, #156]	; (800f974 <etharp_query+0x180>)
 800f8d8:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 800f984 <etharp_query+0x190>
 800f8dc:	4e27      	ldr	r6, [pc, #156]	; (800f97c <etharp_query+0x188>)
 800f8de:	e004      	b.n	800f8ea <etharp_query+0xf6>
      if (PBUF_NEEDS_COPY(p)) {
 800f8e0:	7b23      	ldrb	r3, [r4, #12]
 800f8e2:	065a      	lsls	r2, r3, #25
 800f8e4:	d412      	bmi.n	800f90c <etharp_query+0x118>
      p = p->next;
 800f8e6:	6824      	ldr	r4, [r4, #0]
    while (p) {
 800f8e8:	b334      	cbz	r4, 800f938 <etharp_query+0x144>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800f8ea:	8962      	ldrh	r2, [r4, #10]
 800f8ec:	8923      	ldrh	r3, [r4, #8]
 800f8ee:	429a      	cmp	r2, r3
 800f8f0:	d1f6      	bne.n	800f8e0 <etharp_query+0xec>
 800f8f2:	6822      	ldr	r2, [r4, #0]
 800f8f4:	462b      	mov	r3, r5
 800f8f6:	b132      	cbz	r2, 800f906 <etharp_query+0x112>
 800f8f8:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800f8fc:	4649      	mov	r1, r9
 800f8fe:	4630      	mov	r0, r6
 800f900:	f001 fe84 	bl	801160c <iprintf>
 800f904:	e7ec      	b.n	800f8e0 <etharp_query+0xec>
      if (PBUF_NEEDS_COPY(p)) {
 800f906:	7b23      	ldrb	r3, [r4, #12]
 800f908:	065b      	lsls	r3, r3, #25
 800f90a:	d515      	bpl.n	800f938 <etharp_query+0x144>
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800f90c:	463a      	mov	r2, r7
 800f90e:	f44f 7120 	mov.w	r1, #640	; 0x280
 800f912:	200e      	movs	r0, #14
 800f914:	f7fb f8ce 	bl	800aab4 <pbuf_clone>
    if (p != NULL) {
 800f918:	4607      	mov	r7, r0
 800f91a:	b1a0      	cbz	r0, 800f946 <etharp_query+0x152>
      if (arp_table[i].q != NULL) {
 800f91c:	eb0b 0308 	add.w	r3, fp, r8
 800f920:	f85a 0033 	ldr.w	r0, [sl, r3, lsl #3]
 800f924:	b108      	cbz	r0, 800f92a <etharp_query+0x136>
        pbuf_free(arp_table[i].q);
 800f926:	f7fa fe7d 	bl	800a624 <pbuf_free>
      arp_table[i].q = p;
 800f92a:	44d8      	add	r8, fp
      result = ERR_OK;
 800f92c:	2000      	movs	r0, #0
      arp_table[i].q = p;
 800f92e:	f84a 7038 	str.w	r7, [sl, r8, lsl #3]
}
 800f932:	b005      	add	sp, #20
 800f934:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      pbuf_ref(p);
 800f938:	4638      	mov	r0, r7
 800f93a:	f7fa fff5 	bl	800a928 <pbuf_ref>
    if (p != NULL) {
 800f93e:	e7ed      	b.n	800f91c <etharp_query+0x128>
    return ERR_ARG;
 800f940:	f06f 000f 	mvn.w	r0, #15
 800f944:	e78d      	b.n	800f862 <etharp_query+0x6e>
      result = ERR_MEM;
 800f946:	f04f 30ff 	mov.w	r0, #4294967295
 800f94a:	e78a      	b.n	800f862 <etharp_query+0x6e>
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800f94c:	1d2a      	adds	r2, r5, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800f94e:	2301      	movs	r3, #1
 800f950:	4f05      	ldr	r7, [pc, #20]	; (800f968 <etharp_query+0x174>)
 800f952:	4621      	mov	r1, r4
 800f954:	4628      	mov	r0, r5
 800f956:	e9cd 6302 	strd	r6, r3, [sp, #8]
 800f95a:	e9cd 2700 	strd	r2, r7, [sp]
 800f95e:	4623      	mov	r3, r4
 800f960:	4a02      	ldr	r2, [pc, #8]	; (800f96c <etharp_query+0x178>)
 800f962:	f7ff fd47 	bl	800f3f4 <etharp_raw>
    if (q == NULL) {
 800f966:	e77c      	b.n	800f862 <etharp_query+0x6e>
 800f968:	0801523c 	.word	0x0801523c
 800f96c:	08015234 	.word	0x08015234
 800f970:	240106d4 	.word	0x240106d4
 800f974:	08014d60 	.word	0x08014d60
 800f978:	08014ec8 	.word	0x08014ec8
 800f97c:	080128dc 	.word	0x080128dc
 800f980:	240105e4 	.word	0x240105e4
 800f984:	08014ed8 	.word	0x08014ed8

0800f988 <etharp_output>:
{
 800f988:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f98a:	4605      	mov	r5, r0
 800f98c:	b085      	sub	sp, #20
 800f98e:	460f      	mov	r7, r1
 800f990:	4616      	mov	r6, r2
  LWIP_ASSERT_CORE_LOCKED();
 800f992:	f7f7 f973 	bl	8006c7c <sys_check_core_locking>
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800f996:	2d00      	cmp	r5, #0
 800f998:	f000 8081 	beq.w	800fa9e <etharp_output+0x116>
  LWIP_ASSERT("q != NULL", q != NULL);
 800f99c:	2f00      	cmp	r7, #0
 800f99e:	d06d      	beq.n	800fa7c <etharp_output+0xf4>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800f9a0:	2e00      	cmp	r6, #0
 800f9a2:	d074      	beq.n	800fa8e <etharp_output+0x106>
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800f9a4:	4629      	mov	r1, r5
 800f9a6:	6830      	ldr	r0, [r6, #0]
 800f9a8:	f000 fb5e 	bl	8010068 <ip4_addr_isbroadcast_u32>
 800f9ac:	2800      	cmp	r0, #0
 800f9ae:	d163      	bne.n	800fa78 <etharp_output+0xf0>
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800f9b0:	6833      	ldr	r3, [r6, #0]
 800f9b2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800f9b6:	2ae0      	cmp	r2, #224	; 0xe0
 800f9b8:	d039      	beq.n	800fa2e <etharp_output+0xa6>
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800f9ba:	686a      	ldr	r2, [r5, #4]
 800f9bc:	68a9      	ldr	r1, [r5, #8]
 800f9be:	405a      	eors	r2, r3
 800f9c0:	420a      	tst	r2, r1
 800f9c2:	d009      	beq.n	800f9d8 <etharp_output+0x50>
        !ip4_addr_islinklocal(ipaddr)) {
 800f9c4:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800f9c6:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800f9ca:	4293      	cmp	r3, r2
 800f9cc:	d004      	beq.n	800f9d8 <etharp_output+0x50>
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800f9ce:	68eb      	ldr	r3, [r5, #12]
 800f9d0:	2b00      	cmp	r3, #0
 800f9d2:	d076      	beq.n	800fac2 <etharp_output+0x13a>
            dst_addr = netif_ip4_gw(netif);
 800f9d4:	f105 060c 	add.w	r6, r5, #12
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800f9d8:	f8df c108 	ldr.w	ip, [pc, #264]	; 800fae4 <etharp_output+0x15c>
 800f9dc:	4b3a      	ldr	r3, [pc, #232]	; (800fac8 <etharp_output+0x140>)
 800f9de:	f89c 2000 	ldrb.w	r2, [ip]
 800f9e2:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 800f9e6:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800f9ea:	7d19      	ldrb	r1, [r3, #20]
 800f9ec:	2901      	cmp	r1, #1
 800f9ee:	d902      	bls.n	800f9f6 <etharp_output+0x6e>
 800f9f0:	6899      	ldr	r1, [r3, #8]
 800f9f2:	42a9      	cmp	r1, r5
 800f9f4:	d05e      	beq.n	800fab4 <etharp_output+0x12c>
 800f9f6:	4c34      	ldr	r4, [pc, #208]	; (800fac8 <etharp_output+0x140>)
{
 800f9f8:	2300      	movs	r3, #0
 800f9fa:	e003      	b.n	800fa04 <etharp_output+0x7c>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800f9fc:	2b0a      	cmp	r3, #10
 800f9fe:	f104 0418 	add.w	r4, r4, #24
 800fa02:	d031      	beq.n	800fa68 <etharp_output+0xe0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800fa04:	7d20      	ldrb	r0, [r4, #20]
 800fa06:	b2da      	uxtb	r2, r3
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800fa08:	3301      	adds	r3, #1
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800fa0a:	2801      	cmp	r0, #1
 800fa0c:	d9f6      	bls.n	800f9fc <etharp_output+0x74>
 800fa0e:	68a1      	ldr	r1, [r4, #8]
 800fa10:	42a9      	cmp	r1, r5
 800fa12:	d1f3      	bne.n	800f9fc <etharp_output+0x74>
          (arp_table[i].netif == netif) &&
 800fa14:	6830      	ldr	r0, [r6, #0]
 800fa16:	6861      	ldr	r1, [r4, #4]
 800fa18:	4288      	cmp	r0, r1
 800fa1a:	d1ef      	bne.n	800f9fc <etharp_output+0x74>
        return etharp_output_to_arp_index(netif, q, i);
 800fa1c:	4639      	mov	r1, r7
 800fa1e:	4628      	mov	r0, r5
        ETHARP_SET_ADDRHINT(netif, i);
 800fa20:	f88c 2000 	strb.w	r2, [ip]
}
 800fa24:	b005      	add	sp, #20
 800fa26:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        return etharp_output_to_arp_index(netif, q, i);
 800fa2a:	f7ff bd57 	b.w	800f4dc <etharp_output_to_arp_index>
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800fa2e:	7873      	ldrb	r3, [r6, #1]
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800fa30:	2201      	movs	r2, #1
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800fa32:	215e      	movs	r1, #94	; 0x5e
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800fa34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800fa38:	f8ad 2008 	strh.w	r2, [sp, #8]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800fa3c:	78f2      	ldrb	r2, [r6, #3]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800fa3e:	f88d 300b 	strb.w	r3, [sp, #11]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800fa42:	78b3      	ldrb	r3, [r6, #2]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800fa44:	f88d 100a 	strb.w	r1, [sp, #10]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800fa48:	f88d 300c 	strb.w	r3, [sp, #12]
    dest = &mcastaddr;
 800fa4c:	ab02      	add	r3, sp, #8
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800fa4e:	f88d 200d 	strb.w	r2, [sp, #13]
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800fa52:	f44f 6400 	mov.w	r4, #2048	; 0x800
 800fa56:	f105 0226 	add.w	r2, r5, #38	; 0x26
 800fa5a:	4639      	mov	r1, r7
 800fa5c:	4628      	mov	r0, r5
 800fa5e:	9400      	str	r4, [sp, #0]
 800fa60:	f000 ffcc 	bl	80109fc <ethernet_output>
}
 800fa64:	b005      	add	sp, #20
 800fa66:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return etharp_query(netif, dst_addr, q);
 800fa68:	463a      	mov	r2, r7
 800fa6a:	4631      	mov	r1, r6
 800fa6c:	4628      	mov	r0, r5
}
 800fa6e:	b005      	add	sp, #20
 800fa70:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    return etharp_query(netif, dst_addr, q);
 800fa74:	f7ff bebe 	b.w	800f7f4 <etharp_query>
    dest = (const struct eth_addr *)&ethbroadcast;
 800fa78:	4b14      	ldr	r3, [pc, #80]	; (800facc <etharp_output+0x144>)
 800fa7a:	e7ea      	b.n	800fa52 <etharp_output+0xca>
  LWIP_ASSERT("q != NULL", q != NULL);
 800fa7c:	4b14      	ldr	r3, [pc, #80]	; (800fad0 <etharp_output+0x148>)
 800fa7e:	f240 321f 	movw	r2, #799	; 0x31f
 800fa82:	4914      	ldr	r1, [pc, #80]	; (800fad4 <etharp_output+0x14c>)
 800fa84:	4814      	ldr	r0, [pc, #80]	; (800fad8 <etharp_output+0x150>)
 800fa86:	f001 fdc1 	bl	801160c <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800fa8a:	2e00      	cmp	r6, #0
 800fa8c:	d18a      	bne.n	800f9a4 <etharp_output+0x1c>
 800fa8e:	4b10      	ldr	r3, [pc, #64]	; (800fad0 <etharp_output+0x148>)
 800fa90:	f44f 7248 	mov.w	r2, #800	; 0x320
 800fa94:	4911      	ldr	r1, [pc, #68]	; (800fadc <etharp_output+0x154>)
 800fa96:	4810      	ldr	r0, [pc, #64]	; (800fad8 <etharp_output+0x150>)
 800fa98:	f001 fdb8 	bl	801160c <iprintf>
 800fa9c:	e782      	b.n	800f9a4 <etharp_output+0x1c>
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800fa9e:	4b0c      	ldr	r3, [pc, #48]	; (800fad0 <etharp_output+0x148>)
 800faa0:	f240 321e 	movw	r2, #798	; 0x31e
 800faa4:	490e      	ldr	r1, [pc, #56]	; (800fae0 <etharp_output+0x158>)
 800faa6:	480c      	ldr	r0, [pc, #48]	; (800fad8 <etharp_output+0x150>)
 800faa8:	f001 fdb0 	bl	801160c <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800faac:	2f00      	cmp	r7, #0
 800faae:	f47f af77 	bne.w	800f9a0 <etharp_output+0x18>
 800fab2:	e7e3      	b.n	800fa7c <etharp_output+0xf4>
            (arp_table[etharp_cached_entry].netif == netif) &&
 800fab4:	685b      	ldr	r3, [r3, #4]
 800fab6:	6831      	ldr	r1, [r6, #0]
 800fab8:	4299      	cmp	r1, r3
 800faba:	d19c      	bne.n	800f9f6 <etharp_output+0x6e>
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800fabc:	4639      	mov	r1, r7
 800fabe:	4628      	mov	r0, r5
 800fac0:	e7b0      	b.n	800fa24 <etharp_output+0x9c>
            return ERR_RTE;
 800fac2:	f06f 0003 	mvn.w	r0, #3
 800fac6:	e7cd      	b.n	800fa64 <etharp_output+0xdc>
 800fac8:	240105e4 	.word	0x240105e4
 800facc:	08015234 	.word	0x08015234
 800fad0:	08014d60 	.word	0x08014d60
 800fad4:	08014ef4 	.word	0x08014ef4
 800fad8:	080128dc 	.word	0x080128dc
 800fadc:	08014e84 	.word	0x08014e84
 800fae0:	08013120 	.word	0x08013120
 800fae4:	240106d4 	.word	0x240106d4

0800fae8 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800fae8:	b510      	push	{r4, lr}
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800faea:	2301      	movs	r3, #1
{
 800faec:	b084      	sub	sp, #16
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800faee:	4c07      	ldr	r4, [pc, #28]	; (800fb0c <etharp_request+0x24>)
 800faf0:	4a07      	ldr	r2, [pc, #28]	; (800fb10 <etharp_request+0x28>)
 800faf2:	9401      	str	r4, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800faf4:	1d04      	adds	r4, r0, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800faf6:	e9cd 1302 	strd	r1, r3, [sp, #8]
 800fafa:	f100 0326 	add.w	r3, r0, #38	; 0x26
 800fafe:	9400      	str	r4, [sp, #0]
 800fb00:	4619      	mov	r1, r3
 800fb02:	f7ff fc77 	bl	800f3f4 <etharp_raw>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
}
 800fb06:	b004      	add	sp, #16
 800fb08:	bd10      	pop	{r4, pc}
 800fb0a:	bf00      	nop
 800fb0c:	0801523c 	.word	0x0801523c
 800fb10:	08015234 	.word	0x08015234

0800fb14 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800fb14:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fb16:	460e      	mov	r6, r1
 800fb18:	b087      	sub	sp, #28
 800fb1a:	4617      	mov	r7, r2
 800fb1c:	4604      	mov	r4, r0

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800fb1e:	2124      	movs	r1, #36	; 0x24
 800fb20:	f44f 7220 	mov.w	r2, #640	; 0x280
 800fb24:	2022      	movs	r0, #34	; 0x22
 800fb26:	f7fa fded 	bl	800a704 <pbuf_alloc>
                 PBUF_RAM);
  if (q == NULL) {
 800fb2a:	b3a8      	cbz	r0, 800fb98 <icmp_send_response+0x84>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800fb2c:	8943      	ldrh	r3, [r0, #10]
 800fb2e:	4605      	mov	r5, r0
 800fb30:	2b23      	cmp	r3, #35	; 0x23
 800fb32:	d933      	bls.n	800fb9c <icmp_send_response+0x88>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800fb34:	6863      	ldr	r3, [r4, #4]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800fb36:	686c      	ldr	r4, [r5, #4]
  icmphdr->type = type;
 800fb38:	7026      	strb	r6, [r4, #0]
  icmphdr->code = code;
  icmphdr->id = 0;
 800fb3a:	2600      	movs	r6, #0
  icmphdr->code = code;
 800fb3c:	7067      	strb	r7, [r4, #1]
  icmphdr->id = 0;
 800fb3e:	7126      	strb	r6, [r4, #4]
 800fb40:	7166      	strb	r6, [r4, #5]
  icmphdr->seqno = 0;
 800fb42:	71a6      	strb	r6, [r4, #6]
 800fb44:	71e6      	strb	r6, [r4, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800fb46:	6818      	ldr	r0, [r3, #0]
 800fb48:	6859      	ldr	r1, [r3, #4]
 800fb4a:	689a      	ldr	r2, [r3, #8]
 800fb4c:	68df      	ldr	r7, [r3, #12]
 800fb4e:	60a0      	str	r0, [r4, #8]
 800fb50:	6167      	str	r7, [r4, #20]
 800fb52:	60e1      	str	r1, [r4, #12]
 800fb54:	6122      	str	r2, [r4, #16]
 800fb56:	6918      	ldr	r0, [r3, #16]
 800fb58:	6959      	ldr	r1, [r3, #20]
 800fb5a:	699a      	ldr	r2, [r3, #24]
 800fb5c:	61a0      	str	r0, [r4, #24]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800fb5e:	a805      	add	r0, sp, #20
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800fb60:	61e1      	str	r1, [r4, #28]
 800fb62:	6222      	str	r2, [r4, #32]
  ip4_addr_copy(iphdr_src, iphdr->src);
 800fb64:	68db      	ldr	r3, [r3, #12]
 800fb66:	9305      	str	r3, [sp, #20]
  netif = ip4_route(&iphdr_src);
 800fb68:	f000 f8d6 	bl	800fd18 <ip4_route>
#endif
  if (netif != NULL) {
 800fb6c:	4607      	mov	r7, r0
 800fb6e:	b180      	cbz	r0, 800fb92 <icmp_send_response+0x7e>
    /* calculate checksum */
    icmphdr->chksum = 0;
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 800fb70:	8969      	ldrh	r1, [r5, #10]
 800fb72:	4620      	mov	r0, r4
    icmphdr->chksum = 0;
 800fb74:	70a6      	strb	r6, [r4, #2]
 800fb76:	70e6      	strb	r6, [r4, #3]
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 800fb78:	f7f9 fdf2 	bl	8009760 <inet_chksum>
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800fb7c:	2301      	movs	r3, #1
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 800fb7e:	8060      	strh	r0, [r4, #2]
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800fb80:	aa05      	add	r2, sp, #20
 800fb82:	4631      	mov	r1, r6
 800fb84:	4628      	mov	r0, r5
 800fb86:	9600      	str	r6, [sp, #0]
 800fb88:	e9cd 3701 	strd	r3, r7, [sp, #4]
 800fb8c:	23ff      	movs	r3, #255	; 0xff
 800fb8e:	f000 fa59 	bl	8010044 <ip4_output_if>
  }
  pbuf_free(q);
 800fb92:	4628      	mov	r0, r5
 800fb94:	f7fa fd46 	bl	800a624 <pbuf_free>
}
 800fb98:	b007      	add	sp, #28
 800fb9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800fb9c:	4b03      	ldr	r3, [pc, #12]	; (800fbac <icmp_send_response+0x98>)
 800fb9e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800fba2:	4903      	ldr	r1, [pc, #12]	; (800fbb0 <icmp_send_response+0x9c>)
 800fba4:	4803      	ldr	r0, [pc, #12]	; (800fbb4 <icmp_send_response+0xa0>)
 800fba6:	f001 fd31 	bl	801160c <iprintf>
 800fbaa:	e7c3      	b.n	800fb34 <icmp_send_response+0x20>
 800fbac:	08014f00 	.word	0x08014f00
 800fbb0:	08014f38 	.word	0x08014f38
 800fbb4:	080128dc 	.word	0x080128dc

0800fbb8 <icmp_input>:
{
 800fbb8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  iphdr_in = ip4_current_header();
 800fbbc:	4f4c      	ldr	r7, [pc, #304]	; (800fcf0 <icmp_input+0x138>)
{
 800fbbe:	b087      	sub	sp, #28
 800fbc0:	4605      	mov	r5, r0
  iphdr_in = ip4_current_header();
 800fbc2:	f8d7 8008 	ldr.w	r8, [r7, #8]
  hlen = IPH_HL_BYTES(iphdr_in);
 800fbc6:	f898 4000 	ldrb.w	r4, [r8]
 800fbca:	f004 040f 	and.w	r4, r4, #15
 800fbce:	00a4      	lsls	r4, r4, #2
  if (hlen < IP_HLEN) {
 800fbd0:	2c13      	cmp	r4, #19
 800fbd2:	d913      	bls.n	800fbfc <icmp_input+0x44>
  if (p->len < sizeof(u16_t) * 2) {
 800fbd4:	8943      	ldrh	r3, [r0, #10]
 800fbd6:	2b03      	cmp	r3, #3
 800fbd8:	d910      	bls.n	800fbfc <icmp_input+0x44>
  type = *((u8_t *)p->payload);
 800fbda:	6843      	ldr	r3, [r0, #4]
  switch (type) {
 800fbdc:	781b      	ldrb	r3, [r3, #0]
 800fbde:	2b08      	cmp	r3, #8
 800fbe0:	d10c      	bne.n	800fbfc <icmp_input+0x44>
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800fbe2:	6978      	ldr	r0, [r7, #20]
 800fbe4:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 800fbe8:	2be0      	cmp	r3, #224	; 0xe0
 800fbea:	d007      	beq.n	800fbfc <icmp_input+0x44>
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800fbec:	460e      	mov	r6, r1
 800fbee:	6839      	ldr	r1, [r7, #0]
 800fbf0:	f000 fa3a 	bl	8010068 <ip4_addr_isbroadcast_u32>
 800fbf4:	b910      	cbnz	r0, 800fbfc <icmp_input+0x44>
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800fbf6:	892b      	ldrh	r3, [r5, #8]
 800fbf8:	2b07      	cmp	r3, #7
 800fbfa:	d805      	bhi.n	800fc08 <icmp_input+0x50>
  pbuf_free(p);
 800fbfc:	4628      	mov	r0, r5
}
 800fbfe:	b007      	add	sp, #28
 800fc00:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  pbuf_free(p);
 800fc04:	f7fa bd0e 	b.w	800a624 <pbuf_free>
        if (inet_chksum_pbuf(p) != 0) {
 800fc08:	4628      	mov	r0, r5
 800fc0a:	f7f9 fdaf 	bl	800976c <inet_chksum_pbuf>
 800fc0e:	2800      	cmp	r0, #0
 800fc10:	d1f4      	bne.n	800fbfc <icmp_input+0x44>
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800fc12:	f104 010e 	add.w	r1, r4, #14
 800fc16:	4628      	mov	r0, r5
 800fc18:	9105      	str	r1, [sp, #20]
 800fc1a:	f7fa fc63 	bl	800a4e4 <pbuf_add_header>
 800fc1e:	9905      	ldr	r1, [sp, #20]
 800fc20:	2800      	cmp	r0, #0
 800fc22:	d04b      	beq.n	800fcbc <icmp_input+0x104>
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800fc24:	892b      	ldrh	r3, [r5, #8]
 800fc26:	1919      	adds	r1, r3, r4
 800fc28:	b289      	uxth	r1, r1
        if (alloc_len < p->tot_len) {
 800fc2a:	428b      	cmp	r3, r1
 800fc2c:	d8e6      	bhi.n	800fbfc <icmp_input+0x44>
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800fc2e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800fc32:	200e      	movs	r0, #14
 800fc34:	f7fa fd66 	bl	800a704 <pbuf_alloc>
        if (r == NULL) {
 800fc38:	4681      	mov	r9, r0
 800fc3a:	2800      	cmp	r0, #0
 800fc3c:	d0de      	beq.n	800fbfc <icmp_input+0x44>
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800fc3e:	8942      	ldrh	r2, [r0, #10]
 800fc40:	f104 0308 	add.w	r3, r4, #8
 800fc44:	429a      	cmp	r2, r3
 800fc46:	d345      	bcc.n	800fcd4 <icmp_input+0x11c>
        MEMCPY(r->payload, iphdr_in, hlen);
 800fc48:	4641      	mov	r1, r8
 800fc4a:	4622      	mov	r2, r4
 800fc4c:	6840      	ldr	r0, [r0, #4]
 800fc4e:	f001 ff65 	bl	8011b1c <memcpy>
        if (pbuf_remove_header(r, hlen)) {
 800fc52:	4621      	mov	r1, r4
 800fc54:	4648      	mov	r0, r9
 800fc56:	f7fa fc79 	bl	800a54c <pbuf_remove_header>
 800fc5a:	2800      	cmp	r0, #0
 800fc5c:	d13e      	bne.n	800fcdc <icmp_input+0x124>
        if (pbuf_copy(r, p) != ERR_OK) {
 800fc5e:	4629      	mov	r1, r5
 800fc60:	4648      	mov	r0, r9
 800fc62:	f7fa febb 	bl	800a9dc <pbuf_copy>
 800fc66:	2800      	cmp	r0, #0
 800fc68:	d134      	bne.n	800fcd4 <icmp_input+0x11c>
        pbuf_free(p);
 800fc6a:	4628      	mov	r0, r5
 800fc6c:	464d      	mov	r5, r9
 800fc6e:	f7fa fcd9 	bl	800a624 <pbuf_free>
      if (pbuf_add_header(p, hlen)) {
 800fc72:	4621      	mov	r1, r4
 800fc74:	4628      	mov	r0, r5
      iecho = (struct icmp_echo_hdr *)p->payload;
 800fc76:	686c      	ldr	r4, [r5, #4]
      if (pbuf_add_header(p, hlen)) {
 800fc78:	f7fa fc34 	bl	800a4e4 <pbuf_add_header>
 800fc7c:	2800      	cmp	r0, #0
 800fc7e:	d1bd      	bne.n	800fbfc <icmp_input+0x44>
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800fc80:	6869      	ldr	r1, [r5, #4]
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 800fc82:	f64f 72f7 	movw	r2, #65527	; 0xfff7
        ip4_addr_copy(iphdr->src, *src);
 800fc86:	697b      	ldr	r3, [r7, #20]
 800fc88:	60cb      	str	r3, [r1, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800fc8a:	693b      	ldr	r3, [r7, #16]
 800fc8c:	610b      	str	r3, [r1, #16]
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 800fc8e:	8863      	ldrh	r3, [r4, #2]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800fc90:	7020      	strb	r0, [r4, #0]
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800fc92:	4628      	mov	r0, r5
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 800fc94:	4293      	cmp	r3, r2
        IPH_CHKSUM_SET(iphdr, 0);
 800fc96:	f04f 0200 	mov.w	r2, #0
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 800fc9a:	bf8c      	ite	hi
 800fc9c:	3309      	addhi	r3, #9
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 800fc9e:	3308      	addls	r3, #8
 800fca0:	b29b      	uxth	r3, r3
 800fca2:	8063      	strh	r3, [r4, #2]
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800fca4:	23ff      	movs	r3, #255	; 0xff
        IPH_CHKSUM_SET(iphdr, 0);
 800fca6:	728a      	strb	r2, [r1, #10]
 800fca8:	72ca      	strb	r2, [r1, #11]
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800fcaa:	720b      	strb	r3, [r1, #8]
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800fcac:	2101      	movs	r1, #1
 800fcae:	9200      	str	r2, [sp, #0]
 800fcb0:	e9cd 1601 	strd	r1, r6, [sp, #4]
 800fcb4:	490f      	ldr	r1, [pc, #60]	; (800fcf4 <icmp_input+0x13c>)
 800fcb6:	f000 f9c5 	bl	8010044 <ip4_output_if>
  pbuf_free(p);
 800fcba:	e79f      	b.n	800fbfc <icmp_input+0x44>
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800fcbc:	4628      	mov	r0, r5
 800fcbe:	f7fa fc45 	bl	800a54c <pbuf_remove_header>
 800fcc2:	2800      	cmp	r0, #0
 800fcc4:	d0d5      	beq.n	800fc72 <icmp_input+0xba>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800fcc6:	4b0c      	ldr	r3, [pc, #48]	; (800fcf8 <icmp_input+0x140>)
 800fcc8:	22c7      	movs	r2, #199	; 0xc7
 800fcca:	490c      	ldr	r1, [pc, #48]	; (800fcfc <icmp_input+0x144>)
 800fccc:	480c      	ldr	r0, [pc, #48]	; (800fd00 <icmp_input+0x148>)
 800fcce:	f001 fc9d 	bl	801160c <iprintf>
          goto icmperr;
 800fcd2:	e793      	b.n	800fbfc <icmp_input+0x44>
          pbuf_free(r);
 800fcd4:	4648      	mov	r0, r9
 800fcd6:	f7fa fca5 	bl	800a624 <pbuf_free>
          goto icmperr;
 800fcda:	e78f      	b.n	800fbfc <icmp_input+0x44>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800fcdc:	4b06      	ldr	r3, [pc, #24]	; (800fcf8 <icmp_input+0x140>)
 800fcde:	22b6      	movs	r2, #182	; 0xb6
 800fce0:	4908      	ldr	r1, [pc, #32]	; (800fd04 <icmp_input+0x14c>)
 800fce2:	4807      	ldr	r0, [pc, #28]	; (800fd00 <icmp_input+0x148>)
 800fce4:	f001 fc92 	bl	801160c <iprintf>
          pbuf_free(r);
 800fce8:	4648      	mov	r0, r9
 800fcea:	f7fa fc9b 	bl	800a624 <pbuf_free>
          goto icmperr;
 800fcee:	e785      	b.n	800fbfc <icmp_input+0x44>
 800fcf0:	24009ab8 	.word	0x24009ab8
 800fcf4:	24009acc 	.word	0x24009acc
 800fcf8:	08014f00 	.word	0x08014f00
 800fcfc:	08014f9c 	.word	0x08014f9c
 800fd00:	080128dc 	.word	0x080128dc
 800fd04:	08014f64 	.word	0x08014f64

0800fd08 <icmp_dest_unreach>:
{
 800fd08:	460a      	mov	r2, r1
  icmp_send_response(p, ICMP_DUR, t);
 800fd0a:	2103      	movs	r1, #3
 800fd0c:	f7ff bf02 	b.w	800fb14 <icmp_send_response>

0800fd10 <icmp_time_exceeded>:
{
 800fd10:	460a      	mov	r2, r1
  icmp_send_response(p, ICMP_TE, t);
 800fd12:	210b      	movs	r1, #11
 800fd14:	f7ff befe 	b.w	800fb14 <icmp_send_response>

0800fd18 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800fd18:	b538      	push	{r3, r4, r5, lr}
 800fd1a:	4604      	mov	r4, r0
#if !LWIP_SINGLE_NETIF
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();
 800fd1c:	f7f6 ffae 	bl	8006c7c <sys_check_core_locking>

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800fd20:	4b15      	ldr	r3, [pc, #84]	; (800fd78 <ip4_route+0x60>)
 800fd22:	6818      	ldr	r0, [r3, #0]
 800fd24:	b1a0      	cbz	r0, 800fd50 <ip4_route+0x38>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800fd26:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 800fd2a:	07d9      	lsls	r1, r3, #31
 800fd2c:	d50d      	bpl.n	800fd4a <ip4_route+0x32>
 800fd2e:	075a      	lsls	r2, r3, #29
 800fd30:	d50b      	bpl.n	800fd4a <ip4_route+0x32>
 800fd32:	6842      	ldr	r2, [r0, #4]
 800fd34:	b14a      	cbz	r2, 800fd4a <ip4_route+0x32>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800fd36:	6821      	ldr	r1, [r4, #0]
 800fd38:	6885      	ldr	r5, [r0, #8]
 800fd3a:	404a      	eors	r2, r1
 800fd3c:	422a      	tst	r2, r5
 800fd3e:	d016      	beq.n	800fd6e <ip4_route+0x56>
        /* return netif on which to forward IP packet */
        return netif;
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800fd40:	079b      	lsls	r3, r3, #30
 800fd42:	d402      	bmi.n	800fd4a <ip4_route+0x32>
 800fd44:	68c3      	ldr	r3, [r0, #12]
 800fd46:	4299      	cmp	r1, r3
 800fd48:	d011      	beq.n	800fd6e <ip4_route+0x56>
  NETIF_FOREACH(netif) {
 800fd4a:	6800      	ldr	r0, [r0, #0]
 800fd4c:	2800      	cmp	r0, #0
 800fd4e:	d1ea      	bne.n	800fd26 <ip4_route+0xe>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800fd50:	4b0a      	ldr	r3, [pc, #40]	; (800fd7c <ip4_route+0x64>)
 800fd52:	6818      	ldr	r0, [r3, #0]
 800fd54:	b158      	cbz	r0, 800fd6e <ip4_route+0x56>
 800fd56:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 800fd5a:	f003 0305 	and.w	r3, r3, #5
 800fd5e:	2b05      	cmp	r3, #5
 800fd60:	d106      	bne.n	800fd70 <ip4_route+0x58>
 800fd62:	6843      	ldr	r3, [r0, #4]
 800fd64:	b133      	cbz	r3, 800fd74 <ip4_route+0x5c>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800fd66:	7823      	ldrb	r3, [r4, #0]
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800fd68:	2b7f      	cmp	r3, #127	; 0x7f
 800fd6a:	bf08      	it	eq
 800fd6c:	2000      	moveq	r0, #0
  }

  return netif_default;
}
 800fd6e:	bd38      	pop	{r3, r4, r5, pc}
    return NULL;
 800fd70:	2000      	movs	r0, #0
}
 800fd72:	bd38      	pop	{r3, r4, r5, pc}
    return NULL;
 800fd74:	4618      	mov	r0, r3
}
 800fd76:	bd38      	pop	{r3, r4, r5, pc}
 800fd78:	24010570 	.word	0x24010570
 800fd7c:	2401056c 	.word	0x2401056c

0800fd80 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800fd80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fd84:	4604      	mov	r4, r0
 800fd86:	460e      	mov	r6, r1
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP */
#if LWIP_RAW
  raw_input_state_t raw_status;
#endif /* LWIP_RAW */

  LWIP_ASSERT_CORE_LOCKED();
 800fd88:	f7f6 ff78 	bl	8006c7c <sys_check_core_locking>

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800fd8c:	6867      	ldr	r7, [r4, #4]
  if (IPH_V(iphdr) != 4) {
 800fd8e:	783b      	ldrb	r3, [r7, #0]
 800fd90:	091a      	lsrs	r2, r3, #4
 800fd92:	2a04      	cmp	r2, #4
 800fd94:	f040 808d 	bne.w	800feb2 <ip4_input+0x132>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800fd98:	f003 030f 	and.w	r3, r3, #15
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800fd9c:	8878      	ldrh	r0, [r7, #2]
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800fd9e:	ea4f 0983 	mov.w	r9, r3, lsl #2
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800fda2:	f7f9 fc9d 	bl	80096e0 <lwip_htons>

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800fda6:	8923      	ldrh	r3, [r4, #8]
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800fda8:	464d      	mov	r5, r9
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800fdaa:	4680      	mov	r8, r0
  if (iphdr_len < p->tot_len) {
 800fdac:	4283      	cmp	r3, r0
 800fdae:	f200 8086 	bhi.w	800febe <ip4_input+0x13e>
    pbuf_realloc(p, iphdr_len);
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800fdb2:	8963      	ldrh	r3, [r4, #10]
 800fdb4:	42ab      	cmp	r3, r5
 800fdb6:	d37c      	bcc.n	800feb2 <ip4_input+0x132>
 800fdb8:	8923      	ldrh	r3, [r4, #8]
 800fdba:	4543      	cmp	r3, r8
 800fdbc:	d379      	bcc.n	800feb2 <ip4_input+0x132>
 800fdbe:	2d13      	cmp	r5, #19
 800fdc0:	d977      	bls.n	800feb2 <ip4_input+0x132>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800fdc2:	693b      	ldr	r3, [r7, #16]
 800fdc4:	f8df 8170 	ldr.w	r8, [pc, #368]	; 800ff38 <ip4_input+0x1b8>
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800fdc8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800fdcc:	f8c8 3014 	str.w	r3, [r8, #20]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800fdd0:	2ae0      	cmp	r2, #224	; 0xe0
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800fdd2:	68f8      	ldr	r0, [r7, #12]
 800fdd4:	f8c8 0010 	str.w	r0, [r8, #16]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800fdd8:	d076      	beq.n	800fec8 <ip4_input+0x148>
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800fdda:	f896 202d 	ldrb.w	r2, [r6, #45]	; 0x2d
 800fdde:	07d2      	lsls	r2, r2, #31
 800fde0:	d503      	bpl.n	800fdea <ip4_input+0x6a>
 800fde2:	6872      	ldr	r2, [r6, #4]
 800fde4:	2a00      	cmp	r2, #0
 800fde6:	f040 8082 	bne.w	800feee <ip4_input+0x16e>
      netif = NULL;
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800fdea:	b2db      	uxtb	r3, r3
 800fdec:	2b7f      	cmp	r3, #127	; 0x7f
 800fdee:	f000 8088 	beq.w	800ff02 <ip4_input+0x182>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800fdf2:	4b50      	ldr	r3, [pc, #320]	; (800ff34 <ip4_input+0x1b4>)
 800fdf4:	681d      	ldr	r5, [r3, #0]
 800fdf6:	b92d      	cbnz	r5, 800fe04 <ip4_input+0x84>
 800fdf8:	e083      	b.n	800ff02 <ip4_input+0x182>
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800fdfa:	f000 f935 	bl	8010068 <ip4_addr_isbroadcast_u32>
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800fdfe:	b978      	cbnz	r0, 800fe20 <ip4_input+0xa0>
        NETIF_FOREACH(netif) {
 800fe00:	682d      	ldr	r5, [r5, #0]
 800fe02:	b16d      	cbz	r5, 800fe20 <ip4_input+0xa0>
          if (netif == inp) {
 800fe04:	42ae      	cmp	r6, r5
 800fe06:	d0fb      	beq.n	800fe00 <ip4_input+0x80>
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800fe08:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
 800fe0c:	07db      	lsls	r3, r3, #31
 800fe0e:	d5f7      	bpl.n	800fe00 <ip4_input+0x80>
 800fe10:	686b      	ldr	r3, [r5, #4]
 800fe12:	2b00      	cmp	r3, #0
 800fe14:	d0f4      	beq.n	800fe00 <ip4_input+0x80>
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800fe16:	f8d8 0014 	ldr.w	r0, [r8, #20]
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800fe1a:	4629      	mov	r1, r5
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800fe1c:	4283      	cmp	r3, r0
 800fe1e:	d1ec      	bne.n	800fdfa <ip4_input+0x7a>
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800fe20:	f8d8 0010 	ldr.w	r0, [r8, #16]
 800fe24:	4631      	mov	r1, r6
 800fe26:	f000 f91f 	bl	8010068 <ip4_addr_isbroadcast_u32>
 800fe2a:	2800      	cmp	r0, #0
 800fe2c:	d141      	bne.n	800feb2 <ip4_input+0x132>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800fe2e:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800fe32:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800fe36:	2be0      	cmp	r3, #224	; 0xe0
 800fe38:	d03b      	beq.n	800feb2 <ip4_input+0x132>
      return ERR_OK;
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800fe3a:	b3d5      	cbz	r5, 800feb2 <ip4_input+0x132>
    }
    pbuf_free(p);
    return ERR_OK;
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800fe3c:	88fb      	ldrh	r3, [r7, #6]
 800fe3e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800fe42:	2b00      	cmp	r3, #0
 800fe44:	d14b      	bne.n	800fede <ip4_input+0x15e>
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
  ip_data.current_input_netif = inp;
  ip_data.current_ip4_header = iphdr;
 800fe46:	f8c8 7008 	str.w	r7, [r8, #8]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800fe4a:	4649      	mov	r1, r9
 800fe4c:	4620      	mov	r0, r4
  ip_data.current_input_netif = inp;
 800fe4e:	e9c8 5600 	strd	r5, r6, [r8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800fe52:	783b      	ldrb	r3, [r7, #0]
 800fe54:	f003 030f 	and.w	r3, r3, #15
 800fe58:	009b      	lsls	r3, r3, #2
 800fe5a:	f8a8 300c 	strh.w	r3, [r8, #12]
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800fe5e:	f7fa fb75 	bl	800a54c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800fe62:	7a7b      	ldrb	r3, [r7, #9]
 800fe64:	2b06      	cmp	r3, #6
 800fe66:	d05a      	beq.n	800ff1e <ip4_input+0x19e>
 800fe68:	2b11      	cmp	r3, #17
 800fe6a:	d053      	beq.n	800ff14 <ip4_input+0x194>
 800fe6c:	2b01      	cmp	r3, #1
 800fe6e:	d04c      	beq.n	800ff0a <ip4_input+0x18a>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800fe70:	4629      	mov	r1, r5
 800fe72:	f8d8 0014 	ldr.w	r0, [r8, #20]
 800fe76:	f000 f8f7 	bl	8010068 <ip4_addr_isbroadcast_u32>
 800fe7a:	b968      	cbnz	r0, 800fe98 <ip4_input+0x118>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800fe7c:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800fe80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800fe84:	2be0      	cmp	r3, #224	; 0xe0
 800fe86:	d007      	beq.n	800fe98 <ip4_input+0x118>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800fe88:	4649      	mov	r1, r9
 800fe8a:	4620      	mov	r0, r4
 800fe8c:	f7fa fb92 	bl	800a5b4 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800fe90:	2102      	movs	r1, #2
 800fe92:	4620      	mov	r0, r4
 800fe94:	f7ff ff38 	bl	800fd08 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800fe98:	4620      	mov	r0, r4
 800fe9a:	f7fa fbc3 	bl	800a624 <pbuf_free>
        break;
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800fe9e:	2300      	movs	r3, #0
  ip_data.current_input_netif = NULL;
 800fea0:	e9c8 3300 	strd	r3, r3, [r8]
  ip_data.current_ip4_header = NULL;
 800fea4:	f8c8 3008 	str.w	r3, [r8, #8]
  ip_data.current_ip_header_tot_len = 0;
 800fea8:	f8a8 300c 	strh.w	r3, [r8, #12]
  ip4_addr_set_any(ip4_current_src_addr());
  ip4_addr_set_any(ip4_current_dest_addr());
 800feac:	e9c8 3304 	strd	r3, r3, [r8, #16]

  return ERR_OK;
 800feb0:	e002      	b.n	800feb8 <ip4_input+0x138>
    pbuf_free(p);
 800feb2:	4620      	mov	r0, r4
 800feb4:	f7fa fbb6 	bl	800a624 <pbuf_free>
}
 800feb8:	2000      	movs	r0, #0
 800feba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    pbuf_realloc(p, iphdr_len);
 800febe:	4601      	mov	r1, r0
 800fec0:	4620      	mov	r0, r4
 800fec2:	f7fa fccd 	bl	800a860 <pbuf_realloc>
 800fec6:	e774      	b.n	800fdb2 <ip4_input+0x32>
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800fec8:	f896 502d 	ldrb.w	r5, [r6, #45]	; 0x2d
 800fecc:	f015 0501 	ands.w	r5, r5, #1
 800fed0:	d0a8      	beq.n	800fe24 <ip4_input+0xa4>
 800fed2:	6873      	ldr	r3, [r6, #4]
 800fed4:	2b00      	cmp	r3, #0
 800fed6:	bf14      	ite	ne
 800fed8:	4635      	movne	r5, r6
 800feda:	2500      	moveq	r5, #0
 800fedc:	e7a2      	b.n	800fe24 <ip4_input+0xa4>
    p = ip4_reass(p);
 800fede:	4620      	mov	r0, r4
 800fee0:	f000 f9ec 	bl	80102bc <ip4_reass>
    if (p == NULL) {
 800fee4:	4604      	mov	r4, r0
 800fee6:	2800      	cmp	r0, #0
 800fee8:	d0e6      	beq.n	800feb8 <ip4_input+0x138>
    iphdr = (const struct ip_hdr *)p->payload;
 800feea:	6847      	ldr	r7, [r0, #4]
 800feec:	e7ab      	b.n	800fe46 <ip4_input+0xc6>
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800feee:	4293      	cmp	r3, r2
 800fef0:	d01a      	beq.n	800ff28 <ip4_input+0x1a8>
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800fef2:	4618      	mov	r0, r3
 800fef4:	4631      	mov	r1, r6
 800fef6:	f000 f8b7 	bl	8010068 <ip4_addr_isbroadcast_u32>
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800fefa:	b9b8      	cbnz	r0, 800ff2c <ip4_input+0x1ac>
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800fefc:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800ff00:	e773      	b.n	800fdea <ip4_input+0x6a>
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800ff02:	f8d8 0010 	ldr.w	r0, [r8, #16]
      netif = NULL;
 800ff06:	2500      	movs	r5, #0
 800ff08:	e78c      	b.n	800fe24 <ip4_input+0xa4>
        icmp_input(p, inp);
 800ff0a:	4631      	mov	r1, r6
 800ff0c:	4620      	mov	r0, r4
 800ff0e:	f7ff fe53 	bl	800fbb8 <icmp_input>
        break;
 800ff12:	e7c4      	b.n	800fe9e <ip4_input+0x11e>
        udp_input(p, inp);
 800ff14:	4631      	mov	r1, r6
 800ff16:	4620      	mov	r0, r4
 800ff18:	f7ff f898 	bl	800f04c <udp_input>
        break;
 800ff1c:	e7bf      	b.n	800fe9e <ip4_input+0x11e>
        tcp_input(p, inp);
 800ff1e:	4631      	mov	r1, r6
 800ff20:	4620      	mov	r0, r4
 800ff22:	f7fc ff7d 	bl	800ce20 <tcp_input>
        break;
 800ff26:	e7ba      	b.n	800fe9e <ip4_input+0x11e>
 800ff28:	4635      	mov	r5, r6
 800ff2a:	e77b      	b.n	800fe24 <ip4_input+0xa4>
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800ff2c:	f8d8 0010 	ldr.w	r0, [r8, #16]
 800ff30:	4635      	mov	r5, r6
 800ff32:	e777      	b.n	800fe24 <ip4_input+0xa4>
 800ff34:	24010570 	.word	0x24010570
 800ff38:	24009ab8 	.word	0x24009ab8

0800ff3c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800ff3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff40:	4604      	mov	r4, r0
 800ff42:	b083      	sub	sp, #12
 800ff44:	4699      	mov	r9, r3
 800ff46:	460f      	mov	r7, r1
 800ff48:	4616      	mov	r6, r2
 800ff4a:	f89d a030 	ldrb.w	sl, [sp, #48]	; 0x30
 800ff4e:	f89d b034 	ldrb.w	fp, [sp, #52]	; 0x34
 800ff52:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
 800ff56:	f7f6 fe91 	bl	8006c7c <sys_check_core_locking>
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800ff5a:	7ba3      	ldrb	r3, [r4, #14]
 800ff5c:	2b01      	cmp	r3, #1
 800ff5e:	d13d      	bne.n	800ffdc <ip4_output_if_src+0xa0>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800ff60:	2e00      	cmp	r6, #0
 800ff62:	d044      	beq.n	800ffee <ip4_output_if_src+0xb2>
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800ff64:	2114      	movs	r1, #20
 800ff66:	4620      	mov	r0, r4
 800ff68:	f7fa fabc 	bl	800a4e4 <pbuf_add_header>
 800ff6c:	2800      	cmp	r0, #0
 800ff6e:	d159      	bne.n	8010024 <ip4_output_if_src+0xe8>
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
    }

    iphdr = (struct ip_hdr *)p->payload;
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800ff70:	8963      	ldrh	r3, [r4, #10]
    iphdr = (struct ip_hdr *)p->payload;
 800ff72:	6865      	ldr	r5, [r4, #4]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800ff74:	2b13      	cmp	r3, #19
 800ff76:	d942      	bls.n	800fffe <ip4_output_if_src+0xc2>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800ff78:	f885 9008 	strb.w	r9, [r5, #8]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800ff7c:	2245      	movs	r2, #69	; 0x45
    IPH_PROTO_SET(iphdr, proto);
 800ff7e:	f885 b009 	strb.w	fp, [r5, #9]
    ip4_addr_copy(iphdr->dest, *dest);
 800ff82:	6833      	ldr	r3, [r6, #0]
    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800ff84:	702a      	strb	r2, [r5, #0]
    IPH_TOS_SET(iphdr, tos);
 800ff86:	f885 a001 	strb.w	sl, [r5, #1]
    ip4_addr_copy(iphdr->dest, *dest);
 800ff8a:	612b      	str	r3, [r5, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800ff8c:	8920      	ldrh	r0, [r4, #8]
 800ff8e:	f7f9 fba7 	bl	80096e0 <lwip_htons>
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800ff92:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 8010040 <ip4_output_if_src+0x104>
    IPH_OFFSET_SET(iphdr, 0);
 800ff96:	2300      	movs	r3, #0
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800ff98:	8068      	strh	r0, [r5, #2]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800ff9a:	f8b9 0000 	ldrh.w	r0, [r9]
    IPH_OFFSET_SET(iphdr, 0);
 800ff9e:	71ab      	strb	r3, [r5, #6]
 800ffa0:	71eb      	strb	r3, [r5, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800ffa2:	f7f9 fb9d 	bl	80096e0 <lwip_htons>
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800ffa6:	f8b9 3000 	ldrh.w	r3, [r9]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800ffaa:	80a8      	strh	r0, [r5, #4]
    ++ip_id;
 800ffac:	3301      	adds	r3, #1
 800ffae:	f8a9 3000 	strh.w	r3, [r9]

    if (src == NULL) {
 800ffb2:	b367      	cbz	r7, 801000e <ip4_output_if_src+0xd2>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800ffb4:	683b      	ldr	r3, [r7, #0]
 800ffb6:	60eb      	str	r3, [r5, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800ffb8:	2300      	movs	r3, #0
 800ffba:	72ab      	strb	r3, [r5, #10]
 800ffbc:	72eb      	strb	r3, [r5, #11]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800ffbe:	f8b8 3024 	ldrh.w	r3, [r8, #36]	; 0x24
 800ffc2:	b113      	cbz	r3, 800ffca <ip4_output_if_src+0x8e>
 800ffc4:	8922      	ldrh	r2, [r4, #8]
 800ffc6:	429a      	cmp	r2, r3
 800ffc8:	d824      	bhi.n	8010014 <ip4_output_if_src+0xd8>
    return ip4_frag(p, netif, dest);
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800ffca:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800ffce:	4632      	mov	r2, r6
 800ffd0:	4621      	mov	r1, r4
 800ffd2:	4640      	mov	r0, r8
 800ffd4:	4798      	blx	r3
}
 800ffd6:	b003      	add	sp, #12
 800ffd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800ffdc:	4b13      	ldr	r3, [pc, #76]	; (801002c <ip4_output_if_src+0xf0>)
 800ffde:	f44f 7255 	mov.w	r2, #852	; 0x354
 800ffe2:	4913      	ldr	r1, [pc, #76]	; (8010030 <ip4_output_if_src+0xf4>)
 800ffe4:	4813      	ldr	r0, [pc, #76]	; (8010034 <ip4_output_if_src+0xf8>)
 800ffe6:	f001 fb11 	bl	801160c <iprintf>
  if (dest != LWIP_IP_HDRINCL) {
 800ffea:	2e00      	cmp	r6, #0
 800ffec:	d1ba      	bne.n	800ff64 <ip4_output_if_src+0x28>
    if (p->len < IP_HLEN) {
 800ffee:	8963      	ldrh	r3, [r4, #10]
 800fff0:	2b13      	cmp	r3, #19
 800fff2:	d917      	bls.n	8010024 <ip4_output_if_src+0xe8>
    ip4_addr_copy(dest_addr, iphdr->dest);
 800fff4:	6863      	ldr	r3, [r4, #4]
    dest = &dest_addr;
 800fff6:	ae01      	add	r6, sp, #4
    ip4_addr_copy(dest_addr, iphdr->dest);
 800fff8:	691b      	ldr	r3, [r3, #16]
 800fffa:	9301      	str	r3, [sp, #4]
    dest = &dest_addr;
 800fffc:	e7df      	b.n	800ffbe <ip4_output_if_src+0x82>
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800fffe:	4b0b      	ldr	r3, [pc, #44]	; (801002c <ip4_output_if_src+0xf0>)
 8010000:	f44f 7262 	mov.w	r2, #904	; 0x388
 8010004:	490c      	ldr	r1, [pc, #48]	; (8010038 <ip4_output_if_src+0xfc>)
 8010006:	480b      	ldr	r0, [pc, #44]	; (8010034 <ip4_output_if_src+0xf8>)
 8010008:	f001 fb00 	bl	801160c <iprintf>
 801000c:	e7b4      	b.n	800ff78 <ip4_output_if_src+0x3c>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801000e:	4b0b      	ldr	r3, [pc, #44]	; (801003c <ip4_output_if_src+0x100>)
 8010010:	681b      	ldr	r3, [r3, #0]
 8010012:	e7d0      	b.n	800ffb6 <ip4_output_if_src+0x7a>
    return ip4_frag(p, netif, dest);
 8010014:	4632      	mov	r2, r6
 8010016:	4641      	mov	r1, r8
 8010018:	4620      	mov	r0, r4
 801001a:	f000 fb83 	bl	8010724 <ip4_frag>
}
 801001e:	b003      	add	sp, #12
 8010020:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      return ERR_BUF;
 8010024:	f06f 0001 	mvn.w	r0, #1
 8010028:	e7d5      	b.n	800ffd6 <ip4_output_if_src+0x9a>
 801002a:	bf00      	nop
 801002c:	08014fd0 	.word	0x08014fd0
 8010030:	08015004 	.word	0x08015004
 8010034:	080128dc 	.word	0x080128dc
 8010038:	08015010 	.word	0x08015010
 801003c:	08015040 	.word	0x08015040
 8010040:	240106d6 	.word	0x240106d6

08010044 <ip4_output_if>:
{
 8010044:	b4f0      	push	{r4, r5, r6, r7}
 8010046:	9c06      	ldr	r4, [sp, #24]
 8010048:	f89d 5010 	ldrb.w	r5, [sp, #16]
 801004c:	f89d 6014 	ldrb.w	r6, [sp, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8010050:	b11a      	cbz	r2, 801005a <ip4_output_if+0x16>
    if (ip4_addr_isany(src)) {
 8010052:	b109      	cbz	r1, 8010058 <ip4_output_if+0x14>
 8010054:	680f      	ldr	r7, [r1, #0]
 8010056:	b907      	cbnz	r7, 801005a <ip4_output_if+0x16>
      src_used = netif_ip4_addr(netif);
 8010058:	1d21      	adds	r1, r4, #4
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801005a:	9504      	str	r5, [sp, #16]
 801005c:	e9cd 6405 	strd	r6, r4, [sp, #20]
}
 8010060:	bcf0      	pop	{r4, r5, r6, r7}
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8010062:	f7ff bf6b 	b.w	800ff3c <ip4_output_if_src>
 8010066:	bf00      	nop

08010068 <ip4_addr_isbroadcast_u32>:
{
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8010068:	1e43      	subs	r3, r0, #1
 801006a:	3303      	adds	r3, #3
 801006c:	d814      	bhi.n	8010098 <ip4_addr_isbroadcast_u32+0x30>
      (addr == IPADDR_ANY)) {
    return 1;
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801006e:	f891 302d 	ldrb.w	r3, [r1, #45]	; 0x2d
 8010072:	f013 0302 	ands.w	r3, r3, #2
 8010076:	d00d      	beq.n	8010094 <ip4_addr_isbroadcast_u32+0x2c>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8010078:	684b      	ldr	r3, [r1, #4]
 801007a:	4283      	cmp	r3, r0
 801007c:	d00f      	beq.n	801009e <ip4_addr_isbroadcast_u32+0x36>
    return 0;
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801007e:	688a      	ldr	r2, [r1, #8]
 8010080:	4043      	eors	r3, r0
 8010082:	4213      	tst	r3, r2
 8010084:	d10b      	bne.n	801009e <ip4_addr_isbroadcast_u32+0x36>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8010086:	43d3      	mvns	r3, r2
 8010088:	ea20 0002 	bic.w	r0, r0, r2
    return 1;
 801008c:	1ac3      	subs	r3, r0, r3
 801008e:	fab3 f383 	clz	r3, r3
 8010092:	095b      	lsrs	r3, r3, #5
    /* => network broadcast address */
    return 1;
  } else {
    return 0;
  }
}
 8010094:	4618      	mov	r0, r3
 8010096:	4770      	bx	lr
    return 1;
 8010098:	2301      	movs	r3, #1
}
 801009a:	4618      	mov	r0, r3
 801009c:	4770      	bx	lr
    return 0;
 801009e:	2300      	movs	r3, #0
}
 80100a0:	4618      	mov	r0, r3
 80100a2:	4770      	bx	lr

080100a4 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80100a4:	b510      	push	{r4, lr}
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80100a6:	4604      	mov	r4, r0
 80100a8:	b148      	cbz	r0, 80100be <ipfrag_free_pbuf_custom+0x1a>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
  if (pcr->original != NULL) {
 80100aa:	6960      	ldr	r0, [r4, #20]
 80100ac:	b108      	cbz	r0, 80100b2 <ipfrag_free_pbuf_custom+0xe>
    pbuf_free(pcr->original);
 80100ae:	f7fa fab9 	bl	800a624 <pbuf_free>
  memp_free(MEMP_FRAG_PBUF, p);
 80100b2:	4621      	mov	r1, r4
 80100b4:	2005      	movs	r0, #5
  }
  ip_frag_free_pbuf_custom_ref(pcr);
}
 80100b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_FRAG_PBUF, p);
 80100ba:	f7f9 beed 	b.w	8009e98 <memp_free>
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80100be:	4b04      	ldr	r3, [pc, #16]	; (80100d0 <ipfrag_free_pbuf_custom+0x2c>)
 80100c0:	f240 22ce 	movw	r2, #718	; 0x2ce
 80100c4:	4903      	ldr	r1, [pc, #12]	; (80100d4 <ipfrag_free_pbuf_custom+0x30>)
 80100c6:	4804      	ldr	r0, [pc, #16]	; (80100d8 <ipfrag_free_pbuf_custom+0x34>)
 80100c8:	f001 faa0 	bl	801160c <iprintf>
 80100cc:	e7ed      	b.n	80100aa <ipfrag_free_pbuf_custom+0x6>
 80100ce:	bf00      	nop
 80100d0:	08015044 	.word	0x08015044
 80100d4:	08015080 	.word	0x08015080
 80100d8:	080128dc 	.word	0x080128dc

080100dc <ip_reass_free_complete_datagram>:
  LWIP_ASSERT("prev != ipr", prev != ipr);
 80100dc:	4281      	cmp	r1, r0
{
 80100de:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100e2:	4606      	mov	r6, r0
 80100e4:	460f      	mov	r7, r1
  LWIP_ASSERT("prev != ipr", prev != ipr);
 80100e6:	d075      	beq.n	80101d4 <ip_reass_free_complete_datagram+0xf8>
  if (prev != NULL) {
 80100e8:	b147      	cbz	r7, 80100fc <ip_reass_free_complete_datagram+0x20>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 80100ea:	683b      	ldr	r3, [r7, #0]
 80100ec:	42b3      	cmp	r3, r6
 80100ee:	d005      	beq.n	80100fc <ip_reass_free_complete_datagram+0x20>
 80100f0:	4b40      	ldr	r3, [pc, #256]	; (80101f4 <ip_reass_free_complete_datagram+0x118>)
 80100f2:	22ad      	movs	r2, #173	; 0xad
 80100f4:	4940      	ldr	r1, [pc, #256]	; (80101f8 <ip_reass_free_complete_datagram+0x11c>)
 80100f6:	4841      	ldr	r0, [pc, #260]	; (80101fc <ip_reass_free_complete_datagram+0x120>)
 80100f8:	f001 fa88 	bl	801160c <iprintf>
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 80100fc:	6875      	ldr	r5, [r6, #4]
 80100fe:	686b      	ldr	r3, [r5, #4]
  if (iprh->start == 0) {
 8010100:	889a      	ldrh	r2, [r3, #4]
 8010102:	2a00      	cmp	r2, #0
 8010104:	d047      	beq.n	8010196 <ip_reass_free_complete_datagram+0xba>
  u16_t pbufs_freed = 0;
 8010106:	f04f 0b00 	mov.w	fp, #0
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801010a:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 80101f4 <ip_reass_free_complete_datagram+0x118>
 801010e:	f8df 9104 	ldr.w	r9, [pc, #260]	; 8010214 <ip_reass_free_complete_datagram+0x138>
 8010112:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 80101fc <ip_reass_free_complete_datagram+0x120>
 8010116:	e005      	b.n	8010124 <ip_reass_free_complete_datagram+0x48>
    pbuf_free(pcur);
 8010118:	4628      	mov	r0, r5
    iprh = (struct ip_reass_helper *)p->payload;
 801011a:	4625      	mov	r5, r4
    pbuf_free(pcur);
 801011c:	f7fa fa82 	bl	800a624 <pbuf_free>
  while (p != NULL) {
 8010120:	b1b4      	cbz	r4, 8010150 <ip_reass_free_complete_datagram+0x74>
    iprh = (struct ip_reass_helper *)p->payload;
 8010122:	6863      	ldr	r3, [r4, #4]
    clen = pbuf_clen(pcur);
 8010124:	4628      	mov	r0, r5
    p = iprh->next_pbuf;
 8010126:	681c      	ldr	r4, [r3, #0]
    clen = pbuf_clen(pcur);
 8010128:	f7fa fbf2 	bl	800a910 <pbuf_clen>
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801012c:	4458      	add	r0, fp
 801012e:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8010132:	fa1f fb80 	uxth.w	fp, r0
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8010136:	dbef      	blt.n	8010118 <ip_reass_free_complete_datagram+0x3c>
 8010138:	4653      	mov	r3, sl
 801013a:	22cc      	movs	r2, #204	; 0xcc
 801013c:	4649      	mov	r1, r9
 801013e:	4640      	mov	r0, r8
 8010140:	f001 fa64 	bl	801160c <iprintf>
    pbuf_free(pcur);
 8010144:	4628      	mov	r0, r5
    iprh = (struct ip_reass_helper *)p->payload;
 8010146:	4625      	mov	r5, r4
    pbuf_free(pcur);
 8010148:	f7fa fa6c 	bl	800a624 <pbuf_free>
  while (p != NULL) {
 801014c:	2c00      	cmp	r4, #0
 801014e:	d1e8      	bne.n	8010122 <ip_reass_free_complete_datagram+0x46>
  if (reassdatagrams == ipr) {
 8010150:	4b2b      	ldr	r3, [pc, #172]	; (8010200 <ip_reass_free_complete_datagram+0x124>)
 8010152:	681a      	ldr	r2, [r3, #0]
 8010154:	4296      	cmp	r6, r2
 8010156:	d03a      	beq.n	80101ce <ip_reass_free_complete_datagram+0xf2>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8010158:	2f00      	cmp	r7, #0
 801015a:	d042      	beq.n	80101e2 <ip_reass_free_complete_datagram+0x106>
    prev->next = ipr->next;
 801015c:	6833      	ldr	r3, [r6, #0]
 801015e:	603b      	str	r3, [r7, #0]
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8010160:	4c28      	ldr	r4, [pc, #160]	; (8010204 <ip_reass_free_complete_datagram+0x128>)
  memp_free(MEMP_REASSDATA, ipr);
 8010162:	4631      	mov	r1, r6
 8010164:	2004      	movs	r0, #4
 8010166:	f7f9 fe97 	bl	8009e98 <memp_free>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801016a:	8823      	ldrh	r3, [r4, #0]
 801016c:	455b      	cmp	r3, fp
 801016e:	d305      	bcc.n	801017c <ip_reass_free_complete_datagram+0xa0>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8010170:	eba3 030b 	sub.w	r3, r3, fp
}
 8010174:	4658      	mov	r0, fp
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8010176:	8023      	strh	r3, [r4, #0]
}
 8010178:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801017c:	4b1d      	ldr	r3, [pc, #116]	; (80101f4 <ip_reass_free_complete_datagram+0x118>)
 801017e:	22d2      	movs	r2, #210	; 0xd2
 8010180:	4921      	ldr	r1, [pc, #132]	; (8010208 <ip_reass_free_complete_datagram+0x12c>)
 8010182:	481e      	ldr	r0, [pc, #120]	; (80101fc <ip_reass_free_complete_datagram+0x120>)
 8010184:	f001 fa42 	bl	801160c <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8010188:	8823      	ldrh	r3, [r4, #0]
}
 801018a:	4658      	mov	r0, fp
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801018c:	eba3 030b 	sub.w	r3, r3, fp
 8010190:	8023      	strh	r3, [r4, #0]
}
 8010192:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ipr->p = iprh->next_pbuf;
 8010196:	681a      	ldr	r2, [r3, #0]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8010198:	6930      	ldr	r0, [r6, #16]
 801019a:	6971      	ldr	r1, [r6, #20]
    ipr->p = iprh->next_pbuf;
 801019c:	6072      	str	r2, [r6, #4]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801019e:	68f4      	ldr	r4, [r6, #12]
 80101a0:	68b2      	ldr	r2, [r6, #8]
 80101a2:	6098      	str	r0, [r3, #8]
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80101a4:	4628      	mov	r0, r5
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80101a6:	60d9      	str	r1, [r3, #12]
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80101a8:	2101      	movs	r1, #1
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80101aa:	601a      	str	r2, [r3, #0]
 80101ac:	605c      	str	r4, [r3, #4]
 80101ae:	69b2      	ldr	r2, [r6, #24]
 80101b0:	611a      	str	r2, [r3, #16]
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80101b2:	f7ff fdad 	bl	800fd10 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80101b6:	4628      	mov	r0, r5
 80101b8:	f7fa fbaa 	bl	800a910 <pbuf_clen>
 80101bc:	4683      	mov	fp, r0
    pbuf_free(p);
 80101be:	4628      	mov	r0, r5
 80101c0:	f7fa fa30 	bl	800a624 <pbuf_free>
  p = ipr->p;
 80101c4:	6875      	ldr	r5, [r6, #4]
  while (p != NULL) {
 80101c6:	2d00      	cmp	r5, #0
 80101c8:	d0c2      	beq.n	8010150 <ip_reass_free_complete_datagram+0x74>
    iprh = (struct ip_reass_helper *)p->payload;
 80101ca:	686b      	ldr	r3, [r5, #4]
 80101cc:	e79d      	b.n	801010a <ip_reass_free_complete_datagram+0x2e>
    reassdatagrams = ipr->next;
 80101ce:	6832      	ldr	r2, [r6, #0]
 80101d0:	601a      	str	r2, [r3, #0]
 80101d2:	e7c5      	b.n	8010160 <ip_reass_free_complete_datagram+0x84>
  LWIP_ASSERT("prev != ipr", prev != ipr);
 80101d4:	4b07      	ldr	r3, [pc, #28]	; (80101f4 <ip_reass_free_complete_datagram+0x118>)
 80101d6:	22ab      	movs	r2, #171	; 0xab
 80101d8:	490c      	ldr	r1, [pc, #48]	; (801020c <ip_reass_free_complete_datagram+0x130>)
 80101da:	4808      	ldr	r0, [pc, #32]	; (80101fc <ip_reass_free_complete_datagram+0x120>)
 80101dc:	f001 fa16 	bl	801160c <iprintf>
 80101e0:	e782      	b.n	80100e8 <ip_reass_free_complete_datagram+0xc>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80101e2:	4b04      	ldr	r3, [pc, #16]	; (80101f4 <ip_reass_free_complete_datagram+0x118>)
 80101e4:	f240 1245 	movw	r2, #325	; 0x145
 80101e8:	4909      	ldr	r1, [pc, #36]	; (8010210 <ip_reass_free_complete_datagram+0x134>)
 80101ea:	4804      	ldr	r0, [pc, #16]	; (80101fc <ip_reass_free_complete_datagram+0x120>)
 80101ec:	f001 fa0e 	bl	801160c <iprintf>
 80101f0:	e7b4      	b.n	801015c <ip_reass_free_complete_datagram+0x80>
 80101f2:	bf00      	nop
 80101f4:	08015044 	.word	0x08015044
 80101f8:	08015098 	.word	0x08015098
 80101fc:	080128dc 	.word	0x080128dc
 8010200:	240106dc 	.word	0x240106dc
 8010204:	240106d8 	.word	0x240106d8
 8010208:	080150e8 	.word	0x080150e8
 801020c:	0801508c 	.word	0x0801508c
 8010210:	080150cc 	.word	0x080150cc
 8010214:	080150ac 	.word	0x080150ac

08010218 <ip_reass_remove_oldest_datagram>:
{
 8010218:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  int pbufs_freed = 0, pbufs_freed_current;
 801021c:	2700      	movs	r7, #0
 801021e:	f8df 8068 	ldr.w	r8, [pc, #104]	; 8010288 <ip_reass_remove_oldest_datagram+0x70>
{
 8010222:	4605      	mov	r5, r0
 8010224:	460e      	mov	r6, r1
    r = reassdatagrams;
 8010226:	f8d8 3000 	ldr.w	r3, [r8]
    while (r != NULL) {
 801022a:	b1f3      	cbz	r3, 801026a <ip_reass_remove_oldest_datagram+0x52>
    other_datagrams = 0;
 801022c:	2400      	movs	r4, #0
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801022e:	f8d5 e00c 	ldr.w	lr, [r5, #12]
    oldest_prev = NULL;
 8010232:	4621      	mov	r1, r4
    prev = NULL;
 8010234:	46a4      	mov	ip, r4
    oldest = NULL;
 8010236:	4620      	mov	r0, r4
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8010238:	695a      	ldr	r2, [r3, #20]
 801023a:	4572      	cmp	r2, lr
 801023c:	d018      	beq.n	8010270 <ip_reass_remove_oldest_datagram+0x58>
        other_datagrams++;
 801023e:	3401      	adds	r4, #1
        if (oldest == NULL) {
 8010240:	b120      	cbz	r0, 801024c <ip_reass_remove_oldest_datagram+0x34>
        } else if (r->timer <= oldest->timer) {
 8010242:	f893 901f 	ldrb.w	r9, [r3, #31]
 8010246:	7fc2      	ldrb	r2, [r0, #31]
 8010248:	4591      	cmp	r9, r2
 801024a:	d801      	bhi.n	8010250 <ip_reass_remove_oldest_datagram+0x38>
 801024c:	4661      	mov	r1, ip
 801024e:	4618      	mov	r0, r3
      if (r->next != NULL) {
 8010250:	681a      	ldr	r2, [r3, #0]
 8010252:	469c      	mov	ip, r3
 8010254:	4613      	mov	r3, r2
 8010256:	2a00      	cmp	r2, #0
 8010258:	d1ee      	bne.n	8010238 <ip_reass_remove_oldest_datagram+0x20>
    if (oldest != NULL) {
 801025a:	b110      	cbz	r0, 8010262 <ip_reass_remove_oldest_datagram+0x4a>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801025c:	f7ff ff3e 	bl	80100dc <ip_reass_free_complete_datagram>
      pbufs_freed += pbufs_freed_current;
 8010260:	4407      	add	r7, r0
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8010262:	42b7      	cmp	r7, r6
 8010264:	da01      	bge.n	801026a <ip_reass_remove_oldest_datagram+0x52>
 8010266:	2c01      	cmp	r4, #1
 8010268:	dcdd      	bgt.n	8010226 <ip_reass_remove_oldest_datagram+0xe>
}
 801026a:	4638      	mov	r0, r7
 801026c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8010270:	699a      	ldr	r2, [r3, #24]
 8010272:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8010276:	454a      	cmp	r2, r9
 8010278:	d1e1      	bne.n	801023e <ip_reass_remove_oldest_datagram+0x26>
 801027a:	f8b3 900c 	ldrh.w	r9, [r3, #12]
 801027e:	88aa      	ldrh	r2, [r5, #4]
 8010280:	4591      	cmp	r9, r2
 8010282:	d1dc      	bne.n	801023e <ip_reass_remove_oldest_datagram+0x26>
 8010284:	e7e4      	b.n	8010250 <ip_reass_remove_oldest_datagram+0x38>
 8010286:	bf00      	nop
 8010288:	240106dc 	.word	0x240106dc

0801028c <ip_reass_tmr>:
{
 801028c:	b538      	push	{r3, r4, r5, lr}
  r = reassdatagrams;
 801028e:	4b0a      	ldr	r3, [pc, #40]	; (80102b8 <ip_reass_tmr+0x2c>)
 8010290:	6818      	ldr	r0, [r3, #0]
  while (r != NULL) {
 8010292:	b140      	cbz	r0, 80102a6 <ip_reass_tmr+0x1a>
  struct ip_reassdata *r, *prev = NULL;
 8010294:	2400      	movs	r4, #0
    if (r->timer > 0) {
 8010296:	7fc3      	ldrb	r3, [r0, #31]
      r->timer--;
 8010298:	1e5a      	subs	r2, r3, #1
    if (r->timer > 0) {
 801029a:	b12b      	cbz	r3, 80102a8 <ip_reass_tmr+0x1c>
 801029c:	4604      	mov	r4, r0
      r->timer--;
 801029e:	77c2      	strb	r2, [r0, #31]
      r = r->next;
 80102a0:	6800      	ldr	r0, [r0, #0]
  while (r != NULL) {
 80102a2:	2800      	cmp	r0, #0
 80102a4:	d1f7      	bne.n	8010296 <ip_reass_tmr+0xa>
}
 80102a6:	bd38      	pop	{r3, r4, r5, pc}
      r = r->next;
 80102a8:	6805      	ldr	r5, [r0, #0]
      ip_reass_free_complete_datagram(tmp, prev);
 80102aa:	4621      	mov	r1, r4
 80102ac:	f7ff ff16 	bl	80100dc <ip_reass_free_complete_datagram>
      r = r->next;
 80102b0:	4628      	mov	r0, r5
  while (r != NULL) {
 80102b2:	2800      	cmp	r0, #0
 80102b4:	d1ef      	bne.n	8010296 <ip_reass_tmr+0xa>
 80102b6:	e7f6      	b.n	80102a6 <ip_reass_tmr+0x1a>
 80102b8:	240106dc 	.word	0x240106dc

080102bc <ip4_reass>:
{
 80102bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  fraghdr = (struct ip_hdr *)p->payload;
 80102c0:	f8d0 a004 	ldr.w	sl, [r0, #4]
{
 80102c4:	b085      	sub	sp, #20
 80102c6:	4605      	mov	r5, r0
  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 80102c8:	f89a 3000 	ldrb.w	r3, [sl]
 80102cc:	f003 030f 	and.w	r3, r3, #15
 80102d0:	2b05      	cmp	r3, #5
 80102d2:	f040 8089 	bne.w	80103e8 <ip4_reass+0x12c>
  offset = IPH_OFFSET_BYTES(fraghdr);
 80102d6:	f8ba 0006 	ldrh.w	r0, [sl, #6]
 80102da:	f7f9 fa01 	bl	80096e0 <lwip_htons>
 80102de:	4606      	mov	r6, r0
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80102e0:	f8ba 0002 	ldrh.w	r0, [sl, #2]
 80102e4:	f7f9 f9fc 	bl	80096e0 <lwip_htons>
  hlen = IPH_HL_BYTES(fraghdr);
 80102e8:	f89a 3000 	ldrb.w	r3, [sl]
 80102ec:	f003 030f 	and.w	r3, r3, #15
  if (hlen > len) {
 80102f0:	ebb0 0f83 	cmp.w	r0, r3, lsl #2
 80102f4:	ea4f 0283 	mov.w	r2, r3, lsl #2
 80102f8:	d376      	bcc.n	80103e8 <ip4_reass+0x12c>
  len = (u16_t)(len - hlen);
 80102fa:	1a83      	subs	r3, r0, r2
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80102fc:	f8df 82e8 	ldr.w	r8, [pc, #744]	; 80105e8 <ip4_reass+0x32c>
  clen = pbuf_clen(p);
 8010300:	4628      	mov	r0, r5
  len = (u16_t)(len - hlen);
 8010302:	b29b      	uxth	r3, r3
 8010304:	9300      	str	r3, [sp, #0]
  clen = pbuf_clen(p);
 8010306:	f7fa fb03 	bl	800a910 <pbuf_clen>
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801030a:	f8b8 3000 	ldrh.w	r3, [r8]
  clen = pbuf_clen(p);
 801030e:	4607      	mov	r7, r0
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8010310:	4403      	add	r3, r0
 8010312:	2b0a      	cmp	r3, #10
 8010314:	f300 80e5 	bgt.w	80104e2 <ip4_reass+0x226>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8010318:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 80105ec <ip4_reass+0x330>
 801031c:	f8d9 4000 	ldr.w	r4, [r9]
 8010320:	2c00      	cmp	r4, #0
 8010322:	f000 80ec 	beq.w	80104fe <ip4_reass+0x242>
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8010326:	f8da 200c 	ldr.w	r2, [sl, #12]
 801032a:	e003      	b.n	8010334 <ip4_reass+0x78>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801032c:	6824      	ldr	r4, [r4, #0]
 801032e:	2c00      	cmp	r4, #0
 8010330:	f000 80e5 	beq.w	80104fe <ip4_reass+0x242>
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8010334:	6963      	ldr	r3, [r4, #20]
 8010336:	4293      	cmp	r3, r2
 8010338:	d1f8      	bne.n	801032c <ip4_reass+0x70>
 801033a:	f8da 3010 	ldr.w	r3, [sl, #16]
 801033e:	69a1      	ldr	r1, [r4, #24]
 8010340:	4299      	cmp	r1, r3
 8010342:	d1f3      	bne.n	801032c <ip4_reass+0x70>
 8010344:	89a1      	ldrh	r1, [r4, #12]
 8010346:	f8ba 3004 	ldrh.w	r3, [sl, #4]
 801034a:	4299      	cmp	r1, r3
 801034c:	d1ee      	bne.n	801032c <ip4_reass+0x70>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801034e:	f8ba 0006 	ldrh.w	r0, [sl, #6]
 8010352:	f7f9 f9c5 	bl	80096e0 <lwip_htons>
 8010356:	f3c0 000c 	ubfx	r0, r0, #0, #13
 801035a:	2800      	cmp	r0, #0
 801035c:	f000 80a9 	beq.w	80104b2 <ip4_reass+0x1f6>
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8010360:	f8ba 3006 	ldrh.w	r3, [sl, #6]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8010364:	f3c6 060c 	ubfx	r6, r6, #0, #13
  if (is_last) {
 8010368:	f013 0320 	ands.w	r3, r3, #32
  offset = IPH_OFFSET_BYTES(fraghdr);
 801036c:	ea4f 06c6 	mov.w	r6, r6, lsl #3
  if (is_last) {
 8010370:	9301      	str	r3, [sp, #4]
 8010372:	d108      	bne.n	8010386 <ip4_reass+0xca>
    u16_t datagram_len = (u16_t)(offset + len);
 8010374:	9b00      	ldr	r3, [sp, #0]
 8010376:	18f3      	adds	r3, r6, r3
 8010378:	b29b      	uxth	r3, r3
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801037a:	429e      	cmp	r6, r3
 801037c:	d812      	bhi.n	80103a4 <ip4_reass+0xe8>
 801037e:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8010382:	4293      	cmp	r3, r2
 8010384:	d80e      	bhi.n	80103a4 <ip4_reass+0xe8>
  fraghdr = (struct ip_hdr *)new_p->payload;
 8010386:	f8d5 a004 	ldr.w	sl, [r5, #4]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801038a:	f8ba 0002 	ldrh.w	r0, [sl, #2]
 801038e:	f7f9 f9a7 	bl	80096e0 <lwip_htons>
  hlen = IPH_HL_BYTES(fraghdr);
 8010392:	f89a 3000 	ldrb.w	r3, [sl]
 8010396:	f003 030f 	and.w	r3, r3, #15
  if (hlen > len) {
 801039a:	ebb0 0f83 	cmp.w	r0, r3, lsl #2
 801039e:	ea4f 0283 	mov.w	r2, r3, lsl #2
 80103a2:	d229      	bcs.n	80103f8 <ip4_reass+0x13c>
  if (ipr->p == NULL) {
 80103a4:	6866      	ldr	r6, [r4, #4]
 80103a6:	b9fe      	cbnz	r6, 80103e8 <ip4_reass+0x12c>
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 80103a8:	f8d9 3000 	ldr.w	r3, [r9]
 80103ac:	42a3      	cmp	r3, r4
 80103ae:	d014      	beq.n	80103da <ip4_reass+0x11e>
 80103b0:	4b89      	ldr	r3, [pc, #548]	; (80105d8 <ip4_reass+0x31c>)
 80103b2:	f240 22ab 	movw	r2, #683	; 0x2ab
 80103b6:	4989      	ldr	r1, [pc, #548]	; (80105dc <ip4_reass+0x320>)
 80103b8:	4889      	ldr	r0, [pc, #548]	; (80105e0 <ip4_reass+0x324>)
 80103ba:	f001 f927 	bl	801160c <iprintf>
  if (reassdatagrams == ipr) {
 80103be:	f8d9 3000 	ldr.w	r3, [r9]
 80103c2:	429c      	cmp	r4, r3
 80103c4:	d009      	beq.n	80103da <ip4_reass+0x11e>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80103c6:	4b84      	ldr	r3, [pc, #528]	; (80105d8 <ip4_reass+0x31c>)
 80103c8:	f240 1245 	movw	r2, #325	; 0x145
 80103cc:	4985      	ldr	r1, [pc, #532]	; (80105e4 <ip4_reass+0x328>)
 80103ce:	4884      	ldr	r0, [pc, #528]	; (80105e0 <ip4_reass+0x324>)
 80103d0:	f001 f91c 	bl	801160c <iprintf>
    prev->next = ipr->next;
 80103d4:	6823      	ldr	r3, [r4, #0]
 80103d6:	6033      	str	r3, [r6, #0]
 80103d8:	deff      	udf	#255	; 0xff
    reassdatagrams = ipr->next;
 80103da:	6823      	ldr	r3, [r4, #0]
  memp_free(MEMP_REASSDATA, ipr);
 80103dc:	4621      	mov	r1, r4
 80103de:	2004      	movs	r0, #4
    reassdatagrams = ipr->next;
 80103e0:	f8c9 3000 	str.w	r3, [r9]
  memp_free(MEMP_REASSDATA, ipr);
 80103e4:	f7f9 fd58 	bl	8009e98 <memp_free>
  pbuf_free(p);
 80103e8:	4628      	mov	r0, r5
  return NULL;
 80103ea:	2600      	movs	r6, #0
  pbuf_free(p);
 80103ec:	f7fa f91a 	bl	800a624 <pbuf_free>
}
 80103f0:	4630      	mov	r0, r6
 80103f2:	b005      	add	sp, #20
 80103f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  len = (u16_t)(len - hlen);
 80103f8:	1a83      	subs	r3, r0, r2
  offset = IPH_OFFSET_BYTES(fraghdr);
 80103fa:	f8ba 0006 	ldrh.w	r0, [sl, #6]
  len = (u16_t)(len - hlen);
 80103fe:	fa1f fa83 	uxth.w	sl, r3
  offset = IPH_OFFSET_BYTES(fraghdr);
 8010402:	f7f9 f96d 	bl	80096e0 <lwip_htons>
 8010406:	f3c0 000c 	ubfx	r0, r0, #0, #13
  iprh = (struct ip_reass_helper *)new_p->payload;
 801040a:	f8d5 b004 	ldr.w	fp, [r5, #4]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801040e:	00c2      	lsls	r2, r0, #3
  iprh = (struct ip_reass_helper *)new_p->payload;
 8010410:	f8cd b008 	str.w	fp, [sp, #8]
  iprh->end = (u16_t)(offset + len);
 8010414:	eb0a 0302 	add.w	r3, sl, r2
  iprh->start = offset;
 8010418:	f8ab 2004 	strh.w	r2, [fp, #4]
  iprh->end = (u16_t)(offset + len);
 801041c:	f8ab 3006 	strh.w	r3, [fp, #6]
 8010420:	b29b      	uxth	r3, r3
 8010422:	4619      	mov	r1, r3
 8010424:	9303      	str	r3, [sp, #12]
  iprh->next_pbuf = NULL;
 8010426:	2300      	movs	r3, #0
  if (iprh->end < offset) {
 8010428:	428a      	cmp	r2, r1
  iprh->next_pbuf = NULL;
 801042a:	f88b 3000 	strb.w	r3, [fp]
 801042e:	f88b 3001 	strb.w	r3, [fp, #1]
 8010432:	f88b 3002 	strb.w	r3, [fp, #2]
 8010436:	f88b 3003 	strb.w	r3, [fp, #3]
  if (iprh->end < offset) {
 801043a:	d8b3      	bhi.n	80103a4 <ip4_reass+0xe8>
  for (q = ipr->p; q != NULL;) {
 801043c:	6861      	ldr	r1, [r4, #4]
 801043e:	2900      	cmp	r1, #0
 8010440:	f000 80be 	beq.w	80105c0 <ip4_reass+0x304>
  int valid = 1;
 8010444:	f04f 0a01 	mov.w	sl, #1
 8010448:	4694      	mov	ip, r2
 801044a:	e00e      	b.n	801046a <ip4_reass+0x1ae>
    } else if (iprh->start == iprh_tmp->start) {
 801044c:	d0cc      	beq.n	80103e8 <ip4_reass+0x12c>
    } else if (iprh->start < iprh_tmp->end) {
 801044e:	f8b3 e006 	ldrh.w	lr, [r3, #6]
 8010452:	45f4      	cmp	ip, lr
 8010454:	d3c8      	bcc.n	80103e8 <ip4_reass+0x12c>
      if (iprh_prev != NULL) {
 8010456:	b122      	cbz	r2, 8010462 <ip4_reass+0x1a6>
        if (iprh_prev->end != iprh_tmp->start) {
 8010458:	88d2      	ldrh	r2, [r2, #6]
          valid = 0;
 801045a:	4282      	cmp	r2, r0
 801045c:	bf18      	it	ne
 801045e:	f04f 0a00 	movne.w	sl, #0
    q = iprh_tmp->next_pbuf;
 8010462:	6819      	ldr	r1, [r3, #0]
  for (q = ipr->p; q != NULL;) {
 8010464:	2900      	cmp	r1, #0
 8010466:	f000 8084 	beq.w	8010572 <ip4_reass+0x2b6>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801046a:	461a      	mov	r2, r3
 801046c:	684b      	ldr	r3, [r1, #4]
    if (iprh->start < iprh_tmp->start) {
 801046e:	8898      	ldrh	r0, [r3, #4]
 8010470:	4584      	cmp	ip, r0
 8010472:	d2eb      	bcs.n	801044c <ip4_reass+0x190>
      iprh->next_pbuf = q;
 8010474:	4613      	mov	r3, r2
 8010476:	f8cb 1000 	str.w	r1, [fp]
 801047a:	4662      	mov	r2, ip
 801047c:	469c      	mov	ip, r3
      if (iprh_prev != NULL) {
 801047e:	2b00      	cmp	r3, #0
 8010480:	d060      	beq.n	8010544 <ip4_reass+0x288>
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8010482:	88db      	ldrh	r3, [r3, #6]
 8010484:	429a      	cmp	r2, r3
 8010486:	d3af      	bcc.n	80103e8 <ip4_reass+0x12c>
 8010488:	9903      	ldr	r1, [sp, #12]
 801048a:	4281      	cmp	r1, r0
 801048c:	d8ac      	bhi.n	80103e8 <ip4_reass+0x12c>
        if (iprh_prev->end != iprh->start) {
 801048e:	429a      	cmp	r2, r3
        iprh_prev->next_pbuf = new_p;
 8010490:	f8cc 5000 	str.w	r5, [ip]
        if (iprh_prev->end != iprh->start) {
 8010494:	d05b      	beq.n	801054e <ip4_reass+0x292>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8010496:	9b01      	ldr	r3, [sp, #4]
 8010498:	2b00      	cmp	r3, #0
 801049a:	f000 8084 	beq.w	80105a6 <ip4_reass+0x2ea>
 801049e:	7fa3      	ldrb	r3, [r4, #30]
 80104a0:	07db      	lsls	r3, r3, #31
 80104a2:	d45c      	bmi.n	801055e <ip4_reass+0x2a2>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80104a4:	f8b8 3000 	ldrh.w	r3, [r8]
  return NULL;
 80104a8:	2600      	movs	r6, #0
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80104aa:	443b      	add	r3, r7
 80104ac:	f8a8 3000 	strh.w	r3, [r8]
  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80104b0:	e79e      	b.n	80103f0 <ip4_reass+0x134>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80104b2:	89e0      	ldrh	r0, [r4, #14]
 80104b4:	f7f9 f914 	bl	80096e0 <lwip_htons>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80104b8:	f3c0 000c 	ubfx	r0, r0, #0, #13
 80104bc:	2800      	cmp	r0, #0
 80104be:	f43f af4f 	beq.w	8010360 <ip4_reass+0xa4>
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80104c2:	f8da 3000 	ldr.w	r3, [sl]
 80104c6:	f8da 0004 	ldr.w	r0, [sl, #4]
 80104ca:	f8da 1008 	ldr.w	r1, [sl, #8]
 80104ce:	f8da 200c 	ldr.w	r2, [sl, #12]
 80104d2:	60a3      	str	r3, [r4, #8]
 80104d4:	60e0      	str	r0, [r4, #12]
 80104d6:	6121      	str	r1, [r4, #16]
 80104d8:	6162      	str	r2, [r4, #20]
 80104da:	f8da 3010 	ldr.w	r3, [sl, #16]
 80104de:	61a3      	str	r3, [r4, #24]
 80104e0:	e73e      	b.n	8010360 <ip4_reass+0xa4>
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80104e2:	4601      	mov	r1, r0
 80104e4:	4650      	mov	r0, sl
 80104e6:	f7ff fe97 	bl	8010218 <ip_reass_remove_oldest_datagram>
 80104ea:	2800      	cmp	r0, #0
 80104ec:	f43f af7c 	beq.w	80103e8 <ip4_reass+0x12c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80104f0:	f8b8 3000 	ldrh.w	r3, [r8]
 80104f4:	443b      	add	r3, r7
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80104f6:	2b0a      	cmp	r3, #10
 80104f8:	f77f af0e 	ble.w	8010318 <ip4_reass+0x5c>
 80104fc:	e774      	b.n	80103e8 <ip4_reass+0x12c>
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80104fe:	2004      	movs	r0, #4
 8010500:	f7f9 fc84 	bl	8009e0c <memp_malloc>
  if (ipr == NULL) {
 8010504:	4604      	mov	r4, r0
 8010506:	b178      	cbz	r0, 8010528 <ip4_reass+0x26c>
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8010508:	2300      	movs	r3, #0
 801050a:	61e3      	str	r3, [r4, #28]
 801050c:	60a3      	str	r3, [r4, #8]
 801050e:	60e3      	str	r3, [r4, #12]
 8010510:	6123      	str	r3, [r4, #16]
 8010512:	6163      	str	r3, [r4, #20]
 8010514:	61a3      	str	r3, [r4, #24]
 8010516:	6063      	str	r3, [r4, #4]
  ipr->next = reassdatagrams;
 8010518:	f8d9 3000 	ldr.w	r3, [r9]
  reassdatagrams = ipr;
 801051c:	f8c9 4000 	str.w	r4, [r9]
  ipr->next = reassdatagrams;
 8010520:	6023      	str	r3, [r4, #0]
  ipr->timer = IP_REASS_MAXAGE;
 8010522:	230f      	movs	r3, #15
 8010524:	77e3      	strb	r3, [r4, #31]
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8010526:	e7cc      	b.n	80104c2 <ip4_reass+0x206>
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8010528:	4639      	mov	r1, r7
 801052a:	4650      	mov	r0, sl
 801052c:	f7ff fe74 	bl	8010218 <ip_reass_remove_oldest_datagram>
 8010530:	4287      	cmp	r7, r0
 8010532:	f73f af59 	bgt.w	80103e8 <ip4_reass+0x12c>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8010536:	2004      	movs	r0, #4
 8010538:	f7f9 fc68 	bl	8009e0c <memp_malloc>
    if (ipr == NULL)
 801053c:	4604      	mov	r4, r0
 801053e:	2800      	cmp	r0, #0
 8010540:	d1e2      	bne.n	8010508 <ip4_reass+0x24c>
 8010542:	e751      	b.n	80103e8 <ip4_reass+0x12c>
        if (iprh->end > iprh_tmp->start) {
 8010544:	9b03      	ldr	r3, [sp, #12]
 8010546:	4283      	cmp	r3, r0
 8010548:	f63f af4e 	bhi.w	80103e8 <ip4_reass+0x12c>
        ipr->p = new_p;
 801054c:	6065      	str	r5, [r4, #4]
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801054e:	9b01      	ldr	r3, [sp, #4]
 8010550:	b19b      	cbz	r3, 801057a <ip4_reass+0x2be>
 8010552:	7fa3      	ldrb	r3, [r4, #30]
 8010554:	07d9      	lsls	r1, r3, #31
 8010556:	d5a5      	bpl.n	80104a4 <ip4_reass+0x1e8>
    if (valid) {
 8010558:	f1ba 0f00 	cmp.w	sl, #0
 801055c:	d138      	bne.n	80105d0 <ip4_reass+0x314>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801055e:	f8b8 3000 	ldrh.w	r3, [r8]
 8010562:	443b      	add	r3, r7
 8010564:	f8a8 3000 	strh.w	r3, [r8]
  return NULL;
 8010568:	2600      	movs	r6, #0
}
 801056a:	4630      	mov	r0, r6
 801056c:	b005      	add	sp, #20
 801056e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (iprh_prev->end != iprh->start) {
 8010572:	45f4      	cmp	ip, lr
      iprh_prev->next_pbuf = new_p;
 8010574:	601d      	str	r5, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8010576:	d18e      	bne.n	8010496 <ip4_reass+0x1da>
 8010578:	e7e9      	b.n	801054e <ip4_reass+0x292>
    if (valid) {
 801057a:	f1ba 0f00 	cmp.w	sl, #0
 801057e:	d012      	beq.n	80105a6 <ip4_reass+0x2ea>
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8010580:	6863      	ldr	r3, [r4, #4]
 8010582:	b183      	cbz	r3, 80105a6 <ip4_reass+0x2ea>
 8010584:	6859      	ldr	r1, [r3, #4]
 8010586:	888b      	ldrh	r3, [r1, #4]
 8010588:	2b00      	cmp	r3, #0
 801058a:	d031      	beq.n	80105f0 <ip4_reass+0x334>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801058c:	f8b8 3000 	ldrh.w	r3, [r8]
 8010590:	443b      	add	r3, r7
 8010592:	f8a8 3000 	strh.w	r3, [r8]
  if (is_last) {
 8010596:	9b01      	ldr	r3, [sp, #4]
 8010598:	2b00      	cmp	r3, #0
 801059a:	d1e5      	bne.n	8010568 <ip4_reass+0x2ac>
 801059c:	e008      	b.n	80105b0 <ip4_reass+0x2f4>
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801059e:	f8bb 3004 	ldrh.w	r3, [fp, #4]
 80105a2:	4659      	mov	r1, fp
 80105a4:	b323      	cbz	r3, 80105f0 <ip4_reass+0x334>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80105a6:	f8b8 3000 	ldrh.w	r3, [r8]
 80105aa:	443b      	add	r3, r7
 80105ac:	f8a8 3000 	strh.w	r3, [r8]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80105b0:	7fa3      	ldrb	r3, [r4, #30]
    u16_t datagram_len = (u16_t)(offset + len);
 80105b2:	9a00      	ldr	r2, [sp, #0]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80105b4:	f043 0301 	orr.w	r3, r3, #1
    u16_t datagram_len = (u16_t)(offset + len);
 80105b8:	4416      	add	r6, r2
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80105ba:	77a3      	strb	r3, [r4, #30]
    ipr->datagram_len = datagram_len;
 80105bc:	83a6      	strh	r6, [r4, #28]
  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80105be:	e7d3      	b.n	8010568 <ip4_reass+0x2ac>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80105c0:	9b01      	ldr	r3, [sp, #4]
      ipr->p = new_p;
 80105c2:	6065      	str	r5, [r4, #4]
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80105c4:	2b00      	cmp	r3, #0
 80105c6:	d0ea      	beq.n	801059e <ip4_reass+0x2e2>
 80105c8:	7fa3      	ldrb	r3, [r4, #30]
 80105ca:	07da      	lsls	r2, r3, #31
 80105cc:	f57f af6a 	bpl.w	80104a4 <ip4_reass+0x1e8>
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80105d0:	6863      	ldr	r3, [r4, #4]
 80105d2:	2b00      	cmp	r3, #0
 80105d4:	d0c3      	beq.n	801055e <ip4_reass+0x2a2>
 80105d6:	e7d5      	b.n	8010584 <ip4_reass+0x2c8>
 80105d8:	08015044 	.word	0x08015044
 80105dc:	0801515c 	.word	0x0801515c
 80105e0:	080128dc 	.word	0x080128dc
 80105e4:	080150cc 	.word	0x080150cc
 80105e8:	240106d8 	.word	0x240106d8
 80105ec:	240106dc 	.word	0x240106dc
        q = iprh->next_pbuf;
 80105f0:	f8db 3000 	ldr.w	r3, [fp]
        while (q != NULL) {
 80105f4:	b153      	cbz	r3, 801060c <ip4_reass+0x350>
 80105f6:	9a02      	ldr	r2, [sp, #8]
          iprh = (struct ip_reass_helper *)q->payload;
 80105f8:	4610      	mov	r0, r2
 80105fa:	685a      	ldr	r2, [r3, #4]
          if (iprh_prev->end != iprh->start) {
 80105fc:	88c0      	ldrh	r0, [r0, #6]
 80105fe:	8893      	ldrh	r3, [r2, #4]
 8010600:	4298      	cmp	r0, r3
 8010602:	d1c3      	bne.n	801058c <ip4_reass+0x2d0>
          q = iprh->next_pbuf;
 8010604:	6813      	ldr	r3, [r2, #0]
        while (q != NULL) {
 8010606:	2b00      	cmp	r3, #0
 8010608:	d1f6      	bne.n	80105f8 <ip4_reass+0x33c>
 801060a:	9202      	str	r2, [sp, #8]
          LWIP_ASSERT("sanity check",
 801060c:	9b02      	ldr	r3, [sp, #8]
 801060e:	428b      	cmp	r3, r1
 8010610:	d110      	bne.n	8010634 <ip4_reass+0x378>
 8010612:	4b3e      	ldr	r3, [pc, #248]	; (801070c <ip4_reass+0x450>)
 8010614:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8010618:	493d      	ldr	r1, [pc, #244]	; (8010710 <ip4_reass+0x454>)
 801061a:	483e      	ldr	r0, [pc, #248]	; (8010714 <ip4_reass+0x458>)
 801061c:	f000 fff6 	bl	801160c <iprintf>
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8010620:	9b02      	ldr	r3, [sp, #8]
 8010622:	681b      	ldr	r3, [r3, #0]
 8010624:	b133      	cbz	r3, 8010634 <ip4_reass+0x378>
 8010626:	4b39      	ldr	r3, [pc, #228]	; (801070c <ip4_reass+0x450>)
 8010628:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 801062c:	493a      	ldr	r1, [pc, #232]	; (8010718 <ip4_reass+0x45c>)
 801062e:	4839      	ldr	r0, [pc, #228]	; (8010714 <ip4_reass+0x458>)
 8010630:	f000 ffec 	bl	801160c <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8010634:	f8b8 3000 	ldrh.w	r3, [r8]
 8010638:	443b      	add	r3, r7
 801063a:	f8a8 3000 	strh.w	r3, [r8]
  if (is_last) {
 801063e:	9b01      	ldr	r3, [sp, #4]
 8010640:	2b00      	cmp	r3, #0
 8010642:	d156      	bne.n	80106f2 <ip4_reass+0x436>
    u16_t datagram_len = (u16_t)(offset + len);
 8010644:	9800      	ldr	r0, [sp, #0]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8010646:	7fa3      	ldrb	r3, [r4, #30]
    u16_t datagram_len = (u16_t)(offset + len);
 8010648:	4430      	add	r0, r6
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801064a:	f043 0301 	orr.w	r3, r3, #1
    u16_t datagram_len = (u16_t)(offset + len);
 801064e:	b280      	uxth	r0, r0
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8010650:	77a3      	strb	r3, [r4, #30]
    ipr->datagram_len = datagram_len;
 8010652:	83a0      	strh	r0, [r4, #28]
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8010654:	6863      	ldr	r3, [r4, #4]
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8010656:	3014      	adds	r0, #20
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8010658:	68e5      	ldr	r5, [r4, #12]
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801065a:	685e      	ldr	r6, [r3, #4]
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801065c:	b280      	uxth	r0, r0
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801065e:	68a3      	ldr	r3, [r4, #8]
 8010660:	6921      	ldr	r1, [r4, #16]
 8010662:	6962      	ldr	r2, [r4, #20]
 8010664:	6075      	str	r5, [r6, #4]
 8010666:	60b1      	str	r1, [r6, #8]
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8010668:	6835      	ldr	r5, [r6, #0]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801066a:	60f2      	str	r2, [r6, #12]
 801066c:	6033      	str	r3, [r6, #0]
 801066e:	69a3      	ldr	r3, [r4, #24]
 8010670:	6133      	str	r3, [r6, #16]
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8010672:	f7f9 f835 	bl	80096e0 <lwip_htons>
    IPH_OFFSET_SET(fraghdr, 0);
 8010676:	2300      	movs	r3, #0
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8010678:	8070      	strh	r0, [r6, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801067a:	71b3      	strb	r3, [r6, #6]
 801067c:	71f3      	strb	r3, [r6, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801067e:	72b3      	strb	r3, [r6, #10]
 8010680:	72f3      	strb	r3, [r6, #11]
    p = ipr->p;
 8010682:	6866      	ldr	r6, [r4, #4]
    while (r != NULL) {
 8010684:	b15d      	cbz	r5, 801069e <ip4_reass+0x3e2>
      iprh = (struct ip_reass_helper *)r->payload;
 8010686:	686f      	ldr	r7, [r5, #4]
      pbuf_remove_header(r, IP_HLEN);
 8010688:	4628      	mov	r0, r5
 801068a:	2114      	movs	r1, #20
 801068c:	f7f9 ff5e 	bl	800a54c <pbuf_remove_header>
      pbuf_cat(p, r);
 8010690:	4629      	mov	r1, r5
 8010692:	4630      	mov	r0, r6
 8010694:	f7fa f966 	bl	800a964 <pbuf_cat>
      r = iprh->next_pbuf;
 8010698:	683d      	ldr	r5, [r7, #0]
    while (r != NULL) {
 801069a:	2d00      	cmp	r5, #0
 801069c:	d1f3      	bne.n	8010686 <ip4_reass+0x3ca>
    if (ipr == reassdatagrams) {
 801069e:	f8d9 5000 	ldr.w	r5, [r9]
 80106a2:	42a5      	cmp	r5, r4
 80106a4:	d005      	beq.n	80106b2 <ip4_reass+0x3f6>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80106a6:	b335      	cbz	r5, 80106f6 <ip4_reass+0x43a>
        if (ipr_prev->next == ipr) {
 80106a8:	682b      	ldr	r3, [r5, #0]
 80106aa:	42a3      	cmp	r3, r4
 80106ac:	d014      	beq.n	80106d8 <ip4_reass+0x41c>
 80106ae:	461d      	mov	r5, r3
 80106b0:	e7f9      	b.n	80106a6 <ip4_reass+0x3ea>
    reassdatagrams = ipr->next;
 80106b2:	6823      	ldr	r3, [r4, #0]
 80106b4:	f8c9 3000 	str.w	r3, [r9]
  memp_free(MEMP_REASSDATA, ipr);
 80106b8:	4621      	mov	r1, r4
 80106ba:	2004      	movs	r0, #4
 80106bc:	f7f9 fbec 	bl	8009e98 <memp_free>
    clen = pbuf_clen(p);
 80106c0:	4630      	mov	r0, r6
 80106c2:	f7fa f925 	bl	800a910 <pbuf_clen>
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80106c6:	f8b8 3000 	ldrh.w	r3, [r8]
    clen = pbuf_clen(p);
 80106ca:	4604      	mov	r4, r0
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80106cc:	4283      	cmp	r3, r0
 80106ce:	d306      	bcc.n	80106de <ip4_reass+0x422>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 80106d0:	1b1b      	subs	r3, r3, r4
 80106d2:	f8a8 3000 	strh.w	r3, [r8]
    return p;
 80106d6:	e68b      	b.n	80103f0 <ip4_reass+0x134>
    prev->next = ipr->next;
 80106d8:	6823      	ldr	r3, [r4, #0]
 80106da:	602b      	str	r3, [r5, #0]
 80106dc:	e7ec      	b.n	80106b8 <ip4_reass+0x3fc>
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80106de:	4b0b      	ldr	r3, [pc, #44]	; (801070c <ip4_reass+0x450>)
 80106e0:	f240 229b 	movw	r2, #667	; 0x29b
 80106e4:	490d      	ldr	r1, [pc, #52]	; (801071c <ip4_reass+0x460>)
 80106e6:	480b      	ldr	r0, [pc, #44]	; (8010714 <ip4_reass+0x458>)
 80106e8:	f000 ff90 	bl	801160c <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 80106ec:	f8b8 3000 	ldrh.w	r3, [r8]
 80106f0:	e7ee      	b.n	80106d0 <ip4_reass+0x414>
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80106f2:	8ba0      	ldrh	r0, [r4, #28]
 80106f4:	e7ae      	b.n	8010654 <ip4_reass+0x398>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80106f6:	4b05      	ldr	r3, [pc, #20]	; (801070c <ip4_reass+0x450>)
 80106f8:	f240 1245 	movw	r2, #325	; 0x145
 80106fc:	4908      	ldr	r1, [pc, #32]	; (8010720 <ip4_reass+0x464>)
 80106fe:	4805      	ldr	r0, [pc, #20]	; (8010714 <ip4_reass+0x458>)
 8010700:	f000 ff84 	bl	801160c <iprintf>
    prev->next = ipr->next;
 8010704:	6823      	ldr	r3, [r4, #0]
 8010706:	602b      	str	r3, [r5, #0]
 8010708:	deff      	udf	#255	; 0xff
 801070a:	bf00      	nop
 801070c:	08015044 	.word	0x08015044
 8010710:	0801510c 	.word	0x0801510c
 8010714:	080128dc 	.word	0x080128dc
 8010718:	0801511c 	.word	0x0801511c
 801071c:	08015140 	.word	0x08015140
 8010720:	080150cc 	.word	0x080150cc

08010724 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8010724:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  u16_t newpbuflen = 0;
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8010728:	8c8b      	ldrh	r3, [r1, #36]	; 0x24
{
 801072a:	b08f      	sub	sp, #60	; 0x3c
 801072c:	4606      	mov	r6, r0
 801072e:	920c      	str	r2, [sp, #48]	; 0x30
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8010730:	f1b3 0214 	subs.w	r2, r3, #20
{
 8010734:	9109      	str	r1, [sp, #36]	; 0x24
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8010736:	bf48      	it	mi
 8010738:	f1a3 020d 	submi.w	r2, r3, #13
  int last;
  u16_t poff = IP_HLEN;
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801073c:	6843      	ldr	r3, [r0, #4]
 801073e:	9304      	str	r3, [sp, #16]
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8010740:	f3c2 02cf 	ubfx	r2, r2, #3, #16
  iphdr = original_iphdr;
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8010744:	781b      	ldrb	r3, [r3, #0]
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8010746:	9208      	str	r2, [sp, #32]
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8010748:	f003 030f 	and.w	r3, r3, #15
 801074c:	2b05      	cmp	r3, #5
 801074e:	ea4f 0583 	mov.w	r5, r3, lsl #2
 8010752:	f040 80e5 	bne.w	8010920 <ip4_frag+0x1fc>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8010756:	8943      	ldrh	r3, [r0, #10]
 8010758:	2b13      	cmp	r3, #19
 801075a:	f240 80e4 	bls.w	8010926 <ip4_frag+0x202>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801075e:	9b04      	ldr	r3, [sp, #16]
 8010760:	88d8      	ldrh	r0, [r3, #6]
 8010762:	f7f8 ffbd 	bl	80096e0 <lwip_htons>
  ofo = tmp & IP_OFFMASK;
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;

  left = (u16_t)(p->tot_len - IP_HLEN);
 8010766:	8933      	ldrh	r3, [r6, #8]
  ofo = tmp & IP_OFFMASK;
 8010768:	f3c0 020c 	ubfx	r2, r0, #0, #13
  left = (u16_t)(p->tot_len - IP_HLEN);
 801076c:	3b14      	subs	r3, #20
  ofo = tmp & IP_OFFMASK;
 801076e:	9207      	str	r2, [sp, #28]
  mf_set = tmp & IP_MF;
 8010770:	f400 5200 	and.w	r2, r0, #8192	; 0x2000
  left = (u16_t)(p->tot_len - IP_HLEN);
 8010774:	b29b      	uxth	r3, r3
 8010776:	920d      	str	r2, [sp, #52]	; 0x34
 8010778:	9305      	str	r3, [sp, #20]

  while (left) {
 801077a:	2b00      	cmp	r3, #0
 801077c:	f000 8098 	beq.w	80108b0 <ip4_frag+0x18c>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8010780:	9b08      	ldr	r3, [sp, #32]
  u16_t newpbuflen = 0;
 8010782:	2400      	movs	r4, #0
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
    if (rambuf == NULL) {
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8010784:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8010948 <ip4_frag+0x224>
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8010788:	00db      	lsls	r3, r3, #3
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801078a:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 8010950 <ip4_frag+0x22c>
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801078e:	b29b      	uxth	r3, r3
 8010790:	930a      	str	r3, [sp, #40]	; 0x28
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8010792:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010796:	2114      	movs	r1, #20
 8010798:	200e      	movs	r0, #14
 801079a:	f7f9 ffb3 	bl	800a704 <pbuf_alloc>
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801079e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80107a0:	9a05      	ldr	r2, [sp, #20]
    if (rambuf == NULL) {
 80107a2:	9003      	str	r0, [sp, #12]
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80107a4:	4293      	cmp	r3, r2
 80107a6:	bf28      	it	cs
 80107a8:	4613      	movcs	r3, r2
 80107aa:	9306      	str	r3, [sp, #24]
    if (rambuf == NULL) {
 80107ac:	2800      	cmp	r0, #0
 80107ae:	f000 80b4 	beq.w	801091a <ip4_frag+0x1f6>
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80107b2:	8943      	ldrh	r3, [r0, #10]
 80107b4:	2b13      	cmp	r3, #19
 80107b6:	f240 808c 	bls.w	80108d2 <ip4_frag+0x1ae>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80107ba:	9904      	ldr	r1, [sp, #16]
 80107bc:	9b03      	ldr	r3, [sp, #12]
 80107be:	680a      	ldr	r2, [r1, #0]
 80107c0:	685b      	ldr	r3, [r3, #4]
 80107c2:	684f      	ldr	r7, [r1, #4]
 80107c4:	6888      	ldr	r0, [r1, #8]
 80107c6:	68c9      	ldr	r1, [r1, #12]
 80107c8:	605f      	str	r7, [r3, #4]
 80107ca:	60d9      	str	r1, [r3, #12]
 80107cc:	9904      	ldr	r1, [sp, #16]
 80107ce:	601a      	str	r2, [r3, #0]
 80107d0:	6098      	str	r0, [r3, #8]
 80107d2:	690a      	ldr	r2, [r1, #16]
 80107d4:	611a      	str	r2, [r3, #16]
    iphdr = (struct ip_hdr *)rambuf->payload;
 80107d6:	9b03      	ldr	r3, [sp, #12]
 80107d8:	685b      	ldr	r3, [r3, #4]
 80107da:	930b      	str	r3, [sp, #44]	; 0x2c

    left_to_copy = fragsize;
    while (left_to_copy) {
 80107dc:	9b06      	ldr	r3, [sp, #24]
 80107de:	2b00      	cmp	r3, #0
 80107e0:	d034      	beq.n	801084c <ip4_frag+0x128>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80107e2:	9302      	str	r3, [sp, #8]
      u16_t plen = (u16_t)(p->len - poff);
 80107e4:	8973      	ldrh	r3, [r6, #10]
 80107e6:	1b5c      	subs	r4, r3, r5
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80107e8:	42ab      	cmp	r3, r5
      u16_t plen = (u16_t)(p->len - poff);
 80107ea:	b2a4      	uxth	r4, r4
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80107ec:	d369      	bcc.n	80108c2 <ip4_frag+0x19e>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80107ee:	9b02      	ldr	r3, [sp, #8]
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80107f0:	2005      	movs	r0, #5
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80107f2:	429c      	cmp	r4, r3
 80107f4:	bf28      	it	cs
 80107f6:	461c      	movcs	r4, r3
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80107f8:	2c00      	cmp	r4, #0
 80107fa:	d05b      	beq.n	80108b4 <ip4_frag+0x190>
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80107fc:	f7f9 fb06 	bl	8009e0c <memp_malloc>
 8010800:	4683      	mov	fp, r0
      if (pcr == NULL) {
        pbuf_free(rambuf);
        goto memerr;
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8010802:	2241      	movs	r2, #65	; 0x41
 8010804:	4621      	mov	r1, r4
 8010806:	2000      	movs	r0, #0
      if (pcr == NULL) {
 8010808:	f1bb 0f00 	cmp.w	fp, #0
 801080c:	d06c      	beq.n	80108e8 <ip4_frag+0x1c4>
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801080e:	9401      	str	r4, [sp, #4]
 8010810:	465b      	mov	r3, fp
 8010812:	6877      	ldr	r7, [r6, #4]
 8010814:	eb07 0c05 	add.w	ip, r7, r5
 8010818:	f8cd c000 	str.w	ip, [sp]
 801081c:	f7f9 fe46 	bl	800a4ac <pbuf_alloced_custom>
 8010820:	4682      	mov	sl, r0
      if (newpbuf == NULL) {
        ip_frag_free_pbuf_custom_ref(pcr);
        pbuf_free(rambuf);
        goto memerr;
      }
      pbuf_ref(p);
 8010822:	4630      	mov	r0, r6
      if (newpbuf == NULL) {
 8010824:	f1ba 0f00 	cmp.w	sl, #0
 8010828:	d068      	beq.n	80108fc <ip4_frag+0x1d8>
      pbuf_ref(p);
 801082a:	f7fa f87d 	bl	800a928 <pbuf_ref>
      pcr->original = p;
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801082e:	4b43      	ldr	r3, [pc, #268]	; (801093c <ip4_frag+0x218>)

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8010830:	4651      	mov	r1, sl
 8010832:	9803      	ldr	r0, [sp, #12]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8010834:	f8cb 3010 	str.w	r3, [fp, #16]
      pcr->original = p;
 8010838:	f8cb 6014 	str.w	r6, [fp, #20]
      pbuf_cat(rambuf, newpbuf);
 801083c:	f7fa f892 	bl	800a964 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8010840:	9b02      	ldr	r3, [sp, #8]
 8010842:	1b1f      	subs	r7, r3, r4
 8010844:	b2bb      	uxth	r3, r7
 8010846:	9302      	str	r3, [sp, #8]
      if (left_to_copy) {
 8010848:	2b00      	cmp	r3, #0
 801084a:	d133      	bne.n	80108b4 <ip4_frag+0x190>
    }
    poff = (u16_t)(poff + newpbuflen);
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801084c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    poff = (u16_t)(poff + newpbuflen);
 801084e:	4425      	add	r5, r4

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8010850:	9a07      	ldr	r2, [sp, #28]
    last = (left <= netif->mtu - IP_HLEN);
 8010852:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    poff = (u16_t)(poff + newpbuflen);
 8010854:	b2ad      	uxth	r5, r5
    tmp = (IP_OFFMASK & (ofo));
 8010856:	f3c2 000c 	ubfx	r0, r2, #0, #13
    if (!last || mf_set) {
 801085a:	9a05      	ldr	r2, [sp, #20]
    last = (left <= netif->mtu - IP_HLEN);
 801085c:	3b13      	subs	r3, #19
    if (!last || mf_set) {
 801085e:	4293      	cmp	r3, r2
 8010860:	dd3f      	ble.n	80108e2 <ip4_frag+0x1be>
 8010862:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010864:	2b00      	cmp	r3, #0
 8010866:	d13c      	bne.n	80108e2 <ip4_frag+0x1be>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8010868:	f7f8 ff3a 	bl	80096e0 <lwip_htons>
 801086c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801086e:	9b06      	ldr	r3, [sp, #24]
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8010870:	80f8      	strh	r0, [r7, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8010872:	f103 0014 	add.w	r0, r3, #20
 8010876:	b280      	uxth	r0, r0
 8010878:	f7f8 ff32 	bl	80096e0 <lwip_htons>
    IPH_CHKSUM_SET(iphdr, 0);
 801087c:	2300      	movs	r3, #0
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801087e:	8078      	strh	r0, [r7, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8010880:	72bb      	strb	r3, [r7, #10]
 8010882:	72fb      	strb	r3, [r7, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8010884:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010886:	9f03      	ldr	r7, [sp, #12]
 8010888:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801088a:	4639      	mov	r1, r7
 801088c:	6943      	ldr	r3, [r0, #20]
 801088e:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8010890:	4638      	mov	r0, r7
 8010892:	f7f9 fec7 	bl	800a624 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8010896:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
 801089a:	1ad3      	subs	r3, r2, r3
    ofo = (u16_t)(ofo + nfb);
 801089c:	e9dd 2107 	ldrd	r2, r1, [sp, #28]
    left = (u16_t)(left - fragsize);
 80108a0:	b29b      	uxth	r3, r3
    ofo = (u16_t)(ofo + nfb);
 80108a2:	440a      	add	r2, r1
    left = (u16_t)(left - fragsize);
 80108a4:	9305      	str	r3, [sp, #20]
    ofo = (u16_t)(ofo + nfb);
 80108a6:	b292      	uxth	r2, r2
 80108a8:	9207      	str	r2, [sp, #28]
  while (left) {
 80108aa:	2b00      	cmp	r3, #0
 80108ac:	f47f af71 	bne.w	8010792 <ip4_frag+0x6e>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80108b0:	2000      	movs	r0, #0
 80108b2:	e020      	b.n	80108f6 <ip4_frag+0x1d2>
        p = p->next;
 80108b4:	6836      	ldr	r6, [r6, #0]
  u16_t newpbuflen = 0;
 80108b6:	2500      	movs	r5, #0
      u16_t plen = (u16_t)(p->len - poff);
 80108b8:	8973      	ldrh	r3, [r6, #10]
 80108ba:	1b5c      	subs	r4, r3, r5
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80108bc:	42ab      	cmp	r3, r5
      u16_t plen = (u16_t)(p->len - poff);
 80108be:	b2a4      	uxth	r4, r4
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80108c0:	d295      	bcs.n	80107ee <ip4_frag+0xca>
 80108c2:	4643      	mov	r3, r8
 80108c4:	f240 322d 	movw	r2, #813	; 0x32d
 80108c8:	491d      	ldr	r1, [pc, #116]	; (8010940 <ip4_frag+0x21c>)
 80108ca:	4648      	mov	r0, r9
 80108cc:	f000 fe9e 	bl	801160c <iprintf>
 80108d0:	e78d      	b.n	80107ee <ip4_frag+0xca>
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80108d2:	4643      	mov	r3, r8
 80108d4:	f44f 7249 	mov.w	r2, #804	; 0x324
 80108d8:	491a      	ldr	r1, [pc, #104]	; (8010944 <ip4_frag+0x220>)
 80108da:	4648      	mov	r0, r9
 80108dc:	f000 fe96 	bl	801160c <iprintf>
 80108e0:	e76b      	b.n	80107ba <ip4_frag+0x96>
      tmp = tmp | IP_MF;
 80108e2:	f440 5000 	orr.w	r0, r0, #8192	; 0x2000
 80108e6:	e7bf      	b.n	8010868 <ip4_frag+0x144>
        pbuf_free(rambuf);
 80108e8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80108ec:	4658      	mov	r0, fp
 80108ee:	f7f9 fe99 	bl	800a624 <pbuf_free>
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 80108f2:	f04f 30ff 	mov.w	r0, #4294967295
}
 80108f6:	b00f      	add	sp, #60	; 0x3c
 80108f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  memp_free(MEMP_FRAG_PBUF, p);
 80108fc:	46da      	mov	sl, fp
 80108fe:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8010902:	2005      	movs	r0, #5
 8010904:	4651      	mov	r1, sl
 8010906:	f7f9 fac7 	bl	8009e98 <memp_free>
        pbuf_free(rambuf);
 801090a:	4658      	mov	r0, fp
 801090c:	f7f9 fe8a 	bl	800a624 <pbuf_free>
  return ERR_MEM;
 8010910:	f04f 30ff 	mov.w	r0, #4294967295
}
 8010914:	b00f      	add	sp, #60	; 0x3c
 8010916:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return ERR_MEM;
 801091a:	f04f 30ff 	mov.w	r0, #4294967295
 801091e:	e7ea      	b.n	80108f6 <ip4_frag+0x1d2>
    return ERR_VAL;
 8010920:	f06f 0005 	mvn.w	r0, #5
 8010924:	e7e7      	b.n	80108f6 <ip4_frag+0x1d2>
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8010926:	4b08      	ldr	r3, [pc, #32]	; (8010948 <ip4_frag+0x224>)
 8010928:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 801092c:	4907      	ldr	r1, [pc, #28]	; (801094c <ip4_frag+0x228>)
 801092e:	4808      	ldr	r0, [pc, #32]	; (8010950 <ip4_frag+0x22c>)
 8010930:	f000 fe6c 	bl	801160c <iprintf>
 8010934:	f06f 0005 	mvn.w	r0, #5
 8010938:	e7dd      	b.n	80108f6 <ip4_frag+0x1d2>
 801093a:	bf00      	nop
 801093c:	080100a5 	.word	0x080100a5
 8010940:	080151b8 	.word	0x080151b8
 8010944:	08015198 	.word	0x08015198
 8010948:	08015044 	.word	0x08015044
 801094c:	0801517c 	.word	0x0801517c
 8010950:	080128dc 	.word	0x080128dc

08010954 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8010954:	b570      	push	{r4, r5, r6, lr}
 8010956:	4604      	mov	r4, r0
 8010958:	460d      	mov	r5, r1
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();
 801095a:	f7f6 f98f 	bl	8006c7c <sys_check_core_locking>

  if (p->len <= SIZEOF_ETH_HDR) {
 801095e:	8963      	ldrh	r3, [r4, #10]
 8010960:	2b0e      	cmp	r3, #14
 8010962:	d91a      	bls.n	801099a <ethernet_input+0x46>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8010964:	7be3      	ldrb	r3, [r4, #15]
 8010966:	b91b      	cbnz	r3, 8010970 <ethernet_input+0x1c>
    p->if_idx = netif_get_index(netif);
 8010968:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 801096c:	3301      	adds	r3, #1
 801096e:	73e3      	strb	r3, [r4, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8010970:	6860      	ldr	r0, [r4, #4]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8010972:	7803      	ldrb	r3, [r0, #0]
  type = ethhdr->type;
 8010974:	8986      	ldrh	r6, [r0, #12]
  if (ethhdr->dest.addr[0] & 1) {
 8010976:	07d9      	lsls	r1, r3, #31
 8010978:	d50a      	bpl.n	8010990 <ethernet_input+0x3c>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801097a:	2b01      	cmp	r3, #1
 801097c:	d030      	beq.n	80109e0 <ethernet_input+0x8c>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801097e:	2206      	movs	r2, #6
 8010980:	491d      	ldr	r1, [pc, #116]	; (80109f8 <ethernet_input+0xa4>)
 8010982:	f000 ffc5 	bl	8011910 <memcmp>
 8010986:	b918      	cbnz	r0, 8010990 <ethernet_input+0x3c>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8010988:	7b63      	ldrb	r3, [r4, #13]
 801098a:	f043 0308 	orr.w	r3, r3, #8
 801098e:	7363      	strb	r3, [r4, #13]
    }
  }

  switch (type) {
 8010990:	2e08      	cmp	r6, #8
 8010992:	d016      	beq.n	80109c2 <ethernet_input+0x6e>
 8010994:	f5b6 6fc1 	cmp.w	r6, #1544	; 0x608
 8010998:	d004      	beq.n	80109a4 <ethernet_input+0x50>
  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;

free_and_return:
  pbuf_free(p);
 801099a:	4620      	mov	r0, r4
 801099c:	f7f9 fe42 	bl	800a624 <pbuf_free>
  return ERR_OK;
}
 80109a0:	2000      	movs	r0, #0
 80109a2:	bd70      	pop	{r4, r5, r6, pc}
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80109a4:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
 80109a8:	071b      	lsls	r3, r3, #28
 80109aa:	d5f6      	bpl.n	801099a <ethernet_input+0x46>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80109ac:	210e      	movs	r1, #14
 80109ae:	4620      	mov	r0, r4
 80109b0:	f7f9 fdcc 	bl	800a54c <pbuf_remove_header>
 80109b4:	2800      	cmp	r0, #0
 80109b6:	d1f0      	bne.n	801099a <ethernet_input+0x46>
        etharp_input(p, netif);
 80109b8:	4629      	mov	r1, r5
 80109ba:	4620      	mov	r0, r4
 80109bc:	f7fe fe72 	bl	800f6a4 <etharp_input>
      break;
 80109c0:	e7ee      	b.n	80109a0 <ethernet_input+0x4c>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80109c2:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
 80109c6:	071a      	lsls	r2, r3, #28
 80109c8:	d5e7      	bpl.n	801099a <ethernet_input+0x46>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80109ca:	210e      	movs	r1, #14
 80109cc:	4620      	mov	r0, r4
 80109ce:	f7f9 fdbd 	bl	800a54c <pbuf_remove_header>
 80109d2:	2800      	cmp	r0, #0
 80109d4:	d1e1      	bne.n	801099a <ethernet_input+0x46>
        ip4_input(p, netif);
 80109d6:	4629      	mov	r1, r5
 80109d8:	4620      	mov	r0, r4
 80109da:	f7ff f9d1 	bl	800fd80 <ip4_input>
      break;
 80109de:	e7df      	b.n	80109a0 <ethernet_input+0x4c>
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80109e0:	7843      	ldrb	r3, [r0, #1]
 80109e2:	2b00      	cmp	r3, #0
 80109e4:	d1d4      	bne.n	8010990 <ethernet_input+0x3c>
 80109e6:	7883      	ldrb	r3, [r0, #2]
 80109e8:	2b5e      	cmp	r3, #94	; 0x5e
 80109ea:	d1d1      	bne.n	8010990 <ethernet_input+0x3c>
        p->flags |= PBUF_FLAG_LLMCAST;
 80109ec:	7b63      	ldrb	r3, [r4, #13]
 80109ee:	f043 0310 	orr.w	r3, r3, #16
 80109f2:	7363      	strb	r3, [r4, #13]
 80109f4:	e7cc      	b.n	8010990 <ethernet_input+0x3c>
 80109f6:	bf00      	nop
 80109f8:	08015234 	.word	0x08015234

080109fc <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 80109fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010a00:	460c      	mov	r4, r1
 8010a02:	4605      	mov	r5, r0
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8010a04:	f8bd 0018 	ldrh.w	r0, [sp, #24]
                u16_t eth_type) {
 8010a08:	4616      	mov	r6, r2
 8010a0a:	461f      	mov	r7, r3
  u16_t eth_type_be = lwip_htons(eth_type);
 8010a0c:	f7f8 fe68 	bl	80096e0 <lwip_htons>

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8010a10:	210e      	movs	r1, #14
  u16_t eth_type_be = lwip_htons(eth_type);
 8010a12:	4680      	mov	r8, r0
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8010a14:	4620      	mov	r0, r4
 8010a16:	f7f9 fd65 	bl	800a4e4 <pbuf_add_header>
 8010a1a:	b9f0      	cbnz	r0, 8010a5a <ethernet_output+0x5e>
      goto pbuf_header_failed;
    }
  }

  LWIP_ASSERT_CORE_LOCKED();
 8010a1c:	f7f6 f92e 	bl	8006c7c <sys_check_core_locking>

  ethhdr = (struct eth_hdr *)p->payload;
 8010a20:	6861      	ldr	r1, [r4, #4]
  ethhdr->type = eth_type_be;
 8010a22:	f8a1 800c 	strh.w	r8, [r1, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8010a26:	683b      	ldr	r3, [r7, #0]
 8010a28:	600b      	str	r3, [r1, #0]
 8010a2a:	88bb      	ldrh	r3, [r7, #4]
 8010a2c:	808b      	strh	r3, [r1, #4]
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8010a2e:	6833      	ldr	r3, [r6, #0]
 8010a30:	f8c1 3006 	str.w	r3, [r1, #6]
 8010a34:	88b3      	ldrh	r3, [r6, #4]
 8010a36:	814b      	strh	r3, [r1, #10]

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8010a38:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 8010a3c:	2b06      	cmp	r3, #6
 8010a3e:	d006      	beq.n	8010a4e <ethernet_output+0x52>
 8010a40:	4b08      	ldr	r3, [pc, #32]	; (8010a64 <ethernet_output+0x68>)
 8010a42:	f44f 7299 	mov.w	r2, #306	; 0x132
 8010a46:	4908      	ldr	r1, [pc, #32]	; (8010a68 <ethernet_output+0x6c>)
 8010a48:	4808      	ldr	r0, [pc, #32]	; (8010a6c <ethernet_output+0x70>)
 8010a4a:	f000 fddf 	bl	801160c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8010a4e:	69ab      	ldr	r3, [r5, #24]
 8010a50:	4621      	mov	r1, r4
 8010a52:	4628      	mov	r0, r5
pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
}
 8010a54:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return netif->linkoutput(netif, p);
 8010a58:	4718      	bx	r3
}
 8010a5a:	f06f 0001 	mvn.w	r0, #1
 8010a5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010a62:	bf00      	nop
 8010a64:	080151c8 	.word	0x080151c8
 8010a68:	08015200 	.word	0x08015200
 8010a6c:	080128dc 	.word	0x080128dc

08010a70 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8010a70:	460b      	mov	r3, r1
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 8010a72:	2200      	movs	r2, #0
 8010a74:	2104      	movs	r1, #4
{
 8010a76:	b510      	push	{r4, lr}
 8010a78:	4604      	mov	r4, r0
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 8010a7a:	4618      	mov	r0, r3
 8010a7c:	f7f6 fb0c 	bl	8007098 <osMessageQueueNew>
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8010a80:	fab0 f380 	clz	r3, r0
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 8010a84:	6020      	str	r0, [r4, #0]
  if(*mbox == NULL)
 8010a86:	095b      	lsrs	r3, r3, #5
    return ERR_MEM;

  return ERR_OK;
}
 8010a88:	4258      	negs	r0, r3
 8010a8a:	bd10      	pop	{r4, pc}

08010a8c <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8010a8c:	b500      	push	{lr}
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 8010a8e:	2300      	movs	r3, #0
{
 8010a90:	b083      	sub	sp, #12
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 8010a92:	6800      	ldr	r0, [r0, #0]
{
 8010a94:	9101      	str	r1, [sp, #4]
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 8010a96:	461a      	mov	r2, r3
 8010a98:	a901      	add	r1, sp, #4
 8010a9a:	f7f6 fb3b 	bl	8007114 <osMessageQueuePut>
 8010a9e:	3800      	subs	r0, #0
 8010aa0:	bf18      	it	ne
 8010aa2:	2001      	movne	r0, #1
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
}
 8010aa4:	4240      	negs	r0, r0
 8010aa6:	b003      	add	sp, #12
 8010aa8:	f85d fb04 	ldr.w	pc, [sp], #4

08010aac <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8010aac:	b570      	push	{r4, r5, r6, lr}
 8010aae:	4615      	mov	r5, r2
 8010ab0:	b082      	sub	sp, #8
 8010ab2:	4606      	mov	r6, r0
 8010ab4:	9101      	str	r1, [sp, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 8010ab6:	f7f6 f955 	bl	8006d64 <osKernelGetTickCount>
#endif
  if(timeout != 0)
 8010aba:	9901      	ldr	r1, [sp, #4]
  uint32_t starttime = osKernelGetTickCount();
 8010abc:	4604      	mov	r4, r0
  if(timeout != 0)
 8010abe:	b14d      	cbz	r5, 8010ad4 <sys_arch_mbox_fetch+0x28>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 8010ac0:	462b      	mov	r3, r5
 8010ac2:	2200      	movs	r2, #0
 8010ac4:	6830      	ldr	r0, [r6, #0]
 8010ac6:	f7f6 fb67 	bl	8007198 <osMessageQueueGet>
    if (status == osOK)
 8010aca:	b148      	cbz	r0, 8010ae0 <sys_arch_mbox_fetch+0x34>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8010acc:	f04f 30ff 	mov.w	r0, #4294967295
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8010ad0:	b002      	add	sp, #8
 8010ad2:	bd70      	pop	{r4, r5, r6, pc}
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 8010ad4:	f04f 33ff 	mov.w	r3, #4294967295
 8010ad8:	462a      	mov	r2, r5
 8010ada:	6830      	ldr	r0, [r6, #0]
 8010adc:	f7f6 fb5c 	bl	8007198 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 8010ae0:	f7f6 f940 	bl	8006d64 <osKernelGetTickCount>
 8010ae4:	1b00      	subs	r0, r0, r4
}
 8010ae6:	b002      	add	sp, #8
 8010ae8:	bd70      	pop	{r4, r5, r6, pc}
 8010aea:	bf00      	nop

08010aec <sys_mbox_valid>:
 8010aec:	6800      	ldr	r0, [r0, #0]
 8010aee:	3800      	subs	r0, #0
 8010af0:	bf18      	it	ne
 8010af2:	2001      	movne	r0, #1
 8010af4:	4770      	bx	lr
 8010af6:	bf00      	nop

08010af8 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8010af8:	b508      	push	{r3, lr}
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 8010afa:	2000      	movs	r0, #0
 8010afc:	f7f6 f996 	bl	8006e2c <osMutexNew>
 8010b00:	4b01      	ldr	r3, [pc, #4]	; (8010b08 <sys_init+0x10>)
 8010b02:	6018      	str	r0, [r3, #0]
#endif
}
 8010b04:	bd08      	pop	{r3, pc}
 8010b06:	bf00      	nop
 8010b08:	240106e0 	.word	0x240106e0

08010b0c <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8010b0c:	b510      	push	{r4, lr}
 8010b0e:	4604      	mov	r4, r0

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 8010b10:	2000      	movs	r0, #0
 8010b12:	f7f6 f98b 	bl	8006e2c <osMutexNew>
#endif

  if(*mutex == NULL)
 8010b16:	fab0 f380 	clz	r3, r0
  *mutex = osMutexNew(NULL);
 8010b1a:	6020      	str	r0, [r4, #0]
  if(*mutex == NULL)
 8010b1c:	095b      	lsrs	r3, r3, #5
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
}
 8010b1e:	4258      	negs	r0, r3
 8010b20:	bd10      	pop	{r4, pc}
 8010b22:	bf00      	nop

08010b24 <sys_mutex_lock>:
void sys_mutex_lock(sys_mutex_t *mutex)
{
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 8010b24:	f04f 31ff 	mov.w	r1, #4294967295
 8010b28:	6800      	ldr	r0, [r0, #0]
 8010b2a:	f7f6 b9bf 	b.w	8006eac <osMutexAcquire>
 8010b2e:	bf00      	nop

08010b30 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
  osMutexRelease(*mutex);
 8010b30:	6800      	ldr	r0, [r0, #0]
 8010b32:	f7f6 b9df 	b.w	8006ef4 <osMutexRelease>
 8010b36:	bf00      	nop

08010b38 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8010b38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010b3a:	b08b      	sub	sp, #44	; 0x2c
 8010b3c:	4617      	mov	r7, r2
 8010b3e:	460e      	mov	r6, r1
 8010b40:	4605      	mov	r5, r0
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 8010b42:	2220      	movs	r2, #32
 8010b44:	2100      	movs	r1, #0
 8010b46:	a802      	add	r0, sp, #8
{
 8010b48:	461c      	mov	r4, r3
  const osThreadAttr_t attributes = {
 8010b4a:	f000 ff0b 	bl	8011964 <memset>
 8010b4e:	9b10      	ldr	r3, [sp, #64]	; 0x40
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 8010b50:	4639      	mov	r1, r7
 8010b52:	aa01      	add	r2, sp, #4
 8010b54:	4630      	mov	r0, r6
  const osThreadAttr_t attributes = {
 8010b56:	9501      	str	r5, [sp, #4]
 8010b58:	9406      	str	r4, [sp, #24]
 8010b5a:	9307      	str	r3, [sp, #28]
  return osThreadNew(thread, arg, &attributes);
 8010b5c:	f7f6 f90a 	bl	8006d74 <osThreadNew>
#endif
}
 8010b60:	b00b      	add	sp, #44	; 0x2c
 8010b62:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010b64 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8010b64:	b508      	push	{r3, lr}
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 8010b66:	4b04      	ldr	r3, [pc, #16]	; (8010b78 <sys_arch_protect+0x14>)
 8010b68:	f04f 31ff 	mov.w	r1, #4294967295
 8010b6c:	6818      	ldr	r0, [r3, #0]
 8010b6e:	f7f6 f99d 	bl	8006eac <osMutexAcquire>
#endif
  return (sys_prot_t)1;
}
 8010b72:	2001      	movs	r0, #1
 8010b74:	bd08      	pop	{r3, pc}
 8010b76:	bf00      	nop
 8010b78:	240106e0 	.word	0x240106e0

08010b7c <sys_arch_unprotect>:
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8010b7c:	4b01      	ldr	r3, [pc, #4]	; (8010b84 <sys_arch_unprotect+0x8>)
 8010b7e:	6818      	ldr	r0, [r3, #0]
 8010b80:	f7f6 b9b8 	b.w	8006ef4 <osMutexRelease>
 8010b84:	240106e0 	.word	0x240106e0

08010b88 <shell_cmd_clear>:

	return TRUE;
}

uint8_t shell_cmd_clear(void *para, uint8_t len)
{
 8010b88:	b508      	push	{r3, lr}
	TERMINAL_BACK_BLACK();
 8010b8a:	4807      	ldr	r0, [pc, #28]	; (8010ba8 <shell_cmd_clear+0x20>)
 8010b8c:	f000 fd3e 	bl	801160c <iprintf>
	TERMINAL_FONT_GREEN();
 8010b90:	4806      	ldr	r0, [pc, #24]	; (8010bac <shell_cmd_clear+0x24>)
 8010b92:	f000 fd3b 	bl	801160c <iprintf>
	TERMINAL_RESET_CURSOR();
 8010b96:	4806      	ldr	r0, [pc, #24]	; (8010bb0 <shell_cmd_clear+0x28>)
 8010b98:	f000 fd38 	bl	801160c <iprintf>
	TERMINAL_DISPLAY_CLEAR();
 8010b9c:	4805      	ldr	r0, [pc, #20]	; (8010bb4 <shell_cmd_clear+0x2c>)
 8010b9e:	f000 fd35 	bl	801160c <iprintf>

	return TRUE;
}
 8010ba2:	2001      	movs	r0, #1
 8010ba4:	bd08      	pop	{r3, pc}
 8010ba6:	bf00      	nop
 8010ba8:	08015244 	.word	0x08015244
 8010bac:	0801524c 	.word	0x0801524c
 8010bb0:	08015254 	.word	0x08015254
 8010bb4:	08015258 	.word	0x08015258

08010bb8 <cli_help>:
{
 8010bb8:	b570      	push	{r4, r5, r6, lr}
	section = s_inst.p_cmdlist;
 8010bba:	4e0a      	ldr	r6, [pc, #40]	; (8010be4 <cli_help+0x2c>)
	for(i=0; i<s_inst.cmdlist_size; i++){
 8010bbc:	7d33      	ldrb	r3, [r6, #20]
	section = s_inst.p_cmdlist;
 8010bbe:	6935      	ldr	r5, [r6, #16]
	for(i=0; i<s_inst.cmdlist_size; i++){
 8010bc0:	b173      	cbz	r3, 8010be0 <cli_help+0x28>
 8010bc2:	3d04      	subs	r5, #4
 8010bc4:	2400      	movs	r4, #0
		SH_COMMAND_S * const _cmd = *section;
 8010bc6:	f855 3f04 	ldr.w	r3, [r5, #4]!
	for(i=0; i<s_inst.cmdlist_size; i++){
 8010bca:	3401      	adds	r4, #1
		if( NULL != _cmd->p_cmd ) {
 8010bcc:	681a      	ldr	r2, [r3, #0]
 8010bce:	b11a      	cbz	r2, 8010bd8 <cli_help+0x20>
			if (NULL != _cmd->p_help) {
 8010bd0:	6858      	ldr	r0, [r3, #4]
 8010bd2:	b108      	cbz	r0, 8010bd8 <cli_help+0x20>
				PRINTF(_cmd->p_help);
 8010bd4:	f000 fd1a 	bl	801160c <iprintf>
	for(i=0; i<s_inst.cmdlist_size; i++){
 8010bd8:	7d32      	ldrb	r2, [r6, #20]
 8010bda:	b2e3      	uxtb	r3, r4
 8010bdc:	429a      	cmp	r2, r3
 8010bde:	d8f2      	bhi.n	8010bc6 <cli_help+0xe>
}
 8010be0:	2001      	movs	r0, #1
 8010be2:	bd70      	pop	{r4, r5, r6, pc}
 8010be4:	240106e4 	.word	0x240106e4

08010be8 <_write>:
	return s_inst.output(ptr, (uint32_t)len);
 8010be8:	4b02      	ldr	r3, [pc, #8]	; (8010bf4 <_write+0xc>)
{
 8010bea:	4608      	mov	r0, r1
	return s_inst.output(ptr, (uint32_t)len);
 8010bec:	4611      	mov	r1, r2
 8010bee:	f8d3 3c1f 	ldr.w	r3, [r3, #3103]	; 0xc1f
 8010bf2:	4718      	bx	r3
 8010bf4:	240106e4 	.word	0x240106e4

08010bf8 <sh_put_byte_impl>:
	PRINTF("\r\n%s> ", p_name);
	fflush(stdout);
}

void sh_put_byte_impl(SH_INSTANCE_S *p_inst, uint8_t rbyte)
{
 8010bf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if(p_inst->cmdlen < SH_MAX_BUFSIZE) {
 8010bfc:	f8b0 3015 	ldrh.w	r3, [r0, #21]
{
 8010c00:	b083      	sub	sp, #12
 8010c02:	4604      	mov	r4, r0
	if(p_inst->cmdlen < SH_MAX_BUFSIZE) {
 8010c04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010c08:	d227      	bcs.n	8010c5a <sh_put_byte_impl+0x62>

		PRINTF("%c", rbyte);
		fflush(stdout);
 8010c0a:	4fbe      	ldr	r7, [pc, #760]	; (8010f04 <sh_put_byte_impl+0x30c>)
		PRINTF("%c", rbyte);
 8010c0c:	4608      	mov	r0, r1
 8010c0e:	460d      	mov	r5, r1
 8010c10:	f000 fd0e 	bl	8011630 <putchar>
		fflush(stdout);
 8010c14:	683b      	ldr	r3, [r7, #0]
 8010c16:	6898      	ldr	r0, [r3, #8]
 8010c18:	f000 fc34 	bl	8011484 <fflush>

		if ( KEY_BACKSPACE == rbyte ) {
 8010c1c:	2d08      	cmp	r5, #8
			if (0 < p_inst->cmdlen) {
 8010c1e:	f8b4 3015 	ldrh.w	r3, [r4, #21]
		if ( KEY_BACKSPACE == rbyte ) {
 8010c22:	d029      	beq.n	8010c78 <sh_put_byte_impl+0x80>
				TERMINAL_MOVE_LEFT(1);
				TERMINAL_CLEAR_END();
				p_inst->cmdlen -= 1;
			}
		}
		else if ( KEY_ENTER == rbyte ) {
 8010c24:	2d0d      	cmp	r5, #13
 8010c26:	d136      	bne.n	8010c96 <sh_put_byte_impl+0x9e>
			if( 0 == p_inst->cmdlen ){
 8010c28:	f104 0917 	add.w	r9, r4, #23
 8010c2c:	9301      	str	r3, [sp, #4]
 8010c2e:	2b00      	cmp	r3, #0
 8010c30:	f040 8094 	bne.w	8010d5c <sh_put_byte_impl+0x164>
			}
			else{
				_handle_cmd(p_inst, p_inst->cmdbuf, p_inst->cmdlen);
			}
			p_inst->cmdlen = 0;
 8010c34:	2100      	movs	r1, #0
			memset(p_inst->cmdbuf, 0x0, SH_MAX_BUFSIZE);
 8010c36:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010c3a:	4648      	mov	r0, r9
			p_inst->cmdlen = 0;
 8010c3c:	7561      	strb	r1, [r4, #21]
 8010c3e:	75a1      	strb	r1, [r4, #22]
			memset(p_inst->cmdbuf, 0x0, SH_MAX_BUFSIZE);
 8010c40:	f000 fe90 	bl	8011964 <memset>
	PRINTF("\r\n%s> ", p_name);
 8010c44:	4621      	mov	r1, r4
 8010c46:	48b0      	ldr	r0, [pc, #704]	; (8010f08 <sh_put_byte_impl+0x310>)
 8010c48:	f000 fce0 	bl	801160c <iprintf>
	fflush(stdout);
 8010c4c:	683b      	ldr	r3, [r7, #0]
 8010c4e:	6898      	ldr	r0, [r3, #8]
	}
	else {
		ERR("Command buffer full. reset.");
		p_inst->cmdlen = 0;
	}
}
 8010c50:	b003      	add	sp, #12
 8010c52:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	fflush(stdout);
 8010c56:	f000 bc15 	b.w	8011484 <fflush>
		ERR("Command buffer full. reset.");
 8010c5a:	48ac      	ldr	r0, [pc, #688]	; (8010f0c <sh_put_byte_impl+0x314>)
 8010c5c:	f000 fcd6 	bl	801160c <iprintf>
 8010c60:	48ab      	ldr	r0, [pc, #684]	; (8010f10 <sh_put_byte_impl+0x318>)
 8010c62:	f000 fd41 	bl	80116e8 <puts>
 8010c66:	48ab      	ldr	r0, [pc, #684]	; (8010f14 <sh_put_byte_impl+0x31c>)
 8010c68:	f000 fcd0 	bl	801160c <iprintf>
		p_inst->cmdlen = 0;
 8010c6c:	2300      	movs	r3, #0
 8010c6e:	7563      	strb	r3, [r4, #21]
 8010c70:	75a3      	strb	r3, [r4, #22]
}
 8010c72:	b003      	add	sp, #12
 8010c74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (0 < p_inst->cmdlen) {
 8010c78:	2b00      	cmp	r3, #0
 8010c7a:	d0fa      	beq.n	8010c72 <sh_put_byte_impl+0x7a>
				TERMINAL_MOVE_LEFT(1);
 8010c7c:	2101      	movs	r1, #1
 8010c7e:	48a6      	ldr	r0, [pc, #664]	; (8010f18 <sh_put_byte_impl+0x320>)
 8010c80:	f000 fcc4 	bl	801160c <iprintf>
				TERMINAL_CLEAR_END();
 8010c84:	48a5      	ldr	r0, [pc, #660]	; (8010f1c <sh_put_byte_impl+0x324>)
 8010c86:	f000 fcc1 	bl	801160c <iprintf>
				p_inst->cmdlen -= 1;
 8010c8a:	f8b4 3015 	ldrh.w	r3, [r4, #21]
 8010c8e:	3b01      	subs	r3, #1
 8010c90:	f8a4 3015 	strh.w	r3, [r4, #21]
 8010c94:	e7ed      	b.n	8010c72 <sh_put_byte_impl+0x7a>
			p_inst->cmdlen++;
 8010c96:	1c5a      	adds	r2, r3, #1
			p_inst->cmdbuf[p_inst->cmdlen] = rbyte;
 8010c98:	4423      	add	r3, r4
			p_inst->cmdlen++;
 8010c9a:	b291      	uxth	r1, r2
			p_inst->cmdbuf[p_inst->cmdlen] = rbyte;
 8010c9c:	75dd      	strb	r5, [r3, #23]
			p_inst->cmdlen++;
 8010c9e:	f8a4 2015 	strh.w	r2, [r4, #21]
	if( 3 <= p_inst->cmdlen ){
 8010ca2:	2902      	cmp	r1, #2
 8010ca4:	d9e5      	bls.n	8010c72 <sh_put_byte_impl+0x7a>
	if( key[0] == p_str[0] ){
 8010ca6:	1863      	adds	r3, r4, r1
 8010ca8:	7d1b      	ldrb	r3, [r3, #20]
 8010caa:	2b1b      	cmp	r3, #27
 8010cac:	d1e1      	bne.n	8010c72 <sh_put_byte_impl+0x7a>
		if( TRUE == _is_key((const uint8_t *)KEY_UP, &p_inst->cmdbuf[p_inst->cmdlen-3]) ){
 8010cae:	f101 0314 	add.w	r3, r1, #20
 8010cb2:	4423      	add	r3, r4
		if( key[1] == p_str[1] ){
 8010cb4:	785a      	ldrb	r2, [r3, #1]
 8010cb6:	2a5b      	cmp	r2, #91	; 0x5b
 8010cb8:	d1db      	bne.n	8010c72 <sh_put_byte_impl+0x7a>
			if( key[2] == p_str[2] ){
 8010cba:	789b      	ldrb	r3, [r3, #2]
 8010cbc:	2b41      	cmp	r3, #65	; 0x41
 8010cbe:	f000 8090 	beq.w	8010de2 <sh_put_byte_impl+0x1ea>
 8010cc2:	2b42      	cmp	r3, #66	; 0x42
 8010cc4:	d1d5      	bne.n	8010c72 <sh_put_byte_impl+0x7a>
			TERMINAL_MOVE_LEFT(p_inst->cmdlen);
 8010cc6:	4894      	ldr	r0, [pc, #592]	; (8010f18 <sh_put_byte_impl+0x320>)
 8010cc8:	f000 fca0 	bl	801160c <iprintf>
			TERMINAL_CLEAR_END();
 8010ccc:	4893      	ldr	r0, [pc, #588]	; (8010f1c <sh_put_byte_impl+0x324>)
 8010cce:	f000 fc9d 	bl	801160c <iprintf>
	if (0 == p_inst->history.count) return err;
 8010cd2:	f894 3c17 	ldrb.w	r3, [r4, #3095]	; 0xc17
 8010cd6:	2b00      	cmp	r3, #0
 8010cd8:	f000 80ce 	beq.w	8010e78 <sh_put_byte_impl+0x280>
		if (1 < p_inst->history.show) {
 8010cdc:	f894 2c19 	ldrb.w	r2, [r4, #3097]	; 0xc19
 8010ce0:	2a01      	cmp	r2, #1
 8010ce2:	f240 80e0 	bls.w	8010ea6 <sh_put_byte_impl+0x2ae>
			p_inst->history.show--;
 8010ce6:	3a01      	subs	r2, #1
	index = p_inst->history.latest;
 8010ce8:	f894 3c18 	ldrb.w	r3, [r4, #3096]	; 0xc18
			p_inst->history.show--;
 8010cec:	b2d2      	uxtb	r2, r2
 8010cee:	f884 2c19 	strb.w	r2, [r4, #3097]	; 0xc19
		num--;
 8010cf2:	1e91      	subs	r1, r2, #2
		if (0 != index) {
 8010cf4:	b93b      	cbnz	r3, 8010d06 <sh_put_byte_impl+0x10e>
	while (num) {
 8010cf6:	2a01      	cmp	r2, #1
 8010cf8:	f04f 0303 	mov.w	r3, #3
 8010cfc:	f000 80c8 	beq.w	8010e90 <sh_put_byte_impl+0x298>
 8010d00:	f011 02ff 	ands.w	r2, r1, #255	; 0xff
 8010d04:	d005      	beq.n	8010d12 <sh_put_byte_impl+0x11a>
		num--;
 8010d06:	3a01      	subs	r2, #1
			index--;
 8010d08:	3b01      	subs	r3, #1
	while (num) {
 8010d0a:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
			index--;
 8010d0e:	b2db      	uxtb	r3, r3
	while (num) {
 8010d10:	d1ef      	bne.n	8010cf2 <sh_put_byte_impl+0xfa>
 8010d12:	025d      	lsls	r5, r3, #9
 8010d14:	f205 2517 	addw	r5, r5, #535	; 0x217
	*p_history = p_inst->history.cmd[index];
 8010d18:	4425      	add	r5, r4
			memcpy(p_inst->cmdbuf, p_hist_cmd, SH_MAX_BUFSIZE);
 8010d1a:	f104 0617 	add.w	r6, r4, #23
	PRINTF("history: %s \r\n", p_inst->history.cmd[index]);
 8010d1e:	4880      	ldr	r0, [pc, #512]	; (8010f20 <sh_put_byte_impl+0x328>)
 8010d20:	4629      	mov	r1, r5
 8010d22:	f000 fc73 	bl	801160c <iprintf>
			memcpy(p_inst->cmdbuf, p_hist_cmd, SH_MAX_BUFSIZE);
 8010d26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010d2a:	4629      	mov	r1, r5
 8010d2c:	4630      	mov	r0, r6
 8010d2e:	f000 fef5 	bl	8011b1c <memcpy>
			p_inst->cmdlen = (uint16_t)strlen((const char *)p_hist_cmd);
 8010d32:	4628      	mov	r0, r5
 8010d34:	f7ef fad4 	bl	80002e0 <strlen>
 8010d38:	f8a4 0015 	strh.w	r0, [r4, #21]
 8010d3c:	b283      	uxth	r3, r0
			if( SH_MAX_BUFSIZE > (int32_t)p_inst->cmdlen ){
 8010d3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010d42:	f080 8090 	bcs.w	8010e66 <sh_put_byte_impl+0x26e>
				p_inst->cmdbuf[p_inst->cmdlen] = '\0';
 8010d46:	fa14 f080 	uxtah	r0, r4, r0
 8010d4a:	2300      	movs	r3, #0
 8010d4c:	75c3      	strb	r3, [r0, #23]
			PRINTF("%s", p_inst->cmdbuf);
 8010d4e:	4631      	mov	r1, r6
 8010d50:	4874      	ldr	r0, [pc, #464]	; (8010f24 <sh_put_byte_impl+0x32c>)
}
 8010d52:	b003      	add	sp, #12
 8010d54:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			PRINTF("%s", p_inst->cmdbuf);
 8010d58:	f000 bc58 	b.w	801160c <iprintf>
	for(i=0; i<p_inst->cmdlist_size; i++){
 8010d5c:	f894 a014 	ldrb.w	sl, [r4, #20]
	section = p_inst->p_cmdlist;
 8010d60:	6923      	ldr	r3, [r4, #16]
	for(i=0; i<p_inst->cmdlist_size; i++){
 8010d62:	f1ba 0f00 	cmp.w	sl, #0
 8010d66:	d036      	beq.n	8010dd6 <sh_put_byte_impl+0x1de>
 8010d68:	f1a3 0b04 	sub.w	fp, r3, #4
 8010d6c:	2600      	movs	r6, #0
 8010d6e:	e002      	b.n	8010d76 <sh_put_byte_impl+0x17e>
 8010d70:	3601      	adds	r6, #1
 8010d72:	4556      	cmp	r6, sl
 8010d74:	d02f      	beq.n	8010dd6 <sh_put_byte_impl+0x1de>
		SH_COMMAND_S * const _cmd = *section;
 8010d76:	f85b 8f04 	ldr.w	r8, [fp, #4]!
		if(0 == strncmp((const char *)p_inst->cmdbuf, (void *)_cmd->p_cmd, strlen(_cmd->p_cmd))) {
 8010d7a:	f8d8 1000 	ldr.w	r1, [r8]
 8010d7e:	4608      	mov	r0, r1
 8010d80:	9100      	str	r1, [sp, #0]
 8010d82:	f7ef faad 	bl	80002e0 <strlen>
 8010d86:	4605      	mov	r5, r0
 8010d88:	9900      	ldr	r1, [sp, #0]
 8010d8a:	4648      	mov	r0, r9
 8010d8c:	462a      	mov	r2, r5
 8010d8e:	f000 fdf1 	bl	8011974 <strncmp>
 8010d92:	2800      	cmp	r0, #0
 8010d94:	d1ec      	bne.n	8010d70 <sh_put_byte_impl+0x178>
			paramlen = p_inst->cmdlen - _cmdlen - 1;
 8010d96:	9b01      	ldr	r3, [sp, #4]
 8010d98:	1e59      	subs	r1, r3, #1
 8010d9a:	1b49      	subs	r1, r1, r5
			if( 0 >= paramlen ){
 8010d9c:	f011 0bff 	ands.w	fp, r1, #255	; 0xff
 8010da0:	d01d      	beq.n	8010dde <sh_put_byte_impl+0x1e6>
				p_param = &p_inst->cmdbuf[_cmdlen+1];
 8010da2:	b2ed      	uxtb	r5, r5
 8010da4:	3518      	adds	r5, #24
 8010da6:	4425      	add	r5, r4
			PRINTF("\r\n");
 8010da8:	485f      	ldr	r0, [pc, #380]	; (8010f28 <sh_put_byte_impl+0x330>)
 8010daa:	f000 fc9d 	bl	80116e8 <puts>
			if(NULL != _cmd->p_func) {
 8010dae:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010db2:	2b00      	cmp	r3, #0
 8010db4:	d06f      	beq.n	8010e96 <sh_put_byte_impl+0x29e>
				if( TRUE == _cmd->p_func(p_param, paramlen) ) {
 8010db6:	4659      	mov	r1, fp
 8010db8:	4628      	mov	r0, r5
 8010dba:	4798      	blx	r3
 8010dbc:	2801      	cmp	r0, #1
 8010dbe:	d035      	beq.n	8010e2c <sh_put_byte_impl+0x234>
					PRINTF("\r\n-> PARA. ERR\r\n");
 8010dc0:	485a      	ldr	r0, [pc, #360]	; (8010f2c <sh_put_byte_impl+0x334>)
 8010dc2:	f000 fc91 	bl	80116e8 <puts>
					PRINTF(_cmd->p_help);
 8010dc6:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8010dca:	f000 fc1f 	bl	801160c <iprintf>
	if( i == p_inst->cmdlist_size ){
 8010dce:	7d23      	ldrb	r3, [r4, #20]
 8010dd0:	429e      	cmp	r6, r3
 8010dd2:	f47f af2f 	bne.w	8010c34 <sh_put_byte_impl+0x3c>
		PRINTF("\r\n-> CMD ERR, try: help\r\n\r\n");
 8010dd6:	4856      	ldr	r0, [pc, #344]	; (8010f30 <sh_put_byte_impl+0x338>)
 8010dd8:	f000 fc86 	bl	80116e8 <puts>
 8010ddc:	e72a      	b.n	8010c34 <sh_put_byte_impl+0x3c>
				p_param = NULL;
 8010dde:	465d      	mov	r5, fp
 8010de0:	e7e2      	b.n	8010da8 <sh_put_byte_impl+0x1b0>
			TERMINAL_MOVE_LEFT(p_inst->cmdlen);
 8010de2:	484d      	ldr	r0, [pc, #308]	; (8010f18 <sh_put_byte_impl+0x320>)
 8010de4:	f000 fc12 	bl	801160c <iprintf>
			TERMINAL_CLEAR_END();
 8010de8:	484c      	ldr	r0, [pc, #304]	; (8010f1c <sh_put_byte_impl+0x324>)
 8010dea:	f000 fc0f 	bl	801160c <iprintf>
	if (0 == p_inst->history.count) return err;
 8010dee:	f894 3c17 	ldrb.w	r3, [r4, #3095]	; 0xc17
 8010df2:	2b00      	cmp	r3, #0
 8010df4:	d040      	beq.n	8010e78 <sh_put_byte_impl+0x280>
		if (p_inst->history.show < p_inst->history.count) {
 8010df6:	f894 2c19 	ldrb.w	r2, [r4, #3097]	; 0xc19
 8010dfa:	4293      	cmp	r3, r2
 8010dfc:	d950      	bls.n	8010ea0 <sh_put_byte_impl+0x2a8>
			p_inst->history.show++;
 8010dfe:	3201      	adds	r2, #1
	index = p_inst->history.latest;
 8010e00:	f894 3c18 	ldrb.w	r3, [r4, #3096]	; 0xc18
			p_inst->history.show++;
 8010e04:	b2d2      	uxtb	r2, r2
 8010e06:	f884 2c19 	strb.w	r2, [r4, #3097]	; 0xc19
		num--;
 8010e0a:	1e91      	subs	r1, r2, #2
		if (0 != index) {
 8010e0c:	b93b      	cbnz	r3, 8010e1e <sh_put_byte_impl+0x226>
	while (num) {
 8010e0e:	2a01      	cmp	r2, #1
 8010e10:	f04f 0303 	mov.w	r3, #3
 8010e14:	d03c      	beq.n	8010e90 <sh_put_byte_impl+0x298>
 8010e16:	f011 02ff 	ands.w	r2, r1, #255	; 0xff
 8010e1a:	f43f af7a 	beq.w	8010d12 <sh_put_byte_impl+0x11a>
		num--;
 8010e1e:	3a01      	subs	r2, #1
			index--;
 8010e20:	3b01      	subs	r3, #1
	while (num) {
 8010e22:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
			index--;
 8010e26:	b2db      	uxtb	r3, r3
	while (num) {
 8010e28:	d1ef      	bne.n	8010e0a <sh_put_byte_impl+0x212>
 8010e2a:	e772      	b.n	8010d12 <sh_put_byte_impl+0x11a>
	len = strlen((const char *)buff);
 8010e2c:	4648      	mov	r0, r9
 8010e2e:	f7ef fa57 	bl	80002e0 <strlen>
	if (len >= SH_MAX_BUFSIZE) return;  /* command too long */
 8010e32:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
	len = strlen((const char *)buff);
 8010e36:	4605      	mov	r5, r0
	if (len >= SH_MAX_BUFSIZE) return;  /* command too long */
 8010e38:	d213      	bcs.n	8010e62 <sh_put_byte_impl+0x26a>
	uint8_t index = p_inst->history.latest;
 8010e3a:	f894 8c18 	ldrb.w	r8, [r4, #3096]	; 0xc18
	if (0 != index) {
 8010e3e:	f1b8 0f00 	cmp.w	r8, #0
 8010e42:	d037      	beq.n	8010eb4 <sh_put_byte_impl+0x2bc>
		index--;
 8010e44:	f108 30ff 	add.w	r0, r8, #4294967295
 8010e48:	b2c0      	uxtb	r0, r0
 8010e4a:	0240      	lsls	r0, r0, #9
 8010e4c:	f200 2017 	addw	r0, r0, #535	; 0x217
	if (0 != memcmp(p_inst->history.cmd[index], buff, len)) {
 8010e50:	4420      	add	r0, r4
 8010e52:	462a      	mov	r2, r5
 8010e54:	4649      	mov	r1, r9
 8010e56:	f000 fd5b 	bl	8011910 <memcmp>
 8010e5a:	bb70      	cbnz	r0, 8010eba <sh_put_byte_impl+0x2c2>
	p_inst->history.show = 0;
 8010e5c:	2300      	movs	r3, #0
 8010e5e:	f884 3c19 	strb.w	r3, [r4, #3097]	; 0xc19
	if( i == p_inst->cmdlist_size ){
 8010e62:	7d23      	ldrb	r3, [r4, #20]
 8010e64:	e7b4      	b.n	8010dd0 <sh_put_byte_impl+0x1d8>
				p_inst->cmdlen = (uint16_t)(SH_MAX_BUFSIZE-1);
 8010e66:	f04f 31ff 	mov.w	r1, #4294967295
 8010e6a:	2200      	movs	r2, #0
 8010e6c:	2301      	movs	r3, #1
 8010e6e:	7561      	strb	r1, [r4, #21]
				p_inst->cmdbuf[p_inst->cmdlen] = '\0';
 8010e70:	f884 2216 	strb.w	r2, [r4, #534]	; 0x216
				p_inst->cmdlen = (uint16_t)(SH_MAX_BUFSIZE-1);
 8010e74:	75a3      	strb	r3, [r4, #22]
				p_inst->cmdbuf[p_inst->cmdlen] = '\0';
 8010e76:	e76a      	b.n	8010d4e <sh_put_byte_impl+0x156>
			TERMINAL_MOVE_LEFT(p_inst->cmdlen);
 8010e78:	f8b4 1015 	ldrh.w	r1, [r4, #21]
 8010e7c:	4826      	ldr	r0, [pc, #152]	; (8010f18 <sh_put_byte_impl+0x320>)
 8010e7e:	f000 fbc5 	bl	801160c <iprintf>
			TERMINAL_CLEAR_END();
 8010e82:	4826      	ldr	r0, [pc, #152]	; (8010f1c <sh_put_byte_impl+0x324>)
 8010e84:	f000 fbc2 	bl	801160c <iprintf>
			p_inst->cmdlen = 0;
 8010e88:	2300      	movs	r3, #0
 8010e8a:	7563      	strb	r3, [r4, #21]
 8010e8c:	75a3      	strb	r3, [r4, #22]
 8010e8e:	e6f0      	b.n	8010c72 <sh_put_byte_impl+0x7a>
	while (num) {
 8010e90:	f640 2517 	movw	r5, #2583	; 0xa17
 8010e94:	e740      	b.n	8010d18 <sh_put_byte_impl+0x120>
				PRINTF("\r\n-> FUNC. ERR\r\n");
 8010e96:	4827      	ldr	r0, [pc, #156]	; (8010f34 <sh_put_byte_impl+0x33c>)
 8010e98:	f000 fc26 	bl	80116e8 <puts>
	if( i == p_inst->cmdlist_size ){
 8010e9c:	7d23      	ldrb	r3, [r4, #20]
 8010e9e:	e797      	b.n	8010dd0 <sh_put_byte_impl+0x1d8>
	index = p_inst->history.latest;
 8010ea0:	f894 3c18 	ldrb.w	r3, [r4, #3096]	; 0xc18
	while (num) {
 8010ea4:	e7b1      	b.n	8010e0a <sh_put_byte_impl+0x212>
	index = p_inst->history.latest;
 8010ea6:	f894 3c18 	ldrb.w	r3, [r4, #3096]	; 0xc18
	while (num) {
 8010eaa:	2a00      	cmp	r2, #0
 8010eac:	f43f af31 	beq.w	8010d12 <sh_put_byte_impl+0x11a>
 8010eb0:	2201      	movs	r2, #1
 8010eb2:	e71e      	b.n	8010cf2 <sh_put_byte_impl+0xfa>
 8010eb4:	f640 2017 	movw	r0, #2583	; 0xa17
 8010eb8:	e7ca      	b.n	8010e50 <sh_put_byte_impl+0x258>
		memset((void *)p_inst->history.cmd[p_inst->history.latest], 0x00, SH_MAX_BUFSIZE);
 8010eba:	eb04 2048 	add.w	r0, r4, r8, lsl #9
 8010ebe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010ec2:	2100      	movs	r1, #0
 8010ec4:	f200 2017 	addw	r0, r0, #535	; 0x217
 8010ec8:	f000 fd4c 	bl	8011964 <memset>
		memcpy((void *)p_inst->history.cmd[p_inst->history.latest], (const void *)buff, len);
 8010ecc:	f894 0c18 	ldrb.w	r0, [r4, #3096]	; 0xc18
 8010ed0:	462a      	mov	r2, r5
 8010ed2:	4649      	mov	r1, r9
 8010ed4:	eb04 2040 	add.w	r0, r4, r0, lsl #9
 8010ed8:	f200 2017 	addw	r0, r0, #535	; 0x217
 8010edc:	f000 fe1e 	bl	8011b1c <memcpy>
		if (p_inst->history.count < SH_HISTORY_MAX) {
 8010ee0:	f894 3c17 	ldrb.w	r3, [r4, #3095]	; 0xc17
 8010ee4:	2b04      	cmp	r3, #4
 8010ee6:	d802      	bhi.n	8010eee <sh_put_byte_impl+0x2f6>
			p_inst->history.count++;
 8010ee8:	3301      	adds	r3, #1
 8010eea:	f884 3c17 	strb.w	r3, [r4, #3095]	; 0xc17
		p_inst->history.latest++;
 8010eee:	f894 3c18 	ldrb.w	r3, [r4, #3096]	; 0xc18
 8010ef2:	3301      	adds	r3, #1
 8010ef4:	b2db      	uxtb	r3, r3
		if (p_inst->history.latest >= SH_HISTORY_MAX) {
 8010ef6:	2b04      	cmp	r3, #4
			p_inst->history.latest = 0;
 8010ef8:	bf88      	it	hi
 8010efa:	2300      	movhi	r3, #0
 8010efc:	f884 3c18 	strb.w	r3, [r4, #3096]	; 0xc18
 8010f00:	e7ac      	b.n	8010e5c <sh_put_byte_impl+0x264>
 8010f02:	bf00      	nop
 8010f04:	240000b8 	.word	0x240000b8
 8010f08:	080152a8 	.word	0x080152a8
 8010f0c:	080152c4 	.word	0x080152c4
 8010f10:	080152cc 	.word	0x080152cc
 8010f14:	0801524c 	.word	0x0801524c
 8010f18:	08015260 	.word	0x08015260
 8010f1c:	08015268 	.word	0x08015268
 8010f20:	080152b0 	.word	0x080152b0
 8010f24:	080152c0 	.word	0x080152c0
 8010f28:	08015434 	.word	0x08015434
 8010f2c:	0801526c 	.word	0x0801526c
 8010f30:	0801528c 	.word	0x0801528c
 8010f34:	0801527c 	.word	0x0801527c

08010f38 <sh_init_impl>:

	return ret;
}

void sh_init_impl(SH_INSTANCE_S *p_inst, SH_COMMAND_S * const *p_cmdlist, uint8_t cmdlist_size)
{
 8010f38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010f3c:	4607      	mov	r7, r0
	uint8_t i=0;

	p_inst->p_cmdlist = (SH_COMMAND_S * const *)p_cmdlist;
 8010f3e:	6101      	str	r1, [r0, #16]
	p_inst->cmdlist_size = cmdlist_size;
 8010f40:	7502      	strb	r2, [r0, #20]

	for(i=0; i<cmdlist_size; i++){
 8010f42:	b35a      	cbz	r2, 8010f9c <sh_init_impl+0x64>
 8010f44:	3a01      	subs	r2, #1
 8010f46:	1f0c      	subs	r4, r1, #4
 8010f48:	2500      	movs	r5, #0
		SH_COMMAND_S * const _cmd = *p_cmdlist;
		if( NULL != _cmd->p_cmd ) {
			if( NULL != _cmd->p_init ) {
				if( FALSE == _cmd->p_init() ) {
					ERRA("\r\n-> FUN[%d] INIT WRONG\r\n", i);
 8010f4a:	f8df a0a0 	ldr.w	sl, [pc, #160]	; 8010fec <sh_init_impl+0xb4>
 8010f4e:	b2d2      	uxtb	r2, r2
 8010f50:	f8df 909c 	ldr.w	r9, [pc, #156]	; 8010ff0 <sh_init_impl+0xb8>
 8010f54:	f8df 809c 	ldr.w	r8, [pc, #156]	; 8010ff4 <sh_init_impl+0xbc>
 8010f58:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 8010f5c:	e003      	b.n	8010f66 <sh_init_impl+0x2e>
	for(i=0; i<cmdlist_size; i++){
 8010f5e:	42b4      	cmp	r4, r6
 8010f60:	f105 0501 	add.w	r5, r5, #1
 8010f64:	d01a      	beq.n	8010f9c <sh_init_impl+0x64>
		SH_COMMAND_S * const _cmd = *p_cmdlist;
 8010f66:	f854 2f04 	ldr.w	r2, [r4, #4]!
		if( NULL != _cmd->p_cmd ) {
 8010f6a:	6813      	ldr	r3, [r2, #0]
 8010f6c:	2b00      	cmp	r3, #0
 8010f6e:	d0f6      	beq.n	8010f5e <sh_init_impl+0x26>
			if( NULL != _cmd->p_init ) {
 8010f70:	6893      	ldr	r3, [r2, #8]
 8010f72:	2b00      	cmp	r3, #0
 8010f74:	d0f3      	beq.n	8010f5e <sh_init_impl+0x26>
				if( FALSE == _cmd->p_init() ) {
 8010f76:	4798      	blx	r3
 8010f78:	2800      	cmp	r0, #0
 8010f7a:	d1f0      	bne.n	8010f5e <sh_init_impl+0x26>
					ERRA("\r\n-> FUN[%d] INIT WRONG\r\n", i);
 8010f7c:	4650      	mov	r0, sl
 8010f7e:	f000 fb45 	bl	801160c <iprintf>
 8010f82:	462b      	mov	r3, r5
 8010f84:	f240 12a1 	movw	r2, #417	; 0x1a1
 8010f88:	4649      	mov	r1, r9
 8010f8a:	4640      	mov	r0, r8
	for(i=0; i<cmdlist_size; i++){
 8010f8c:	3501      	adds	r5, #1
					ERRA("\r\n-> FUN[%d] INIT WRONG\r\n", i);
 8010f8e:	f000 fb3d 	bl	801160c <iprintf>
 8010f92:	480f      	ldr	r0, [pc, #60]	; (8010fd0 <sh_init_impl+0x98>)
 8010f94:	f000 fb3a 	bl	801160c <iprintf>
	for(i=0; i<cmdlist_size; i++){
 8010f98:	42b4      	cmp	r4, r6
 8010f9a:	d1e4      	bne.n	8010f66 <sh_init_impl+0x2e>
			}
		}
		p_cmdlist++;
	}

	PRINTF(" \r\n");
 8010f9c:	480d      	ldr	r0, [pc, #52]	; (8010fd4 <sh_init_impl+0x9c>)
 8010f9e:	f000 fba3 	bl	80116e8 <puts>
	TERMINAL_BACK_BLACK();
 8010fa2:	480d      	ldr	r0, [pc, #52]	; (8010fd8 <sh_init_impl+0xa0>)
 8010fa4:	f000 fb32 	bl	801160c <iprintf>
	TERMINAL_FONT_GREEN();
 8010fa8:	4809      	ldr	r0, [pc, #36]	; (8010fd0 <sh_init_impl+0x98>)
 8010faa:	f000 fb2f 	bl	801160c <iprintf>
	TERMINAL_DISPLAY_CLEAR();
 8010fae:	480b      	ldr	r0, [pc, #44]	; (8010fdc <sh_init_impl+0xa4>)
 8010fb0:	f000 fb2c 	bl	801160c <iprintf>
	TERMINAL_RESET_CURSOR();
 8010fb4:	480a      	ldr	r0, [pc, #40]	; (8010fe0 <sh_init_impl+0xa8>)
 8010fb6:	f000 fb29 	bl	801160c <iprintf>
	PRINTF("\r\n%s> ", p_name);
 8010fba:	4639      	mov	r1, r7
 8010fbc:	4809      	ldr	r0, [pc, #36]	; (8010fe4 <sh_init_impl+0xac>)
 8010fbe:	f000 fb25 	bl	801160c <iprintf>
	fflush(stdout);
 8010fc2:	4b09      	ldr	r3, [pc, #36]	; (8010fe8 <sh_init_impl+0xb0>)
 8010fc4:	681b      	ldr	r3, [r3, #0]
	print_prompt(p_inst->name);
}
 8010fc6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	fflush(stdout);
 8010fca:	6898      	ldr	r0, [r3, #8]
 8010fcc:	f000 ba5a 	b.w	8011484 <fflush>
 8010fd0:	0801524c 	.word	0x0801524c
 8010fd4:	080153b4 	.word	0x080153b4
 8010fd8:	08015244 	.word	0x08015244
 8010fdc:	08015258 	.word	0x08015258
 8010fe0:	08015254 	.word	0x08015254
 8010fe4:	080152a8 	.word	0x080152a8
 8010fe8:	240000b8 	.word	0x240000b8
 8010fec:	080152c4 	.word	0x080152c4
 8010ff0:	080153d8 	.word	0x080153d8
 8010ff4:	08015380 	.word	0x08015380

08010ff8 <sh_init>:

SHELL_CMD(base,	help,	help_help,			NULL,	cli_help);
SHELL_CMD(base,	cls,	shell_help_clear,	NULL,	shell_cmd_clear);

void sh_init(SH_CONFIG *p_config)
{
 8010ff8:	b538      	push	{r3, r4, r5, lr}
	ASSERT(p_config);
 8010ffa:	b308      	cbz	r0, 8011040 <sh_init+0x48>
	memset(&s_inst, 0, sizeof(SH_INSTANCE_S));
 8010ffc:	4d13      	ldr	r5, [pc, #76]	; (801104c <sh_init+0x54>)
 8010ffe:	4604      	mov	r4, r0
 8011000:	f640 4223 	movw	r2, #3107	; 0xc23
 8011004:	2100      	movs	r1, #0
 8011006:	4628      	mov	r0, r5
 8011008:	f000 fcac 	bl	8011964 <memset>
	s_inst.init = p_config->init;
	s_inst.output = p_config->output;
	snprintf(s_inst.name, sizeof(char)*16, "%s", p_config->name);
 801100c:	4623      	mov	r3, r4
 801100e:	4a10      	ldr	r2, [pc, #64]	; (8011050 <sh_init+0x58>)
	s_inst.output = p_config->output;
 8011010:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
	s_inst.init = p_config->init;
 8011014:	f8c5 0c1b 	str.w	r0, [r5, #3099]	; 0xc1b
	snprintf(s_inst.name, sizeof(char)*16, "%s", p_config->name);
 8011018:	4628      	mov	r0, r5
	s_inst.output = p_config->output;
 801101a:	f8c5 1c1f 	str.w	r1, [r5, #3103]	; 0xc1f
	snprintf(s_inst.name, sizeof(char)*16, "%s", p_config->name);
 801101e:	2110      	movs	r1, #16
 8011020:	f000 fb6a 	bl	80116f8 <sniprintf>

	if( NULL != s_inst.init ){
 8011024:	f8d5 3c1b 	ldr.w	r3, [r5, #3099]	; 0xc1b
 8011028:	b103      	cbz	r3, 801102c <sh_init+0x34>
		s_inst.init();
 801102a:	4798      	blx	r3
	}
	sh_init_impl(&s_inst, &__start_shell_base_section, (&__stop_shell_base_section - &__start_shell_base_section));
 801102c:	4909      	ldr	r1, [pc, #36]	; (8011054 <sh_init+0x5c>)
 801102e:	4a0a      	ldr	r2, [pc, #40]	; (8011058 <sh_init+0x60>)
 8011030:	4806      	ldr	r0, [pc, #24]	; (801104c <sh_init+0x54>)
 8011032:	1a52      	subs	r2, r2, r1
}
 8011034:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	sh_init_impl(&s_inst, &__start_shell_base_section, (&__stop_shell_base_section - &__start_shell_base_section));
 8011038:	f3c2 0287 	ubfx	r2, r2, #2, #8
 801103c:	f7ff bf7c 	b.w	8010f38 <sh_init_impl>
	ASSERT(p_config);
 8011040:	4a06      	ldr	r2, [pc, #24]	; (801105c <sh_init+0x64>)
 8011042:	4907      	ldr	r1, [pc, #28]	; (8011060 <sh_init+0x68>)
 8011044:	4807      	ldr	r0, [pc, #28]	; (8011064 <sh_init+0x6c>)
 8011046:	f000 fae1 	bl	801160c <iprintf>
 801104a:	e7fe      	b.n	801104a <sh_init+0x52>
 801104c:	240106e4 	.word	0x240106e4
 8011050:	080152c0 	.word	0x080152c0
 8011054:	080155b0 	.word	0x080155b0
 8011058:	080155bc 	.word	0x080155bc
 801105c:	080153d0 	.word	0x080153d0
 8011060:	080153b8 	.word	0x080153b8
 8011064:	08015300 	.word	0x08015300

08011068 <sh_input>:

void sh_input(uint8_t *p_byte, uint32_t size)
{
	int i=0;

	for(i=0; i<size; i++){
 8011068:	b161      	cbz	r1, 8011084 <sh_input+0x1c>
 801106a:	4401      	add	r1, r0
{
 801106c:	b570      	push	{r4, r5, r6, lr}
 801106e:	1e44      	subs	r4, r0, #1
		sh_put_byte_impl(&s_inst, p_byte[i]);
 8011070:	4e05      	ldr	r6, [pc, #20]	; (8011088 <sh_input+0x20>)
 8011072:	1e4d      	subs	r5, r1, #1
 8011074:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8011078:	4630      	mov	r0, r6
 801107a:	f7ff fdbd 	bl	8010bf8 <sh_put_byte_impl>
	for(i=0; i<size; i++){
 801107e:	42ac      	cmp	r4, r5
 8011080:	d1f8      	bne.n	8011074 <sh_input+0xc>
	}
}
 8011082:	bd70      	pop	{r4, r5, r6, pc}
 8011084:	4770      	bx	lr
 8011086:	bf00      	nop
 8011088:	240106e4 	.word	0x240106e4

0801108c <shell_cmd_test>:
		"[test]\r\n"
		" * test command\r\n"
		"\r\n";

uint8_t shell_cmd_test(void *para, uint8_t len)
{
 801108c:	b508      	push	{r3, lr}
	PRINTF("test command\r\n");
 801108e:	4802      	ldr	r0, [pc, #8]	; (8011098 <shell_cmd_test+0xc>)
 8011090:	f000 fb2a 	bl	80116e8 <puts>
	return TRUE;
}
 8011094:	2001      	movs	r0, #1
 8011096:	bd08      	pop	{r3, pc}
 8011098:	08015428 	.word	0x08015428

0801109c <queue_in>:
 * @param  Front , Rear , PBase , Len
 * @retval Result of Queue Operation as Enum
 */
uint8_t queue_full(uint16_t *Front, uint16_t *Rear, uint8_t *PBase, uint16_t Len)
{
    if((((*Rear) + 1) % Len) == *Front) {
 801109c:	f8b1 c000 	ldrh.w	ip, [r1]
 * @brief  queue_in
 * @param  Front , Rear , PBase , Len
 * @retval Result of Queue Operation as Enum
 */
uint8_t queue_in(uint16_t *Front, uint16_t *Rear, uint8_t *PBase, uint16_t Len, uint8_t *PData)
{
 80110a0:	b510      	push	{r4, lr}
    if((((*Rear) + 1) % Len) == *Front) {
 80110a2:	f8b0 e000 	ldrh.w	lr, [r0]
 80110a6:	f10c 0001 	add.w	r0, ip, #1
 80110aa:	fbb0 f4f3 	udiv	r4, r0, r3
 80110ae:	fb03 0014 	mls	r0, r3, r4, r0
 80110b2:	4570      	cmp	r0, lr
 80110b4:	d00c      	beq.n	80110d0 <queue_in+0x34>
    if(queue_full(Front, Rear, PBase, Len)) {
//    	ENABLE_ALL_IRQ();
        return FALSE;
    }

    PBase[*Rear] = *PData;
 80110b6:	9802      	ldr	r0, [sp, #8]
 80110b8:	7800      	ldrb	r0, [r0, #0]
 80110ba:	f802 000c 	strb.w	r0, [r2, ip]
    *Rear = ((*Rear) + 1) % Len;

//    ENABLE_ALL_IRQ();

    return TRUE;
 80110be:	2001      	movs	r0, #1
    *Rear = ((*Rear) + 1) % Len;
 80110c0:	880a      	ldrh	r2, [r1, #0]
 80110c2:	4402      	add	r2, r0
 80110c4:	fbb2 f4f3 	udiv	r4, r2, r3
 80110c8:	fb03 2214 	mls	r2, r3, r4, r2
 80110cc:	800a      	strh	r2, [r1, #0]
}
 80110ce:	bd10      	pop	{r4, pc}
        return FALSE;
 80110d0:	2000      	movs	r0, #0
}
 80110d2:	bd10      	pop	{r4, pc}

080110d4 <HAL_UART_RxCpltCallback>:
#include "drv_uart.h"

static DRV_UART_INSTANCE_S s_uart_inst[DRV_UART_MAX_CHANNELS];

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80110d4:	b530      	push	{r4, r5, lr}
#endif
	else{
		_channel = 0;
	}

	QUEUE_IN(s_uart_inst[_channel].rxq, s_uart_inst[_channel].rxbyte);
 80110d6:	4c0c      	ldr	r4, [pc, #48]	; (8011108 <HAL_UART_RxCpltCallback+0x34>)
{
 80110d8:	b083      	sub	sp, #12
	QUEUE_IN(s_uart_inst[_channel].rxq, s_uart_inst[_channel].rxbyte);
 80110da:	f640 0301 	movw	r3, #2049	; 0x801
 80110de:	f104 05a8 	add.w	r5, r4, #168	; 0xa8
 80110e2:	f104 02ad 	add.w	r2, r4, #173	; 0xad
 80110e6:	f104 01ab 	add.w	r1, r4, #171	; 0xab
 80110ea:	f104 00a9 	add.w	r0, r4, #169	; 0xa9
 80110ee:	9500      	str	r5, [sp, #0]
 80110f0:	f7ff ffd4 	bl	801109c <queue_in>
	if( NULL != s_uart_inst[_channel].config.recv_func ){
 80110f4:	68e3      	ldr	r3, [r4, #12]
 80110f6:	b12b      	cbz	r3, 8011104 <HAL_UART_RxCpltCallback+0x30>
		s_uart_inst[_channel].config.recv_func(&s_uart_inst[_channel].rxbyte, 1);
 80110f8:	2101      	movs	r1, #1
 80110fa:	4628      	mov	r0, r5
	}
}
 80110fc:	b003      	add	sp, #12
 80110fe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		s_uart_inst[_channel].config.recv_func(&s_uart_inst[_channel].rxbyte, 1);
 8011102:	4718      	bx	r3
}
 8011104:	b003      	add	sp, #12
 8011106:	bd30      	pop	{r4, r5, pc}
 8011108:	24011308 	.word	0x24011308

0801110c <USART3_IRQHandler>:
#endif

#if (CONF_UART_CH3_USED == 1)
void USART3_IRQHandler(void)
{
	HAL_UART_IRQHandler(&s_uart_inst[DRV_UART_CH3].handle);
 801110c:	4809      	ldr	r0, [pc, #36]	; (8011134 <USART3_IRQHandler+0x28>)
{
 801110e:	b508      	push	{r3, lr}
	HAL_UART_IRQHandler(&s_uart_inst[DRV_UART_CH3].handle);
 8011110:	f7f4 f856 	bl	80051c0 <HAL_UART_IRQHandler>
	if( HAL_OK != HAL_UART_Receive_IT(&s_uart_inst[DRV_UART_CH3].handle, &s_uart_inst[DRV_UART_CH3].rxbyte, 1) ){
 8011114:	4908      	ldr	r1, [pc, #32]	; (8011138 <USART3_IRQHandler+0x2c>)
 8011116:	2201      	movs	r2, #1
 8011118:	f1a1 0094 	sub.w	r0, r1, #148	; 0x94
 801111c:	f7f5 f984 	bl	8006428 <HAL_UART_Receive_IT>
 8011120:	b900      	cbnz	r0, 8011124 <USART3_IRQHandler+0x18>
		//CRITICAL.
		UART_Start_Receive_IT(&s_uart_inst[DRV_UART_CH3].handle, &s_uart_inst[DRV_UART_CH3].rxbyte, 1);
	}
}
 8011122:	bd08      	pop	{r3, pc}
		UART_Start_Receive_IT(&s_uart_inst[DRV_UART_CH3].handle, &s_uart_inst[DRV_UART_CH3].rxbyte, 1);
 8011124:	4904      	ldr	r1, [pc, #16]	; (8011138 <USART3_IRQHandler+0x2c>)
 8011126:	2201      	movs	r2, #1
 8011128:	f1a1 0094 	sub.w	r0, r1, #148	; 0x94
}
 801112c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		UART_Start_Receive_IT(&s_uart_inst[DRV_UART_CH3].handle, &s_uart_inst[DRV_UART_CH3].rxbyte, 1);
 8011130:	f7f5 b8e0 	b.w	80062f4 <UART_Start_Receive_IT>
 8011134:	2401131c 	.word	0x2401131c
 8011138:	240113b0 	.word	0x240113b0

0801113c <drv_uart_init>:
		}
	}
}

int32_t drv_uart_init(DRV_UART_CONFIG_S *p_config)
{
 801113c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ASSERT(p_config);
 801113e:	b330      	cbz	r0, 801118e <drv_uart_init+0x52>
	ASSERT(DRV_UART_MAX_CHANNELS > p_config->channel);
 8011140:	7803      	ldrb	r3, [r0, #0]
 8011142:	4604      	mov	r4, r0
 8011144:	b923      	cbnz	r3, 8011150 <drv_uart_init+0x14>

	if( DRV_UART_S_NOT_USED == s_uart_inst[p_config->channel].state ){
 8011146:	4d41      	ldr	r5, [pc, #260]	; (801124c <drv_uart_init+0x110>)
 8011148:	7829      	ldrb	r1, [r5, #0]
 801114a:	b139      	cbz	r1, 801115c <drv_uart_init+0x20>
		memcpy(&s_uart_inst[p_config->channel].config, p_config, sizeof(DRV_UART_CONFIG_S));
		_uart_dev_init(&s_uart_inst[p_config->channel]);
	}

	return 0;
}
 801114c:	2000      	movs	r0, #0
 801114e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(DRV_UART_MAX_CHANNELS > p_config->channel);
 8011150:	4a3f      	ldr	r2, [pc, #252]	; (8011250 <drv_uart_init+0x114>)
 8011152:	4940      	ldr	r1, [pc, #256]	; (8011254 <drv_uart_init+0x118>)
 8011154:	4840      	ldr	r0, [pc, #256]	; (8011258 <drv_uart_init+0x11c>)
 8011156:	f000 fa59 	bl	801160c <iprintf>
 801115a:	e7fe      	b.n	801115a <drv_uart_init+0x1e>
		memset(&s_uart_inst[p_config->channel], 0x0, sizeof(DRV_UART_INSTANCE_S));
 801115c:	f44f 660b 	mov.w	r6, #2224	; 0x8b0
 8011160:	4628      	mov	r0, r5
 8011162:	4632      	mov	r2, r6
 8011164:	f000 fbfe 	bl	8011964 <memset>
		memcpy(&s_uart_inst[p_config->channel].config, p_config, sizeof(DRV_UART_CONFIG_S));
 8011168:	f894 c000 	ldrb.w	ip, [r4]
 801116c:	6820      	ldr	r0, [r4, #0]
 801116e:	fb06 5c0c 	mla	ip, r6, ip, r5
 8011172:	6861      	ldr	r1, [r4, #4]
 8011174:	68a2      	ldr	r2, [r4, #8]
 8011176:	68e3      	ldr	r3, [r4, #12]
 8011178:	f10c 0c04 	add.w	ip, ip, #4
 801117c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
		_uart_dev_init(&s_uart_inst[p_config->channel]);
 8011180:	7824      	ldrb	r4, [r4, #0]
	switch(p_inst->config.channel){
 8011182:	fb06 5604 	mla	r6, r6, r4, r5
 8011186:	7937      	ldrb	r7, [r6, #4]
 8011188:	b13f      	cbz	r7, 801119a <drv_uart_init+0x5e>
  __ASM volatile ("cpsid i" : : : "memory");
 801118a:	b672      	cpsid	i
	while (1) {
 801118c:	e7fe      	b.n	801118c <drv_uart_init+0x50>
	ASSERT(p_config);
 801118e:	4a30      	ldr	r2, [pc, #192]	; (8011250 <drv_uart_init+0x114>)
 8011190:	4932      	ldr	r1, [pc, #200]	; (801125c <drv_uart_init+0x120>)
 8011192:	4831      	ldr	r0, [pc, #196]	; (8011258 <drv_uart_init+0x11c>)
 8011194:	f000 fa3a 	bl	801160c <iprintf>
 8011198:	e7fe      	b.n	8011198 <drv_uart_init+0x5c>
		p_inst->handle.Instance = USART3;
 801119a:	4b31      	ldr	r3, [pc, #196]	; (8011260 <drv_uart_init+0x124>)
		HAL_NVIC_EnableIRQ(USART3_IRQn);
 801119c:	2027      	movs	r0, #39	; 0x27
		p_inst->handle.Instance = USART3;
 801119e:	6173      	str	r3, [r6, #20]
		HAL_NVIC_EnableIRQ(USART3_IRQn);
 80111a0:	f7f0 fc76 	bl	8001a90 <HAL_NVIC_EnableIRQ>
	p_inst->handle.Init.BaudRate = p_inst->config.baudrate;
 80111a4:	68b2      	ldr	r2, [r6, #8]
	switch(p_inst->config.stopbit){
 80111a6:	7973      	ldrb	r3, [r6, #5]
	p_inst->handle.Init.WordLength = UART_WORDLENGTH_8B;
 80111a8:	61f7      	str	r7, [r6, #28]
	p_inst->handle.Init.BaudRate = p_inst->config.baudrate;
 80111aa:	61b2      	str	r2, [r6, #24]
	switch(p_inst->config.stopbit){
 80111ac:	2b03      	cmp	r3, #3
 80111ae:	d834      	bhi.n	801121a <drv_uart_init+0xde>
 80111b0:	e8df f003 	tbb	[pc, r3]
 80111b4:	2d303302 	.word	0x2d303302
 80111b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
		p_inst->handle.Init.StopBits = UART_STOPBITS_0_5;
 80111bc:	f44f 620b 	mov.w	r2, #2224	; 0x8b0
	p_inst->handle.Init.Parity = UART_PARITY_NONE;
 80111c0:	2100      	movs	r1, #0
		p_inst->handle.Init.StopBits = UART_STOPBITS_0_5;
 80111c2:	fb02 5204 	mla	r2, r2, r4, r5
	p_inst->handle.Init.Parity = UART_PARITY_NONE;
 80111c6:	e9c2 3108 	strd	r3, r1, [r2, #32]
	switch(p_inst->config.hwctrl){
 80111ca:	7993      	ldrb	r3, [r2, #6]
	p_inst->handle.Init.Mode = UART_MODE_TX_RX;
 80111cc:	210c      	movs	r1, #12
	switch(p_inst->config.hwctrl){
 80111ce:	2b02      	cmp	r3, #2
	p_inst->handle.Init.Mode = UART_MODE_TX_RX;
 80111d0:	6291      	str	r1, [r2, #40]	; 0x28
	switch(p_inst->config.hwctrl){
 80111d2:	d037      	beq.n	8011244 <drv_uart_init+0x108>
 80111d4:	2b03      	cmp	r3, #3
 80111d6:	d032      	beq.n	801123e <drv_uart_init+0x102>
 80111d8:	f1a3 0301 	sub.w	r3, r3, #1
 80111dc:	fab3 f383 	clz	r3, r3
 80111e0:	095b      	lsrs	r3, r3, #5
 80111e2:	021a      	lsls	r2, r3, #8
		p_inst->handle.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80111e4:	f44f 610b 	mov.w	r1, #2224	; 0x8b0
	p_inst->handle.Init.OverSampling = UART_OVERSAMPLING_16;
 80111e8:	2300      	movs	r3, #0
		p_inst->handle.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80111ea:	fb01 f404 	mul.w	r4, r1, r4
 80111ee:	1929      	adds	r1, r5, r4
		if (HAL_RS485Ex_Init(&p_inst->handle, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK){
 80111f0:	f104 0614 	add.w	r6, r4, #20
		p_inst->handle.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80111f4:	62ca      	str	r2, [r1, #44]	; 0x2c
		if (HAL_RS485Ex_Init(&p_inst->handle, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK){
 80111f6:	442e      	add	r6, r5
	if( p_inst->config.is_hw_rs485 ){
 80111f8:	7c0a      	ldrb	r2, [r1, #16]
	p_inst->handle.Init.OverSampling = UART_OVERSAMPLING_16;
 80111fa:	630b      	str	r3, [r1, #48]	; 0x30
	if( p_inst->config.is_hw_rs485 ){
 80111fc:	b17a      	cbz	r2, 801121e <drv_uart_init+0xe2>
		if (HAL_RS485Ex_Init(&p_inst->handle, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK){
 80111fe:	461a      	mov	r2, r3
 8011200:	4619      	mov	r1, r3
 8011202:	4630      	mov	r0, r6
 8011204:	f7f5 f934 	bl	8006470 <HAL_RS485Ex_Init>
 8011208:	b178      	cbz	r0, 801122a <drv_uart_init+0xee>
 801120a:	b672      	cpsid	i
	while (1) {
 801120c:	e7fe      	b.n	801120c <drv_uart_init+0xd0>
		break;
 801120e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8011212:	e7d3      	b.n	80111bc <drv_uart_init+0x80>
		break;
 8011214:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8011218:	e7d0      	b.n	80111bc <drv_uart_init+0x80>
	switch(p_inst->config.stopbit){
 801121a:	2300      	movs	r3, #0
 801121c:	e7ce      	b.n	80111bc <drv_uart_init+0x80>
		if (HAL_UART_Init(&p_inst->handle) != HAL_OK) {
 801121e:	4630      	mov	r0, r6
 8011220:	f7f5 f834 	bl	800628c <HAL_UART_Init>
 8011224:	b108      	cbz	r0, 801122a <drv_uart_init+0xee>
 8011226:	b672      	cpsid	i
	while (1) {
 8011228:	e7fe      	b.n	8011228 <drv_uart_init+0xec>
			HAL_UART_Receive_IT(&p_inst->handle, &p_inst->rxbyte, 1);
 801122a:	f104 01a8 	add.w	r1, r4, #168	; 0xa8
 801122e:	2201      	movs	r2, #1
 8011230:	4630      	mov	r0, r6
 8011232:	4429      	add	r1, r5
 8011234:	f7f5 f8f8 	bl	8006428 <HAL_UART_Receive_IT>
			p_inst->state = DRV_UART_S_RUNNING;
 8011238:	2302      	movs	r3, #2
 801123a:	552b      	strb	r3, [r5, r4]
 801123c:	e786      	b.n	801114c <drv_uart_init+0x10>
	switch(p_inst->config.hwctrl){
 801123e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8011242:	e7cf      	b.n	80111e4 <drv_uart_init+0xa8>
 8011244:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011248:	e7cc      	b.n	80111e4 <drv_uart_init+0xa8>
 801124a:	bf00      	nop
 801124c:	24011308 	.word	0x24011308
 8011250:	080154c4 	.word	0x080154c4
 8011254:	0801545c 	.word	0x0801545c
 8011258:	08015300 	.word	0x08015300
 801125c:	080153b8 	.word	0x080153b8
 8011260:	40004800 	.word	0x40004800

08011264 <drv_uart_write_data>:

	return ret;
}

int32_t drv_uart_write_data(DRV_UART_CH_E channel, uint8_t *p_data, uint16_t size)
{
 8011264:	b510      	push	{r4, lr}
	int32_t	ret = 0;

	ASSERT(p_data);
 8011266:	b189      	cbz	r1, 801128c <drv_uart_write_data+0x28>
	ASSERT(DRV_UART_MAX_CHANNELS > channel);
 8011268:	b128      	cbz	r0, 8011276 <drv_uart_write_data+0x12>
 801126a:	4a0b      	ldr	r2, [pc, #44]	; (8011298 <drv_uart_write_data+0x34>)
 801126c:	490b      	ldr	r1, [pc, #44]	; (801129c <drv_uart_write_data+0x38>)
 801126e:	480c      	ldr	r0, [pc, #48]	; (80112a0 <drv_uart_write_data+0x3c>)
 8011270:	f000 f9cc 	bl	801160c <iprintf>
 8011274:	e7fe      	b.n	8011274 <drv_uart_write_data+0x10>

	if( HAL_UART_Transmit(&s_uart_inst[channel].handle, p_data, size, 1000) == HAL_OK ){
 8011276:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801127a:	480a      	ldr	r0, [pc, #40]	; (80112a4 <drv_uart_write_data+0x40>)
 801127c:	4614      	mov	r4, r2
 801127e:	f7f4 ff39 	bl	80060f4 <HAL_UART_Transmit>
 8011282:	2800      	cmp	r0, #0
	else{
		ret = 0;
	}

	return ret;
}
 8011284:	bf0c      	ite	eq
 8011286:	4620      	moveq	r0, r4
 8011288:	2000      	movne	r0, #0
 801128a:	bd10      	pop	{r4, pc}
	ASSERT(p_data);
 801128c:	4a02      	ldr	r2, [pc, #8]	; (8011298 <drv_uart_write_data+0x34>)
 801128e:	4906      	ldr	r1, [pc, #24]	; (80112a8 <drv_uart_write_data+0x44>)
 8011290:	4803      	ldr	r0, [pc, #12]	; (80112a0 <drv_uart_write_data+0x3c>)
 8011292:	f000 f9bb 	bl	801160c <iprintf>
 8011296:	e7fe      	b.n	8011296 <drv_uart_write_data+0x32>
 8011298:	080154b0 	.word	0x080154b0
 801129c:	08015488 	.word	0x08015488
 80112a0:	08015300 	.word	0x08015300
 80112a4:	2401131c 	.word	0x2401131c
 80112a8:	080154a8 	.word	0x080154a8

080112ac <rand>:
 80112ac:	4b16      	ldr	r3, [pc, #88]	; (8011308 <rand+0x5c>)
 80112ae:	b510      	push	{r4, lr}
 80112b0:	681c      	ldr	r4, [r3, #0]
 80112b2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80112b4:	b9b3      	cbnz	r3, 80112e4 <rand+0x38>
 80112b6:	2018      	movs	r0, #24
 80112b8:	f000 fca8 	bl	8011c0c <malloc>
 80112bc:	4602      	mov	r2, r0
 80112be:	6320      	str	r0, [r4, #48]	; 0x30
 80112c0:	b920      	cbnz	r0, 80112cc <rand+0x20>
 80112c2:	4b12      	ldr	r3, [pc, #72]	; (801130c <rand+0x60>)
 80112c4:	4812      	ldr	r0, [pc, #72]	; (8011310 <rand+0x64>)
 80112c6:	2152      	movs	r1, #82	; 0x52
 80112c8:	f000 fc36 	bl	8011b38 <__assert_func>
 80112cc:	4911      	ldr	r1, [pc, #68]	; (8011314 <rand+0x68>)
 80112ce:	4b12      	ldr	r3, [pc, #72]	; (8011318 <rand+0x6c>)
 80112d0:	e9c0 1300 	strd	r1, r3, [r0]
 80112d4:	4b11      	ldr	r3, [pc, #68]	; (801131c <rand+0x70>)
 80112d6:	6083      	str	r3, [r0, #8]
 80112d8:	230b      	movs	r3, #11
 80112da:	8183      	strh	r3, [r0, #12]
 80112dc:	2100      	movs	r1, #0
 80112de:	2001      	movs	r0, #1
 80112e0:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80112e4:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80112e6:	480e      	ldr	r0, [pc, #56]	; (8011320 <rand+0x74>)
 80112e8:	690b      	ldr	r3, [r1, #16]
 80112ea:	694c      	ldr	r4, [r1, #20]
 80112ec:	4a0d      	ldr	r2, [pc, #52]	; (8011324 <rand+0x78>)
 80112ee:	4358      	muls	r0, r3
 80112f0:	fb02 0004 	mla	r0, r2, r4, r0
 80112f4:	fba3 3202 	umull	r3, r2, r3, r2
 80112f8:	3301      	adds	r3, #1
 80112fa:	eb40 0002 	adc.w	r0, r0, r2
 80112fe:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8011302:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8011306:	bd10      	pop	{r4, pc}
 8011308:	240000b8 	.word	0x240000b8
 801130c:	080154d2 	.word	0x080154d2
 8011310:	080154e9 	.word	0x080154e9
 8011314:	abcd330e 	.word	0xabcd330e
 8011318:	e66d1234 	.word	0xe66d1234
 801131c:	0005deec 	.word	0x0005deec
 8011320:	5851f42d 	.word	0x5851f42d
 8011324:	4c957f2d 	.word	0x4c957f2d

08011328 <__sflush_r>:
 8011328:	898a      	ldrh	r2, [r1, #12]
 801132a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801132e:	4605      	mov	r5, r0
 8011330:	0710      	lsls	r0, r2, #28
 8011332:	460c      	mov	r4, r1
 8011334:	d458      	bmi.n	80113e8 <__sflush_r+0xc0>
 8011336:	684b      	ldr	r3, [r1, #4]
 8011338:	2b00      	cmp	r3, #0
 801133a:	dc05      	bgt.n	8011348 <__sflush_r+0x20>
 801133c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801133e:	2b00      	cmp	r3, #0
 8011340:	dc02      	bgt.n	8011348 <__sflush_r+0x20>
 8011342:	2000      	movs	r0, #0
 8011344:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011348:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801134a:	2e00      	cmp	r6, #0
 801134c:	d0f9      	beq.n	8011342 <__sflush_r+0x1a>
 801134e:	2300      	movs	r3, #0
 8011350:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011354:	682f      	ldr	r7, [r5, #0]
 8011356:	6a21      	ldr	r1, [r4, #32]
 8011358:	602b      	str	r3, [r5, #0]
 801135a:	d032      	beq.n	80113c2 <__sflush_r+0x9a>
 801135c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801135e:	89a3      	ldrh	r3, [r4, #12]
 8011360:	075a      	lsls	r2, r3, #29
 8011362:	d505      	bpl.n	8011370 <__sflush_r+0x48>
 8011364:	6863      	ldr	r3, [r4, #4]
 8011366:	1ac0      	subs	r0, r0, r3
 8011368:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801136a:	b10b      	cbz	r3, 8011370 <__sflush_r+0x48>
 801136c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801136e:	1ac0      	subs	r0, r0, r3
 8011370:	2300      	movs	r3, #0
 8011372:	4602      	mov	r2, r0
 8011374:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011376:	6a21      	ldr	r1, [r4, #32]
 8011378:	4628      	mov	r0, r5
 801137a:	47b0      	blx	r6
 801137c:	1c43      	adds	r3, r0, #1
 801137e:	89a3      	ldrh	r3, [r4, #12]
 8011380:	d106      	bne.n	8011390 <__sflush_r+0x68>
 8011382:	6829      	ldr	r1, [r5, #0]
 8011384:	291d      	cmp	r1, #29
 8011386:	d82b      	bhi.n	80113e0 <__sflush_r+0xb8>
 8011388:	4a29      	ldr	r2, [pc, #164]	; (8011430 <__sflush_r+0x108>)
 801138a:	410a      	asrs	r2, r1
 801138c:	07d6      	lsls	r6, r2, #31
 801138e:	d427      	bmi.n	80113e0 <__sflush_r+0xb8>
 8011390:	2200      	movs	r2, #0
 8011392:	6062      	str	r2, [r4, #4]
 8011394:	04d9      	lsls	r1, r3, #19
 8011396:	6922      	ldr	r2, [r4, #16]
 8011398:	6022      	str	r2, [r4, #0]
 801139a:	d504      	bpl.n	80113a6 <__sflush_r+0x7e>
 801139c:	1c42      	adds	r2, r0, #1
 801139e:	d101      	bne.n	80113a4 <__sflush_r+0x7c>
 80113a0:	682b      	ldr	r3, [r5, #0]
 80113a2:	b903      	cbnz	r3, 80113a6 <__sflush_r+0x7e>
 80113a4:	6560      	str	r0, [r4, #84]	; 0x54
 80113a6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80113a8:	602f      	str	r7, [r5, #0]
 80113aa:	2900      	cmp	r1, #0
 80113ac:	d0c9      	beq.n	8011342 <__sflush_r+0x1a>
 80113ae:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80113b2:	4299      	cmp	r1, r3
 80113b4:	d002      	beq.n	80113bc <__sflush_r+0x94>
 80113b6:	4628      	mov	r0, r5
 80113b8:	f000 fbdc 	bl	8011b74 <_free_r>
 80113bc:	2000      	movs	r0, #0
 80113be:	6360      	str	r0, [r4, #52]	; 0x34
 80113c0:	e7c0      	b.n	8011344 <__sflush_r+0x1c>
 80113c2:	2301      	movs	r3, #1
 80113c4:	4628      	mov	r0, r5
 80113c6:	47b0      	blx	r6
 80113c8:	1c41      	adds	r1, r0, #1
 80113ca:	d1c8      	bne.n	801135e <__sflush_r+0x36>
 80113cc:	682b      	ldr	r3, [r5, #0]
 80113ce:	2b00      	cmp	r3, #0
 80113d0:	d0c5      	beq.n	801135e <__sflush_r+0x36>
 80113d2:	2b1d      	cmp	r3, #29
 80113d4:	d001      	beq.n	80113da <__sflush_r+0xb2>
 80113d6:	2b16      	cmp	r3, #22
 80113d8:	d101      	bne.n	80113de <__sflush_r+0xb6>
 80113da:	602f      	str	r7, [r5, #0]
 80113dc:	e7b1      	b.n	8011342 <__sflush_r+0x1a>
 80113de:	89a3      	ldrh	r3, [r4, #12]
 80113e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80113e4:	81a3      	strh	r3, [r4, #12]
 80113e6:	e7ad      	b.n	8011344 <__sflush_r+0x1c>
 80113e8:	690f      	ldr	r7, [r1, #16]
 80113ea:	2f00      	cmp	r7, #0
 80113ec:	d0a9      	beq.n	8011342 <__sflush_r+0x1a>
 80113ee:	0793      	lsls	r3, r2, #30
 80113f0:	680e      	ldr	r6, [r1, #0]
 80113f2:	bf08      	it	eq
 80113f4:	694b      	ldreq	r3, [r1, #20]
 80113f6:	600f      	str	r7, [r1, #0]
 80113f8:	bf18      	it	ne
 80113fa:	2300      	movne	r3, #0
 80113fc:	eba6 0807 	sub.w	r8, r6, r7
 8011400:	608b      	str	r3, [r1, #8]
 8011402:	f1b8 0f00 	cmp.w	r8, #0
 8011406:	dd9c      	ble.n	8011342 <__sflush_r+0x1a>
 8011408:	6a21      	ldr	r1, [r4, #32]
 801140a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801140c:	4643      	mov	r3, r8
 801140e:	463a      	mov	r2, r7
 8011410:	4628      	mov	r0, r5
 8011412:	47b0      	blx	r6
 8011414:	2800      	cmp	r0, #0
 8011416:	dc06      	bgt.n	8011426 <__sflush_r+0xfe>
 8011418:	89a3      	ldrh	r3, [r4, #12]
 801141a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801141e:	81a3      	strh	r3, [r4, #12]
 8011420:	f04f 30ff 	mov.w	r0, #4294967295
 8011424:	e78e      	b.n	8011344 <__sflush_r+0x1c>
 8011426:	4407      	add	r7, r0
 8011428:	eba8 0800 	sub.w	r8, r8, r0
 801142c:	e7e9      	b.n	8011402 <__sflush_r+0xda>
 801142e:	bf00      	nop
 8011430:	dfbffffe 	.word	0xdfbffffe

08011434 <_fflush_r>:
 8011434:	b538      	push	{r3, r4, r5, lr}
 8011436:	690b      	ldr	r3, [r1, #16]
 8011438:	4605      	mov	r5, r0
 801143a:	460c      	mov	r4, r1
 801143c:	b913      	cbnz	r3, 8011444 <_fflush_r+0x10>
 801143e:	2500      	movs	r5, #0
 8011440:	4628      	mov	r0, r5
 8011442:	bd38      	pop	{r3, r4, r5, pc}
 8011444:	b118      	cbz	r0, 801144e <_fflush_r+0x1a>
 8011446:	6a03      	ldr	r3, [r0, #32]
 8011448:	b90b      	cbnz	r3, 801144e <_fflush_r+0x1a>
 801144a:	f000 f8a9 	bl	80115a0 <__sinit>
 801144e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011452:	2b00      	cmp	r3, #0
 8011454:	d0f3      	beq.n	801143e <_fflush_r+0xa>
 8011456:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011458:	07d0      	lsls	r0, r2, #31
 801145a:	d404      	bmi.n	8011466 <_fflush_r+0x32>
 801145c:	0599      	lsls	r1, r3, #22
 801145e:	d402      	bmi.n	8011466 <_fflush_r+0x32>
 8011460:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011462:	f000 fb59 	bl	8011b18 <__retarget_lock_acquire_recursive>
 8011466:	4628      	mov	r0, r5
 8011468:	4621      	mov	r1, r4
 801146a:	f7ff ff5d 	bl	8011328 <__sflush_r>
 801146e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011470:	07da      	lsls	r2, r3, #31
 8011472:	4605      	mov	r5, r0
 8011474:	d4e4      	bmi.n	8011440 <_fflush_r+0xc>
 8011476:	89a3      	ldrh	r3, [r4, #12]
 8011478:	059b      	lsls	r3, r3, #22
 801147a:	d4e1      	bmi.n	8011440 <_fflush_r+0xc>
 801147c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801147e:	f000 fb4c 	bl	8011b1a <__retarget_lock_release_recursive>
 8011482:	e7dd      	b.n	8011440 <_fflush_r+0xc>

08011484 <fflush>:
 8011484:	4601      	mov	r1, r0
 8011486:	b920      	cbnz	r0, 8011492 <fflush+0xe>
 8011488:	4a04      	ldr	r2, [pc, #16]	; (801149c <fflush+0x18>)
 801148a:	4905      	ldr	r1, [pc, #20]	; (80114a0 <fflush+0x1c>)
 801148c:	4805      	ldr	r0, [pc, #20]	; (80114a4 <fflush+0x20>)
 801148e:	f000 b89f 	b.w	80115d0 <_fwalk_sglue>
 8011492:	4b05      	ldr	r3, [pc, #20]	; (80114a8 <fflush+0x24>)
 8011494:	6818      	ldr	r0, [r3, #0]
 8011496:	f7ff bfcd 	b.w	8011434 <_fflush_r>
 801149a:	bf00      	nop
 801149c:	24000060 	.word	0x24000060
 80114a0:	08011435 	.word	0x08011435
 80114a4:	2400006c 	.word	0x2400006c
 80114a8:	240000b8 	.word	0x240000b8

080114ac <std>:
 80114ac:	2300      	movs	r3, #0
 80114ae:	b510      	push	{r4, lr}
 80114b0:	4604      	mov	r4, r0
 80114b2:	e9c0 3300 	strd	r3, r3, [r0]
 80114b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80114ba:	6083      	str	r3, [r0, #8]
 80114bc:	8181      	strh	r1, [r0, #12]
 80114be:	6643      	str	r3, [r0, #100]	; 0x64
 80114c0:	81c2      	strh	r2, [r0, #14]
 80114c2:	6183      	str	r3, [r0, #24]
 80114c4:	4619      	mov	r1, r3
 80114c6:	2208      	movs	r2, #8
 80114c8:	305c      	adds	r0, #92	; 0x5c
 80114ca:	f000 fa4b 	bl	8011964 <memset>
 80114ce:	4b05      	ldr	r3, [pc, #20]	; (80114e4 <std+0x38>)
 80114d0:	6263      	str	r3, [r4, #36]	; 0x24
 80114d2:	4b05      	ldr	r3, [pc, #20]	; (80114e8 <std+0x3c>)
 80114d4:	62a3      	str	r3, [r4, #40]	; 0x28
 80114d6:	4b05      	ldr	r3, [pc, #20]	; (80114ec <std+0x40>)
 80114d8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80114da:	4b05      	ldr	r3, [pc, #20]	; (80114f0 <std+0x44>)
 80114dc:	6224      	str	r4, [r4, #32]
 80114de:	6323      	str	r3, [r4, #48]	; 0x30
 80114e0:	bd10      	pop	{r4, pc}
 80114e2:	bf00      	nop
 80114e4:	08011761 	.word	0x08011761
 80114e8:	08011783 	.word	0x08011783
 80114ec:	080117bb 	.word	0x080117bb
 80114f0:	080117df 	.word	0x080117df

080114f4 <stdio_exit_handler>:
 80114f4:	4a02      	ldr	r2, [pc, #8]	; (8011500 <stdio_exit_handler+0xc>)
 80114f6:	4903      	ldr	r1, [pc, #12]	; (8011504 <stdio_exit_handler+0x10>)
 80114f8:	4803      	ldr	r0, [pc, #12]	; (8011508 <stdio_exit_handler+0x14>)
 80114fa:	f000 b869 	b.w	80115d0 <_fwalk_sglue>
 80114fe:	bf00      	nop
 8011500:	24000060 	.word	0x24000060
 8011504:	08011435 	.word	0x08011435
 8011508:	2400006c 	.word	0x2400006c

0801150c <cleanup_stdio>:
 801150c:	6841      	ldr	r1, [r0, #4]
 801150e:	4b0c      	ldr	r3, [pc, #48]	; (8011540 <cleanup_stdio+0x34>)
 8011510:	4299      	cmp	r1, r3
 8011512:	b510      	push	{r4, lr}
 8011514:	4604      	mov	r4, r0
 8011516:	d001      	beq.n	801151c <cleanup_stdio+0x10>
 8011518:	f7ff ff8c 	bl	8011434 <_fflush_r>
 801151c:	68a1      	ldr	r1, [r4, #8]
 801151e:	4b09      	ldr	r3, [pc, #36]	; (8011544 <cleanup_stdio+0x38>)
 8011520:	4299      	cmp	r1, r3
 8011522:	d002      	beq.n	801152a <cleanup_stdio+0x1e>
 8011524:	4620      	mov	r0, r4
 8011526:	f7ff ff85 	bl	8011434 <_fflush_r>
 801152a:	68e1      	ldr	r1, [r4, #12]
 801152c:	4b06      	ldr	r3, [pc, #24]	; (8011548 <cleanup_stdio+0x3c>)
 801152e:	4299      	cmp	r1, r3
 8011530:	d004      	beq.n	801153c <cleanup_stdio+0x30>
 8011532:	4620      	mov	r0, r4
 8011534:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011538:	f7ff bf7c 	b.w	8011434 <_fflush_r>
 801153c:	bd10      	pop	{r4, pc}
 801153e:	bf00      	nop
 8011540:	24011bb8 	.word	0x24011bb8
 8011544:	24011c20 	.word	0x24011c20
 8011548:	24011c88 	.word	0x24011c88

0801154c <global_stdio_init.part.0>:
 801154c:	b510      	push	{r4, lr}
 801154e:	4b0b      	ldr	r3, [pc, #44]	; (801157c <global_stdio_init.part.0+0x30>)
 8011550:	4c0b      	ldr	r4, [pc, #44]	; (8011580 <global_stdio_init.part.0+0x34>)
 8011552:	4a0c      	ldr	r2, [pc, #48]	; (8011584 <global_stdio_init.part.0+0x38>)
 8011554:	601a      	str	r2, [r3, #0]
 8011556:	4620      	mov	r0, r4
 8011558:	2200      	movs	r2, #0
 801155a:	2104      	movs	r1, #4
 801155c:	f7ff ffa6 	bl	80114ac <std>
 8011560:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8011564:	2201      	movs	r2, #1
 8011566:	2109      	movs	r1, #9
 8011568:	f7ff ffa0 	bl	80114ac <std>
 801156c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8011570:	2202      	movs	r2, #2
 8011572:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011576:	2112      	movs	r1, #18
 8011578:	f7ff bf98 	b.w	80114ac <std>
 801157c:	24011cf0 	.word	0x24011cf0
 8011580:	24011bb8 	.word	0x24011bb8
 8011584:	080114f5 	.word	0x080114f5

08011588 <__sfp_lock_acquire>:
 8011588:	4801      	ldr	r0, [pc, #4]	; (8011590 <__sfp_lock_acquire+0x8>)
 801158a:	f000 bac5 	b.w	8011b18 <__retarget_lock_acquire_recursive>
 801158e:	bf00      	nop
 8011590:	24011cf9 	.word	0x24011cf9

08011594 <__sfp_lock_release>:
 8011594:	4801      	ldr	r0, [pc, #4]	; (801159c <__sfp_lock_release+0x8>)
 8011596:	f000 bac0 	b.w	8011b1a <__retarget_lock_release_recursive>
 801159a:	bf00      	nop
 801159c:	24011cf9 	.word	0x24011cf9

080115a0 <__sinit>:
 80115a0:	b510      	push	{r4, lr}
 80115a2:	4604      	mov	r4, r0
 80115a4:	f7ff fff0 	bl	8011588 <__sfp_lock_acquire>
 80115a8:	6a23      	ldr	r3, [r4, #32]
 80115aa:	b11b      	cbz	r3, 80115b4 <__sinit+0x14>
 80115ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80115b0:	f7ff bff0 	b.w	8011594 <__sfp_lock_release>
 80115b4:	4b04      	ldr	r3, [pc, #16]	; (80115c8 <__sinit+0x28>)
 80115b6:	6223      	str	r3, [r4, #32]
 80115b8:	4b04      	ldr	r3, [pc, #16]	; (80115cc <__sinit+0x2c>)
 80115ba:	681b      	ldr	r3, [r3, #0]
 80115bc:	2b00      	cmp	r3, #0
 80115be:	d1f5      	bne.n	80115ac <__sinit+0xc>
 80115c0:	f7ff ffc4 	bl	801154c <global_stdio_init.part.0>
 80115c4:	e7f2      	b.n	80115ac <__sinit+0xc>
 80115c6:	bf00      	nop
 80115c8:	0801150d 	.word	0x0801150d
 80115cc:	24011cf0 	.word	0x24011cf0

080115d0 <_fwalk_sglue>:
 80115d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80115d4:	4607      	mov	r7, r0
 80115d6:	4688      	mov	r8, r1
 80115d8:	4614      	mov	r4, r2
 80115da:	2600      	movs	r6, #0
 80115dc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80115e0:	f1b9 0901 	subs.w	r9, r9, #1
 80115e4:	d505      	bpl.n	80115f2 <_fwalk_sglue+0x22>
 80115e6:	6824      	ldr	r4, [r4, #0]
 80115e8:	2c00      	cmp	r4, #0
 80115ea:	d1f7      	bne.n	80115dc <_fwalk_sglue+0xc>
 80115ec:	4630      	mov	r0, r6
 80115ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80115f2:	89ab      	ldrh	r3, [r5, #12]
 80115f4:	2b01      	cmp	r3, #1
 80115f6:	d907      	bls.n	8011608 <_fwalk_sglue+0x38>
 80115f8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80115fc:	3301      	adds	r3, #1
 80115fe:	d003      	beq.n	8011608 <_fwalk_sglue+0x38>
 8011600:	4629      	mov	r1, r5
 8011602:	4638      	mov	r0, r7
 8011604:	47c0      	blx	r8
 8011606:	4306      	orrs	r6, r0
 8011608:	3568      	adds	r5, #104	; 0x68
 801160a:	e7e9      	b.n	80115e0 <_fwalk_sglue+0x10>

0801160c <iprintf>:
 801160c:	b40f      	push	{r0, r1, r2, r3}
 801160e:	b507      	push	{r0, r1, r2, lr}
 8011610:	4906      	ldr	r1, [pc, #24]	; (801162c <iprintf+0x20>)
 8011612:	ab04      	add	r3, sp, #16
 8011614:	6808      	ldr	r0, [r1, #0]
 8011616:	f853 2b04 	ldr.w	r2, [r3], #4
 801161a:	6881      	ldr	r1, [r0, #8]
 801161c:	9301      	str	r3, [sp, #4]
 801161e:	f000 fd2b 	bl	8012078 <_vfiprintf_r>
 8011622:	b003      	add	sp, #12
 8011624:	f85d eb04 	ldr.w	lr, [sp], #4
 8011628:	b004      	add	sp, #16
 801162a:	4770      	bx	lr
 801162c:	240000b8 	.word	0x240000b8

08011630 <putchar>:
 8011630:	4b02      	ldr	r3, [pc, #8]	; (801163c <putchar+0xc>)
 8011632:	4601      	mov	r1, r0
 8011634:	6818      	ldr	r0, [r3, #0]
 8011636:	6882      	ldr	r2, [r0, #8]
 8011638:	f001 b83c 	b.w	80126b4 <_putc_r>
 801163c:	240000b8 	.word	0x240000b8

08011640 <_puts_r>:
 8011640:	6a03      	ldr	r3, [r0, #32]
 8011642:	b570      	push	{r4, r5, r6, lr}
 8011644:	6884      	ldr	r4, [r0, #8]
 8011646:	4605      	mov	r5, r0
 8011648:	460e      	mov	r6, r1
 801164a:	b90b      	cbnz	r3, 8011650 <_puts_r+0x10>
 801164c:	f7ff ffa8 	bl	80115a0 <__sinit>
 8011650:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011652:	07db      	lsls	r3, r3, #31
 8011654:	d405      	bmi.n	8011662 <_puts_r+0x22>
 8011656:	89a3      	ldrh	r3, [r4, #12]
 8011658:	0598      	lsls	r0, r3, #22
 801165a:	d402      	bmi.n	8011662 <_puts_r+0x22>
 801165c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801165e:	f000 fa5b 	bl	8011b18 <__retarget_lock_acquire_recursive>
 8011662:	89a3      	ldrh	r3, [r4, #12]
 8011664:	0719      	lsls	r1, r3, #28
 8011666:	d513      	bpl.n	8011690 <_puts_r+0x50>
 8011668:	6923      	ldr	r3, [r4, #16]
 801166a:	b18b      	cbz	r3, 8011690 <_puts_r+0x50>
 801166c:	3e01      	subs	r6, #1
 801166e:	68a3      	ldr	r3, [r4, #8]
 8011670:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8011674:	3b01      	subs	r3, #1
 8011676:	60a3      	str	r3, [r4, #8]
 8011678:	b9e9      	cbnz	r1, 80116b6 <_puts_r+0x76>
 801167a:	2b00      	cmp	r3, #0
 801167c:	da2e      	bge.n	80116dc <_puts_r+0x9c>
 801167e:	4622      	mov	r2, r4
 8011680:	210a      	movs	r1, #10
 8011682:	4628      	mov	r0, r5
 8011684:	f000 f8af 	bl	80117e6 <__swbuf_r>
 8011688:	3001      	adds	r0, #1
 801168a:	d007      	beq.n	801169c <_puts_r+0x5c>
 801168c:	250a      	movs	r5, #10
 801168e:	e007      	b.n	80116a0 <_puts_r+0x60>
 8011690:	4621      	mov	r1, r4
 8011692:	4628      	mov	r0, r5
 8011694:	f000 f8e4 	bl	8011860 <__swsetup_r>
 8011698:	2800      	cmp	r0, #0
 801169a:	d0e7      	beq.n	801166c <_puts_r+0x2c>
 801169c:	f04f 35ff 	mov.w	r5, #4294967295
 80116a0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80116a2:	07da      	lsls	r2, r3, #31
 80116a4:	d405      	bmi.n	80116b2 <_puts_r+0x72>
 80116a6:	89a3      	ldrh	r3, [r4, #12]
 80116a8:	059b      	lsls	r3, r3, #22
 80116aa:	d402      	bmi.n	80116b2 <_puts_r+0x72>
 80116ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80116ae:	f000 fa34 	bl	8011b1a <__retarget_lock_release_recursive>
 80116b2:	4628      	mov	r0, r5
 80116b4:	bd70      	pop	{r4, r5, r6, pc}
 80116b6:	2b00      	cmp	r3, #0
 80116b8:	da04      	bge.n	80116c4 <_puts_r+0x84>
 80116ba:	69a2      	ldr	r2, [r4, #24]
 80116bc:	429a      	cmp	r2, r3
 80116be:	dc06      	bgt.n	80116ce <_puts_r+0x8e>
 80116c0:	290a      	cmp	r1, #10
 80116c2:	d004      	beq.n	80116ce <_puts_r+0x8e>
 80116c4:	6823      	ldr	r3, [r4, #0]
 80116c6:	1c5a      	adds	r2, r3, #1
 80116c8:	6022      	str	r2, [r4, #0]
 80116ca:	7019      	strb	r1, [r3, #0]
 80116cc:	e7cf      	b.n	801166e <_puts_r+0x2e>
 80116ce:	4622      	mov	r2, r4
 80116d0:	4628      	mov	r0, r5
 80116d2:	f000 f888 	bl	80117e6 <__swbuf_r>
 80116d6:	3001      	adds	r0, #1
 80116d8:	d1c9      	bne.n	801166e <_puts_r+0x2e>
 80116da:	e7df      	b.n	801169c <_puts_r+0x5c>
 80116dc:	6823      	ldr	r3, [r4, #0]
 80116de:	250a      	movs	r5, #10
 80116e0:	1c5a      	adds	r2, r3, #1
 80116e2:	6022      	str	r2, [r4, #0]
 80116e4:	701d      	strb	r5, [r3, #0]
 80116e6:	e7db      	b.n	80116a0 <_puts_r+0x60>

080116e8 <puts>:
 80116e8:	4b02      	ldr	r3, [pc, #8]	; (80116f4 <puts+0xc>)
 80116ea:	4601      	mov	r1, r0
 80116ec:	6818      	ldr	r0, [r3, #0]
 80116ee:	f7ff bfa7 	b.w	8011640 <_puts_r>
 80116f2:	bf00      	nop
 80116f4:	240000b8 	.word	0x240000b8

080116f8 <sniprintf>:
 80116f8:	b40c      	push	{r2, r3}
 80116fa:	b530      	push	{r4, r5, lr}
 80116fc:	4b17      	ldr	r3, [pc, #92]	; (801175c <sniprintf+0x64>)
 80116fe:	1e0c      	subs	r4, r1, #0
 8011700:	681d      	ldr	r5, [r3, #0]
 8011702:	b09d      	sub	sp, #116	; 0x74
 8011704:	da08      	bge.n	8011718 <sniprintf+0x20>
 8011706:	238b      	movs	r3, #139	; 0x8b
 8011708:	602b      	str	r3, [r5, #0]
 801170a:	f04f 30ff 	mov.w	r0, #4294967295
 801170e:	b01d      	add	sp, #116	; 0x74
 8011710:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011714:	b002      	add	sp, #8
 8011716:	4770      	bx	lr
 8011718:	f44f 7302 	mov.w	r3, #520	; 0x208
 801171c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8011720:	bf14      	ite	ne
 8011722:	f104 33ff 	addne.w	r3, r4, #4294967295
 8011726:	4623      	moveq	r3, r4
 8011728:	9304      	str	r3, [sp, #16]
 801172a:	9307      	str	r3, [sp, #28]
 801172c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011730:	9002      	str	r0, [sp, #8]
 8011732:	9006      	str	r0, [sp, #24]
 8011734:	f8ad 3016 	strh.w	r3, [sp, #22]
 8011738:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801173a:	ab21      	add	r3, sp, #132	; 0x84
 801173c:	a902      	add	r1, sp, #8
 801173e:	4628      	mov	r0, r5
 8011740:	9301      	str	r3, [sp, #4]
 8011742:	f000 fb71 	bl	8011e28 <_svfiprintf_r>
 8011746:	1c43      	adds	r3, r0, #1
 8011748:	bfbc      	itt	lt
 801174a:	238b      	movlt	r3, #139	; 0x8b
 801174c:	602b      	strlt	r3, [r5, #0]
 801174e:	2c00      	cmp	r4, #0
 8011750:	d0dd      	beq.n	801170e <sniprintf+0x16>
 8011752:	9b02      	ldr	r3, [sp, #8]
 8011754:	2200      	movs	r2, #0
 8011756:	701a      	strb	r2, [r3, #0]
 8011758:	e7d9      	b.n	801170e <sniprintf+0x16>
 801175a:	bf00      	nop
 801175c:	240000b8 	.word	0x240000b8

08011760 <__sread>:
 8011760:	b510      	push	{r4, lr}
 8011762:	460c      	mov	r4, r1
 8011764:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011768:	f000 f98e 	bl	8011a88 <_read_r>
 801176c:	2800      	cmp	r0, #0
 801176e:	bfab      	itete	ge
 8011770:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011772:	89a3      	ldrhlt	r3, [r4, #12]
 8011774:	181b      	addge	r3, r3, r0
 8011776:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801177a:	bfac      	ite	ge
 801177c:	6563      	strge	r3, [r4, #84]	; 0x54
 801177e:	81a3      	strhlt	r3, [r4, #12]
 8011780:	bd10      	pop	{r4, pc}

08011782 <__swrite>:
 8011782:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011786:	461f      	mov	r7, r3
 8011788:	898b      	ldrh	r3, [r1, #12]
 801178a:	05db      	lsls	r3, r3, #23
 801178c:	4605      	mov	r5, r0
 801178e:	460c      	mov	r4, r1
 8011790:	4616      	mov	r6, r2
 8011792:	d505      	bpl.n	80117a0 <__swrite+0x1e>
 8011794:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011798:	2302      	movs	r3, #2
 801179a:	2200      	movs	r2, #0
 801179c:	f000 f962 	bl	8011a64 <_lseek_r>
 80117a0:	89a3      	ldrh	r3, [r4, #12]
 80117a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80117a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80117aa:	81a3      	strh	r3, [r4, #12]
 80117ac:	4632      	mov	r2, r6
 80117ae:	463b      	mov	r3, r7
 80117b0:	4628      	mov	r0, r5
 80117b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80117b6:	f000 b979 	b.w	8011aac <_write_r>

080117ba <__sseek>:
 80117ba:	b510      	push	{r4, lr}
 80117bc:	460c      	mov	r4, r1
 80117be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80117c2:	f000 f94f 	bl	8011a64 <_lseek_r>
 80117c6:	1c43      	adds	r3, r0, #1
 80117c8:	89a3      	ldrh	r3, [r4, #12]
 80117ca:	bf15      	itete	ne
 80117cc:	6560      	strne	r0, [r4, #84]	; 0x54
 80117ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80117d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80117d6:	81a3      	strheq	r3, [r4, #12]
 80117d8:	bf18      	it	ne
 80117da:	81a3      	strhne	r3, [r4, #12]
 80117dc:	bd10      	pop	{r4, pc}

080117de <__sclose>:
 80117de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80117e2:	f000 b8d9 	b.w	8011998 <_close_r>

080117e6 <__swbuf_r>:
 80117e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80117e8:	460e      	mov	r6, r1
 80117ea:	4614      	mov	r4, r2
 80117ec:	4605      	mov	r5, r0
 80117ee:	b118      	cbz	r0, 80117f8 <__swbuf_r+0x12>
 80117f0:	6a03      	ldr	r3, [r0, #32]
 80117f2:	b90b      	cbnz	r3, 80117f8 <__swbuf_r+0x12>
 80117f4:	f7ff fed4 	bl	80115a0 <__sinit>
 80117f8:	69a3      	ldr	r3, [r4, #24]
 80117fa:	60a3      	str	r3, [r4, #8]
 80117fc:	89a3      	ldrh	r3, [r4, #12]
 80117fe:	071a      	lsls	r2, r3, #28
 8011800:	d525      	bpl.n	801184e <__swbuf_r+0x68>
 8011802:	6923      	ldr	r3, [r4, #16]
 8011804:	b31b      	cbz	r3, 801184e <__swbuf_r+0x68>
 8011806:	6823      	ldr	r3, [r4, #0]
 8011808:	6922      	ldr	r2, [r4, #16]
 801180a:	1a98      	subs	r0, r3, r2
 801180c:	6963      	ldr	r3, [r4, #20]
 801180e:	b2f6      	uxtb	r6, r6
 8011810:	4283      	cmp	r3, r0
 8011812:	4637      	mov	r7, r6
 8011814:	dc04      	bgt.n	8011820 <__swbuf_r+0x3a>
 8011816:	4621      	mov	r1, r4
 8011818:	4628      	mov	r0, r5
 801181a:	f7ff fe0b 	bl	8011434 <_fflush_r>
 801181e:	b9e0      	cbnz	r0, 801185a <__swbuf_r+0x74>
 8011820:	68a3      	ldr	r3, [r4, #8]
 8011822:	3b01      	subs	r3, #1
 8011824:	60a3      	str	r3, [r4, #8]
 8011826:	6823      	ldr	r3, [r4, #0]
 8011828:	1c5a      	adds	r2, r3, #1
 801182a:	6022      	str	r2, [r4, #0]
 801182c:	701e      	strb	r6, [r3, #0]
 801182e:	6962      	ldr	r2, [r4, #20]
 8011830:	1c43      	adds	r3, r0, #1
 8011832:	429a      	cmp	r2, r3
 8011834:	d004      	beq.n	8011840 <__swbuf_r+0x5a>
 8011836:	89a3      	ldrh	r3, [r4, #12]
 8011838:	07db      	lsls	r3, r3, #31
 801183a:	d506      	bpl.n	801184a <__swbuf_r+0x64>
 801183c:	2e0a      	cmp	r6, #10
 801183e:	d104      	bne.n	801184a <__swbuf_r+0x64>
 8011840:	4621      	mov	r1, r4
 8011842:	4628      	mov	r0, r5
 8011844:	f7ff fdf6 	bl	8011434 <_fflush_r>
 8011848:	b938      	cbnz	r0, 801185a <__swbuf_r+0x74>
 801184a:	4638      	mov	r0, r7
 801184c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801184e:	4621      	mov	r1, r4
 8011850:	4628      	mov	r0, r5
 8011852:	f000 f805 	bl	8011860 <__swsetup_r>
 8011856:	2800      	cmp	r0, #0
 8011858:	d0d5      	beq.n	8011806 <__swbuf_r+0x20>
 801185a:	f04f 37ff 	mov.w	r7, #4294967295
 801185e:	e7f4      	b.n	801184a <__swbuf_r+0x64>

08011860 <__swsetup_r>:
 8011860:	b538      	push	{r3, r4, r5, lr}
 8011862:	4b2a      	ldr	r3, [pc, #168]	; (801190c <__swsetup_r+0xac>)
 8011864:	4605      	mov	r5, r0
 8011866:	6818      	ldr	r0, [r3, #0]
 8011868:	460c      	mov	r4, r1
 801186a:	b118      	cbz	r0, 8011874 <__swsetup_r+0x14>
 801186c:	6a03      	ldr	r3, [r0, #32]
 801186e:	b90b      	cbnz	r3, 8011874 <__swsetup_r+0x14>
 8011870:	f7ff fe96 	bl	80115a0 <__sinit>
 8011874:	89a3      	ldrh	r3, [r4, #12]
 8011876:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801187a:	0718      	lsls	r0, r3, #28
 801187c:	d422      	bmi.n	80118c4 <__swsetup_r+0x64>
 801187e:	06d9      	lsls	r1, r3, #27
 8011880:	d407      	bmi.n	8011892 <__swsetup_r+0x32>
 8011882:	2309      	movs	r3, #9
 8011884:	602b      	str	r3, [r5, #0]
 8011886:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801188a:	81a3      	strh	r3, [r4, #12]
 801188c:	f04f 30ff 	mov.w	r0, #4294967295
 8011890:	e034      	b.n	80118fc <__swsetup_r+0x9c>
 8011892:	0758      	lsls	r0, r3, #29
 8011894:	d512      	bpl.n	80118bc <__swsetup_r+0x5c>
 8011896:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011898:	b141      	cbz	r1, 80118ac <__swsetup_r+0x4c>
 801189a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801189e:	4299      	cmp	r1, r3
 80118a0:	d002      	beq.n	80118a8 <__swsetup_r+0x48>
 80118a2:	4628      	mov	r0, r5
 80118a4:	f000 f966 	bl	8011b74 <_free_r>
 80118a8:	2300      	movs	r3, #0
 80118aa:	6363      	str	r3, [r4, #52]	; 0x34
 80118ac:	89a3      	ldrh	r3, [r4, #12]
 80118ae:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80118b2:	81a3      	strh	r3, [r4, #12]
 80118b4:	2300      	movs	r3, #0
 80118b6:	6063      	str	r3, [r4, #4]
 80118b8:	6923      	ldr	r3, [r4, #16]
 80118ba:	6023      	str	r3, [r4, #0]
 80118bc:	89a3      	ldrh	r3, [r4, #12]
 80118be:	f043 0308 	orr.w	r3, r3, #8
 80118c2:	81a3      	strh	r3, [r4, #12]
 80118c4:	6923      	ldr	r3, [r4, #16]
 80118c6:	b94b      	cbnz	r3, 80118dc <__swsetup_r+0x7c>
 80118c8:	89a3      	ldrh	r3, [r4, #12]
 80118ca:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80118ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80118d2:	d003      	beq.n	80118dc <__swsetup_r+0x7c>
 80118d4:	4621      	mov	r1, r4
 80118d6:	4628      	mov	r0, r5
 80118d8:	f000 feb0 	bl	801263c <__smakebuf_r>
 80118dc:	89a0      	ldrh	r0, [r4, #12]
 80118de:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80118e2:	f010 0301 	ands.w	r3, r0, #1
 80118e6:	d00a      	beq.n	80118fe <__swsetup_r+0x9e>
 80118e8:	2300      	movs	r3, #0
 80118ea:	60a3      	str	r3, [r4, #8]
 80118ec:	6963      	ldr	r3, [r4, #20]
 80118ee:	425b      	negs	r3, r3
 80118f0:	61a3      	str	r3, [r4, #24]
 80118f2:	6923      	ldr	r3, [r4, #16]
 80118f4:	b943      	cbnz	r3, 8011908 <__swsetup_r+0xa8>
 80118f6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80118fa:	d1c4      	bne.n	8011886 <__swsetup_r+0x26>
 80118fc:	bd38      	pop	{r3, r4, r5, pc}
 80118fe:	0781      	lsls	r1, r0, #30
 8011900:	bf58      	it	pl
 8011902:	6963      	ldrpl	r3, [r4, #20]
 8011904:	60a3      	str	r3, [r4, #8]
 8011906:	e7f4      	b.n	80118f2 <__swsetup_r+0x92>
 8011908:	2000      	movs	r0, #0
 801190a:	e7f7      	b.n	80118fc <__swsetup_r+0x9c>
 801190c:	240000b8 	.word	0x240000b8

08011910 <memcmp>:
 8011910:	b510      	push	{r4, lr}
 8011912:	3901      	subs	r1, #1
 8011914:	4402      	add	r2, r0
 8011916:	4290      	cmp	r0, r2
 8011918:	d101      	bne.n	801191e <memcmp+0xe>
 801191a:	2000      	movs	r0, #0
 801191c:	e005      	b.n	801192a <memcmp+0x1a>
 801191e:	7803      	ldrb	r3, [r0, #0]
 8011920:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8011924:	42a3      	cmp	r3, r4
 8011926:	d001      	beq.n	801192c <memcmp+0x1c>
 8011928:	1b18      	subs	r0, r3, r4
 801192a:	bd10      	pop	{r4, pc}
 801192c:	3001      	adds	r0, #1
 801192e:	e7f2      	b.n	8011916 <memcmp+0x6>

08011930 <memmove>:
 8011930:	4288      	cmp	r0, r1
 8011932:	b510      	push	{r4, lr}
 8011934:	eb01 0402 	add.w	r4, r1, r2
 8011938:	d902      	bls.n	8011940 <memmove+0x10>
 801193a:	4284      	cmp	r4, r0
 801193c:	4623      	mov	r3, r4
 801193e:	d807      	bhi.n	8011950 <memmove+0x20>
 8011940:	1e43      	subs	r3, r0, #1
 8011942:	42a1      	cmp	r1, r4
 8011944:	d008      	beq.n	8011958 <memmove+0x28>
 8011946:	f811 2b01 	ldrb.w	r2, [r1], #1
 801194a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801194e:	e7f8      	b.n	8011942 <memmove+0x12>
 8011950:	4402      	add	r2, r0
 8011952:	4601      	mov	r1, r0
 8011954:	428a      	cmp	r2, r1
 8011956:	d100      	bne.n	801195a <memmove+0x2a>
 8011958:	bd10      	pop	{r4, pc}
 801195a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801195e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011962:	e7f7      	b.n	8011954 <memmove+0x24>

08011964 <memset>:
 8011964:	4402      	add	r2, r0
 8011966:	4603      	mov	r3, r0
 8011968:	4293      	cmp	r3, r2
 801196a:	d100      	bne.n	801196e <memset+0xa>
 801196c:	4770      	bx	lr
 801196e:	f803 1b01 	strb.w	r1, [r3], #1
 8011972:	e7f9      	b.n	8011968 <memset+0x4>

08011974 <strncmp>:
 8011974:	b510      	push	{r4, lr}
 8011976:	b16a      	cbz	r2, 8011994 <strncmp+0x20>
 8011978:	3901      	subs	r1, #1
 801197a:	1884      	adds	r4, r0, r2
 801197c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011980:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8011984:	429a      	cmp	r2, r3
 8011986:	d103      	bne.n	8011990 <strncmp+0x1c>
 8011988:	42a0      	cmp	r0, r4
 801198a:	d001      	beq.n	8011990 <strncmp+0x1c>
 801198c:	2a00      	cmp	r2, #0
 801198e:	d1f5      	bne.n	801197c <strncmp+0x8>
 8011990:	1ad0      	subs	r0, r2, r3
 8011992:	bd10      	pop	{r4, pc}
 8011994:	4610      	mov	r0, r2
 8011996:	e7fc      	b.n	8011992 <strncmp+0x1e>

08011998 <_close_r>:
 8011998:	b538      	push	{r3, r4, r5, lr}
 801199a:	4d06      	ldr	r5, [pc, #24]	; (80119b4 <_close_r+0x1c>)
 801199c:	2300      	movs	r3, #0
 801199e:	4604      	mov	r4, r0
 80119a0:	4608      	mov	r0, r1
 80119a2:	602b      	str	r3, [r5, #0]
 80119a4:	f7ef fe3c 	bl	8001620 <_close>
 80119a8:	1c43      	adds	r3, r0, #1
 80119aa:	d102      	bne.n	80119b2 <_close_r+0x1a>
 80119ac:	682b      	ldr	r3, [r5, #0]
 80119ae:	b103      	cbz	r3, 80119b2 <_close_r+0x1a>
 80119b0:	6023      	str	r3, [r4, #0]
 80119b2:	bd38      	pop	{r3, r4, r5, pc}
 80119b4:	24011cf4 	.word	0x24011cf4

080119b8 <_reclaim_reent>:
 80119b8:	4b29      	ldr	r3, [pc, #164]	; (8011a60 <_reclaim_reent+0xa8>)
 80119ba:	681b      	ldr	r3, [r3, #0]
 80119bc:	4283      	cmp	r3, r0
 80119be:	b570      	push	{r4, r5, r6, lr}
 80119c0:	4604      	mov	r4, r0
 80119c2:	d04b      	beq.n	8011a5c <_reclaim_reent+0xa4>
 80119c4:	69c3      	ldr	r3, [r0, #28]
 80119c6:	b143      	cbz	r3, 80119da <_reclaim_reent+0x22>
 80119c8:	68db      	ldr	r3, [r3, #12]
 80119ca:	2b00      	cmp	r3, #0
 80119cc:	d144      	bne.n	8011a58 <_reclaim_reent+0xa0>
 80119ce:	69e3      	ldr	r3, [r4, #28]
 80119d0:	6819      	ldr	r1, [r3, #0]
 80119d2:	b111      	cbz	r1, 80119da <_reclaim_reent+0x22>
 80119d4:	4620      	mov	r0, r4
 80119d6:	f000 f8cd 	bl	8011b74 <_free_r>
 80119da:	6961      	ldr	r1, [r4, #20]
 80119dc:	b111      	cbz	r1, 80119e4 <_reclaim_reent+0x2c>
 80119de:	4620      	mov	r0, r4
 80119e0:	f000 f8c8 	bl	8011b74 <_free_r>
 80119e4:	69e1      	ldr	r1, [r4, #28]
 80119e6:	b111      	cbz	r1, 80119ee <_reclaim_reent+0x36>
 80119e8:	4620      	mov	r0, r4
 80119ea:	f000 f8c3 	bl	8011b74 <_free_r>
 80119ee:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80119f0:	b111      	cbz	r1, 80119f8 <_reclaim_reent+0x40>
 80119f2:	4620      	mov	r0, r4
 80119f4:	f000 f8be 	bl	8011b74 <_free_r>
 80119f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80119fa:	b111      	cbz	r1, 8011a02 <_reclaim_reent+0x4a>
 80119fc:	4620      	mov	r0, r4
 80119fe:	f000 f8b9 	bl	8011b74 <_free_r>
 8011a02:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8011a04:	b111      	cbz	r1, 8011a0c <_reclaim_reent+0x54>
 8011a06:	4620      	mov	r0, r4
 8011a08:	f000 f8b4 	bl	8011b74 <_free_r>
 8011a0c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8011a0e:	b111      	cbz	r1, 8011a16 <_reclaim_reent+0x5e>
 8011a10:	4620      	mov	r0, r4
 8011a12:	f000 f8af 	bl	8011b74 <_free_r>
 8011a16:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8011a18:	b111      	cbz	r1, 8011a20 <_reclaim_reent+0x68>
 8011a1a:	4620      	mov	r0, r4
 8011a1c:	f000 f8aa 	bl	8011b74 <_free_r>
 8011a20:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8011a22:	b111      	cbz	r1, 8011a2a <_reclaim_reent+0x72>
 8011a24:	4620      	mov	r0, r4
 8011a26:	f000 f8a5 	bl	8011b74 <_free_r>
 8011a2a:	6a23      	ldr	r3, [r4, #32]
 8011a2c:	b1b3      	cbz	r3, 8011a5c <_reclaim_reent+0xa4>
 8011a2e:	4620      	mov	r0, r4
 8011a30:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011a34:	4718      	bx	r3
 8011a36:	5949      	ldr	r1, [r1, r5]
 8011a38:	b941      	cbnz	r1, 8011a4c <_reclaim_reent+0x94>
 8011a3a:	3504      	adds	r5, #4
 8011a3c:	69e3      	ldr	r3, [r4, #28]
 8011a3e:	2d80      	cmp	r5, #128	; 0x80
 8011a40:	68d9      	ldr	r1, [r3, #12]
 8011a42:	d1f8      	bne.n	8011a36 <_reclaim_reent+0x7e>
 8011a44:	4620      	mov	r0, r4
 8011a46:	f000 f895 	bl	8011b74 <_free_r>
 8011a4a:	e7c0      	b.n	80119ce <_reclaim_reent+0x16>
 8011a4c:	680e      	ldr	r6, [r1, #0]
 8011a4e:	4620      	mov	r0, r4
 8011a50:	f000 f890 	bl	8011b74 <_free_r>
 8011a54:	4631      	mov	r1, r6
 8011a56:	e7ef      	b.n	8011a38 <_reclaim_reent+0x80>
 8011a58:	2500      	movs	r5, #0
 8011a5a:	e7ef      	b.n	8011a3c <_reclaim_reent+0x84>
 8011a5c:	bd70      	pop	{r4, r5, r6, pc}
 8011a5e:	bf00      	nop
 8011a60:	240000b8 	.word	0x240000b8

08011a64 <_lseek_r>:
 8011a64:	b538      	push	{r3, r4, r5, lr}
 8011a66:	4d07      	ldr	r5, [pc, #28]	; (8011a84 <_lseek_r+0x20>)
 8011a68:	4604      	mov	r4, r0
 8011a6a:	4608      	mov	r0, r1
 8011a6c:	4611      	mov	r1, r2
 8011a6e:	2200      	movs	r2, #0
 8011a70:	602a      	str	r2, [r5, #0]
 8011a72:	461a      	mov	r2, r3
 8011a74:	f7ef fde0 	bl	8001638 <_lseek>
 8011a78:	1c43      	adds	r3, r0, #1
 8011a7a:	d102      	bne.n	8011a82 <_lseek_r+0x1e>
 8011a7c:	682b      	ldr	r3, [r5, #0]
 8011a7e:	b103      	cbz	r3, 8011a82 <_lseek_r+0x1e>
 8011a80:	6023      	str	r3, [r4, #0]
 8011a82:	bd38      	pop	{r3, r4, r5, pc}
 8011a84:	24011cf4 	.word	0x24011cf4

08011a88 <_read_r>:
 8011a88:	b538      	push	{r3, r4, r5, lr}
 8011a8a:	4d07      	ldr	r5, [pc, #28]	; (8011aa8 <_read_r+0x20>)
 8011a8c:	4604      	mov	r4, r0
 8011a8e:	4608      	mov	r0, r1
 8011a90:	4611      	mov	r1, r2
 8011a92:	2200      	movs	r2, #0
 8011a94:	602a      	str	r2, [r5, #0]
 8011a96:	461a      	mov	r2, r3
 8011a98:	f7ef fdb4 	bl	8001604 <_read>
 8011a9c:	1c43      	adds	r3, r0, #1
 8011a9e:	d102      	bne.n	8011aa6 <_read_r+0x1e>
 8011aa0:	682b      	ldr	r3, [r5, #0]
 8011aa2:	b103      	cbz	r3, 8011aa6 <_read_r+0x1e>
 8011aa4:	6023      	str	r3, [r4, #0]
 8011aa6:	bd38      	pop	{r3, r4, r5, pc}
 8011aa8:	24011cf4 	.word	0x24011cf4

08011aac <_write_r>:
 8011aac:	b538      	push	{r3, r4, r5, lr}
 8011aae:	4d07      	ldr	r5, [pc, #28]	; (8011acc <_write_r+0x20>)
 8011ab0:	4604      	mov	r4, r0
 8011ab2:	4608      	mov	r0, r1
 8011ab4:	4611      	mov	r1, r2
 8011ab6:	2200      	movs	r2, #0
 8011ab8:	602a      	str	r2, [r5, #0]
 8011aba:	461a      	mov	r2, r3
 8011abc:	f7ff f894 	bl	8010be8 <_write>
 8011ac0:	1c43      	adds	r3, r0, #1
 8011ac2:	d102      	bne.n	8011aca <_write_r+0x1e>
 8011ac4:	682b      	ldr	r3, [r5, #0]
 8011ac6:	b103      	cbz	r3, 8011aca <_write_r+0x1e>
 8011ac8:	6023      	str	r3, [r4, #0]
 8011aca:	bd38      	pop	{r3, r4, r5, pc}
 8011acc:	24011cf4 	.word	0x24011cf4

08011ad0 <__libc_init_array>:
 8011ad0:	b570      	push	{r4, r5, r6, lr}
 8011ad2:	4d0d      	ldr	r5, [pc, #52]	; (8011b08 <__libc_init_array+0x38>)
 8011ad4:	4c0d      	ldr	r4, [pc, #52]	; (8011b0c <__libc_init_array+0x3c>)
 8011ad6:	1b64      	subs	r4, r4, r5
 8011ad8:	10a4      	asrs	r4, r4, #2
 8011ada:	2600      	movs	r6, #0
 8011adc:	42a6      	cmp	r6, r4
 8011ade:	d109      	bne.n	8011af4 <__libc_init_array+0x24>
 8011ae0:	4d0b      	ldr	r5, [pc, #44]	; (8011b10 <__libc_init_array+0x40>)
 8011ae2:	4c0c      	ldr	r4, [pc, #48]	; (8011b14 <__libc_init_array+0x44>)
 8011ae4:	f000 fece 	bl	8012884 <_init>
 8011ae8:	1b64      	subs	r4, r4, r5
 8011aea:	10a4      	asrs	r4, r4, #2
 8011aec:	2600      	movs	r6, #0
 8011aee:	42a6      	cmp	r6, r4
 8011af0:	d105      	bne.n	8011afe <__libc_init_array+0x2e>
 8011af2:	bd70      	pop	{r4, r5, r6, pc}
 8011af4:	f855 3b04 	ldr.w	r3, [r5], #4
 8011af8:	4798      	blx	r3
 8011afa:	3601      	adds	r6, #1
 8011afc:	e7ee      	b.n	8011adc <__libc_init_array+0xc>
 8011afe:	f855 3b04 	ldr.w	r3, [r5], #4
 8011b02:	4798      	blx	r3
 8011b04:	3601      	adds	r6, #1
 8011b06:	e7f2      	b.n	8011aee <__libc_init_array+0x1e>
 8011b08:	080155c4 	.word	0x080155c4
 8011b0c:	080155c4 	.word	0x080155c4
 8011b10:	080155c4 	.word	0x080155c4
 8011b14:	080155c8 	.word	0x080155c8

08011b18 <__retarget_lock_acquire_recursive>:
 8011b18:	4770      	bx	lr

08011b1a <__retarget_lock_release_recursive>:
 8011b1a:	4770      	bx	lr

08011b1c <memcpy>:
 8011b1c:	440a      	add	r2, r1
 8011b1e:	4291      	cmp	r1, r2
 8011b20:	f100 33ff 	add.w	r3, r0, #4294967295
 8011b24:	d100      	bne.n	8011b28 <memcpy+0xc>
 8011b26:	4770      	bx	lr
 8011b28:	b510      	push	{r4, lr}
 8011b2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011b2e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011b32:	4291      	cmp	r1, r2
 8011b34:	d1f9      	bne.n	8011b2a <memcpy+0xe>
 8011b36:	bd10      	pop	{r4, pc}

08011b38 <__assert_func>:
 8011b38:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011b3a:	4614      	mov	r4, r2
 8011b3c:	461a      	mov	r2, r3
 8011b3e:	4b09      	ldr	r3, [pc, #36]	; (8011b64 <__assert_func+0x2c>)
 8011b40:	681b      	ldr	r3, [r3, #0]
 8011b42:	4605      	mov	r5, r0
 8011b44:	68d8      	ldr	r0, [r3, #12]
 8011b46:	b14c      	cbz	r4, 8011b5c <__assert_func+0x24>
 8011b48:	4b07      	ldr	r3, [pc, #28]	; (8011b68 <__assert_func+0x30>)
 8011b4a:	9100      	str	r1, [sp, #0]
 8011b4c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011b50:	4906      	ldr	r1, [pc, #24]	; (8011b6c <__assert_func+0x34>)
 8011b52:	462b      	mov	r3, r5
 8011b54:	f000 fd3a 	bl	80125cc <fiprintf>
 8011b58:	f000 fe12 	bl	8012780 <abort>
 8011b5c:	4b04      	ldr	r3, [pc, #16]	; (8011b70 <__assert_func+0x38>)
 8011b5e:	461c      	mov	r4, r3
 8011b60:	e7f3      	b.n	8011b4a <__assert_func+0x12>
 8011b62:	bf00      	nop
 8011b64:	240000b8 	.word	0x240000b8
 8011b68:	08015541 	.word	0x08015541
 8011b6c:	0801554e 	.word	0x0801554e
 8011b70:	0801557c 	.word	0x0801557c

08011b74 <_free_r>:
 8011b74:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011b76:	2900      	cmp	r1, #0
 8011b78:	d044      	beq.n	8011c04 <_free_r+0x90>
 8011b7a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011b7e:	9001      	str	r0, [sp, #4]
 8011b80:	2b00      	cmp	r3, #0
 8011b82:	f1a1 0404 	sub.w	r4, r1, #4
 8011b86:	bfb8      	it	lt
 8011b88:	18e4      	addlt	r4, r4, r3
 8011b8a:	f000 f8e7 	bl	8011d5c <__malloc_lock>
 8011b8e:	4a1e      	ldr	r2, [pc, #120]	; (8011c08 <_free_r+0x94>)
 8011b90:	9801      	ldr	r0, [sp, #4]
 8011b92:	6813      	ldr	r3, [r2, #0]
 8011b94:	b933      	cbnz	r3, 8011ba4 <_free_r+0x30>
 8011b96:	6063      	str	r3, [r4, #4]
 8011b98:	6014      	str	r4, [r2, #0]
 8011b9a:	b003      	add	sp, #12
 8011b9c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011ba0:	f000 b8e2 	b.w	8011d68 <__malloc_unlock>
 8011ba4:	42a3      	cmp	r3, r4
 8011ba6:	d908      	bls.n	8011bba <_free_r+0x46>
 8011ba8:	6825      	ldr	r5, [r4, #0]
 8011baa:	1961      	adds	r1, r4, r5
 8011bac:	428b      	cmp	r3, r1
 8011bae:	bf01      	itttt	eq
 8011bb0:	6819      	ldreq	r1, [r3, #0]
 8011bb2:	685b      	ldreq	r3, [r3, #4]
 8011bb4:	1949      	addeq	r1, r1, r5
 8011bb6:	6021      	streq	r1, [r4, #0]
 8011bb8:	e7ed      	b.n	8011b96 <_free_r+0x22>
 8011bba:	461a      	mov	r2, r3
 8011bbc:	685b      	ldr	r3, [r3, #4]
 8011bbe:	b10b      	cbz	r3, 8011bc4 <_free_r+0x50>
 8011bc0:	42a3      	cmp	r3, r4
 8011bc2:	d9fa      	bls.n	8011bba <_free_r+0x46>
 8011bc4:	6811      	ldr	r1, [r2, #0]
 8011bc6:	1855      	adds	r5, r2, r1
 8011bc8:	42a5      	cmp	r5, r4
 8011bca:	d10b      	bne.n	8011be4 <_free_r+0x70>
 8011bcc:	6824      	ldr	r4, [r4, #0]
 8011bce:	4421      	add	r1, r4
 8011bd0:	1854      	adds	r4, r2, r1
 8011bd2:	42a3      	cmp	r3, r4
 8011bd4:	6011      	str	r1, [r2, #0]
 8011bd6:	d1e0      	bne.n	8011b9a <_free_r+0x26>
 8011bd8:	681c      	ldr	r4, [r3, #0]
 8011bda:	685b      	ldr	r3, [r3, #4]
 8011bdc:	6053      	str	r3, [r2, #4]
 8011bde:	440c      	add	r4, r1
 8011be0:	6014      	str	r4, [r2, #0]
 8011be2:	e7da      	b.n	8011b9a <_free_r+0x26>
 8011be4:	d902      	bls.n	8011bec <_free_r+0x78>
 8011be6:	230c      	movs	r3, #12
 8011be8:	6003      	str	r3, [r0, #0]
 8011bea:	e7d6      	b.n	8011b9a <_free_r+0x26>
 8011bec:	6825      	ldr	r5, [r4, #0]
 8011bee:	1961      	adds	r1, r4, r5
 8011bf0:	428b      	cmp	r3, r1
 8011bf2:	bf04      	itt	eq
 8011bf4:	6819      	ldreq	r1, [r3, #0]
 8011bf6:	685b      	ldreq	r3, [r3, #4]
 8011bf8:	6063      	str	r3, [r4, #4]
 8011bfa:	bf04      	itt	eq
 8011bfc:	1949      	addeq	r1, r1, r5
 8011bfe:	6021      	streq	r1, [r4, #0]
 8011c00:	6054      	str	r4, [r2, #4]
 8011c02:	e7ca      	b.n	8011b9a <_free_r+0x26>
 8011c04:	b003      	add	sp, #12
 8011c06:	bd30      	pop	{r4, r5, pc}
 8011c08:	24011cfc 	.word	0x24011cfc

08011c0c <malloc>:
 8011c0c:	4b02      	ldr	r3, [pc, #8]	; (8011c18 <malloc+0xc>)
 8011c0e:	4601      	mov	r1, r0
 8011c10:	6818      	ldr	r0, [r3, #0]
 8011c12:	f000 b823 	b.w	8011c5c <_malloc_r>
 8011c16:	bf00      	nop
 8011c18:	240000b8 	.word	0x240000b8

08011c1c <sbrk_aligned>:
 8011c1c:	b570      	push	{r4, r5, r6, lr}
 8011c1e:	4e0e      	ldr	r6, [pc, #56]	; (8011c58 <sbrk_aligned+0x3c>)
 8011c20:	460c      	mov	r4, r1
 8011c22:	6831      	ldr	r1, [r6, #0]
 8011c24:	4605      	mov	r5, r0
 8011c26:	b911      	cbnz	r1, 8011c2e <sbrk_aligned+0x12>
 8011c28:	f000 fd9a 	bl	8012760 <_sbrk_r>
 8011c2c:	6030      	str	r0, [r6, #0]
 8011c2e:	4621      	mov	r1, r4
 8011c30:	4628      	mov	r0, r5
 8011c32:	f000 fd95 	bl	8012760 <_sbrk_r>
 8011c36:	1c43      	adds	r3, r0, #1
 8011c38:	d00a      	beq.n	8011c50 <sbrk_aligned+0x34>
 8011c3a:	1cc4      	adds	r4, r0, #3
 8011c3c:	f024 0403 	bic.w	r4, r4, #3
 8011c40:	42a0      	cmp	r0, r4
 8011c42:	d007      	beq.n	8011c54 <sbrk_aligned+0x38>
 8011c44:	1a21      	subs	r1, r4, r0
 8011c46:	4628      	mov	r0, r5
 8011c48:	f000 fd8a 	bl	8012760 <_sbrk_r>
 8011c4c:	3001      	adds	r0, #1
 8011c4e:	d101      	bne.n	8011c54 <sbrk_aligned+0x38>
 8011c50:	f04f 34ff 	mov.w	r4, #4294967295
 8011c54:	4620      	mov	r0, r4
 8011c56:	bd70      	pop	{r4, r5, r6, pc}
 8011c58:	24011d00 	.word	0x24011d00

08011c5c <_malloc_r>:
 8011c5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011c60:	1ccd      	adds	r5, r1, #3
 8011c62:	f025 0503 	bic.w	r5, r5, #3
 8011c66:	3508      	adds	r5, #8
 8011c68:	2d0c      	cmp	r5, #12
 8011c6a:	bf38      	it	cc
 8011c6c:	250c      	movcc	r5, #12
 8011c6e:	2d00      	cmp	r5, #0
 8011c70:	4607      	mov	r7, r0
 8011c72:	db01      	blt.n	8011c78 <_malloc_r+0x1c>
 8011c74:	42a9      	cmp	r1, r5
 8011c76:	d905      	bls.n	8011c84 <_malloc_r+0x28>
 8011c78:	230c      	movs	r3, #12
 8011c7a:	603b      	str	r3, [r7, #0]
 8011c7c:	2600      	movs	r6, #0
 8011c7e:	4630      	mov	r0, r6
 8011c80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011c84:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8011d58 <_malloc_r+0xfc>
 8011c88:	f000 f868 	bl	8011d5c <__malloc_lock>
 8011c8c:	f8d8 3000 	ldr.w	r3, [r8]
 8011c90:	461c      	mov	r4, r3
 8011c92:	bb5c      	cbnz	r4, 8011cec <_malloc_r+0x90>
 8011c94:	4629      	mov	r1, r5
 8011c96:	4638      	mov	r0, r7
 8011c98:	f7ff ffc0 	bl	8011c1c <sbrk_aligned>
 8011c9c:	1c43      	adds	r3, r0, #1
 8011c9e:	4604      	mov	r4, r0
 8011ca0:	d155      	bne.n	8011d4e <_malloc_r+0xf2>
 8011ca2:	f8d8 4000 	ldr.w	r4, [r8]
 8011ca6:	4626      	mov	r6, r4
 8011ca8:	2e00      	cmp	r6, #0
 8011caa:	d145      	bne.n	8011d38 <_malloc_r+0xdc>
 8011cac:	2c00      	cmp	r4, #0
 8011cae:	d048      	beq.n	8011d42 <_malloc_r+0xe6>
 8011cb0:	6823      	ldr	r3, [r4, #0]
 8011cb2:	4631      	mov	r1, r6
 8011cb4:	4638      	mov	r0, r7
 8011cb6:	eb04 0903 	add.w	r9, r4, r3
 8011cba:	f000 fd51 	bl	8012760 <_sbrk_r>
 8011cbe:	4581      	cmp	r9, r0
 8011cc0:	d13f      	bne.n	8011d42 <_malloc_r+0xe6>
 8011cc2:	6821      	ldr	r1, [r4, #0]
 8011cc4:	1a6d      	subs	r5, r5, r1
 8011cc6:	4629      	mov	r1, r5
 8011cc8:	4638      	mov	r0, r7
 8011cca:	f7ff ffa7 	bl	8011c1c <sbrk_aligned>
 8011cce:	3001      	adds	r0, #1
 8011cd0:	d037      	beq.n	8011d42 <_malloc_r+0xe6>
 8011cd2:	6823      	ldr	r3, [r4, #0]
 8011cd4:	442b      	add	r3, r5
 8011cd6:	6023      	str	r3, [r4, #0]
 8011cd8:	f8d8 3000 	ldr.w	r3, [r8]
 8011cdc:	2b00      	cmp	r3, #0
 8011cde:	d038      	beq.n	8011d52 <_malloc_r+0xf6>
 8011ce0:	685a      	ldr	r2, [r3, #4]
 8011ce2:	42a2      	cmp	r2, r4
 8011ce4:	d12b      	bne.n	8011d3e <_malloc_r+0xe2>
 8011ce6:	2200      	movs	r2, #0
 8011ce8:	605a      	str	r2, [r3, #4]
 8011cea:	e00f      	b.n	8011d0c <_malloc_r+0xb0>
 8011cec:	6822      	ldr	r2, [r4, #0]
 8011cee:	1b52      	subs	r2, r2, r5
 8011cf0:	d41f      	bmi.n	8011d32 <_malloc_r+0xd6>
 8011cf2:	2a0b      	cmp	r2, #11
 8011cf4:	d917      	bls.n	8011d26 <_malloc_r+0xca>
 8011cf6:	1961      	adds	r1, r4, r5
 8011cf8:	42a3      	cmp	r3, r4
 8011cfa:	6025      	str	r5, [r4, #0]
 8011cfc:	bf18      	it	ne
 8011cfe:	6059      	strne	r1, [r3, #4]
 8011d00:	6863      	ldr	r3, [r4, #4]
 8011d02:	bf08      	it	eq
 8011d04:	f8c8 1000 	streq.w	r1, [r8]
 8011d08:	5162      	str	r2, [r4, r5]
 8011d0a:	604b      	str	r3, [r1, #4]
 8011d0c:	4638      	mov	r0, r7
 8011d0e:	f104 060b 	add.w	r6, r4, #11
 8011d12:	f000 f829 	bl	8011d68 <__malloc_unlock>
 8011d16:	f026 0607 	bic.w	r6, r6, #7
 8011d1a:	1d23      	adds	r3, r4, #4
 8011d1c:	1af2      	subs	r2, r6, r3
 8011d1e:	d0ae      	beq.n	8011c7e <_malloc_r+0x22>
 8011d20:	1b9b      	subs	r3, r3, r6
 8011d22:	50a3      	str	r3, [r4, r2]
 8011d24:	e7ab      	b.n	8011c7e <_malloc_r+0x22>
 8011d26:	42a3      	cmp	r3, r4
 8011d28:	6862      	ldr	r2, [r4, #4]
 8011d2a:	d1dd      	bne.n	8011ce8 <_malloc_r+0x8c>
 8011d2c:	f8c8 2000 	str.w	r2, [r8]
 8011d30:	e7ec      	b.n	8011d0c <_malloc_r+0xb0>
 8011d32:	4623      	mov	r3, r4
 8011d34:	6864      	ldr	r4, [r4, #4]
 8011d36:	e7ac      	b.n	8011c92 <_malloc_r+0x36>
 8011d38:	4634      	mov	r4, r6
 8011d3a:	6876      	ldr	r6, [r6, #4]
 8011d3c:	e7b4      	b.n	8011ca8 <_malloc_r+0x4c>
 8011d3e:	4613      	mov	r3, r2
 8011d40:	e7cc      	b.n	8011cdc <_malloc_r+0x80>
 8011d42:	230c      	movs	r3, #12
 8011d44:	603b      	str	r3, [r7, #0]
 8011d46:	4638      	mov	r0, r7
 8011d48:	f000 f80e 	bl	8011d68 <__malloc_unlock>
 8011d4c:	e797      	b.n	8011c7e <_malloc_r+0x22>
 8011d4e:	6025      	str	r5, [r4, #0]
 8011d50:	e7dc      	b.n	8011d0c <_malloc_r+0xb0>
 8011d52:	605b      	str	r3, [r3, #4]
 8011d54:	deff      	udf	#255	; 0xff
 8011d56:	bf00      	nop
 8011d58:	24011cfc 	.word	0x24011cfc

08011d5c <__malloc_lock>:
 8011d5c:	4801      	ldr	r0, [pc, #4]	; (8011d64 <__malloc_lock+0x8>)
 8011d5e:	f7ff bedb 	b.w	8011b18 <__retarget_lock_acquire_recursive>
 8011d62:	bf00      	nop
 8011d64:	24011cf8 	.word	0x24011cf8

08011d68 <__malloc_unlock>:
 8011d68:	4801      	ldr	r0, [pc, #4]	; (8011d70 <__malloc_unlock+0x8>)
 8011d6a:	f7ff bed6 	b.w	8011b1a <__retarget_lock_release_recursive>
 8011d6e:	bf00      	nop
 8011d70:	24011cf8 	.word	0x24011cf8

08011d74 <__ssputs_r>:
 8011d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011d78:	688e      	ldr	r6, [r1, #8]
 8011d7a:	461f      	mov	r7, r3
 8011d7c:	42be      	cmp	r6, r7
 8011d7e:	680b      	ldr	r3, [r1, #0]
 8011d80:	4682      	mov	sl, r0
 8011d82:	460c      	mov	r4, r1
 8011d84:	4690      	mov	r8, r2
 8011d86:	d82c      	bhi.n	8011de2 <__ssputs_r+0x6e>
 8011d88:	898a      	ldrh	r2, [r1, #12]
 8011d8a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011d8e:	d026      	beq.n	8011dde <__ssputs_r+0x6a>
 8011d90:	6965      	ldr	r5, [r4, #20]
 8011d92:	6909      	ldr	r1, [r1, #16]
 8011d94:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011d98:	eba3 0901 	sub.w	r9, r3, r1
 8011d9c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011da0:	1c7b      	adds	r3, r7, #1
 8011da2:	444b      	add	r3, r9
 8011da4:	106d      	asrs	r5, r5, #1
 8011da6:	429d      	cmp	r5, r3
 8011da8:	bf38      	it	cc
 8011daa:	461d      	movcc	r5, r3
 8011dac:	0553      	lsls	r3, r2, #21
 8011dae:	d527      	bpl.n	8011e00 <__ssputs_r+0x8c>
 8011db0:	4629      	mov	r1, r5
 8011db2:	f7ff ff53 	bl	8011c5c <_malloc_r>
 8011db6:	4606      	mov	r6, r0
 8011db8:	b360      	cbz	r0, 8011e14 <__ssputs_r+0xa0>
 8011dba:	6921      	ldr	r1, [r4, #16]
 8011dbc:	464a      	mov	r2, r9
 8011dbe:	f7ff fead 	bl	8011b1c <memcpy>
 8011dc2:	89a3      	ldrh	r3, [r4, #12]
 8011dc4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011dc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011dcc:	81a3      	strh	r3, [r4, #12]
 8011dce:	6126      	str	r6, [r4, #16]
 8011dd0:	6165      	str	r5, [r4, #20]
 8011dd2:	444e      	add	r6, r9
 8011dd4:	eba5 0509 	sub.w	r5, r5, r9
 8011dd8:	6026      	str	r6, [r4, #0]
 8011dda:	60a5      	str	r5, [r4, #8]
 8011ddc:	463e      	mov	r6, r7
 8011dde:	42be      	cmp	r6, r7
 8011de0:	d900      	bls.n	8011de4 <__ssputs_r+0x70>
 8011de2:	463e      	mov	r6, r7
 8011de4:	6820      	ldr	r0, [r4, #0]
 8011de6:	4632      	mov	r2, r6
 8011de8:	4641      	mov	r1, r8
 8011dea:	f7ff fda1 	bl	8011930 <memmove>
 8011dee:	68a3      	ldr	r3, [r4, #8]
 8011df0:	1b9b      	subs	r3, r3, r6
 8011df2:	60a3      	str	r3, [r4, #8]
 8011df4:	6823      	ldr	r3, [r4, #0]
 8011df6:	4433      	add	r3, r6
 8011df8:	6023      	str	r3, [r4, #0]
 8011dfa:	2000      	movs	r0, #0
 8011dfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011e00:	462a      	mov	r2, r5
 8011e02:	f000 fcc4 	bl	801278e <_realloc_r>
 8011e06:	4606      	mov	r6, r0
 8011e08:	2800      	cmp	r0, #0
 8011e0a:	d1e0      	bne.n	8011dce <__ssputs_r+0x5a>
 8011e0c:	6921      	ldr	r1, [r4, #16]
 8011e0e:	4650      	mov	r0, sl
 8011e10:	f7ff feb0 	bl	8011b74 <_free_r>
 8011e14:	230c      	movs	r3, #12
 8011e16:	f8ca 3000 	str.w	r3, [sl]
 8011e1a:	89a3      	ldrh	r3, [r4, #12]
 8011e1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011e20:	81a3      	strh	r3, [r4, #12]
 8011e22:	f04f 30ff 	mov.w	r0, #4294967295
 8011e26:	e7e9      	b.n	8011dfc <__ssputs_r+0x88>

08011e28 <_svfiprintf_r>:
 8011e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e2c:	4698      	mov	r8, r3
 8011e2e:	898b      	ldrh	r3, [r1, #12]
 8011e30:	061b      	lsls	r3, r3, #24
 8011e32:	b09d      	sub	sp, #116	; 0x74
 8011e34:	4607      	mov	r7, r0
 8011e36:	460d      	mov	r5, r1
 8011e38:	4614      	mov	r4, r2
 8011e3a:	d50e      	bpl.n	8011e5a <_svfiprintf_r+0x32>
 8011e3c:	690b      	ldr	r3, [r1, #16]
 8011e3e:	b963      	cbnz	r3, 8011e5a <_svfiprintf_r+0x32>
 8011e40:	2140      	movs	r1, #64	; 0x40
 8011e42:	f7ff ff0b 	bl	8011c5c <_malloc_r>
 8011e46:	6028      	str	r0, [r5, #0]
 8011e48:	6128      	str	r0, [r5, #16]
 8011e4a:	b920      	cbnz	r0, 8011e56 <_svfiprintf_r+0x2e>
 8011e4c:	230c      	movs	r3, #12
 8011e4e:	603b      	str	r3, [r7, #0]
 8011e50:	f04f 30ff 	mov.w	r0, #4294967295
 8011e54:	e0d0      	b.n	8011ff8 <_svfiprintf_r+0x1d0>
 8011e56:	2340      	movs	r3, #64	; 0x40
 8011e58:	616b      	str	r3, [r5, #20]
 8011e5a:	2300      	movs	r3, #0
 8011e5c:	9309      	str	r3, [sp, #36]	; 0x24
 8011e5e:	2320      	movs	r3, #32
 8011e60:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011e64:	f8cd 800c 	str.w	r8, [sp, #12]
 8011e68:	2330      	movs	r3, #48	; 0x30
 8011e6a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8012010 <_svfiprintf_r+0x1e8>
 8011e6e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011e72:	f04f 0901 	mov.w	r9, #1
 8011e76:	4623      	mov	r3, r4
 8011e78:	469a      	mov	sl, r3
 8011e7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011e7e:	b10a      	cbz	r2, 8011e84 <_svfiprintf_r+0x5c>
 8011e80:	2a25      	cmp	r2, #37	; 0x25
 8011e82:	d1f9      	bne.n	8011e78 <_svfiprintf_r+0x50>
 8011e84:	ebba 0b04 	subs.w	fp, sl, r4
 8011e88:	d00b      	beq.n	8011ea2 <_svfiprintf_r+0x7a>
 8011e8a:	465b      	mov	r3, fp
 8011e8c:	4622      	mov	r2, r4
 8011e8e:	4629      	mov	r1, r5
 8011e90:	4638      	mov	r0, r7
 8011e92:	f7ff ff6f 	bl	8011d74 <__ssputs_r>
 8011e96:	3001      	adds	r0, #1
 8011e98:	f000 80a9 	beq.w	8011fee <_svfiprintf_r+0x1c6>
 8011e9c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011e9e:	445a      	add	r2, fp
 8011ea0:	9209      	str	r2, [sp, #36]	; 0x24
 8011ea2:	f89a 3000 	ldrb.w	r3, [sl]
 8011ea6:	2b00      	cmp	r3, #0
 8011ea8:	f000 80a1 	beq.w	8011fee <_svfiprintf_r+0x1c6>
 8011eac:	2300      	movs	r3, #0
 8011eae:	f04f 32ff 	mov.w	r2, #4294967295
 8011eb2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011eb6:	f10a 0a01 	add.w	sl, sl, #1
 8011eba:	9304      	str	r3, [sp, #16]
 8011ebc:	9307      	str	r3, [sp, #28]
 8011ebe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011ec2:	931a      	str	r3, [sp, #104]	; 0x68
 8011ec4:	4654      	mov	r4, sl
 8011ec6:	2205      	movs	r2, #5
 8011ec8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011ecc:	4850      	ldr	r0, [pc, #320]	; (8012010 <_svfiprintf_r+0x1e8>)
 8011ece:	f7ee fa0f 	bl	80002f0 <memchr>
 8011ed2:	9a04      	ldr	r2, [sp, #16]
 8011ed4:	b9d8      	cbnz	r0, 8011f0e <_svfiprintf_r+0xe6>
 8011ed6:	06d0      	lsls	r0, r2, #27
 8011ed8:	bf44      	itt	mi
 8011eda:	2320      	movmi	r3, #32
 8011edc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011ee0:	0711      	lsls	r1, r2, #28
 8011ee2:	bf44      	itt	mi
 8011ee4:	232b      	movmi	r3, #43	; 0x2b
 8011ee6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011eea:	f89a 3000 	ldrb.w	r3, [sl]
 8011eee:	2b2a      	cmp	r3, #42	; 0x2a
 8011ef0:	d015      	beq.n	8011f1e <_svfiprintf_r+0xf6>
 8011ef2:	9a07      	ldr	r2, [sp, #28]
 8011ef4:	4654      	mov	r4, sl
 8011ef6:	2000      	movs	r0, #0
 8011ef8:	f04f 0c0a 	mov.w	ip, #10
 8011efc:	4621      	mov	r1, r4
 8011efe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011f02:	3b30      	subs	r3, #48	; 0x30
 8011f04:	2b09      	cmp	r3, #9
 8011f06:	d94d      	bls.n	8011fa4 <_svfiprintf_r+0x17c>
 8011f08:	b1b0      	cbz	r0, 8011f38 <_svfiprintf_r+0x110>
 8011f0a:	9207      	str	r2, [sp, #28]
 8011f0c:	e014      	b.n	8011f38 <_svfiprintf_r+0x110>
 8011f0e:	eba0 0308 	sub.w	r3, r0, r8
 8011f12:	fa09 f303 	lsl.w	r3, r9, r3
 8011f16:	4313      	orrs	r3, r2
 8011f18:	9304      	str	r3, [sp, #16]
 8011f1a:	46a2      	mov	sl, r4
 8011f1c:	e7d2      	b.n	8011ec4 <_svfiprintf_r+0x9c>
 8011f1e:	9b03      	ldr	r3, [sp, #12]
 8011f20:	1d19      	adds	r1, r3, #4
 8011f22:	681b      	ldr	r3, [r3, #0]
 8011f24:	9103      	str	r1, [sp, #12]
 8011f26:	2b00      	cmp	r3, #0
 8011f28:	bfbb      	ittet	lt
 8011f2a:	425b      	neglt	r3, r3
 8011f2c:	f042 0202 	orrlt.w	r2, r2, #2
 8011f30:	9307      	strge	r3, [sp, #28]
 8011f32:	9307      	strlt	r3, [sp, #28]
 8011f34:	bfb8      	it	lt
 8011f36:	9204      	strlt	r2, [sp, #16]
 8011f38:	7823      	ldrb	r3, [r4, #0]
 8011f3a:	2b2e      	cmp	r3, #46	; 0x2e
 8011f3c:	d10c      	bne.n	8011f58 <_svfiprintf_r+0x130>
 8011f3e:	7863      	ldrb	r3, [r4, #1]
 8011f40:	2b2a      	cmp	r3, #42	; 0x2a
 8011f42:	d134      	bne.n	8011fae <_svfiprintf_r+0x186>
 8011f44:	9b03      	ldr	r3, [sp, #12]
 8011f46:	1d1a      	adds	r2, r3, #4
 8011f48:	681b      	ldr	r3, [r3, #0]
 8011f4a:	9203      	str	r2, [sp, #12]
 8011f4c:	2b00      	cmp	r3, #0
 8011f4e:	bfb8      	it	lt
 8011f50:	f04f 33ff 	movlt.w	r3, #4294967295
 8011f54:	3402      	adds	r4, #2
 8011f56:	9305      	str	r3, [sp, #20]
 8011f58:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8012020 <_svfiprintf_r+0x1f8>
 8011f5c:	7821      	ldrb	r1, [r4, #0]
 8011f5e:	2203      	movs	r2, #3
 8011f60:	4650      	mov	r0, sl
 8011f62:	f7ee f9c5 	bl	80002f0 <memchr>
 8011f66:	b138      	cbz	r0, 8011f78 <_svfiprintf_r+0x150>
 8011f68:	9b04      	ldr	r3, [sp, #16]
 8011f6a:	eba0 000a 	sub.w	r0, r0, sl
 8011f6e:	2240      	movs	r2, #64	; 0x40
 8011f70:	4082      	lsls	r2, r0
 8011f72:	4313      	orrs	r3, r2
 8011f74:	3401      	adds	r4, #1
 8011f76:	9304      	str	r3, [sp, #16]
 8011f78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011f7c:	4825      	ldr	r0, [pc, #148]	; (8012014 <_svfiprintf_r+0x1ec>)
 8011f7e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011f82:	2206      	movs	r2, #6
 8011f84:	f7ee f9b4 	bl	80002f0 <memchr>
 8011f88:	2800      	cmp	r0, #0
 8011f8a:	d038      	beq.n	8011ffe <_svfiprintf_r+0x1d6>
 8011f8c:	4b22      	ldr	r3, [pc, #136]	; (8012018 <_svfiprintf_r+0x1f0>)
 8011f8e:	bb1b      	cbnz	r3, 8011fd8 <_svfiprintf_r+0x1b0>
 8011f90:	9b03      	ldr	r3, [sp, #12]
 8011f92:	3307      	adds	r3, #7
 8011f94:	f023 0307 	bic.w	r3, r3, #7
 8011f98:	3308      	adds	r3, #8
 8011f9a:	9303      	str	r3, [sp, #12]
 8011f9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011f9e:	4433      	add	r3, r6
 8011fa0:	9309      	str	r3, [sp, #36]	; 0x24
 8011fa2:	e768      	b.n	8011e76 <_svfiprintf_r+0x4e>
 8011fa4:	fb0c 3202 	mla	r2, ip, r2, r3
 8011fa8:	460c      	mov	r4, r1
 8011faa:	2001      	movs	r0, #1
 8011fac:	e7a6      	b.n	8011efc <_svfiprintf_r+0xd4>
 8011fae:	2300      	movs	r3, #0
 8011fb0:	3401      	adds	r4, #1
 8011fb2:	9305      	str	r3, [sp, #20]
 8011fb4:	4619      	mov	r1, r3
 8011fb6:	f04f 0c0a 	mov.w	ip, #10
 8011fba:	4620      	mov	r0, r4
 8011fbc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011fc0:	3a30      	subs	r2, #48	; 0x30
 8011fc2:	2a09      	cmp	r2, #9
 8011fc4:	d903      	bls.n	8011fce <_svfiprintf_r+0x1a6>
 8011fc6:	2b00      	cmp	r3, #0
 8011fc8:	d0c6      	beq.n	8011f58 <_svfiprintf_r+0x130>
 8011fca:	9105      	str	r1, [sp, #20]
 8011fcc:	e7c4      	b.n	8011f58 <_svfiprintf_r+0x130>
 8011fce:	fb0c 2101 	mla	r1, ip, r1, r2
 8011fd2:	4604      	mov	r4, r0
 8011fd4:	2301      	movs	r3, #1
 8011fd6:	e7f0      	b.n	8011fba <_svfiprintf_r+0x192>
 8011fd8:	ab03      	add	r3, sp, #12
 8011fda:	9300      	str	r3, [sp, #0]
 8011fdc:	462a      	mov	r2, r5
 8011fde:	4b0f      	ldr	r3, [pc, #60]	; (801201c <_svfiprintf_r+0x1f4>)
 8011fe0:	a904      	add	r1, sp, #16
 8011fe2:	4638      	mov	r0, r7
 8011fe4:	f3af 8000 	nop.w
 8011fe8:	1c42      	adds	r2, r0, #1
 8011fea:	4606      	mov	r6, r0
 8011fec:	d1d6      	bne.n	8011f9c <_svfiprintf_r+0x174>
 8011fee:	89ab      	ldrh	r3, [r5, #12]
 8011ff0:	065b      	lsls	r3, r3, #25
 8011ff2:	f53f af2d 	bmi.w	8011e50 <_svfiprintf_r+0x28>
 8011ff6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011ff8:	b01d      	add	sp, #116	; 0x74
 8011ffa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ffe:	ab03      	add	r3, sp, #12
 8012000:	9300      	str	r3, [sp, #0]
 8012002:	462a      	mov	r2, r5
 8012004:	4b05      	ldr	r3, [pc, #20]	; (801201c <_svfiprintf_r+0x1f4>)
 8012006:	a904      	add	r1, sp, #16
 8012008:	4638      	mov	r0, r7
 801200a:	f000 f9bd 	bl	8012388 <_printf_i>
 801200e:	e7eb      	b.n	8011fe8 <_svfiprintf_r+0x1c0>
 8012010:	0801557d 	.word	0x0801557d
 8012014:	08015587 	.word	0x08015587
 8012018:	00000000 	.word	0x00000000
 801201c:	08011d75 	.word	0x08011d75
 8012020:	08015583 	.word	0x08015583

08012024 <__sfputc_r>:
 8012024:	6893      	ldr	r3, [r2, #8]
 8012026:	3b01      	subs	r3, #1
 8012028:	2b00      	cmp	r3, #0
 801202a:	b410      	push	{r4}
 801202c:	6093      	str	r3, [r2, #8]
 801202e:	da08      	bge.n	8012042 <__sfputc_r+0x1e>
 8012030:	6994      	ldr	r4, [r2, #24]
 8012032:	42a3      	cmp	r3, r4
 8012034:	db01      	blt.n	801203a <__sfputc_r+0x16>
 8012036:	290a      	cmp	r1, #10
 8012038:	d103      	bne.n	8012042 <__sfputc_r+0x1e>
 801203a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801203e:	f7ff bbd2 	b.w	80117e6 <__swbuf_r>
 8012042:	6813      	ldr	r3, [r2, #0]
 8012044:	1c58      	adds	r0, r3, #1
 8012046:	6010      	str	r0, [r2, #0]
 8012048:	7019      	strb	r1, [r3, #0]
 801204a:	4608      	mov	r0, r1
 801204c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012050:	4770      	bx	lr

08012052 <__sfputs_r>:
 8012052:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012054:	4606      	mov	r6, r0
 8012056:	460f      	mov	r7, r1
 8012058:	4614      	mov	r4, r2
 801205a:	18d5      	adds	r5, r2, r3
 801205c:	42ac      	cmp	r4, r5
 801205e:	d101      	bne.n	8012064 <__sfputs_r+0x12>
 8012060:	2000      	movs	r0, #0
 8012062:	e007      	b.n	8012074 <__sfputs_r+0x22>
 8012064:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012068:	463a      	mov	r2, r7
 801206a:	4630      	mov	r0, r6
 801206c:	f7ff ffda 	bl	8012024 <__sfputc_r>
 8012070:	1c43      	adds	r3, r0, #1
 8012072:	d1f3      	bne.n	801205c <__sfputs_r+0xa>
 8012074:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012078 <_vfiprintf_r>:
 8012078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801207c:	460d      	mov	r5, r1
 801207e:	b09d      	sub	sp, #116	; 0x74
 8012080:	4614      	mov	r4, r2
 8012082:	4698      	mov	r8, r3
 8012084:	4606      	mov	r6, r0
 8012086:	b118      	cbz	r0, 8012090 <_vfiprintf_r+0x18>
 8012088:	6a03      	ldr	r3, [r0, #32]
 801208a:	b90b      	cbnz	r3, 8012090 <_vfiprintf_r+0x18>
 801208c:	f7ff fa88 	bl	80115a0 <__sinit>
 8012090:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012092:	07d9      	lsls	r1, r3, #31
 8012094:	d405      	bmi.n	80120a2 <_vfiprintf_r+0x2a>
 8012096:	89ab      	ldrh	r3, [r5, #12]
 8012098:	059a      	lsls	r2, r3, #22
 801209a:	d402      	bmi.n	80120a2 <_vfiprintf_r+0x2a>
 801209c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801209e:	f7ff fd3b 	bl	8011b18 <__retarget_lock_acquire_recursive>
 80120a2:	89ab      	ldrh	r3, [r5, #12]
 80120a4:	071b      	lsls	r3, r3, #28
 80120a6:	d501      	bpl.n	80120ac <_vfiprintf_r+0x34>
 80120a8:	692b      	ldr	r3, [r5, #16]
 80120aa:	b99b      	cbnz	r3, 80120d4 <_vfiprintf_r+0x5c>
 80120ac:	4629      	mov	r1, r5
 80120ae:	4630      	mov	r0, r6
 80120b0:	f7ff fbd6 	bl	8011860 <__swsetup_r>
 80120b4:	b170      	cbz	r0, 80120d4 <_vfiprintf_r+0x5c>
 80120b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80120b8:	07dc      	lsls	r4, r3, #31
 80120ba:	d504      	bpl.n	80120c6 <_vfiprintf_r+0x4e>
 80120bc:	f04f 30ff 	mov.w	r0, #4294967295
 80120c0:	b01d      	add	sp, #116	; 0x74
 80120c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80120c6:	89ab      	ldrh	r3, [r5, #12]
 80120c8:	0598      	lsls	r0, r3, #22
 80120ca:	d4f7      	bmi.n	80120bc <_vfiprintf_r+0x44>
 80120cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80120ce:	f7ff fd24 	bl	8011b1a <__retarget_lock_release_recursive>
 80120d2:	e7f3      	b.n	80120bc <_vfiprintf_r+0x44>
 80120d4:	2300      	movs	r3, #0
 80120d6:	9309      	str	r3, [sp, #36]	; 0x24
 80120d8:	2320      	movs	r3, #32
 80120da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80120de:	f8cd 800c 	str.w	r8, [sp, #12]
 80120e2:	2330      	movs	r3, #48	; 0x30
 80120e4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8012298 <_vfiprintf_r+0x220>
 80120e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80120ec:	f04f 0901 	mov.w	r9, #1
 80120f0:	4623      	mov	r3, r4
 80120f2:	469a      	mov	sl, r3
 80120f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80120f8:	b10a      	cbz	r2, 80120fe <_vfiprintf_r+0x86>
 80120fa:	2a25      	cmp	r2, #37	; 0x25
 80120fc:	d1f9      	bne.n	80120f2 <_vfiprintf_r+0x7a>
 80120fe:	ebba 0b04 	subs.w	fp, sl, r4
 8012102:	d00b      	beq.n	801211c <_vfiprintf_r+0xa4>
 8012104:	465b      	mov	r3, fp
 8012106:	4622      	mov	r2, r4
 8012108:	4629      	mov	r1, r5
 801210a:	4630      	mov	r0, r6
 801210c:	f7ff ffa1 	bl	8012052 <__sfputs_r>
 8012110:	3001      	adds	r0, #1
 8012112:	f000 80a9 	beq.w	8012268 <_vfiprintf_r+0x1f0>
 8012116:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012118:	445a      	add	r2, fp
 801211a:	9209      	str	r2, [sp, #36]	; 0x24
 801211c:	f89a 3000 	ldrb.w	r3, [sl]
 8012120:	2b00      	cmp	r3, #0
 8012122:	f000 80a1 	beq.w	8012268 <_vfiprintf_r+0x1f0>
 8012126:	2300      	movs	r3, #0
 8012128:	f04f 32ff 	mov.w	r2, #4294967295
 801212c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012130:	f10a 0a01 	add.w	sl, sl, #1
 8012134:	9304      	str	r3, [sp, #16]
 8012136:	9307      	str	r3, [sp, #28]
 8012138:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801213c:	931a      	str	r3, [sp, #104]	; 0x68
 801213e:	4654      	mov	r4, sl
 8012140:	2205      	movs	r2, #5
 8012142:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012146:	4854      	ldr	r0, [pc, #336]	; (8012298 <_vfiprintf_r+0x220>)
 8012148:	f7ee f8d2 	bl	80002f0 <memchr>
 801214c:	9a04      	ldr	r2, [sp, #16]
 801214e:	b9d8      	cbnz	r0, 8012188 <_vfiprintf_r+0x110>
 8012150:	06d1      	lsls	r1, r2, #27
 8012152:	bf44      	itt	mi
 8012154:	2320      	movmi	r3, #32
 8012156:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801215a:	0713      	lsls	r3, r2, #28
 801215c:	bf44      	itt	mi
 801215e:	232b      	movmi	r3, #43	; 0x2b
 8012160:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012164:	f89a 3000 	ldrb.w	r3, [sl]
 8012168:	2b2a      	cmp	r3, #42	; 0x2a
 801216a:	d015      	beq.n	8012198 <_vfiprintf_r+0x120>
 801216c:	9a07      	ldr	r2, [sp, #28]
 801216e:	4654      	mov	r4, sl
 8012170:	2000      	movs	r0, #0
 8012172:	f04f 0c0a 	mov.w	ip, #10
 8012176:	4621      	mov	r1, r4
 8012178:	f811 3b01 	ldrb.w	r3, [r1], #1
 801217c:	3b30      	subs	r3, #48	; 0x30
 801217e:	2b09      	cmp	r3, #9
 8012180:	d94d      	bls.n	801221e <_vfiprintf_r+0x1a6>
 8012182:	b1b0      	cbz	r0, 80121b2 <_vfiprintf_r+0x13a>
 8012184:	9207      	str	r2, [sp, #28]
 8012186:	e014      	b.n	80121b2 <_vfiprintf_r+0x13a>
 8012188:	eba0 0308 	sub.w	r3, r0, r8
 801218c:	fa09 f303 	lsl.w	r3, r9, r3
 8012190:	4313      	orrs	r3, r2
 8012192:	9304      	str	r3, [sp, #16]
 8012194:	46a2      	mov	sl, r4
 8012196:	e7d2      	b.n	801213e <_vfiprintf_r+0xc6>
 8012198:	9b03      	ldr	r3, [sp, #12]
 801219a:	1d19      	adds	r1, r3, #4
 801219c:	681b      	ldr	r3, [r3, #0]
 801219e:	9103      	str	r1, [sp, #12]
 80121a0:	2b00      	cmp	r3, #0
 80121a2:	bfbb      	ittet	lt
 80121a4:	425b      	neglt	r3, r3
 80121a6:	f042 0202 	orrlt.w	r2, r2, #2
 80121aa:	9307      	strge	r3, [sp, #28]
 80121ac:	9307      	strlt	r3, [sp, #28]
 80121ae:	bfb8      	it	lt
 80121b0:	9204      	strlt	r2, [sp, #16]
 80121b2:	7823      	ldrb	r3, [r4, #0]
 80121b4:	2b2e      	cmp	r3, #46	; 0x2e
 80121b6:	d10c      	bne.n	80121d2 <_vfiprintf_r+0x15a>
 80121b8:	7863      	ldrb	r3, [r4, #1]
 80121ba:	2b2a      	cmp	r3, #42	; 0x2a
 80121bc:	d134      	bne.n	8012228 <_vfiprintf_r+0x1b0>
 80121be:	9b03      	ldr	r3, [sp, #12]
 80121c0:	1d1a      	adds	r2, r3, #4
 80121c2:	681b      	ldr	r3, [r3, #0]
 80121c4:	9203      	str	r2, [sp, #12]
 80121c6:	2b00      	cmp	r3, #0
 80121c8:	bfb8      	it	lt
 80121ca:	f04f 33ff 	movlt.w	r3, #4294967295
 80121ce:	3402      	adds	r4, #2
 80121d0:	9305      	str	r3, [sp, #20]
 80121d2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80122a8 <_vfiprintf_r+0x230>
 80121d6:	7821      	ldrb	r1, [r4, #0]
 80121d8:	2203      	movs	r2, #3
 80121da:	4650      	mov	r0, sl
 80121dc:	f7ee f888 	bl	80002f0 <memchr>
 80121e0:	b138      	cbz	r0, 80121f2 <_vfiprintf_r+0x17a>
 80121e2:	9b04      	ldr	r3, [sp, #16]
 80121e4:	eba0 000a 	sub.w	r0, r0, sl
 80121e8:	2240      	movs	r2, #64	; 0x40
 80121ea:	4082      	lsls	r2, r0
 80121ec:	4313      	orrs	r3, r2
 80121ee:	3401      	adds	r4, #1
 80121f0:	9304      	str	r3, [sp, #16]
 80121f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80121f6:	4829      	ldr	r0, [pc, #164]	; (801229c <_vfiprintf_r+0x224>)
 80121f8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80121fc:	2206      	movs	r2, #6
 80121fe:	f7ee f877 	bl	80002f0 <memchr>
 8012202:	2800      	cmp	r0, #0
 8012204:	d03f      	beq.n	8012286 <_vfiprintf_r+0x20e>
 8012206:	4b26      	ldr	r3, [pc, #152]	; (80122a0 <_vfiprintf_r+0x228>)
 8012208:	bb1b      	cbnz	r3, 8012252 <_vfiprintf_r+0x1da>
 801220a:	9b03      	ldr	r3, [sp, #12]
 801220c:	3307      	adds	r3, #7
 801220e:	f023 0307 	bic.w	r3, r3, #7
 8012212:	3308      	adds	r3, #8
 8012214:	9303      	str	r3, [sp, #12]
 8012216:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012218:	443b      	add	r3, r7
 801221a:	9309      	str	r3, [sp, #36]	; 0x24
 801221c:	e768      	b.n	80120f0 <_vfiprintf_r+0x78>
 801221e:	fb0c 3202 	mla	r2, ip, r2, r3
 8012222:	460c      	mov	r4, r1
 8012224:	2001      	movs	r0, #1
 8012226:	e7a6      	b.n	8012176 <_vfiprintf_r+0xfe>
 8012228:	2300      	movs	r3, #0
 801222a:	3401      	adds	r4, #1
 801222c:	9305      	str	r3, [sp, #20]
 801222e:	4619      	mov	r1, r3
 8012230:	f04f 0c0a 	mov.w	ip, #10
 8012234:	4620      	mov	r0, r4
 8012236:	f810 2b01 	ldrb.w	r2, [r0], #1
 801223a:	3a30      	subs	r2, #48	; 0x30
 801223c:	2a09      	cmp	r2, #9
 801223e:	d903      	bls.n	8012248 <_vfiprintf_r+0x1d0>
 8012240:	2b00      	cmp	r3, #0
 8012242:	d0c6      	beq.n	80121d2 <_vfiprintf_r+0x15a>
 8012244:	9105      	str	r1, [sp, #20]
 8012246:	e7c4      	b.n	80121d2 <_vfiprintf_r+0x15a>
 8012248:	fb0c 2101 	mla	r1, ip, r1, r2
 801224c:	4604      	mov	r4, r0
 801224e:	2301      	movs	r3, #1
 8012250:	e7f0      	b.n	8012234 <_vfiprintf_r+0x1bc>
 8012252:	ab03      	add	r3, sp, #12
 8012254:	9300      	str	r3, [sp, #0]
 8012256:	462a      	mov	r2, r5
 8012258:	4b12      	ldr	r3, [pc, #72]	; (80122a4 <_vfiprintf_r+0x22c>)
 801225a:	a904      	add	r1, sp, #16
 801225c:	4630      	mov	r0, r6
 801225e:	f3af 8000 	nop.w
 8012262:	4607      	mov	r7, r0
 8012264:	1c78      	adds	r0, r7, #1
 8012266:	d1d6      	bne.n	8012216 <_vfiprintf_r+0x19e>
 8012268:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801226a:	07d9      	lsls	r1, r3, #31
 801226c:	d405      	bmi.n	801227a <_vfiprintf_r+0x202>
 801226e:	89ab      	ldrh	r3, [r5, #12]
 8012270:	059a      	lsls	r2, r3, #22
 8012272:	d402      	bmi.n	801227a <_vfiprintf_r+0x202>
 8012274:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012276:	f7ff fc50 	bl	8011b1a <__retarget_lock_release_recursive>
 801227a:	89ab      	ldrh	r3, [r5, #12]
 801227c:	065b      	lsls	r3, r3, #25
 801227e:	f53f af1d 	bmi.w	80120bc <_vfiprintf_r+0x44>
 8012282:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012284:	e71c      	b.n	80120c0 <_vfiprintf_r+0x48>
 8012286:	ab03      	add	r3, sp, #12
 8012288:	9300      	str	r3, [sp, #0]
 801228a:	462a      	mov	r2, r5
 801228c:	4b05      	ldr	r3, [pc, #20]	; (80122a4 <_vfiprintf_r+0x22c>)
 801228e:	a904      	add	r1, sp, #16
 8012290:	4630      	mov	r0, r6
 8012292:	f000 f879 	bl	8012388 <_printf_i>
 8012296:	e7e4      	b.n	8012262 <_vfiprintf_r+0x1ea>
 8012298:	0801557d 	.word	0x0801557d
 801229c:	08015587 	.word	0x08015587
 80122a0:	00000000 	.word	0x00000000
 80122a4:	08012053 	.word	0x08012053
 80122a8:	08015583 	.word	0x08015583

080122ac <_printf_common>:
 80122ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80122b0:	4616      	mov	r6, r2
 80122b2:	4699      	mov	r9, r3
 80122b4:	688a      	ldr	r2, [r1, #8]
 80122b6:	690b      	ldr	r3, [r1, #16]
 80122b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80122bc:	4293      	cmp	r3, r2
 80122be:	bfb8      	it	lt
 80122c0:	4613      	movlt	r3, r2
 80122c2:	6033      	str	r3, [r6, #0]
 80122c4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80122c8:	4607      	mov	r7, r0
 80122ca:	460c      	mov	r4, r1
 80122cc:	b10a      	cbz	r2, 80122d2 <_printf_common+0x26>
 80122ce:	3301      	adds	r3, #1
 80122d0:	6033      	str	r3, [r6, #0]
 80122d2:	6823      	ldr	r3, [r4, #0]
 80122d4:	0699      	lsls	r1, r3, #26
 80122d6:	bf42      	ittt	mi
 80122d8:	6833      	ldrmi	r3, [r6, #0]
 80122da:	3302      	addmi	r3, #2
 80122dc:	6033      	strmi	r3, [r6, #0]
 80122de:	6825      	ldr	r5, [r4, #0]
 80122e0:	f015 0506 	ands.w	r5, r5, #6
 80122e4:	d106      	bne.n	80122f4 <_printf_common+0x48>
 80122e6:	f104 0a19 	add.w	sl, r4, #25
 80122ea:	68e3      	ldr	r3, [r4, #12]
 80122ec:	6832      	ldr	r2, [r6, #0]
 80122ee:	1a9b      	subs	r3, r3, r2
 80122f0:	42ab      	cmp	r3, r5
 80122f2:	dc26      	bgt.n	8012342 <_printf_common+0x96>
 80122f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80122f8:	1e13      	subs	r3, r2, #0
 80122fa:	6822      	ldr	r2, [r4, #0]
 80122fc:	bf18      	it	ne
 80122fe:	2301      	movne	r3, #1
 8012300:	0692      	lsls	r2, r2, #26
 8012302:	d42b      	bmi.n	801235c <_printf_common+0xb0>
 8012304:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012308:	4649      	mov	r1, r9
 801230a:	4638      	mov	r0, r7
 801230c:	47c0      	blx	r8
 801230e:	3001      	adds	r0, #1
 8012310:	d01e      	beq.n	8012350 <_printf_common+0xa4>
 8012312:	6823      	ldr	r3, [r4, #0]
 8012314:	6922      	ldr	r2, [r4, #16]
 8012316:	f003 0306 	and.w	r3, r3, #6
 801231a:	2b04      	cmp	r3, #4
 801231c:	bf02      	ittt	eq
 801231e:	68e5      	ldreq	r5, [r4, #12]
 8012320:	6833      	ldreq	r3, [r6, #0]
 8012322:	1aed      	subeq	r5, r5, r3
 8012324:	68a3      	ldr	r3, [r4, #8]
 8012326:	bf0c      	ite	eq
 8012328:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801232c:	2500      	movne	r5, #0
 801232e:	4293      	cmp	r3, r2
 8012330:	bfc4      	itt	gt
 8012332:	1a9b      	subgt	r3, r3, r2
 8012334:	18ed      	addgt	r5, r5, r3
 8012336:	2600      	movs	r6, #0
 8012338:	341a      	adds	r4, #26
 801233a:	42b5      	cmp	r5, r6
 801233c:	d11a      	bne.n	8012374 <_printf_common+0xc8>
 801233e:	2000      	movs	r0, #0
 8012340:	e008      	b.n	8012354 <_printf_common+0xa8>
 8012342:	2301      	movs	r3, #1
 8012344:	4652      	mov	r2, sl
 8012346:	4649      	mov	r1, r9
 8012348:	4638      	mov	r0, r7
 801234a:	47c0      	blx	r8
 801234c:	3001      	adds	r0, #1
 801234e:	d103      	bne.n	8012358 <_printf_common+0xac>
 8012350:	f04f 30ff 	mov.w	r0, #4294967295
 8012354:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012358:	3501      	adds	r5, #1
 801235a:	e7c6      	b.n	80122ea <_printf_common+0x3e>
 801235c:	18e1      	adds	r1, r4, r3
 801235e:	1c5a      	adds	r2, r3, #1
 8012360:	2030      	movs	r0, #48	; 0x30
 8012362:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012366:	4422      	add	r2, r4
 8012368:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801236c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012370:	3302      	adds	r3, #2
 8012372:	e7c7      	b.n	8012304 <_printf_common+0x58>
 8012374:	2301      	movs	r3, #1
 8012376:	4622      	mov	r2, r4
 8012378:	4649      	mov	r1, r9
 801237a:	4638      	mov	r0, r7
 801237c:	47c0      	blx	r8
 801237e:	3001      	adds	r0, #1
 8012380:	d0e6      	beq.n	8012350 <_printf_common+0xa4>
 8012382:	3601      	adds	r6, #1
 8012384:	e7d9      	b.n	801233a <_printf_common+0x8e>
	...

08012388 <_printf_i>:
 8012388:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801238c:	7e0f      	ldrb	r7, [r1, #24]
 801238e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8012390:	2f78      	cmp	r7, #120	; 0x78
 8012392:	4691      	mov	r9, r2
 8012394:	4680      	mov	r8, r0
 8012396:	460c      	mov	r4, r1
 8012398:	469a      	mov	sl, r3
 801239a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801239e:	d807      	bhi.n	80123b0 <_printf_i+0x28>
 80123a0:	2f62      	cmp	r7, #98	; 0x62
 80123a2:	d80a      	bhi.n	80123ba <_printf_i+0x32>
 80123a4:	2f00      	cmp	r7, #0
 80123a6:	f000 80d4 	beq.w	8012552 <_printf_i+0x1ca>
 80123aa:	2f58      	cmp	r7, #88	; 0x58
 80123ac:	f000 80c0 	beq.w	8012530 <_printf_i+0x1a8>
 80123b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80123b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80123b8:	e03a      	b.n	8012430 <_printf_i+0xa8>
 80123ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80123be:	2b15      	cmp	r3, #21
 80123c0:	d8f6      	bhi.n	80123b0 <_printf_i+0x28>
 80123c2:	a101      	add	r1, pc, #4	; (adr r1, 80123c8 <_printf_i+0x40>)
 80123c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80123c8:	08012421 	.word	0x08012421
 80123cc:	08012435 	.word	0x08012435
 80123d0:	080123b1 	.word	0x080123b1
 80123d4:	080123b1 	.word	0x080123b1
 80123d8:	080123b1 	.word	0x080123b1
 80123dc:	080123b1 	.word	0x080123b1
 80123e0:	08012435 	.word	0x08012435
 80123e4:	080123b1 	.word	0x080123b1
 80123e8:	080123b1 	.word	0x080123b1
 80123ec:	080123b1 	.word	0x080123b1
 80123f0:	080123b1 	.word	0x080123b1
 80123f4:	08012539 	.word	0x08012539
 80123f8:	08012461 	.word	0x08012461
 80123fc:	080124f3 	.word	0x080124f3
 8012400:	080123b1 	.word	0x080123b1
 8012404:	080123b1 	.word	0x080123b1
 8012408:	0801255b 	.word	0x0801255b
 801240c:	080123b1 	.word	0x080123b1
 8012410:	08012461 	.word	0x08012461
 8012414:	080123b1 	.word	0x080123b1
 8012418:	080123b1 	.word	0x080123b1
 801241c:	080124fb 	.word	0x080124fb
 8012420:	682b      	ldr	r3, [r5, #0]
 8012422:	1d1a      	adds	r2, r3, #4
 8012424:	681b      	ldr	r3, [r3, #0]
 8012426:	602a      	str	r2, [r5, #0]
 8012428:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801242c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012430:	2301      	movs	r3, #1
 8012432:	e09f      	b.n	8012574 <_printf_i+0x1ec>
 8012434:	6820      	ldr	r0, [r4, #0]
 8012436:	682b      	ldr	r3, [r5, #0]
 8012438:	0607      	lsls	r7, r0, #24
 801243a:	f103 0104 	add.w	r1, r3, #4
 801243e:	6029      	str	r1, [r5, #0]
 8012440:	d501      	bpl.n	8012446 <_printf_i+0xbe>
 8012442:	681e      	ldr	r6, [r3, #0]
 8012444:	e003      	b.n	801244e <_printf_i+0xc6>
 8012446:	0646      	lsls	r6, r0, #25
 8012448:	d5fb      	bpl.n	8012442 <_printf_i+0xba>
 801244a:	f9b3 6000 	ldrsh.w	r6, [r3]
 801244e:	2e00      	cmp	r6, #0
 8012450:	da03      	bge.n	801245a <_printf_i+0xd2>
 8012452:	232d      	movs	r3, #45	; 0x2d
 8012454:	4276      	negs	r6, r6
 8012456:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801245a:	485a      	ldr	r0, [pc, #360]	; (80125c4 <_printf_i+0x23c>)
 801245c:	230a      	movs	r3, #10
 801245e:	e012      	b.n	8012486 <_printf_i+0xfe>
 8012460:	682b      	ldr	r3, [r5, #0]
 8012462:	6820      	ldr	r0, [r4, #0]
 8012464:	1d19      	adds	r1, r3, #4
 8012466:	6029      	str	r1, [r5, #0]
 8012468:	0605      	lsls	r5, r0, #24
 801246a:	d501      	bpl.n	8012470 <_printf_i+0xe8>
 801246c:	681e      	ldr	r6, [r3, #0]
 801246e:	e002      	b.n	8012476 <_printf_i+0xee>
 8012470:	0641      	lsls	r1, r0, #25
 8012472:	d5fb      	bpl.n	801246c <_printf_i+0xe4>
 8012474:	881e      	ldrh	r6, [r3, #0]
 8012476:	4853      	ldr	r0, [pc, #332]	; (80125c4 <_printf_i+0x23c>)
 8012478:	2f6f      	cmp	r7, #111	; 0x6f
 801247a:	bf0c      	ite	eq
 801247c:	2308      	moveq	r3, #8
 801247e:	230a      	movne	r3, #10
 8012480:	2100      	movs	r1, #0
 8012482:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012486:	6865      	ldr	r5, [r4, #4]
 8012488:	60a5      	str	r5, [r4, #8]
 801248a:	2d00      	cmp	r5, #0
 801248c:	bfa2      	ittt	ge
 801248e:	6821      	ldrge	r1, [r4, #0]
 8012490:	f021 0104 	bicge.w	r1, r1, #4
 8012494:	6021      	strge	r1, [r4, #0]
 8012496:	b90e      	cbnz	r6, 801249c <_printf_i+0x114>
 8012498:	2d00      	cmp	r5, #0
 801249a:	d04b      	beq.n	8012534 <_printf_i+0x1ac>
 801249c:	4615      	mov	r5, r2
 801249e:	fbb6 f1f3 	udiv	r1, r6, r3
 80124a2:	fb03 6711 	mls	r7, r3, r1, r6
 80124a6:	5dc7      	ldrb	r7, [r0, r7]
 80124a8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80124ac:	4637      	mov	r7, r6
 80124ae:	42bb      	cmp	r3, r7
 80124b0:	460e      	mov	r6, r1
 80124b2:	d9f4      	bls.n	801249e <_printf_i+0x116>
 80124b4:	2b08      	cmp	r3, #8
 80124b6:	d10b      	bne.n	80124d0 <_printf_i+0x148>
 80124b8:	6823      	ldr	r3, [r4, #0]
 80124ba:	07de      	lsls	r6, r3, #31
 80124bc:	d508      	bpl.n	80124d0 <_printf_i+0x148>
 80124be:	6923      	ldr	r3, [r4, #16]
 80124c0:	6861      	ldr	r1, [r4, #4]
 80124c2:	4299      	cmp	r1, r3
 80124c4:	bfde      	ittt	le
 80124c6:	2330      	movle	r3, #48	; 0x30
 80124c8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80124cc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80124d0:	1b52      	subs	r2, r2, r5
 80124d2:	6122      	str	r2, [r4, #16]
 80124d4:	f8cd a000 	str.w	sl, [sp]
 80124d8:	464b      	mov	r3, r9
 80124da:	aa03      	add	r2, sp, #12
 80124dc:	4621      	mov	r1, r4
 80124de:	4640      	mov	r0, r8
 80124e0:	f7ff fee4 	bl	80122ac <_printf_common>
 80124e4:	3001      	adds	r0, #1
 80124e6:	d14a      	bne.n	801257e <_printf_i+0x1f6>
 80124e8:	f04f 30ff 	mov.w	r0, #4294967295
 80124ec:	b004      	add	sp, #16
 80124ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80124f2:	6823      	ldr	r3, [r4, #0]
 80124f4:	f043 0320 	orr.w	r3, r3, #32
 80124f8:	6023      	str	r3, [r4, #0]
 80124fa:	4833      	ldr	r0, [pc, #204]	; (80125c8 <_printf_i+0x240>)
 80124fc:	2778      	movs	r7, #120	; 0x78
 80124fe:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8012502:	6823      	ldr	r3, [r4, #0]
 8012504:	6829      	ldr	r1, [r5, #0]
 8012506:	061f      	lsls	r7, r3, #24
 8012508:	f851 6b04 	ldr.w	r6, [r1], #4
 801250c:	d402      	bmi.n	8012514 <_printf_i+0x18c>
 801250e:	065f      	lsls	r7, r3, #25
 8012510:	bf48      	it	mi
 8012512:	b2b6      	uxthmi	r6, r6
 8012514:	07df      	lsls	r7, r3, #31
 8012516:	bf48      	it	mi
 8012518:	f043 0320 	orrmi.w	r3, r3, #32
 801251c:	6029      	str	r1, [r5, #0]
 801251e:	bf48      	it	mi
 8012520:	6023      	strmi	r3, [r4, #0]
 8012522:	b91e      	cbnz	r6, 801252c <_printf_i+0x1a4>
 8012524:	6823      	ldr	r3, [r4, #0]
 8012526:	f023 0320 	bic.w	r3, r3, #32
 801252a:	6023      	str	r3, [r4, #0]
 801252c:	2310      	movs	r3, #16
 801252e:	e7a7      	b.n	8012480 <_printf_i+0xf8>
 8012530:	4824      	ldr	r0, [pc, #144]	; (80125c4 <_printf_i+0x23c>)
 8012532:	e7e4      	b.n	80124fe <_printf_i+0x176>
 8012534:	4615      	mov	r5, r2
 8012536:	e7bd      	b.n	80124b4 <_printf_i+0x12c>
 8012538:	682b      	ldr	r3, [r5, #0]
 801253a:	6826      	ldr	r6, [r4, #0]
 801253c:	6961      	ldr	r1, [r4, #20]
 801253e:	1d18      	adds	r0, r3, #4
 8012540:	6028      	str	r0, [r5, #0]
 8012542:	0635      	lsls	r5, r6, #24
 8012544:	681b      	ldr	r3, [r3, #0]
 8012546:	d501      	bpl.n	801254c <_printf_i+0x1c4>
 8012548:	6019      	str	r1, [r3, #0]
 801254a:	e002      	b.n	8012552 <_printf_i+0x1ca>
 801254c:	0670      	lsls	r0, r6, #25
 801254e:	d5fb      	bpl.n	8012548 <_printf_i+0x1c0>
 8012550:	8019      	strh	r1, [r3, #0]
 8012552:	2300      	movs	r3, #0
 8012554:	6123      	str	r3, [r4, #16]
 8012556:	4615      	mov	r5, r2
 8012558:	e7bc      	b.n	80124d4 <_printf_i+0x14c>
 801255a:	682b      	ldr	r3, [r5, #0]
 801255c:	1d1a      	adds	r2, r3, #4
 801255e:	602a      	str	r2, [r5, #0]
 8012560:	681d      	ldr	r5, [r3, #0]
 8012562:	6862      	ldr	r2, [r4, #4]
 8012564:	2100      	movs	r1, #0
 8012566:	4628      	mov	r0, r5
 8012568:	f7ed fec2 	bl	80002f0 <memchr>
 801256c:	b108      	cbz	r0, 8012572 <_printf_i+0x1ea>
 801256e:	1b40      	subs	r0, r0, r5
 8012570:	6060      	str	r0, [r4, #4]
 8012572:	6863      	ldr	r3, [r4, #4]
 8012574:	6123      	str	r3, [r4, #16]
 8012576:	2300      	movs	r3, #0
 8012578:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801257c:	e7aa      	b.n	80124d4 <_printf_i+0x14c>
 801257e:	6923      	ldr	r3, [r4, #16]
 8012580:	462a      	mov	r2, r5
 8012582:	4649      	mov	r1, r9
 8012584:	4640      	mov	r0, r8
 8012586:	47d0      	blx	sl
 8012588:	3001      	adds	r0, #1
 801258a:	d0ad      	beq.n	80124e8 <_printf_i+0x160>
 801258c:	6823      	ldr	r3, [r4, #0]
 801258e:	079b      	lsls	r3, r3, #30
 8012590:	d413      	bmi.n	80125ba <_printf_i+0x232>
 8012592:	68e0      	ldr	r0, [r4, #12]
 8012594:	9b03      	ldr	r3, [sp, #12]
 8012596:	4298      	cmp	r0, r3
 8012598:	bfb8      	it	lt
 801259a:	4618      	movlt	r0, r3
 801259c:	e7a6      	b.n	80124ec <_printf_i+0x164>
 801259e:	2301      	movs	r3, #1
 80125a0:	4632      	mov	r2, r6
 80125a2:	4649      	mov	r1, r9
 80125a4:	4640      	mov	r0, r8
 80125a6:	47d0      	blx	sl
 80125a8:	3001      	adds	r0, #1
 80125aa:	d09d      	beq.n	80124e8 <_printf_i+0x160>
 80125ac:	3501      	adds	r5, #1
 80125ae:	68e3      	ldr	r3, [r4, #12]
 80125b0:	9903      	ldr	r1, [sp, #12]
 80125b2:	1a5b      	subs	r3, r3, r1
 80125b4:	42ab      	cmp	r3, r5
 80125b6:	dcf2      	bgt.n	801259e <_printf_i+0x216>
 80125b8:	e7eb      	b.n	8012592 <_printf_i+0x20a>
 80125ba:	2500      	movs	r5, #0
 80125bc:	f104 0619 	add.w	r6, r4, #25
 80125c0:	e7f5      	b.n	80125ae <_printf_i+0x226>
 80125c2:	bf00      	nop
 80125c4:	0801558e 	.word	0x0801558e
 80125c8:	0801559f 	.word	0x0801559f

080125cc <fiprintf>:
 80125cc:	b40e      	push	{r1, r2, r3}
 80125ce:	b503      	push	{r0, r1, lr}
 80125d0:	4601      	mov	r1, r0
 80125d2:	ab03      	add	r3, sp, #12
 80125d4:	4805      	ldr	r0, [pc, #20]	; (80125ec <fiprintf+0x20>)
 80125d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80125da:	6800      	ldr	r0, [r0, #0]
 80125dc:	9301      	str	r3, [sp, #4]
 80125de:	f7ff fd4b 	bl	8012078 <_vfiprintf_r>
 80125e2:	b002      	add	sp, #8
 80125e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80125e8:	b003      	add	sp, #12
 80125ea:	4770      	bx	lr
 80125ec:	240000b8 	.word	0x240000b8

080125f0 <__swhatbuf_r>:
 80125f0:	b570      	push	{r4, r5, r6, lr}
 80125f2:	460c      	mov	r4, r1
 80125f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80125f8:	2900      	cmp	r1, #0
 80125fa:	b096      	sub	sp, #88	; 0x58
 80125fc:	4615      	mov	r5, r2
 80125fe:	461e      	mov	r6, r3
 8012600:	da0d      	bge.n	801261e <__swhatbuf_r+0x2e>
 8012602:	89a3      	ldrh	r3, [r4, #12]
 8012604:	f013 0f80 	tst.w	r3, #128	; 0x80
 8012608:	f04f 0100 	mov.w	r1, #0
 801260c:	bf0c      	ite	eq
 801260e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8012612:	2340      	movne	r3, #64	; 0x40
 8012614:	2000      	movs	r0, #0
 8012616:	6031      	str	r1, [r6, #0]
 8012618:	602b      	str	r3, [r5, #0]
 801261a:	b016      	add	sp, #88	; 0x58
 801261c:	bd70      	pop	{r4, r5, r6, pc}
 801261e:	466a      	mov	r2, sp
 8012620:	f000 f87c 	bl	801271c <_fstat_r>
 8012624:	2800      	cmp	r0, #0
 8012626:	dbec      	blt.n	8012602 <__swhatbuf_r+0x12>
 8012628:	9901      	ldr	r1, [sp, #4]
 801262a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801262e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8012632:	4259      	negs	r1, r3
 8012634:	4159      	adcs	r1, r3
 8012636:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801263a:	e7eb      	b.n	8012614 <__swhatbuf_r+0x24>

0801263c <__smakebuf_r>:
 801263c:	898b      	ldrh	r3, [r1, #12]
 801263e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012640:	079d      	lsls	r5, r3, #30
 8012642:	4606      	mov	r6, r0
 8012644:	460c      	mov	r4, r1
 8012646:	d507      	bpl.n	8012658 <__smakebuf_r+0x1c>
 8012648:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801264c:	6023      	str	r3, [r4, #0]
 801264e:	6123      	str	r3, [r4, #16]
 8012650:	2301      	movs	r3, #1
 8012652:	6163      	str	r3, [r4, #20]
 8012654:	b002      	add	sp, #8
 8012656:	bd70      	pop	{r4, r5, r6, pc}
 8012658:	ab01      	add	r3, sp, #4
 801265a:	466a      	mov	r2, sp
 801265c:	f7ff ffc8 	bl	80125f0 <__swhatbuf_r>
 8012660:	9900      	ldr	r1, [sp, #0]
 8012662:	4605      	mov	r5, r0
 8012664:	4630      	mov	r0, r6
 8012666:	f7ff faf9 	bl	8011c5c <_malloc_r>
 801266a:	b948      	cbnz	r0, 8012680 <__smakebuf_r+0x44>
 801266c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012670:	059a      	lsls	r2, r3, #22
 8012672:	d4ef      	bmi.n	8012654 <__smakebuf_r+0x18>
 8012674:	f023 0303 	bic.w	r3, r3, #3
 8012678:	f043 0302 	orr.w	r3, r3, #2
 801267c:	81a3      	strh	r3, [r4, #12]
 801267e:	e7e3      	b.n	8012648 <__smakebuf_r+0xc>
 8012680:	89a3      	ldrh	r3, [r4, #12]
 8012682:	6020      	str	r0, [r4, #0]
 8012684:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012688:	81a3      	strh	r3, [r4, #12]
 801268a:	9b00      	ldr	r3, [sp, #0]
 801268c:	6163      	str	r3, [r4, #20]
 801268e:	9b01      	ldr	r3, [sp, #4]
 8012690:	6120      	str	r0, [r4, #16]
 8012692:	b15b      	cbz	r3, 80126ac <__smakebuf_r+0x70>
 8012694:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012698:	4630      	mov	r0, r6
 801269a:	f000 f851 	bl	8012740 <_isatty_r>
 801269e:	b128      	cbz	r0, 80126ac <__smakebuf_r+0x70>
 80126a0:	89a3      	ldrh	r3, [r4, #12]
 80126a2:	f023 0303 	bic.w	r3, r3, #3
 80126a6:	f043 0301 	orr.w	r3, r3, #1
 80126aa:	81a3      	strh	r3, [r4, #12]
 80126ac:	89a3      	ldrh	r3, [r4, #12]
 80126ae:	431d      	orrs	r5, r3
 80126b0:	81a5      	strh	r5, [r4, #12]
 80126b2:	e7cf      	b.n	8012654 <__smakebuf_r+0x18>

080126b4 <_putc_r>:
 80126b4:	b570      	push	{r4, r5, r6, lr}
 80126b6:	460d      	mov	r5, r1
 80126b8:	4614      	mov	r4, r2
 80126ba:	4606      	mov	r6, r0
 80126bc:	b118      	cbz	r0, 80126c6 <_putc_r+0x12>
 80126be:	6a03      	ldr	r3, [r0, #32]
 80126c0:	b90b      	cbnz	r3, 80126c6 <_putc_r+0x12>
 80126c2:	f7fe ff6d 	bl	80115a0 <__sinit>
 80126c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80126c8:	07d8      	lsls	r0, r3, #31
 80126ca:	d405      	bmi.n	80126d8 <_putc_r+0x24>
 80126cc:	89a3      	ldrh	r3, [r4, #12]
 80126ce:	0599      	lsls	r1, r3, #22
 80126d0:	d402      	bmi.n	80126d8 <_putc_r+0x24>
 80126d2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80126d4:	f7ff fa20 	bl	8011b18 <__retarget_lock_acquire_recursive>
 80126d8:	68a3      	ldr	r3, [r4, #8]
 80126da:	3b01      	subs	r3, #1
 80126dc:	2b00      	cmp	r3, #0
 80126de:	60a3      	str	r3, [r4, #8]
 80126e0:	da05      	bge.n	80126ee <_putc_r+0x3a>
 80126e2:	69a2      	ldr	r2, [r4, #24]
 80126e4:	4293      	cmp	r3, r2
 80126e6:	db12      	blt.n	801270e <_putc_r+0x5a>
 80126e8:	b2eb      	uxtb	r3, r5
 80126ea:	2b0a      	cmp	r3, #10
 80126ec:	d00f      	beq.n	801270e <_putc_r+0x5a>
 80126ee:	6823      	ldr	r3, [r4, #0]
 80126f0:	1c5a      	adds	r2, r3, #1
 80126f2:	6022      	str	r2, [r4, #0]
 80126f4:	701d      	strb	r5, [r3, #0]
 80126f6:	b2ed      	uxtb	r5, r5
 80126f8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80126fa:	07da      	lsls	r2, r3, #31
 80126fc:	d405      	bmi.n	801270a <_putc_r+0x56>
 80126fe:	89a3      	ldrh	r3, [r4, #12]
 8012700:	059b      	lsls	r3, r3, #22
 8012702:	d402      	bmi.n	801270a <_putc_r+0x56>
 8012704:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012706:	f7ff fa08 	bl	8011b1a <__retarget_lock_release_recursive>
 801270a:	4628      	mov	r0, r5
 801270c:	bd70      	pop	{r4, r5, r6, pc}
 801270e:	4629      	mov	r1, r5
 8012710:	4622      	mov	r2, r4
 8012712:	4630      	mov	r0, r6
 8012714:	f7ff f867 	bl	80117e6 <__swbuf_r>
 8012718:	4605      	mov	r5, r0
 801271a:	e7ed      	b.n	80126f8 <_putc_r+0x44>

0801271c <_fstat_r>:
 801271c:	b538      	push	{r3, r4, r5, lr}
 801271e:	4d07      	ldr	r5, [pc, #28]	; (801273c <_fstat_r+0x20>)
 8012720:	2300      	movs	r3, #0
 8012722:	4604      	mov	r4, r0
 8012724:	4608      	mov	r0, r1
 8012726:	4611      	mov	r1, r2
 8012728:	602b      	str	r3, [r5, #0]
 801272a:	f7ee ff7d 	bl	8001628 <_fstat>
 801272e:	1c43      	adds	r3, r0, #1
 8012730:	d102      	bne.n	8012738 <_fstat_r+0x1c>
 8012732:	682b      	ldr	r3, [r5, #0]
 8012734:	b103      	cbz	r3, 8012738 <_fstat_r+0x1c>
 8012736:	6023      	str	r3, [r4, #0]
 8012738:	bd38      	pop	{r3, r4, r5, pc}
 801273a:	bf00      	nop
 801273c:	24011cf4 	.word	0x24011cf4

08012740 <_isatty_r>:
 8012740:	b538      	push	{r3, r4, r5, lr}
 8012742:	4d06      	ldr	r5, [pc, #24]	; (801275c <_isatty_r+0x1c>)
 8012744:	2300      	movs	r3, #0
 8012746:	4604      	mov	r4, r0
 8012748:	4608      	mov	r0, r1
 801274a:	602b      	str	r3, [r5, #0]
 801274c:	f7ee ff72 	bl	8001634 <_isatty>
 8012750:	1c43      	adds	r3, r0, #1
 8012752:	d102      	bne.n	801275a <_isatty_r+0x1a>
 8012754:	682b      	ldr	r3, [r5, #0]
 8012756:	b103      	cbz	r3, 801275a <_isatty_r+0x1a>
 8012758:	6023      	str	r3, [r4, #0]
 801275a:	bd38      	pop	{r3, r4, r5, pc}
 801275c:	24011cf4 	.word	0x24011cf4

08012760 <_sbrk_r>:
 8012760:	b538      	push	{r3, r4, r5, lr}
 8012762:	4d06      	ldr	r5, [pc, #24]	; (801277c <_sbrk_r+0x1c>)
 8012764:	2300      	movs	r3, #0
 8012766:	4604      	mov	r4, r0
 8012768:	4608      	mov	r0, r1
 801276a:	602b      	str	r3, [r5, #0]
 801276c:	f7ee ff66 	bl	800163c <_sbrk>
 8012770:	1c43      	adds	r3, r0, #1
 8012772:	d102      	bne.n	801277a <_sbrk_r+0x1a>
 8012774:	682b      	ldr	r3, [r5, #0]
 8012776:	b103      	cbz	r3, 801277a <_sbrk_r+0x1a>
 8012778:	6023      	str	r3, [r4, #0]
 801277a:	bd38      	pop	{r3, r4, r5, pc}
 801277c:	24011cf4 	.word	0x24011cf4

08012780 <abort>:
 8012780:	b508      	push	{r3, lr}
 8012782:	2006      	movs	r0, #6
 8012784:	f000 f85a 	bl	801283c <raise>
 8012788:	2001      	movs	r0, #1
 801278a:	f7ee ff35 	bl	80015f8 <_exit>

0801278e <_realloc_r>:
 801278e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012792:	4680      	mov	r8, r0
 8012794:	4614      	mov	r4, r2
 8012796:	460e      	mov	r6, r1
 8012798:	b921      	cbnz	r1, 80127a4 <_realloc_r+0x16>
 801279a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801279e:	4611      	mov	r1, r2
 80127a0:	f7ff ba5c 	b.w	8011c5c <_malloc_r>
 80127a4:	b92a      	cbnz	r2, 80127b2 <_realloc_r+0x24>
 80127a6:	f7ff f9e5 	bl	8011b74 <_free_r>
 80127aa:	4625      	mov	r5, r4
 80127ac:	4628      	mov	r0, r5
 80127ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80127b2:	f000 f85f 	bl	8012874 <_malloc_usable_size_r>
 80127b6:	4284      	cmp	r4, r0
 80127b8:	4607      	mov	r7, r0
 80127ba:	d802      	bhi.n	80127c2 <_realloc_r+0x34>
 80127bc:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80127c0:	d812      	bhi.n	80127e8 <_realloc_r+0x5a>
 80127c2:	4621      	mov	r1, r4
 80127c4:	4640      	mov	r0, r8
 80127c6:	f7ff fa49 	bl	8011c5c <_malloc_r>
 80127ca:	4605      	mov	r5, r0
 80127cc:	2800      	cmp	r0, #0
 80127ce:	d0ed      	beq.n	80127ac <_realloc_r+0x1e>
 80127d0:	42bc      	cmp	r4, r7
 80127d2:	4622      	mov	r2, r4
 80127d4:	4631      	mov	r1, r6
 80127d6:	bf28      	it	cs
 80127d8:	463a      	movcs	r2, r7
 80127da:	f7ff f99f 	bl	8011b1c <memcpy>
 80127de:	4631      	mov	r1, r6
 80127e0:	4640      	mov	r0, r8
 80127e2:	f7ff f9c7 	bl	8011b74 <_free_r>
 80127e6:	e7e1      	b.n	80127ac <_realloc_r+0x1e>
 80127e8:	4635      	mov	r5, r6
 80127ea:	e7df      	b.n	80127ac <_realloc_r+0x1e>

080127ec <_raise_r>:
 80127ec:	291f      	cmp	r1, #31
 80127ee:	b538      	push	{r3, r4, r5, lr}
 80127f0:	4604      	mov	r4, r0
 80127f2:	460d      	mov	r5, r1
 80127f4:	d904      	bls.n	8012800 <_raise_r+0x14>
 80127f6:	2316      	movs	r3, #22
 80127f8:	6003      	str	r3, [r0, #0]
 80127fa:	f04f 30ff 	mov.w	r0, #4294967295
 80127fe:	bd38      	pop	{r3, r4, r5, pc}
 8012800:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8012802:	b112      	cbz	r2, 801280a <_raise_r+0x1e>
 8012804:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012808:	b94b      	cbnz	r3, 801281e <_raise_r+0x32>
 801280a:	4620      	mov	r0, r4
 801280c:	f000 f830 	bl	8012870 <_getpid_r>
 8012810:	462a      	mov	r2, r5
 8012812:	4601      	mov	r1, r0
 8012814:	4620      	mov	r0, r4
 8012816:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801281a:	f000 b817 	b.w	801284c <_kill_r>
 801281e:	2b01      	cmp	r3, #1
 8012820:	d00a      	beq.n	8012838 <_raise_r+0x4c>
 8012822:	1c59      	adds	r1, r3, #1
 8012824:	d103      	bne.n	801282e <_raise_r+0x42>
 8012826:	2316      	movs	r3, #22
 8012828:	6003      	str	r3, [r0, #0]
 801282a:	2001      	movs	r0, #1
 801282c:	e7e7      	b.n	80127fe <_raise_r+0x12>
 801282e:	2400      	movs	r4, #0
 8012830:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8012834:	4628      	mov	r0, r5
 8012836:	4798      	blx	r3
 8012838:	2000      	movs	r0, #0
 801283a:	e7e0      	b.n	80127fe <_raise_r+0x12>

0801283c <raise>:
 801283c:	4b02      	ldr	r3, [pc, #8]	; (8012848 <raise+0xc>)
 801283e:	4601      	mov	r1, r0
 8012840:	6818      	ldr	r0, [r3, #0]
 8012842:	f7ff bfd3 	b.w	80127ec <_raise_r>
 8012846:	bf00      	nop
 8012848:	240000b8 	.word	0x240000b8

0801284c <_kill_r>:
 801284c:	b538      	push	{r3, r4, r5, lr}
 801284e:	4d07      	ldr	r5, [pc, #28]	; (801286c <_kill_r+0x20>)
 8012850:	2300      	movs	r3, #0
 8012852:	4604      	mov	r4, r0
 8012854:	4608      	mov	r0, r1
 8012856:	4611      	mov	r1, r2
 8012858:	602b      	str	r3, [r5, #0]
 801285a:	f7ee fec5 	bl	80015e8 <_kill>
 801285e:	1c43      	adds	r3, r0, #1
 8012860:	d102      	bne.n	8012868 <_kill_r+0x1c>
 8012862:	682b      	ldr	r3, [r5, #0]
 8012864:	b103      	cbz	r3, 8012868 <_kill_r+0x1c>
 8012866:	6023      	str	r3, [r4, #0]
 8012868:	bd38      	pop	{r3, r4, r5, pc}
 801286a:	bf00      	nop
 801286c:	24011cf4 	.word	0x24011cf4

08012870 <_getpid_r>:
 8012870:	f7ee beb8 	b.w	80015e4 <_getpid>

08012874 <_malloc_usable_size_r>:
 8012874:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012878:	1f18      	subs	r0, r3, #4
 801287a:	2b00      	cmp	r3, #0
 801287c:	bfbc      	itt	lt
 801287e:	580b      	ldrlt	r3, [r1, r0]
 8012880:	18c0      	addlt	r0, r0, r3
 8012882:	4770      	bx	lr

08012884 <_init>:
 8012884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012886:	bf00      	nop
 8012888:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801288a:	bc08      	pop	{r3}
 801288c:	469e      	mov	lr, r3
 801288e:	4770      	bx	lr

08012890 <_fini>:
 8012890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012892:	bf00      	nop
 8012894:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012896:	bc08      	pop	{r3}
 8012898:	469e      	mov	lr, r3
 801289a:	4770      	bx	lr
